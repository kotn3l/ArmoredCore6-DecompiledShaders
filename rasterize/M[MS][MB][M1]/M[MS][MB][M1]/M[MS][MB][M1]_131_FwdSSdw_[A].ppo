#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1340;
float _3744;
float _3745;
float _3746;
float _3747;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3756 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _394) + _463;
    float _475 = ((((_442.x - _461) * _394) + _461) * 2.0) + (-1.0);
    float _477 = ((((_442.y - _462) * _394) + _462) * 2.0) + (-1.0);
    float _478 = dot(vec2(_475, _477), vec2(_475, _477));
    float _3767 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _516 = _514.x;
    float _517 = 1.0 - _516;
    float _523 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _526 = ((isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : min(_523, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _535 = (_526 - ((((((_516 - _517) * cbMtdParam._m0[24u].z) + _517) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _526))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3788 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _543 = (_536 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) + _401;
    float _544 = (_536 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) + _402;
    float _545 = (_536 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) + _403;
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _559 = _557.x;
    float _560 = 1.0 - _559;
    float _587 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_559 - _560) * cbMtdParam._m0[24u].w) + _560) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3799 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _596 = ((((cbMtdParam._m0[10u].x - _543) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _588) + _543;
    float _597 = ((((cbMtdParam._m0[10u].y - _544) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _588) + _544;
    float _598 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _545)) * _588) + _545;
    vec4 _610 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _626 = _624.x;
    float _644 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _626) * _394) + _626;
    float _648 = ((_610.x - _644) * cbMtdParam._m0[19u].z) + _644;
    float _650 = _648 - (_648 * _536);
    float _652 = _650 - (_650 * _588);
    vec4 _666 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _673 = (_666.x * 2.0) + (-1.0);
    float _674 = (_666.y * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3810 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _683 = (_536 * (_666.z - _472)) + _472;
    float _686 = ((cbMtdParam._m0[23u].y - _683) * _588) + _683;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = (_705.x * 2.0) + (-1.0);
    float _712 = (_705.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3821 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _730 = (((_673 - _475) + (cbMtdParam._m0[21u].x * _475)) * _536) + _475;
    float _731 = (((_674 - _477) + (cbMtdParam._m0[21u].x * _477)) * _536) + _477;
    float _732 = (_536 * (sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) - _483)) + _483;
    float _743 = (((_711 - _730) + (_730 * cbMtdParam._m0[22u].z)) * _588) + _730;
    float _744 = (((_712 - _731) + (_731 * cbMtdParam._m0[22u].z)) * _588) + _731;
    float _745 = ((sqrt(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) - _732) * _588) + _732;
    float _747 = cbMtdParam._m0[22u].x + _496.w;
    float _750 = fma(_745, _244 * NORMAL.x, fma(_744, _251 * TANGENT.x, (_237 * _229) * _743));
    float _753 = fma(_745, _244 * NORMAL.y, fma(_744, _251 * TANGENT.y, (_237 * _230) * _743));
    float _756 = fma(_745, _244 * NORMAL.z, fma(_744, _251 * TANGENT.z, (_237 * _231) * _743));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _3832 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _764 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3854 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3865 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3876 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3887 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _769 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    vec4 _847 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _849 = _847.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1021 = sqrt(((_833 * _833) + (_834 * _834)) + (_835 * _835));
        float _1027 = (cbMatDynParam._m0[5u].x * _1021) + cbMatDynParam._m0[5u].y;
        float _3898 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1032 = (cbMatDynParam._m0[5u].z * _1021) + cbMatDynParam._m0[5u].w;
        float _3909 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) - _1028)) + _1028) < ((_849 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _860 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _861 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _879 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _882 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _885 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    uint _898 = _257 + 9u;
    uint _899 = _898 + uint(cbMatDynParam._m0[0u].w);
    float _905 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_899].x;
    float _906 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_899].y;
    float _907 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_899].z;
    float _3920 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _911 = 1.0 - _769;
    float _912 = _908 * _911;
    float _913 = _909 * _911;
    float _914 = _910 * _911;
    float _919 = (_908 + (-0.039999999105930328369140625)) * _769;
    float _920 = (_909 + (-0.039999999105930328369140625)) * _769;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _769;
    float _922 = _919 + 0.039999999105930328369140625;
    float _924 = _920 + 0.039999999105930328369140625;
    float _925 = _921 + 0.039999999105930328369140625;
    vec4 _934 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _860, cbSceneParam._m0[86u].y * _861));
    float _938 = ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * TEXCOORD_5.w) * _934.x;
    float _939 = dot(vec3(_761, _762, _763), vec3(_840, _841, _842));
    float _942 = _939 * 2.0;
    float _946 = (_942 * _761) - _840;
    float _947 = (_942 * _762) - _841;
    float _948 = (_942 * _763) - _842;
    float _952 = abs(dot(vec3(_840, _841, _842), vec3(_761, _762, _763)));
    float _3953 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _954 = sqrt(_764);
    float _967 = exp2((_954 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_954 * 3.0));
    float _973 = (1.0 - _967) * ((_954 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _974 = _967 * _954;
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1339;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1064 = fma(_1010, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002));
        float _1068 = fma(_1010, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002));
        float _1072 = fma(_1010, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002));
        float _1097 = _1002 + _761;
        float _1098 = _1006 + _762;
        float _1099 = _1010 + _763;
        float _1109 = fma(_1099, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097)) - _1064;
        float _1110 = fma(_1099, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097)) - _1068;
        float _1111 = fma(_1099, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097)) - _1072;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1064 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1068 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[34u].z) + ((((((_1072 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1167 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1133.x + (-0.5));
        float _1169 = _1167 * (_1133.y + (-0.5));
        float _1170 = _1167 * (_1133.z + (-0.5));
        float _1177 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1140.x + (-0.5));
        float _1179 = _1177 * (_1140.y + (-0.5));
        float _1180 = _1177 * (_1140.z + (-0.5));
        float _1187 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1147.x + (-0.5));
        float _1189 = _1187 * (_1147.y + (-0.5));
        float _1190 = _1187 * (_1147.z + (-0.5));
        float _1197 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1154.x + (-0.5));
        float _1199 = _1197 * (_1154.y + (-0.5));
        float _1200 = _1197 * (_1154.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1221 = (dot(vec3(_761, _762, _763), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1231 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4001 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1233 + 1.0))) + _1238) * _1201;
        float _1248 = _1169 * 0.5;
        float _1249 = _1179 * 0.5;
        float _1250 = _1189 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_761, _762, _763), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4034 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1275 + 1.0))) + _1280) * _1202;
        float _1290 = _1170 * 0.5;
        float _1291 = _1180 * 0.5;
        float _1292 = _1190 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_761, _762, _763), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4067 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1317 + 1.0))) + _1322) * _1203;
        _1339 = _1170;
        _1341 = _1169;
        _1342 = _1168;
        _1343 = _1180;
        _1344 = _1179;
        _1345 = _1178;
        _1346 = _1190;
        _1347 = _1189;
        _1348 = _1188;
        _1349 = _1203;
        _1350 = _1202;
        _1351 = _1201;
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1340;
        _1341 = _1340;
        _1342 = _1340;
        _1343 = _1340;
        _1344 = _1340;
        _1345 = _1340;
        _1346 = _1340;
        _1347 = _1340;
        _1348 = _1340;
        _1349 = _1340;
        _1350 = _1340;
        _1351 = _1340;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1382 = fma(_1010, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002));
        float _1386 = fma(_1010, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002));
        float _1390 = fma(_1010, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002));
        float _1413 = _1002 + _761;
        float _1414 = _1006 + _762;
        float _1415 = _1010 + _763;
        float _1425 = fma(_1415, cbModelParam._m0[30u].z, fma(_1414, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1413)) - _1382;
        float _1426 = fma(_1415, cbModelParam._m0[31u].z, fma(_1414, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1413)) - _1386;
        float _1427 = fma(_1415, cbModelParam._m0[32u].z, fma(_1414, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1413)) - _1390;
        float _1431 = inversesqrt(dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427)));
        float _1444 = ((_1431 * _1425) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1382 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1431 * _1426) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1386 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1431 * _1427) / cbModelParam._m0[35u].z) + ((((((_1390 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        float _1481 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1448.x + (-0.5));
        float _1483 = _1481 * (_1448.y + (-0.5));
        float _1484 = _1481 * (_1448.z + (-0.5));
        float _1491 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1455.x + (-0.5));
        float _1493 = _1491 * (_1455.y + (-0.5));
        float _1494 = _1491 * (_1455.z + (-0.5));
        float _1501 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1462.x + (-0.5));
        float _1503 = _1501 * (_1462.y + (-0.5));
        float _1504 = _1501 * (_1462.z + (-0.5));
        float _1511 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1469.x + (-0.5));
        float _1513 = _1511 * (_1469.y + (-0.5));
        float _1514 = _1511 * (_1469.z + (-0.5));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = _1482 * 0.5;
        float _1519 = _1492 * 0.5;
        float _1520 = _1502 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_761, _762, _763), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4130 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1545 + 1.0))) + _1550) * _1515;
        float _1560 = _1483 * 0.5;
        float _1561 = _1493 * 0.5;
        float _1562 = _1503 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_761, _762, _763), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4163 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1587 + 1.0))) + _1592) * _1516;
        float _1602 = _1484 * 0.5;
        float _1603 = _1494 * 0.5;
        float _1604 = _1504 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_761, _762, _763), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4196 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1629 + 1.0))) + _1634) * _1517;
        _1651 = _1484;
        _1652 = _1483;
        _1653 = _1482;
        _1654 = _1494;
        _1655 = _1493;
        _1656 = _1492;
        _1657 = _1504;
        _1658 = _1503;
        _1659 = _1502;
        _1660 = _1517;
        _1661 = _1516;
        _1662 = _1515;
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
    }
    else
    {
        _1651 = _1340;
        _1652 = _1340;
        _1653 = _1340;
        _1654 = _1340;
        _1655 = _1340;
        _1656 = _1340;
        _1657 = _1340;
        _1658 = _1340;
        _1659 = _1340;
        _1660 = _1340;
        _1661 = _1340;
        _1662 = _1340;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1352)) + _1352;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1353)) + _1353;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1354)) + _1354;
    float _1698 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1676, cbSceneParam._m0[89u].y, _1675 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1676, cbSceneParam._m0[90u].y, _1675 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1676, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1675));
    float _1719 = _946 * 0.5;
    float _1720 = _947 * 0.5;
    float _1721 = _948 * 0.5;
    float _1722 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1725 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1728 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1762;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1735 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1339, _1343, _1346, _1349));
        float _1739 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1743 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1750 = dot(vec4(cbModelParam._m0[39u]), vec4(_1719, _1720, _1721, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1773;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1764 = dot(vec4(cbModelParam._m0[40u]), vec4(_1719, _1720, _1721, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1777 = (_1773 * cbModelParam._m0[1u].x) + (_1762 * (1.0 - cbModelParam._m0[1u].x));
    float _1787 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1787 : min(cbModelParam._m0[25u].z, _1787));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1835 = fma(_1010, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002)) + cbModelParam._m0[13u].w;
        float _1839 = fma(_1010, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002)) + cbModelParam._m0[14u].w;
        float _1843 = fma(_1010, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002)) + cbModelParam._m0[15u].w;
        float _1846 = fma(_948, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946));
        float _1849 = fma(_948, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946));
        float _1852 = fma(_948, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946));
        float _1880;
        if (_1846 > 0.0)
        {
            _1880 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1880 = frontier_phi_17_15_ladder;
        }
        float _2103;
        if (_1849 > 0.0)
        {
            _2103 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2103 = frontier_phi_26_22_ladder;
        }
        float _2360;
        if (_1852 > 0.0)
        {
            _2360 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2360 = frontier_phi_38_33_ladder;
        }
        float _2362 = isnan(_2103) ? _1880 : (isnan(_1880) ? _2103 : min(_1880, _2103));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1846) + _1835;
        float _2368 = (_2363 * _1849) + _1839;
        float _2369 = (_2363 * _1852) + _1843;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1788);
            frontier_phi_16_38_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1868 = frontier_phi_16_38_ladder_2;
        _1870 = frontier_phi_16_38_ladder_1;
        _1872 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_946, _947, _948), _1788);
        _1868 = _1856.x * cbModelParam._m0[1u].y;
        _1870 = _1856.y * cbModelParam._m0[1u].y;
        _1872 = _1856.z * cbModelParam._m0[1u].y;
    }
    float _1876 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1876 : min(cbModelParam._m0[25u].w, _1876));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1010, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1010, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1010, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_948, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946));
        float _1944 = fma(_948, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946));
        float _1947 = fma(_948, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946));
        float _2108;
        if (_1941 > 0.0)
        {
            _2108 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2108 = frontier_phi_28_24_ladder;
        }
        float _2387;
        if (_1944 > 0.0)
        {
            _2387 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2387 = frontier_phi_40_35_ladder;
        }
        float _2600;
        if (_1947 > 0.0)
        {
            _2600 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2600 = frontier_phi_49_46_ladder;
        }
        float _2602 = isnan(_2387) ? _2108 : (isnan(_2108) ? _2387 : min(_2108, _2387));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1941) + _1930;
        float _2608 = (_2603 * _1944) + _1934;
        float _2609 = (_2603 * _1947) + _1938;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1877);
            frontier_phi_25_49_ladder = _2808.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2808.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2808.x * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_25_49_ladder_2;
        _1968 = frontier_phi_25_49_ladder_1;
        _1970 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_946, _947, _948), _1877);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1983 = (((_973 * _922) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1966 - _1868)) + _1868);
    float _1985 = (((_973 * _924) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1968 - _1870)) + _1870);
    float _1987 = (((_973 * _925) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    vec4 _2004 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_860, _861));
    float _2006 = _2004.w;
    float _2018 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2006);
    float _2019 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2006);
    float _2020 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2006);
    uvec4 _2024 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2026 = _2024.x * 14u;
    uint _2027 = _2026 + 13u;
    float _2034 = _938 + (-1.0);
    float _2039 = (cbLight._m0[_2027].x * _2034) + 1.0;
    float _2040 = (cbLight._m0[_2027].y * _2034) + 1.0;
    float _2041 = (cbLight._m0[_2027].z * _2034) + 1.0;
    float _2042 = (cbLight._m0[_2027].w * _2034) + 1.0;
    uint _2043 = _2026 + 5u;
    float _2049 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2053 = _2026 + 4u;
    float _2062 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2066 = _2026 | 1u;
    float _2077 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_761, _762, _763));
    float _2080 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_761, _762, _763));
    float _4332 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _4343 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2085 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2087 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * 0.3183098733425140380859375;
    float _2094 = ((cbLight._m0[_2043].x * _2049) * _2087) + (((cbLight._m0[_2053].x * _2018) * _2062) * _2085);
    float _2095 = ((_2049 * cbLight._m0[_2043].y) * _2087) + (((cbLight._m0[_2053].y * _2019) * _2062) * _2085);
    float _2096 = ((_2049 * cbLight._m0[_2043].z) * _2087) + (((cbLight._m0[_2053].z * _2020) * _2062) * _2085);
    uvec4 _2100 = floatBitsToUint(cbLight._m0[_2026 + 12u]);
    bool _2102 = _2100.x == 0u;
    float _2113;
    float _2115;
    float _2117;
    if (_2102)
    {
        _2113 = _2094;
        _2115 = _2095;
        _2117 = _2096;
    }
    else
    {
        uint _2121 = _2026 + 6u;
        float _2137 = (dot(vec3(cbLight._m0[_2026 + 2u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4354 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2140 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2113 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _2094;
        _2115 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _2095;
        _2117 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _2096;
    }
    bool _2120 = _2100.y == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2120)
    {
        _2158 = _2113;
        _2160 = _2115;
        _2162 = _2117;
    }
    else
    {
        uint _2331 = _2026 + 7u;
        float _2347 = (dot(vec3(cbLight._m0[_2026 + 3u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4370 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2350 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2158 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2113;
        _2160 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2115;
        _2162 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2117;
    }
    uint _2165 = _2026 + 8u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _764) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_2026].x + _840;
    float _2181 = cbLight._m0[_2026].y + _841;
    float _2182 = cbLight._m0[_2026].z + _842;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2026].xyz));
    float _4386 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _4397 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2194 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2195 = dot(vec3(_761, _762, _763), vec3(_2187, _2188, _2189));
    float _4408 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2187, _2188, _2189));
    float _4419 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2179 * _2179;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
    float _2216 = 0.959999978542327880859375 - _919;
    float _2218 = 0.959999978542327880859375 - _920;
    float _2219 = 0.959999978542327880859375 - _921;
    float _2226 = 1.0 - _2179;
    float _2237 = (0.5 / (((_2194 * ((_2193 * _2226) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2226) + _2179) * _2193))) * _2193;
    float _4430 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2239 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    uint _2253 = _2026 + 9u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _764) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2066].x + _840;
    float _2267 = cbLight._m0[_2066].y + _841;
    float _2268 = cbLight._m0[_2066].z + _842;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2066].xyz));
    float _4441 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2280 = dot(vec3(_761, _762, _763), vec3(_2273, _2274, _2275));
    float _4452 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2273, _2274, _2275));
    float _4463 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2265 * _2265;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
    float _2306 = 1.0 - _2265;
    float _2316 = (0.5 / (((_2194 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2306) + _2265) * _2279))) * _2279;
    float _4474 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    float _2328 = (((((_2299 * _2216) + _922) * cbLight._m0[_2253].x) * _2318) * _2049) + ((((cbLight._m0[_2165].x * _2018) * ((_2215 * _2216) + _922)) * _2239) * _2062);
    float _2329 = (((((_2299 * _2218) + _924) * cbLight._m0[_2253].y) * _2318) * _2049) + ((((cbLight._m0[_2165].y * _2019) * ((_2215 * _2218) + _924)) * _2239) * _2062);
    float _2330 = (((((_2299 * _2219) + _925) * cbLight._m0[_2253].z) * _2318) * _2049) + ((((cbLight._m0[_2165].z * _2020) * ((_2215 * _2219) + _925)) * _2239) * _2062);
    float _2392;
    float _2394;
    float _2396;
    if (_2102)
    {
        _2392 = _2328;
        _2394 = _2329;
        _2396 = _2330;
    }
    else
    {
        uint _2398 = _2026 + 2u;
        uint _2402 = _2026 + 10u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _764) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _840;
        float _2419 = cbLight._m0[_2398].y + _841;
        float _2420 = cbLight._m0[_2398].z + _842;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2398].xyz));
        float _4485 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2432 = dot(vec3(_761, _762, _763), vec3(_2425, _2426, _2427));
        float _4496 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4507 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2451 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
        float _2458 = 1.0 - _2417;
        float _2468 = (0.5 / (((_2194 * ((_2431 * _2458) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2458) + _2417) * _2431))) * _2431;
        float _4518 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2392 = (((((_2451 * _2216) + _922) * cbLight._m0[_2402].x) * _2470) * _2471) + _2328;
        _2394 = (((((_2451 * _2218) + _924) * cbLight._m0[_2402].y) * _2470) * _2471) + _2329;
        _2396 = (((((_2451 * _2219) + _925) * cbLight._m0[_2402].z) * _2470) * _2471) + _2330;
    }
    float _2506;
    float _2508;
    float _2510;
    if (_2120)
    {
        _2506 = _2392;
        _2508 = _2394;
        _2510 = _2396;
    }
    else
    {
        uint _2517 = _2026 + 3u;
        uint _2521 = _2026 + 11u;
        float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _764) * 0.949999988079071044921875);
        float _2536 = _2535 * _2535;
        float _2537 = cbLight._m0[_2517].x + _840;
        float _2538 = cbLight._m0[_2517].y + _841;
        float _2539 = cbLight._m0[_2517].z + _842;
        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
        float _2544 = _2543 * _2537;
        float _2545 = _2543 * _2538;
        float _2546 = _2543 * _2539;
        float _2547 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2517].xyz));
        float _4534 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2551 = dot(vec3(_761, _762, _763), vec3(_2544, _2545, _2546));
        float _4545 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2555 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2544, _2545, _2546));
        float _4556 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2559 = _2536 * _2536;
        float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
        float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
        float _2577 = 1.0 - _2536;
        float _2587 = (0.5 / (((_2194 * ((_2550 * _2577) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2577) + _2536) * _2550))) * _2550;
        float _4567 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2506 = (((((_2570 * _2216) + _922) * cbLight._m0[_2521].x) * _2589) * _2590) + _2392;
        _2508 = (((((_2570 * _2218) + _924) * cbLight._m0[_2521].y) * _2589) * _2590) + _2394;
        _2510 = (((((_2570 * _2219) + _925) * cbLight._m0[_2521].z) * _2589) * _2590) + _2396;
    }
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_2024.y == 0u)
    {
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2665;
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2665;
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2665;
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.x;
        uint _2692 = uint((float(_2680.y) * floor(float(uint(cbSceneParam._m0[85u].y * _861) / _2681))) + floor(float(uint(cbSceneParam._m0[85u].x * _860) / _2681)));
        float _2702 = (log2(_2668 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2703 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        uint _2706 = uint(isnan(14.0) ? _2703 : (isnan(_2703) ? 14.0 : min(_2703, 14.0)));
        uvec4 _2711 = texelFetch(g_lightClusterGridBuffer, int(((_2706 << 2u) + (_2692 << 6u)) >> 2u));
        uint _2712 = _2711.x;
        uint _2713 = _2680.z;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((((1u << ((_2713 >> 4u) & 15u)) + 4294967295u) & _2712) == 0u) || ((_2713 & 240u) == 0u))
        {
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
        }
        else
        {
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2706 << 5u) + (_2692 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2982)
                {
                    frontier_phi_66_pred = _2966;
                    frontier_phi_66_pred_1 = _2971;
                    frontier_phi_66_pred_2 = _2970;
                    frontier_phi_66_pred_3 = _2969;
                    frontier_phi_66_pred_4 = _2968;
                    frontier_phi_66_pred_5 = _2967;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2981;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2972 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _2666;
                        float _3178 = _3137.y - _2667;
                        float _3179 = _3137.z - _2668;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_879, _882, _885), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4593 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _2666;
                        float _3213 = (-0.0) - _2667;
                        float _3214 = (-0.0) - _2668;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3229 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3230 = 1.0 - _954;
                        float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                        float _3238 = _3237 * _3237;
                        float _3239 = _3238 * _3238;
                        float _3240 = _3219 + _3184;
                        float _3241 = _3220 + _3185;
                        float _3242 = _3221 + _3186;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3250 = dot(vec3(_879, _882, _885), vec3(_3219, _3220, _3221));
                        float _4609 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3254 = dot(vec3(_879, _882, _885), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                        float _4620 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                        float _3262 = _3197 * _3238;
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3187) + _3263;
                        float _4631 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3267 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3268 = 1.0 - _3238;
                        float _3278 = (0.5 / (((_3267 * ((_3253 * _3268) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3238) * _3253))) * _3267;
                        float _4642 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3289 = (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) / ((_3261 * _3261) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3041 = (_3208 * _3156.x) + _3114;
                        _3042 = (_3208 * _3156.y) + _3115;
                        _3043 = (_3208 * _3156.z) + _3116;
                        _3038 = (_3289 * _3173.x) + _3111;
                        _3039 = (_3289 * _3173.y) + _3112;
                        _3040 = (_3289 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_66_pred = _3038;
                    frontier_phi_66_pred_1 = _3043;
                    frontier_phi_66_pred_2 = _3042;
                    frontier_phi_66_pred_3 = _3041;
                    frontier_phi_66_pred_4 = _3040;
                    frontier_phi_66_pred_5 = _3039;
                }
                _2814 = frontier_phi_66_pred;
                _2824 = frontier_phi_66_pred_1;
                _2822 = frontier_phi_66_pred_2;
                _2820 = frontier_phi_66_pred_3;
                _2818 = frontier_phi_66_pred_4;
                _2816 = frontier_phi_66_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2814;
                    _2967 = _2816;
                    _2968 = _2818;
                    _2969 = _2820;
                    _2970 = _2822;
                    _2971 = _2824;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
        }
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.z;
        uint _2830 = (_2828 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2830) & _2712) == 0u)
        {
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
            float _2960 = _2959 * _2666;
            float _2961 = _2959 * _2667;
            float _2962 = _2959 * _2668;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2830 < ((_2828 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3094 = _2813;
                float _3095 = _2815;
                float _3096 = _2817;
                float _3097 = _2819;
                float _3098 = _2821;
                float _3099 = _2823;
                uint _3100 = _2830;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2706 << 5u) + (_2692 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3110)
                    {
                        frontier_phi_77_pred = _3099;
                        frontier_phi_77_pred_1 = _3098;
                        frontier_phi_77_pred_2 = _3097;
                        frontier_phi_77_pred_3 = _3096;
                        frontier_phi_77_pred_4 = _3095;
                        frontier_phi_77_pred_5 = _3094;
                    }
                    else
                    {
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3316 = _3094;
                        float _3317 = _3095;
                        float _3318 = _3096;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        float _3321 = _3099;
                        uint _3322 = _3109;
                        uint _3323;
                        vec4 _3348;
                        float _3349;
                        vec4 _3364;
                        vec3 _3376;
                        vec4 _3391;
                        vec4 _3407;
                        float _3453;
                        bool _3454;
                        for (;;)
                        {
                            uint _3333 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3322));
                            _3323 = (_3322 + 4294967295u) & _3322;
                            uint _3335 = _3333 * 40u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            _3349 = _3348.w;
                            uint _3351 = (_3333 * 40u) + 4u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3333 * 40u) + 8u;
                            _3376 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x));
                            uint _3378 = (_3333 * 40u) + 16u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3394 = (_3333 * 40u) + 20u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3333 * 40u) + 24u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3428 = (_3333 * 40u) + 28u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3453 = fma(_2668, _3441.z, fma(_2667, _3441.y, _3441.x * _2666)) + _3441.w;
                            _3454 = !((fma(_2668, _3422.z, fma(_2667, _3422.y, _3422.x * _2666)) + _3422.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3454)
                            {
                                float _3481 = _3348.x - _2666;
                                float _3482 = _3348.y - _2667;
                                float _3483 = _3348.z - _2668;
                                float _3484 = dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483));
                                float _3487 = inversesqrt(_3484);
                                float _3488 = _3487 * _3481;
                                float _3489 = _3487 * _3482;
                                float _3490 = _3487 * _3483;
                                float _3494 = 1.0 - (_3484 / (_3349 * _3349));
                                float _4653 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3499 = sqrt(_3484) * _3364.w;
                                float _3501 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                                float _3502 = _3501 * _3501;
                                float _3505 = ((1.0 - _3502) * dot(vec3(_3488, _3489, _3490), vec3(_879, _882, _885))) + _3502;
                                float _3508 = _3499 * _3499;
                                float _3512 = (fma(_2668, _3391.z, fma(_2667, _3391.y, _3391.x * _2666)) + _3391.w) / _3453;
                                float _3513 = (fma(_2668, _3407.z, fma(_2667, _3407.y, _3407.x * _2666)) + _3407.w) / _3453;
                                float _3517 = 1.0 - dot(vec2(_3512, _3513), vec2(_3512, _3513));
                                float _4669 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3519 = _3518 * (((isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0))) * _3495) / ((_3508 * 0.699999988079071044921875) + 1.0));
                                float _3531 = exp2(log2(1.0 / ((_3508 * 3.5) + 5.0)) * 0.25);
                                float _3532 = 1.0 - _954;
                                float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                                float _3540 = _3539 * _3539;
                                float _3541 = _3540 * _3540;
                                float _3542 = _3488 - _2960;
                                float _3543 = _3489 - _2961;
                                float _3544 = _3490 - _2962;
                                float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                                float _3552 = dot(vec3(_879, _882, _885), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4680 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3556 = dot(vec3(_879, _882, _885), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                                float _4691 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                                float _3564 = _3501 * _3540;
                                float _3565 = _3564 * _3564;
                                float _3571 = ((1.0 - _3565) * dot(vec3(_879, _882, _885), vec3(_3488, _3489, _3490))) + _3565;
                                float _4702 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3573 = 1.0 - _3540;
                                float _3583 = (0.5 / (((_3572 * ((_3555 * _3573) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3572 * _3573) + _3540) * _3555))) * _3572;
                                float _4713 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3593 = (_3518 * _3495) * (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) / ((_3563 * _3563) * ((_3508 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3519 * _3364.y;
                                frontier_phi_83_pred_1 = _3519 * _3364.x;
                                frontier_phi_83_pred_2 = _3593 * _3376.z;
                                frontier_phi_83_pred_3 = _3593 * _3376.y;
                                frontier_phi_83_pred_4 = _3593 * _3376.x;
                                frontier_phi_83_pred_5 = _3519 * _3364.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3601 = frontier_phi_83_pred;
                            _3600 = frontier_phi_83_pred_1;
                            _3599 = frontier_phi_83_pred_2;
                            _3598 = frontier_phi_83_pred_3;
                            _3597 = frontier_phi_83_pred_4;
                            _3602 = frontier_phi_83_pred_5;
                            _3306 = _3600 + _3319;
                            _3307 = _3601 + _3320;
                            _3308 = _3602 + _3321;
                            _3303 = _3597 + _3316;
                            _3304 = _3598 + _3317;
                            _3305 = _3599 + _3318;
                            if (_3323 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3323;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3308;
                        frontier_phi_77_pred_1 = _3307;
                        frontier_phi_77_pred_2 = _3306;
                        frontier_phi_77_pred_3 = _3305;
                        frontier_phi_77_pred_4 = _3304;
                        frontier_phi_77_pred_5 = _3303;
                    }
                    _2945 = frontier_phi_77_pred;
                    _2943 = frontier_phi_77_pred_1;
                    _2941 = frontier_phi_77_pred_2;
                    _2939 = frontier_phi_77_pred_3;
                    _2937 = frontier_phi_77_pred_4;
                    _2935 = frontier_phi_77_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2935;
                        _3095 = _2937;
                        _3096 = _2939;
                        _3097 = _2941;
                        _3098 = _2943;
                        _3099 = _2945;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2939;
                frontier_phi_58_59_ladder_1 = _2945;
                frontier_phi_58_59_ladder_2 = _2943;
                frontier_phi_58_59_ladder_3 = _2941;
                frontier_phi_58_59_ladder_4 = _2937;
                frontier_phi_58_59_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_58_59_ladder = _2817;
                frontier_phi_58_59_ladder_1 = _2823;
                frontier_phi_58_59_ladder_2 = _2821;
                frontier_phi_58_59_ladder_3 = _2819;
                frontier_phi_58_59_ladder_4 = _2815;
                frontier_phi_58_59_ladder_5 = _2813;
            }
            _2934 = frontier_phi_58_59_ladder_5;
            _2936 = frontier_phi_58_59_ladder_4;
            _2938 = frontier_phi_58_59_ladder;
            _2940 = frontier_phi_58_59_ladder_3;
            _2942 = frontier_phi_58_59_ladder_2;
            _2944 = frontier_phi_58_59_ladder_1;
        }
        float _2949 = isnan(1.0) ? _938 : (isnan(_938) ? 1.0 : min(_938, 1.0));
        _2725 = (_2949 * _2940) + _2158;
        _2727 = (_2949 * _2942) + _2160;
        _2729 = (_2949 * _2944) + _2162;
        _2731 = ((_2934 * _922) * _2949) + _2506;
        _2733 = ((_2936 * _924) * _2949) + _2508;
        _2735 = ((_2938 * _925) * _2949) + _2510;
    }
    else
    {
        _2725 = _2158;
        _2727 = _2160;
        _2729 = _2162;
        _2731 = _2506;
        _2733 = _2508;
        _2735 = _2510;
    }
    float _4729 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4740 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _4751 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2752 = ((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2725 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _938))) + ((_2731 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1777)) * cbPerFrame._m0[3u].x);
    float _2753 = ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2727 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _938))) + ((_2733 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1777)) * cbPerFrame._m0[3u].x);
    float _2754 = ((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2729 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _938))) + ((_2735 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1777)) * cbPerFrame._m0[3u].x);
    uint _2755 = _257 + 6u;
    float _2763 = _860 / cbSceneParam._m0[86u].x;
    float _2764 = _861 / cbSceneParam._m0[86u].y;
    vec4 _2778 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2780 = _2778.x;
    float _2781 = _2778.y;
    float _2782 = _2778.z;
    float _2783 = _2778.w;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _2838 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _2839 = _2838 / _783;
        float _2850 = _2839 * _833;
        float _2851 = _834 * _2839;
        float _2852 = (-0.0) - _2851;
        float _2854 = _2839 * _835;
        float _2856 = (cbSceneParam._m0[77u].w * _2852) / _2838;
        float _2857 = _2856 + cbSceneParam._m0[79u].w;
        float _2858 = cbSceneParam._m0[79u].w - _2851;
        float _2864 = sqrt(((_2850 * _2850) + (_2851 * _2851)) + (_2854 * _2854));
        float _2867 = (1.0 - (cbSceneParam._m0[77u].w / _2838)) * _2864;
        float _2872 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2874 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3051;
        if (abs((_2852 - _2856) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3051 = ((((_2857 > 0.0) ? exp2(_2872 * _2857) : (2.0 - exp2(_2874 * _2857))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2867;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : max(_2857, _2858));
            float _2997 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : min(_2857, _2858));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3051 = ((abs(_2864 / _2852) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2872 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2872 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2874 * _3006) - exp2(_2874 * _3007)) * _2995))) + (_2867 * cbSceneParam._m0[80u].z);
        }
        vec4 _3053 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, 1.0), 0.0);
        float _3062 = exp2((_3051 * (-1.44269502162933349609375)) * (1.0 - _3053.w));
        float _3063 = log2(_3062);
        float _3079 = log2(_2783);
        _2876 = (exp2(_3079 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].x)) * _3053.x) / cbSceneParam._m0[78u].x)) + _2780;
        _2878 = (exp2(_3079 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].y)) * _3053.y) / cbSceneParam._m0[78u].y)) + _2781;
        _2880 = (exp2(_3079 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].z)) * _3053.z) / cbSceneParam._m0[78u].z)) + _2782;
        _2882 = _3062 * _2783;
    }
    else
    {
        _2876 = _2780;
        _2878 = _2781;
        _2880 = _2782;
        _2882 = _2783;
    }
    bool _3089;
    vec4 _2892;
    vec4 _2914;
    float _2916;
    float _2920;
    float _2921;
    float _2922;
    float _2923;
    bool _2933;
    for (;;)
    {
        _2892 = cbMatDynParam._m0[0u];
        float _2894 = roundEven(_2892.y);
        bool _2895 = _2894 == 3.0;
        float _2896 = log2(_2882);
        float _2903 = exp2(_2896 * cbSceneParam._m0[78u].x) * _2752;
        float _2904 = exp2(_2896 * cbSceneParam._m0[78u].y) * _2753;
        float _2905 = exp2(_2896 * cbSceneParam._m0[78u].z) * _2754;
        float _2912 = _849 + (-0.5);
        _2914 = cbMtdParam._m0[1u];
        _2916 = _2914.y * _2912;
        float _2919 = (_2894 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2920 = _2919 * (_2895 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2876)));
        _2921 = _2919 * (_2895 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2878)));
        _2922 = _2919 * (_2895 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2880)));
        _2923 = _2912 * 0.999000012874603271484375;
        _2933 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2933)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2923) < 0.5)
            {
                _3089 = true;
                break;
            }
        }
        uint _3030 = _898 + uint(_2892.w);
        if ((cbInstanceData._m0[_3030].w < 1.0) && ((cbInstanceData._m0[_3030].w + _2923) < 0.5))
        {
            _3089 = true;
            break;
        }
        if ((_2916 + 1.0) < _2914.x)
        {
            _3089 = true;
            break;
        }
        _3089 = false;
        break;
    }
    float _3294;
    if (_3089)
    {
        discard_state = true;
        _3294 = 0.0;
    }
    else
    {
        _3294 = cbInstanceData._m0[_2755].w;
    }
    SV_Target.x = _2920;
    SV_Target.y = _2921;
    SV_Target.z = _2922;
    SV_Target.w = _3294;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2755].w;
    discard_exit();
}


