#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1152;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _332 = (_323.x * 2.0) + (-1.0);
    float _334 = (_323.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3503 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))));
    float _344 = fma(_341, _225, fma(_334, _232, _332 * _218));
    float _347 = fma(_341, _226, fma(_334, _233, _332 * _219));
    float _350 = fma(_341, _227, fma(_334, _234, _332 * _220));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _392 = _390.x;
    float _393 = 1.0 - _392;
    float _402 = (cbMtdParam._m0[19u].x + dot(vec4(_354 * _344, _354 * _347, _354 * _350, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_392 - _393) * cbMtdParam._m0[24u].z) + _393) * cbMtdParam._m0[21u].z);
    float _3514 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _405 = (-0.0) - cbMtdParam._m0[24u].x;
    float _407 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
    float _415 = _403 - ((_403 * TEXCOORD_8.x) * _408);
    float _416 = _403 - ((_403 * TEXCOORD_8.y) * _408);
    float _417 = _403 - ((_403 * TEXCOORD_8.z) * _408);
    float _424 = (_415 * ((_303.x * cbMtdParam._m0[18u].x) - _282)) + _282;
    float _425 = (_416 * ((_303.y * cbMtdParam._m0[18u].y) - _283)) + _283;
    float _426 = (_417 * ((_303.z * cbMtdParam._m0[18u].z) - _284)) + _284;
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _440 = _438.x;
    float _441 = 1.0 - _440;
    float _471 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_440 - _441) * cbMtdParam._m0[24u].w) + _441) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3535 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _480 = ((((cbMtdParam._m0[10u].x - _424) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _472) + _424;
    float _481 = ((((cbMtdParam._m0[10u].y - _425) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _472) + _425;
    float _482 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _426)) * _472) + _426;
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _497 = _495.x;
    float _499 = _497 - (_497 * _415);
    float _501 = _499 - (_499 * _472);
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _522 = (_515.x * 2.0) + (-1.0);
    float _523 = (_515.y * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3546 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _532 = ((_515.z - _327) * _415) + _327;
    float _535 = ((cbMtdParam._m0[23u].y - _532) * _472) + _532;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _560 = (_554.x * 2.0) + (-1.0);
    float _561 = (_554.y * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3557 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _577 = ((sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) - _341) * _417) + _341;
    float _580 = (((_522 - _332) * _415) + _332) + (cbMtdParam._m0[21u].x * _332);
    float _581 = (((_523 - _334) * _416) + _334) + (cbMtdParam._m0[21u].x * _334);
    float _592 = (((_560 - _580) + (_580 * cbMtdParam._m0[22u].z)) * _472) + _580;
    float _593 = (((_561 - _581) + (_581 * cbMtdParam._m0[22u].z)) * _472) + _581;
    float _594 = (_472 * (sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) - _577)) + _577;
    float _596 = cbMtdParam._m0[22u].x + _323.w;
    float _599 = fma(_594, _225, fma(_593, _232, _592 * _218));
    float _602 = fma(_594, _226, fma(_593, _233, _592 * _219));
    float _605 = fma(_594, _227, fma(_593, _234, _592 * _220));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _610 = _609 * _599;
    float _611 = _609 * _602;
    float _612 = _609 * _605;
    float _3568 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _613 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3590 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3601 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3612 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3623 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _618 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _632 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _682 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _672);
    float _683 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _672);
    float _684 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _672);
    float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
    float _689 = _682 * _688;
    float _690 = _683 * _688;
    float _691 = _684 * _688;
    float _697 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _698 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_612, cbSceneParam._m0[5u].z, fma(_611, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _610));
    float _722 = fma(_612, cbSceneParam._m0[6u].z, fma(_611, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _610));
    float _725 = fma(_612, cbSceneParam._m0[7u].z, fma(_611, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _610));
    uint _739 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3634 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _751 = 1.0 - _618;
    float _752 = _748 * _751;
    float _753 = _749 * _751;
    float _754 = _750 * _751;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _618;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _618;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _618;
    float _762 = _759 + 0.039999999105930328369140625;
    float _764 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _697, cbSceneParam._m0[86u].y * _698));
    float _778 = ((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * TEXCOORD_5.w) * _774.x;
    float _779 = dot(vec3(_610, _611, _612), vec3(_689, _690, _691));
    float _782 = _779 * 2.0;
    float _786 = (_782 * _610) - _689;
    float _787 = (_782 * _611) - _690;
    float _788 = (_782 * _612) - _691;
    float _792 = abs(dot(vec3(_689, _690, _691), vec3(_610, _611, _612)));
    float _3667 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _794 = sqrt(_613);
    float _807 = exp2((_794 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_794 * 3.0));
    float _813 = (1.0 - _807) * ((_794 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _814 = _807 * _794;
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1151;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _876 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _880 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _884 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _909 = _842 + _610;
        float _910 = _846 + _611;
        float _911 = _850 + _612;
        float _921 = fma(_911, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909)) - _876;
        float _922 = fma(_911, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909)) - _880;
        float _923 = fma(_911, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909)) - _884;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_876 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_880 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[34u].z) + ((((((_884 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _979 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_945.x + (-0.5));
        float _981 = _979 * (_945.y + (-0.5));
        float _982 = _979 * (_945.z + (-0.5));
        float _989 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_952.x + (-0.5));
        float _991 = _989 * (_952.y + (-0.5));
        float _992 = _989 * (_952.z + (-0.5));
        float _999 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_959.x + (-0.5));
        float _1001 = _999 * (_959.y + (-0.5));
        float _1002 = _999 * (_959.z + (-0.5));
        float _1009 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_966.x + (-0.5));
        float _1011 = _1009 * (_966.y + (-0.5));
        float _1012 = _1009 * (_966.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1033 = (dot(vec3(_610, _611, _612), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1043 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3715 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1045 + 1.0))) + _1050) * _1013;
        float _1060 = _981 * 0.5;
        float _1061 = _991 * 0.5;
        float _1062 = _1001 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_610, _611, _612), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3748 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1087 + 1.0))) + _1092) * _1014;
        float _1102 = _982 * 0.5;
        float _1103 = _992 * 0.5;
        float _1104 = _1002 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_610, _611, _612), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3781 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1129 + 1.0))) + _1134) * _1015;
        _1151 = _982;
        _1153 = _981;
        _1154 = _980;
        _1155 = _992;
        _1156 = _991;
        _1157 = _990;
        _1158 = _1002;
        _1159 = _1001;
        _1160 = _1000;
        _1161 = _1015;
        _1162 = _1014;
        _1163 = _1013;
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _1152;
        _1153 = _1152;
        _1154 = _1152;
        _1155 = _1152;
        _1156 = _1152;
        _1157 = _1152;
        _1158 = _1152;
        _1159 = _1152;
        _1160 = _1152;
        _1161 = _1152;
        _1162 = _1152;
        _1163 = _1152;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1195 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1199 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1222 = _842 + _610;
        float _1223 = _846 + _611;
        float _1224 = _850 + _612;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_610, _611, _612), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3844 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_610, _611, _612), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3877 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_610, _611, _612), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3910 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1152;
        _1461 = _1152;
        _1462 = _1152;
        _1463 = _1152;
        _1464 = _1152;
        _1465 = _1152;
        _1466 = _1152;
        _1467 = _1152;
        _1468 = _1152;
        _1469 = _1152;
        _1470 = _1152;
        _1471 = _1152;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _786 * 0.5;
    float _1529 = _787 * 0.5;
    float _1530 = _788 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1151, _1155, _1158, _1161));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1644 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1648 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1652 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1655 = fma(_788, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786));
        float _1658 = fma(_788, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786));
        float _1661 = fma(_788, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786));
        float _1689;
        if (_1655 > 0.0)
        {
            _1689 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1689 = frontier_phi_14_12_ladder;
        }
        float _1913;
        if (_1658 > 0.0)
        {
            _1913 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1913 = frontier_phi_23_19_ladder;
        }
        float _2170;
        if (_1661 > 0.0)
        {
            _2170 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2170 = frontier_phi_35_30_ladder;
        }
        float _2172 = isnan(_1913) ? _1689 : (isnan(_1689) ? _1913 : min(_1689, _1913));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1655) + _1644;
        float _2178 = (_2173 * _1658) + _1648;
        float _2179 = (_2173 * _1661) + _1652;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2180;
        float _2184 = _2180 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 > _2184) || ((_2178 < _2182) || ((_2177 < _2182) || (_2177 > _2184))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2179, cbModelParam._m0[9u].z, fma(_2178, cbModelParam._m0[9u].y, _2177 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2179, cbModelParam._m0[10u].z, fma(_2178, cbModelParam._m0[10u].y, _2177 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2179, cbModelParam._m0[11u].z, fma(_2178, cbModelParam._m0[11u].y, _2177 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_13_35_ladder = _2307.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2307.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2307.x * cbModelParam._m0[1u].y;
        }
        _1677 = frontier_phi_13_35_ladder_2;
        _1679 = frontier_phi_13_35_ladder_1;
        _1681 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_786, _787, _788), _1597);
        _1677 = _1665.x * cbModelParam._m0[1u].y;
        _1679 = _1665.y * cbModelParam._m0[1u].y;
        _1681 = _1665.z * cbModelParam._m0[1u].y;
    }
    float _1685 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1685 : min(cbModelParam._m0[25u].w, _1685));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_788, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786));
        float _1753 = fma(_788, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786));
        float _1756 = fma(_788, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786));
        float _1918;
        if (_1750 > 0.0)
        {
            _1918 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1918 = frontier_phi_25_21_ladder;
        }
        float _2197;
        if (_1753 > 0.0)
        {
            _2197 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2197 = frontier_phi_37_32_ladder;
        }
        float _2410;
        if (_1756 > 0.0)
        {
            _2410 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2410 = frontier_phi_46_43_ladder;
        }
        float _2412 = isnan(_2197) ? _1918 : (isnan(_1918) ? _2197 : min(_1918, _2197));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1750) + _1739;
        float _2418 = (_2413 * _1753) + _1743;
        float _2419 = (_2413 * _1756) + _1747;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1686);
            frontier_phi_22_46_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_22_46_ladder_2;
        _1777 = frontier_phi_22_46_ladder_1;
        _1779 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_786, _787, _788), _1686);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1792 = (((_813 * _762) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1775 - _1677)) + _1677);
    float _1794 = (((_813 * _764) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1777 - _1679)) + _1679);
    float _1796 = (((_813 * _765) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1779 - _1681)) + _1681);
    float _1799 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    vec4 _1813 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_697, _698));
    float _1815 = _1813.w;
    float _1827 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1815);
    float _1828 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1815);
    float _1829 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1815);
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _778 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1872 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1876 = _1835 | 1u;
    float _1887 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_610, _611, _612));
    float _1890 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_610, _611, _612));
    float _4046 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _4057 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1895 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1897 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1904 = ((cbLight._m0[_1852].x * _1858) * _1897) + (((cbLight._m0[_1862].x * _1827) * _1872) * _1895);
    float _1905 = ((_1858 * cbLight._m0[_1852].y) * _1897) + (((cbLight._m0[_1862].y * _1828) * _1872) * _1895);
    float _1906 = ((_1858 * cbLight._m0[_1852].z) * _1897) + (((cbLight._m0[_1862].z * _1829) * _1872) * _1895);
    uvec4 _1910 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1912 = _1910.x == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1912)
    {
        _1923 = _1904;
        _1925 = _1905;
        _1927 = _1906;
    }
    else
    {
        uint _1931 = _1835 + 6u;
        float _1947 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _4068 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1950 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1923 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1904;
        _1925 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1905;
        _1927 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1906;
    }
    bool _1930 = _1910.y == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1930)
    {
        _1968 = _1923;
        _1970 = _1925;
        _1972 = _1927;
    }
    else
    {
        uint _2141 = _1835 + 7u;
        float _2157 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2158 = _2157 * _2157;
        float _4084 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2159 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2160 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1968 = (((cbLight._m0[_2141].x * 0.3183098733425140380859375) * _2159) * _2160) + _1923;
        _1970 = (((cbLight._m0[_2141].y * 0.3183098733425140380859375) * _2159) * _2160) + _1925;
        _1972 = (((cbLight._m0[_2141].z * 0.3183098733425140380859375) * _2159) * _2160) + _1927;
    }
    uint _1975 = _1835 + 8u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _613) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1835].x + _689;
    float _1991 = cbLight._m0[_1835].y + _690;
    float _1992 = cbLight._m0[_1835].z + _691;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1835].xyz));
    float _4100 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _2004 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2005 = dot(vec3(_610, _611, _612), vec3(_1997, _1998, _1999));
    float _4122 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1997, _1998, _1999));
    float _4133 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1989 * _1989;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
    float _2026 = 0.959999978542327880859375 - _759;
    float _2028 = 0.959999978542327880859375 - _760;
    float _2029 = 0.959999978542327880859375 - _761;
    float _2036 = 1.0 - _1989;
    float _2047 = (0.5 / (((_2004 * ((_2003 * _2036) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2036) + _1989) * _2003))) * _2003;
    float _4144 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    uint _2063 = _1835 + 9u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _613) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1876].x + _689;
    float _2077 = cbLight._m0[_1876].y + _690;
    float _2078 = cbLight._m0[_1876].z + _691;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1876].xyz));
    float _4155 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2090 = dot(vec3(_610, _611, _612), vec3(_2083, _2084, _2085));
    float _4166 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2083, _2084, _2085));
    float _4177 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2075 * _2075;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
    float _2116 = 1.0 - _2075;
    float _2126 = (0.5 / (((_2004 * ((_2089 * _2116) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2116) + _2075) * _2089))) * _2089;
    float _4188 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    float _2138 = (((((_2109 * _2026) + _762) * cbLight._m0[_2063].x) * _2128) * _1858) + ((((cbLight._m0[_1975].x * _1827) * ((_2025 * _2026) + _762)) * _2049) * _1872);
    float _2139 = (((((_2109 * _2028) + _764) * cbLight._m0[_2063].y) * _2128) * _1858) + ((((cbLight._m0[_1975].y * _1828) * ((_2025 * _2028) + _764)) * _2049) * _1872);
    float _2140 = (((((_2109 * _2029) + _765) * cbLight._m0[_2063].z) * _2128) * _1858) + ((((cbLight._m0[_1975].z * _1829) * ((_2025 * _2029) + _765)) * _2049) * _1872);
    float _2202;
    float _2204;
    float _2206;
    if (_1912)
    {
        _2202 = _2138;
        _2204 = _2139;
        _2206 = _2140;
    }
    else
    {
        uint _2208 = _1835 + 2u;
        uint _2212 = _1835 + 10u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _613) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _689;
        float _2229 = cbLight._m0[_2208].y + _690;
        float _2230 = cbLight._m0[_2208].z + _691;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2208].xyz));
        float _4199 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2242 = dot(vec3(_610, _611, _612), vec3(_2235, _2236, _2237));
        float _4210 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4221 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
        float _2268 = 1.0 - _2227;
        float _2278 = (0.5 / (((_2004 * ((_2241 * _2268) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2268) + _2227) * _2241))) * _2241;
        float _4232 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2280 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2281 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2202 = (((((_2261 * _2026) + _762) * cbLight._m0[_2212].x) * _2280) * _2281) + _2138;
        _2204 = (((((_2261 * _2028) + _764) * cbLight._m0[_2212].y) * _2280) * _2281) + _2139;
        _2206 = (((((_2261 * _2029) + _765) * cbLight._m0[_2212].z) * _2280) * _2281) + _2140;
    }
    float _2316;
    float _2318;
    float _2320;
    if (_1930)
    {
        _2316 = _2202;
        _2318 = _2204;
        _2320 = _2206;
    }
    else
    {
        uint _2327 = _1835 + 3u;
        uint _2331 = _1835 + 11u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _613) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _689;
        float _2348 = cbLight._m0[_2327].y + _690;
        float _2349 = cbLight._m0[_2327].z + _691;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2327].xyz));
        float _4248 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2361 = dot(vec3(_610, _611, _612), vec3(_2354, _2355, _2356));
        float _4259 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4270 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
        float _2387 = 1.0 - _2346;
        float _2397 = (0.5 / (((_2004 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2387) + _2346) * _2360))) * _2360;
        float _4281 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2316 = (((((_2380 * _2026) + _762) * cbLight._m0[_2331].x) * _2399) * _2400) + _2202;
        _2318 = (((((_2380 * _2028) + _764) * cbLight._m0[_2331].y) * _2399) * _2400) + _2204;
        _2320 = (((((_2380 * _2029) + _765) * cbLight._m0[_2331].z) * _2399) * _2400) + _2206;
    }
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_1833.y == 0u)
    {
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2475;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2475;
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2475;
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.x;
        uint _2502 = uint((float(_2490.y) * floor(float(uint(cbSceneParam._m0[85u].y * _698) / _2491))) + floor(float(uint(cbSceneParam._m0[85u].x * _697) / _2491)));
        float _2512 = (log2(_2478 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2513 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        uint _2516 = uint(isnan(14.0) ? _2513 : (isnan(_2513) ? 14.0 : min(_2513, 14.0)));
        uvec4 _2521 = texelFetch(g_lightClusterGridBuffer, int(((_2516 << 2u) + (_2502 << 6u)) >> 2u));
        uint _2522 = _2521.x;
        uint _2523 = _2490.z;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((((1u << ((_2523 >> 4u) & 15u)) + 4294967295u) & _2522) == 0u) || ((_2523 & 240u) == 0u))
        {
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
        }
        else
        {
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            uint _2773 = 0u;
            uint _2782;
            bool _2783;
            for (;;)
            {
                _2782 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                _2783 = _2782 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2783)
                {
                    frontier_phi_61_pred = _2767;
                    frontier_phi_61_pred_1 = _2772;
                    frontier_phi_61_pred_2 = _2771;
                    frontier_phi_61_pred_3 = _2770;
                    frontier_phi_61_pred_4 = _2769;
                    frontier_phi_61_pred_5 = _2768;
                }
                else
                {
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    uint _2897;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2782;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    for (;;)
                    {
                        uint _2901 = uint(findLSB(_2897)) + (_2773 << 5u);
                        uint _2898 = (_2897 + 4294967295u) & _2897;
                        uint _2903 = _2901 * 48u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2923 = (_2901 * 48u) + 4u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2942 = (_2901 * 48u) + 8u;
                        vec3 _2953 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x));
                        float _2957 = _2917.x - _2476;
                        float _2958 = _2917.y - _2477;
                        float _2959 = _2917.z - _2478;
                        float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                        float _2963 = inversesqrt(_2960);
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2967 = dot(vec3(_719, _722, _725), vec3(_2964, _2965, _2966));
                        float _2972 = 1.0 - (_2960 * _2917.w);
                        float _4307 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2974 = sqrt(_2960) * _2936.w;
                        float _2977 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2967) + _2978;
                        float _2984 = _2974 * _2974;
                        float _2988 = ((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2973) / ((_2984 * 0.699999988079071044921875) + 1.0);
                        float _2992 = (-0.0) - _2476;
                        float _2993 = (-0.0) - _2477;
                        float _2994 = (-0.0) - _2478;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3009 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                        float _3010 = 1.0 - _794;
                        float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                        float _3018 = _3017 * _3017;
                        float _3019 = _3018 * _3018;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3022 = _3001 + _2966;
                        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                        float _3030 = dot(vec3(_719, _722, _725), vec3(_2999, _3000, _3001));
                        float _4323 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3033 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3034 = dot(vec3(_719, _722, _725), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                        float _4334 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                        float _3042 = _2977 * _3018;
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _2967) + _3043;
                        float _4345 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3047 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3048 = 1.0 - _3018;
                        float _3058 = (0.5 / (((_3047 * ((_3033 * _3048) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3018) * _3033))) * _3047;
                        float _4356 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3069 = (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3041 * _3041) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125))) * _2973;
                        _2826 = (_2988 * _2936.x) + _2894;
                        _2827 = (_2988 * _2936.y) + _2895;
                        _2828 = (_2988 * _2936.z) + _2896;
                        _2823 = (_3069 * _2953.x) + _2891;
                        _2824 = (_3069 * _2953.y) + _2892;
                        _2825 = (_3069 * _2953.z) + _2893;
                        if (_2898 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2898;
                        }
                    }
                    frontier_phi_61_pred = _2823;
                    frontier_phi_61_pred_1 = _2828;
                    frontier_phi_61_pred_2 = _2827;
                    frontier_phi_61_pred_3 = _2826;
                    frontier_phi_61_pred_4 = _2825;
                    frontier_phi_61_pred_5 = _2824;
                }
                _2624 = frontier_phi_61_pred;
                _2634 = frontier_phi_61_pred_1;
                _2632 = frontier_phi_61_pred_2;
                _2630 = frontier_phi_61_pred_3;
                _2628 = frontier_phi_61_pred_4;
                _2626 = frontier_phi_61_pred_5;
                uint _2774 = _2773 + 1u;
                if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2767 = _2624;
                    _2768 = _2626;
                    _2769 = _2628;
                    _2770 = _2630;
                    _2771 = _2632;
                    _2772 = _2634;
                    _2773 = _2774;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
        }
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.z;
        uint _2640 = (_2638 >> 8u) & 15u;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((4294967295u << _2640) & _2522) == 0u)
        {
            _2735 = _2623;
            _2737 = _2625;
            _2739 = _2627;
            _2741 = _2629;
            _2743 = _2631;
            _2745 = _2633;
        }
        else
        {
            float _2760 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
            float _2761 = _2760 * _2476;
            float _2762 = _2760 * _2477;
            float _2763 = _2760 * _2478;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2640 < ((_2638 >> 12u) & 15u))
            {
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2874 = _2623;
                float _2875 = _2625;
                float _2876 = _2627;
                float _2877 = _2629;
                float _2878 = _2631;
                float _2879 = _2633;
                uint _2880 = _2640;
                uint _2889;
                bool _2890;
                for (;;)
                {
                    _2889 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                    _2890 = _2889 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2890)
                    {
                        frontier_phi_67_pred = _2877;
                        frontier_phi_67_pred_1 = _2878;
                        frontier_phi_67_pred_2 = _2879;
                        frontier_phi_67_pred_3 = _2876;
                        frontier_phi_67_pred_4 = _2875;
                        frontier_phi_67_pred_5 = _2874;
                    }
                    else
                    {
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        uint _3093 = _2889;
                        uint _3094;
                        vec4 _3119;
                        float _3120;
                        vec4 _3135;
                        vec3 _3147;
                        vec4 _3163;
                        vec4 _3179;
                        float _3225;
                        bool _3226;
                        for (;;)
                        {
                            uint _3104 = ((_2880 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3093));
                            _3094 = (_3093 + 4294967295u) & _3093;
                            uint _3106 = _3104 * 40u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3120 = _3119.w;
                            uint _3122 = (_3104 * 40u) + 4u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3104 * 40u) + 8u;
                            _3147 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x));
                            uint _3150 = (_3104 * 40u) + 16u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3166 = (_3104 * 40u) + 20u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3104 * 40u) + 24u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3200 = (_3104 * 40u) + 28u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3225 = fma(_2478, _3213.z, fma(_2477, _3213.y, _3213.x * _2476)) + _3213.w;
                            _3226 = !((fma(_2478, _3194.z, fma(_2477, _3194.y, _3194.x * _2476)) + _3194.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3226)
                            {
                                float _3253 = _3119.x - _2476;
                                float _3254 = _3119.y - _2477;
                                float _3255 = _3119.z - _2478;
                                float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                                float _3259 = inversesqrt(_3256);
                                float _3260 = _3259 * _3253;
                                float _3261 = _3259 * _3254;
                                float _3262 = _3259 * _3255;
                                float _3266 = 1.0 - (_3256 / (_3120 * _3120));
                                float _4367 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3271 = sqrt(_3256) * _3135.w;
                                float _3273 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                                float _3274 = _3273 * _3273;
                                float _3277 = ((1.0 - _3274) * dot(vec3(_3260, _3261, _3262), vec3(_719, _722, _725))) + _3274;
                                float _3280 = _3271 * _3271;
                                float _3284 = (fma(_2478, _3163.z, fma(_2477, _3163.y, _3163.x * _2476)) + _3163.w) / _3225;
                                float _3285 = (fma(_2478, _3179.z, fma(_2477, _3179.y, _3179.x * _2476)) + _3179.w) / _3225;
                                float _3289 = 1.0 - dot(vec2(_3284, _3285), vec2(_3284, _3285));
                                float _4383 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3291 = _3290 * (((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3267) / ((_3280 * 0.699999988079071044921875) + 1.0));
                                float _3303 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3304 = 1.0 - _794;
                                float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                                float _3312 = _3311 * _3311;
                                float _3313 = _3312 * _3312;
                                float _3314 = _3260 - _2761;
                                float _3315 = _3261 - _2762;
                                float _3316 = _3262 - _2763;
                                float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                                float _3324 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2761, (-0.0) - _2762, (-0.0) - _2763));
                                float _4394 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3328 = dot(vec3(_719, _722, _725), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                                float _4405 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                                float _3336 = _3273 * _3312;
                                float _3337 = _3336 * _3336;
                                float _3343 = ((1.0 - _3337) * dot(vec3(_719, _722, _725), vec3(_3260, _3261, _3262))) + _3337;
                                float _4416 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3345 = 1.0 - _3312;
                                float _3355 = (0.5 / (((_3344 * ((_3327 * _3345) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3312) * _3327))) * _3344;
                                float _4427 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3365 = (_3290 * _3267) * (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3335 * _3335) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3365 * _3147.x;
                                frontier_phi_73_pred_1 = _3365 * _3147.y;
                                frontier_phi_73_pred_2 = _3291 * _3135.z;
                                frontier_phi_73_pred_3 = _3291 * _3135.y;
                                frontier_phi_73_pred_4 = _3291 * _3135.x;
                                frontier_phi_73_pred_5 = _3365 * _3147.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3369 = frontier_phi_73_pred;
                            _3370 = frontier_phi_73_pred_1;
                            _3374 = frontier_phi_73_pred_2;
                            _3373 = frontier_phi_73_pred_3;
                            _3372 = frontier_phi_73_pred_4;
                            _3371 = frontier_phi_73_pred_5;
                            _3077 = _3372 + _3090;
                            _3078 = _3373 + _3091;
                            _3079 = _3374 + _3092;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            _3076 = _3371 + _3089;
                            if (_3094 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3094;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3077;
                        frontier_phi_67_pred_1 = _3078;
                        frontier_phi_67_pred_2 = _3079;
                        frontier_phi_67_pred_3 = _3076;
                        frontier_phi_67_pred_4 = _3075;
                        frontier_phi_67_pred_5 = _3074;
                    }
                    _2742 = frontier_phi_67_pred;
                    _2744 = frontier_phi_67_pred_1;
                    _2746 = frontier_phi_67_pred_2;
                    _2740 = frontier_phi_67_pred_3;
                    _2738 = frontier_phi_67_pred_4;
                    _2736 = frontier_phi_67_pred_5;
                    uint _2881 = _2880 + 1u;
                    if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2874 = _2736;
                        _2875 = _2738;
                        _2876 = _2740;
                        _2877 = _2742;
                        _2878 = _2744;
                        _2879 = _2746;
                        _2880 = _2881;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2744;
                frontier_phi_55_56_ladder_1 = _2746;
                frontier_phi_55_56_ladder_2 = _2742;
                frontier_phi_55_56_ladder_3 = _2740;
                frontier_phi_55_56_ladder_4 = _2738;
                frontier_phi_55_56_ladder_5 = _2736;
            }
            else
            {
                frontier_phi_55_56_ladder = _2631;
                frontier_phi_55_56_ladder_1 = _2633;
                frontier_phi_55_56_ladder_2 = _2629;
                frontier_phi_55_56_ladder_3 = _2627;
                frontier_phi_55_56_ladder_4 = _2625;
                frontier_phi_55_56_ladder_5 = _2623;
            }
            _2735 = frontier_phi_55_56_ladder_5;
            _2737 = frontier_phi_55_56_ladder_4;
            _2739 = frontier_phi_55_56_ladder_3;
            _2741 = frontier_phi_55_56_ladder_2;
            _2743 = frontier_phi_55_56_ladder;
            _2745 = frontier_phi_55_56_ladder_1;
        }
        float _2750 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
        _2535 = (_2750 * _2741) + _1968;
        _2537 = (_2750 * _2743) + _1970;
        _2539 = (_2750 * _2745) + _1972;
        _2541 = ((_2735 * _762) * _2750) + _2316;
        _2543 = ((_2737 * _764) * _2750) + _2318;
        _2545 = ((_2739 * _765) * _2750) + _2320;
    }
    else
    {
        _2535 = _1968;
        _2537 = _1970;
        _2539 = _1972;
        _2541 = _2316;
        _2543 = _2318;
        _2545 = _2320;
    }
    float _4443 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4454 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4465 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    uint _2565 = _237 + 6u;
    float _2573 = _697 / cbSceneParam._m0[86u].x;
    float _2574 = _698 / cbSceneParam._m0[86u].y;
    vec4 _2588 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, (log2((isnan(cbSceneParam._m0[77u].w) ? _632 : (isnan(_632) ? cbSceneParam._m0[77u].w : min(_632, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2590 = _2588.x;
    float _2591 = _2588.y;
    float _2592 = _2588.z;
    float _2593 = _2588.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_632 > cbSceneParam._m0[78u].w)
    {
        float _2648 = isnan(_632) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _632 : min(cbSceneParam._m0[80u].w, _632));
        float _2649 = _2648 / _632;
        float _2660 = _2649 * _682;
        float _2661 = _683 * _2649;
        float _2662 = (-0.0) - _2661;
        float _2663 = _2649 * _684;
        float _2665 = (cbSceneParam._m0[77u].w * _2662) / _2648;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2661;
        float _2673 = sqrt(((_2660 * _2660) + (_2661 * _2661)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2648)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2836;
        if (abs((_2662 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2836 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2796 = 1.0 / cbSceneParam._m0[80u].x;
            float _2797 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2798 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            _2836 = ((abs(_2673 / _2662) * cbSceneParam._m0[80u].y) * ((((_2807 - _2808) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))))) * _2796)) - ((exp2(_2683 * _2807) - exp2(_2683 * _2808)) * _2796))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2838 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, 1.0), 0.0);
        float _2847 = exp2((_2836 * (-1.44269502162933349609375)) * (1.0 - _2838.w));
        float _2848 = log2(_2847);
        float _2864 = log2(_2593);
        _2685 = (exp2(_2864 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].x)) * _2838.x) / cbSceneParam._m0[78u].x)) + _2590;
        _2687 = (exp2(_2864 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].y)) * _2838.y) / cbSceneParam._m0[78u].y)) + _2591;
        _2689 = (exp2(_2864 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].z)) * _2838.z) / cbSceneParam._m0[78u].z)) + _2592;
        _2691 = _2847 * _2593;
    }
    else
    {
        _2685 = _2590;
        _2687 = _2591;
        _2689 = _2592;
        _2691 = _2593;
    }
    float _2703 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2704 = _2703 == 3.0;
    float _2705 = log2(_2691);
    float _2712 = exp2(_2705 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2535 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _778))) + ((_2541 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2713 = exp2(_2705 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2537 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _778))) + ((_2543 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2714 = exp2(_2705 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2539 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _778))) + ((_2545 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2723 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2723 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.y = _2723 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.z = _2723 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.w = cbInstanceData._m0[_2565].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2565].w;
}


