#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1422;
float _3800;
float _3801;
float _3802;
float _3803;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3812 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _396) + _492;
    float _504 = ((((_471.x - _490) * _396) + _490) * 2.0) + (-1.0);
    float _505 = ((((_471.y - _491) * _396) + _491) * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3823 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _543 = (_504 + ((((_444.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_531.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _544 = (_505 + ((((_444.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_531.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _547 = fma(_511, _247, fma(_544, _254, _543 * _240));
    float _550 = fma(_511, _248, fma(_544, _255, _543 * _241));
    float _553 = fma(_511, _249, fma(_544, _256, _543 * _242));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _593 = (cbMtdParam._m0[19u].x + dot(vec4(_557 * _547, _557 * _550, _557 * _553, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_586 - _587) * cbMtdParam._m0[24u].z) + _587) * cbMtdParam._m0[21u].z);
    float _3834 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _596 = (-0.0) - cbMtdParam._m0[24u].x;
    float _598 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
    float _606 = _594 - ((_594 * TEXCOORD_8.x) * _599);
    float _607 = _594 - ((_594 * TEXCOORD_8.y) * _599);
    float _608 = _594 - ((_594 * TEXCOORD_8.z) * _599);
    float _615 = (_606 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) + _403;
    float _616 = (_607 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) + _404;
    float _617 = (_608 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) + _405;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _660 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3855 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _669 = ((((cbMtdParam._m0[10u].x - _615) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _661) + _615;
    float _670 = ((((cbMtdParam._m0[10u].y - _616) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _661) + _616;
    float _671 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _617)) * _661) + _617;
    vec4 _697 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _699 = _697.x;
    float _717 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _699) * _396) + _699;
    float _721 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _717) * cbMtdParam._m0[19u].z) + _717;
    float _723 = _721 - (_721 * _606);
    float _725 = _723 - (_723 * _661);
    float _730 = (((_444.z - _501) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _501;
    float _734 = ((_531.z - _730) * cbMtdParam._m0[19u].w) + _730;
    vec4 _748 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _755 = (_748.x * 2.0) + (-1.0);
    float _756 = (_748.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _3866 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _765 = ((_748.z - _734) * _606) + _734;
    float _768 = ((cbMtdParam._m0[23u].y - _765) * _661) + _765;
    vec4 _787 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _793 = (_787.x * 2.0) + (-1.0);
    float _794 = (_787.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _3877 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _810 = ((sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) - _511) * _608) + _511;
    float _813 = (((_755 - _543) * _606) + _543) + (cbMtdParam._m0[21u].x * _543);
    float _814 = (((_756 - _544) * _607) + _544) + (cbMtdParam._m0[21u].x * _544);
    float _825 = (((_793 - _813) + (_813 * cbMtdParam._m0[22u].z)) * _661) + _813;
    float _826 = (((_794 - _814) + (_814 * cbMtdParam._m0[22u].z)) * _661) + _814;
    float _827 = (_661 * (sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) - _810)) + _810;
    float _829 = cbMtdParam._m0[22u].x + _531.w;
    float _832 = fma(_827, _247, fma(_826, _254, _825 * _240));
    float _835 = fma(_827, _248, fma(_826, _255, _825 * _241));
    float _838 = fma(_827, _249, fma(_826, _256, _825 * _242));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _3888 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _846 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _3910 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3921 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3932 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3943 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _851 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    vec4 _929 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _931 = _929.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1103 = sqrt(((_915 * _915) + (_916 * _916)) + (_917 * _917));
        float _1109 = (cbMatDynParam._m0[5u].x * _1103) + cbMatDynParam._m0[5u].y;
        float _3954 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1114 = (cbMatDynParam._m0[5u].z * _1103) + cbMatDynParam._m0[5u].w;
        float _3965 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) - _1110)) + _1110) < ((_931 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _942 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _943 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _961 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _964 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _967 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _980 = _259 + 9u;
    uint _981 = _980 + uint(cbMatDynParam._m0[0u].w);
    float _987 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_981].x;
    float _988 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_981].y;
    float _989 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_981].z;
    float _3976 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _993 = 1.0 - _851;
    float _994 = _990 * _993;
    float _995 = _991 * _993;
    float _996 = _992 * _993;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _851;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _851;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _851;
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _942, cbSceneParam._m0[86u].y * _943));
    float _1020 = ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * TEXCOORD_5.w) * _1016.x;
    float _1021 = dot(vec3(_843, _844, _845), vec3(_922, _923, _924));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _843) - _922;
    float _1029 = (_1024 * _844) - _923;
    float _1030 = (_1024 * _845) - _924;
    float _1034 = abs(dot(vec3(_922, _923, _924), vec3(_843, _844, _845)));
    float _4009 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_846);
    float _1049 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1055 = (1.0 - _1049) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1056 = _1049 * _1036;
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1421;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1146 = fma(_1092, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084));
        float _1150 = fma(_1092, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084));
        float _1154 = fma(_1092, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084));
        float _1179 = _1084 + _843;
        float _1180 = _1088 + _844;
        float _1181 = _1092 + _845;
        float _1191 = fma(_1181, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179)) - _1146;
        float _1192 = fma(_1181, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179)) - _1150;
        float _1193 = fma(_1181, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179)) - _1154;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1146 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1150 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[34u].z) + ((((((_1154 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1249 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1215.x + (-0.5));
        float _1251 = _1249 * (_1215.y + (-0.5));
        float _1252 = _1249 * (_1215.z + (-0.5));
        float _1259 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1222.x + (-0.5));
        float _1261 = _1259 * (_1222.y + (-0.5));
        float _1262 = _1259 * (_1222.z + (-0.5));
        float _1269 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1229.x + (-0.5));
        float _1271 = _1269 * (_1229.y + (-0.5));
        float _1272 = _1269 * (_1229.z + (-0.5));
        float _1279 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1236.x + (-0.5));
        float _1281 = _1279 * (_1236.y + (-0.5));
        float _1282 = _1279 * (_1236.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1303 = (dot(vec3(_843, _844, _845), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1313 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4057 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1315 + 1.0))) + _1320) * _1283;
        float _1330 = _1251 * 0.5;
        float _1331 = _1261 * 0.5;
        float _1332 = _1271 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_843, _844, _845), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4090 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1357 + 1.0))) + _1362) * _1284;
        float _1372 = _1252 * 0.5;
        float _1373 = _1262 * 0.5;
        float _1374 = _1272 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_843, _844, _845), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4123 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1399 + 1.0))) + _1404) * _1285;
        _1421 = _1252;
        _1423 = _1251;
        _1424 = _1250;
        _1425 = _1262;
        _1426 = _1261;
        _1427 = _1260;
        _1428 = _1272;
        _1429 = _1271;
        _1430 = _1270;
        _1431 = _1285;
        _1432 = _1284;
        _1433 = _1283;
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1422;
        _1423 = _1422;
        _1424 = _1422;
        _1425 = _1422;
        _1426 = _1422;
        _1427 = _1422;
        _1428 = _1422;
        _1429 = _1422;
        _1430 = _1422;
        _1431 = _1422;
        _1432 = _1422;
        _1433 = _1422;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1464 = fma(_1092, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084));
        float _1468 = fma(_1092, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084));
        float _1472 = fma(_1092, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084));
        float _1495 = _1084 + _843;
        float _1496 = _1088 + _844;
        float _1497 = _1092 + _845;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1464;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1468;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1472;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1526 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1464 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1468 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1472 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        float _1563 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1530.x + (-0.5));
        float _1565 = _1563 * (_1530.y + (-0.5));
        float _1566 = _1563 * (_1530.z + (-0.5));
        float _1573 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1537.x + (-0.5));
        float _1575 = _1573 * (_1537.y + (-0.5));
        float _1576 = _1573 * (_1537.z + (-0.5));
        float _1583 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1544.x + (-0.5));
        float _1585 = _1583 * (_1544.y + (-0.5));
        float _1586 = _1583 * (_1544.z + (-0.5));
        float _1593 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1551.x + (-0.5));
        float _1595 = _1593 * (_1551.y + (-0.5));
        float _1596 = _1593 * (_1551.z + (-0.5));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = _1564 * 0.5;
        float _1601 = _1574 * 0.5;
        float _1602 = _1584 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_843, _844, _845), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4186 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1627 + 1.0))) + _1632) * _1597;
        float _1642 = _1565 * 0.5;
        float _1643 = _1575 * 0.5;
        float _1644 = _1585 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_843, _844, _845), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4219 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1669 + 1.0))) + _1674) * _1598;
        float _1684 = _1566 * 0.5;
        float _1685 = _1576 * 0.5;
        float _1686 = _1586 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_843, _844, _845), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4252 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1711 + 1.0))) + _1716) * _1599;
        _1733 = _1566;
        _1734 = _1565;
        _1735 = _1564;
        _1736 = _1576;
        _1737 = _1575;
        _1738 = _1574;
        _1739 = _1586;
        _1740 = _1585;
        _1741 = _1584;
        _1742 = _1599;
        _1743 = _1598;
        _1744 = _1597;
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
    }
    else
    {
        _1733 = _1422;
        _1734 = _1422;
        _1735 = _1422;
        _1736 = _1422;
        _1737 = _1422;
        _1738 = _1422;
        _1739 = _1422;
        _1740 = _1422;
        _1741 = _1422;
        _1742 = _1422;
        _1743 = _1422;
        _1744 = _1422;
        _1745 = 0.0;
        _1746 = 0.0;
        _1747 = 0.0;
    }
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1434)) + _1434;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1435)) + _1435;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1436)) + _1436;
    float _1780 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1757));
    float _1801 = _1028 * 0.5;
    float _1802 = _1029 * 0.5;
    float _1803 = _1030 * 0.5;
    float _1804 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1807 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1810 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1844;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1817 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1421, _1425, _1428, _1431));
        float _1821 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1825 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1832 = dot(vec4(cbModelParam._m0[39u]), vec4(_1801, _1802, _1803, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1855;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1846 = dot(vec4(cbModelParam._m0[40u]), vec4(_1801, _1802, _1803, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1859 = (_1855 * cbModelParam._m0[1u].x) + (_1844 * (1.0 - cbModelParam._m0[1u].x));
    float _1869 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _846);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1869 : min(cbModelParam._m0[25u].z, _1869));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1917 = fma(_1092, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084)) + cbModelParam._m0[13u].w;
        float _1921 = fma(_1092, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084)) + cbModelParam._m0[14u].w;
        float _1925 = fma(_1092, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084)) + cbModelParam._m0[15u].w;
        float _1928 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1931 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1934 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1962;
        if (_1928 > 0.0)
        {
            _1962 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1962 = frontier_phi_17_15_ladder;
        }
        float _2164;
        if (_1931 > 0.0)
        {
            _2164 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2164 = frontier_phi_26_22_ladder;
        }
        float _2418;
        if (_1934 > 0.0)
        {
            _2418 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2418 = frontier_phi_38_33_ladder;
        }
        float _2420 = isnan(_2164) ? _1962 : (isnan(_1962) ? _2164 : min(_1962, _2164));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1928) + _1917;
        float _2426 = (_2421 * _1931) + _1921;
        float _2427 = (_2421 * _1934) + _1925;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1870);
            frontier_phi_16_38_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1950 = frontier_phi_16_38_ladder_2;
        _1952 = frontier_phi_16_38_ladder_1;
        _1954 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1870);
        _1950 = _1938.x * cbModelParam._m0[1u].y;
        _1952 = _1938.y * cbModelParam._m0[1u].y;
        _1954 = _1938.z * cbModelParam._m0[1u].y;
    }
    float _1958 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _846);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1958 : min(cbModelParam._m0[25u].w, _1958));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1092, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1092, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1092, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _2026 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _2029 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2169;
        if (_2023 > 0.0)
        {
            _2169 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2169 = frontier_phi_28_24_ladder;
        }
        float _2445;
        if (_2026 > 0.0)
        {
            _2445 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2445 = frontier_phi_40_35_ladder;
        }
        float _2658;
        if (_2029 > 0.0)
        {
            _2658 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2658 = frontier_phi_49_46_ladder;
        }
        float _2660 = isnan(_2445) ? _2169 : (isnan(_2169) ? _2445 : min(_2169, _2445));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _2023) + _2012;
        float _2666 = (_2661 * _2026) + _2016;
        float _2667 = (_2661 * _2029) + _2020;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1959);
            frontier_phi_25_49_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_25_49_ladder_2;
        _2050 = frontier_phi_25_49_ladder_1;
        _2052 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1959);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2065 = (((_1055 * _1004) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1055 * _1006) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2069 = (((_1055 * _1007) + _1056) * _1020) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    uvec4 _2088 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2090 = _2088.x * 14u;
    uint _2091 = _2090 + 13u;
    float _2098 = _1020 + (-1.0);
    float _2103 = (cbLight._m0[_2091].x * _2098) + 1.0;
    float _2104 = (cbLight._m0[_2091].y * _2098) + 1.0;
    float _2105 = (cbLight._m0[_2091].z * _2098) + 1.0;
    float _2106 = (cbLight._m0[_2091].w * _2098) + 1.0;
    uint _2107 = _2090 + 5u;
    float _2113 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2117 = _2090 + 4u;
    float _2123 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2127 = _2090 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_843, _844, _845));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_843, _844, _845));
    float _4388 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4399 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2107].x * _2113) * _2148) + ((cbLight._m0[_2117].x * _2123) * _2146);
    float _2156 = ((_2113 * cbLight._m0[_2107].y) * _2148) + ((_2123 * cbLight._m0[_2117].y) * _2146);
    float _2157 = ((_2113 * cbLight._m0[_2107].z) * _2148) + ((_2123 * cbLight._m0[_2117].z) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2090 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2163)
    {
        _2174 = _2155;
        _2176 = _2156;
        _2178 = _2157;
    }
    else
    {
        uint _2182 = _2090 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_2090 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4410 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2201 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2155;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2156;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2157;
    }
    bool _2181 = _2161.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2181)
    {
        _2219 = _2174;
        _2221 = _2176;
        _2223 = _2178;
    }
    else
    {
        uint _2389 = _2090 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_2090 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4426 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2408 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2219 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2174;
        _2221 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2176;
        _2223 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2178;
    }
    uint _2226 = _2090 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _846) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2090].x + _922;
    float _2242 = cbLight._m0[_2090].y + _923;
    float _2243 = cbLight._m0[_2090].z + _924;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2090].xyz));
    float _4442 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2255 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2256 = dot(vec3(_843, _844, _845), vec3(_2248, _2249, _2250));
    float _4464 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2248, _2249, _2250));
    float _4475 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
    float _2277 = 0.959999978542327880859375 - _1001;
    float _2279 = 0.959999978542327880859375 - _1002;
    float _2280 = 0.959999978542327880859375 - _1003;
    float _2287 = 1.0 - _2240;
    float _2298 = (0.5 / (((_2255 * ((_2254 * _2287) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2287) + _2240) * _2254))) * _2254;
    float _4486 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2311 = _2090 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _846) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2127].x + _922;
    float _2325 = cbLight._m0[_2127].y + _923;
    float _2326 = cbLight._m0[_2127].z + _924;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2127].xyz));
    float _4497 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2338 = dot(vec3(_843, _844, _845), vec3(_2331, _2332, _2333));
    float _4508 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2331, _2332, _2333));
    float _4519 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
    float _2364 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2255 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2364) + _2323) * _2337))) * _2337;
    float _4530 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2386 = (((((_2357 * _2277) + _1004) * cbLight._m0[_2311].x) * _2376) * _2113) + (((((_2276 * _2277) + _1004) * cbLight._m0[_2226].x) * _2300) * _2123);
    float _2387 = (((((_2357 * _2279) + _1006) * cbLight._m0[_2311].y) * _2376) * _2113) + (((((_2276 * _2279) + _1006) * cbLight._m0[_2226].y) * _2300) * _2123);
    float _2388 = (((((_2357 * _2280) + _1007) * cbLight._m0[_2311].z) * _2376) * _2113) + (((((_2276 * _2280) + _1007) * cbLight._m0[_2226].z) * _2300) * _2123);
    float _2450;
    float _2452;
    float _2454;
    if (_2163)
    {
        _2450 = _2386;
        _2452 = _2387;
        _2454 = _2388;
    }
    else
    {
        uint _2456 = _2090 + 2u;
        uint _2460 = _2090 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _846) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _922;
        float _2477 = cbLight._m0[_2456].y + _923;
        float _2478 = cbLight._m0[_2456].z + _924;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2456].xyz));
        float _4541 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2490 = dot(vec3(_843, _844, _845), vec3(_2483, _2484, _2485));
        float _4552 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4563 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2255 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2516) + _2475) * _2489))) * _2489;
        float _4574 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2450 = (((((_2509 * _2277) + _1004) * cbLight._m0[_2460].x) * _2528) * _2529) + _2386;
        _2452 = (((((_2509 * _2279) + _1006) * cbLight._m0[_2460].y) * _2528) * _2529) + _2387;
        _2454 = (((((_2509 * _2280) + _1007) * cbLight._m0[_2460].z) * _2528) * _2529) + _2388;
    }
    float _2564;
    float _2566;
    float _2568;
    if (_2181)
    {
        _2564 = _2450;
        _2566 = _2452;
        _2568 = _2454;
    }
    else
    {
        uint _2575 = _2090 + 3u;
        uint _2579 = _2090 + 11u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _846) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _922;
        float _2596 = cbLight._m0[_2575].y + _923;
        float _2597 = cbLight._m0[_2575].z + _924;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2575].xyz));
        float _4590 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2609 = dot(vec3(_843, _844, _845), vec3(_2602, _2603, _2604));
        float _4601 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4612 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2255 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2635) + _2594) * _2608))) * _2608;
        float _4623 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2564 = (((((_2628 * _2277) + _1004) * cbLight._m0[_2579].x) * _2647) * _2648) + _2450;
        _2566 = (((((_2628 * _2279) + _1006) * cbLight._m0[_2579].y) * _2647) * _2648) + _2452;
        _2568 = (((((_2628 * _2280) + _1007) * cbLight._m0[_2579].z) * _2647) * _2648) + _2454;
    }
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_2088.y == 0u)
    {
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2723;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2723;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2723;
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _943) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _942) / _2739)));
        float _2760 = (log2(_2726 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
        }
        else
        {
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3039)
                {
                    frontier_phi_66_pred = _3023;
                    frontier_phi_66_pred_1 = _3028;
                    frontier_phi_66_pred_2 = _3027;
                    frontier_phi_66_pred_3 = _3026;
                    frontier_phi_66_pred_4 = _3025;
                    frontier_phi_66_pred_5 = _3024;
                }
                else
                {
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    uint _3174;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3038;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    for (;;)
                    {
                        uint _3178 = uint(findLSB(_3174)) + (_3029 << 5u);
                        uint _3175 = (_3174 + 4294967295u) & _3174;
                        uint _3180 = _3178 * 48u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3200 = (_3178 * 48u) + 4u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3219 = (_3178 * 48u) + 8u;
                        vec3 _3230 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x));
                        float _3234 = _3194.x - _2724;
                        float _3235 = _3194.y - _2725;
                        float _3236 = _3194.z - _2726;
                        float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                        float _3240 = inversesqrt(_3237);
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3244 = dot(vec3(_961, _964, _967), vec3(_3241, _3242, _3243));
                        float _3249 = 1.0 - (_3237 * _3194.w);
                        float _4649 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3251 = sqrt(_3237) * _3213.w;
                        float _3254 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3244) + _3255;
                        float _3261 = _3251 * _3251;
                        float _3265 = ((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3250) / ((_3261 * 0.699999988079071044921875) + 1.0);
                        float _3269 = (-0.0) - _2724;
                        float _3270 = (-0.0) - _2725;
                        float _3271 = (-0.0) - _2726;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3286 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _1036;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3276 + _3241;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_961, _964, _967), vec3(_3276, _3277, _3278));
                        float _4665 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3311 = dot(vec3(_961, _964, _967), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4676 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3254 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3244) + _3320;
                        float _4687 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4698 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3318 * _3318) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125))) * _3250;
                        _3098 = (_3265 * _3213.x) + _3171;
                        _3099 = (_3265 * _3213.y) + _3172;
                        _3100 = (_3265 * _3213.z) + _3173;
                        _3095 = (_3346 * _3230.x) + _3168;
                        _3096 = (_3346 * _3230.y) + _3169;
                        _3097 = (_3346 * _3230.z) + _3170;
                        if (_3175 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3175;
                        }
                    }
                    frontier_phi_66_pred = _3095;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                _2872 = frontier_phi_66_pred;
                _2882 = frontier_phi_66_pred_1;
                _2880 = frontier_phi_66_pred_2;
                _2878 = frontier_phi_66_pred_3;
                _2876 = frontier_phi_66_pred_4;
                _2874 = frontier_phi_66_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2872;
                    _3024 = _2874;
                    _3025 = _2876;
                    _3026 = _2878;
                    _3027 = _2880;
                    _3028 = _2882;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
        }
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.z;
        uint _2888 = (_2886 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2888) & _2770) == 0u)
        {
            _2991 = _2871;
            _2993 = _2873;
            _2995 = _2875;
            _2997 = _2877;
            _2999 = _2879;
            _3001 = _2881;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
            float _3017 = _3016 * _2724;
            float _3018 = _3016 * _2725;
            float _3019 = _3016 * _2726;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2888 < ((_2886 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3151 = _2871;
                float _3152 = _2873;
                float _3153 = _2875;
                float _3154 = _2877;
                float _3155 = _2879;
                float _3156 = _2881;
                uint _3157 = _2888;
                uint _3166;
                bool _3167;
                for (;;)
                {
                    _3166 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3157 << 2u)) >> 2u)).x;
                    _3167 = _3166 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3167)
                    {
                        frontier_phi_77_pred = _3156;
                        frontier_phi_77_pred_1 = _3155;
                        frontier_phi_77_pred_2 = _3154;
                        frontier_phi_77_pred_3 = _3153;
                        frontier_phi_77_pred_4 = _3152;
                        frontier_phi_77_pred_5 = _3151;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        uint _3379 = _3166;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3390 = ((_3157 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3390 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3390 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_2726, _3497.z, fma(_2725, _3497.y, _3497.x * _2724)) + _3497.w;
                            _3510 = !((fma(_2726, _3478.z, fma(_2725, _3478.y, _3478.x * _2724)) + _3478.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3405.x - _2724;
                                float _3538 = _3405.y - _2725;
                                float _3539 = _3405.z - _2726;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3406 * _3406));
                                float _4709 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3555 = sqrt(_3540) * _3421.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_961, _964, _967))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_2726, _3448.z, fma(_2725, _3448.y, _3448.x * _2724)) + _3448.w) / _3509;
                                float _3569 = (fma(_2726, _3463.z, fma(_2725, _3463.y, _3463.x * _2724)) + _3463.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4725 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _1036;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3017;
                                float _3599 = _3545 - _3018;
                                float _3600 = _3546 - _3019;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_961, _964, _967), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4736 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3612 = dot(vec3(_961, _964, _967), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4747 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_961, _964, _967), vec3(_3544, _3545, _3546))) + _3621;
                                float _4758 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4769 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3575 * _3421.y;
                                frontier_phi_83_pred_1 = _3575 * _3421.x;
                                frontier_phi_83_pred_2 = _3649 * _3433.z;
                                frontier_phi_83_pred_3 = _3649 * _3433.y;
                                frontier_phi_83_pred_4 = _3649 * _3433.x;
                                frontier_phi_83_pred_5 = _3575 * _3421.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3657 = frontier_phi_83_pred;
                            _3656 = frontier_phi_83_pred_1;
                            _3655 = frontier_phi_83_pred_2;
                            _3654 = frontier_phi_83_pred_3;
                            _3653 = frontier_phi_83_pred_4;
                            _3658 = frontier_phi_83_pred_5;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3365;
                        frontier_phi_77_pred_1 = _3364;
                        frontier_phi_77_pred_2 = _3363;
                        frontier_phi_77_pred_3 = _3362;
                        frontier_phi_77_pred_4 = _3361;
                        frontier_phi_77_pred_5 = _3360;
                    }
                    _3002 = frontier_phi_77_pred;
                    _3000 = frontier_phi_77_pred_1;
                    _2998 = frontier_phi_77_pred_2;
                    _2996 = frontier_phi_77_pred_3;
                    _2994 = frontier_phi_77_pred_4;
                    _2992 = frontier_phi_77_pred_5;
                    uint _3158 = _3157 + 1u;
                    if (_3158 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3151 = _2992;
                        _3152 = _2994;
                        _3153 = _2996;
                        _3154 = _2998;
                        _3155 = _3000;
                        _3156 = _3002;
                        _3157 = _3158;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2996;
                frontier_phi_58_59_ladder_1 = _3002;
                frontier_phi_58_59_ladder_2 = _3000;
                frontier_phi_58_59_ladder_3 = _2998;
                frontier_phi_58_59_ladder_4 = _2994;
                frontier_phi_58_59_ladder_5 = _2992;
            }
            else
            {
                frontier_phi_58_59_ladder = _2875;
                frontier_phi_58_59_ladder_1 = _2881;
                frontier_phi_58_59_ladder_2 = _2879;
                frontier_phi_58_59_ladder_3 = _2877;
                frontier_phi_58_59_ladder_4 = _2873;
                frontier_phi_58_59_ladder_5 = _2871;
            }
            _2991 = frontier_phi_58_59_ladder_5;
            _2993 = frontier_phi_58_59_ladder_4;
            _2995 = frontier_phi_58_59_ladder;
            _2997 = frontier_phi_58_59_ladder_3;
            _2999 = frontier_phi_58_59_ladder_2;
            _3001 = frontier_phi_58_59_ladder_1;
        }
        float _3006 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2783 = (_3006 * _2997) + _2219;
        _2785 = (_3006 * _2999) + _2221;
        _2787 = (_3006 * _3001) + _2223;
        _2789 = ((_2991 * _1004) * _3006) + _2564;
        _2791 = ((_2993 * _1006) * _3006) + _2566;
        _2793 = ((_2995 * _1007) * _3006) + _2568;
    }
    else
    {
        _2783 = _2219;
        _2785 = _2221;
        _2787 = _2223;
        _2789 = _2564;
        _2791 = _2566;
        _2793 = _2568;
    }
    float _4785 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4796 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4807 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2810 = ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2783 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1020))) + ((_2789 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _2811 = ((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2785 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1020))) + ((_2791 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    float _2812 = ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2787 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1020))) + ((_2793 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1859)) * cbPerFrame._m0[3u].x);
    uint _2813 = _259 + 6u;
    float _2821 = _942 / cbSceneParam._m0[86u].x;
    float _2822 = _943 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _2896 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _2897 = _2896 / _865;
        float _2908 = _2897 * _915;
        float _2909 = _916 * _2897;
        float _2910 = (-0.0) - _2909;
        float _2911 = _2897 * _917;
        float _2913 = (cbSceneParam._m0[77u].w * _2910) / _2896;
        float _2914 = _2913 + cbSceneParam._m0[79u].w;
        float _2915 = cbSceneParam._m0[79u].w - _2909;
        float _2921 = sqrt(((_2908 * _2908) + (_2909 * _2909)) + (_2911 * _2911));
        float _2924 = (1.0 - (cbSceneParam._m0[77u].w / _2896)) * _2921;
        float _2929 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2931 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3108;
        if (abs((_2910 - _2913) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3108 = ((((_2914 > 0.0) ? exp2(_2929 * _2914) : (2.0 - exp2(_2931 * _2914))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2924;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : max(_2914, _2915));
            float _3054 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : min(_2914, _2915));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3108 = ((abs(_2921 / _2910) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2929 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2929 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2931 * _3063) - exp2(_2931 * _3064)) * _3052))) + (_2924 * cbSceneParam._m0[80u].z);
        }
        vec4 _3110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3119 = exp2((_3108 * (-1.44269502162933349609375)) * (1.0 - _3110.w));
        float _3120 = log2(_3119);
        float _3136 = log2(_2841);
        _2933 = (exp2(_3136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].x)) * _3110.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2935 = (exp2(_3136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].y)) * _3110.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2937 = (exp2(_3136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].z)) * _3110.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2939 = _3119 * _2841;
    }
    else
    {
        _2933 = _2838;
        _2935 = _2839;
        _2937 = _2840;
        _2939 = _2841;
    }
    bool _3146;
    vec4 _2949;
    vec4 _2971;
    float _2973;
    float _2977;
    float _2978;
    float _2979;
    float _2980;
    bool _2990;
    for (;;)
    {
        _2949 = cbMatDynParam._m0[0u];
        float _2951 = roundEven(_2949.y);
        bool _2952 = _2951 == 3.0;
        float _2953 = log2(_2939);
        float _2960 = exp2(_2953 * cbSceneParam._m0[78u].x) * _2810;
        float _2961 = exp2(_2953 * cbSceneParam._m0[78u].y) * _2811;
        float _2962 = exp2(_2953 * cbSceneParam._m0[78u].z) * _2812;
        float _2969 = _931 + (-0.5);
        _2971 = cbMtdParam._m0[1u];
        _2973 = _2971.y * _2969;
        float _2976 = (_2951 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2977 = _2976 * (_2952 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2933)));
        _2978 = _2976 * (_2952 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2935)));
        _2979 = _2976 * (_2952 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2937)));
        _2980 = _2969 * 0.999000012874603271484375;
        _2990 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2990)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2980) < 0.5)
            {
                _3146 = true;
                break;
            }
        }
        uint _3087 = _980 + uint(_2949.w);
        if ((cbInstanceData._m0[_3087].w < 1.0) && ((cbInstanceData._m0[_3087].w + _2980) < 0.5))
        {
            _3146 = true;
            break;
        }
        if ((_2973 + 1.0) < _2971.x)
        {
            _3146 = true;
            break;
        }
        _3146 = false;
        break;
    }
    float _3351;
    if (_3146)
    {
        discard_state = true;
        _3351 = 0.0;
    }
    else
    {
        _3351 = cbInstanceData._m0[_2813].w;
    }
    SV_Target.x = _2977;
    SV_Target.y = _2978;
    SV_Target.z = _2979;
    SV_Target.w = _3351;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
    discard_exit();
}


