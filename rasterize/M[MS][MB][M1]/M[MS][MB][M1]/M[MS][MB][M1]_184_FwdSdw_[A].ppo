#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1378;
float _4041;
float _4042;
float _4043;
float _4044;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].y) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4053 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _402 = (_395 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _403 = (_395 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _404 = (_395 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].y) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4064 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _395) + _536;
    float _546 = ((_517.y - _537) * _395) + _537;
    float _547 = ((_517.z - _538) * _395) + _538;
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _468) + _547;
    float _575 = ((((_559.x - _545) * _468) + _545) * 2.0) + (-1.0);
    float _576 = ((((_559.y - _546) * _468) + _546) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _4075 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _621 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _637 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_623 - _624) * cbMtdParam._m0[24u].z) + _624) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4086 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _645 = (_638 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _646 = (_638 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _647 = (_638 * (cbMtdParam._m0[17u].z - _477)) + _477;
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _673 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _675 = _673.x;
    float _693 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _675) * _395) + _675;
    float _710 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _693) * _468) + _693;
    float _714 = ((_659.x - _710) * cbMtdParam._m0[19u].z) + _710;
    float _716 = _714 - (_714 * _638);
    float _721 = (((_494.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    float _725 = ((_596.z - _721) * cbMtdParam._m0[19u].w) + _721;
    vec4 _738 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _745 = (_738.x * 2.0) + (-1.0);
    float _746 = (_738.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _4097 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _755 = (_638 * (_738.z - _725)) + _725;
    float _764 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)))) + (((_596.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _765 = (_576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)))) + (((_596.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _777 = (((_745 - _764) + (cbMtdParam._m0[21u].x * _764)) * _638) + _764;
    float _778 = (((_746 - _765) + (cbMtdParam._m0[21u].x * _765)) * _638) + _765;
    float _779 = (_638 * (sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) - _582)) + _582;
    float _784 = cbMtdParam._m0[22u].x + _596.w;
    float _787 = fma(_779, _243 * NORMAL.x, fma(_778, _250 * TANGENT.x, (_236 * _228) * _777));
    float _790 = fma(_779, _243 * NORMAL.y, fma(_778, _250 * TANGENT.y, (_236 * _229) * _777));
    float _793 = fma(_779, _243 * NORMAL.z, fma(_778, _250 * TANGENT.z, (_236 * _230) * _777));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _4108 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _801 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4130 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4141 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4152 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4163 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _806 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    vec4 _885 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _887 = _885.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1059 = sqrt(((_871 * _871) + (_872 * _872)) + (_873 * _873));
        float _1065 = (cbMatDynParam._m0[5u].x * _1059) + cbMatDynParam._m0[5u].y;
        float _4174 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1070 = (cbMatDynParam._m0[5u].z * _1059) + cbMatDynParam._m0[5u].w;
        float _4185 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) - _1066)) + _1066) < ((_887 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _920 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _923 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _936 = _256 + 9u;
    uint _937 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_937].z;
    float _4196 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _949 = 1.0 - _806;
    float _950 = _946 * _949;
    float _951 = _947 * _949;
    float _952 = _948 * _949;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _806;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _806;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _806;
    float _960 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _976 = ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * TEXCOORD_5.w) * _972.x;
    float _977 = dot(vec3(_798, _799, _800), vec3(_878, _879, _880));
    float _980 = _977 * 2.0;
    float _984 = (_980 * _798) - _878;
    float _985 = (_980 * _799) - _879;
    float _986 = (_980 * _800) - _880;
    float _990 = abs(dot(vec3(_878, _879, _880), vec3(_798, _799, _800)));
    float _4229 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _992 = sqrt(_801);
    float _1005 = exp2((_992 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_992 * 3.0));
    float _1011 = (1.0 - _1005) * ((_992 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1012 = _1005 * _992;
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1048, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040));
        float _1106 = fma(_1048, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040));
        float _1110 = fma(_1048, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040));
        float _1135 = _1040 + _798;
        float _1136 = _1044 + _799;
        float _1137 = _1048 + _800;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_798, _799, _800), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4277 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_798, _799, _800), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4310 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_798, _799, _800), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4343 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1048, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040));
        float _1423 = fma(_1048, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040));
        float _1427 = fma(_1048, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040));
        float _1450 = _1040 + _798;
        float _1451 = _1044 + _799;
        float _1452 = _1048 + _800;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_798, _799, _800), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4406 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_798, _799, _800), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4439 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_798, _799, _800), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4472 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = _1378;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1390)) + _1390;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1391)) + _1391;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1392)) + _1392;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _984 * 0.5;
    float _1757 = _985 * 0.5;
    float _1758 = _986 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1048, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1048, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1048, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_986, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984));
        float _1887 = fma(_986, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984));
        float _1890 = fma(_986, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1918 = frontier_phi_17_15_ladder;
        }
        float _2090;
        if (_1887 > 0.0)
        {
            _2090 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2090 = frontier_phi_26_22_ladder;
        }
        float _2385;
        if (_1890 > 0.0)
        {
            _2385 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2385 = frontier_phi_38_33_ladder;
        }
        float _2387 = isnan(_2090) ? _1918 : (isnan(_1918) ? _2090 : min(_1918, _2090));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1884) + _1873;
        float _2393 = (_2388 * _1887) + _1877;
        float _2394 = (_2388 * _1890) + _1881;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_16_38_ladder = _2539.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2539.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2539.x * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_16_38_ladder_2;
        _1908 = frontier_phi_16_38_ladder_1;
        _1910 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_984, _985, _986), _1825);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1048, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1048, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1048, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_986, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984));
        float _1983 = fma(_986, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984));
        float _1986 = fma(_986, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984));
        float _2095;
        if (_1980 > 0.0)
        {
            _2095 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2095 = frontier_phi_28_24_ladder;
        }
        float _2412;
        if (_1983 > 0.0)
        {
            _2412 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2412 = frontier_phi_40_35_ladder;
        }
        float _2750;
        if (_1986 > 0.0)
        {
            _2750 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2750 = frontier_phi_50_47_ladder;
        }
        float _2752 = isnan(_2412) ? _2095 : (isnan(_2095) ? _2412 : min(_2095, _2412));
        float _2753 = isnan(_2750) ? _2752 : (isnan(_2752) ? _2750 : min(_2752, _2750));
        float _2757 = (_2753 * _1980) + _1969;
        float _2758 = (_2753 * _1983) + _1973;
        float _2759 = (_2753 * _1986) + _1977;
        float _2760 = _2753 * 9.9999997473787516355514526367188e-05;
        float _2761 = (-1.0) - _2760;
        float _2763 = _2760 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2759 > _2763) || ((_2759 < _2761) || ((_2758 > _2763) || ((_2758 < _2761) || ((_2757 < _2761) || (_2757 > _2763))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2759, cbModelParam._m0[17u].z, fma(_2758, cbModelParam._m0[17u].y, _2757 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2759, cbModelParam._m0[18u].z, fma(_2758, cbModelParam._m0[18u].y, _2757 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2759, cbModelParam._m0[19u].z, fma(_2758, cbModelParam._m0[19u].y, _2757 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_25_50_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_25_50_ladder_2;
        _2007 = frontier_phi_25_50_ladder_1;
        _2009 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_984, _985, _986), _1915);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2022 = (((_1011 * _960) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2005 - _1906)) + _1906);
    float _2024 = (((_1011 * _962) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2026 = (((_1011 * _963) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2029 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2024, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2032 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2024, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2035 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2024, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2082 = _2069 / _2081;
    float _2083 = _2073 / _2081;
    float _2084 = _2077 / _2081;
    float _2231;
    float _2232;
    float _2233;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2111 = ((uint(_2084 > cbSceneParam._m0[59u].y) + uint(_2084 > cbSceneParam._m0[59u].x)) + uint(_2084 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2112 = _2111 + 43u;
        uint _2120 = _2111 + 44u;
        uint _2128 = _2111 + 45u;
        uint _2136 = _2111 + 46u;
        float _2147 = fma(_2081, cbSceneParam._m0[_2112].w, fma(_2077, cbSceneParam._m0[_2112].z, fma(_2073, cbSceneParam._m0[_2112].y, _2069 * cbSceneParam._m0[_2112].x)));
        float _2151 = fma(_2081, cbSceneParam._m0[_2120].w, fma(_2077, cbSceneParam._m0[_2120].z, fma(_2073, cbSceneParam._m0[_2120].y, _2069 * cbSceneParam._m0[_2120].x)));
        float _2159 = fma(_2081, cbSceneParam._m0[_2136].w, fma(_2077, cbSceneParam._m0[_2136].z, fma(_2073, cbSceneParam._m0[_2136].y, _2069 * cbSceneParam._m0[_2136].x)));
        float _2164 = cbSceneParam._m0[33u].z * _2159;
        float _2166 = cbSceneParam._m0[33u].w * _2159;
        float _2169 = fma(_2081, cbSceneParam._m0[_2128].w, fma(_2077, cbSceneParam._m0[_2128].z, fma(_2073, cbSceneParam._m0[_2128].y, _2069 * cbSceneParam._m0[_2128].x))) / _2159;
        float _2217 = (cbSceneParam._m0[33u].x - sqrt(((_2083 * _2083) + (_2082 * _2082)) + (_2084 * _2084))) * cbSceneParam._m0[33u].y;
        float _4598 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2224 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2164 + _2147) / _2159, (_2166 + _2151) / _2159), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2166 + _2147) / _2159, (_2151 - _2164) / _2159), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 - _2164) / _2159, (_2151 - _2166) / _2159), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 - _2166) / _2159, (_2164 + _2151) / _2159), _2169), 0.0)).x), vec4(0.25)));
        _2231 = 1.0 - (_2224 * cbSceneParam._m0[34u].x);
        _2232 = 1.0 - (_2224 * cbSceneParam._m0[34u].y);
        _2233 = 1.0 - (_2224 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2231 = 1.0;
        _2232 = 1.0;
        _2233 = 1.0;
    }
    float _2297;
    float _2299;
    float _2301;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2285 = fma(_2081, cbSceneParam._m0[63u].w, fma(_2077, cbSceneParam._m0[63u].z, fma(_2073, cbSceneParam._m0[63u].y, _2069 * cbSceneParam._m0[63u].x)));
        float _2286 = fma(_2081, cbSceneParam._m0[60u].w, fma(_2077, cbSceneParam._m0[60u].z, fma(_2073, cbSceneParam._m0[60u].y, _2069 * cbSceneParam._m0[60u].x))) / _2285;
        float _2287 = fma(_2081, cbSceneParam._m0[61u].w, fma(_2077, cbSceneParam._m0[61u].z, fma(_2073, cbSceneParam._m0[61u].y, _2069 * cbSceneParam._m0[61u].x))) / _2285;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2286 >= cbSceneParam._m0[64u].x) && (_2287 >= cbSceneParam._m0[64u].y)) && (_2286 <= cbSceneParam._m0[64u].z)) && (_2287 <= cbSceneParam._m0[64u].w))
        {
            float _2425 = fma(_2081, cbSceneParam._m0[62u].w, fma(_2077, cbSceneParam._m0[62u].z, fma(_2073, cbSceneParam._m0[62u].y, _2069 * cbSceneParam._m0[62u].x))) / _2285;
            float _2429 = isnan(cbSceneParam._m0[41u].w) ? _2425 : (isnan(_2425) ? cbSceneParam._m0[41u].w : max(_2425, cbSceneParam._m0[41u].w));
            float _2472 = (cbSceneParam._m0[33u].x - sqrt(((_2083 * _2083) + (_2082 * _2082)) + (_2084 * _2084))) * cbSceneParam._m0[33u].y;
            float _4614 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
            float _2479 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2286, cbSceneParam._m0[33u].w + _2287), _2429), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2286, _2287 - cbSceneParam._m0[33u].z), _2429), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2286 - cbSceneParam._m0[33u].z, _2287 - cbSceneParam._m0[33u].w), _2429), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2286 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2287), _2429), 0.0)).x), vec4(0.25)));
            float _2483 = 1.0 - (_2479 * cbSceneParam._m0[34u].x);
            float _2484 = 1.0 - (_2479 * cbSceneParam._m0[34u].y);
            float _2485 = 1.0 - (_2479 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
            frontier_phi_37_36_ladder_1 = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
            frontier_phi_37_36_ladder_2 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
        }
        else
        {
            frontier_phi_37_36_ladder = _2233;
            frontier_phi_37_36_ladder_1 = _2232;
            frontier_phi_37_36_ladder_2 = _2231;
        }
        _2297 = frontier_phi_37_36_ladder_2;
        _2299 = frontier_phi_37_36_ladder_1;
        _2301 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2297 = _2231;
        _2299 = _2232;
        _2301 = _2233;
    }
    uvec4 _2306 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2308 = _2306.x * 14u;
    uint _2309 = _2308 + 13u;
    float _2316 = _976 + (-1.0);
    float _2321 = (cbLight._m0[_2309].x * _2316) + 1.0;
    float _2322 = (cbLight._m0[_2309].y * _2316) + 1.0;
    float _2323 = (cbLight._m0[_2309].z * _2316) + 1.0;
    float _2324 = (cbLight._m0[_2309].w * _2316) + 1.0;
    uint _2325 = _2308 + 5u;
    float _2331 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2335 = _2308 + 4u;
    float _2344 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2348 = _2308 | 1u;
    float _2359 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_798, _799, _800));
    float _2362 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_798, _799, _800));
    float _4650 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _4661 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2367 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2369 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2376 = ((cbLight._m0[_2325].x * _2331) * _2369) + (((cbLight._m0[_2335].x * _2297) * _2344) * _2367);
    float _2377 = ((_2331 * cbLight._m0[_2325].y) * _2369) + (((cbLight._m0[_2335].y * _2299) * _2344) * _2367);
    float _2378 = ((_2331 * cbLight._m0[_2325].z) * _2369) + (((cbLight._m0[_2335].z * _2301) * _2344) * _2367);
    uvec4 _2382 = floatBitsToUint(cbLight._m0[_2308 + 12u]);
    bool _2384 = _2382.x == 0u;
    float _2486;
    float _2488;
    float _2490;
    if (_2384)
    {
        _2486 = _2376;
        _2488 = _2377;
        _2490 = _2378;
    }
    else
    {
        uint _2494 = _2308 + 6u;
        float _2510 = (dot(vec3(cbLight._m0[_2308 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2511 = _2510 * _2510;
        float _4672 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2512 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2513 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2486 = (((cbLight._m0[_2494].x * 0.3183098733425140380859375) * _2512) * _2513) + _2376;
        _2488 = (((cbLight._m0[_2494].y * 0.3183098733425140380859375) * _2512) * _2513) + _2377;
        _2490 = (((cbLight._m0[_2494].z * 0.3183098733425140380859375) * _2512) * _2513) + _2378;
    }
    bool _2493 = _2382.y == 0u;
    float _2548;
    float _2550;
    float _2552;
    if (_2493)
    {
        _2548 = _2486;
        _2550 = _2488;
        _2552 = _2490;
    }
    else
    {
        uint _2721 = _2308 + 7u;
        float _2737 = (dot(vec3(cbLight._m0[_2308 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2738 = _2737 * _2737;
        float _4688 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2739 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2740 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2548 = (((cbLight._m0[_2721].x * 0.3183098733425140380859375) * _2739) * _2740) + _2486;
        _2550 = (((cbLight._m0[_2721].y * 0.3183098733425140380859375) * _2739) * _2740) + _2488;
        _2552 = (((cbLight._m0[_2721].z * 0.3183098733425140380859375) * _2739) * _2740) + _2490;
    }
    uint _2555 = _2308 + 8u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _801) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2308].x + _878;
    float _2571 = cbLight._m0[_2308].y + _879;
    float _2572 = cbLight._m0[_2308].z + _880;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2308].xyz));
    float _4704 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _4715 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2584 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2585 = dot(vec3(_798, _799, _800), vec3(_2577, _2578, _2579));
    float _4726 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2589 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2577, _2578, _2579));
    float _4737 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2593 = _2569 * _2569;
    float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
    float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
    float _2606 = 0.959999978542327880859375 - _957;
    float _2608 = 0.959999978542327880859375 - _958;
    float _2609 = 0.959999978542327880859375 - _959;
    float _2616 = 1.0 - _2569;
    float _2627 = (0.5 / (((_2584 * ((_2583 * _2616) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2616) + _2569) * _2583))) * _2583;
    float _4748 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2629 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
    uint _2643 = _2308 + 9u;
    float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _801) * 0.949999988079071044921875);
    float _2655 = _2654 * _2654;
    float _2656 = cbLight._m0[_2348].x + _878;
    float _2657 = cbLight._m0[_2348].y + _879;
    float _2658 = cbLight._m0[_2348].z + _880;
    float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
    float _2663 = _2662 * _2656;
    float _2664 = _2662 * _2657;
    float _2665 = _2662 * _2658;
    float _2666 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2348].xyz));
    float _4759 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2670 = dot(vec3(_798, _799, _800), vec3(_2663, _2664, _2665));
    float _4770 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2674 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2663, _2664, _2665));
    float _4781 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2678 = _2655 * _2655;
    float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
    float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0);
    float _2696 = 1.0 - _2655;
    float _2706 = (0.5 / (((_2584 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2696) + _2655) * _2669))) * _2669;
    float _4792 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2708 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
    float _2718 = (((((_2689 * _2606) + _960) * cbLight._m0[_2643].x) * _2708) * _2331) + ((((cbLight._m0[_2555].x * _2297) * ((_2605 * _2606) + _960)) * _2629) * _2344);
    float _2719 = (((((_2689 * _2608) + _962) * cbLight._m0[_2643].y) * _2708) * _2331) + ((((cbLight._m0[_2555].y * _2299) * ((_2605 * _2608) + _962)) * _2629) * _2344);
    float _2720 = (((((_2689 * _2609) + _963) * cbLight._m0[_2643].z) * _2708) * _2331) + ((((cbLight._m0[_2555].z * _2301) * ((_2605 * _2609) + _963)) * _2629) * _2344);
    float _2776;
    float _2778;
    float _2780;
    if (_2384)
    {
        _2776 = _2718;
        _2778 = _2719;
        _2780 = _2720;
    }
    else
    {
        uint _2782 = _2308 + 2u;
        uint _2786 = _2308 + 10u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _801) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _878;
        float _2803 = cbLight._m0[_2782].y + _879;
        float _2804 = cbLight._m0[_2782].z + _880;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2782].xyz));
        float _4803 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2816 = dot(vec3(_798, _799, _800), vec3(_2809, _2810, _2811));
        float _4814 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4825 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2584 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2842) + _2801) * _2815))) * _2815;
        float _4836 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2776 = (((((_2835 * _2606) + _960) * cbLight._m0[_2786].x) * _2854) * _2855) + _2718;
        _2778 = (((((_2835 * _2608) + _962) * cbLight._m0[_2786].y) * _2854) * _2855) + _2719;
        _2780 = (((((_2835 * _2609) + _963) * cbLight._m0[_2786].z) * _2854) * _2855) + _2720;
    }
    float _2886;
    float _2888;
    float _2890;
    if (_2493)
    {
        _2886 = _2776;
        _2888 = _2778;
        _2890 = _2780;
    }
    else
    {
        uint _2897 = _2308 + 3u;
        uint _2901 = _2308 + 11u;
        float _2915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2897].w)) * _801) * 0.949999988079071044921875);
        float _2916 = _2915 * _2915;
        float _2917 = cbLight._m0[_2897].x + _878;
        float _2918 = cbLight._m0[_2897].y + _879;
        float _2919 = cbLight._m0[_2897].z + _880;
        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
        float _2924 = _2923 * _2917;
        float _2925 = _2923 * _2918;
        float _2926 = _2923 * _2919;
        float _2927 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2897].xyz));
        float _4852 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2930 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2931 = dot(vec3(_798, _799, _800), vec3(_2924, _2925, _2926));
        float _4863 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2935 = dot(vec3(cbLight._m0[_2897].xyz), vec3(_2924, _2925, _2926));
        float _4874 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2939 = _2916 * _2916;
        float _2943 = ((_2934 * _2934) * (_2939 + (-1.0))) + 1.0;
        float _2950 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
        float _2957 = 1.0 - _2916;
        float _2967 = (0.5 / (((_2584 * ((_2930 * _2957) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2957) + _2916) * _2930))) * _2930;
        float _4885 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2969 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2939 / ((_2943 * _2943) * 3.141590118408203125));
        float _2970 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2886 = (((((_2950 * _2606) + _960) * cbLight._m0[_2901].x) * _2969) * _2970) + _2776;
        _2888 = (((((_2950 * _2608) + _962) * cbLight._m0[_2901].y) * _2969) * _2970) + _2778;
        _2890 = (((((_2950 * _2609) + _963) * cbLight._m0[_2901].z) * _2969) * _2970) + _2780;
    }
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    if (_2306.y == 0u)
    {
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.x;
        uint _3003 = uint((float(_2991.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2992))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2992)));
        float _3013 = (log2(_2084 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3014 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        uint _3017 = uint(isnan(14.0) ? _3014 : (isnan(_3014) ? 14.0 : min(_3014, 14.0)));
        uvec4 _3022 = texelFetch(g_lightClusterGridBuffer, int(((_3017 << 2u) + (_3003 << 6u)) >> 2u));
        uint _3023 = _3022.x;
        uint _3024 = _2991.z;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((((1u << ((_3024 >> 4u) & 15u)) + 4294967295u) & _3023) == 0u) || ((_3024 & 240u) == 0u))
        {
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
        }
        else
        {
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            uint _3262 = 0u;
            uint _3271;
            bool _3272;
            for (;;)
            {
                _3271 = texelFetch(g_lightClassification, int((((_3017 << 5u) + (_3003 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                _3272 = _3271 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3272)
                {
                    frontier_phi_71_pred = _3261;
                    frontier_phi_71_pred_1 = _3260;
                    frontier_phi_71_pred_2 = _3259;
                    frontier_phi_71_pred_3 = _3258;
                    frontier_phi_71_pred_4 = _3257;
                    frontier_phi_71_pred_5 = _3256;
                }
                else
                {
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    uint _3407;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3271;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    for (;;)
                    {
                        uint _3411 = uint(findLSB(_3407)) + (_3262 << 5u);
                        uint _3408 = (_3407 + 4294967295u) & _3407;
                        uint _3413 = _3411 * 48u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 3u)).x));
                        uint _3433 = (_3411 * 48u) + 4u;
                        vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 3u)).x));
                        uint _3452 = (_3411 * 48u) + 8u;
                        vec3 _3463 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x));
                        float _3467 = _3427.x - _2082;
                        float _3468 = _3427.y - _2083;
                        float _3469 = _3427.z - _2084;
                        float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                        float _3473 = inversesqrt(_3470);
                        float _3474 = _3473 * _3467;
                        float _3475 = _3473 * _3468;
                        float _3476 = _3473 * _3469;
                        float _3477 = dot(vec3(_917, _920, _923), vec3(_3474, _3475, _3476));
                        float _3482 = 1.0 - (_3470 * _3427.w);
                        float _4911 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3483 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3484 = sqrt(_3470) * _3446.w;
                        float _3487 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                        float _3488 = _3487 * _3487;
                        float _3491 = ((1.0 - _3488) * _3477) + _3488;
                        float _3494 = _3484 * _3484;
                        float _3498 = ((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3483) / ((_3494 * 0.699999988079071044921875) + 1.0);
                        float _3502 = (-0.0) - _2082;
                        float _3503 = (-0.0) - _2083;
                        float _3504 = (-0.0) - _2084;
                        float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                        float _3509 = _3508 * _3502;
                        float _3510 = _3508 * _3503;
                        float _3511 = _3508 * _3504;
                        float _3518 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                        float _3519 = 1.0 - _992;
                        float _3526 = sqrt(1.0 - ((1.0 - (_3519 * _3519)) * (1.0 - (_3518 * _3518))));
                        float _3527 = _3526 * _3526;
                        float _3528 = _3527 * _3527;
                        float _3529 = _3509 + _3474;
                        float _3530 = _3510 + _3475;
                        float _3531 = _3511 + _3476;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3539 = dot(vec3(_917, _920, _923), vec3(_3509, _3510, _3511));
                        float _4927 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3543 = dot(vec3(_917, _920, _923), vec3(_3535 * _3529, _3535 * _3530, _3535 * _3531));
                        float _4938 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3546 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3550 = ((_3546 * _3546) * (_3528 + (-1.0))) + 1.0;
                        float _3551 = _3487 * _3527;
                        float _3552 = _3551 * _3551;
                        float _3555 = ((1.0 - _3552) * _3477) + _3552;
                        float _4949 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3556 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3557 = 1.0 - _3527;
                        float _3567 = (0.5 / (((_3556 * ((_3542 * _3557) + _3527)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3527) * _3542))) * _3556;
                        float _4960 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3578 = (((_3528 * 3.1415927410125732421875) * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) / ((_3550 * _3550) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125))) * _3483;
                        _3331 = (_3498 * _3446.x) + _3404;
                        _3332 = (_3498 * _3446.y) + _3405;
                        _3333 = (_3498 * _3446.z) + _3406;
                        _3328 = (_3578 * _3463.x) + _3401;
                        _3329 = (_3578 * _3463.y) + _3402;
                        _3330 = (_3578 * _3463.z) + _3403;
                        if (_3408 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3408;
                        }
                    }
                    frontier_phi_71_pred = _3333;
                    frontier_phi_71_pred_1 = _3332;
                    frontier_phi_71_pred_2 = _3331;
                    frontier_phi_71_pred_3 = _3330;
                    frontier_phi_71_pred_4 = _3329;
                    frontier_phi_71_pred_5 = _3328;
                }
                _3114 = frontier_phi_71_pred;
                _3112 = frontier_phi_71_pred_1;
                _3110 = frontier_phi_71_pred_2;
                _3108 = frontier_phi_71_pred_3;
                _3106 = frontier_phi_71_pred_4;
                _3104 = frontier_phi_71_pred_5;
                uint _3263 = _3262 + 1u;
                if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3256 = _3104;
                    _3257 = _3106;
                    _3258 = _3108;
                    _3259 = _3110;
                    _3260 = _3112;
                    _3261 = _3114;
                    _3262 = _3263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
        }
        uvec4 _3117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3118 = _3117.z;
        uint _3120 = (_3118 >> 8u) & 15u;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((4294967295u << _3120) & _3023) == 0u)
        {
            _3224 = _3103;
            _3226 = _3105;
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
        }
        else
        {
            float _3249 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
            float _3250 = _3249 * _2082;
            float _3251 = _3249 * _2083;
            float _3252 = _3249 * _2084;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3120 < ((_3118 >> 12u) & 15u))
            {
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3384 = _3103;
                float _3385 = _3105;
                float _3386 = _3107;
                float _3387 = _3109;
                float _3388 = _3111;
                float _3389 = _3113;
                uint _3390 = _3120;
                uint _3399;
                bool _3400;
                for (;;)
                {
                    _3399 = texelFetch(g_lightClassification, int((((_3017 << 5u) + (_3003 << 9u)) + (_3390 << 2u)) >> 2u)).x;
                    _3400 = _3399 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3400)
                    {
                        frontier_phi_82_pred = _3389;
                        frontier_phi_82_pred_1 = _3388;
                        frontier_phi_82_pred_2 = _3387;
                        frontier_phi_82_pred_3 = _3386;
                        frontier_phi_82_pred_4 = _3385;
                        frontier_phi_82_pred_5 = _3384;
                    }
                    else
                    {
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        uint _3611 = _3399;
                        uint _3612;
                        vec4 _3637;
                        float _3638;
                        vec4 _3653;
                        vec3 _3665;
                        vec4 _3680;
                        vec4 _3695;
                        float _3741;
                        bool _3742;
                        for (;;)
                        {
                            uint _3622 = ((_3390 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3611));
                            _3612 = (_3611 + 4294967295u) & _3611;
                            uint _3624 = _3622 * 40u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3638 = _3637.w;
                            uint _3640 = (_3622 * 40u) + 4u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3622 * 40u) + 8u;
                            _3665 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x));
                            uint _3667 = (_3622 * 40u) + 16u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3682 = (_3622 * 40u) + 20u;
                            _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3697 = (_3622 * 40u) + 24u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3716 = (_3622 * 40u) + 28u;
                            vec4 _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            _3741 = fma(_2084, _3729.z, fma(_2083, _3729.y, _3729.x * _2082)) + _3729.w;
                            _3742 = !((fma(_2084, _3710.z, fma(_2083, _3710.y, _3710.x * _2082)) + _3710.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3742)
                            {
                                float _3769 = _3637.x - _2082;
                                float _3770 = _3637.y - _2083;
                                float _3771 = _3637.z - _2084;
                                float _3772 = dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771));
                                float _3775 = inversesqrt(_3772);
                                float _3776 = _3775 * _3769;
                                float _3777 = _3775 * _3770;
                                float _3778 = _3775 * _3771;
                                float _3782 = 1.0 - (_3772 / (_3638 * _3638));
                                float _4971 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3787 = sqrt(_3772) * _3653.w;
                                float _3789 = 1.39999997615814208984375 / (_3787 + 1.39999997615814208984375);
                                float _3790 = _3789 * _3789;
                                float _3793 = ((1.0 - _3790) * dot(vec3(_3776, _3777, _3778), vec3(_917, _920, _923))) + _3790;
                                float _3796 = _3787 * _3787;
                                float _3800 = (fma(_2084, _3680.z, fma(_2083, _3680.y, _3680.x * _2082)) + _3680.w) / _3741;
                                float _3801 = (fma(_2084, _3695.z, fma(_2083, _3695.y, _3695.x * _2082)) + _3695.w) / _3741;
                                float _3805 = 1.0 - dot(vec2(_3800, _3801), vec2(_3800, _3801));
                                float _4987 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3807 = _3806 * (((isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0))) * _3783) / ((_3796 * 0.699999988079071044921875) + 1.0));
                                float _3819 = exp2(log2(1.0 / ((_3796 * 3.5) + 5.0)) * 0.25);
                                float _3820 = 1.0 - _992;
                                float _3827 = sqrt(1.0 - ((1.0 - (_3820 * _3820)) * (1.0 - (_3819 * _3819))));
                                float _3828 = _3827 * _3827;
                                float _3829 = _3828 * _3828;
                                float _3830 = _3776 - _3250;
                                float _3831 = _3777 - _3251;
                                float _3832 = _3778 - _3252;
                                float _3836 = inversesqrt(dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832)));
                                float _3840 = dot(vec3(_917, _920, _923), vec3((-0.0) - _3250, (-0.0) - _3251, (-0.0) - _3252));
                                float _4998 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3843 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3844 = dot(vec3(_917, _920, _923), vec3(_3836 * _3830, _3836 * _3831, _3836 * _3832));
                                float _5009 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3847 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3851 = ((_3847 * _3847) * (_3829 + (-1.0))) + 1.0;
                                float _3852 = _3789 * _3828;
                                float _3853 = _3852 * _3852;
                                float _3859 = ((1.0 - _3853) * dot(vec3(_917, _920, _923), vec3(_3776, _3777, _3778))) + _3853;
                                float _5020 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3861 = 1.0 - _3828;
                                float _3871 = (0.5 / (((_3860 * ((_3843 * _3861) + _3828)) + 9.9999999392252902907785028219223e-09) + (((_3860 * _3861) + _3828) * _3843))) * _3860;
                                float _5031 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3881 = (_3806 * _3783) * (((_3829 * 3.1415927410125732421875) * (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) / ((_3851 * _3851) * ((_3796 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3807 * _3653.z;
                                frontier_phi_88_pred_1 = _3807 * _3653.y;
                                frontier_phi_88_pred_2 = _3807 * _3653.x;
                                frontier_phi_88_pred_3 = _3881 * _3665.z;
                                frontier_phi_88_pred_4 = _3881 * _3665.y;
                                frontier_phi_88_pred_5 = _3881 * _3665.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3890 = frontier_phi_88_pred;
                            _3889 = frontier_phi_88_pred_1;
                            _3888 = frontier_phi_88_pred_2;
                            _3887 = frontier_phi_88_pred_3;
                            _3886 = frontier_phi_88_pred_4;
                            _3885 = frontier_phi_88_pred_5;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            if (_3612 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3612;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3597;
                        frontier_phi_82_pred_1 = _3596;
                        frontier_phi_82_pred_2 = _3595;
                        frontier_phi_82_pred_3 = _3594;
                        frontier_phi_82_pred_4 = _3593;
                        frontier_phi_82_pred_5 = _3592;
                    }
                    _3235 = frontier_phi_82_pred;
                    _3233 = frontier_phi_82_pred_1;
                    _3231 = frontier_phi_82_pred_2;
                    _3229 = frontier_phi_82_pred_3;
                    _3227 = frontier_phi_82_pred_4;
                    _3225 = frontier_phi_82_pred_5;
                    uint _3391 = _3390 + 1u;
                    if (_3391 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3384 = _3225;
                        _3385 = _3227;
                        _3386 = _3229;
                        _3387 = _3231;
                        _3388 = _3233;
                        _3389 = _3235;
                        _3390 = _3391;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3231;
                frontier_phi_63_64_ladder_1 = _3235;
                frontier_phi_63_64_ladder_2 = _3233;
                frontier_phi_63_64_ladder_3 = _3229;
                frontier_phi_63_64_ladder_4 = _3227;
                frontier_phi_63_64_ladder_5 = _3225;
            }
            else
            {
                frontier_phi_63_64_ladder = _3109;
                frontier_phi_63_64_ladder_1 = _3113;
                frontier_phi_63_64_ladder_2 = _3111;
                frontier_phi_63_64_ladder_3 = _3107;
                frontier_phi_63_64_ladder_4 = _3105;
                frontier_phi_63_64_ladder_5 = _3103;
            }
            _3224 = frontier_phi_63_64_ladder_5;
            _3226 = frontier_phi_63_64_ladder_4;
            _3228 = frontier_phi_63_64_ladder_3;
            _3230 = frontier_phi_63_64_ladder;
            _3232 = frontier_phi_63_64_ladder_2;
            _3234 = frontier_phi_63_64_ladder_1;
        }
        float _3239 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
        _3036 = (_3239 * _3230) + _2548;
        _3038 = (_3239 * _3232) + _2550;
        _3040 = (_3239 * _3234) + _2552;
        _3042 = ((_3224 * _960) * _3239) + _2886;
        _3044 = ((_3226 * _962) * _3239) + _2888;
        _3046 = ((_3228 * _963) * _3239) + _2890;
    }
    else
    {
        _3036 = _2548;
        _3038 = _2550;
        _3040 = _2552;
        _3042 = _2886;
        _3044 = _2888;
        _3046 = _2890;
    }
    float _5047 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5058 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _5069 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _3063 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3036 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _976))) + ((_3042 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _3064 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3038 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _976))) + ((_3044 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _3065 = ((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3040 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _976))) + ((_3046 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    uint _3066 = _256 + 6u;
    float _3074 = _898 / cbSceneParam._m0[86u].x;
    float _3075 = _899 / cbSceneParam._m0[86u].y;
    vec4 _3089 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3091 = _3089.x;
    float _3092 = _3089.y;
    float _3093 = _3089.z;
    float _3094 = _3089.w;
    float _3166;
    float _3168;
    float _3170;
    float _3172;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _3128 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _3129 = _3128 / _820;
        float _3140 = _3129 * _871;
        float _3141 = _872 * _3129;
        float _3142 = (-0.0) - _3141;
        float _3144 = _3129 * _873;
        float _3146 = (cbSceneParam._m0[77u].w * _3142) / _3128;
        float _3147 = _3146 + cbSceneParam._m0[79u].w;
        float _3148 = cbSceneParam._m0[79u].w - _3141;
        float _3154 = sqrt(((_3140 * _3140) + (_3141 * _3141)) + (_3144 * _3144));
        float _3157 = (1.0 - (cbSceneParam._m0[77u].w / _3128)) * _3154;
        float _3162 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3164 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3341;
        if (abs((_3142 - _3146) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3341 = ((((_3147 > 0.0) ? exp2(_3162 * _3147) : (2.0 - exp2(_3164 * _3147))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3157;
        }
        else
        {
            float _3285 = 1.0 / cbSceneParam._m0[80u].x;
            float _3286 = isnan(_3148) ? _3147 : (isnan(_3147) ? _3148 : max(_3147, _3148));
            float _3287 = isnan(_3148) ? _3147 : (isnan(_3147) ? _3148 : min(_3147, _3148));
            float _3296 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : min(_3286, 0.0));
            float _3297 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : min(_3287, 0.0));
            _3341 = ((abs(_3154 / _3142) * cbSceneParam._m0[80u].y) * ((((_3296 - _3297) * 2.0) - ((exp2(_3162 * (isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0)))) - exp2(_3162 * (isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))))) * _3285)) - ((exp2(_3164 * _3296) - exp2(_3164 * _3297)) * _3285))) + (_3157 * cbSceneParam._m0[80u].z);
        }
        vec4 _3343 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, 1.0), 0.0);
        float _3352 = exp2((_3341 * (-1.44269502162933349609375)) * (1.0 - _3343.w));
        float _3353 = log2(_3352);
        float _3369 = log2(_3094);
        _3166 = (exp2(_3369 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3353 * cbSceneParam._m0[78u].x)) * _3343.x) / cbSceneParam._m0[78u].x)) + _3091;
        _3168 = (exp2(_3369 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3353 * cbSceneParam._m0[78u].y)) * _3343.y) / cbSceneParam._m0[78u].y)) + _3092;
        _3170 = (exp2(_3369 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3353 * cbSceneParam._m0[78u].z)) * _3343.z) / cbSceneParam._m0[78u].z)) + _3093;
        _3172 = _3352 * _3094;
    }
    else
    {
        _3166 = _3091;
        _3168 = _3092;
        _3170 = _3093;
        _3172 = _3094;
    }
    bool _3379;
    vec4 _3182;
    vec4 _3204;
    float _3206;
    float _3210;
    float _3211;
    float _3212;
    float _3213;
    bool _3223;
    for (;;)
    {
        _3182 = cbMatDynParam._m0[0u];
        float _3184 = roundEven(_3182.y);
        bool _3185 = _3184 == 3.0;
        float _3186 = log2(_3172);
        float _3193 = exp2(_3186 * cbSceneParam._m0[78u].x) * _3063;
        float _3194 = exp2(_3186 * cbSceneParam._m0[78u].y) * _3064;
        float _3195 = exp2(_3186 * cbSceneParam._m0[78u].z) * _3065;
        float _3202 = _887 + (-0.5);
        _3204 = cbMtdParam._m0[1u];
        _3206 = _3204.y * _3202;
        float _3209 = (_3184 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3210 = _3209 * (_3185 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3166)));
        _3211 = _3209 * (_3185 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3168)));
        _3212 = _3209 * (_3185 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3170)));
        _3213 = _3202 * 0.999000012874603271484375;
        _3223 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3223)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3213) < 0.5)
            {
                _3379 = true;
                break;
            }
        }
        uint _3320 = _936 + uint(_3182.w);
        if ((cbInstanceData._m0[_3320].w < 1.0) && ((cbInstanceData._m0[_3320].w + _3213) < 0.5))
        {
            _3379 = true;
            break;
        }
        if ((_3206 + 1.0) < _3204.x)
        {
            _3379 = true;
            break;
        }
        _3379 = false;
        break;
    }
    float _3583;
    if (_3379)
    {
        discard_state = true;
        _3583 = 0.0;
    }
    else
    {
        _3583 = cbInstanceData._m0[_3066].w;
    }
    SV_Target.x = _3210;
    SV_Target.y = _3211;
    SV_Target.z = _3212;
    SV_Target.w = _3583;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3066].w;
    discard_exit();
}


