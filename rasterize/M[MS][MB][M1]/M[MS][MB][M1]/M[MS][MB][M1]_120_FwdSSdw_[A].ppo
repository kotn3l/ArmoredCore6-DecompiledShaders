#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1463;
float _3867;
float _3868;
float _3869;
float _3870;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3879 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3890 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3901 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3912 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _455;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    float _539 = ((_509.z - _530) * _436) + _530;
    float _542 = ((((_509.x - _528) * _436) + _528) * 2.0) + (-1.0);
    float _543 = ((((_509.y - _529) * _436) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3923 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))));
    float _552 = _542 + ((((_482.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _553 = _543 + ((((_482.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _556 = fma(_549, _254, fma(_553, _261, _552 * _247));
    float _559 = fma(_549, _255, fma(_553, _262, _552 * _248));
    float _562 = fma(_549, _256, fma(_553, _263, _552 * _249));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _608 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _615 = ((_610 - _611) * cbMtdParam._m0[24u].z) + _611;
    float _617 = (cbMtdParam._m0[19u].x + dot(vec4(_566 * _556, _566 * _559, _566 * _562, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_615 * cbMtdParam._m0[21u].z);
    float _3934 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _620 = (-0.0) - cbMtdParam._m0[24u].x;
    float _622 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
    float _630 = _618 - ((_618 * TEXCOORD_8.x) * _623);
    float _631 = _618 - ((_618 * TEXCOORD_8.y) * _623);
    float _632 = _618 - ((_618 * TEXCOORD_8.z) * _623);
    float _639 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _643 = ((isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : min(_639, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _651 = (_643 - (((_615 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _643))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3965 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _656 = ((_630 * (cbMtdParam._m0[17u].x - _462)) * _652) + _462;
    float _657 = ((_631 * (cbMtdParam._m0[17u].y - _463)) * _652) + _463;
    float _658 = ((_632 * (cbMtdParam._m0[17u].z - _464)) * _652) + _464;
    vec4 _670 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _698 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_672 - _673) * cbMtdParam._m0[24u].w) + _673) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3976 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _707 = ((((cbMtdParam._m0[10u].x - _656) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _699) + _656;
    float _708 = ((((cbMtdParam._m0[10u].y - _657) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _699) + _657;
    float _709 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _658)) * _699) + _658;
    vec4 _735 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _737 = _735.x;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _737) * _436) + _737;
    float _759 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _755) * cbMtdParam._m0[19u].z) + _755;
    float _762 = _759 - ((_652 * _630) * _759);
    float _764 = _762 - (_762 * _699);
    float _769 = (((_482.z - _539) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _539;
    vec4 _783 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _790 = (_783.x * 2.0) + (-1.0);
    float _791 = (_783.y * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _3987 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _801 = (((_783.z - _769) * _630) * _652) + _769;
    float _804 = ((cbMtdParam._m0[23u].y - _801) * _699) + _801;
    vec4 _823 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _829 = (_823.x * 2.0) + (-1.0);
    float _830 = (_823.y * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _3998 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _851 = (((cbMtdParam._m0[21u].x * _552) + ((_790 - _552) * _630)) * _652) + _552;
    float _852 = (((cbMtdParam._m0[21u].x * _553) + ((_791 - _553) * _631)) * _652) + _553;
    float _853 = (((sqrt(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) - _549) * _632) * _652) + _549;
    float _864 = (((_829 - _851) + (_851 * cbMtdParam._m0[22u].z)) * _699) + _851;
    float _865 = (((_830 - _852) + (_852 * cbMtdParam._m0[22u].z)) * _699) + _852;
    float _866 = ((sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) - _853) * _699) + _853;
    float _870 = cbMtdParam._m0[22u].x + _582.w;
    float _873 = fma(_866, _254, fma(_865, _261, _864 * _247));
    float _876 = fma(_866, _255, fma(_865, _262, _864 * _248));
    float _879 = fma(_866, _256, fma(_865, _263, _864 * _249));
    float _883 = inversesqrt(dot(vec3(_873, _876, _879), vec3(_873, _876, _879)));
    float _884 = _883 * _873;
    float _885 = _883 * _876;
    float _886 = _883 * _879;
    float _4009 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _887 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4031 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4042 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4053 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4064 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _892 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _906 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _956 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _946);
    float _957 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _946);
    float _958 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _946);
    float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
    float _963 = _956 * _962;
    float _964 = _957 * _962;
    float _965 = _958 * _962;
    vec4 _970 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _972 = _970.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1144 = sqrt(((_956 * _956) + (_957 * _957)) + (_958 * _958));
        float _1150 = (cbMatDynParam._m0[5u].x * _1144) + cbMatDynParam._m0[5u].y;
        float _4075 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1155 = (cbMatDynParam._m0[5u].z * _1144) + cbMatDynParam._m0[5u].w;
        float _4086 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) - _1151)) + _1151) < ((_972 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _983 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _984 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1002 = fma(_886, cbSceneParam._m0[5u].z, fma(_885, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _884));
    float _1005 = fma(_886, cbSceneParam._m0[6u].z, fma(_885, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _884));
    float _1008 = fma(_886, cbSceneParam._m0[7u].z, fma(_885, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _884));
    uint _1021 = _285 + 9u;
    uint _1022 = _1021 + uint(cbMatDynParam._m0[0u].w);
    float _1028 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1022].x;
    float _1029 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_1022].y;
    float _1030 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_1022].z;
    float _4097 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _1034 = 1.0 - _892;
    float _1035 = _1031 * _1034;
    float _1036 = _1032 * _1034;
    float _1037 = _1033 * _1034;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _892;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _892;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _892;
    float _1045 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _983, cbSceneParam._m0[86u].y * _984));
    float _1061 = ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * TEXCOORD_5.w) * _1057.x;
    float _1062 = dot(vec3(_884, _885, _886), vec3(_963, _964, _965));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _884) - _963;
    float _1070 = (_1065 * _885) - _964;
    float _1071 = (_1065 * _886) - _965;
    float _1075 = abs(dot(vec3(_963, _964, _965), vec3(_884, _885, _886)));
    float _4130 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_887);
    float _1090 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1096 = (1.0 - _1090) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1097 = _1090 * _1077;
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1187 = fma(_1133, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125));
        float _1191 = fma(_1133, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125));
        float _1195 = fma(_1133, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125));
        float _1220 = _1125 + _884;
        float _1221 = _1129 + _885;
        float _1222 = _1133 + _886;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1187;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1191;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1195;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1187 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1191 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1195 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_884, _885, _886), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4178 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_884, _885, _886), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4211 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_884, _885, _886), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4244 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1505 = fma(_1133, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125));
        float _1509 = fma(_1133, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125));
        float _1513 = fma(_1133, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125));
        float _1536 = _1125 + _884;
        float _1537 = _1129 + _885;
        float _1538 = _1133 + _886;
        float _1548 = fma(_1538, cbModelParam._m0[30u].z, fma(_1537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1536)) - _1505;
        float _1549 = fma(_1538, cbModelParam._m0[31u].z, fma(_1537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1536)) - _1509;
        float _1550 = fma(_1538, cbModelParam._m0[32u].z, fma(_1537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1536)) - _1513;
        float _1554 = inversesqrt(dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550)));
        float _1567 = ((_1554 * _1548) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1505 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1554 * _1549) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1509 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1569 = ((_1554 * _1550) / cbModelParam._m0[35u].z) + ((((((_1513 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        float _1604 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1571.x + (-0.5));
        float _1606 = _1604 * (_1571.y + (-0.5));
        float _1607 = _1604 * (_1571.z + (-0.5));
        float _1614 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1578.x + (-0.5));
        float _1616 = _1614 * (_1578.y + (-0.5));
        float _1617 = _1614 * (_1578.z + (-0.5));
        float _1624 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1585.x + (-0.5));
        float _1626 = _1624 * (_1585.y + (-0.5));
        float _1627 = _1624 * (_1585.z + (-0.5));
        float _1634 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1592.x + (-0.5));
        float _1636 = _1634 * (_1592.y + (-0.5));
        float _1637 = _1634 * (_1592.z + (-0.5));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = _1605 * 0.5;
        float _1642 = _1615 * 0.5;
        float _1643 = _1625 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_884, _885, _886), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4307 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1668 + 1.0))) + _1673) * _1638;
        float _1683 = _1606 * 0.5;
        float _1684 = _1616 * 0.5;
        float _1685 = _1626 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_884, _885, _886), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4340 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1710 + 1.0))) + _1715) * _1639;
        float _1725 = _1607 * 0.5;
        float _1726 = _1617 * 0.5;
        float _1727 = _1627 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_884, _885, _886), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4373 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1752 + 1.0))) + _1757) * _1640;
        _1774 = _1607;
        _1775 = _1606;
        _1776 = _1605;
        _1777 = _1617;
        _1778 = _1616;
        _1779 = _1615;
        _1780 = _1627;
        _1781 = _1626;
        _1782 = _1625;
        _1783 = _1640;
        _1784 = _1639;
        _1785 = _1638;
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
    }
    else
    {
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = _1463;
        _1782 = _1463;
        _1783 = _1463;
        _1784 = _1463;
        _1785 = _1463;
        _1786 = 0.0;
        _1787 = 0.0;
        _1788 = 0.0;
    }
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1475)) + _1475;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1476)) + _1476;
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1477)) + _1477;
    float _1821 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1798));
    float _1842 = _1069 * 0.5;
    float _1843 = _1070 * 0.5;
    float _1844 = _1071 * 0.5;
    float _1845 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1848 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1851 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1885;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1858 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1862 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1866 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1873 = dot(vec4(cbModelParam._m0[39u]), vec4(_1842, _1843, _1844, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1896;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1887 = dot(vec4(cbModelParam._m0[40u]), vec4(_1842, _1843, _1844, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1900 = (_1896 * cbModelParam._m0[1u].x) + (_1885 * (1.0 - cbModelParam._m0[1u].x));
    float _1910 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _887);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1910 : min(cbModelParam._m0[25u].z, _1910));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1959 = fma(_1133, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125)) + cbModelParam._m0[13u].w;
        float _1963 = fma(_1133, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125)) + cbModelParam._m0[14u].w;
        float _1967 = fma(_1133, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125)) + cbModelParam._m0[15u].w;
        float _1970 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1973 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1976 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _2004;
        if (_1970 > 0.0)
        {
            _2004 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2004 = frontier_phi_17_15_ladder;
        }
        float _2228;
        if (_1973 > 0.0)
        {
            _2228 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2228 = frontier_phi_26_22_ladder;
        }
        float _2485;
        if (_1976 > 0.0)
        {
            _2485 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2485 = frontier_phi_38_33_ladder;
        }
        float _2487 = isnan(_2228) ? _2004 : (isnan(_2004) ? _2228 : min(_2004, _2228));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1970) + _1959;
        float _2493 = (_2488 * _1973) + _1963;
        float _2494 = (_2488 * _1976) + _1967;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2495;
        float _2499 = _2495 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 > _2499) || ((_2493 < _2497) || ((_2492 < _2497) || (_2492 > _2499))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2622 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2494, cbModelParam._m0[9u].z, fma(_2493, cbModelParam._m0[9u].y, _2492 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2494, cbModelParam._m0[10u].z, fma(_2493, cbModelParam._m0[10u].y, _2492 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2494, cbModelParam._m0[11u].z, fma(_2493, cbModelParam._m0[11u].y, _2492 * cbModelParam._m0[11u].x))), _1911);
            frontier_phi_16_38_ladder = _2622.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2622.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2622.x * cbModelParam._m0[1u].y;
        }
        _1992 = frontier_phi_16_38_ladder_2;
        _1994 = frontier_phi_16_38_ladder_1;
        _1996 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1911);
        _1992 = _1980.x * cbModelParam._m0[1u].y;
        _1994 = _1980.y * cbModelParam._m0[1u].y;
        _1996 = _1980.z * cbModelParam._m0[1u].y;
    }
    float _2000 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _887);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2000 : min(cbModelParam._m0[25u].w, _2000));
    float _2091;
    float _2093;
    float _2095;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2055 = fma(_1133, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125)) + cbModelParam._m0[21u].w;
        float _2059 = fma(_1133, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125)) + cbModelParam._m0[22u].w;
        float _2063 = fma(_1133, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125)) + cbModelParam._m0[23u].w;
        float _2066 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2069 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2072 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2233;
        if (_2066 > 0.0)
        {
            _2233 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2233 = frontier_phi_28_24_ladder;
        }
        float _2512;
        if (_2069 > 0.0)
        {
            _2512 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2512 = frontier_phi_40_35_ladder;
        }
        float _2725;
        if (_2072 > 0.0)
        {
            _2725 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2725 = frontier_phi_49_46_ladder;
        }
        float _2727 = isnan(_2512) ? _2233 : (isnan(_2233) ? _2512 : min(_2233, _2512));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _2066) + _2055;
        float _2733 = (_2728 * _2069) + _2059;
        float _2734 = (_2728 * _2072) + _2063;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2735;
        float _2738 = _2735 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2734 > _2738) || ((_2734 < _2736) || ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 < _2736) || (_2732 > _2738))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2734, cbModelParam._m0[17u].z, fma(_2733, cbModelParam._m0[17u].y, _2732 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2734, cbModelParam._m0[18u].z, fma(_2733, cbModelParam._m0[18u].y, _2732 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2734, cbModelParam._m0[19u].z, fma(_2733, cbModelParam._m0[19u].y, _2732 * cbModelParam._m0[19u].x))), _2001);
            frontier_phi_25_49_ladder = _2933.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2933.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2933.x * cbModelParam._m0[1u].z;
        }
        _2091 = frontier_phi_25_49_ladder_2;
        _2093 = frontier_phi_25_49_ladder_1;
        _2095 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2075 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _2001);
        _2091 = _2075.x * cbModelParam._m0[1u].z;
        _2093 = _2075.y * cbModelParam._m0[1u].z;
        _2095 = _2075.z * cbModelParam._m0[1u].z;
    }
    float _2108 = (((_1096 * _1045) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2110 = (((_1096 * _1047) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2093 - _1994)) + _1994);
    float _2112 = (((_1096 * _1048) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2095 - _1996)) + _1996);
    float _2115 = fma(_2112, cbSceneParam._m0[89u].z, fma(_2110, cbSceneParam._m0[89u].y, _2108 * cbSceneParam._m0[89u].x));
    float _2118 = fma(_2112, cbSceneParam._m0[90u].z, fma(_2110, cbSceneParam._m0[90u].y, _2108 * cbSceneParam._m0[90u].x));
    float _2121 = fma(_2112, cbSceneParam._m0[91u].z, fma(_2110, cbSceneParam._m0[91u].y, _2108 * cbSceneParam._m0[91u].x));
    vec4 _2129 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_983, _984));
    float _2131 = _2129.w;
    float _2143 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2131);
    float _2144 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2131);
    float _2145 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2131);
    uvec4 _2149 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2151 = _2149.x * 14u;
    uint _2152 = _2151 + 13u;
    float _2159 = _1061 + (-1.0);
    float _2164 = (cbLight._m0[_2152].x * _2159) + 1.0;
    float _2165 = (cbLight._m0[_2152].y * _2159) + 1.0;
    float _2166 = (cbLight._m0[_2152].z * _2159) + 1.0;
    float _2167 = (cbLight._m0[_2152].w * _2159) + 1.0;
    uint _2168 = _2151 + 5u;
    float _2174 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2178 = _2151 + 4u;
    float _2187 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2191 = _2151 | 1u;
    float _2202 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_884, _885, _886));
    float _2205 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_884, _885, _886));
    float _4509 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _4520 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2210 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * 0.3183098733425140380859375;
    float _2212 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2219 = ((cbLight._m0[_2168].x * _2174) * _2212) + (((cbLight._m0[_2178].x * _2143) * _2187) * _2210);
    float _2220 = ((_2174 * cbLight._m0[_2168].y) * _2212) + (((cbLight._m0[_2178].y * _2144) * _2187) * _2210);
    float _2221 = ((_2174 * cbLight._m0[_2168].z) * _2212) + (((cbLight._m0[_2178].z * _2145) * _2187) * _2210);
    uvec4 _2225 = floatBitsToUint(cbLight._m0[_2151 + 12u]);
    bool _2227 = _2225.x == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2227)
    {
        _2238 = _2219;
        _2240 = _2220;
        _2242 = _2221;
    }
    else
    {
        uint _2246 = _2151 + 6u;
        float _2262 = (dot(vec3(cbLight._m0[_2151 + 2u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4531 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2265 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2238 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2219;
        _2240 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2220;
        _2242 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2221;
    }
    bool _2245 = _2225.y == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2245)
    {
        _2283 = _2238;
        _2285 = _2240;
        _2287 = _2242;
    }
    else
    {
        uint _2456 = _2151 + 7u;
        float _2472 = (dot(vec3(cbLight._m0[_2151 + 3u].xyz), vec3(_884, _885, _886)) * 0.5) + 0.5;
        float _2473 = _2472 * _2472;
        float _4547 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2474 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2475 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2283 = (((cbLight._m0[_2456].x * 0.3183098733425140380859375) * _2474) * _2475) + _2238;
        _2285 = (((cbLight._m0[_2456].y * 0.3183098733425140380859375) * _2474) * _2475) + _2240;
        _2287 = (((cbLight._m0[_2456].z * 0.3183098733425140380859375) * _2474) * _2475) + _2242;
    }
    uint _2290 = _2151 + 8u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _887) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2151].x + _963;
    float _2306 = cbLight._m0[_2151].y + _964;
    float _2307 = cbLight._m0[_2151].z + _965;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2151].xyz));
    float _4563 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _4574 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2319 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2320 = dot(vec3(_884, _885, _886), vec3(_2312, _2313, _2314));
    float _4585 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2312, _2313, _2314));
    float _4596 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2304 * _2304;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2341 = 0.959999978542327880859375 - _1042;
    float _2343 = 0.959999978542327880859375 - _1043;
    float _2344 = 0.959999978542327880859375 - _1044;
    float _2351 = 1.0 - _2304;
    float _2362 = (0.5 / (((_2319 * ((_2318 * _2351) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2351) + _2304) * _2318))) * _2318;
    float _4607 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    uint _2378 = _2151 + 9u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _887) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2191].x + _963;
    float _2392 = cbLight._m0[_2191].y + _964;
    float _2393 = cbLight._m0[_2191].z + _965;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2191].xyz));
    float _4618 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2405 = dot(vec3(_884, _885, _886), vec3(_2398, _2399, _2400));
    float _4629 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2398, _2399, _2400));
    float _4640 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2390 * _2390;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
    float _2431 = 1.0 - _2390;
    float _2441 = (0.5 / (((_2319 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2431) + _2390) * _2404))) * _2404;
    float _4651 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    float _2453 = (((((_2424 * _2341) + _1045) * cbLight._m0[_2378].x) * _2443) * _2174) + ((((cbLight._m0[_2290].x * _2143) * ((_2340 * _2341) + _1045)) * _2364) * _2187);
    float _2454 = (((((_2424 * _2343) + _1047) * cbLight._m0[_2378].y) * _2443) * _2174) + ((((cbLight._m0[_2290].y * _2144) * ((_2340 * _2343) + _1047)) * _2364) * _2187);
    float _2455 = (((((_2424 * _2344) + _1048) * cbLight._m0[_2378].z) * _2443) * _2174) + ((((cbLight._m0[_2290].z * _2145) * ((_2340 * _2344) + _1048)) * _2364) * _2187);
    float _2517;
    float _2519;
    float _2521;
    if (_2227)
    {
        _2517 = _2453;
        _2519 = _2454;
        _2521 = _2455;
    }
    else
    {
        uint _2523 = _2151 + 2u;
        uint _2527 = _2151 + 10u;
        float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _887) * 0.949999988079071044921875);
        float _2542 = _2541 * _2541;
        float _2543 = cbLight._m0[_2523].x + _963;
        float _2544 = cbLight._m0[_2523].y + _964;
        float _2545 = cbLight._m0[_2523].z + _965;
        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
        float _2550 = _2549 * _2543;
        float _2551 = _2549 * _2544;
        float _2552 = _2549 * _2545;
        float _2553 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2523].xyz));
        float _4662 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2557 = dot(vec3(_884, _885, _886), vec3(_2550, _2551, _2552));
        float _4673 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2561 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2550, _2551, _2552));
        float _4684 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2565 = _2542 * _2542;
        float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
        float _2576 = exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0);
        float _2583 = 1.0 - _2542;
        float _2593 = (0.5 / (((_2319 * ((_2556 * _2583) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2583) + _2542) * _2556))) * _2556;
        float _4695 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2595 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
        float _2596 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2517 = (((((_2576 * _2341) + _1045) * cbLight._m0[_2527].x) * _2595) * _2596) + _2453;
        _2519 = (((((_2576 * _2343) + _1047) * cbLight._m0[_2527].y) * _2595) * _2596) + _2454;
        _2521 = (((((_2576 * _2344) + _1048) * cbLight._m0[_2527].z) * _2595) * _2596) + _2455;
    }
    float _2631;
    float _2633;
    float _2635;
    if (_2245)
    {
        _2631 = _2517;
        _2633 = _2519;
        _2635 = _2521;
    }
    else
    {
        uint _2642 = _2151 + 3u;
        uint _2646 = _2151 + 11u;
        float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2642].w)) * _887) * 0.949999988079071044921875);
        float _2661 = _2660 * _2660;
        float _2662 = cbLight._m0[_2642].x + _963;
        float _2663 = cbLight._m0[_2642].y + _964;
        float _2664 = cbLight._m0[_2642].z + _965;
        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
        float _2669 = _2668 * _2662;
        float _2670 = _2668 * _2663;
        float _2671 = _2668 * _2664;
        float _2672 = dot(vec3(_884, _885, _886), vec3(cbLight._m0[_2642].xyz));
        float _4711 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2676 = dot(vec3(_884, _885, _886), vec3(_2669, _2670, _2671));
        float _4722 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2680 = dot(vec3(cbLight._m0[_2642].xyz), vec3(_2669, _2670, _2671));
        float _4733 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2684 = _2661 * _2661;
        float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
        float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) * 5.0);
        float _2702 = 1.0 - _2661;
        float _2712 = (0.5 / (((_2319 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2702) + _2661) * _2675))) * _2675;
        float _4744 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2631 = (((((_2695 * _2341) + _1045) * cbLight._m0[_2646].x) * _2714) * _2715) + _2517;
        _2633 = (((((_2695 * _2343) + _1047) * cbLight._m0[_2646].y) * _2714) * _2715) + _2519;
        _2635 = (((((_2695 * _2344) + _1048) * cbLight._m0[_2646].z) * _2714) * _2715) + _2521;
    }
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_2149.y == 0u)
    {
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2790;
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2790;
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2790;
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.x;
        uint _2817 = uint((float(_2805.y) * floor(float(uint(cbSceneParam._m0[85u].y * _984) / _2806))) + floor(float(uint(cbSceneParam._m0[85u].x * _983) / _2806)));
        float _2827 = (log2(_2793 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2828 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        uint _2831 = uint(isnan(14.0) ? _2828 : (isnan(_2828) ? 14.0 : min(_2828, 14.0)));
        uvec4 _2836 = texelFetch(g_lightClusterGridBuffer, int(((_2831 << 2u) + (_2817 << 6u)) >> 2u));
        uint _2837 = _2836.x;
        uint _2838 = _2805.z;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((((1u << ((_2838 >> 4u) & 15u)) + 4294967295u) & _2837) == 0u) || ((_2838 & 240u) == 0u))
        {
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
        }
        else
        {
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            uint _3096 = 0u;
            uint _3105;
            bool _3106;
            for (;;)
            {
                _3105 = texelFetch(g_lightClassification, int((((_2831 << 5u) + (_2817 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                _3106 = _3105 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3106)
                {
                    frontier_phi_66_pred = _3090;
                    frontier_phi_66_pred_1 = _3095;
                    frontier_phi_66_pred_2 = _3094;
                    frontier_phi_66_pred_3 = _3093;
                    frontier_phi_66_pred_4 = _3092;
                    frontier_phi_66_pred_5 = _3091;
                }
                else
                {
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    uint _3241;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3105;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    for (;;)
                    {
                        uint _3245 = uint(findLSB(_3241)) + (_3096 << 5u);
                        uint _3242 = (_3241 + 4294967295u) & _3241;
                        uint _3247 = _3245 * 48u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 3u)).x));
                        uint _3267 = (_3245 * 48u) + 4u;
                        vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3286 = (_3245 * 48u) + 8u;
                        vec3 _3297 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x));
                        float _3301 = _3261.x - _2791;
                        float _3302 = _3261.y - _2792;
                        float _3303 = _3261.z - _2793;
                        float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                        float _3307 = inversesqrt(_3304);
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3311 = dot(vec3(_1002, _1005, _1008), vec3(_3308, _3309, _3310));
                        float _3316 = 1.0 - (_3304 * _3261.w);
                        float _4770 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3318 = sqrt(_3304) * _3280.w;
                        float _3321 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3311) + _3322;
                        float _3328 = _3318 * _3318;
                        float _3332 = ((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3317) / ((_3328 * 0.699999988079071044921875) + 1.0);
                        float _3336 = (-0.0) - _2791;
                        float _3337 = (-0.0) - _2792;
                        float _3338 = (-0.0) - _2793;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3353 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                        float _3354 = 1.0 - _1077;
                        float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                        float _3362 = _3361 * _3361;
                        float _3363 = _3362 * _3362;
                        float _3364 = _3343 + _3308;
                        float _3365 = _3344 + _3309;
                        float _3366 = _3345 + _3310;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3374 = dot(vec3(_1002, _1005, _1008), vec3(_3343, _3344, _3345));
                        float _4786 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3378 = dot(vec3(_1002, _1005, _1008), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                        float _4797 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3381 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                        float _3386 = _3321 * _3362;
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3311) + _3387;
                        float _4808 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3392 = 1.0 - _3362;
                        float _3402 = (0.5 / (((_3391 * ((_3377 * _3392) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3362) * _3377))) * _3391;
                        float _4819 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3413 = (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) / ((_3385 * _3385) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125))) * _3317;
                        _3165 = (_3332 * _3280.x) + _3238;
                        _3166 = (_3332 * _3280.y) + _3239;
                        _3167 = (_3332 * _3280.z) + _3240;
                        _3162 = (_3413 * _3297.x) + _3235;
                        _3163 = (_3413 * _3297.y) + _3236;
                        _3164 = (_3413 * _3297.z) + _3237;
                        if (_3242 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3242;
                        }
                    }
                    frontier_phi_66_pred = _3162;
                    frontier_phi_66_pred_1 = _3167;
                    frontier_phi_66_pred_2 = _3166;
                    frontier_phi_66_pred_3 = _3165;
                    frontier_phi_66_pred_4 = _3164;
                    frontier_phi_66_pred_5 = _3163;
                }
                _2939 = frontier_phi_66_pred;
                _2949 = frontier_phi_66_pred_1;
                _2947 = frontier_phi_66_pred_2;
                _2945 = frontier_phi_66_pred_3;
                _2943 = frontier_phi_66_pred_4;
                _2941 = frontier_phi_66_pred_5;
                uint _3097 = _3096 + 1u;
                if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3090 = _2939;
                    _3091 = _2941;
                    _3092 = _2943;
                    _3093 = _2945;
                    _3094 = _2947;
                    _3095 = _2949;
                    _3096 = _3097;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
        }
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.z;
        uint _2955 = (_2953 >> 8u) & 15u;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((4294967295u << _2955) & _2837) == 0u)
        {
            _3058 = _2938;
            _3060 = _2940;
            _3062 = _2942;
            _3064 = _2944;
            _3066 = _2946;
            _3068 = _2948;
        }
        else
        {
            float _3083 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
            float _3084 = _3083 * _2791;
            float _3085 = _3083 * _2792;
            float _3086 = _3083 * _2793;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2955 < ((_2953 >> 12u) & 15u))
            {
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3218 = _2938;
                float _3219 = _2940;
                float _3220 = _2942;
                float _3221 = _2944;
                float _3222 = _2946;
                float _3223 = _2948;
                uint _3224 = _2955;
                uint _3233;
                bool _3234;
                for (;;)
                {
                    _3233 = texelFetch(g_lightClassification, int((((_2831 << 5u) + (_2817 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                    _3234 = _3233 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3234)
                    {
                        frontier_phi_77_pred = _3223;
                        frontier_phi_77_pred_1 = _3222;
                        frontier_phi_77_pred_2 = _3221;
                        frontier_phi_77_pred_3 = _3220;
                        frontier_phi_77_pred_4 = _3219;
                        frontier_phi_77_pred_5 = _3218;
                    }
                    else
                    {
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        float _3442 = _3220;
                        float _3443 = _3221;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        uint _3446 = _3233;
                        uint _3447;
                        vec4 _3472;
                        float _3473;
                        vec4 _3488;
                        vec3 _3500;
                        vec4 _3515;
                        vec4 _3530;
                        float _3576;
                        bool _3577;
                        for (;;)
                        {
                            uint _3457 = ((_3224 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3446));
                            _3447 = (_3446 + 4294967295u) & _3446;
                            uint _3459 = _3457 * 40u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3473 = _3472.w;
                            uint _3475 = (_3457 * 40u) + 4u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3457 * 40u) + 8u;
                            _3500 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x));
                            uint _3502 = (_3457 * 40u) + 16u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3457 * 40u) + 20u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3457 * 40u) + 24u;
                            vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3551 = (_3457 * 40u) + 28u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3576 = fma(_2793, _3564.z, fma(_2792, _3564.y, _3564.x * _2791)) + _3564.w;
                            _3577 = !((fma(_2793, _3545.z, fma(_2792, _3545.y, _3545.x * _2791)) + _3545.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3577)
                            {
                                float _3604 = _3472.x - _2791;
                                float _3605 = _3472.y - _2792;
                                float _3606 = _3472.z - _2793;
                                float _3607 = dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606));
                                float _3610 = inversesqrt(_3607);
                                float _3611 = _3610 * _3604;
                                float _3612 = _3610 * _3605;
                                float _3613 = _3610 * _3606;
                                float _3617 = 1.0 - (_3607 / (_3473 * _3473));
                                float _4830 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3622 = sqrt(_3607) * _3488.w;
                                float _3624 = 1.39999997615814208984375 / (_3622 + 1.39999997615814208984375);
                                float _3625 = _3624 * _3624;
                                float _3628 = ((1.0 - _3625) * dot(vec3(_3611, _3612, _3613), vec3(_1002, _1005, _1008))) + _3625;
                                float _3631 = _3622 * _3622;
                                float _3635 = (fma(_2793, _3515.z, fma(_2792, _3515.y, _3515.x * _2791)) + _3515.w) / _3576;
                                float _3636 = (fma(_2793, _3530.z, fma(_2792, _3530.y, _3530.x * _2791)) + _3530.w) / _3576;
                                float _3640 = 1.0 - dot(vec2(_3635, _3636), vec2(_3635, _3636));
                                float _4846 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3642 = _3641 * (((isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0))) * _3618) / ((_3631 * 0.699999988079071044921875) + 1.0));
                                float _3654 = exp2(log2(1.0 / ((_3631 * 3.5) + 5.0)) * 0.25);
                                float _3655 = 1.0 - _1077;
                                float _3662 = sqrt(1.0 - ((1.0 - (_3655 * _3655)) * (1.0 - (_3654 * _3654))));
                                float _3663 = _3662 * _3662;
                                float _3664 = _3663 * _3663;
                                float _3665 = _3611 - _3084;
                                float _3666 = _3612 - _3085;
                                float _3667 = _3613 - _3086;
                                float _3671 = inversesqrt(dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667)));
                                float _3675 = dot(vec3(_1002, _1005, _1008), vec3((-0.0) - _3084, (-0.0) - _3085, (-0.0) - _3086));
                                float _4857 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3679 = dot(vec3(_1002, _1005, _1008), vec3(_3671 * _3665, _3671 * _3666, _3671 * _3667));
                                float _4868 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3686 = ((_3682 * _3682) * (_3664 + (-1.0))) + 1.0;
                                float _3687 = _3624 * _3663;
                                float _3688 = _3687 * _3687;
                                float _3694 = ((1.0 - _3688) * dot(vec3(_1002, _1005, _1008), vec3(_3611, _3612, _3613))) + _3688;
                                float _4879 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3696 = 1.0 - _3663;
                                float _3706 = (0.5 / (((_3695 * ((_3678 * _3696) + _3663)) + 9.9999999392252902907785028219223e-09) + (((_3695 * _3696) + _3663) * _3678))) * _3695;
                                float _4890 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3716 = (_3641 * _3618) * (((_3664 * 3.1415927410125732421875) * (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) / ((_3686 * _3686) * ((_3631 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3642 * _3488.y;
                                frontier_phi_83_pred_1 = _3642 * _3488.x;
                                frontier_phi_83_pred_2 = _3716 * _3500.z;
                                frontier_phi_83_pred_3 = _3716 * _3500.y;
                                frontier_phi_83_pred_4 = _3716 * _3500.x;
                                frontier_phi_83_pred_5 = _3642 * _3488.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3724 = frontier_phi_83_pred;
                            _3723 = frontier_phi_83_pred_1;
                            _3722 = frontier_phi_83_pred_2;
                            _3721 = frontier_phi_83_pred_3;
                            _3720 = frontier_phi_83_pred_4;
                            _3725 = frontier_phi_83_pred_5;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            if (_3447 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3447;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3432;
                        frontier_phi_77_pred_1 = _3431;
                        frontier_phi_77_pred_2 = _3430;
                        frontier_phi_77_pred_3 = _3429;
                        frontier_phi_77_pred_4 = _3428;
                        frontier_phi_77_pred_5 = _3427;
                    }
                    _3069 = frontier_phi_77_pred;
                    _3067 = frontier_phi_77_pred_1;
                    _3065 = frontier_phi_77_pred_2;
                    _3063 = frontier_phi_77_pred_3;
                    _3061 = frontier_phi_77_pred_4;
                    _3059 = frontier_phi_77_pred_5;
                    uint _3225 = _3224 + 1u;
                    if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3218 = _3059;
                        _3219 = _3061;
                        _3220 = _3063;
                        _3221 = _3065;
                        _3222 = _3067;
                        _3223 = _3069;
                        _3224 = _3225;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3063;
                frontier_phi_58_59_ladder_1 = _3069;
                frontier_phi_58_59_ladder_2 = _3067;
                frontier_phi_58_59_ladder_3 = _3065;
                frontier_phi_58_59_ladder_4 = _3061;
                frontier_phi_58_59_ladder_5 = _3059;
            }
            else
            {
                frontier_phi_58_59_ladder = _2942;
                frontier_phi_58_59_ladder_1 = _2948;
                frontier_phi_58_59_ladder_2 = _2946;
                frontier_phi_58_59_ladder_3 = _2944;
                frontier_phi_58_59_ladder_4 = _2940;
                frontier_phi_58_59_ladder_5 = _2938;
            }
            _3058 = frontier_phi_58_59_ladder_5;
            _3060 = frontier_phi_58_59_ladder_4;
            _3062 = frontier_phi_58_59_ladder;
            _3064 = frontier_phi_58_59_ladder_3;
            _3066 = frontier_phi_58_59_ladder_2;
            _3068 = frontier_phi_58_59_ladder_1;
        }
        float _3073 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _2850 = (_3073 * _3064) + _2283;
        _2852 = (_3073 * _3066) + _2285;
        _2854 = (_3073 * _3068) + _2287;
        _2856 = ((_3058 * _1045) * _3073) + _2631;
        _2858 = ((_3060 * _1047) * _3073) + _2633;
        _2860 = ((_3062 * _1048) * _3073) + _2635;
    }
    else
    {
        _2850 = _2283;
        _2852 = _2285;
        _2854 = _2287;
        _2856 = _2631;
        _2858 = _2633;
        _2860 = _2635;
    }
    float _4906 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4917 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4928 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2877 = ((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2850 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1061))) + ((_2856 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1900)) * cbPerFrame._m0[3u].x);
    float _2878 = ((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2852 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1061))) + ((_2858 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1900)) * cbPerFrame._m0[3u].x);
    float _2879 = ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2854 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1061))) + ((_2860 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1900)) * cbPerFrame._m0[3u].x);
    uint _2880 = _285 + 6u;
    float _2888 = _983 / cbSceneParam._m0[86u].x;
    float _2889 = _984 / cbSceneParam._m0[86u].y;
    vec4 _2903 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, (log2((isnan(cbSceneParam._m0[77u].w) ? _906 : (isnan(_906) ? cbSceneParam._m0[77u].w : min(_906, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2905 = _2903.x;
    float _2906 = _2903.y;
    float _2907 = _2903.z;
    float _2908 = _2903.w;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_906 > cbSceneParam._m0[78u].w)
    {
        float _2963 = isnan(_906) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _906 : min(cbSceneParam._m0[80u].w, _906));
        float _2964 = _2963 / _906;
        float _2975 = _2964 * _956;
        float _2976 = _957 * _2964;
        float _2977 = (-0.0) - _2976;
        float _2978 = _2964 * _958;
        float _2980 = (cbSceneParam._m0[77u].w * _2977) / _2963;
        float _2981 = _2980 + cbSceneParam._m0[79u].w;
        float _2982 = cbSceneParam._m0[79u].w - _2976;
        float _2988 = sqrt(((_2975 * _2975) + (_2976 * _2976)) + (_2978 * _2978));
        float _2991 = (1.0 - (cbSceneParam._m0[77u].w / _2963)) * _2988;
        float _2996 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2998 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3175;
        if (abs((_2977 - _2980) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3175 = ((((_2981 > 0.0) ? exp2(_2996 * _2981) : (2.0 - exp2(_2998 * _2981))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2991;
        }
        else
        {
            float _3119 = 1.0 / cbSceneParam._m0[80u].x;
            float _3120 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : max(_2981, _2982));
            float _3121 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : min(_2981, _2982));
            float _3130 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : min(_3120, 0.0));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            _3175 = ((abs(_2988 / _2977) * cbSceneParam._m0[80u].y) * ((((_3130 - _3131) * 2.0) - ((exp2(_2996 * (isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0)))) - exp2(_2996 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))))) * _3119)) - ((exp2(_2998 * _3130) - exp2(_2998 * _3131)) * _3119))) + (_2991 * cbSceneParam._m0[80u].z);
        }
        vec4 _3177 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, 1.0), 0.0);
        float _3186 = exp2((_3175 * (-1.44269502162933349609375)) * (1.0 - _3177.w));
        float _3187 = log2(_3186);
        float _3203 = log2(_2908);
        _3000 = (exp2(_3203 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].x)) * _3177.x) / cbSceneParam._m0[78u].x)) + _2905;
        _3002 = (exp2(_3203 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].y)) * _3177.y) / cbSceneParam._m0[78u].y)) + _2906;
        _3004 = (exp2(_3203 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].z)) * _3177.z) / cbSceneParam._m0[78u].z)) + _2907;
        _3006 = _3186 * _2908;
    }
    else
    {
        _3000 = _2905;
        _3002 = _2906;
        _3004 = _2907;
        _3006 = _2908;
    }
    bool _3213;
    vec4 _3016;
    vec4 _3038;
    float _3040;
    float _3044;
    float _3045;
    float _3046;
    float _3047;
    bool _3057;
    for (;;)
    {
        _3016 = cbMatDynParam._m0[0u];
        float _3018 = roundEven(_3016.y);
        bool _3019 = _3018 == 3.0;
        float _3020 = log2(_3006);
        float _3027 = exp2(_3020 * cbSceneParam._m0[78u].x) * _2877;
        float _3028 = exp2(_3020 * cbSceneParam._m0[78u].y) * _2878;
        float _3029 = exp2(_3020 * cbSceneParam._m0[78u].z) * _2879;
        float _3036 = _972 + (-0.5);
        _3038 = cbMtdParam._m0[1u];
        _3040 = _3038.y * _3036;
        float _3043 = (_3018 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3044 = _3043 * (_3019 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3000)));
        _3045 = _3043 * (_3019 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3002)));
        _3046 = _3043 * (_3019 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3004)));
        _3047 = _3036 * 0.999000012874603271484375;
        _3057 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3057)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3047) < 0.5)
            {
                _3213 = true;
                break;
            }
        }
        uint _3154 = _1021 + uint(_3016.w);
        if ((cbInstanceData._m0[_3154].w < 1.0) && ((cbInstanceData._m0[_3154].w + _3047) < 0.5))
        {
            _3213 = true;
            break;
        }
        if ((_3040 + 1.0) < _3038.x)
        {
            _3213 = true;
            break;
        }
        _3213 = false;
        break;
    }
    float _3418;
    if (_3213)
    {
        discard_state = true;
        _3418 = 0.0;
    }
    else
    {
        _3418 = cbInstanceData._m0[_2880].w;
    }
    SV_Target.x = _3044;
    SV_Target.y = _3045;
    SV_Target.z = _3046;
    SV_Target.w = _3418;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2880].w;
    discard_exit();
}


