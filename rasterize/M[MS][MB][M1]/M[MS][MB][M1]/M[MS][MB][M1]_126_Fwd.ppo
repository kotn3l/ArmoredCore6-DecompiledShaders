#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1193;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3519 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _374) + _443;
    float _455 = ((((_422.x - _441) * _374) + _441) * 2.0) + (-1.0);
    float _457 = ((((_422.y - _442) * _374) + _442) * 2.0) + (-1.0);
    float _458 = dot(vec2(_455, _457), vec2(_455, _457));
    float _3530 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _506 = _504.x;
    float _507 = 1.0 - _506;
    float _520 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_506 - _507) * cbMtdParam._m0[24u].z) + _507) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3541 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _528 = (_521 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) + _381;
    float _529 = (_521 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) + _382;
    float _530 = (_521 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) + _383;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _558 = _556.x;
    float _576 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _558) * _374) + _558;
    float _580 = ((_542.x - _576) * cbMtdParam._m0[19u].z) + _576;
    float _582 = _580 - (_580 * _521);
    float _586 = (cbMtdParam._m0[19u].w * (_479.z - _452)) + _452;
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _606 = (_599.x * 2.0) + (-1.0);
    float _607 = (_599.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3552 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _616 = (_521 * (_599.z - _586)) + _586;
    float _619 = (((_479.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _455;
    float _620 = (((_479.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _457;
    float _632 = (((_606 - _619) + (cbMtdParam._m0[21u].x * _619)) * _521) + _619;
    float _633 = (((_607 - _620) + (cbMtdParam._m0[21u].x * _620)) * _521) + _620;
    float _634 = (_521 * (sqrt(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) - _463)) + _463;
    float _639 = cbMtdParam._m0[22u].x + _479.w;
    float _642 = fma(_634, _223 * NORMAL.x, fma(_633, _230 * TANGENT.x, (_216 * _208) * _632));
    float _645 = fma(_634, _223 * NORMAL.y, fma(_633, _230 * TANGENT.y, (_216 * _209) * _632));
    float _648 = fma(_634, _223 * NORMAL.z, fma(_633, _230 * TANGENT.z, (_216 * _210) * _632));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3563 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _656 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3585 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3596 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3607 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3618 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _661 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    float _741 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _742 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _763 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _766 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _780 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3629 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _792 = 1.0 - _661;
    float _793 = _789 * _792;
    float _794 = _790 * _792;
    float _795 = _791 * _792;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _661;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _661;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _661;
    float _803 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _741, cbSceneParam._m0[86u].y * _742));
    float _819 = ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * TEXCOORD_5.w) * _815.x;
    float _820 = dot(vec3(_653, _654, _655), vec3(_733, _734, _735));
    float _823 = _820 * 2.0;
    float _827 = (_823 * _653) - _733;
    float _828 = (_823 * _654) - _734;
    float _829 = (_823 * _655) - _735;
    float _833 = abs(dot(vec3(_733, _734, _735), vec3(_653, _654, _655)));
    float _3662 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _835 = sqrt(_656);
    float _848 = exp2((_835 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _854 = (1.0 - _848) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _855 = _848 * _835;
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1192;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _921 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _925 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _950 = _883 + _653;
        float _951 = _887 + _654;
        float _952 = _891 + _655;
        float _962 = fma(_952, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950)) - _917;
        float _963 = fma(_952, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950)) - _921;
        float _964 = fma(_952, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950)) - _925;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_917 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_921 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[34u].z) + ((((((_925 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1020 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_986.x + (-0.5));
        float _1022 = _1020 * (_986.y + (-0.5));
        float _1023 = _1020 * (_986.z + (-0.5));
        float _1030 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_993.x + (-0.5));
        float _1032 = _1030 * (_993.y + (-0.5));
        float _1033 = _1030 * (_993.z + (-0.5));
        float _1040 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1000.x + (-0.5));
        float _1042 = _1040 * (_1000.y + (-0.5));
        float _1043 = _1040 * (_1000.z + (-0.5));
        float _1050 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1007.x + (-0.5));
        float _1052 = _1050 * (_1007.y + (-0.5));
        float _1053 = _1050 * (_1007.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1074 = (dot(vec3(_653, _654, _655), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1084 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3710 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1086 + 1.0))) + _1091) * _1054;
        float _1101 = _1022 * 0.5;
        float _1102 = _1032 * 0.5;
        float _1103 = _1042 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_653, _654, _655), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3743 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1128 + 1.0))) + _1133) * _1055;
        float _1143 = _1023 * 0.5;
        float _1144 = _1033 * 0.5;
        float _1145 = _1043 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_653, _654, _655), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3776 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1170 + 1.0))) + _1175) * _1056;
        _1192 = _1023;
        _1194 = _1022;
        _1195 = _1021;
        _1196 = _1033;
        _1197 = _1032;
        _1198 = _1031;
        _1199 = _1043;
        _1200 = _1042;
        _1201 = _1041;
        _1202 = _1056;
        _1203 = _1055;
        _1204 = _1054;
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _1193;
        _1194 = _1193;
        _1195 = _1193;
        _1196 = _1193;
        _1197 = _1193;
        _1198 = _1193;
        _1199 = _1193;
        _1200 = _1193;
        _1201 = _1193;
        _1202 = _1193;
        _1203 = _1193;
        _1204 = _1193;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1236 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1240 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1263 = _883 + _653;
        float _1264 = _887 + _654;
        float _1265 = _891 + _655;
        float _1275 = fma(_1265, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263)) - _1232;
        float _1276 = fma(_1265, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263)) - _1236;
        float _1277 = fma(_1265, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263)) - _1240;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1232 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1236 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[35u].z) + ((((((_1240 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1331 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1298.x + (-0.5));
        float _1333 = _1331 * (_1298.y + (-0.5));
        float _1334 = _1331 * (_1298.z + (-0.5));
        float _1341 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1305.x + (-0.5));
        float _1343 = _1341 * (_1305.y + (-0.5));
        float _1344 = _1341 * (_1305.z + (-0.5));
        float _1351 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1312.x + (-0.5));
        float _1353 = _1351 * (_1312.y + (-0.5));
        float _1354 = _1351 * (_1312.z + (-0.5));
        float _1361 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1319.x + (-0.5));
        float _1363 = _1361 * (_1319.y + (-0.5));
        float _1364 = _1361 * (_1319.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_653, _654, _655), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3839 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1395 + 1.0))) + _1400) * _1365;
        float _1410 = _1333 * 0.5;
        float _1411 = _1343 * 0.5;
        float _1412 = _1353 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_653, _654, _655), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3872 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1437 + 1.0))) + _1442) * _1366;
        float _1452 = _1334 * 0.5;
        float _1453 = _1344 * 0.5;
        float _1454 = _1354 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_653, _654, _655), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3905 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1479 + 1.0))) + _1484) * _1367;
        _1501 = _1334;
        _1502 = _1333;
        _1503 = _1332;
        _1504 = _1344;
        _1505 = _1343;
        _1506 = _1342;
        _1507 = _1354;
        _1508 = _1353;
        _1509 = _1352;
        _1510 = _1367;
        _1511 = _1366;
        _1512 = _1365;
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1193;
        _1502 = _1193;
        _1503 = _1193;
        _1504 = _1193;
        _1505 = _1193;
        _1506 = _1193;
        _1507 = _1193;
        _1508 = _1193;
        _1509 = _1193;
        _1510 = _1193;
        _1511 = _1193;
        _1512 = _1193;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1206)) + _1206;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1207)) + _1207;
    float _1548 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1525));
    float _1569 = _827 * 0.5;
    float _1570 = _828 * 0.5;
    float _1571 = _829 * 0.5;
    float _1572 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1575 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1578 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1612;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1585 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1192, _1196, _1199, _1202));
        float _1589 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1600 = dot(vec4(cbModelParam._m0[39u]), vec4(_1569, _1570, _1571, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1623;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1614 = dot(vec4(cbModelParam._m0[40u]), vec4(_1569, _1570, _1571, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1627 = (_1623 * cbModelParam._m0[1u].x) + (_1612 * (1.0 - cbModelParam._m0[1u].x));
    float _1637 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1637 : min(cbModelParam._m0[25u].z, _1637));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1685 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1689 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1693 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1696 = fma(_829, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827));
        float _1699 = fma(_829, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827));
        float _1702 = fma(_829, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827));
        float _1730;
        if (_1696 > 0.0)
        {
            _1730 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1730 = frontier_phi_14_12_ladder;
        }
        float _1932;
        if (_1699 > 0.0)
        {
            _1932 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1932 = frontier_phi_23_19_ladder;
        }
        float _2186;
        if (_1702 > 0.0)
        {
            _2186 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2186 = frontier_phi_35_30_ladder;
        }
        float _2188 = isnan(_1932) ? _1730 : (isnan(_1730) ? _1932 : min(_1730, _1932));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1696) + _1685;
        float _2194 = (_2189 * _1699) + _1689;
        float _2195 = (_2189 * _1702) + _1693;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1638);
            frontier_phi_13_35_ladder = _2323.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2323.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2323.x * cbModelParam._m0[1u].y;
        }
        _1718 = frontier_phi_13_35_ladder_2;
        _1720 = frontier_phi_13_35_ladder_1;
        _1722 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_827, _828, _829), _1638);
        _1718 = _1706.x * cbModelParam._m0[1u].y;
        _1720 = _1706.y * cbModelParam._m0[1u].y;
        _1722 = _1706.z * cbModelParam._m0[1u].y;
    }
    float _1726 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1726 : min(cbModelParam._m0[25u].w, _1726));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1780 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1784 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1788 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1791 = fma(_829, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827));
        float _1794 = fma(_829, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827));
        float _1797 = fma(_829, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827));
        float _1937;
        if (_1791 > 0.0)
        {
            _1937 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1937 = frontier_phi_25_21_ladder;
        }
        float _2213;
        if (_1794 > 0.0)
        {
            _2213 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2213 = frontier_phi_37_32_ladder;
        }
        float _2426;
        if (_1797 > 0.0)
        {
            _2426 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2426 = frontier_phi_46_43_ladder;
        }
        float _2428 = isnan(_2213) ? _1937 : (isnan(_1937) ? _2213 : min(_1937, _2213));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1791) + _1780;
        float _2434 = (_2429 * _1794) + _1784;
        float _2435 = (_2429 * _1797) + _1788;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2436;
        float _2439 = _2436 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2435 > _2439) || ((_2435 < _2437) || ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 < _2437) || (_2433 > _2439))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2435, cbModelParam._m0[17u].z, fma(_2434, cbModelParam._m0[17u].y, _2433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2435, cbModelParam._m0[18u].z, fma(_2434, cbModelParam._m0[18u].y, _2433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2435, cbModelParam._m0[19u].z, fma(_2434, cbModelParam._m0[19u].y, _2433 * cbModelParam._m0[19u].x))), _1727);
            frontier_phi_22_46_ladder = _2634.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2634.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2634.x * cbModelParam._m0[1u].z;
        }
        _1816 = frontier_phi_22_46_ladder_2;
        _1818 = frontier_phi_22_46_ladder_1;
        _1820 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_827, _828, _829), _1727);
        _1816 = _1800.x * cbModelParam._m0[1u].z;
        _1818 = _1800.y * cbModelParam._m0[1u].z;
        _1820 = _1800.z * cbModelParam._m0[1u].z;
    }
    float _1833 = (((_854 * _803) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1816 - _1718)) + _1718);
    float _1835 = (((_854 * _805) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1818 - _1720)) + _1720);
    float _1837 = (((_854 * _806) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1820 - _1722)) + _1722);
    float _1840 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, _1833 * cbSceneParam._m0[91u].x));
    uvec4 _1856 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1858 = _1856.x * 14u;
    uint _1859 = _1858 + 13u;
    float _1866 = _819 + (-1.0);
    float _1871 = (cbLight._m0[_1859].x * _1866) + 1.0;
    float _1872 = (cbLight._m0[_1859].y * _1866) + 1.0;
    float _1873 = (cbLight._m0[_1859].z * _1866) + 1.0;
    float _1874 = (cbLight._m0[_1859].w * _1866) + 1.0;
    uint _1875 = _1858 + 5u;
    float _1881 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
    uint _1885 = _1858 + 4u;
    float _1891 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1895 = _1858 | 1u;
    float _1906 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_653, _654, _655));
    float _1909 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_653, _654, _655));
    float _4041 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _4052 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1914 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1916 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1923 = ((cbLight._m0[_1875].x * _1881) * _1916) + ((cbLight._m0[_1885].x * _1891) * _1914);
    float _1924 = ((_1881 * cbLight._m0[_1875].y) * _1916) + ((_1891 * cbLight._m0[_1885].y) * _1914);
    float _1925 = ((_1881 * cbLight._m0[_1875].z) * _1916) + ((_1891 * cbLight._m0[_1885].z) * _1914);
    uvec4 _1929 = floatBitsToUint(cbLight._m0[_1858 + 12u]);
    bool _1931 = _1929.x == 0u;
    float _1942;
    float _1944;
    float _1946;
    if (_1931)
    {
        _1942 = _1923;
        _1944 = _1924;
        _1946 = _1925;
    }
    else
    {
        uint _1950 = _1858 + 6u;
        float _1966 = (dot(vec3(cbLight._m0[_1858 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _1967 = _1966 * _1966;
        float _4063 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1969 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1942 = (((cbLight._m0[_1950].x * 0.3183098733425140380859375) * _1968) * _1969) + _1923;
        _1944 = (((cbLight._m0[_1950].y * 0.3183098733425140380859375) * _1968) * _1969) + _1924;
        _1946 = (((cbLight._m0[_1950].z * 0.3183098733425140380859375) * _1968) * _1969) + _1925;
    }
    bool _1949 = _1929.y == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1949)
    {
        _1987 = _1942;
        _1989 = _1944;
        _1991 = _1946;
    }
    else
    {
        uint _2157 = _1858 + 7u;
        float _2173 = (dot(vec3(cbLight._m0[_1858 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4079 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2176 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _1987 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _1942;
        _1989 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _1944;
        _1991 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _1946;
    }
    uint _1994 = _1858 + 8u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _656) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1858].x + _733;
    float _2010 = cbLight._m0[_1858].y + _734;
    float _2011 = cbLight._m0[_1858].z + _735;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1858].xyz));
    float _4095 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2023 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2024 = dot(vec3(_653, _654, _655), vec3(_2016, _2017, _2018));
    float _4117 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2016, _2017, _2018));
    float _4128 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2008 * _2008;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2044 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
    float _2045 = 0.959999978542327880859375 - _800;
    float _2047 = 0.959999978542327880859375 - _801;
    float _2048 = 0.959999978542327880859375 - _802;
    float _2055 = 1.0 - _2008;
    float _2066 = (0.5 / (((_2023 * ((_2022 * _2055) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2055) + _2008) * _2022))) * _2022;
    float _4139 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    uint _2079 = _1858 + 9u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _656) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1895].x + _733;
    float _2093 = cbLight._m0[_1895].y + _734;
    float _2094 = cbLight._m0[_1895].z + _735;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1895].xyz));
    float _4150 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2106 = dot(vec3(_653, _654, _655), vec3(_2099, _2100, _2101));
    float _4161 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2099, _2100, _2101));
    float _4172 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2091 * _2091;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
    float _2132 = 1.0 - _2091;
    float _2142 = (0.5 / (((_2023 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2132) + _2091) * _2105))) * _2105;
    float _4183 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    float _2154 = (((((_2125 * _2045) + _803) * cbLight._m0[_2079].x) * _2144) * _1881) + (((((_2044 * _2045) + _803) * cbLight._m0[_1994].x) * _2068) * _1891);
    float _2155 = (((((_2125 * _2047) + _805) * cbLight._m0[_2079].y) * _2144) * _1881) + (((((_2044 * _2047) + _805) * cbLight._m0[_1994].y) * _2068) * _1891);
    float _2156 = (((((_2125 * _2048) + _806) * cbLight._m0[_2079].z) * _2144) * _1881) + (((((_2044 * _2048) + _806) * cbLight._m0[_1994].z) * _2068) * _1891);
    float _2218;
    float _2220;
    float _2222;
    if (_1931)
    {
        _2218 = _2154;
        _2220 = _2155;
        _2222 = _2156;
    }
    else
    {
        uint _2224 = _1858 + 2u;
        uint _2228 = _1858 + 10u;
        float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _656) * 0.949999988079071044921875);
        float _2243 = _2242 * _2242;
        float _2244 = cbLight._m0[_2224].x + _733;
        float _2245 = cbLight._m0[_2224].y + _734;
        float _2246 = cbLight._m0[_2224].z + _735;
        float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
        float _2251 = _2250 * _2244;
        float _2252 = _2250 * _2245;
        float _2253 = _2250 * _2246;
        float _2254 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2224].xyz));
        float _4194 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2258 = dot(vec3(_653, _654, _655), vec3(_2251, _2252, _2253));
        float _4205 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2262 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2251, _2252, _2253));
        float _4216 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2266 = _2243 * _2243;
        float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
        float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2284 = 1.0 - _2243;
        float _2294 = (0.5 / (((_2023 * ((_2257 * _2284) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2284) + _2243) * _2257))) * _2257;
        float _4227 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2296 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
        float _2297 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2218 = (((((_2277 * _2045) + _803) * cbLight._m0[_2228].x) * _2296) * _2297) + _2154;
        _2220 = (((((_2277 * _2047) + _805) * cbLight._m0[_2228].y) * _2296) * _2297) + _2155;
        _2222 = (((((_2277 * _2048) + _806) * cbLight._m0[_2228].z) * _2296) * _2297) + _2156;
    }
    float _2332;
    float _2334;
    float _2336;
    if (_1949)
    {
        _2332 = _2218;
        _2334 = _2220;
        _2336 = _2222;
    }
    else
    {
        uint _2343 = _1858 + 3u;
        uint _2347 = _1858 + 11u;
        float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _656) * 0.949999988079071044921875);
        float _2362 = _2361 * _2361;
        float _2363 = cbLight._m0[_2343].x + _733;
        float _2364 = cbLight._m0[_2343].y + _734;
        float _2365 = cbLight._m0[_2343].z + _735;
        float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
        float _2370 = _2369 * _2363;
        float _2371 = _2369 * _2364;
        float _2372 = _2369 * _2365;
        float _2373 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2343].xyz));
        float _4243 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2377 = dot(vec3(_653, _654, _655), vec3(_2370, _2371, _2372));
        float _4254 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2381 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2370, _2371, _2372));
        float _4265 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2385 = _2362 * _2362;
        float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
        float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
        float _2403 = 1.0 - _2362;
        float _2413 = (0.5 / (((_2023 * ((_2376 * _2403) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2403) + _2362) * _2376))) * _2376;
        float _4276 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2332 = (((((_2396 * _2045) + _803) * cbLight._m0[_2347].x) * _2415) * _2416) + _2218;
        _2334 = (((((_2396 * _2047) + _805) * cbLight._m0[_2347].y) * _2415) * _2416) + _2220;
        _2336 = (((((_2396 * _2048) + _806) * cbLight._m0[_2347].z) * _2415) * _2416) + _2222;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1856.y == 0u)
    {
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2491;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2491;
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2491;
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _742) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _741) / _2507)));
        float _2528 = (log2(_2494 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
        }
        else
        {
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            uint _2790 = 0u;
            uint _2799;
            bool _2800;
            for (;;)
            {
                _2799 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2790 << 2u)) >> 2u)).x;
                _2800 = _2799 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2800)
                {
                    frontier_phi_61_pred = _2784;
                    frontier_phi_61_pred_1 = _2789;
                    frontier_phi_61_pred_2 = _2788;
                    frontier_phi_61_pred_3 = _2787;
                    frontier_phi_61_pred_4 = _2786;
                    frontier_phi_61_pred_5 = _2785;
                }
                else
                {
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    uint _2914;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2799;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    for (;;)
                    {
                        uint _2918 = uint(findLSB(_2914)) + (_2790 << 5u);
                        uint _2915 = (_2914 + 4294967295u) & _2914;
                        uint _2920 = _2918 * 48u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2940 = (_2918 * 48u) + 4u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2959 = (_2918 * 48u) + 8u;
                        vec3 _2970 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x));
                        float _2974 = _2934.x - _2492;
                        float _2975 = _2934.y - _2493;
                        float _2976 = _2934.z - _2494;
                        float _2977 = dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976));
                        float _2980 = inversesqrt(_2977);
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2984 = dot(vec3(_760, _763, _766), vec3(_2981, _2982, _2983));
                        float _2989 = 1.0 - (_2977 * _2934.w);
                        float _4302 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2991 = sqrt(_2977) * _2953.w;
                        float _2994 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2984) + _2995;
                        float _3001 = _2991 * _2991;
                        float _3005 = ((isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))) * _2990) / ((_3001 * 0.699999988079071044921875) + 1.0);
                        float _3009 = (-0.0) - _2492;
                        float _3010 = (-0.0) - _2493;
                        float _3011 = (-0.0) - _2494;
                        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3026 = exp2(log2(1.0 / ((_3001 * 3.5) + 5.0)) * 0.25);
                        float _3027 = 1.0 - _835;
                        float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                        float _3035 = _3034 * _3034;
                        float _3036 = _3035 * _3035;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3039 = _3018 + _2983;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3047 = dot(vec3(_760, _763, _766), vec3(_3016, _3017, _3018));
                        float _4318 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3051 = dot(vec3(_760, _763, _766), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                        float _4329 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                        float _3059 = _2994 * _3035;
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _2984) + _3060;
                        float _4340 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3065 = 1.0 - _3035;
                        float _3075 = (0.5 / (((_3064 * ((_3050 * _3065) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3035) * _3050))) * _3064;
                        float _4351 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3086 = (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3058 * _3058) * ((_3001 * 2.1991131305694580078125) + 3.141590118408203125))) * _2990;
                        _2843 = (_3005 * _2953.x) + _2911;
                        _2844 = (_3005 * _2953.y) + _2912;
                        _2845 = (_3005 * _2953.z) + _2913;
                        _2840 = (_3086 * _2970.x) + _2908;
                        _2841 = (_3086 * _2970.y) + _2909;
                        _2842 = (_3086 * _2970.z) + _2910;
                        if (_2915 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2915;
                        }
                    }
                    frontier_phi_61_pred = _2840;
                    frontier_phi_61_pred_1 = _2845;
                    frontier_phi_61_pred_2 = _2844;
                    frontier_phi_61_pred_3 = _2843;
                    frontier_phi_61_pred_4 = _2842;
                    frontier_phi_61_pred_5 = _2841;
                }
                _2640 = frontier_phi_61_pred;
                _2650 = frontier_phi_61_pred_1;
                _2648 = frontier_phi_61_pred_2;
                _2646 = frontier_phi_61_pred_3;
                _2644 = frontier_phi_61_pred_4;
                _2642 = frontier_phi_61_pred_5;
                uint _2791 = _2790 + 1u;
                if (_2791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2784 = _2640;
                    _2785 = _2642;
                    _2786 = _2644;
                    _2787 = _2646;
                    _2788 = _2648;
                    _2789 = _2650;
                    _2790 = _2791;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
        }
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.z;
        uint _2656 = (_2654 >> 8u) & 15u;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((4294967295u << _2656) & _2538) == 0u)
        {
            _2752 = _2639;
            _2754 = _2641;
            _2756 = _2643;
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
        }
        else
        {
            float _2777 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
            float _2778 = _2777 * _2492;
            float _2779 = _2777 * _2493;
            float _2780 = _2777 * _2494;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2656 < ((_2654 >> 12u) & 15u))
            {
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2891 = _2639;
                float _2892 = _2641;
                float _2893 = _2643;
                float _2894 = _2645;
                float _2895 = _2647;
                float _2896 = _2649;
                uint _2897 = _2656;
                uint _2906;
                bool _2907;
                for (;;)
                {
                    _2906 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                    _2907 = _2906 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2907)
                    {
                        frontier_phi_67_pred = _2894;
                        frontier_phi_67_pred_1 = _2895;
                        frontier_phi_67_pred_2 = _2896;
                        frontier_phi_67_pred_3 = _2893;
                        frontier_phi_67_pred_4 = _2892;
                        frontier_phi_67_pred_5 = _2891;
                    }
                    else
                    {
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        uint _3110 = _2906;
                        uint _3111;
                        vec4 _3136;
                        float _3137;
                        vec4 _3152;
                        vec3 _3164;
                        vec4 _3179;
                        vec4 _3195;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3121 = ((_2897 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3110));
                            _3111 = (_3110 + 4294967295u) & _3110;
                            uint _3123 = _3121 * 40u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3137 = _3136.w;
                            uint _3139 = (_3121 * 40u) + 4u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3121 * 40u) + 8u;
                            _3164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x));
                            uint _3166 = (_3121 * 40u) + 16u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3182 = (_3121 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3121 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3121 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2494, _3229.z, fma(_2493, _3229.y, _3229.x * _2492)) + _3229.w;
                            _3242 = !((fma(_2494, _3210.z, fma(_2493, _3210.y, _3210.x * _2492)) + _3210.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3136.x - _2492;
                                float _3270 = _3136.y - _2493;
                                float _3271 = _3136.z - _2494;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3137 * _3137));
                                float _4362 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3287 = sqrt(_3272) * _3152.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_760, _763, _766))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2494, _3179.z, fma(_2493, _3179.y, _3179.x * _2492)) + _3179.w) / _3241;
                                float _3301 = (fma(_2494, _3195.z, fma(_2493, _3195.y, _3195.x * _2492)) + _3195.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4378 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _835;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2778;
                                float _3331 = _3277 - _2779;
                                float _3332 = _3278 - _2780;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2778, (-0.0) - _2779, (-0.0) - _2780));
                                float _4389 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3344 = dot(vec3(_760, _763, _766), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4400 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_760, _763, _766), vec3(_3276, _3277, _3278))) + _3353;
                                float _4411 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4422 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3381 * _3164.x;
                                frontier_phi_73_pred_1 = _3381 * _3164.y;
                                frontier_phi_73_pred_2 = _3307 * _3152.z;
                                frontier_phi_73_pred_3 = _3307 * _3152.y;
                                frontier_phi_73_pred_4 = _3307 * _3152.x;
                                frontier_phi_73_pred_5 = _3381 * _3164.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_73_pred;
                            _3386 = frontier_phi_73_pred_1;
                            _3390 = frontier_phi_73_pred_2;
                            _3389 = frontier_phi_73_pred_3;
                            _3388 = frontier_phi_73_pred_4;
                            _3387 = frontier_phi_73_pred_5;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3091 = _3385 + _3104;
                            _3092 = _3386 + _3105;
                            _3093 = _3387 + _3106;
                            if (_3111 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3111;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3094;
                        frontier_phi_67_pred_1 = _3095;
                        frontier_phi_67_pred_2 = _3096;
                        frontier_phi_67_pred_3 = _3093;
                        frontier_phi_67_pred_4 = _3092;
                        frontier_phi_67_pred_5 = _3091;
                    }
                    _2759 = frontier_phi_67_pred;
                    _2761 = frontier_phi_67_pred_1;
                    _2763 = frontier_phi_67_pred_2;
                    _2757 = frontier_phi_67_pred_3;
                    _2755 = frontier_phi_67_pred_4;
                    _2753 = frontier_phi_67_pred_5;
                    uint _2898 = _2897 + 1u;
                    if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2891 = _2753;
                        _2892 = _2755;
                        _2893 = _2757;
                        _2894 = _2759;
                        _2895 = _2761;
                        _2896 = _2763;
                        _2897 = _2898;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2761;
                frontier_phi_55_56_ladder_1 = _2763;
                frontier_phi_55_56_ladder_2 = _2759;
                frontier_phi_55_56_ladder_3 = _2757;
                frontier_phi_55_56_ladder_4 = _2755;
                frontier_phi_55_56_ladder_5 = _2753;
            }
            else
            {
                frontier_phi_55_56_ladder = _2647;
                frontier_phi_55_56_ladder_1 = _2649;
                frontier_phi_55_56_ladder_2 = _2645;
                frontier_phi_55_56_ladder_3 = _2643;
                frontier_phi_55_56_ladder_4 = _2641;
                frontier_phi_55_56_ladder_5 = _2639;
            }
            _2752 = frontier_phi_55_56_ladder_5;
            _2754 = frontier_phi_55_56_ladder_4;
            _2756 = frontier_phi_55_56_ladder_3;
            _2758 = frontier_phi_55_56_ladder_2;
            _2760 = frontier_phi_55_56_ladder;
            _2762 = frontier_phi_55_56_ladder_1;
        }
        float _2767 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        _2551 = (_2767 * _2758) + _1987;
        _2553 = (_2767 * _2760) + _1989;
        _2555 = (_2767 * _2762) + _1991;
        _2557 = ((_2752 * _803) * _2767) + _2332;
        _2559 = ((_2754 * _805) * _2767) + _2334;
        _2561 = ((_2756 * _806) * _2767) + _2336;
    }
    else
    {
        _2551 = _1987;
        _2553 = _1989;
        _2555 = _1991;
        _2557 = _2332;
        _2559 = _2334;
        _2561 = _2336;
    }
    float _4438 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4449 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4460 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    uint _2581 = _236 + 6u;
    float _2589 = _741 / cbSceneParam._m0[86u].x;
    float _2590 = _742 / cbSceneParam._m0[86u].y;
    vec4 _2604 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2606 = _2604.x;
    float _2607 = _2604.y;
    float _2608 = _2604.z;
    float _2609 = _2604.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2664 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2665 = _2664 / _675;
        float _2676 = _2665 * _726;
        float _2677 = _727 * _2665;
        float _2678 = (-0.0) - _2677;
        float _2680 = _2665 * _728;
        float _2682 = (cbSceneParam._m0[77u].w * _2678) / _2664;
        float _2683 = _2682 + cbSceneParam._m0[79u].w;
        float _2684 = cbSceneParam._m0[79u].w - _2677;
        float _2690 = sqrt(((_2676 * _2676) + (_2677 * _2677)) + (_2680 * _2680));
        float _2693 = (1.0 - (cbSceneParam._m0[77u].w / _2664)) * _2690;
        float _2698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2853;
        if (abs((_2678 - _2682) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2853 = ((((_2683 > 0.0) ? exp2(_2698 * _2683) : (2.0 - exp2(_2700 * _2683))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2693;
        }
        else
        {
            float _2813 = 1.0 / cbSceneParam._m0[80u].x;
            float _2814 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : max(_2683, _2684));
            float _2815 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : min(_2683, _2684));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            _2853 = ((abs(_2690 / _2678) * cbSceneParam._m0[80u].y) * ((((_2824 - _2825) * 2.0) - ((exp2(_2698 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0)))) - exp2(_2698 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))))) * _2813)) - ((exp2(_2700 * _2824) - exp2(_2700 * _2825)) * _2813))) + (_2693 * cbSceneParam._m0[80u].z);
        }
        vec4 _2855 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, 1.0), 0.0);
        float _2864 = exp2((_2853 * (-1.44269502162933349609375)) * (1.0 - _2855.w));
        float _2865 = log2(_2864);
        float _2881 = log2(_2609);
        _2702 = (exp2(_2881 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].x)) * _2855.x) / cbSceneParam._m0[78u].x)) + _2606;
        _2704 = (exp2(_2881 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].y)) * _2855.y) / cbSceneParam._m0[78u].y)) + _2607;
        _2706 = (exp2(_2881 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].z)) * _2855.z) / cbSceneParam._m0[78u].z)) + _2608;
        _2708 = _2864 * _2609;
    }
    else
    {
        _2702 = _2606;
        _2704 = _2607;
        _2706 = _2608;
        _2708 = _2609;
    }
    float _2720 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2721 = _2720 == 3.0;
    float _2722 = log2(_2708);
    float _2729 = exp2(_2722 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2551 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _819))) + ((_2557 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2730 = exp2(_2722 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2553 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _819))) + ((_2559 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2731 = exp2(_2722 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2555 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _819))) + ((_2561 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2740 = (_2720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2740 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.y = _2740 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.z = _2740 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.w = cbInstanceData._m0[_2581].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2581].w;
}


