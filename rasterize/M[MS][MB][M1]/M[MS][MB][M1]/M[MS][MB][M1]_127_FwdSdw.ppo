#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1275;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3883 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3894 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3905 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3916 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) + _442;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _545 = ((_515.z - _536) * _423) + _536;
    float _548 = ((((_515.x - _534) * _423) + _534) * 2.0) + (-1.0);
    float _549 = ((((_515.y - _535) * _423) + _535) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3927 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _602 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_588 - _589) * cbMtdParam._m0[24u].z) + _589) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3938 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _610 = (_603 * ((_470.x * cbMtdParam._m0[18u].x) - _449)) + _449;
    float _611 = (_603 * ((_470.y * cbMtdParam._m0[18u].y) - _450)) + _450;
    float _612 = (_603 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) + _451;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _640 = _638.x;
    float _658 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _640) * _423) + _640;
    float _662 = ((_624.x - _658) * cbMtdParam._m0[19u].z) + _658;
    float _664 = _662 - (_662 * _603);
    float _669 = (((_490.z - _545) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _545;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _689 = (_682.x * 2.0) + (-1.0);
    float _690 = (_682.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3949 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _699 = (_603 * (_682.z - _669)) + _669;
    float _704 = _548 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)));
    float _705 = _549 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)));
    float _717 = (((_689 - _704) + (cbMtdParam._m0[21u].x * _704)) * _603) + _704;
    float _718 = (((_690 - _705) + (cbMtdParam._m0[21u].x * _705)) * _603) + _705;
    float _719 = (_603 * (sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) - _555)) + _555;
    float _721 = cbMtdParam._m0[22u].x + _568.w;
    float _724 = fma(_719, _238 * NORMAL.x, fma(_718, _245 * TANGENT.x, (_231 * _223) * _717));
    float _727 = fma(_719, _238 * NORMAL.y, fma(_718, _245 * TANGENT.y, (_231 * _224) * _717));
    float _730 = fma(_719, _238 * NORMAL.z, fma(_718, _245 * TANGENT.z, (_231 * _225) * _717));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    float _735 = _734 * _724;
    float _736 = _734 * _727;
    float _737 = _734 * _730;
    float _3960 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _738 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _3982 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3993 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4004 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4015 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _743 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    float _823 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _824 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _842 = fma(_737, cbSceneParam._m0[5u].z, fma(_736, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _735));
    float _845 = fma(_737, cbSceneParam._m0[6u].z, fma(_736, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _735));
    float _848 = fma(_737, cbSceneParam._m0[7u].z, fma(_736, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _735));
    uint _862 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _868 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_862].x;
    float _869 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_862].y;
    float _870 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_862].z;
    float _4026 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _874 = 1.0 - _743;
    float _875 = _871 * _874;
    float _876 = _872 * _874;
    float _877 = _873 * _874;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _743;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _743;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _743;
    float _885 = _882 + 0.039999999105930328369140625;
    float _887 = _883 + 0.039999999105930328369140625;
    float _888 = _884 + 0.039999999105930328369140625;
    vec4 _897 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _823, cbSceneParam._m0[86u].y * _824));
    float _901 = ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * TEXCOORD_5.w) * _897.x;
    float _902 = dot(vec3(_735, _736, _737), vec3(_815, _816, _817));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _735) - _815;
    float _910 = (_905 * _736) - _816;
    float _911 = (_905 * _737) - _817;
    float _915 = abs(dot(vec3(_815, _816, _817), vec3(_735, _736, _737)));
    float _4059 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_738);
    float _930 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _936 = (1.0 - _930) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _937 = _930 * _917;
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1274;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _999 = fma(_973, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965));
        float _1003 = fma(_973, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965));
        float _1007 = fma(_973, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965));
        float _1032 = _965 + _735;
        float _1033 = _969 + _736;
        float _1034 = _973 + _737;
        float _1044 = fma(_1034, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032)) - _999;
        float _1045 = fma(_1034, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032)) - _1003;
        float _1046 = fma(_1034, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032)) - _1007;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_999 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1003 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[34u].z) + ((((((_1007 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1102 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1068.x + (-0.5));
        float _1104 = _1102 * (_1068.y + (-0.5));
        float _1105 = _1102 * (_1068.z + (-0.5));
        float _1112 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1075.x + (-0.5));
        float _1114 = _1112 * (_1075.y + (-0.5));
        float _1115 = _1112 * (_1075.z + (-0.5));
        float _1122 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1082.x + (-0.5));
        float _1124 = _1122 * (_1082.y + (-0.5));
        float _1125 = _1122 * (_1082.z + (-0.5));
        float _1132 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1089.x + (-0.5));
        float _1134 = _1132 * (_1089.y + (-0.5));
        float _1135 = _1132 * (_1089.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1156 = (dot(vec3(_735, _736, _737), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1166 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _4107 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1168 + 1.0))) + _1173) * _1136;
        float _1183 = _1104 * 0.5;
        float _1184 = _1114 * 0.5;
        float _1185 = _1124 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_735, _736, _737), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _4140 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1210 + 1.0))) + _1215) * _1137;
        float _1225 = _1105 * 0.5;
        float _1226 = _1115 * 0.5;
        float _1227 = _1125 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_735, _736, _737), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4173 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1252 + 1.0))) + _1257) * _1138;
        _1274 = _1105;
        _1276 = _1104;
        _1277 = _1103;
        _1278 = _1115;
        _1279 = _1114;
        _1280 = _1113;
        _1281 = _1125;
        _1282 = _1124;
        _1283 = _1123;
        _1284 = _1138;
        _1285 = _1137;
        _1286 = _1136;
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
    }
    else
    {
        _1274 = _1275;
        _1276 = _1275;
        _1277 = _1275;
        _1278 = _1275;
        _1279 = _1275;
        _1280 = _1275;
        _1281 = _1275;
        _1282 = _1275;
        _1283 = _1275;
        _1284 = _1275;
        _1285 = _1275;
        _1286 = _1275;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1314 = fma(_973, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965));
        float _1318 = fma(_973, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965));
        float _1322 = fma(_973, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965));
        float _1345 = _965 + _735;
        float _1346 = _969 + _736;
        float _1347 = _973 + _737;
        float _1357 = fma(_1347, cbModelParam._m0[30u].z, fma(_1346, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1345)) - _1314;
        float _1358 = fma(_1347, cbModelParam._m0[31u].z, fma(_1346, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1345)) - _1318;
        float _1359 = fma(_1347, cbModelParam._m0[32u].z, fma(_1346, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1345)) - _1322;
        float _1363 = inversesqrt(dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359)));
        float _1376 = ((_1363 * _1357) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1314 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1363 * _1358) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1318 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1363 * _1359) / cbModelParam._m0[35u].z) + ((((((_1322 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        float _1413 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1380.x + (-0.5));
        float _1415 = _1413 * (_1380.y + (-0.5));
        float _1416 = _1413 * (_1380.z + (-0.5));
        float _1423 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1387.x + (-0.5));
        float _1425 = _1423 * (_1387.y + (-0.5));
        float _1426 = _1423 * (_1387.z + (-0.5));
        float _1433 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1394.x + (-0.5));
        float _1435 = _1433 * (_1394.y + (-0.5));
        float _1436 = _1433 * (_1394.z + (-0.5));
        float _1443 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1401.x + (-0.5));
        float _1445 = _1443 * (_1401.y + (-0.5));
        float _1446 = _1443 * (_1401.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_735, _736, _737), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4236 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1477 + 1.0))) + _1482) * _1447;
        float _1492 = _1415 * 0.5;
        float _1493 = _1425 * 0.5;
        float _1494 = _1435 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_735, _736, _737), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4269 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1519 + 1.0))) + _1524) * _1448;
        float _1534 = _1416 * 0.5;
        float _1535 = _1426 * 0.5;
        float _1536 = _1436 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_735, _736, _737), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4302 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1561 + 1.0))) + _1566) * _1449;
        _1583 = _1416;
        _1584 = _1415;
        _1585 = _1414;
        _1586 = _1426;
        _1587 = _1425;
        _1588 = _1424;
        _1589 = _1436;
        _1590 = _1435;
        _1591 = _1434;
        _1592 = _1449;
        _1593 = _1448;
        _1594 = _1447;
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1275;
        _1584 = _1275;
        _1585 = _1275;
        _1586 = _1275;
        _1587 = _1275;
        _1588 = _1275;
        _1589 = _1275;
        _1590 = _1275;
        _1591 = _1275;
        _1592 = _1275;
        _1593 = _1275;
        _1594 = _1275;
        _1595 = 0.0;
        _1596 = 0.0;
        _1597 = 0.0;
    }
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1287)) + _1287;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1288)) + _1288;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1289)) + _1289;
    float _1630 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1607));
    float _1651 = _909 * 0.5;
    float _1652 = _910 * 0.5;
    float _1653 = _911 * 0.5;
    float _1654 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1657 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1660 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1694;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1667 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1274, _1278, _1281, _1284));
        float _1671 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1675 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1682 = dot(vec4(cbModelParam._m0[39u]), vec4(_1651, _1652, _1653, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1705;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1696 = dot(vec4(cbModelParam._m0[40u]), vec4(_1651, _1652, _1653, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1709 = (_1705 * cbModelParam._m0[1u].x) + (_1694 * (1.0 - cbModelParam._m0[1u].x));
    float _1719 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1719 : min(cbModelParam._m0[25u].z, _1719));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1767 = fma(_973, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965)) + cbModelParam._m0[13u].w;
        float _1771 = fma(_973, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965)) + cbModelParam._m0[14u].w;
        float _1775 = fma(_973, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965)) + cbModelParam._m0[15u].w;
        float _1778 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1781 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1784 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1812;
        if (_1778 > 0.0)
        {
            _1812 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1812 = frontier_phi_14_12_ladder;
        }
        float _1983;
        if (_1781 > 0.0)
        {
            _1983 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1983 = frontier_phi_23_19_ladder;
        }
        float _2278;
        if (_1784 > 0.0)
        {
            _2278 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2278 = frontier_phi_35_30_ladder;
        }
        float _2280 = isnan(_1983) ? _1812 : (isnan(_1812) ? _1983 : min(_1812, _1983));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1778) + _1767;
        float _2286 = (_2281 * _1781) + _1771;
        float _2287 = (_2281 * _1784) + _1775;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1720);
            frontier_phi_13_35_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1800 = frontier_phi_13_35_ladder_2;
        _1802 = frontier_phi_13_35_ladder_1;
        _1804 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1720);
        _1800 = _1788.x * cbModelParam._m0[1u].y;
        _1802 = _1788.y * cbModelParam._m0[1u].y;
        _1804 = _1788.z * cbModelParam._m0[1u].y;
    }
    float _1808 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1808 : min(cbModelParam._m0[25u].w, _1808));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_973, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_973, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_973, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1876 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1879 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _1988;
        if (_1873 > 0.0)
        {
            _1988 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1988 = frontier_phi_25_21_ladder;
        }
        float _2305;
        if (_1876 > 0.0)
        {
            _2305 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2305 = frontier_phi_37_32_ladder;
        }
        float _2643;
        if (_1879 > 0.0)
        {
            _2643 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2643 = frontier_phi_47_44_ladder;
        }
        float _2645 = isnan(_2305) ? _1988 : (isnan(_1988) ? _2305 : min(_1988, _2305));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _1873) + _1862;
        float _2651 = (_2646 * _1876) + _1866;
        float _2652 = (_2646 * _1879) + _1870;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1809);
            frontier_phi_22_47_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_22_47_ladder_2;
        _1900 = frontier_phi_22_47_ladder_1;
        _1902 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1809);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1915 = (((_936 * _885) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1917 = (((_936 * _887) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1919 = (((_936 * _888) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1975 = _1962 / _1974;
    float _1976 = _1966 / _1974;
    float _1977 = _1970 / _1974;
    float _2124;
    float _2125;
    float _2126;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2004 = ((uint(_1977 > cbSceneParam._m0[59u].y) + uint(_1977 > cbSceneParam._m0[59u].x)) + uint(_1977 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2005 = _2004 + 43u;
        uint _2013 = _2004 + 44u;
        uint _2021 = _2004 + 45u;
        uint _2029 = _2004 + 46u;
        float _2040 = fma(_1974, cbSceneParam._m0[_2005].w, fma(_1970, cbSceneParam._m0[_2005].z, fma(_1966, cbSceneParam._m0[_2005].y, _1962 * cbSceneParam._m0[_2005].x)));
        float _2044 = fma(_1974, cbSceneParam._m0[_2013].w, fma(_1970, cbSceneParam._m0[_2013].z, fma(_1966, cbSceneParam._m0[_2013].y, _1962 * cbSceneParam._m0[_2013].x)));
        float _2052 = fma(_1974, cbSceneParam._m0[_2029].w, fma(_1970, cbSceneParam._m0[_2029].z, fma(_1966, cbSceneParam._m0[_2029].y, _1962 * cbSceneParam._m0[_2029].x)));
        float _2057 = cbSceneParam._m0[33u].z * _2052;
        float _2059 = cbSceneParam._m0[33u].w * _2052;
        float _2062 = fma(_1974, cbSceneParam._m0[_2021].w, fma(_1970, cbSceneParam._m0[_2021].z, fma(_1966, cbSceneParam._m0[_2021].y, _1962 * cbSceneParam._m0[_2021].x))) / _2052;
        float _2110 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
        float _4428 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2117 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2040) / _2052, (_2059 + _2044) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 + _2040) / _2052, (_2044 - _2057) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2057) / _2052, (_2044 - _2059) / _2052), _2062), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 - _2059) / _2052, (_2057 + _2044) / _2052), _2062), 0.0)).x), vec4(0.25)));
        _2124 = 1.0 - (_2117 * cbSceneParam._m0[34u].x);
        _2125 = 1.0 - (_2117 * cbSceneParam._m0[34u].y);
        _2126 = 1.0 - (_2117 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2124 = 1.0;
        _2125 = 1.0;
        _2126 = 1.0;
    }
    float _2190;
    float _2192;
    float _2194;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2178 = fma(_1974, cbSceneParam._m0[63u].w, fma(_1970, cbSceneParam._m0[63u].z, fma(_1966, cbSceneParam._m0[63u].y, _1962 * cbSceneParam._m0[63u].x)));
        float _2179 = fma(_1974, cbSceneParam._m0[60u].w, fma(_1970, cbSceneParam._m0[60u].z, fma(_1966, cbSceneParam._m0[60u].y, _1962 * cbSceneParam._m0[60u].x))) / _2178;
        float _2180 = fma(_1974, cbSceneParam._m0[61u].w, fma(_1970, cbSceneParam._m0[61u].z, fma(_1966, cbSceneParam._m0[61u].y, _1962 * cbSceneParam._m0[61u].x))) / _2178;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2179 >= cbSceneParam._m0[64u].x) && (_2180 >= cbSceneParam._m0[64u].y)) && (_2179 <= cbSceneParam._m0[64u].z)) && (_2180 <= cbSceneParam._m0[64u].w))
        {
            float _2318 = fma(_1974, cbSceneParam._m0[62u].w, fma(_1970, cbSceneParam._m0[62u].z, fma(_1966, cbSceneParam._m0[62u].y, _1962 * cbSceneParam._m0[62u].x))) / _2178;
            float _2322 = isnan(cbSceneParam._m0[41u].w) ? _2318 : (isnan(_2318) ? cbSceneParam._m0[41u].w : max(_2318, cbSceneParam._m0[41u].w));
            float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_1976 * _1976) + (_1975 * _1975)) + (_1977 * _1977))) * cbSceneParam._m0[33u].y;
            float _4444 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
            float _2372 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2179, cbSceneParam._m0[33u].w + _2180), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2179, _2180 - cbSceneParam._m0[33u].z), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].z, _2180 - cbSceneParam._m0[33u].w), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2179 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2180), _2322), 0.0)).x), vec4(0.25)));
            float _2376 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
            float _2377 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
            float _2378 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2378) ? _2126 : (isnan(_2126) ? _2378 : min(_2126, _2378));
            frontier_phi_34_33_ladder_1 = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
            frontier_phi_34_33_ladder_2 = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
        }
        else
        {
            frontier_phi_34_33_ladder = _2126;
            frontier_phi_34_33_ladder_1 = _2125;
            frontier_phi_34_33_ladder_2 = _2124;
        }
        _2190 = frontier_phi_34_33_ladder_2;
        _2192 = frontier_phi_34_33_ladder_1;
        _2194 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2190 = _2124;
        _2192 = _2125;
        _2194 = _2126;
    }
    uvec4 _2199 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2201 = _2199.x * 14u;
    uint _2202 = _2201 + 13u;
    float _2209 = _901 + (-1.0);
    float _2214 = (cbLight._m0[_2202].x * _2209) + 1.0;
    float _2215 = (cbLight._m0[_2202].y * _2209) + 1.0;
    float _2216 = (cbLight._m0[_2202].z * _2209) + 1.0;
    float _2217 = (cbLight._m0[_2202].w * _2209) + 1.0;
    uint _2218 = _2201 + 5u;
    float _2224 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2228 = _2201 + 4u;
    float _2237 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2241 = _2201 | 1u;
    float _2252 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_735, _736, _737));
    float _2255 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_735, _736, _737));
    float _4480 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _4491 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.3183098733425140380859375;
    float _2262 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2269 = ((cbLight._m0[_2218].x * _2224) * _2262) + (((cbLight._m0[_2228].x * _2190) * _2237) * _2260);
    float _2270 = ((_2224 * cbLight._m0[_2218].y) * _2262) + (((cbLight._m0[_2228].y * _2192) * _2237) * _2260);
    float _2271 = ((_2224 * cbLight._m0[_2218].z) * _2262) + (((cbLight._m0[_2228].z * _2194) * _2237) * _2260);
    uvec4 _2275 = floatBitsToUint(cbLight._m0[_2201 + 12u]);
    bool _2277 = _2275.x == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2277)
    {
        _2379 = _2269;
        _2381 = _2270;
        _2383 = _2271;
    }
    else
    {
        uint _2387 = _2201 + 6u;
        float _2403 = (dot(vec3(cbLight._m0[_2201 + 2u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4502 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2406 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2379 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2269;
        _2381 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2270;
        _2383 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2271;
    }
    bool _2386 = _2275.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2386)
    {
        _2441 = _2379;
        _2443 = _2381;
        _2445 = _2383;
    }
    else
    {
        uint _2614 = _2201 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2201 + 3u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4518 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2633 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2441 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2379;
        _2443 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2381;
        _2445 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2383;
    }
    uint _2448 = _2201 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _738) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2201].x + _815;
    float _2464 = cbLight._m0[_2201].y + _816;
    float _2465 = cbLight._m0[_2201].z + _817;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2201].xyz));
    float _4534 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _4545 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2477 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2478 = dot(vec3(_735, _736, _737), vec3(_2470, _2471, _2472));
    float _4556 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2470, _2471, _2472));
    float _4567 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
    float _2499 = 0.959999978542327880859375 - _882;
    float _2501 = 0.959999978542327880859375 - _883;
    float _2502 = 0.959999978542327880859375 - _884;
    float _2509 = 1.0 - _2462;
    float _2520 = (0.5 / (((_2477 * ((_2476 * _2509) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2509) + _2462) * _2476))) * _2476;
    float _4578 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2536 = _2201 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _738) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2241].x + _815;
    float _2550 = cbLight._m0[_2241].y + _816;
    float _2551 = cbLight._m0[_2241].z + _817;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2241].xyz));
    float _4589 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2563 = dot(vec3(_735, _736, _737), vec3(_2556, _2557, _2558));
    float _4600 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2556, _2557, _2558));
    float _4611 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2589 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2477 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2589) + _2548) * _2562))) * _2562;
    float _4622 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2611 = (((((_2582 * _2499) + _885) * cbLight._m0[_2536].x) * _2601) * _2224) + ((((cbLight._m0[_2448].x * _2190) * ((_2498 * _2499) + _885)) * _2522) * _2237);
    float _2612 = (((((_2582 * _2501) + _887) * cbLight._m0[_2536].y) * _2601) * _2224) + ((((cbLight._m0[_2448].y * _2192) * ((_2498 * _2501) + _887)) * _2522) * _2237);
    float _2613 = (((((_2582 * _2502) + _888) * cbLight._m0[_2536].z) * _2601) * _2224) + ((((cbLight._m0[_2448].z * _2194) * ((_2498 * _2502) + _888)) * _2522) * _2237);
    float _2669;
    float _2671;
    float _2673;
    if (_2277)
    {
        _2669 = _2611;
        _2671 = _2612;
        _2673 = _2613;
    }
    else
    {
        uint _2675 = _2201 + 2u;
        uint _2679 = _2201 + 10u;
        float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2675].w)) * _738) * 0.949999988079071044921875);
        float _2694 = _2693 * _2693;
        float _2695 = cbLight._m0[_2675].x + _815;
        float _2696 = cbLight._m0[_2675].y + _816;
        float _2697 = cbLight._m0[_2675].z + _817;
        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
        float _2702 = _2701 * _2695;
        float _2703 = _2701 * _2696;
        float _2704 = _2701 * _2697;
        float _2705 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2675].xyz));
        float _4633 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2709 = dot(vec3(_735, _736, _737), vec3(_2702, _2703, _2704));
        float _4644 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2713 = dot(vec3(cbLight._m0[_2675].xyz), vec3(_2702, _2703, _2704));
        float _4655 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2717 = _2694 * _2694;
        float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
        float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
        float _2735 = 1.0 - _2694;
        float _2745 = (0.5 / (((_2477 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2735) + _2694) * _2708))) * _2708;
        float _4666 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2669 = (((((_2728 * _2499) + _885) * cbLight._m0[_2679].x) * _2747) * _2748) + _2611;
        _2671 = (((((_2728 * _2501) + _887) * cbLight._m0[_2679].y) * _2747) * _2748) + _2612;
        _2673 = (((((_2728 * _2502) + _888) * cbLight._m0[_2679].z) * _2747) * _2748) + _2613;
    }
    float _2779;
    float _2781;
    float _2783;
    if (_2386)
    {
        _2779 = _2669;
        _2781 = _2671;
        _2783 = _2673;
    }
    else
    {
        uint _2790 = _2201 + 3u;
        uint _2794 = _2201 + 11u;
        float _2808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2790].w)) * _738) * 0.949999988079071044921875);
        float _2809 = _2808 * _2808;
        float _2810 = cbLight._m0[_2790].x + _815;
        float _2811 = cbLight._m0[_2790].y + _816;
        float _2812 = cbLight._m0[_2790].z + _817;
        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
        float _2817 = _2816 * _2810;
        float _2818 = _2816 * _2811;
        float _2819 = _2816 * _2812;
        float _2820 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2790].xyz));
        float _4682 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2824 = dot(vec3(_735, _736, _737), vec3(_2817, _2818, _2819));
        float _4693 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2828 = dot(vec3(cbLight._m0[_2790].xyz), vec3(_2817, _2818, _2819));
        float _4704 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2832 = _2809 * _2809;
        float _2836 = ((_2827 * _2827) * (_2832 + (-1.0))) + 1.0;
        float _2843 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
        float _2850 = 1.0 - _2809;
        float _2860 = (0.5 / (((_2477 * ((_2823 * _2850) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2850) + _2809) * _2823))) * _2823;
        float _4715 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2862 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2832 / ((_2836 * _2836) * 3.141590118408203125));
        float _2863 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2779 = (((((_2843 * _2499) + _885) * cbLight._m0[_2794].x) * _2862) * _2863) + _2669;
        _2781 = (((((_2843 * _2501) + _887) * cbLight._m0[_2794].y) * _2862) * _2863) + _2671;
        _2783 = (((((_2843 * _2502) + _888) * cbLight._m0[_2794].z) * _2862) * _2863) + _2673;
    }
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_2199.y == 0u)
    {
        uvec4 _2884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2885 = _2884.x;
        uint _2896 = uint((float(_2884.y) * floor(float(uint(cbSceneParam._m0[85u].y * _824) / _2885))) + floor(float(uint(cbSceneParam._m0[85u].x * _823) / _2885)));
        float _2906 = (log2(_1977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2907 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        uint _2910 = uint(isnan(14.0) ? _2907 : (isnan(_2907) ? 14.0 : min(_2907, 14.0)));
        uvec4 _2915 = texelFetch(g_lightClusterGridBuffer, int(((_2910 << 2u) + (_2896 << 6u)) >> 2u));
        uint _2916 = _2915.x;
        uint _2917 = _2884.z;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((((1u << ((_2917 >> 4u) & 15u)) + 4294967295u) & _2916) == 0u) || ((_2917 & 240u) == 0u))
        {
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
        }
        else
        {
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            uint _3147 = 0u;
            uint _3156;
            bool _3157;
            for (;;)
            {
                _3156 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                _3157 = _3156 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3157)
                {
                    frontier_phi_66_pred = _3146;
                    frontier_phi_66_pred_1 = _3145;
                    frontier_phi_66_pred_2 = _3144;
                    frontier_phi_66_pred_3 = _3143;
                    frontier_phi_66_pred_4 = _3142;
                    frontier_phi_66_pred_5 = _3141;
                }
                else
                {
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    uint _3271;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3156;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    for (;;)
                    {
                        uint _3275 = uint(findLSB(_3271)) + (_3147 << 5u);
                        uint _3272 = (_3271 + 4294967295u) & _3271;
                        uint _3277 = _3275 * 48u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3297 = (_3275 * 48u) + 4u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3316 = (_3275 * 48u) + 8u;
                        vec3 _3327 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x));
                        float _3331 = _3291.x - _1975;
                        float _3332 = _3291.y - _1976;
                        float _3333 = _3291.z - _1977;
                        float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                        float _3337 = inversesqrt(_3334);
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3341 = dot(vec3(_842, _845, _848), vec3(_3338, _3339, _3340));
                        float _3346 = 1.0 - (_3334 * _3291.w);
                        float _4741 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3348 = sqrt(_3334) * _3310.w;
                        float _3351 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3341) + _3352;
                        float _3358 = _3348 * _3348;
                        float _3362 = ((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3347) / ((_3358 * 0.699999988079071044921875) + 1.0);
                        float _3366 = (-0.0) - _1975;
                        float _3367 = (-0.0) - _1976;
                        float _3368 = (-0.0) - _1977;
                        float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3382 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                        float _3383 = 1.0 - _917;
                        float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                        float _3391 = _3390 * _3390;
                        float _3392 = _3391 * _3391;
                        float _3393 = _3373 + _3338;
                        float _3394 = _3374 + _3339;
                        float _3395 = _3375 + _3340;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3403 = dot(vec3(_842, _845, _848), vec3(_3373, _3374, _3375));
                        float _4757 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3407 = dot(vec3(_842, _845, _848), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                        float _4768 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                        float _3415 = _3351 * _3391;
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3341) + _3416;
                        float _4779 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3421 = 1.0 - _3391;
                        float _3431 = (0.5 / (((_3420 * ((_3406 * _3421) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3391) * _3406))) * _3420;
                        float _4790 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3442 = (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) / ((_3414 * _3414) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125))) * _3347;
                        _3200 = (_3362 * _3310.x) + _3268;
                        _3201 = (_3362 * _3310.y) + _3269;
                        _3202 = (_3362 * _3310.z) + _3270;
                        _3197 = (_3442 * _3327.x) + _3265;
                        _3198 = (_3442 * _3327.y) + _3266;
                        _3199 = (_3442 * _3327.z) + _3267;
                        if (_3272 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3272;
                        }
                    }
                    frontier_phi_66_pred = _3202;
                    frontier_phi_66_pred_1 = _3201;
                    frontier_phi_66_pred_2 = _3200;
                    frontier_phi_66_pred_3 = _3199;
                    frontier_phi_66_pred_4 = _3198;
                    frontier_phi_66_pred_5 = _3197;
                }
                _3007 = frontier_phi_66_pred;
                _3005 = frontier_phi_66_pred_1;
                _3003 = frontier_phi_66_pred_2;
                _3001 = frontier_phi_66_pred_3;
                _2999 = frontier_phi_66_pred_4;
                _2997 = frontier_phi_66_pred_5;
                uint _3148 = _3147 + 1u;
                if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3141 = _2997;
                    _3142 = _2999;
                    _3143 = _3001;
                    _3144 = _3003;
                    _3145 = _3005;
                    _3146 = _3007;
                    _3147 = _3148;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
        }
        uvec4 _3010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3011 = _3010.z;
        uint _3013 = (_3011 >> 8u) & 15u;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((4294967295u << _3013) & _2916) == 0u)
        {
            _3109 = _2996;
            _3111 = _2998;
            _3113 = _3000;
            _3115 = _3002;
            _3117 = _3004;
            _3119 = _3006;
        }
        else
        {
            float _3134 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
            float _3135 = _3134 * _1975;
            float _3136 = _3134 * _1976;
            float _3137 = _3134 * _1977;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3013 < ((_3011 >> 12u) & 15u))
            {
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3248 = _2996;
                float _3249 = _2998;
                float _3250 = _3000;
                float _3251 = _3002;
                float _3252 = _3004;
                float _3253 = _3006;
                uint _3254 = _3013;
                uint _3263;
                bool _3264;
                for (;;)
                {
                    _3263 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3254 << 2u)) >> 2u)).x;
                    _3264 = _3263 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3264)
                    {
                        frontier_phi_72_pred = _3253;
                        frontier_phi_72_pred_1 = _3252;
                        frontier_phi_72_pred_2 = _3251;
                        frontier_phi_72_pred_3 = _3250;
                        frontier_phi_72_pred_4 = _3249;
                        frontier_phi_72_pred_5 = _3248;
                    }
                    else
                    {
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3460 = _3248;
                        float _3461 = _3249;
                        float _3462 = _3250;
                        float _3463 = _3251;
                        float _3464 = _3252;
                        float _3465 = _3253;
                        uint _3466 = _3263;
                        uint _3467;
                        vec4 _3492;
                        float _3493;
                        vec4 _3508;
                        vec3 _3520;
                        vec4 _3535;
                        vec4 _3550;
                        float _3596;
                        bool _3597;
                        for (;;)
                        {
                            uint _3477 = ((_3254 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3466));
                            _3467 = (_3466 + 4294967295u) & _3466;
                            uint _3479 = _3477 * 40u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3493 = _3492.w;
                            uint _3495 = (_3477 * 40u) + 4u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3477 * 40u) + 8u;
                            _3520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x));
                            uint _3522 = (_3477 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3477 * 40u) + 20u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3477 * 40u) + 24u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3571 = (_3477 * 40u) + 28u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3596 = fma(_1977, _3584.z, fma(_1976, _3584.y, _3584.x * _1975)) + _3584.w;
                            _3597 = !((fma(_1977, _3565.z, fma(_1976, _3565.y, _3565.x * _1975)) + _3565.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3597)
                            {
                                float _3624 = _3492.x - _1975;
                                float _3625 = _3492.y - _1976;
                                float _3626 = _3492.z - _1977;
                                float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                                float _3630 = inversesqrt(_3627);
                                float _3631 = _3630 * _3624;
                                float _3632 = _3630 * _3625;
                                float _3633 = _3630 * _3626;
                                float _3637 = 1.0 - (_3627 / (_3493 * _3493));
                                float _4801 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3642 = sqrt(_3627) * _3508.w;
                                float _3644 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                                float _3645 = _3644 * _3644;
                                float _3648 = ((1.0 - _3645) * dot(vec3(_3631, _3632, _3633), vec3(_842, _845, _848))) + _3645;
                                float _3651 = _3642 * _3642;
                                float _3655 = (fma(_1977, _3535.z, fma(_1976, _3535.y, _3535.x * _1975)) + _3535.w) / _3596;
                                float _3656 = (fma(_1977, _3550.z, fma(_1976, _3550.y, _3550.x * _1975)) + _3550.w) / _3596;
                                float _3660 = 1.0 - dot(vec2(_3655, _3656), vec2(_3655, _3656));
                                float _4817 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3662 = _3661 * (((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3638) / ((_3651 * 0.699999988079071044921875) + 1.0));
                                float _3674 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                                float _3675 = 1.0 - _917;
                                float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                                float _3683 = _3682 * _3682;
                                float _3684 = _3683 * _3683;
                                float _3685 = _3631 - _3135;
                                float _3686 = _3632 - _3136;
                                float _3687 = _3633 - _3137;
                                float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                                float _3695 = dot(vec3(_842, _845, _848), vec3((-0.0) - _3135, (-0.0) - _3136, (-0.0) - _3137));
                                float _4828 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3699 = dot(vec3(_842, _845, _848), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                                float _4839 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                                float _3707 = _3644 * _3683;
                                float _3708 = _3707 * _3707;
                                float _3714 = ((1.0 - _3708) * dot(vec3(_842, _845, _848), vec3(_3631, _3632, _3633))) + _3708;
                                float _4850 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3716 = 1.0 - _3683;
                                float _3726 = (0.5 / (((_3715 * ((_3698 * _3716) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3715 * _3716) + _3683) * _3698))) * _3715;
                                float _4861 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3736 = (_3661 * _3638) * (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) / ((_3706 * _3706) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3662 * _3508.y;
                                frontier_phi_78_pred_1 = _3662 * _3508.x;
                                frontier_phi_78_pred_2 = _3736 * _3520.z;
                                frontier_phi_78_pred_3 = _3736 * _3520.y;
                                frontier_phi_78_pred_4 = _3736 * _3520.x;
                                frontier_phi_78_pred_5 = _3662 * _3508.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3744 = frontier_phi_78_pred;
                            _3743 = frontier_phi_78_pred_1;
                            _3742 = frontier_phi_78_pred_2;
                            _3741 = frontier_phi_78_pred_3;
                            _3740 = frontier_phi_78_pred_4;
                            _3745 = frontier_phi_78_pred_5;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            if (_3467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3467;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3452;
                        frontier_phi_72_pred_1 = _3451;
                        frontier_phi_72_pred_2 = _3450;
                        frontier_phi_72_pred_3 = _3449;
                        frontier_phi_72_pred_4 = _3448;
                        frontier_phi_72_pred_5 = _3447;
                    }
                    _3120 = frontier_phi_72_pred;
                    _3118 = frontier_phi_72_pred_1;
                    _3116 = frontier_phi_72_pred_2;
                    _3114 = frontier_phi_72_pred_3;
                    _3112 = frontier_phi_72_pred_4;
                    _3110 = frontier_phi_72_pred_5;
                    uint _3255 = _3254 + 1u;
                    if (_3255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3248 = _3110;
                        _3249 = _3112;
                        _3250 = _3114;
                        _3251 = _3116;
                        _3252 = _3118;
                        _3253 = _3120;
                        _3254 = _3255;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3120;
                frontier_phi_60_61_ladder_1 = _3118;
                frontier_phi_60_61_ladder_2 = _3114;
                frontier_phi_60_61_ladder_3 = _3112;
                frontier_phi_60_61_ladder_4 = _3110;
                frontier_phi_60_61_ladder_5 = _3116;
            }
            else
            {
                frontier_phi_60_61_ladder = _3006;
                frontier_phi_60_61_ladder_1 = _3004;
                frontier_phi_60_61_ladder_2 = _3000;
                frontier_phi_60_61_ladder_3 = _2998;
                frontier_phi_60_61_ladder_4 = _2996;
                frontier_phi_60_61_ladder_5 = _3002;
            }
            _3109 = frontier_phi_60_61_ladder_4;
            _3111 = frontier_phi_60_61_ladder_3;
            _3113 = frontier_phi_60_61_ladder_2;
            _3115 = frontier_phi_60_61_ladder_5;
            _3117 = frontier_phi_60_61_ladder_1;
            _3119 = frontier_phi_60_61_ladder;
        }
        float _3124 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2929 = (_3124 * _3115) + _2441;
        _2931 = (_3124 * _3117) + _2443;
        _2933 = (_3124 * _3119) + _2445;
        _2935 = ((_3109 * _885) * _3124) + _2779;
        _2937 = ((_3111 * _887) * _3124) + _2781;
        _2939 = ((_3113 * _888) * _3124) + _2783;
    }
    else
    {
        _2929 = _2441;
        _2931 = _2443;
        _2933 = _2445;
        _2935 = _2779;
        _2937 = _2781;
        _2939 = _2783;
    }
    float _4877 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4888 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4899 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    uint _2959 = _272 + 6u;
    float _2967 = _823 / cbSceneParam._m0[86u].x;
    float _2968 = _824 / cbSceneParam._m0[86u].y;
    vec4 _2982 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2984 = _2982.x;
    float _2985 = _2982.y;
    float _2986 = _2982.z;
    float _2987 = _2982.w;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _3021 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _3022 = _3021 / _757;
        float _3033 = _3022 * _808;
        float _3034 = _809 * _3022;
        float _3035 = (-0.0) - _3034;
        float _3037 = _3022 * _810;
        float _3039 = (cbSceneParam._m0[77u].w * _3035) / _3021;
        float _3040 = _3039 + cbSceneParam._m0[79u].w;
        float _3041 = cbSceneParam._m0[79u].w - _3034;
        float _3047 = sqrt(((_3033 * _3033) + (_3034 * _3034)) + (_3037 * _3037));
        float _3050 = (1.0 - (cbSceneParam._m0[77u].w / _3021)) * _3047;
        float _3055 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3057 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3210;
        if (abs((_3035 - _3039) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3210 = ((((_3040 > 0.0) ? exp2(_3055 * _3040) : (2.0 - exp2(_3057 * _3040))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3050;
        }
        else
        {
            float _3170 = 1.0 / cbSceneParam._m0[80u].x;
            float _3171 = isnan(_3041) ? _3040 : (isnan(_3040) ? _3041 : max(_3040, _3041));
            float _3172 = isnan(_3041) ? _3040 : (isnan(_3040) ? _3041 : min(_3040, _3041));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            _3210 = ((abs(_3047 / _3035) * cbSceneParam._m0[80u].y) * ((((_3181 - _3182) * 2.0) - ((exp2(_3055 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0)))) - exp2(_3055 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))))) * _3170)) - ((exp2(_3057 * _3181) - exp2(_3057 * _3182)) * _3170))) + (_3050 * cbSceneParam._m0[80u].z);
        }
        vec4 _3212 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, 1.0), 0.0);
        float _3221 = exp2((_3210 * (-1.44269502162933349609375)) * (1.0 - _3212.w));
        float _3222 = log2(_3221);
        float _3238 = log2(_2987);
        _3059 = (exp2(_3238 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].x)) * _3212.x) / cbSceneParam._m0[78u].x)) + _2984;
        _3061 = (exp2(_3238 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].y)) * _3212.y) / cbSceneParam._m0[78u].y)) + _2985;
        _3063 = (exp2(_3238 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].z)) * _3212.z) / cbSceneParam._m0[78u].z)) + _2986;
        _3065 = _3221 * _2987;
    }
    else
    {
        _3059 = _2984;
        _3061 = _2985;
        _3063 = _2986;
        _3065 = _2987;
    }
    float _3077 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3078 = _3077 == 3.0;
    float _3079 = log2(_3065);
    float _3086 = exp2(_3079 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2929 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _901))) + ((_2935 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _3087 = exp2(_3079 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2931 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _901))) + ((_2937 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _3088 = exp2(_3079 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2933 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _901))) + ((_2939 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _3097 = (_3077 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3097 * (_3078 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3059)));
    SV_Target.y = _3097 * (_3078 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3061)));
    SV_Target.z = _3097 * (_3078 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3063)));
    SV_Target.w = cbInstanceData._m0[_2959].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2959].w;
}


