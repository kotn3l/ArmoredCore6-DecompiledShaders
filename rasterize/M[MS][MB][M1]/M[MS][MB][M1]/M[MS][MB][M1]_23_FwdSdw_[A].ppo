#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1142;
float _3807;
float _3808;
float _3809;
float _3810;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3819 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3830 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3841 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _319 = _314.x * cbMtdParam._m0[9u].x;
    float _320 = _314.y * cbMtdParam._m0[9u].y;
    float _321 = _314.z * cbMtdParam._m0[9u].z;
    float _325 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _319;
    float _328 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _320;
    float _331 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _321;
    float _338 = ((_319 - _325) * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) + _325;
    float _339 = ((_320 - _328) * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) + _328;
    float _340 = ((_321 - _331) * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) + _331;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _384 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _388 = _384.z;
    float _392 = (_384.x * 2.0) + (-1.0);
    float _393 = (_384.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3852 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))));
    float _404 = _392 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_358.x * 2.0) + (-1.0)));
    float _405 = _393 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_358.y * 2.0) + (-1.0)));
    float _408 = fma(_399, _225, fma(_405, _232, _404 * _218));
    float _411 = fma(_399, _226, fma(_405, _233, _404 * _219));
    float _414 = fma(_399, _227, fma(_405, _234, _404 * _220));
    float _418 = inversesqrt(dot(vec3(_408, _411, _414), vec3(_408, _411, _414)));
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _277) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _278) + cbTextureTilingScale._m0[11u].w));
    float _456 = _454.x;
    float _457 = 1.0 - _456;
    float _466 = (cbMtdParam._m0[19u].x + dot(vec4(_418 * _408, _418 * _411, _418 * _414, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_456 - _457) * cbMtdParam._m0[24u].z) + _457) * cbMtdParam._m0[21u].z);
    float _3863 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _474 = (_467 * (cbMtdParam._m0[17u].x - _338)) + _338;
    float _475 = (_467 * (cbMtdParam._m0[17u].y - _339)) + _339;
    float _476 = (_467 * (cbMtdParam._m0[17u].z - _340)) + _340;
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _491 = _489.x;
    float _493 = _491 - (_491 * _467);
    float _498 = (((_358.z - _388) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _388;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _277) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _278) + cbTextureTilingScale._m0[15u].w));
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3874 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _528 = ((_511.z - _498) * _467) + _498;
    float _538 = ((sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _399) * _467) + _399;
    float _541 = (((_518 - _404) * _467) + _404) + (cbMtdParam._m0[21u].x * _404);
    float _542 = (((_519 - _405) * _467) + _405) + (cbMtdParam._m0[21u].x * _405);
    float _544 = cbMtdParam._m0[22u].x + _384.w;
    float _547 = fma(_538, _225, fma(_542, _232, _541 * _218));
    float _550 = fma(_538, _226, fma(_542, _233, _541 * _219));
    float _553 = fma(_538, _227, fma(_542, _234, _541 * _220));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    float _558 = _557 * _547;
    float _559 = _557 * _550;
    float _560 = _557 * _553;
    float _3885 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _561 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3907 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3918 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3929 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3940 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _566 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _580 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _631 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _621);
    float _632 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _621);
    float _633 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _621);
    float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
    float _638 = _631 * _637;
    float _639 = _632 * _637;
    float _640 = _633 * _637;
    vec4 _645 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _647 = _645.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _822 = sqrt(((_631 * _631) + (_632 * _632)) + (_633 * _633));
        float _828 = (cbMatDynParam._m0[5u].x * _822) + cbMatDynParam._m0[5u].y;
        float _3951 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _833 = (cbMatDynParam._m0[5u].z * _822) + cbMatDynParam._m0[5u].w;
        float _3962 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) - _829)) + _829) < ((_647 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _680 = fma(_560, cbSceneParam._m0[5u].z, fma(_559, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _558));
    float _683 = fma(_560, cbSceneParam._m0[6u].z, fma(_559, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _558));
    float _686 = fma(_560, cbSceneParam._m0[7u].z, fma(_559, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _558));
    uint _699 = _258 + 9u;
    uint _700 = _699 + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_700].z;
    float _3973 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _712 = 1.0 - _566;
    float _713 = _709 * _712;
    float _714 = _710 * _712;
    float _715 = _711 * _712;
    float _720 = (_709 + (-0.039999999105930328369140625)) * _566;
    float _721 = (_710 + (-0.039999999105930328369140625)) * _566;
    float _722 = (_711 + (-0.039999999105930328369140625)) * _566;
    float _723 = _720 + 0.039999999105930328369140625;
    float _725 = _721 + 0.039999999105930328369140625;
    float _726 = _722 + 0.039999999105930328369140625;
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _659, cbSceneParam._m0[86u].y * _660));
    float _739 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * TEXCOORD_5.w) * _735.x;
    float _740 = dot(vec3(_558, _559, _560), vec3(_638, _639, _640));
    float _743 = _740 * 2.0;
    float _747 = (_743 * _558) - _638;
    float _748 = (_743 * _559) - _639;
    float _749 = (_743 * _560) - _640;
    float _753 = abs(dot(vec3(_638, _639, _640), vec3(_558, _559, _560)));
    float _4006 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _755 = sqrt(_561);
    float _768 = exp2((_755 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_755 * 3.0));
    float _774 = (1.0 - _768) * ((_755 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _775 = _768 * _755;
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1141;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _866 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _870 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _874 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _899 = _803 + _558;
        float _900 = _807 + _559;
        float _901 = _811 + _560;
        float _911 = fma(_901, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899)) - _866;
        float _912 = fma(_901, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899)) - _870;
        float _913 = fma(_901, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899)) - _874;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_866 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_870 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[34u].z) + ((((((_874 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _969 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_935.x + (-0.5));
        float _971 = _969 * (_935.y + (-0.5));
        float _972 = _969 * (_935.z + (-0.5));
        float _979 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_942.x + (-0.5));
        float _981 = _979 * (_942.y + (-0.5));
        float _982 = _979 * (_942.z + (-0.5));
        float _989 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_949.x + (-0.5));
        float _991 = _989 * (_949.y + (-0.5));
        float _992 = _989 * (_949.z + (-0.5));
        float _999 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_956.x + (-0.5));
        float _1001 = _999 * (_956.y + (-0.5));
        float _1002 = _999 * (_956.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1023 = (dot(vec3(_558, _559, _560), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1033 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _4054 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1035 + 1.0))) + _1040) * _1003;
        float _1050 = _971 * 0.5;
        float _1051 = _981 * 0.5;
        float _1052 = _991 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_558, _559, _560), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _4087 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1077 + 1.0))) + _1082) * _1004;
        float _1092 = _972 * 0.5;
        float _1093 = _982 * 0.5;
        float _1094 = _992 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_558, _559, _560), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _4120 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1119 + 1.0))) + _1124) * _1005;
        _1141 = _972;
        _1143 = _971;
        _1144 = _970;
        _1145 = _982;
        _1146 = _981;
        _1147 = _980;
        _1148 = _992;
        _1149 = _991;
        _1150 = _990;
        _1151 = _1005;
        _1152 = _1004;
        _1153 = _1003;
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _1142;
        _1143 = _1142;
        _1144 = _1142;
        _1145 = _1142;
        _1146 = _1142;
        _1147 = _1142;
        _1148 = _1142;
        _1149 = _1142;
        _1150 = _1142;
        _1151 = _1142;
        _1152 = _1142;
        _1153 = _1142;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1184 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1188 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1192 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1215 = _803 + _558;
        float _1216 = _807 + _559;
        float _1217 = _811 + _560;
        float _1227 = fma(_1217, cbModelParam._m0[30u].z, fma(_1216, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215)) - _1184;
        float _1228 = fma(_1217, cbModelParam._m0[31u].z, fma(_1216, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215)) - _1188;
        float _1229 = fma(_1217, cbModelParam._m0[32u].z, fma(_1216, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215)) - _1192;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1184 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1188 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[35u].z) + ((((((_1192 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1283 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1250.x + (-0.5));
        float _1285 = _1283 * (_1250.y + (-0.5));
        float _1286 = _1283 * (_1250.z + (-0.5));
        float _1293 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1257.x + (-0.5));
        float _1295 = _1293 * (_1257.y + (-0.5));
        float _1296 = _1293 * (_1257.z + (-0.5));
        float _1303 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1264.x + (-0.5));
        float _1305 = _1303 * (_1264.y + (-0.5));
        float _1306 = _1303 * (_1264.z + (-0.5));
        float _1313 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1271.x + (-0.5));
        float _1315 = _1313 * (_1271.y + (-0.5));
        float _1316 = _1313 * (_1271.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_558, _559, _560), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4183 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1347 + 1.0))) + _1352) * _1317;
        float _1362 = _1285 * 0.5;
        float _1363 = _1295 * 0.5;
        float _1364 = _1305 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_558, _559, _560), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4216 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1389 + 1.0))) + _1394) * _1318;
        float _1404 = _1286 * 0.5;
        float _1405 = _1296 * 0.5;
        float _1406 = _1306 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_558, _559, _560), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4249 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1431 + 1.0))) + _1436) * _1319;
        _1453 = _1286;
        _1454 = _1285;
        _1455 = _1284;
        _1456 = _1296;
        _1457 = _1295;
        _1458 = _1294;
        _1459 = _1306;
        _1460 = _1305;
        _1461 = _1304;
        _1462 = _1319;
        _1463 = _1318;
        _1464 = _1317;
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1142;
        _1454 = _1142;
        _1455 = _1142;
        _1456 = _1142;
        _1457 = _1142;
        _1458 = _1142;
        _1459 = _1142;
        _1460 = _1142;
        _1461 = _1142;
        _1462 = _1142;
        _1463 = _1142;
        _1464 = _1142;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1156)) + _1156;
    float _1500 = fma(_1479, cbSceneParam._m0[89u].z, fma(_1478, cbSceneParam._m0[89u].y, _1477 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1479, cbSceneParam._m0[90u].z, fma(_1478, cbSceneParam._m0[90u].y, _1477 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1479, cbSceneParam._m0[91u].z, fma(_1478, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1477));
    float _1521 = _747 * 0.5;
    float _1522 = _748 * 0.5;
    float _1523 = _749 * 0.5;
    float _1524 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1527 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1530 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1564;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1537 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1141, _1145, _1148, _1151));
        float _1541 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1545 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1552 = dot(vec4(cbModelParam._m0[39u]), vec4(_1521, _1522, _1523, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1575;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1566 = dot(vec4(cbModelParam._m0[40u]), vec4(_1521, _1522, _1523, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1579 = (_1575 * cbModelParam._m0[1u].x) + (_1564 * (1.0 - cbModelParam._m0[1u].x));
    float _1589 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _561);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1589 : min(cbModelParam._m0[25u].z, _1589));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1652 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1655 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1683 = frontier_phi_17_15_ladder;
        }
        float _1855;
        if (_1652 > 0.0)
        {
            _1855 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1855 = frontier_phi_26_22_ladder;
        }
        float _2151;
        if (_1655 > 0.0)
        {
            _2151 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2151 = frontier_phi_38_33_ladder;
        }
        float _2153 = isnan(_1855) ? _1683 : (isnan(_1683) ? _1855 : min(_1683, _1855));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1649) + _1638;
        float _2159 = (_2154 * _1652) + _1642;
        float _2160 = (_2154 * _1655) + _1646;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1590);
            frontier_phi_16_38_ladder = _2305.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2305.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2305.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_16_38_ladder_2;
        _1673 = frontier_phi_16_38_ladder_1;
        _1675 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1590);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _561);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1734 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1738 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1742 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1745 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1748 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1751 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _1860;
        if (_1745 > 0.0)
        {
            _1860 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1860 = frontier_phi_28_24_ladder;
        }
        float _2178;
        if (_1748 > 0.0)
        {
            _2178 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2178 = frontier_phi_40_35_ladder;
        }
        float _2516;
        if (_1751 > 0.0)
        {
            _2516 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2516 = frontier_phi_50_47_ladder;
        }
        float _2518 = isnan(_2178) ? _1860 : (isnan(_1860) ? _2178 : min(_1860, _2178));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _1745) + _1734;
        float _2524 = (_2519 * _1748) + _1738;
        float _2525 = (_2519 * _1751) + _1742;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2526;
        float _2529 = _2526 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2525 > _2529) || ((_2525 < _2527) || ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 < _2527) || (_2523 > _2529))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2525, cbModelParam._m0[17u].z, fma(_2524, cbModelParam._m0[17u].y, _2523 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2525, cbModelParam._m0[18u].z, fma(_2524, cbModelParam._m0[18u].y, _2523 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2525, cbModelParam._m0[19u].z, fma(_2524, cbModelParam._m0[19u].y, _2523 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_25_50_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1770 = frontier_phi_25_50_ladder_2;
        _1772 = frontier_phi_25_50_ladder_1;
        _1774 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1680);
        _1770 = _1754.x * cbModelParam._m0[1u].z;
        _1772 = _1754.y * cbModelParam._m0[1u].z;
        _1774 = _1754.z * cbModelParam._m0[1u].z;
    }
    float _1787 = (((_774 * _723) + _775) * _739) * ((cbModelParam._m0[1u].w * (_1770 - _1671)) + _1671);
    float _1789 = (((_774 * _725) + _775) * _739) * ((cbModelParam._m0[1u].w * (_1772 - _1673)) + _1673);
    float _1791 = (((_774 * _726) + _775) * _739) * ((cbModelParam._m0[1u].w * (_1774 - _1675)) + _1675);
    float _1794 = fma(_1791, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1787 * cbSceneParam._m0[89u].x));
    float _1797 = fma(_1791, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1787 * cbSceneParam._m0[90u].x));
    float _1800 = fma(_1791, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1787 * cbSceneParam._m0[91u].x));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1846 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1847 = _1834 / _1846;
    float _1848 = _1838 / _1846;
    float _1849 = _1842 / _1846;
    float _1996;
    float _1997;
    float _1998;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1876 = ((uint(_1849 > cbSceneParam._m0[59u].y) + uint(_1849 > cbSceneParam._m0[59u].x)) + uint(_1849 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1877 = _1876 + 43u;
        uint _1885 = _1876 + 44u;
        uint _1893 = _1876 + 45u;
        uint _1901 = _1876 + 46u;
        float _1912 = fma(_1846, cbSceneParam._m0[_1877].w, fma(_1842, cbSceneParam._m0[_1877].z, fma(_1838, cbSceneParam._m0[_1877].y, _1834 * cbSceneParam._m0[_1877].x)));
        float _1916 = fma(_1846, cbSceneParam._m0[_1885].w, fma(_1842, cbSceneParam._m0[_1885].z, fma(_1838, cbSceneParam._m0[_1885].y, _1834 * cbSceneParam._m0[_1885].x)));
        float _1924 = fma(_1846, cbSceneParam._m0[_1901].w, fma(_1842, cbSceneParam._m0[_1901].z, fma(_1838, cbSceneParam._m0[_1901].y, _1834 * cbSceneParam._m0[_1901].x)));
        float _1929 = cbSceneParam._m0[33u].z * _1924;
        float _1931 = cbSceneParam._m0[33u].w * _1924;
        float _1934 = fma(_1846, cbSceneParam._m0[_1893].w, fma(_1842, cbSceneParam._m0[_1893].z, fma(_1838, cbSceneParam._m0[_1893].y, _1834 * cbSceneParam._m0[_1893].x))) / _1924;
        float _1982 = (cbSceneParam._m0[33u].x - sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849))) * cbSceneParam._m0[33u].y;
        float _4375 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1989 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 + _1912) / _1924, (_1931 + _1916) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 + _1912) / _1924, (_1916 - _1929) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 - _1929) / _1924, (_1916 - _1931) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 - _1931) / _1924, (_1929 + _1916) / _1924), _1934), 0.0)).x), vec4(0.25)));
        _1996 = 1.0 - (_1989 * cbSceneParam._m0[34u].x);
        _1997 = 1.0 - (_1989 * cbSceneParam._m0[34u].y);
        _1998 = 1.0 - (_1989 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1996 = 1.0;
        _1997 = 1.0;
        _1998 = 1.0;
    }
    float _2062;
    float _2064;
    float _2066;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2050 = fma(_1846, cbSceneParam._m0[63u].w, fma(_1842, cbSceneParam._m0[63u].z, fma(_1838, cbSceneParam._m0[63u].y, _1834 * cbSceneParam._m0[63u].x)));
        float _2051 = fma(_1846, cbSceneParam._m0[60u].w, fma(_1842, cbSceneParam._m0[60u].z, fma(_1838, cbSceneParam._m0[60u].y, _1834 * cbSceneParam._m0[60u].x))) / _2050;
        float _2052 = fma(_1846, cbSceneParam._m0[61u].w, fma(_1842, cbSceneParam._m0[61u].z, fma(_1838, cbSceneParam._m0[61u].y, _1834 * cbSceneParam._m0[61u].x))) / _2050;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2051 >= cbSceneParam._m0[64u].x) && (_2052 >= cbSceneParam._m0[64u].y)) && (_2051 <= cbSceneParam._m0[64u].z)) && (_2052 <= cbSceneParam._m0[64u].w))
        {
            float _2191 = fma(_1846, cbSceneParam._m0[62u].w, fma(_1842, cbSceneParam._m0[62u].z, fma(_1838, cbSceneParam._m0[62u].y, _1834 * cbSceneParam._m0[62u].x))) / _2050;
            float _2195 = isnan(cbSceneParam._m0[41u].w) ? _2191 : (isnan(_2191) ? cbSceneParam._m0[41u].w : max(_2191, cbSceneParam._m0[41u].w));
            float _2238 = (cbSceneParam._m0[33u].x - sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849))) * cbSceneParam._m0[33u].y;
            float _4391 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
            float _2245 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2051, cbSceneParam._m0[33u].w + _2052), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2051, _2052 - cbSceneParam._m0[33u].z), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2051 - cbSceneParam._m0[33u].z, _2052 - cbSceneParam._m0[33u].w), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2051 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2052), _2195), 0.0)).x), vec4(0.25)));
            float _2249 = 1.0 - (_2245 * cbSceneParam._m0[34u].x);
            float _2250 = 1.0 - (_2245 * cbSceneParam._m0[34u].y);
            float _2251 = 1.0 - (_2245 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2251) ? _1998 : (isnan(_1998) ? _2251 : min(_1998, _2251));
            frontier_phi_37_36_ladder_1 = isnan(_2250) ? _1997 : (isnan(_1997) ? _2250 : min(_1997, _2250));
            frontier_phi_37_36_ladder_2 = isnan(_2249) ? _1996 : (isnan(_1996) ? _2249 : min(_1996, _2249));
        }
        else
        {
            frontier_phi_37_36_ladder = _1998;
            frontier_phi_37_36_ladder_1 = _1997;
            frontier_phi_37_36_ladder_2 = _1996;
        }
        _2062 = frontier_phi_37_36_ladder_2;
        _2064 = frontier_phi_37_36_ladder_1;
        _2066 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2062 = _1996;
        _2064 = _1997;
        _2066 = _1998;
    }
    uvec4 _2071 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2073 = _2071.x * 14u;
    uint _2074 = _2073 + 13u;
    float _2081 = _739 + (-1.0);
    float _2086 = (cbLight._m0[_2074].x * _2081) + 1.0;
    float _2087 = (cbLight._m0[_2074].y * _2081) + 1.0;
    float _2088 = (cbLight._m0[_2074].z * _2081) + 1.0;
    float _2089 = (cbLight._m0[_2074].w * _2081) + 1.0;
    uint _2090 = _2073 + 5u;
    float _2096 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2100 = _2073 + 4u;
    float _2110 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2114 = _2073 | 1u;
    float _2125 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_558, _559, _560));
    float _2128 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_558, _559, _560));
    float _4427 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _4438 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2133 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2135 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.3183098733425140380859375;
    float _2142 = ((cbLight._m0[_2090].x * _2096) * _2135) + (((cbLight._m0[_2100].x * _2062) * _2110) * _2133);
    float _2143 = ((_2096 * cbLight._m0[_2090].y) * _2135) + (((cbLight._m0[_2100].y * _2064) * _2110) * _2133);
    float _2144 = ((_2096 * cbLight._m0[_2090].z) * _2135) + (((cbLight._m0[_2100].z * _2066) * _2110) * _2133);
    uvec4 _2148 = floatBitsToUint(cbLight._m0[_2073 + 12u]);
    bool _2150 = _2148.x == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2150)
    {
        _2252 = _2142;
        _2254 = _2143;
        _2256 = _2144;
    }
    else
    {
        uint _2260 = _2073 + 6u;
        float _2276 = (dot(vec3(cbLight._m0[_2073 + 2u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4449 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2279 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2252 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2142;
        _2254 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2143;
        _2256 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2144;
    }
    bool _2259 = _2148.y == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2259)
    {
        _2314 = _2252;
        _2316 = _2254;
        _2318 = _2256;
    }
    else
    {
        uint _2487 = _2073 + 7u;
        float _2503 = (dot(vec3(cbLight._m0[_2073 + 3u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4465 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2506 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2314 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2252;
        _2316 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2254;
        _2318 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2256;
    }
    uint _2321 = _2073 + 8u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _561) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2073].x + _638;
    float _2337 = cbLight._m0[_2073].y + _639;
    float _2338 = cbLight._m0[_2073].z + _640;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2073].xyz));
    float _4481 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _4492 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _2350 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2351 = dot(vec3(_558, _559, _560), vec3(_2343, _2344, _2345));
    float _4503 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2343, _2344, _2345));
    float _4514 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2335 * _2335;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2372 = 0.959999978542327880859375 - _720;
    float _2374 = 0.959999978542327880859375 - _721;
    float _2375 = 0.959999978542327880859375 - _722;
    float _2382 = 1.0 - _2335;
    float _2393 = (0.5 / (((_2350 * ((_2349 * _2382) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2382) + _2335) * _2349))) * _2349;
    float _4525 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2395 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    uint _2409 = _2073 + 9u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _561) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2114].x + _638;
    float _2423 = cbLight._m0[_2114].y + _639;
    float _2424 = cbLight._m0[_2114].z + _640;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2114].xyz));
    float _4536 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2436 = dot(vec3(_558, _559, _560), vec3(_2429, _2430, _2431));
    float _4547 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2429, _2430, _2431));
    float _4558 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2421 * _2421;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2462 = 1.0 - _2421;
    float _2472 = (0.5 / (((_2350 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2462) + _2421) * _2435))) * _2435;
    float _4569 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    float _2484 = (((((_2455 * _2372) + _723) * cbLight._m0[_2409].x) * _2474) * _2096) + ((((cbLight._m0[_2321].x * _2062) * ((_2371 * _2372) + _723)) * _2395) * _2110);
    float _2485 = (((((_2455 * _2374) + _725) * cbLight._m0[_2409].y) * _2474) * _2096) + ((((cbLight._m0[_2321].y * _2064) * ((_2371 * _2374) + _725)) * _2395) * _2110);
    float _2486 = (((((_2455 * _2375) + _726) * cbLight._m0[_2409].z) * _2474) * _2096) + ((((cbLight._m0[_2321].z * _2066) * ((_2371 * _2375) + _726)) * _2395) * _2110);
    float _2542;
    float _2544;
    float _2546;
    if (_2150)
    {
        _2542 = _2484;
        _2544 = _2485;
        _2546 = _2486;
    }
    else
    {
        uint _2548 = _2073 + 2u;
        uint _2552 = _2073 + 10u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _561) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _638;
        float _2569 = cbLight._m0[_2548].y + _639;
        float _2570 = cbLight._m0[_2548].z + _640;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2548].xyz));
        float _4580 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2582 = dot(vec3(_558, _559, _560), vec3(_2575, _2576, _2577));
        float _4591 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4602 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2608 = 1.0 - _2567;
        float _2618 = (0.5 / (((_2350 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2608) + _2567) * _2581))) * _2581;
        float _4613 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2542 = (((((_2601 * _2372) + _723) * cbLight._m0[_2552].x) * _2620) * _2621) + _2484;
        _2544 = (((((_2601 * _2374) + _725) * cbLight._m0[_2552].y) * _2620) * _2621) + _2485;
        _2546 = (((((_2601 * _2375) + _726) * cbLight._m0[_2552].z) * _2620) * _2621) + _2486;
    }
    float _2652;
    float _2654;
    float _2656;
    if (_2259)
    {
        _2652 = _2542;
        _2654 = _2544;
        _2656 = _2546;
    }
    else
    {
        uint _2663 = _2073 + 3u;
        uint _2667 = _2073 + 11u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _561) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _638;
        float _2684 = cbLight._m0[_2663].y + _639;
        float _2685 = cbLight._m0[_2663].z + _640;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2663].xyz));
        float _4629 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2697 = dot(vec3(_558, _559, _560), vec3(_2690, _2691, _2692));
        float _4640 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4651 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
        float _2723 = 1.0 - _2682;
        float _2733 = (0.5 / (((_2350 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2723) + _2682) * _2696))) * _2696;
        float _4662 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2652 = (((((_2716 * _2372) + _723) * cbLight._m0[_2667].x) * _2735) * _2736) + _2542;
        _2654 = (((((_2716 * _2374) + _725) * cbLight._m0[_2667].y) * _2735) * _2736) + _2544;
        _2656 = (((((_2716 * _2375) + _726) * cbLight._m0[_2667].z) * _2735) * _2736) + _2546;
    }
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    if (_2071.y == 0u)
    {
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.x;
        uint _2769 = uint((float(_2757.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _2758))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _2758)));
        float _2779 = (log2(_1849 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2780 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        uint _2783 = uint(isnan(14.0) ? _2780 : (isnan(_2780) ? 14.0 : min(_2780, 14.0)));
        uvec4 _2788 = texelFetch(g_lightClusterGridBuffer, int(((_2783 << 2u) + (_2769 << 6u)) >> 2u));
        uint _2789 = _2788.x;
        uint _2790 = _2757.z;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((((1u << ((_2790 >> 4u) & 15u)) + 4294967295u) & _2789) == 0u) || ((_2790 & 240u) == 0u))
        {
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
        }
        else
        {
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            uint _3028 = 0u;
            uint _3037;
            bool _3038;
            for (;;)
            {
                _3037 = texelFetch(g_lightClassification, int((((_2783 << 5u) + (_2769 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                _3038 = _3037 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3038)
                {
                    frontier_phi_71_pred = _3027;
                    frontier_phi_71_pred_1 = _3026;
                    frontier_phi_71_pred_2 = _3025;
                    frontier_phi_71_pred_3 = _3024;
                    frontier_phi_71_pred_4 = _3023;
                    frontier_phi_71_pred_5 = _3022;
                }
                else
                {
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    uint _3173;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3037;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    for (;;)
                    {
                        uint _3177 = uint(findLSB(_3173)) + (_3028 << 5u);
                        uint _3174 = (_3173 + 4294967295u) & _3173;
                        uint _3179 = _3177 * 48u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3199 = (_3177 * 48u) + 4u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3218 = (_3177 * 48u) + 8u;
                        vec3 _3229 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x));
                        float _3233 = _3193.x - _1847;
                        float _3234 = _3193.y - _1848;
                        float _3235 = _3193.z - _1849;
                        float _3236 = dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235));
                        float _3239 = inversesqrt(_3236);
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3243 = dot(vec3(_680, _683, _686), vec3(_3240, _3241, _3242));
                        float _3248 = 1.0 - (_3236 * _3193.w);
                        float _4688 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3250 = sqrt(_3236) * _3212.w;
                        float _3253 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3243) + _3254;
                        float _3260 = _3250 * _3250;
                        float _3264 = ((isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))) * _3249) / ((_3260 * 0.699999988079071044921875) + 1.0);
                        float _3268 = (-0.0) - _1847;
                        float _3269 = (-0.0) - _1848;
                        float _3270 = (-0.0) - _1849;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3284 = exp2(log2(1.0 / ((_3260 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _755;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3275 + _3240;
                        float _3296 = _3276 + _3241;
                        float _3297 = _3277 + _3242;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_680, _683, _686), vec3(_3275, _3276, _3277));
                        float _4704 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3309 = dot(vec3(_680, _683, _686), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4715 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3253 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3243) + _3318;
                        float _4726 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4737 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3316 * _3316) * ((_3260 * 2.1991131305694580078125) + 3.141590118408203125))) * _3249;
                        _3097 = (_3264 * _3212.x) + _3170;
                        _3098 = (_3264 * _3212.y) + _3171;
                        _3099 = (_3264 * _3212.z) + _3172;
                        _3094 = (_3344 * _3229.x) + _3167;
                        _3095 = (_3344 * _3229.y) + _3168;
                        _3096 = (_3344 * _3229.z) + _3169;
                        if (_3174 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3174;
                        }
                    }
                    frontier_phi_71_pred = _3099;
                    frontier_phi_71_pred_1 = _3098;
                    frontier_phi_71_pred_2 = _3097;
                    frontier_phi_71_pred_3 = _3096;
                    frontier_phi_71_pred_4 = _3095;
                    frontier_phi_71_pred_5 = _3094;
                }
                _2880 = frontier_phi_71_pred;
                _2878 = frontier_phi_71_pred_1;
                _2876 = frontier_phi_71_pred_2;
                _2874 = frontier_phi_71_pred_3;
                _2872 = frontier_phi_71_pred_4;
                _2870 = frontier_phi_71_pred_5;
                uint _3029 = _3028 + 1u;
                if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3022 = _2870;
                    _3023 = _2872;
                    _3024 = _2874;
                    _3025 = _2876;
                    _3026 = _2878;
                    _3027 = _2880;
                    _3028 = _3029;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
        }
        uvec4 _2883 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2884 = _2883.z;
        uint _2886 = (_2884 >> 8u) & 15u;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((4294967295u << _2886) & _2789) == 0u)
        {
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
        }
        else
        {
            float _3015 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
            float _3016 = _3015 * _1847;
            float _3017 = _3015 * _1848;
            float _3018 = _3015 * _1849;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2886 < ((_2884 >> 12u) & 15u))
            {
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3150 = _2869;
                float _3151 = _2871;
                float _3152 = _2873;
                float _3153 = _2875;
                float _3154 = _2877;
                float _3155 = _2879;
                uint _3156 = _2886;
                uint _3165;
                bool _3166;
                for (;;)
                {
                    _3165 = texelFetch(g_lightClassification, int((((_2783 << 5u) + (_2769 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                    _3166 = _3165 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3166)
                    {
                        frontier_phi_82_pred = _3155;
                        frontier_phi_82_pred_1 = _3154;
                        frontier_phi_82_pred_2 = _3153;
                        frontier_phi_82_pred_3 = _3152;
                        frontier_phi_82_pred_4 = _3151;
                        frontier_phi_82_pred_5 = _3150;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3371 = _3150;
                        float _3372 = _3151;
                        float _3373 = _3152;
                        float _3374 = _3153;
                        float _3375 = _3154;
                        float _3376 = _3155;
                        uint _3377 = _3165;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3446;
                        vec4 _3461;
                        float _3507;
                        bool _3508;
                        for (;;)
                        {
                            uint _3388 = ((_3156 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3433 = (_3388 * 40u) + 16u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3388 * 40u) + 20u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3388 * 40u) + 24u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3482 = (_3388 * 40u) + 28u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3507 = fma(_1849, _3495.z, fma(_1848, _3495.y, _3495.x * _1847)) + _3495.w;
                            _3508 = !((fma(_1849, _3476.z, fma(_1848, _3476.y, _3476.x * _1847)) + _3476.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3508)
                            {
                                float _3535 = _3403.x - _1847;
                                float _3536 = _3403.y - _1848;
                                float _3537 = _3403.z - _1849;
                                float _3538 = dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537));
                                float _3541 = inversesqrt(_3538);
                                float _3542 = _3541 * _3535;
                                float _3543 = _3541 * _3536;
                                float _3544 = _3541 * _3537;
                                float _3548 = 1.0 - (_3538 / (_3404 * _3404));
                                float _4748 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3553 = sqrt(_3538) * _3419.w;
                                float _3555 = 1.39999997615814208984375 / (_3553 + 1.39999997615814208984375);
                                float _3556 = _3555 * _3555;
                                float _3559 = ((1.0 - _3556) * dot(vec3(_3542, _3543, _3544), vec3(_680, _683, _686))) + _3556;
                                float _3562 = _3553 * _3553;
                                float _3566 = (fma(_1849, _3446.z, fma(_1848, _3446.y, _3446.x * _1847)) + _3446.w) / _3507;
                                float _3567 = (fma(_1849, _3461.z, fma(_1848, _3461.y, _3461.x * _1847)) + _3461.w) / _3507;
                                float _3571 = 1.0 - dot(vec2(_3566, _3567), vec2(_3566, _3567));
                                float _4764 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3573 = _3572 * (((isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0))) * _3549) / ((_3562 * 0.699999988079071044921875) + 1.0));
                                float _3585 = exp2(log2(1.0 / ((_3562 * 3.5) + 5.0)) * 0.25);
                                float _3586 = 1.0 - _755;
                                float _3593 = sqrt(1.0 - ((1.0 - (_3586 * _3586)) * (1.0 - (_3585 * _3585))));
                                float _3594 = _3593 * _3593;
                                float _3595 = _3594 * _3594;
                                float _3596 = _3542 - _3016;
                                float _3597 = _3543 - _3017;
                                float _3598 = _3544 - _3018;
                                float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                                float _3606 = dot(vec3(_680, _683, _686), vec3((-0.0) - _3016, (-0.0) - _3017, (-0.0) - _3018));
                                float _4775 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3610 = dot(vec3(_680, _683, _686), vec3(_3602 * _3596, _3602 * _3597, _3602 * _3598));
                                float _4786 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3617 = ((_3613 * _3613) * (_3595 + (-1.0))) + 1.0;
                                float _3618 = _3555 * _3594;
                                float _3619 = _3618 * _3618;
                                float _3625 = ((1.0 - _3619) * dot(vec3(_680, _683, _686), vec3(_3542, _3543, _3544))) + _3619;
                                float _4797 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3627 = 1.0 - _3594;
                                float _3637 = (0.5 / (((_3626 * ((_3609 * _3627) + _3594)) + 9.9999999392252902907785028219223e-09) + (((_3626 * _3627) + _3594) * _3609))) * _3626;
                                float _4808 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3647 = (_3572 * _3549) * (((_3595 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3617 * _3617) * ((_3562 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3573 * _3419.z;
                                frontier_phi_88_pred_1 = _3573 * _3419.y;
                                frontier_phi_88_pred_2 = _3573 * _3419.x;
                                frontier_phi_88_pred_3 = _3647 * _3431.z;
                                frontier_phi_88_pred_4 = _3647 * _3431.y;
                                frontier_phi_88_pred_5 = _3647 * _3431.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3656 = frontier_phi_88_pred;
                            _3655 = frontier_phi_88_pred_1;
                            _3654 = frontier_phi_88_pred_2;
                            _3653 = frontier_phi_88_pred_3;
                            _3652 = frontier_phi_88_pred_4;
                            _3651 = frontier_phi_88_pred_5;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3363;
                        frontier_phi_82_pred_1 = _3362;
                        frontier_phi_82_pred_2 = _3361;
                        frontier_phi_82_pred_3 = _3360;
                        frontier_phi_82_pred_4 = _3359;
                        frontier_phi_82_pred_5 = _3358;
                    }
                    _3001 = frontier_phi_82_pred;
                    _2999 = frontier_phi_82_pred_1;
                    _2997 = frontier_phi_82_pred_2;
                    _2995 = frontier_phi_82_pred_3;
                    _2993 = frontier_phi_82_pred_4;
                    _2991 = frontier_phi_82_pred_5;
                    uint _3157 = _3156 + 1u;
                    if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3150 = _2991;
                        _3151 = _2993;
                        _3152 = _2995;
                        _3153 = _2997;
                        _3154 = _2999;
                        _3155 = _3001;
                        _3156 = _3157;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2997;
                frontier_phi_63_64_ladder_1 = _3001;
                frontier_phi_63_64_ladder_2 = _2999;
                frontier_phi_63_64_ladder_3 = _2995;
                frontier_phi_63_64_ladder_4 = _2993;
                frontier_phi_63_64_ladder_5 = _2991;
            }
            else
            {
                frontier_phi_63_64_ladder = _2875;
                frontier_phi_63_64_ladder_1 = _2879;
                frontier_phi_63_64_ladder_2 = _2877;
                frontier_phi_63_64_ladder_3 = _2873;
                frontier_phi_63_64_ladder_4 = _2871;
                frontier_phi_63_64_ladder_5 = _2869;
            }
            _2990 = frontier_phi_63_64_ladder_5;
            _2992 = frontier_phi_63_64_ladder_4;
            _2994 = frontier_phi_63_64_ladder_3;
            _2996 = frontier_phi_63_64_ladder;
            _2998 = frontier_phi_63_64_ladder_2;
            _3000 = frontier_phi_63_64_ladder_1;
        }
        float _3005 = isnan(1.0) ? _739 : (isnan(_739) ? 1.0 : min(_739, 1.0));
        _2802 = (_3005 * _2996) + _2314;
        _2804 = (_3005 * _2998) + _2316;
        _2806 = (_3005 * _3000) + _2318;
        _2808 = ((_2990 * _723) * _3005) + _2652;
        _2810 = ((_2992 * _725) * _3005) + _2654;
        _2812 = ((_2994 * _726) * _3005) + _2656;
    }
    else
    {
        _2802 = _2314;
        _2804 = _2316;
        _2806 = _2318;
        _2808 = _2652;
        _2810 = _2654;
        _2812 = _2656;
    }
    float _4824 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4835 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4846 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2829 = ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2802 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _739))) + ((_2808 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    float _2830 = ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2804 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _739))) + ((_2810 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    float _2831 = ((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2806 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _739))) + ((_2812 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    uint _2832 = _258 + 6u;
    float _2840 = _659 / cbSceneParam._m0[86u].x;
    float _2841 = _660 / cbSceneParam._m0[86u].y;
    vec4 _2855 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, (log2((isnan(cbSceneParam._m0[77u].w) ? _580 : (isnan(_580) ? cbSceneParam._m0[77u].w : min(_580, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2857 = _2855.x;
    float _2858 = _2855.y;
    float _2859 = _2855.z;
    float _2860 = _2855.w;
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    if (_580 > cbSceneParam._m0[78u].w)
    {
        float _2894 = isnan(_580) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _580 : min(cbSceneParam._m0[80u].w, _580));
        float _2895 = _2894 / _580;
        float _2906 = _2895 * _631;
        float _2907 = _632 * _2895;
        float _2908 = (-0.0) - _2907;
        float _2910 = _2895 * _633;
        float _2912 = (cbSceneParam._m0[77u].w * _2908) / _2894;
        float _2913 = _2912 + cbSceneParam._m0[79u].w;
        float _2914 = cbSceneParam._m0[79u].w - _2907;
        float _2920 = sqrt(((_2906 * _2906) + (_2907 * _2907)) + (_2910 * _2910));
        float _2923 = (1.0 - (cbSceneParam._m0[77u].w / _2894)) * _2920;
        float _2928 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2930 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3107;
        if (abs((_2908 - _2912) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3107 = ((((_2913 > 0.0) ? exp2(_2928 * _2913) : (2.0 - exp2(_2930 * _2913))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2923;
        }
        else
        {
            float _3051 = 1.0 / cbSceneParam._m0[80u].x;
            float _3052 = isnan(_2914) ? _2913 : (isnan(_2913) ? _2914 : max(_2913, _2914));
            float _3053 = isnan(_2914) ? _2913 : (isnan(_2913) ? _2914 : min(_2913, _2914));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            _3107 = ((abs(_2920 / _2908) * cbSceneParam._m0[80u].y) * ((((_3062 - _3063) * 2.0) - ((exp2(_2928 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0)))) - exp2(_2928 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))))) * _3051)) - ((exp2(_2930 * _3062) - exp2(_2930 * _3063)) * _3051))) + (_2923 * cbSceneParam._m0[80u].z);
        }
        vec4 _3109 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2840, _2841, 1.0), 0.0);
        float _3118 = exp2((_3107 * (-1.44269502162933349609375)) * (1.0 - _3109.w));
        float _3119 = log2(_3118);
        float _3135 = log2(_2860);
        _2932 = (exp2(_3135 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].x)) * _3109.x) / cbSceneParam._m0[78u].x)) + _2857;
        _2934 = (exp2(_3135 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].y)) * _3109.y) / cbSceneParam._m0[78u].y)) + _2858;
        _2936 = (exp2(_3135 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].z)) * _3109.z) / cbSceneParam._m0[78u].z)) + _2859;
        _2938 = _3118 * _2860;
    }
    else
    {
        _2932 = _2857;
        _2934 = _2858;
        _2936 = _2859;
        _2938 = _2860;
    }
    bool _3145;
    vec4 _2948;
    vec4 _2970;
    float _2972;
    float _2976;
    float _2977;
    float _2978;
    float _2979;
    bool _2989;
    for (;;)
    {
        _2948 = cbMatDynParam._m0[0u];
        float _2950 = roundEven(_2948.y);
        bool _2951 = _2950 == 3.0;
        float _2952 = log2(_2938);
        float _2959 = exp2(_2952 * cbSceneParam._m0[78u].x) * _2829;
        float _2960 = exp2(_2952 * cbSceneParam._m0[78u].y) * _2830;
        float _2961 = exp2(_2952 * cbSceneParam._m0[78u].z) * _2831;
        float _2968 = _647 + (-0.5);
        _2970 = cbMtdParam._m0[1u];
        _2972 = _2970.y * _2968;
        float _2975 = (_2950 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2976 = _2975 * (_2951 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2932)));
        _2977 = _2975 * (_2951 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2934)));
        _2978 = _2975 * (_2951 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2936)));
        _2979 = _2968 * 0.999000012874603271484375;
        _2989 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2989)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _2979) < 0.5)
            {
                _3145 = true;
                break;
            }
        }
        uint _3086 = _699 + uint(_2948.w);
        if ((cbInstanceData._m0[_3086].w < 1.0) && ((cbInstanceData._m0[_3086].w + _2979) < 0.5))
        {
            _3145 = true;
            break;
        }
        if ((_2972 + 1.0) < _2970.x)
        {
            _3145 = true;
            break;
        }
        _3145 = false;
        break;
    }
    float _3349;
    if (_3145)
    {
        discard_state = true;
        _3349 = 0.0;
    }
    else
    {
        _3349 = cbInstanceData._m0[_2832].w;
    }
    SV_Target.x = _2976;
    SV_Target.y = _2977;
    SV_Target.z = _2978;
    SV_Target.w = _3349;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2832].w;
    discard_exit();
}


