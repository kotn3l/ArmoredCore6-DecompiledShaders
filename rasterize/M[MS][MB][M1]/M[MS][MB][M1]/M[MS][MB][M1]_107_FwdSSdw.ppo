#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1357;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3707 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    float _476 = ((_446.z - _467) * _392) + _467;
    float _479 = ((((_446.x - _465) * _392) + _465) * 2.0) + (-1.0);
    float _480 = ((((_446.y - _466) * _392) + _466) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3718 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _518 = (_479 + ((((_419.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_506.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _519 = (_480 + ((((_419.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_506.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _522 = fma(_486, _243, fma(_519, _250, _518 * _236));
    float _525 = fma(_486, _244, fma(_519, _251, _518 * _237));
    float _528 = fma(_486, _245, fma(_519, _252, _518 * _238));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _568 = (cbMtdParam._m0[19u].x + dot(vec4(_532 * _522, _532 * _525, _532 * _528, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_561 - _562) * cbMtdParam._m0[24u].z) + _562) * cbMtdParam._m0[21u].z);
    float _3729 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _571 = (-0.0) - cbMtdParam._m0[24u].x;
    float _573 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
    float _581 = _569 - ((_569 * TEXCOORD_8.x) * _574);
    float _582 = _569 - ((_569 * TEXCOORD_8.y) * _574);
    float _583 = _569 - ((_569 * TEXCOORD_8.z) * _574);
    float _590 = (_581 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _591 = (_582 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _592 = (_583 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _635 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_606 - _607) * cbMtdParam._m0[24u].w) + _607) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3750 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _644 = ((((cbMtdParam._m0[10u].x - _590) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _636) + _590;
    float _645 = ((((cbMtdParam._m0[10u].y - _591) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _636) + _591;
    float _646 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _592)) * _636) + _592;
    vec4 _672 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _674 = _672.x;
    float _692 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _674) * _392) + _674;
    float _696 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _692) * cbMtdParam._m0[19u].z) + _692;
    float _698 = _696 - (_696 * _581);
    float _700 = _698 - (_698 * _636);
    float _705 = (((_419.z - _476) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _476;
    float _709 = ((_506.z - _705) * cbMtdParam._m0[19u].w) + _705;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _730 = (_723.x * 2.0) + (-1.0);
    float _731 = (_723.y * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3761 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _740 = ((_723.z - _709) * _581) + _709;
    float _743 = ((cbMtdParam._m0[23u].y - _740) * _636) + _740;
    vec4 _762 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _768 = (_762.x * 2.0) + (-1.0);
    float _769 = (_762.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3772 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _785 = ((sqrt(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) - _486) * _583) + _486;
    float _788 = (((_730 - _518) * _581) + _518) + (cbMtdParam._m0[21u].x * _518);
    float _789 = (((_731 - _519) * _582) + _519) + (cbMtdParam._m0[21u].x * _519);
    float _800 = (((_768 - _788) + (_788 * cbMtdParam._m0[22u].z)) * _636) + _788;
    float _801 = (((_769 - _789) + (_789 * cbMtdParam._m0[22u].z)) * _636) + _789;
    float _802 = (_636 * (sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) - _785)) + _785;
    float _804 = cbMtdParam._m0[22u].x + _506.w;
    float _807 = fma(_802, _243, fma(_801, _250, _800 * _236));
    float _810 = fma(_802, _244, fma(_801, _251, _800 * _237));
    float _813 = fma(_802, _245, fma(_801, _252, _800 * _238));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    float _818 = _817 * _807;
    float _819 = _817 * _810;
    float _820 = _817 * _813;
    float _3783 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _821 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _3805 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3816 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3827 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3838 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _826 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _890 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _880);
    float _891 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _880);
    float _892 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _880);
    float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
    float _897 = _890 * _896;
    float _898 = _891 * _896;
    float _899 = _892 * _896;
    float _905 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _906 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _924 = fma(_820, cbSceneParam._m0[5u].z, fma(_819, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _818));
    float _927 = fma(_820, cbSceneParam._m0[6u].z, fma(_819, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _818));
    float _930 = fma(_820, cbSceneParam._m0[7u].z, fma(_819, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _818));
    uint _944 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_944].z;
    float _3849 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _956 = 1.0 - _826;
    float _957 = _953 * _956;
    float _958 = _954 * _956;
    float _959 = _955 * _956;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _826;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _826;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _826;
    float _967 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _905, cbSceneParam._m0[86u].y * _906));
    float _983 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_818, _819, _820), vec3(_897, _898, _899));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _818) - _897;
    float _992 = (_987 * _819) - _898;
    float _993 = (_987 * _820) - _899;
    float _997 = abs(dot(vec3(_897, _898, _899), vec3(_818, _819, _820)));
    float _3882 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_821);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1018 = (1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _999;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1085 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1089 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1114 = _1047 + _818;
        float _1115 = _1051 + _819;
        float _1116 = _1055 + _820;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_818, _819, _820), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3930 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_818, _819, _820), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3963 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_818, _819, _820), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3996 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1396 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1400 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1404 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1427 = _1047 + _818;
        float _1428 = _1051 + _819;
        float _1429 = _1055 + _820;
        float _1439 = fma(_1429, cbModelParam._m0[30u].z, fma(_1428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427)) - _1396;
        float _1440 = fma(_1429, cbModelParam._m0[31u].z, fma(_1428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427)) - _1400;
        float _1441 = fma(_1429, cbModelParam._m0[32u].z, fma(_1428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427)) - _1404;
        float _1445 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
        float _1458 = ((_1445 * _1439) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1396 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1445 * _1440) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1400 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1445 * _1441) / cbModelParam._m0[35u].z) + ((((((_1404 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        float _1495 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1462.x + (-0.5));
        float _1497 = _1495 * (_1462.y + (-0.5));
        float _1498 = _1495 * (_1462.z + (-0.5));
        float _1505 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1469.x + (-0.5));
        float _1507 = _1505 * (_1469.y + (-0.5));
        float _1508 = _1505 * (_1469.z + (-0.5));
        float _1515 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1476.x + (-0.5));
        float _1517 = _1515 * (_1476.y + (-0.5));
        float _1518 = _1515 * (_1476.z + (-0.5));
        float _1525 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1483.x + (-0.5));
        float _1527 = _1525 * (_1483.y + (-0.5));
        float _1528 = _1525 * (_1483.z + (-0.5));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = _1496 * 0.5;
        float _1533 = _1506 * 0.5;
        float _1534 = _1516 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_818, _819, _820), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4059 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1559 + 1.0))) + _1564) * _1529;
        float _1574 = _1497 * 0.5;
        float _1575 = _1507 * 0.5;
        float _1576 = _1517 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_818, _819, _820), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4092 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1601 + 1.0))) + _1606) * _1530;
        float _1616 = _1498 * 0.5;
        float _1617 = _1508 * 0.5;
        float _1618 = _1518 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_818, _819, _820), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4125 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1643 + 1.0))) + _1648) * _1531;
        _1665 = _1498;
        _1666 = _1497;
        _1667 = _1496;
        _1668 = _1508;
        _1669 = _1507;
        _1670 = _1506;
        _1671 = _1518;
        _1672 = _1517;
        _1673 = _1516;
        _1674 = _1531;
        _1675 = _1530;
        _1676 = _1529;
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
    }
    else
    {
        _1665 = _1357;
        _1666 = _1357;
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = 0.0;
        _1678 = 0.0;
        _1679 = 0.0;
    }
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1369)) + _1369;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1370)) + _1370;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1371)) + _1371;
    float _1712 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1689));
    float _1733 = _991 * 0.5;
    float _1734 = _992 * 0.5;
    float _1735 = _993 * 0.5;
    float _1736 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1739 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1742 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1776;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1749 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1753 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1757 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1764 = dot(vec4(cbModelParam._m0[39u]), vec4(_1733, _1734, _1735, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1787;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1778 = dot(vec4(cbModelParam._m0[40u]), vec4(_1733, _1734, _1735, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1791 = (_1787 * cbModelParam._m0[1u].x) + (_1776 * (1.0 - cbModelParam._m0[1u].x));
    float _1801 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _821);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1801 : min(cbModelParam._m0[25u].z, _1801));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1864 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1867 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1895 = frontier_phi_14_12_ladder;
        }
        float _2119;
        if (_1864 > 0.0)
        {
            _2119 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2119 = frontier_phi_23_19_ladder;
        }
        float _2376;
        if (_1867 > 0.0)
        {
            _2376 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2376 = frontier_phi_35_30_ladder;
        }
        float _2378 = isnan(_2119) ? _1895 : (isnan(_1895) ? _2119 : min(_1895, _2119));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1861) + _1850;
        float _2384 = (_2379 * _1864) + _1854;
        float _2385 = (_2379 * _1867) + _1858;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2386;
        float _2390 = _2386 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 > _2390) || ((_2384 < _2388) || ((_2383 < _2388) || (_2383 > _2390))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2385, cbModelParam._m0[9u].z, fma(_2384, cbModelParam._m0[9u].y, _2383 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2385, cbModelParam._m0[10u].z, fma(_2384, cbModelParam._m0[10u].y, _2383 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2385, cbModelParam._m0[11u].z, fma(_2384, cbModelParam._m0[11u].y, _2383 * cbModelParam._m0[11u].x))), _1802);
            frontier_phi_13_35_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_13_35_ladder_2;
        _1885 = frontier_phi_13_35_ladder_1;
        _1887 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1802);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _821);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1946 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1950 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1954 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1957 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1960 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1963 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2124;
        if (_1957 > 0.0)
        {
            _2124 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2124 = frontier_phi_25_21_ladder;
        }
        float _2403;
        if (_1960 > 0.0)
        {
            _2403 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2403 = frontier_phi_37_32_ladder;
        }
        float _2616;
        if (_1963 > 0.0)
        {
            _2616 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2616 = frontier_phi_46_43_ladder;
        }
        float _2618 = isnan(_2403) ? _2124 : (isnan(_2124) ? _2403 : min(_2124, _2403));
        float _2619 = isnan(_2616) ? _2618 : (isnan(_2618) ? _2616 : min(_2618, _2616));
        float _2623 = (_2619 * _1957) + _1946;
        float _2624 = (_2619 * _1960) + _1950;
        float _2625 = (_2619 * _1963) + _1954;
        float _2626 = _2619 * 9.9999997473787516355514526367188e-05;
        float _2627 = (-1.0) - _2626;
        float _2629 = _2626 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2625 > _2629) || ((_2625 < _2627) || ((_2624 > _2629) || ((_2624 < _2627) || ((_2623 < _2627) || (_2623 > _2629))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2625, cbModelParam._m0[17u].z, fma(_2624, cbModelParam._m0[17u].y, _2623 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2625, cbModelParam._m0[18u].z, fma(_2624, cbModelParam._m0[18u].y, _2623 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2625, cbModelParam._m0[19u].z, fma(_2624, cbModelParam._m0[19u].y, _2623 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_22_46_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1982 = frontier_phi_22_46_ladder_2;
        _1984 = frontier_phi_22_46_ladder_1;
        _1986 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1892);
        _1982 = _1966.x * cbModelParam._m0[1u].z;
        _1984 = _1966.y * cbModelParam._m0[1u].z;
        _1986 = _1966.z * cbModelParam._m0[1u].z;
    }
    float _1999 = (((_1018 * _967) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2001 = (((_1018 * _969) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1984 - _1885)) + _1885);
    float _2003 = (((_1018 * _970) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1986 - _1887)) + _1887);
    float _2006 = fma(_2003, cbSceneParam._m0[89u].z, fma(_2001, cbSceneParam._m0[89u].y, _1999 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_2003, cbSceneParam._m0[90u].z, fma(_2001, cbSceneParam._m0[90u].y, _1999 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_2003, cbSceneParam._m0[91u].z, fma(_2001, cbSceneParam._m0[91u].y, _1999 * cbSceneParam._m0[91u].x));
    vec4 _2020 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_905, _906));
    float _2022 = _2020.w;
    float _2034 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2022);
    float _2035 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2022);
    float _2036 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2022);
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _983 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2078 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2082 = _2042 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_818, _819, _820));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_818, _819, _820));
    float _4261 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4272 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2059].x * _2065) * _2103) + (((cbLight._m0[_2069].x * _2034) * _2078) * _2101);
    float _2111 = ((_2065 * cbLight._m0[_2059].y) * _2103) + (((cbLight._m0[_2069].y * _2035) * _2078) * _2101);
    float _2112 = ((_2065 * cbLight._m0[_2059].z) * _2103) + (((cbLight._m0[_2069].z * _2036) * _2078) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2118)
    {
        _2129 = _2110;
        _2131 = _2111;
        _2133 = _2112;
    }
    else
    {
        uint _2137 = _2042 + 6u;
        float _2153 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4283 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2156 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2129 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _2110;
        _2131 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _2111;
        _2133 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _2112;
    }
    bool _2136 = _2116.y == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2136)
    {
        _2174 = _2129;
        _2176 = _2131;
        _2178 = _2133;
    }
    else
    {
        uint _2347 = _2042 + 7u;
        float _2363 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2364 = _2363 * _2363;
        float _4299 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2365 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2366 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2174 = (((cbLight._m0[_2347].x * 0.3183098733425140380859375) * _2365) * _2366) + _2129;
        _2176 = (((cbLight._m0[_2347].y * 0.3183098733425140380859375) * _2365) * _2366) + _2131;
        _2178 = (((cbLight._m0[_2347].z * 0.3183098733425140380859375) * _2365) * _2366) + _2133;
    }
    uint _2181 = _2042 + 8u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _821) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2042].x + _897;
    float _2197 = cbLight._m0[_2042].y + _898;
    float _2198 = cbLight._m0[_2042].z + _899;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2042].xyz));
    float _4315 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2210 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2211 = dot(vec3(_818, _819, _820), vec3(_2203, _2204, _2205));
    float _4337 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2203, _2204, _2205));
    float _4348 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2195 * _2195;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2231 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
    float _2232 = 0.959999978542327880859375 - _964;
    float _2234 = 0.959999978542327880859375 - _965;
    float _2235 = 0.959999978542327880859375 - _966;
    float _2242 = 1.0 - _2195;
    float _2253 = (0.5 / (((_2210 * ((_2209 * _2242) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2242) + _2195) * _2209))) * _2209;
    float _4359 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2255 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    uint _2269 = _2042 + 9u;
    float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _821) * 0.949999988079071044921875);
    float _2281 = _2280 * _2280;
    float _2282 = cbLight._m0[_2082].x + _897;
    float _2283 = cbLight._m0[_2082].y + _898;
    float _2284 = cbLight._m0[_2082].z + _899;
    float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
    float _2289 = _2288 * _2282;
    float _2290 = _2288 * _2283;
    float _2291 = _2288 * _2284;
    float _2292 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2082].xyz));
    float _4370 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2296 = dot(vec3(_818, _819, _820), vec3(_2289, _2290, _2291));
    float _4381 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2300 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2289, _2290, _2291));
    float _4392 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2304 = _2281 * _2281;
    float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
    float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
    float _2322 = 1.0 - _2281;
    float _2332 = (0.5 / (((_2210 * ((_2295 * _2322) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2322) + _2281) * _2295))) * _2295;
    float _4403 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2334 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
    float _2344 = (((((_2315 * _2232) + _967) * cbLight._m0[_2269].x) * _2334) * _2065) + ((((cbLight._m0[_2181].x * _2034) * ((_2231 * _2232) + _967)) * _2255) * _2078);
    float _2345 = (((((_2315 * _2234) + _969) * cbLight._m0[_2269].y) * _2334) * _2065) + ((((cbLight._m0[_2181].y * _2035) * ((_2231 * _2234) + _969)) * _2255) * _2078);
    float _2346 = (((((_2315 * _2235) + _970) * cbLight._m0[_2269].z) * _2334) * _2065) + ((((cbLight._m0[_2181].z * _2036) * ((_2231 * _2235) + _970)) * _2255) * _2078);
    float _2408;
    float _2410;
    float _2412;
    if (_2118)
    {
        _2408 = _2344;
        _2410 = _2345;
        _2412 = _2346;
    }
    else
    {
        uint _2414 = _2042 + 2u;
        uint _2418 = _2042 + 10u;
        float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _821) * 0.949999988079071044921875);
        float _2433 = _2432 * _2432;
        float _2434 = cbLight._m0[_2414].x + _897;
        float _2435 = cbLight._m0[_2414].y + _898;
        float _2436 = cbLight._m0[_2414].z + _899;
        float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
        float _2441 = _2440 * _2434;
        float _2442 = _2440 * _2435;
        float _2443 = _2440 * _2436;
        float _2444 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2414].xyz));
        float _4414 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2448 = dot(vec3(_818, _819, _820), vec3(_2441, _2442, _2443));
        float _4425 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2452 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2441, _2442, _2443));
        float _4436 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2456 = _2433 * _2433;
        float _2460 = ((_2451 * _2451) * (_2456 + (-1.0))) + 1.0;
        float _2467 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
        float _2474 = 1.0 - _2433;
        float _2484 = (0.5 / (((_2210 * ((_2447 * _2474) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2474) + _2433) * _2447))) * _2447;
        float _4447 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2486 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2456 / ((_2460 * _2460) * 3.141590118408203125));
        float _2487 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2408 = (((((_2467 * _2232) + _967) * cbLight._m0[_2418].x) * _2486) * _2487) + _2344;
        _2410 = (((((_2467 * _2234) + _969) * cbLight._m0[_2418].y) * _2486) * _2487) + _2345;
        _2412 = (((((_2467 * _2235) + _970) * cbLight._m0[_2418].z) * _2486) * _2487) + _2346;
    }
    float _2522;
    float _2524;
    float _2526;
    if (_2136)
    {
        _2522 = _2408;
        _2524 = _2410;
        _2526 = _2412;
    }
    else
    {
        uint _2533 = _2042 + 3u;
        uint _2537 = _2042 + 11u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _821) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _897;
        float _2554 = cbLight._m0[_2533].y + _898;
        float _2555 = cbLight._m0[_2533].z + _899;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2533].xyz));
        float _4463 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2567 = dot(vec3(_818, _819, _820), vec3(_2560, _2561, _2562));
        float _4474 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4485 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
        float _2593 = 1.0 - _2552;
        float _2603 = (0.5 / (((_2210 * ((_2566 * _2593) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2593) + _2552) * _2566))) * _2566;
        float _4496 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2522 = (((((_2586 * _2232) + _967) * cbLight._m0[_2537].x) * _2605) * _2606) + _2408;
        _2524 = (((((_2586 * _2234) + _969) * cbLight._m0[_2537].y) * _2605) * _2606) + _2410;
        _2526 = (((((_2586 * _2235) + _970) * cbLight._m0[_2537].z) * _2605) * _2606) + _2412;
    }
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    if (_2040.y == 0u)
    {
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2681;
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2681;
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2681;
        uvec4 _2696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2697 = _2696.x;
        uint _2708 = uint((float(_2696.y) * floor(float(uint(cbSceneParam._m0[85u].y * _906) / _2697))) + floor(float(uint(cbSceneParam._m0[85u].x * _905) / _2697)));
        float _2718 = (log2(_2684 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2719 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        uint _2722 = uint(isnan(14.0) ? _2719 : (isnan(_2719) ? 14.0 : min(_2719, 14.0)));
        uvec4 _2727 = texelFetch(g_lightClusterGridBuffer, int(((_2722 << 2u) + (_2708 << 6u)) >> 2u));
        uint _2728 = _2727.x;
        uint _2729 = _2696.z;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((((1u << ((_2729 >> 4u) & 15u)) + 4294967295u) & _2728) == 0u) || ((_2729 & 240u) == 0u))
        {
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
        }
        else
        {
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            uint _2979 = 0u;
            uint _2988;
            bool _2989;
            for (;;)
            {
                _2988 = texelFetch(g_lightClassification, int((((_2722 << 5u) + (_2708 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                _2989 = _2988 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2989)
                {
                    frontier_phi_61_pred = _2973;
                    frontier_phi_61_pred_1 = _2978;
                    frontier_phi_61_pred_2 = _2977;
                    frontier_phi_61_pred_3 = _2976;
                    frontier_phi_61_pred_4 = _2975;
                    frontier_phi_61_pred_5 = _2974;
                }
                else
                {
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    uint _3103;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2988;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    for (;;)
                    {
                        uint _3107 = uint(findLSB(_3103)) + (_2979 << 5u);
                        uint _3104 = (_3103 + 4294967295u) & _3103;
                        uint _3109 = _3107 * 48u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3129 = (_3107 * 48u) + 4u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3148 = (_3107 * 48u) + 8u;
                        vec3 _3159 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x));
                        float _3163 = _3123.x - _2682;
                        float _3164 = _3123.y - _2683;
                        float _3165 = _3123.z - _2684;
                        float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                        float _3169 = inversesqrt(_3166);
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3173 = dot(vec3(_924, _927, _930), vec3(_3170, _3171, _3172));
                        float _3178 = 1.0 - (_3166 * _3123.w);
                        float _4522 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3180 = sqrt(_3166) * _3142.w;
                        float _3183 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3173) + _3184;
                        float _3190 = _3180 * _3180;
                        float _3194 = ((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3179) / ((_3190 * 0.699999988079071044921875) + 1.0);
                        float _3198 = (-0.0) - _2682;
                        float _3199 = (-0.0) - _2683;
                        float _3200 = (-0.0) - _2684;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3215 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                        float _3216 = 1.0 - _999;
                        float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                        float _3224 = _3223 * _3223;
                        float _3225 = _3224 * _3224;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3236 = dot(vec3(_924, _927, _930), vec3(_3205, _3206, _3207));
                        float _4538 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3240 = dot(vec3(_924, _927, _930), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                        float _4549 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                        float _3248 = _3183 * _3224;
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3173) + _3249;
                        float _4560 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3254 = 1.0 - _3224;
                        float _3264 = (0.5 / (((_3253 * ((_3239 * _3254) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3224) * _3239))) * _3253;
                        float _4571 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3275 = (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3247 * _3247) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125))) * _3179;
                        _3032 = (_3194 * _3142.x) + _3100;
                        _3033 = (_3194 * _3142.y) + _3101;
                        _3034 = (_3194 * _3142.z) + _3102;
                        _3029 = (_3275 * _3159.x) + _3097;
                        _3030 = (_3275 * _3159.y) + _3098;
                        _3031 = (_3275 * _3159.z) + _3099;
                        if (_3104 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3104;
                        }
                    }
                    frontier_phi_61_pred = _3029;
                    frontier_phi_61_pred_1 = _3034;
                    frontier_phi_61_pred_2 = _3033;
                    frontier_phi_61_pred_3 = _3032;
                    frontier_phi_61_pred_4 = _3031;
                    frontier_phi_61_pred_5 = _3030;
                }
                _2830 = frontier_phi_61_pred;
                _2840 = frontier_phi_61_pred_1;
                _2838 = frontier_phi_61_pred_2;
                _2836 = frontier_phi_61_pred_3;
                _2834 = frontier_phi_61_pred_4;
                _2832 = frontier_phi_61_pred_5;
                uint _2980 = _2979 + 1u;
                if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2973 = _2830;
                    _2974 = _2832;
                    _2975 = _2834;
                    _2976 = _2836;
                    _2977 = _2838;
                    _2978 = _2840;
                    _2979 = _2980;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
        }
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.z;
        uint _2846 = (_2844 >> 8u) & 15u;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((4294967295u << _2846) & _2728) == 0u)
        {
            _2941 = _2829;
            _2943 = _2831;
            _2945 = _2833;
            _2947 = _2835;
            _2949 = _2837;
            _2951 = _2839;
        }
        else
        {
            float _2966 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
            float _2967 = _2966 * _2682;
            float _2968 = _2966 * _2683;
            float _2969 = _2966 * _2684;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2846 < ((_2844 >> 12u) & 15u))
            {
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _3080 = _2829;
                float _3081 = _2831;
                float _3082 = _2833;
                float _3083 = _2835;
                float _3084 = _2837;
                float _3085 = _2839;
                uint _3086 = _2846;
                uint _3095;
                bool _3096;
                for (;;)
                {
                    _3095 = texelFetch(g_lightClassification, int((((_2722 << 5u) + (_2708 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                    _3096 = _3095 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3096)
                    {
                        frontier_phi_67_pred = _3083;
                        frontier_phi_67_pred_1 = _3084;
                        frontier_phi_67_pred_2 = _3085;
                        frontier_phi_67_pred_3 = _3082;
                        frontier_phi_67_pred_4 = _3081;
                        frontier_phi_67_pred_5 = _3080;
                    }
                    else
                    {
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3293 = _3080;
                        float _3294 = _3081;
                        float _3295 = _3082;
                        float _3296 = _3083;
                        float _3297 = _3084;
                        float _3298 = _3085;
                        uint _3299 = _3095;
                        uint _3300;
                        vec4 _3325;
                        float _3326;
                        vec4 _3341;
                        vec3 _3353;
                        vec4 _3368;
                        vec4 _3383;
                        float _3429;
                        bool _3430;
                        for (;;)
                        {
                            uint _3310 = ((_3086 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3299));
                            _3300 = (_3299 + 4294967295u) & _3299;
                            uint _3312 = _3310 * 40u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3326 = _3325.w;
                            uint _3328 = (_3310 * 40u) + 4u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3310 * 40u) + 8u;
                            _3353 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x));
                            uint _3355 = (_3310 * 40u) + 16u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3310 * 40u) + 20u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3310 * 40u) + 24u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3404 = (_3310 * 40u) + 28u;
                            vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3429 = fma(_2684, _3417.z, fma(_2683, _3417.y, _3417.x * _2682)) + _3417.w;
                            _3430 = !((fma(_2684, _3398.z, fma(_2683, _3398.y, _3398.x * _2682)) + _3398.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3430)
                            {
                                float _3457 = _3325.x - _2682;
                                float _3458 = _3325.y - _2683;
                                float _3459 = _3325.z - _2684;
                                float _3460 = dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459));
                                float _3463 = inversesqrt(_3460);
                                float _3464 = _3463 * _3457;
                                float _3465 = _3463 * _3458;
                                float _3466 = _3463 * _3459;
                                float _3470 = 1.0 - (_3460 / (_3326 * _3326));
                                float _4582 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3475 = sqrt(_3460) * _3341.w;
                                float _3477 = 1.39999997615814208984375 / (_3475 + 1.39999997615814208984375);
                                float _3478 = _3477 * _3477;
                                float _3481 = ((1.0 - _3478) * dot(vec3(_3464, _3465, _3466), vec3(_924, _927, _930))) + _3478;
                                float _3484 = _3475 * _3475;
                                float _3488 = (fma(_2684, _3368.z, fma(_2683, _3368.y, _3368.x * _2682)) + _3368.w) / _3429;
                                float _3489 = (fma(_2684, _3383.z, fma(_2683, _3383.y, _3383.x * _2682)) + _3383.w) / _3429;
                                float _3493 = 1.0 - dot(vec2(_3488, _3489), vec2(_3488, _3489));
                                float _4598 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3495 = _3494 * (((isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0))) * _3471) / ((_3484 * 0.699999988079071044921875) + 1.0));
                                float _3507 = exp2(log2(1.0 / ((_3484 * 3.5) + 5.0)) * 0.25);
                                float _3508 = 1.0 - _999;
                                float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                                float _3516 = _3515 * _3515;
                                float _3517 = _3516 * _3516;
                                float _3518 = _3464 - _2967;
                                float _3519 = _3465 - _2968;
                                float _3520 = _3466 - _2969;
                                float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                                float _3528 = dot(vec3(_924, _927, _930), vec3((-0.0) - _2967, (-0.0) - _2968, (-0.0) - _2969));
                                float _4609 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3532 = dot(vec3(_924, _927, _930), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                                float _4620 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                                float _3540 = _3477 * _3516;
                                float _3541 = _3540 * _3540;
                                float _3547 = ((1.0 - _3541) * dot(vec3(_924, _927, _930), vec3(_3464, _3465, _3466))) + _3541;
                                float _4631 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3549 = 1.0 - _3516;
                                float _3559 = (0.5 / (((_3548 * ((_3531 * _3549) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3516) * _3531))) * _3548;
                                float _4642 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3569 = (_3494 * _3471) * (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) / ((_3539 * _3539) * ((_3484 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3569 * _3353.x;
                                frontier_phi_73_pred_1 = _3569 * _3353.y;
                                frontier_phi_73_pred_2 = _3495 * _3341.z;
                                frontier_phi_73_pred_3 = _3495 * _3341.y;
                                frontier_phi_73_pred_4 = _3495 * _3341.x;
                                frontier_phi_73_pred_5 = _3569 * _3353.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3573 = frontier_phi_73_pred;
                            _3574 = frontier_phi_73_pred_1;
                            _3578 = frontier_phi_73_pred_2;
                            _3577 = frontier_phi_73_pred_3;
                            _3576 = frontier_phi_73_pred_4;
                            _3575 = frontier_phi_73_pred_5;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            if (_3300 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3300;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3283;
                        frontier_phi_67_pred_1 = _3284;
                        frontier_phi_67_pred_2 = _3285;
                        frontier_phi_67_pred_3 = _3282;
                        frontier_phi_67_pred_4 = _3281;
                        frontier_phi_67_pred_5 = _3280;
                    }
                    _2948 = frontier_phi_67_pred;
                    _2950 = frontier_phi_67_pred_1;
                    _2952 = frontier_phi_67_pred_2;
                    _2946 = frontier_phi_67_pred_3;
                    _2944 = frontier_phi_67_pred_4;
                    _2942 = frontier_phi_67_pred_5;
                    uint _3087 = _3086 + 1u;
                    if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3080 = _2942;
                        _3081 = _2944;
                        _3082 = _2946;
                        _3083 = _2948;
                        _3084 = _2950;
                        _3085 = _2952;
                        _3086 = _3087;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2950;
                frontier_phi_55_56_ladder_1 = _2952;
                frontier_phi_55_56_ladder_2 = _2948;
                frontier_phi_55_56_ladder_3 = _2946;
                frontier_phi_55_56_ladder_4 = _2944;
                frontier_phi_55_56_ladder_5 = _2942;
            }
            else
            {
                frontier_phi_55_56_ladder = _2837;
                frontier_phi_55_56_ladder_1 = _2839;
                frontier_phi_55_56_ladder_2 = _2835;
                frontier_phi_55_56_ladder_3 = _2833;
                frontier_phi_55_56_ladder_4 = _2831;
                frontier_phi_55_56_ladder_5 = _2829;
            }
            _2941 = frontier_phi_55_56_ladder_5;
            _2943 = frontier_phi_55_56_ladder_4;
            _2945 = frontier_phi_55_56_ladder_3;
            _2947 = frontier_phi_55_56_ladder_2;
            _2949 = frontier_phi_55_56_ladder;
            _2951 = frontier_phi_55_56_ladder_1;
        }
        float _2956 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _2741 = (_2956 * _2947) + _2174;
        _2743 = (_2956 * _2949) + _2176;
        _2745 = (_2956 * _2951) + _2178;
        _2747 = ((_2941 * _967) * _2956) + _2522;
        _2749 = ((_2943 * _969) * _2956) + _2524;
        _2751 = ((_2945 * _970) * _2956) + _2526;
    }
    else
    {
        _2741 = _2174;
        _2743 = _2176;
        _2745 = _2178;
        _2747 = _2522;
        _2749 = _2524;
        _2751 = _2526;
    }
    float _4658 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4669 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4680 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    uint _2771 = _255 + 6u;
    float _2779 = _905 / cbSceneParam._m0[86u].x;
    float _2780 = _906 / cbSceneParam._m0[86u].y;
    vec4 _2794 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2796 = _2794.x;
    float _2797 = _2794.y;
    float _2798 = _2794.z;
    float _2799 = _2794.w;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _2854 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _2855 = _2854 / _840;
        float _2866 = _2855 * _890;
        float _2867 = _891 * _2855;
        float _2868 = (-0.0) - _2867;
        float _2869 = _2855 * _892;
        float _2871 = (cbSceneParam._m0[77u].w * _2868) / _2854;
        float _2872 = _2871 + cbSceneParam._m0[79u].w;
        float _2873 = cbSceneParam._m0[79u].w - _2867;
        float _2879 = sqrt(((_2866 * _2866) + (_2867 * _2867)) + (_2869 * _2869));
        float _2882 = (1.0 - (cbSceneParam._m0[77u].w / _2854)) * _2879;
        float _2887 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2889 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3042;
        if (abs((_2868 - _2871) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3042 = ((((_2872 > 0.0) ? exp2(_2887 * _2872) : (2.0 - exp2(_2889 * _2872))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2882;
        }
        else
        {
            float _3002 = 1.0 / cbSceneParam._m0[80u].x;
            float _3003 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : max(_2872, _2873));
            float _3004 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : min(_2872, _2873));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            float _3014 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : min(_3004, 0.0));
            _3042 = ((abs(_2879 / _2868) * cbSceneParam._m0[80u].y) * ((((_3013 - _3014) * 2.0) - ((exp2(_2887 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0)))) - exp2(_2887 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))))) * _3002)) - ((exp2(_2889 * _3013) - exp2(_2889 * _3014)) * _3002))) + (_2882 * cbSceneParam._m0[80u].z);
        }
        vec4 _3044 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, 1.0), 0.0);
        float _3053 = exp2((_3042 * (-1.44269502162933349609375)) * (1.0 - _3044.w));
        float _3054 = log2(_3053);
        float _3070 = log2(_2799);
        _2891 = (exp2(_3070 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].x)) * _3044.x) / cbSceneParam._m0[78u].x)) + _2796;
        _2893 = (exp2(_3070 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].y)) * _3044.y) / cbSceneParam._m0[78u].y)) + _2797;
        _2895 = (exp2(_3070 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].z)) * _3044.z) / cbSceneParam._m0[78u].z)) + _2798;
        _2897 = _3053 * _2799;
    }
    else
    {
        _2891 = _2796;
        _2893 = _2797;
        _2895 = _2798;
        _2897 = _2799;
    }
    float _2909 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2910 = _2909 == 3.0;
    float _2911 = log2(_2897);
    float _2918 = exp2(_2911 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2741 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _983))) + ((_2747 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2919 = exp2(_2911 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2743 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _983))) + ((_2749 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2920 = exp2(_2911 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2745 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _983))) + ((_2751 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2929 = (_2909 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2929 * (_2910 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2891)));
    SV_Target.y = _2929 * (_2910 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2893)));
    SV_Target.z = _2929 * (_2910 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.w = cbInstanceData._m0[_2771].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2771].w;
}


