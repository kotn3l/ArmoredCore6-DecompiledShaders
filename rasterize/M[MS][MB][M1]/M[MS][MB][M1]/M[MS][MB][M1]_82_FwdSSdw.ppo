#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3506 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _431 = ((_401.z - _422) * _374) + _422;
    float _434 = ((((_401.x - _420) * _374) + _420) * 2.0) + (-1.0);
    float _436 = ((((_401.y - _421) * _374) + _421) * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3517 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _475 = _473.x;
    float _476 = 1.0 - _475;
    float _489 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_475 - _476) * cbMtdParam._m0[24u].z) + _476) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3528 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _497 = (_490 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _498 = (_490 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _499 = (_490 * (cbMtdParam._m0[17u].z - _383)) + _383;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _527 = _525.x;
    float _545 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _527) * _374) + _527;
    float _549 = ((_511.x - _545) * cbMtdParam._m0[19u].z) + _545;
    float _551 = _549 - (_549 * _490);
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _571 = (_564.x * 2.0) + (-1.0);
    float _572 = (_564.y * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3539 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _581 = (_490 * (_564.z - _431)) + _431;
    float _593 = (((_571 - _434) + (cbMtdParam._m0[21u].x * _434)) * _490) + _434;
    float _594 = (((_572 - _436) + (cbMtdParam._m0[21u].x * _436)) * _490) + _436;
    float _595 = (_490 * (sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) - _442)) + _442;
    float _600 = cbMtdParam._m0[22u].x + _455.w;
    float _603 = fma(_595, _223 * NORMAL.x, fma(_594, _230 * TANGENT.x, (_216 * _208) * _593));
    float _606 = fma(_595, _223 * NORMAL.y, fma(_594, _230 * TANGENT.y, (_216 * _209) * _593));
    float _609 = fma(_595, _223 * NORMAL.z, fma(_594, _230 * TANGENT.z, (_216 * _210) * _593));
    float _613 = inversesqrt(dot(vec3(_603, _606, _609), vec3(_603, _606, _609)));
    float _614 = _613 * _603;
    float _615 = _613 * _606;
    float _616 = _613 * _609;
    float _3550 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _617 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3572 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3583 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3594 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3605 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _622 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _687 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _677);
    float _688 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _677);
    float _689 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _677);
    float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
    float _694 = _687 * _693;
    float _695 = _688 * _693;
    float _696 = _689 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_616, cbSceneParam._m0[5u].z, fma(_615, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _614));
    float _724 = fma(_616, cbSceneParam._m0[6u].z, fma(_615, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _614));
    float _727 = fma(_616, cbSceneParam._m0[7u].z, fma(_615, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _614));
    uint _741 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3616 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _753 = 1.0 - _622;
    float _754 = _750 * _753;
    float _755 = _751 * _753;
    float _756 = _752 * _753;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _622;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _622;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _622;
    float _764 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _780 = ((isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * TEXCOORD_5.w) * _776.x;
    float _781 = dot(vec3(_614, _615, _616), vec3(_694, _695, _696));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _614) - _694;
    float _789 = (_784 * _615) - _695;
    float _790 = (_784 * _616) - _696;
    float _794 = abs(dot(vec3(_694, _695, _696), vec3(_614, _615, _616)));
    float _3649 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_617);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _815 = (1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _816 = _809 * _796;
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _882 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _886 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _911 = _844 + _614;
        float _912 = _848 + _615;
        float _913 = _852 + _616;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_614, _615, _616), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3697 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_614, _615, _616), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3730 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_614, _615, _616), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3763 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1197 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1201 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1224 = _844 + _614;
        float _1225 = _848 + _615;
        float _1226 = _852 + _616;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_614, _615, _616), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3826 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_614, _615, _616), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3859 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_614, _615, _616), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3892 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1154;
        _1463 = _1154;
        _1464 = _1154;
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _788 * 0.5;
    float _1531 = _789 * 0.5;
    float _1532 = _790 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1661 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1664 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1692 = frontier_phi_14_12_ladder;
        }
        float _1916;
        if (_1661 > 0.0)
        {
            _1916 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1916 = frontier_phi_23_19_ladder;
        }
        float _2173;
        if (_1664 > 0.0)
        {
            _2173 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2173 = frontier_phi_35_30_ladder;
        }
        float _2175 = isnan(_1916) ? _1692 : (isnan(_1692) ? _1916 : min(_1692, _1916));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1658) + _1647;
        float _2181 = (_2176 * _1661) + _1651;
        float _2182 = (_2176 * _1664) + _1655;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_13_35_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_13_35_ladder_2;
        _1682 = frontier_phi_13_35_ladder_1;
        _1684 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1599);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1743 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1747 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1751 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1754 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1757 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1760 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1921;
        if (_1754 > 0.0)
        {
            _1921 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1921 = frontier_phi_25_21_ladder;
        }
        float _2200;
        if (_1757 > 0.0)
        {
            _2200 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2200 = frontier_phi_37_32_ladder;
        }
        float _2413;
        if (_1760 > 0.0)
        {
            _2413 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2413 = frontier_phi_46_43_ladder;
        }
        float _2415 = isnan(_2200) ? _1921 : (isnan(_1921) ? _2200 : min(_1921, _2200));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1754) + _1743;
        float _2421 = (_2416 * _1757) + _1747;
        float _2422 = (_2416 * _1760) + _1751;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_22_46_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1779 = frontier_phi_22_46_ladder_2;
        _1781 = frontier_phi_22_46_ladder_1;
        _1783 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1689);
        _1779 = _1763.x * cbModelParam._m0[1u].z;
        _1781 = _1763.y * cbModelParam._m0[1u].z;
        _1783 = _1763.z * cbModelParam._m0[1u].z;
    }
    float _1796 = (((_815 * _764) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1798 = (((_815 * _766) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1800 = (((_815 * _767) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1803 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, _1796 * cbSceneParam._m0[91u].x));
    vec4 _1817 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_702, _703));
    float _1819 = _1817.w;
    float _1831 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1819);
    float _1832 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1819);
    float _1833 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1819);
    uvec4 _1837 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1839 = _1837.x * 14u;
    uint _1840 = _1839 + 13u;
    float _1847 = _780 + (-1.0);
    float _1852 = (cbLight._m0[_1840].x * _1847) + 1.0;
    float _1853 = (cbLight._m0[_1840].y * _1847) + 1.0;
    float _1854 = (cbLight._m0[_1840].z * _1847) + 1.0;
    float _1855 = (cbLight._m0[_1840].w * _1847) + 1.0;
    uint _1856 = _1839 + 5u;
    float _1862 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1866 = _1839 + 4u;
    float _1875 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1879 = _1839 | 1u;
    float _1890 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_614, _615, _616));
    float _1893 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_614, _615, _616));
    float _4028 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _4039 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1898 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1900 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.3183098733425140380859375;
    float _1907 = ((cbLight._m0[_1856].x * _1862) * _1900) + (((cbLight._m0[_1866].x * _1831) * _1875) * _1898);
    float _1908 = ((_1862 * cbLight._m0[_1856].y) * _1900) + (((cbLight._m0[_1866].y * _1832) * _1875) * _1898);
    float _1909 = ((_1862 * cbLight._m0[_1856].z) * _1900) + (((cbLight._m0[_1866].z * _1833) * _1875) * _1898);
    uvec4 _1913 = floatBitsToUint(cbLight._m0[_1839 + 12u]);
    bool _1915 = _1913.x == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1915)
    {
        _1926 = _1907;
        _1928 = _1908;
        _1930 = _1909;
    }
    else
    {
        uint _1934 = _1839 + 6u;
        float _1950 = (dot(vec3(cbLight._m0[_1839 + 2u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _4050 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1953 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1926 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1907;
        _1928 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1908;
        _1930 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1909;
    }
    bool _1933 = _1913.y == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1933)
    {
        _1971 = _1926;
        _1973 = _1928;
        _1975 = _1930;
    }
    else
    {
        uint _2144 = _1839 + 7u;
        float _2160 = (dot(vec3(cbLight._m0[_1839 + 3u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4066 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2163 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1971 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _1926;
        _1973 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _1928;
        _1975 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _1930;
    }
    uint _1978 = _1839 + 8u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _617) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1839].x + _694;
    float _1994 = cbLight._m0[_1839].y + _695;
    float _1995 = cbLight._m0[_1839].z + _696;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1839].xyz));
    float _4082 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2007 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2008 = dot(vec3(_614, _615, _616), vec3(_2000, _2001, _2002));
    float _4104 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2000, _2001, _2002));
    float _4115 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1992 * _1992;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0);
    float _2029 = 0.959999978542327880859375 - _761;
    float _2031 = 0.959999978542327880859375 - _762;
    float _2032 = 0.959999978542327880859375 - _763;
    float _2039 = 1.0 - _1992;
    float _2050 = (0.5 / (((_2007 * ((_2006 * _2039) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2039) + _1992) * _2006))) * _2006;
    float _4126 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    uint _2066 = _1839 + 9u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _617) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1879].x + _694;
    float _2080 = cbLight._m0[_1879].y + _695;
    float _2081 = cbLight._m0[_1879].z + _696;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1879].xyz));
    float _4137 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2093 = dot(vec3(_614, _615, _616), vec3(_2086, _2087, _2088));
    float _4148 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2086, _2087, _2088));
    float _4159 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2078 * _2078;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0);
    float _2119 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2007 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2119) + _2078) * _2092))) * _2092;
    float _4170 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    float _2141 = (((((_2112 * _2029) + _764) * cbLight._m0[_2066].x) * _2131) * _1862) + ((((cbLight._m0[_1978].x * _1831) * ((_2028 * _2029) + _764)) * _2052) * _1875);
    float _2142 = (((((_2112 * _2031) + _766) * cbLight._m0[_2066].y) * _2131) * _1862) + ((((cbLight._m0[_1978].y * _1832) * ((_2028 * _2031) + _766)) * _2052) * _1875);
    float _2143 = (((((_2112 * _2032) + _767) * cbLight._m0[_2066].z) * _2131) * _1862) + ((((cbLight._m0[_1978].z * _1833) * ((_2028 * _2032) + _767)) * _2052) * _1875);
    float _2205;
    float _2207;
    float _2209;
    if (_1915)
    {
        _2205 = _2141;
        _2207 = _2142;
        _2209 = _2143;
    }
    else
    {
        uint _2211 = _1839 + 2u;
        uint _2215 = _1839 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _617) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _694;
        float _2232 = cbLight._m0[_2211].y + _695;
        float _2233 = cbLight._m0[_2211].z + _696;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2211].xyz));
        float _4181 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2245 = dot(vec3(_614, _615, _616), vec3(_2238, _2239, _2240));
        float _4192 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4203 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
        float _2271 = 1.0 - _2230;
        float _2281 = (0.5 / (((_2007 * ((_2244 * _2271) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2271) + _2230) * _2244))) * _2244;
        float _4214 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2205 = (((((_2264 * _2029) + _764) * cbLight._m0[_2215].x) * _2283) * _2284) + _2141;
        _2207 = (((((_2264 * _2031) + _766) * cbLight._m0[_2215].y) * _2283) * _2284) + _2142;
        _2209 = (((((_2264 * _2032) + _767) * cbLight._m0[_2215].z) * _2283) * _2284) + _2143;
    }
    float _2319;
    float _2321;
    float _2323;
    if (_1933)
    {
        _2319 = _2205;
        _2321 = _2207;
        _2323 = _2209;
    }
    else
    {
        uint _2330 = _1839 + 3u;
        uint _2334 = _1839 + 11u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _617) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _694;
        float _2351 = cbLight._m0[_2330].y + _695;
        float _2352 = cbLight._m0[_2330].z + _696;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2330].xyz));
        float _4230 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2364 = dot(vec3(_614, _615, _616), vec3(_2357, _2358, _2359));
        float _4241 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4252 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2007 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2390) + _2349) * _2363))) * _2363;
        float _4263 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2319 = (((((_2383 * _2029) + _764) * cbLight._m0[_2334].x) * _2402) * _2403) + _2205;
        _2321 = (((((_2383 * _2031) + _766) * cbLight._m0[_2334].y) * _2402) * _2403) + _2207;
        _2323 = (((((_2383 * _2032) + _767) * cbLight._m0[_2334].z) * _2402) * _2403) + _2209;
    }
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_1837.y == 0u)
    {
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2478;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2478;
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2478;
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2494)));
        float _2515 = (log2(_2481 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
        }
        else
        {
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2787)
                {
                    frontier_phi_61_pred = _2771;
                    frontier_phi_61_pred_1 = _2776;
                    frontier_phi_61_pred_2 = _2775;
                    frontier_phi_61_pred_3 = _2774;
                    frontier_phi_61_pred_4 = _2773;
                    frontier_phi_61_pred_5 = _2772;
                }
                else
                {
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    uint _2901;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2786;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2905 = uint(findLSB(_2901)) + (_2777 << 5u);
                        uint _2902 = (_2901 + 4294967295u) & _2901;
                        uint _2907 = _2905 * 48u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2927 = (_2905 * 48u) + 4u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2946 = (_2905 * 48u) + 8u;
                        vec3 _2957 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x));
                        float _2961 = _2921.x - _2479;
                        float _2962 = _2921.y - _2480;
                        float _2963 = _2921.z - _2481;
                        float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                        float _2967 = inversesqrt(_2964);
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2971 = dot(vec3(_721, _724, _727), vec3(_2968, _2969, _2970));
                        float _2976 = 1.0 - (_2964 * _2921.w);
                        float _4289 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2978 = sqrt(_2964) * _2940.w;
                        float _2981 = 1.39999997615814208984375 / (_2978 + 1.39999997615814208984375);
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2971) + _2982;
                        float _2988 = _2978 * _2978;
                        float _2992 = ((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2977) / ((_2988 * 0.699999988079071044921875) + 1.0);
                        float _2996 = (-0.0) - _2479;
                        float _2997 = (-0.0) - _2480;
                        float _2998 = (-0.0) - _2481;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3013 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                        float _3014 = 1.0 - _796;
                        float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                        float _3022 = _3021 * _3021;
                        float _3023 = _3022 * _3022;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3026 = _3005 + _2970;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3034 = dot(vec3(_721, _724, _727), vec3(_3003, _3004, _3005));
                        float _4305 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _3038 = dot(vec3(_721, _724, _727), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                        float _4316 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                        float _3046 = _2981 * _3022;
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _2971) + _3047;
                        float _4327 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3052 = 1.0 - _3022;
                        float _3062 = (0.5 / (((_3051 * ((_3037 * _3052) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3052) + _3022) * _3037))) * _3051;
                        float _4338 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3073 = (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) / ((_3045 * _3045) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125))) * _2977;
                        _2830 = (_2992 * _2940.x) + _2898;
                        _2831 = (_2992 * _2940.y) + _2899;
                        _2832 = (_2992 * _2940.z) + _2900;
                        _2827 = (_3073 * _2957.x) + _2895;
                        _2828 = (_3073 * _2957.y) + _2896;
                        _2829 = (_3073 * _2957.z) + _2897;
                        if (_2902 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2902;
                        }
                    }
                    frontier_phi_61_pred = _2827;
                    frontier_phi_61_pred_1 = _2832;
                    frontier_phi_61_pred_2 = _2831;
                    frontier_phi_61_pred_3 = _2830;
                    frontier_phi_61_pred_4 = _2829;
                    frontier_phi_61_pred_5 = _2828;
                }
                _2627 = frontier_phi_61_pred;
                _2637 = frontier_phi_61_pred_1;
                _2635 = frontier_phi_61_pred_2;
                _2633 = frontier_phi_61_pred_3;
                _2631 = frontier_phi_61_pred_4;
                _2629 = frontier_phi_61_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2627;
                    _2772 = _2629;
                    _2773 = _2631;
                    _2774 = _2633;
                    _2775 = _2635;
                    _2776 = _2637;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
        }
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.z;
        uint _2643 = (_2641 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2643) & _2525) == 0u)
        {
            _2739 = _2626;
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
            _2747 = _2634;
            _2749 = _2636;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
            float _2765 = _2764 * _2479;
            float _2766 = _2764 * _2480;
            float _2767 = _2764 * _2481;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2643 < ((_2641 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2878 = _2626;
                float _2879 = _2628;
                float _2880 = _2630;
                float _2881 = _2632;
                float _2882 = _2634;
                float _2883 = _2636;
                uint _2884 = _2643;
                uint _2893;
                bool _2894;
                for (;;)
                {
                    _2893 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2884 << 2u)) >> 2u)).x;
                    _2894 = _2893 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2894)
                    {
                        frontier_phi_67_pred = _2881;
                        frontier_phi_67_pred_1 = _2882;
                        frontier_phi_67_pred_2 = _2883;
                        frontier_phi_67_pred_3 = _2880;
                        frontier_phi_67_pred_4 = _2879;
                        frontier_phi_67_pred_5 = _2878;
                    }
                    else
                    {
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        uint _3097 = _2893;
                        uint _3098;
                        vec4 _3123;
                        float _3124;
                        vec4 _3139;
                        vec3 _3151;
                        vec4 _3166;
                        vec4 _3182;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3108 = ((_2884 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3097));
                            _3098 = (_3097 + 4294967295u) & _3097;
                            uint _3110 = _3108 * 40u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3124 = _3123.w;
                            uint _3126 = (_3108 * 40u) + 4u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3108 * 40u) + 8u;
                            _3151 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x));
                            uint _3153 = (_3108 * 40u) + 16u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3169 = (_3108 * 40u) + 20u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3108 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3108 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_2481, _3216.z, fma(_2480, _3216.y, _3216.x * _2479)) + _3216.w;
                            _3229 = !((fma(_2481, _3197.z, fma(_2480, _3197.y, _3197.x * _2479)) + _3197.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3123.x - _2479;
                                float _3257 = _3123.y - _2480;
                                float _3258 = _3123.z - _2481;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3124 * _3124));
                                float _4349 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3274 = sqrt(_3259) * _3139.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_721, _724, _727))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_2481, _3166.z, fma(_2480, _3166.y, _3166.x * _2479)) + _3166.w) / _3228;
                                float _3288 = (fma(_2481, _3182.z, fma(_2480, _3182.y, _3182.x * _2479)) + _3182.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4365 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _796;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2765;
                                float _3318 = _3264 - _2766;
                                float _3319 = _3265 - _2767;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4376 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3331 = dot(vec3(_721, _724, _727), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4387 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_721, _724, _727), vec3(_3263, _3264, _3265))) + _3340;
                                float _4398 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4409 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3368 * _3151.x;
                                frontier_phi_73_pred_1 = _3368 * _3151.y;
                                frontier_phi_73_pred_2 = _3294 * _3139.z;
                                frontier_phi_73_pred_3 = _3294 * _3139.y;
                                frontier_phi_73_pred_4 = _3294 * _3139.x;
                                frontier_phi_73_pred_5 = _3368 * _3151.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3372 = frontier_phi_73_pred;
                            _3373 = frontier_phi_73_pred_1;
                            _3377 = frontier_phi_73_pred_2;
                            _3376 = frontier_phi_73_pred_3;
                            _3375 = frontier_phi_73_pred_4;
                            _3374 = frontier_phi_73_pred_5;
                            _3081 = _3375 + _3094;
                            _3082 = _3376 + _3095;
                            _3083 = _3377 + _3096;
                            _3078 = _3372 + _3091;
                            _3079 = _3373 + _3092;
                            _3080 = _3374 + _3093;
                            if (_3098 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3098;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3081;
                        frontier_phi_67_pred_1 = _3082;
                        frontier_phi_67_pred_2 = _3083;
                        frontier_phi_67_pred_3 = _3080;
                        frontier_phi_67_pred_4 = _3079;
                        frontier_phi_67_pred_5 = _3078;
                    }
                    _2746 = frontier_phi_67_pred;
                    _2748 = frontier_phi_67_pred_1;
                    _2750 = frontier_phi_67_pred_2;
                    _2744 = frontier_phi_67_pred_3;
                    _2742 = frontier_phi_67_pred_4;
                    _2740 = frontier_phi_67_pred_5;
                    uint _2885 = _2884 + 1u;
                    if (_2885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2878 = _2740;
                        _2879 = _2742;
                        _2880 = _2744;
                        _2881 = _2746;
                        _2882 = _2748;
                        _2883 = _2750;
                        _2884 = _2885;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2748;
                frontier_phi_55_56_ladder_1 = _2750;
                frontier_phi_55_56_ladder_2 = _2746;
                frontier_phi_55_56_ladder_3 = _2744;
                frontier_phi_55_56_ladder_4 = _2742;
                frontier_phi_55_56_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_55_56_ladder = _2634;
                frontier_phi_55_56_ladder_1 = _2636;
                frontier_phi_55_56_ladder_2 = _2632;
                frontier_phi_55_56_ladder_3 = _2630;
                frontier_phi_55_56_ladder_4 = _2628;
                frontier_phi_55_56_ladder_5 = _2626;
            }
            _2739 = frontier_phi_55_56_ladder_5;
            _2741 = frontier_phi_55_56_ladder_4;
            _2743 = frontier_phi_55_56_ladder_3;
            _2745 = frontier_phi_55_56_ladder_2;
            _2747 = frontier_phi_55_56_ladder;
            _2749 = frontier_phi_55_56_ladder_1;
        }
        float _2754 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2538 = (_2754 * _2745) + _1971;
        _2540 = (_2754 * _2747) + _1973;
        _2542 = (_2754 * _2749) + _1975;
        _2544 = ((_2739 * _764) * _2754) + _2319;
        _2546 = ((_2741 * _766) * _2754) + _2321;
        _2548 = ((_2743 * _767) * _2754) + _2323;
    }
    else
    {
        _2538 = _1971;
        _2540 = _1973;
        _2542 = _1975;
        _2544 = _2319;
        _2546 = _2321;
        _2548 = _2323;
    }
    float _4425 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4436 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4447 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    uint _2568 = _236 + 6u;
    float _2576 = _702 / cbSceneParam._m0[86u].x;
    float _2577 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2591 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2593 = _2591.x;
    float _2594 = _2591.y;
    float _2595 = _2591.z;
    float _2596 = _2591.w;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2651 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2652 = _2651 / _636;
        float _2663 = _2652 * _687;
        float _2664 = _688 * _2652;
        float _2665 = (-0.0) - _2664;
        float _2667 = _2652 * _689;
        float _2669 = (cbSceneParam._m0[77u].w * _2665) / _2651;
        float _2670 = _2669 + cbSceneParam._m0[79u].w;
        float _2671 = cbSceneParam._m0[79u].w - _2664;
        float _2677 = sqrt(((_2663 * _2663) + (_2664 * _2664)) + (_2667 * _2667));
        float _2680 = (1.0 - (cbSceneParam._m0[77u].w / _2651)) * _2677;
        float _2685 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2687 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2665 - _2669) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2670 > 0.0) ? exp2(_2685 * _2670) : (2.0 - exp2(_2687 * _2670))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2680;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : max(_2670, _2671));
            float _2802 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : min(_2670, _2671));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2840 = ((abs(_2677 / _2665) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2685 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2685 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2687 * _2811) - exp2(_2687 * _2812)) * _2800))) + (_2680 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2596);
        _2689 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2593;
        _2691 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2594;
        _2693 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2595;
        _2695 = _2851 * _2596;
    }
    else
    {
        _2689 = _2593;
        _2691 = _2594;
        _2693 = _2595;
        _2695 = _2596;
    }
    float _2707 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2708 = _2707 == 3.0;
    float _2709 = log2(_2695);
    float _2716 = exp2(_2709 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2538 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _780))) + ((_2544 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2717 = exp2(_2709 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2540 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _780))) + ((_2546 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2718 = exp2(_2709 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2542 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _780))) + ((_2548 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2727 = (_2707 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2727 * (_2708 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.y = _2727 * (_2708 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.z = _2727 * (_2708 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.w = cbInstanceData._m0[_2568].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2568].w;
}


