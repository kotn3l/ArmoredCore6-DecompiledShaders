#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1217;
float _3598;
float _3599;
float _3600;
float _3601;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _336 = (_327.x * 2.0) + (-1.0);
    float _338 = (_327.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3610 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))));
    float _348 = fma(_345, _229, fma(_338, _236, _336 * _222));
    float _351 = fma(_345, _230, fma(_338, _237, _336 * _223));
    float _354 = fma(_345, _231, fma(_338, _238, _336 * _224));
    float _358 = inversesqrt(dot(vec3(_348, _351, _354), vec3(_348, _351, _354)));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _396 = _394.x;
    float _397 = 1.0 - _396;
    float _404 = ((_396 - _397) * cbMtdParam._m0[24u].z) + _397;
    float _406 = (cbMtdParam._m0[19u].x + dot(vec4(_358 * _348, _358 * _351, _358 * _354, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_404 * cbMtdParam._m0[21u].z);
    float _3621 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _409 = (-0.0) - cbMtdParam._m0[24u].x;
    float _411 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    float _419 = _407 - ((_407 * TEXCOORD_8.x) * _412);
    float _420 = _407 - ((_407 * TEXCOORD_8.y) * _412);
    float _421 = _407 - ((_407 * TEXCOORD_8.z) * _412);
    float _428 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _432 = ((isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : min(_428, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _440 = (_432 - (((_404 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _432))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3652 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _445 = ((_419 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) * _441) + _286;
    float _446 = ((_420 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) * _441) + _287;
    float _447 = ((_421 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) * _441) + _288;
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _461 = _459.x;
    float _462 = 1.0 - _461;
    float _491 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_461 - _462) * cbMtdParam._m0[24u].w) + _462) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3663 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _500 = ((((cbMtdParam._m0[10u].x - _445) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _492) + _445;
    float _501 = ((((cbMtdParam._m0[10u].y - _446) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _492) + _446;
    float _502 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _447)) * _492) + _447;
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _517 = _515.x;
    float _520 = _517 - ((_517 * _419) * _441);
    float _522 = _520 - (_520 * _492);
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3674 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _554 = (((_536.z - _331) * _419) * _441) + _331;
    float _557 = ((cbMtdParam._m0[23u].y - _554) * _492) + _554;
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _582 = (_576.x * 2.0) + (-1.0);
    float _583 = (_576.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3685 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _604 = (((cbMtdParam._m0[21u].x * _336) + ((_543 - _336) * _419)) * _441) + _336;
    float _605 = (((cbMtdParam._m0[21u].x * _338) + ((_544 - _338) * _420)) * _441) + _338;
    float _606 = (((sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) - _345) * _421) * _441) + _345;
    float _617 = (((_582 - _604) + (_604 * cbMtdParam._m0[22u].z)) * _492) + _604;
    float _618 = (((_583 - _605) + (_605 * cbMtdParam._m0[22u].z)) * _492) + _605;
    float _619 = ((sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) - _606) * _492) + _606;
    float _621 = cbMtdParam._m0[22u].x + _327.w;
    float _624 = fma(_619, _229, fma(_618, _236, _617 * _222));
    float _627 = fma(_619, _230, fma(_618, _237, _617 * _223));
    float _630 = fma(_619, _231, fma(_618, _238, _617 * _224));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3696 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _638 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3718 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3729 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3740 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3751 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _643 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _707 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _697);
    float _708 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _697);
    float _709 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _697);
    float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
    float _714 = _707 * _713;
    float _715 = _708 * _713;
    float _716 = _709 * _713;
    vec4 _721 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _723 = _721.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _898 = sqrt(((_707 * _707) + (_708 * _708)) + (_709 * _709));
        float _904 = (cbMatDynParam._m0[5u].x * _898) + cbMatDynParam._m0[5u].y;
        float _3762 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _909 = (cbMatDynParam._m0[5u].z * _898) + cbMatDynParam._m0[5u].w;
        float _3773 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) - _905)) + _905) < ((_723 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _759 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _762 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _775 = _241 + 9u;
    uint _776 = _775 + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3784 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _788 = 1.0 - _643;
    float _789 = _785 * _788;
    float _790 = _786 * _788;
    float _791 = _787 * _788;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _643;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _643;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _643;
    float _799 = _796 + 0.039999999105930328369140625;
    float _801 = _797 + 0.039999999105930328369140625;
    float _802 = _798 + 0.039999999105930328369140625;
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _815 = ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * TEXCOORD_5.w) * _811.x;
    float _816 = dot(vec3(_635, _636, _637), vec3(_714, _715, _716));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _635) - _714;
    float _824 = (_819 * _636) - _715;
    float _825 = (_819 * _637) - _716;
    float _829 = abs(dot(vec3(_714, _715, _716), vec3(_635, _636, _637)));
    float _3817 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_638);
    float _844 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _850 = (1.0 - _844) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _851 = _844 * _831;
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_887, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879));
        float _945 = fma(_887, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879));
        float _949 = fma(_887, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879));
        float _974 = _879 + _635;
        float _975 = _883 + _636;
        float _976 = _887 + _637;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _941;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _945;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _949;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_635, _636, _637), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3865 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_635, _636, _637), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3898 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_635, _636, _637), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3931 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_887, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879));
        float _1263 = fma(_887, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879));
        float _1267 = fma(_887, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879));
        float _1290 = _879 + _635;
        float _1291 = _883 + _636;
        float _1292 = _887 + _637;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_635, _636, _637), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3994 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_635, _636, _637), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4027 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_635, _636, _637), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4060 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1217;
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = _1217;
        _1538 = _1217;
        _1539 = _1217;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1229)) + _1229;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1230)) + _1230;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1231)) + _1231;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _823 * 0.5;
    float _1597 = _824 * 0.5;
    float _1598 = _825 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _638);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_887, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_887, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_887, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1726 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1729 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1757 = frontier_phi_17_15_ladder;
        }
        float _1960;
        if (_1726 > 0.0)
        {
            _1960 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1960 = frontier_phi_26_22_ladder;
        }
        float _2214;
        if (_1729 > 0.0)
        {
            _2214 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2214 = frontier_phi_38_33_ladder;
        }
        float _2216 = isnan(_1960) ? _1757 : (isnan(_1757) ? _1960 : min(_1757, _1960));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1723) + _1712;
        float _2222 = (_2217 * _1726) + _1716;
        float _2223 = (_2217 * _1729) + _1720;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2224;
        float _2228 = _2224 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 > _2228) || ((_2222 < _2226) || ((_2221 < _2226) || (_2221 > _2228))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2223, cbModelParam._m0[9u].z, fma(_2222, cbModelParam._m0[9u].y, _2221 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2223, cbModelParam._m0[10u].z, fma(_2222, cbModelParam._m0[10u].y, _2221 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2223, cbModelParam._m0[11u].z, fma(_2222, cbModelParam._m0[11u].y, _2221 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_16_38_ladder = _2351.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2351.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2351.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_16_38_ladder_2;
        _1747 = frontier_phi_16_38_ladder_1;
        _1749 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1665);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _638);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_887, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_887, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_887, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1821 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1824 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1965;
        if (_1818 > 0.0)
        {
            _1965 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1965 = frontier_phi_28_24_ladder;
        }
        float _2241;
        if (_1821 > 0.0)
        {
            _2241 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2241 = frontier_phi_40_35_ladder;
        }
        float _2454;
        if (_1824 > 0.0)
        {
            _2454 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2454 = frontier_phi_49_46_ladder;
        }
        float _2456 = isnan(_2241) ? _1965 : (isnan(_1965) ? _2241 : min(_1965, _2241));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1818) + _1807;
        float _2462 = (_2457 * _1821) + _1811;
        float _2463 = (_2457 * _1824) + _1815;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2463, cbModelParam._m0[17u].z, fma(_2462, cbModelParam._m0[17u].y, _2461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2463, cbModelParam._m0[18u].z, fma(_2462, cbModelParam._m0[18u].y, _2461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2463, cbModelParam._m0[19u].z, fma(_2462, cbModelParam._m0[19u].y, _2461 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_25_49_ladder = _2662.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2662.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2662.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_25_49_ladder_2;
        _1845 = frontier_phi_25_49_ladder_1;
        _1847 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1754);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1860 = (((_850 * _799) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1862 = (((_850 * _801) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1864 = (((_850 * _802) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1847 - _1749)) + _1749);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    uvec4 _1883 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1885 = _1883.x * 14u;
    uint _1886 = _1885 + 13u;
    float _1893 = _815 + (-1.0);
    float _1898 = (cbLight._m0[_1886].x * _1893) + 1.0;
    float _1899 = (cbLight._m0[_1886].y * _1893) + 1.0;
    float _1900 = (cbLight._m0[_1886].z * _1893) + 1.0;
    float _1901 = (cbLight._m0[_1886].w * _1893) + 1.0;
    uint _1902 = _1885 + 5u;
    float _1908 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1912 = _1885 + 4u;
    float _1919 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
    uint _1923 = _1885 | 1u;
    float _1934 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_635, _636, _637));
    float _1937 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_635, _636, _637));
    float _4196 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _4207 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1942 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _1944 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _1951 = ((cbLight._m0[_1902].x * _1908) * _1944) + ((cbLight._m0[_1912].x * _1919) * _1942);
    float _1952 = ((_1908 * cbLight._m0[_1902].y) * _1944) + ((_1919 * cbLight._m0[_1912].y) * _1942);
    float _1953 = ((_1908 * cbLight._m0[_1902].z) * _1944) + ((_1919 * cbLight._m0[_1912].z) * _1942);
    uvec4 _1957 = floatBitsToUint(cbLight._m0[_1885 + 12u]);
    bool _1959 = _1957.x == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1959)
    {
        _1970 = _1951;
        _1972 = _1952;
        _1974 = _1953;
    }
    else
    {
        uint _1978 = _1885 + 6u;
        float _1994 = (dot(vec3(cbLight._m0[_1885 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _1995 = _1994 * _1994;
        float _4218 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1997 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _1970 = (((cbLight._m0[_1978].x * 0.3183098733425140380859375) * _1996) * _1997) + _1951;
        _1972 = (((cbLight._m0[_1978].y * 0.3183098733425140380859375) * _1996) * _1997) + _1952;
        _1974 = (((cbLight._m0[_1978].z * 0.3183098733425140380859375) * _1996) * _1997) + _1953;
    }
    bool _1977 = _1957.y == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1977)
    {
        _2015 = _1970;
        _2017 = _1972;
        _2019 = _1974;
    }
    else
    {
        uint _2185 = _1885 + 7u;
        float _2201 = (dot(vec3(cbLight._m0[_1885 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4234 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2204 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2015 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _1970;
        _2017 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _1972;
        _2019 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _1974;
    }
    uint _2022 = _1885 + 8u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _638) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1885].x + _714;
    float _2038 = cbLight._m0[_1885].y + _715;
    float _2039 = cbLight._m0[_1885].z + _716;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1885].xyz));
    float _4250 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2051 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2052 = dot(vec3(_635, _636, _637), vec3(_2044, _2045, _2046));
    float _4272 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2044, _2045, _2046));
    float _4283 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2036 * _2036;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
    float _2073 = 0.959999978542327880859375 - _796;
    float _2075 = 0.959999978542327880859375 - _797;
    float _2076 = 0.959999978542327880859375 - _798;
    float _2083 = 1.0 - _2036;
    float _2094 = (0.5 / (((_2051 * ((_2050 * _2083) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2083) + _2036) * _2050))) * _2050;
    float _4294 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    uint _2107 = _1885 + 9u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _638) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1923].x + _714;
    float _2121 = cbLight._m0[_1923].y + _715;
    float _2122 = cbLight._m0[_1923].z + _716;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_1923].xyz));
    float _4305 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2134 = dot(vec3(_635, _636, _637), vec3(_2127, _2128, _2129));
    float _4316 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2127, _2128, _2129));
    float _4327 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2119 * _2119;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2153 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
    float _2160 = 1.0 - _2119;
    float _2170 = (0.5 / (((_2051 * ((_2133 * _2160) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2160) + _2119) * _2133))) * _2133;
    float _4338 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    float _2182 = (((((_2153 * _2073) + _799) * cbLight._m0[_2107].x) * _2172) * _1908) + (((((_2072 * _2073) + _799) * cbLight._m0[_2022].x) * _2096) * _1919);
    float _2183 = (((((_2153 * _2075) + _801) * cbLight._m0[_2107].y) * _2172) * _1908) + (((((_2072 * _2075) + _801) * cbLight._m0[_2022].y) * _2096) * _1919);
    float _2184 = (((((_2153 * _2076) + _802) * cbLight._m0[_2107].z) * _2172) * _1908) + (((((_2072 * _2076) + _802) * cbLight._m0[_2022].z) * _2096) * _1919);
    float _2246;
    float _2248;
    float _2250;
    if (_1959)
    {
        _2246 = _2182;
        _2248 = _2183;
        _2250 = _2184;
    }
    else
    {
        uint _2252 = _1885 + 2u;
        uint _2256 = _1885 + 10u;
        float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _638) * 0.949999988079071044921875);
        float _2271 = _2270 * _2270;
        float _2272 = cbLight._m0[_2252].x + _714;
        float _2273 = cbLight._m0[_2252].y + _715;
        float _2274 = cbLight._m0[_2252].z + _716;
        float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
        float _2279 = _2278 * _2272;
        float _2280 = _2278 * _2273;
        float _2281 = _2278 * _2274;
        float _2282 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2252].xyz));
        float _4349 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2286 = dot(vec3(_635, _636, _637), vec3(_2279, _2280, _2281));
        float _4360 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2290 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2279, _2280, _2281));
        float _4371 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2294 = _2271 * _2271;
        float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
        float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0);
        float _2312 = 1.0 - _2271;
        float _2322 = (0.5 / (((_2051 * ((_2285 * _2312) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2312) + _2271) * _2285))) * _2285;
        float _4382 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2246 = (((((_2305 * _2073) + _799) * cbLight._m0[_2256].x) * _2324) * _2325) + _2182;
        _2248 = (((((_2305 * _2075) + _801) * cbLight._m0[_2256].y) * _2324) * _2325) + _2183;
        _2250 = (((((_2305 * _2076) + _802) * cbLight._m0[_2256].z) * _2324) * _2325) + _2184;
    }
    float _2360;
    float _2362;
    float _2364;
    if (_1977)
    {
        _2360 = _2246;
        _2362 = _2248;
        _2364 = _2250;
    }
    else
    {
        uint _2371 = _1885 + 3u;
        uint _2375 = _1885 + 11u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _638) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _714;
        float _2392 = cbLight._m0[_2371].y + _715;
        float _2393 = cbLight._m0[_2371].z + _716;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2371].xyz));
        float _4398 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2405 = dot(vec3(_635, _636, _637), vec3(_2398, _2399, _2400));
        float _4409 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4420 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2051 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2431) + _2390) * _2404))) * _2404;
        float _4431 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2360 = (((((_2424 * _2073) + _799) * cbLight._m0[_2375].x) * _2443) * _2444) + _2246;
        _2362 = (((((_2424 * _2075) + _801) * cbLight._m0[_2375].y) * _2443) * _2444) + _2248;
        _2364 = (((((_2424 * _2076) + _802) * cbLight._m0[_2375].z) * _2443) * _2444) + _2250;
    }
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_1883.y == 0u)
    {
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2519;
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2519;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2519;
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.x;
        uint _2546 = uint((float(_2534.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2535))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2535)));
        float _2556 = (log2(_2522 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2557 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        uint _2560 = uint(isnan(14.0) ? _2557 : (isnan(_2557) ? 14.0 : min(_2557, 14.0)));
        uvec4 _2565 = texelFetch(g_lightClusterGridBuffer, int(((_2560 << 2u) + (_2546 << 6u)) >> 2u));
        uint _2566 = _2565.x;
        uint _2567 = _2534.z;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((((1u << ((_2567 >> 4u) & 15u)) + 4294967295u) & _2566) == 0u) || ((_2567 & 240u) == 0u))
        {
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
        }
        else
        {
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            uint _2825 = 0u;
            uint _2834;
            bool _2835;
            for (;;)
            {
                _2834 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                _2835 = _2834 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2835)
                {
                    frontier_phi_66_pred = _2819;
                    frontier_phi_66_pred_1 = _2824;
                    frontier_phi_66_pred_2 = _2823;
                    frontier_phi_66_pred_3 = _2822;
                    frontier_phi_66_pred_4 = _2821;
                    frontier_phi_66_pred_5 = _2820;
                }
                else
                {
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    uint _2970;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2834;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    for (;;)
                    {
                        uint _2974 = uint(findLSB(_2970)) + (_2825 << 5u);
                        uint _2971 = (_2970 + 4294967295u) & _2970;
                        uint _2976 = _2974 * 48u;
                        vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2996 = (_2974 * 48u) + 4u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3015 = (_2974 * 48u) + 8u;
                        vec3 _3026 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x));
                        float _3030 = _2990.x - _2520;
                        float _3031 = _2990.y - _2521;
                        float _3032 = _2990.z - _2522;
                        float _3033 = dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032));
                        float _3036 = inversesqrt(_3033);
                        float _3037 = _3036 * _3030;
                        float _3038 = _3036 * _3031;
                        float _3039 = _3036 * _3032;
                        float _3040 = dot(vec3(_756, _759, _762), vec3(_3037, _3038, _3039));
                        float _3045 = 1.0 - (_3033 * _2990.w);
                        float _4457 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3047 = sqrt(_3033) * _3009.w;
                        float _3050 = 1.39999997615814208984375 / (_3047 + 1.39999997615814208984375);
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _3040) + _3051;
                        float _3057 = _3047 * _3047;
                        float _3061 = ((isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))) * _3046) / ((_3057 * 0.699999988079071044921875) + 1.0);
                        float _3065 = (-0.0) - _2520;
                        float _3066 = (-0.0) - _2521;
                        float _3067 = (-0.0) - _2522;
                        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                        float _3072 = _3071 * _3065;
                        float _3073 = _3071 * _3066;
                        float _3074 = _3071 * _3067;
                        float _3082 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                        float _3083 = 1.0 - _831;
                        float _3090 = sqrt(1.0 - ((1.0 - (_3083 * _3083)) * (1.0 - (_3082 * _3082))));
                        float _3091 = _3090 * _3090;
                        float _3092 = _3091 * _3091;
                        float _3093 = _3072 + _3037;
                        float _3094 = _3073 + _3038;
                        float _3095 = _3074 + _3039;
                        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                        float _3103 = dot(vec3(_756, _759, _762), vec3(_3072, _3073, _3074));
                        float _4473 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3106 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3107 = dot(vec3(_756, _759, _762), vec3(_3099 * _3093, _3099 * _3094, _3099 * _3095));
                        float _4484 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3110 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3114 = ((_3110 * _3110) * (_3092 + (-1.0))) + 1.0;
                        float _3115 = _3050 * _3091;
                        float _3116 = _3115 * _3115;
                        float _3119 = ((1.0 - _3116) * _3040) + _3116;
                        float _4495 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3120 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3121 = 1.0 - _3091;
                        float _3131 = (0.5 / (((_3120 * ((_3106 * _3121) + _3091)) + 9.9999999392252902907785028219223e-09) + (((_3120 * _3121) + _3091) * _3106))) * _3120;
                        float _4506 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3142 = (((_3092 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3114 * _3114) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125))) * _3046;
                        _2894 = (_3061 * _3009.x) + _2967;
                        _2895 = (_3061 * _3009.y) + _2968;
                        _2896 = (_3061 * _3009.z) + _2969;
                        _2891 = (_3142 * _3026.x) + _2964;
                        _2892 = (_3142 * _3026.y) + _2965;
                        _2893 = (_3142 * _3026.z) + _2966;
                        if (_2971 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2971;
                        }
                    }
                    frontier_phi_66_pred = _2891;
                    frontier_phi_66_pred_1 = _2896;
                    frontier_phi_66_pred_2 = _2895;
                    frontier_phi_66_pred_3 = _2894;
                    frontier_phi_66_pred_4 = _2893;
                    frontier_phi_66_pred_5 = _2892;
                }
                _2668 = frontier_phi_66_pred;
                _2678 = frontier_phi_66_pred_1;
                _2676 = frontier_phi_66_pred_2;
                _2674 = frontier_phi_66_pred_3;
                _2672 = frontier_phi_66_pred_4;
                _2670 = frontier_phi_66_pred_5;
                uint _2826 = _2825 + 1u;
                if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2819 = _2668;
                    _2820 = _2670;
                    _2821 = _2672;
                    _2822 = _2674;
                    _2823 = _2676;
                    _2824 = _2678;
                    _2825 = _2826;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
        }
        uvec4 _2681 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2682 = _2681.z;
        uint _2684 = (_2682 >> 8u) & 15u;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((4294967295u << _2684) & _2566) == 0u)
        {
            _2787 = _2667;
            _2789 = _2669;
            _2791 = _2671;
            _2793 = _2673;
            _2795 = _2675;
            _2797 = _2677;
        }
        else
        {
            float _2812 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
            float _2813 = _2812 * _2520;
            float _2814 = _2812 * _2521;
            float _2815 = _2812 * _2522;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2684 < ((_2682 >> 12u) & 15u))
            {
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2947 = _2667;
                float _2948 = _2669;
                float _2949 = _2671;
                float _2950 = _2673;
                float _2951 = _2675;
                float _2952 = _2677;
                uint _2953 = _2684;
                uint _2962;
                bool _2963;
                for (;;)
                {
                    _2962 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                    _2963 = _2962 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2963)
                    {
                        frontier_phi_77_pred = _2952;
                        frontier_phi_77_pred_1 = _2951;
                        frontier_phi_77_pred_2 = _2950;
                        frontier_phi_77_pred_3 = _2949;
                        frontier_phi_77_pred_4 = _2948;
                        frontier_phi_77_pred_5 = _2947;
                    }
                    else
                    {
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3169 = _2947;
                        float _3170 = _2948;
                        float _3171 = _2949;
                        float _3172 = _2950;
                        float _3173 = _2951;
                        float _3174 = _2952;
                        uint _3175 = _2962;
                        uint _3176;
                        vec4 _3201;
                        float _3202;
                        vec4 _3217;
                        vec3 _3229;
                        vec4 _3245;
                        vec4 _3261;
                        float _3307;
                        bool _3308;
                        for (;;)
                        {
                            uint _3186 = ((_2953 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3175));
                            _3176 = (_3175 + 4294967295u) & _3175;
                            uint _3188 = _3186 * 40u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3202 = _3201.w;
                            uint _3204 = (_3186 * 40u) + 4u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3186 * 40u) + 8u;
                            _3229 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x));
                            uint _3232 = (_3186 * 40u) + 16u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3248 = (_3186 * 40u) + 20u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3186 * 40u) + 24u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3282 = (_3186 * 40u) + 28u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3307 = fma(_2522, _3295.z, fma(_2521, _3295.y, _3295.x * _2520)) + _3295.w;
                            _3308 = !((fma(_2522, _3276.z, fma(_2521, _3276.y, _3276.x * _2520)) + _3276.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3308)
                            {
                                float _3335 = _3201.x - _2520;
                                float _3336 = _3201.y - _2521;
                                float _3337 = _3201.z - _2522;
                                float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                                float _3341 = inversesqrt(_3338);
                                float _3342 = _3341 * _3335;
                                float _3343 = _3341 * _3336;
                                float _3344 = _3341 * _3337;
                                float _3348 = 1.0 - (_3338 / (_3202 * _3202));
                                float _4517 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3353 = sqrt(_3338) * _3217.w;
                                float _3355 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                                float _3356 = _3355 * _3355;
                                float _3359 = ((1.0 - _3356) * dot(vec3(_3342, _3343, _3344), vec3(_756, _759, _762))) + _3356;
                                float _3362 = _3353 * _3353;
                                float _3366 = (fma(_2522, _3245.z, fma(_2521, _3245.y, _3245.x * _2520)) + _3245.w) / _3307;
                                float _3367 = (fma(_2522, _3261.z, fma(_2521, _3261.y, _3261.x * _2520)) + _3261.w) / _3307;
                                float _3371 = 1.0 - dot(vec2(_3366, _3367), vec2(_3366, _3367));
                                float _4533 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3373 = _3372 * (((isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))) * _3349) / ((_3362 * 0.699999988079071044921875) + 1.0));
                                float _3385 = exp2(log2(1.0 / ((_3362 * 3.5) + 5.0)) * 0.25);
                                float _3386 = 1.0 - _831;
                                float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                                float _3394 = _3393 * _3393;
                                float _3395 = _3394 * _3394;
                                float _3396 = _3342 - _2813;
                                float _3397 = _3343 - _2814;
                                float _3398 = _3344 - _2815;
                                float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                                float _3406 = dot(vec3(_756, _759, _762), vec3((-0.0) - _2813, (-0.0) - _2814, (-0.0) - _2815));
                                float _4544 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3410 = dot(vec3(_756, _759, _762), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                                float _4555 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                                float _3418 = _3355 * _3394;
                                float _3419 = _3418 * _3418;
                                float _3425 = ((1.0 - _3419) * dot(vec3(_756, _759, _762), vec3(_3342, _3343, _3344))) + _3419;
                                float _4566 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3427 = 1.0 - _3394;
                                float _3437 = (0.5 / (((_3426 * ((_3409 * _3427) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3394) * _3409))) * _3426;
                                float _4577 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3447 = (_3372 * _3349) * (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3417 * _3417) * ((_3362 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3373 * _3217.y;
                                frontier_phi_83_pred_1 = _3373 * _3217.x;
                                frontier_phi_83_pred_2 = _3447 * _3229.z;
                                frontier_phi_83_pred_3 = _3447 * _3229.y;
                                frontier_phi_83_pred_4 = _3447 * _3229.x;
                                frontier_phi_83_pred_5 = _3373 * _3217.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3455 = frontier_phi_83_pred;
                            _3454 = frontier_phi_83_pred_1;
                            _3453 = frontier_phi_83_pred_2;
                            _3452 = frontier_phi_83_pred_3;
                            _3451 = frontier_phi_83_pred_4;
                            _3456 = frontier_phi_83_pred_5;
                            _3159 = _3454 + _3172;
                            _3160 = _3455 + _3173;
                            _3161 = _3456 + _3174;
                            _3156 = _3451 + _3169;
                            _3157 = _3452 + _3170;
                            _3158 = _3453 + _3171;
                            if (_3176 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3176;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3161;
                        frontier_phi_77_pred_1 = _3160;
                        frontier_phi_77_pred_2 = _3159;
                        frontier_phi_77_pred_3 = _3158;
                        frontier_phi_77_pred_4 = _3157;
                        frontier_phi_77_pred_5 = _3156;
                    }
                    _2798 = frontier_phi_77_pred;
                    _2796 = frontier_phi_77_pred_1;
                    _2794 = frontier_phi_77_pred_2;
                    _2792 = frontier_phi_77_pred_3;
                    _2790 = frontier_phi_77_pred_4;
                    _2788 = frontier_phi_77_pred_5;
                    uint _2954 = _2953 + 1u;
                    if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2947 = _2788;
                        _2948 = _2790;
                        _2949 = _2792;
                        _2950 = _2794;
                        _2951 = _2796;
                        _2952 = _2798;
                        _2953 = _2954;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2792;
                frontier_phi_58_59_ladder_1 = _2798;
                frontier_phi_58_59_ladder_2 = _2796;
                frontier_phi_58_59_ladder_3 = _2794;
                frontier_phi_58_59_ladder_4 = _2790;
                frontier_phi_58_59_ladder_5 = _2788;
            }
            else
            {
                frontier_phi_58_59_ladder = _2671;
                frontier_phi_58_59_ladder_1 = _2677;
                frontier_phi_58_59_ladder_2 = _2675;
                frontier_phi_58_59_ladder_3 = _2673;
                frontier_phi_58_59_ladder_4 = _2669;
                frontier_phi_58_59_ladder_5 = _2667;
            }
            _2787 = frontier_phi_58_59_ladder_5;
            _2789 = frontier_phi_58_59_ladder_4;
            _2791 = frontier_phi_58_59_ladder;
            _2793 = frontier_phi_58_59_ladder_3;
            _2795 = frontier_phi_58_59_ladder_2;
            _2797 = frontier_phi_58_59_ladder_1;
        }
        float _2802 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2579 = (_2802 * _2793) + _2015;
        _2581 = (_2802 * _2795) + _2017;
        _2583 = (_2802 * _2797) + _2019;
        _2585 = ((_2787 * _799) * _2802) + _2360;
        _2587 = ((_2789 * _801) * _2802) + _2362;
        _2589 = ((_2791 * _802) * _2802) + _2364;
    }
    else
    {
        _2579 = _2015;
        _2581 = _2017;
        _2583 = _2019;
        _2585 = _2360;
        _2587 = _2362;
        _2589 = _2364;
    }
    float _4593 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4604 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4615 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _2606 = ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2579 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _815))) + ((_2585 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1654)) * cbPerFrame._m0[3u].x);
    float _2607 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2581 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _815))) + ((_2587 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1654)) * cbPerFrame._m0[3u].x);
    float _2608 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2583 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _815))) + ((_2589 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1654)) * cbPerFrame._m0[3u].x);
    uint _2609 = _241 + 6u;
    float _2617 = _735 / cbSceneParam._m0[86u].x;
    float _2618 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2632 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2634 = _2632.x;
    float _2635 = _2632.y;
    float _2636 = _2632.z;
    float _2637 = _2632.w;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2692 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2693 = _2692 / _657;
        float _2704 = _2693 * _707;
        float _2705 = _708 * _2693;
        float _2706 = (-0.0) - _2705;
        float _2707 = _2693 * _709;
        float _2709 = (cbSceneParam._m0[77u].w * _2706) / _2692;
        float _2710 = _2709 + cbSceneParam._m0[79u].w;
        float _2711 = cbSceneParam._m0[79u].w - _2705;
        float _2717 = sqrt(((_2704 * _2704) + (_2705 * _2705)) + (_2707 * _2707));
        float _2720 = (1.0 - (cbSceneParam._m0[77u].w / _2692)) * _2717;
        float _2725 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2727 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2904;
        if (abs((_2706 - _2709) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2904 = ((((_2710 > 0.0) ? exp2(_2725 * _2710) : (2.0 - exp2(_2727 * _2710))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2720;
        }
        else
        {
            float _2848 = 1.0 / cbSceneParam._m0[80u].x;
            float _2849 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : max(_2710, _2711));
            float _2850 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : min(_2710, _2711));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            _2904 = ((abs(_2717 / _2706) * cbSceneParam._m0[80u].y) * ((((_2859 - _2860) * 2.0) - ((exp2(_2725 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)))) - exp2(_2725 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))))) * _2848)) - ((exp2(_2727 * _2859) - exp2(_2727 * _2860)) * _2848))) + (_2720 * cbSceneParam._m0[80u].z);
        }
        vec4 _2906 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, 1.0), 0.0);
        float _2915 = exp2((_2904 * (-1.44269502162933349609375)) * (1.0 - _2906.w));
        float _2916 = log2(_2915);
        float _2932 = log2(_2637);
        _2729 = (exp2(_2932 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].x)) * _2906.x) / cbSceneParam._m0[78u].x)) + _2634;
        _2731 = (exp2(_2932 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].y)) * _2906.y) / cbSceneParam._m0[78u].y)) + _2635;
        _2733 = (exp2(_2932 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2916 * cbSceneParam._m0[78u].z)) * _2906.z) / cbSceneParam._m0[78u].z)) + _2636;
        _2735 = _2915 * _2637;
    }
    else
    {
        _2729 = _2634;
        _2731 = _2635;
        _2733 = _2636;
        _2735 = _2637;
    }
    bool _2942;
    vec4 _2745;
    vec4 _2767;
    float _2769;
    float _2773;
    float _2774;
    float _2775;
    float _2776;
    bool _2786;
    for (;;)
    {
        _2745 = cbMatDynParam._m0[0u];
        float _2747 = roundEven(_2745.y);
        bool _2748 = _2747 == 3.0;
        float _2749 = log2(_2735);
        float _2756 = exp2(_2749 * cbSceneParam._m0[78u].x) * _2606;
        float _2757 = exp2(_2749 * cbSceneParam._m0[78u].y) * _2607;
        float _2758 = exp2(_2749 * cbSceneParam._m0[78u].z) * _2608;
        float _2765 = _723 + (-0.5);
        _2767 = cbMtdParam._m0[1u];
        _2769 = _2767.y * _2765;
        float _2772 = (_2747 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2773 = _2772 * (_2748 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2729)));
        _2774 = _2772 * (_2748 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2731)));
        _2775 = _2772 * (_2748 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2733)));
        _2776 = _2765 * 0.999000012874603271484375;
        _2786 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2786)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2776) < 0.5)
            {
                _2942 = true;
                break;
            }
        }
        uint _2883 = _775 + uint(_2745.w);
        if ((cbInstanceData._m0[_2883].w < 1.0) && ((cbInstanceData._m0[_2883].w + _2776) < 0.5))
        {
            _2942 = true;
            break;
        }
        if ((_2769 + 1.0) < _2767.x)
        {
            _2942 = true;
            break;
        }
        _2942 = false;
        break;
    }
    float _3147;
    if (_2942)
    {
        discard_state = true;
        _3147 = 0.0;
    }
    else
    {
        _3147 = cbInstanceData._m0[_2609].w;
    }
    SV_Target.x = _2773;
    SV_Target.y = _2774;
    SV_Target.z = _2775;
    SV_Target.w = _3147;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2609].w;
    discard_exit();
}


