#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1293;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3904 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3915 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _501 = _499.x;
    float _502 = 1.0 - _501;
    float _508 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _511 = ((isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : min(_508, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _520 = (_511 - ((((((_501 - _502) * cbMtdParam._m0[24u].z) + _502) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _511))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3936 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _528 = (_521 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _529 = (_521 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _530 = (_521 * (cbMtdParam._m0[17u].z - _399)) + _399;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _544 = _542.x;
    float _545 = 1.0 - _544;
    float _572 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_544 - _545) * cbMtdParam._m0[24u].w) + _545) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3947 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _581 = ((((cbMtdParam._m0[10u].x - _528) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _573) + _528;
    float _582 = ((((cbMtdParam._m0[10u].y - _529) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _573) + _529;
    float _583 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _530)) * _573) + _530;
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _611 = _609.x;
    float _629 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _611) * _390) + _611;
    float _633 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _629) * cbMtdParam._m0[19u].z) + _629;
    float _635 = _633 - (_633 * _521);
    float _637 = _635 - (_635 * _573);
    float _641 = (cbMtdParam._m0[19u].w * (_474.z - _447)) + _447;
    vec4 _655 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _662 = (_655.x * 2.0) + (-1.0);
    float _663 = (_655.y * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3958 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _672 = (_521 * (_655.z - _641)) + _641;
    float _675 = ((cbMtdParam._m0[23u].y - _672) * _573) + _672;
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _700 = (_694.x * 2.0) + (-1.0);
    float _701 = (_694.y * 2.0) + (-1.0);
    float _702 = dot(vec2(_700, _701), vec2(_700, _701));
    float _3969 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _710 = (((_474.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _711 = (((_474.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _723 = (((_662 - _710) + (cbMtdParam._m0[21u].x * _710)) * _521) + _710;
    float _724 = (((_663 - _711) + (cbMtdParam._m0[21u].x * _711)) * _521) + _711;
    float _725 = (_521 * (sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) - _458)) + _458;
    float _736 = (((_700 - _723) + (_723 * cbMtdParam._m0[22u].z)) * _573) + _723;
    float _737 = (((_701 - _724) + (_724 * cbMtdParam._m0[22u].z)) * _573) + _724;
    float _738 = ((sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _725) * _573) + _725;
    float _740 = cbMtdParam._m0[22u].x + _474.w;
    float _743 = fma(_738, _240 * NORMAL.x, fma(_737, _247 * TANGENT.x, (_233 * _225) * _736));
    float _746 = fma(_738, _240 * NORMAL.y, fma(_737, _247 * TANGENT.y, (_233 * _226) * _736));
    float _749 = fma(_738, _240 * NORMAL.z, fma(_737, _247 * TANGENT.z, (_233 * _227) * _736));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _3980 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _757 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4002 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4013 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4024 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4035 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _762 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _826 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _816);
    float _827 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _816);
    float _828 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _816);
    float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
    float _833 = _826 * _832;
    float _834 = _827 * _832;
    float _835 = _828 * _832;
    float _841 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _842 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _860 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _863 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _866 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _880 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _886 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_880].x;
    float _887 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_880].y;
    float _888 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_880].z;
    float _4046 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _892 = 1.0 - _762;
    float _893 = _889 * _892;
    float _894 = _890 * _892;
    float _895 = _891 * _892;
    float _900 = (_889 + (-0.039999999105930328369140625)) * _762;
    float _901 = (_890 + (-0.039999999105930328369140625)) * _762;
    float _902 = (_891 + (-0.039999999105930328369140625)) * _762;
    float _903 = _900 + 0.039999999105930328369140625;
    float _905 = _901 + 0.039999999105930328369140625;
    float _906 = _902 + 0.039999999105930328369140625;
    vec4 _915 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _841, cbSceneParam._m0[86u].y * _842));
    float _919 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * TEXCOORD_5.w) * _915.x;
    float _920 = dot(vec3(_754, _755, _756), vec3(_833, _834, _835));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _754) - _833;
    float _928 = (_923 * _755) - _834;
    float _929 = (_923 * _756) - _835;
    float _933 = abs(dot(vec3(_833, _834, _835), vec3(_754, _755, _756)));
    float _4079 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_757);
    float _948 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _954 = (1.0 - _948) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _955 = _948 * _935;
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1292;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_991, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983));
        float _1021 = fma(_991, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983));
        float _1025 = fma(_991, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983));
        float _1050 = _983 + _754;
        float _1051 = _987 + _755;
        float _1052 = _991 + _756;
        float _1062 = fma(_1052, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050)) - _1017;
        float _1063 = fma(_1052, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050)) - _1021;
        float _1064 = fma(_1052, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050)) - _1025;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1120 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1086.x + (-0.5));
        float _1122 = _1120 * (_1086.y + (-0.5));
        float _1123 = _1120 * (_1086.z + (-0.5));
        float _1130 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1093.x + (-0.5));
        float _1132 = _1130 * (_1093.y + (-0.5));
        float _1133 = _1130 * (_1093.z + (-0.5));
        float _1140 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1100.x + (-0.5));
        float _1142 = _1140 * (_1100.y + (-0.5));
        float _1143 = _1140 * (_1100.z + (-0.5));
        float _1150 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1107.x + (-0.5));
        float _1152 = _1150 * (_1107.y + (-0.5));
        float _1153 = _1150 * (_1107.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1174 = (dot(vec3(_754, _755, _756), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1184 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _4127 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1186 + 1.0))) + _1191) * _1154;
        float _1201 = _1122 * 0.5;
        float _1202 = _1132 * 0.5;
        float _1203 = _1142 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_754, _755, _756), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4160 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1228 + 1.0))) + _1233) * _1155;
        float _1243 = _1123 * 0.5;
        float _1244 = _1133 * 0.5;
        float _1245 = _1143 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_754, _755, _756), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4193 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1270 + 1.0))) + _1275) * _1156;
        _1292 = _1123;
        _1294 = _1122;
        _1295 = _1121;
        _1296 = _1133;
        _1297 = _1132;
        _1298 = _1131;
        _1299 = _1143;
        _1300 = _1142;
        _1301 = _1141;
        _1302 = _1156;
        _1303 = _1155;
        _1304 = _1154;
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _1293;
        _1294 = _1293;
        _1295 = _1293;
        _1296 = _1293;
        _1297 = _1293;
        _1298 = _1293;
        _1299 = _1293;
        _1300 = _1293;
        _1301 = _1293;
        _1302 = _1293;
        _1303 = _1293;
        _1304 = _1293;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1332 = fma(_991, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983));
        float _1336 = fma(_991, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983));
        float _1340 = fma(_991, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983));
        float _1363 = _983 + _754;
        float _1364 = _987 + _755;
        float _1365 = _991 + _756;
        float _1375 = fma(_1365, cbModelParam._m0[30u].z, fma(_1364, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1363)) - _1332;
        float _1376 = fma(_1365, cbModelParam._m0[31u].z, fma(_1364, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1363)) - _1336;
        float _1377 = fma(_1365, cbModelParam._m0[32u].z, fma(_1364, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1363)) - _1340;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1394 = ((_1381 * _1375) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1332 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1381 * _1376) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1336 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1381 * _1377) / cbModelParam._m0[35u].z) + ((((((_1340 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        float _1431 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1398.x + (-0.5));
        float _1433 = _1431 * (_1398.y + (-0.5));
        float _1434 = _1431 * (_1398.z + (-0.5));
        float _1441 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1405.x + (-0.5));
        float _1443 = _1441 * (_1405.y + (-0.5));
        float _1444 = _1441 * (_1405.z + (-0.5));
        float _1451 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1412.x + (-0.5));
        float _1453 = _1451 * (_1412.y + (-0.5));
        float _1454 = _1451 * (_1412.z + (-0.5));
        float _1461 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1419.x + (-0.5));
        float _1463 = _1461 * (_1419.y + (-0.5));
        float _1464 = _1461 * (_1419.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_754, _755, _756), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4256 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1495 + 1.0))) + _1500) * _1465;
        float _1510 = _1433 * 0.5;
        float _1511 = _1443 * 0.5;
        float _1512 = _1453 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_754, _755, _756), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4289 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1537 + 1.0))) + _1542) * _1466;
        float _1552 = _1434 * 0.5;
        float _1553 = _1444 * 0.5;
        float _1554 = _1454 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_754, _755, _756), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4322 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1579 + 1.0))) + _1584) * _1467;
        _1601 = _1434;
        _1602 = _1433;
        _1603 = _1432;
        _1604 = _1444;
        _1605 = _1443;
        _1606 = _1442;
        _1607 = _1454;
        _1608 = _1453;
        _1609 = _1452;
        _1610 = _1467;
        _1611 = _1466;
        _1612 = _1465;
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
    }
    else
    {
        _1601 = _1293;
        _1602 = _1293;
        _1603 = _1293;
        _1604 = _1293;
        _1605 = _1293;
        _1606 = _1293;
        _1607 = _1293;
        _1608 = _1293;
        _1609 = _1293;
        _1610 = _1293;
        _1611 = _1293;
        _1612 = _1293;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1305)) + _1305;
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1306)) + _1306;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1307)) + _1307;
    float _1648 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1625));
    float _1669 = _927 * 0.5;
    float _1670 = _928 * 0.5;
    float _1671 = _929 * 0.5;
    float _1672 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1675 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1678 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1712;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1685 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1292, _1296, _1299, _1302));
        float _1689 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1693 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1700 = dot(vec4(cbModelParam._m0[39u]), vec4(_1669, _1670, _1671, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1723;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1714 = dot(vec4(cbModelParam._m0[40u]), vec4(_1669, _1670, _1671, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1727 = (_1723 * cbModelParam._m0[1u].x) + (_1712 * (1.0 - cbModelParam._m0[1u].x));
    float _1737 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1737 : min(cbModelParam._m0[25u].z, _1737));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_991, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_991, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_991, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1800 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1803 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1831 = frontier_phi_14_12_ladder;
        }
        float _2003;
        if (_1800 > 0.0)
        {
            _2003 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2003 = frontier_phi_23_19_ladder;
        }
        float _2298;
        if (_1803 > 0.0)
        {
            _2298 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2298 = frontier_phi_35_30_ladder;
        }
        float _2300 = isnan(_2003) ? _1831 : (isnan(_1831) ? _2003 : min(_1831, _2003));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1797) + _1786;
        float _2306 = (_2301 * _1800) + _1790;
        float _2307 = (_2301 * _1803) + _1794;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2308;
        float _2312 = _2308 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 > _2312) || ((_2306 < _2310) || ((_2305 < _2310) || (_2305 > _2312))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2307, cbModelParam._m0[9u].z, fma(_2306, cbModelParam._m0[9u].y, _2305 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2307, cbModelParam._m0[10u].z, fma(_2306, cbModelParam._m0[10u].y, _2305 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2307, cbModelParam._m0[11u].z, fma(_2306, cbModelParam._m0[11u].y, _2305 * cbModelParam._m0[11u].x))), _1738);
            frontier_phi_13_35_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_13_35_ladder_2;
        _1821 = frontier_phi_13_35_ladder_1;
        _1823 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1738);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_991, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_991, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_991, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1896 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1899 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2008;
        if (_1893 > 0.0)
        {
            _2008 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2008 = frontier_phi_25_21_ladder;
        }
        float _2325;
        if (_1896 > 0.0)
        {
            _2325 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2325 = frontier_phi_37_32_ladder;
        }
        float _2663;
        if (_1899 > 0.0)
        {
            _2663 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2663 = frontier_phi_47_44_ladder;
        }
        float _2665 = isnan(_2325) ? _2008 : (isnan(_2008) ? _2325 : min(_2008, _2325));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _1893) + _1882;
        float _2671 = (_2666 * _1896) + _1886;
        float _2672 = (_2666 * _1899) + _1890;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_22_47_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_22_47_ladder_2;
        _1920 = frontier_phi_22_47_ladder_1;
        _1922 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1828);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1935 = (((_954 * _903) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1918 - _1819)) + _1819);
    float _1937 = (((_954 * _905) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1920 - _1821)) + _1821);
    float _1939 = (((_954 * _906) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1937, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1937, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1937, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1995 = _1982 / _1994;
    float _1996 = _1986 / _1994;
    float _1997 = _1990 / _1994;
    float _2144;
    float _2145;
    float _2146;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2024 = ((uint(_1997 > cbSceneParam._m0[59u].y) + uint(_1997 > cbSceneParam._m0[59u].x)) + uint(_1997 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2025 = _2024 + 43u;
        uint _2033 = _2024 + 44u;
        uint _2041 = _2024 + 45u;
        uint _2049 = _2024 + 46u;
        float _2060 = fma(_1994, cbSceneParam._m0[_2025].w, fma(_1990, cbSceneParam._m0[_2025].z, fma(_1986, cbSceneParam._m0[_2025].y, _1982 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1994, cbSceneParam._m0[_2033].w, fma(_1990, cbSceneParam._m0[_2033].z, fma(_1986, cbSceneParam._m0[_2033].y, _1982 * cbSceneParam._m0[_2033].x)));
        float _2072 = fma(_1994, cbSceneParam._m0[_2049].w, fma(_1990, cbSceneParam._m0[_2049].z, fma(_1986, cbSceneParam._m0[_2049].y, _1982 * cbSceneParam._m0[_2049].x)));
        float _2077 = cbSceneParam._m0[33u].z * _2072;
        float _2079 = cbSceneParam._m0[33u].w * _2072;
        float _2082 = fma(_1994, cbSceneParam._m0[_2041].w, fma(_1990, cbSceneParam._m0[_2041].z, fma(_1986, cbSceneParam._m0[_2041].y, _1982 * cbSceneParam._m0[_2041].x))) / _2072;
        float _2130 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
        float _4448 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2137 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 + _2060) / _2072, (_2079 + _2064) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2060) / _2072, (_2064 - _2077) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2077) / _2072, (_2064 - _2079) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2079) / _2072, (_2077 + _2064) / _2072), _2082), 0.0)).x), vec4(0.25)));
        _2144 = 1.0 - (_2137 * cbSceneParam._m0[34u].x);
        _2145 = 1.0 - (_2137 * cbSceneParam._m0[34u].y);
        _2146 = 1.0 - (_2137 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2144 = 1.0;
        _2145 = 1.0;
        _2146 = 1.0;
    }
    float _2210;
    float _2212;
    float _2214;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2198 = fma(_1994, cbSceneParam._m0[63u].w, fma(_1990, cbSceneParam._m0[63u].z, fma(_1986, cbSceneParam._m0[63u].y, _1982 * cbSceneParam._m0[63u].x)));
        float _2199 = fma(_1994, cbSceneParam._m0[60u].w, fma(_1990, cbSceneParam._m0[60u].z, fma(_1986, cbSceneParam._m0[60u].y, _1982 * cbSceneParam._m0[60u].x))) / _2198;
        float _2200 = fma(_1994, cbSceneParam._m0[61u].w, fma(_1990, cbSceneParam._m0[61u].z, fma(_1986, cbSceneParam._m0[61u].y, _1982 * cbSceneParam._m0[61u].x))) / _2198;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2199 >= cbSceneParam._m0[64u].x) && (_2200 >= cbSceneParam._m0[64u].y)) && (_2199 <= cbSceneParam._m0[64u].z)) && (_2200 <= cbSceneParam._m0[64u].w))
        {
            float _2338 = fma(_1994, cbSceneParam._m0[62u].w, fma(_1990, cbSceneParam._m0[62u].z, fma(_1986, cbSceneParam._m0[62u].y, _1982 * cbSceneParam._m0[62u].x))) / _2198;
            float _2342 = isnan(cbSceneParam._m0[41u].w) ? _2338 : (isnan(_2338) ? cbSceneParam._m0[41u].w : max(_2338, cbSceneParam._m0[41u].w));
            float _2385 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
            float _4464 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
            float _2392 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2199, cbSceneParam._m0[33u].w + _2200), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2199, _2200 - cbSceneParam._m0[33u].z), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].z, _2200 - cbSceneParam._m0[33u].w), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2200), _2342), 0.0)).x), vec4(0.25)));
            float _2396 = 1.0 - (_2392 * cbSceneParam._m0[34u].x);
            float _2397 = 1.0 - (_2392 * cbSceneParam._m0[34u].y);
            float _2398 = 1.0 - (_2392 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
            frontier_phi_34_33_ladder_1 = isnan(_2397) ? _2145 : (isnan(_2145) ? _2397 : min(_2145, _2397));
            frontier_phi_34_33_ladder_2 = isnan(_2396) ? _2144 : (isnan(_2144) ? _2396 : min(_2144, _2396));
        }
        else
        {
            frontier_phi_34_33_ladder = _2146;
            frontier_phi_34_33_ladder_1 = _2145;
            frontier_phi_34_33_ladder_2 = _2144;
        }
        _2210 = frontier_phi_34_33_ladder_2;
        _2212 = frontier_phi_34_33_ladder_1;
        _2214 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2210 = _2144;
        _2212 = _2145;
        _2214 = _2146;
    }
    uvec4 _2219 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2221 = _2219.x * 14u;
    uint _2222 = _2221 + 13u;
    float _2229 = _919 + (-1.0);
    float _2234 = (cbLight._m0[_2222].x * _2229) + 1.0;
    float _2235 = (cbLight._m0[_2222].y * _2229) + 1.0;
    float _2236 = (cbLight._m0[_2222].z * _2229) + 1.0;
    float _2237 = (cbLight._m0[_2222].w * _2229) + 1.0;
    uint _2238 = _2221 + 5u;
    float _2244 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2248 = _2221 + 4u;
    float _2257 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2261 = _2221 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_754, _755, _756));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_754, _755, _756));
    float _4500 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4511 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2238].x * _2244) * _2282) + (((cbLight._m0[_2248].x * _2210) * _2257) * _2280);
    float _2290 = ((_2244 * cbLight._m0[_2238].y) * _2282) + (((cbLight._m0[_2248].y * _2212) * _2257) * _2280);
    float _2291 = ((_2244 * cbLight._m0[_2238].z) * _2282) + (((cbLight._m0[_2248].z * _2214) * _2257) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2221 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2297)
    {
        _2399 = _2289;
        _2401 = _2290;
        _2403 = _2291;
    }
    else
    {
        uint _2407 = _2221 + 6u;
        float _2423 = (dot(vec3(cbLight._m0[_2221 + 2u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4522 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2426 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2399 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2289;
        _2401 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2290;
        _2403 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2291;
    }
    bool _2406 = _2295.y == 0u;
    float _2461;
    float _2463;
    float _2465;
    if (_2406)
    {
        _2461 = _2399;
        _2463 = _2401;
        _2465 = _2403;
    }
    else
    {
        uint _2634 = _2221 + 7u;
        float _2650 = (dot(vec3(cbLight._m0[_2221 + 3u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2651 = _2650 * _2650;
        float _4538 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2652 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2653 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2461 = (((cbLight._m0[_2634].x * 0.3183098733425140380859375) * _2652) * _2653) + _2399;
        _2463 = (((cbLight._m0[_2634].y * 0.3183098733425140380859375) * _2652) * _2653) + _2401;
        _2465 = (((cbLight._m0[_2634].z * 0.3183098733425140380859375) * _2652) * _2653) + _2403;
    }
    uint _2468 = _2221 + 8u;
    float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _757) * 0.949999988079071044921875);
    float _2482 = _2481 * _2481;
    float _2483 = cbLight._m0[_2221].x + _833;
    float _2484 = cbLight._m0[_2221].y + _834;
    float _2485 = cbLight._m0[_2221].z + _835;
    float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
    float _2490 = _2489 * _2483;
    float _2491 = _2489 * _2484;
    float _2492 = _2489 * _2485;
    float _2493 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2221].xyz));
    float _4554 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2497 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2498 = dot(vec3(_754, _755, _756), vec3(_2490, _2491, _2492));
    float _4576 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2490, _2491, _2492));
    float _4587 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2482 * _2482;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2519 = 0.959999978542327880859375 - _900;
    float _2521 = 0.959999978542327880859375 - _901;
    float _2522 = 0.959999978542327880859375 - _902;
    float _2529 = 1.0 - _2482;
    float _2540 = (0.5 / (((_2497 * ((_2496 * _2529) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2529) + _2482) * _2496))) * _2496;
    float _4598 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2542 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    uint _2556 = _2221 + 9u;
    float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _757) * 0.949999988079071044921875);
    float _2568 = _2567 * _2567;
    float _2569 = cbLight._m0[_2261].x + _833;
    float _2570 = cbLight._m0[_2261].y + _834;
    float _2571 = cbLight._m0[_2261].z + _835;
    float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
    float _2576 = _2575 * _2569;
    float _2577 = _2575 * _2570;
    float _2578 = _2575 * _2571;
    float _2579 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2261].xyz));
    float _4609 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2583 = dot(vec3(_754, _755, _756), vec3(_2576, _2577, _2578));
    float _4620 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2576, _2577, _2578));
    float _4631 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2568 * _2568;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2609 = 1.0 - _2568;
    float _2619 = (0.5 / (((_2497 * ((_2582 * _2609) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2609) + _2568) * _2582))) * _2582;
    float _4642 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2621 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    float _2631 = (((((_2602 * _2519) + _903) * cbLight._m0[_2556].x) * _2621) * _2244) + ((((cbLight._m0[_2468].x * _2210) * ((_2518 * _2519) + _903)) * _2542) * _2257);
    float _2632 = (((((_2602 * _2521) + _905) * cbLight._m0[_2556].y) * _2621) * _2244) + ((((cbLight._m0[_2468].y * _2212) * ((_2518 * _2521) + _905)) * _2542) * _2257);
    float _2633 = (((((_2602 * _2522) + _906) * cbLight._m0[_2556].z) * _2621) * _2244) + ((((cbLight._m0[_2468].z * _2214) * ((_2518 * _2522) + _906)) * _2542) * _2257);
    float _2689;
    float _2691;
    float _2693;
    if (_2297)
    {
        _2689 = _2631;
        _2691 = _2632;
        _2693 = _2633;
    }
    else
    {
        uint _2695 = _2221 + 2u;
        uint _2699 = _2221 + 10u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _757) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _833;
        float _2716 = cbLight._m0[_2695].y + _834;
        float _2717 = cbLight._m0[_2695].z + _835;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2695].xyz));
        float _4653 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2729 = dot(vec3(_754, _755, _756), vec3(_2722, _2723, _2724));
        float _4664 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4675 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2748 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2755 = 1.0 - _2714;
        float _2765 = (0.5 / (((_2497 * ((_2728 * _2755) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2755) + _2714) * _2728))) * _2728;
        float _4686 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2767 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2768 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2689 = (((((_2748 * _2519) + _903) * cbLight._m0[_2699].x) * _2767) * _2768) + _2631;
        _2691 = (((((_2748 * _2521) + _905) * cbLight._m0[_2699].y) * _2767) * _2768) + _2632;
        _2693 = (((((_2748 * _2522) + _906) * cbLight._m0[_2699].z) * _2767) * _2768) + _2633;
    }
    float _2799;
    float _2801;
    float _2803;
    if (_2406)
    {
        _2799 = _2689;
        _2801 = _2691;
        _2803 = _2693;
    }
    else
    {
        uint _2810 = _2221 + 3u;
        uint _2814 = _2221 + 11u;
        float _2828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2810].w)) * _757) * 0.949999988079071044921875);
        float _2829 = _2828 * _2828;
        float _2830 = cbLight._m0[_2810].x + _833;
        float _2831 = cbLight._m0[_2810].y + _834;
        float _2832 = cbLight._m0[_2810].z + _835;
        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
        float _2837 = _2836 * _2830;
        float _2838 = _2836 * _2831;
        float _2839 = _2836 * _2832;
        float _2840 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2810].xyz));
        float _4702 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2844 = dot(vec3(_754, _755, _756), vec3(_2837, _2838, _2839));
        float _4713 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2848 = dot(vec3(cbLight._m0[_2810].xyz), vec3(_2837, _2838, _2839));
        float _4724 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2852 = _2829 * _2829;
        float _2856 = ((_2847 * _2847) * (_2852 + (-1.0))) + 1.0;
        float _2863 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2870 = 1.0 - _2829;
        float _2880 = (0.5 / (((_2497 * ((_2843 * _2870) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2497 * _2870) + _2829) * _2843))) * _2843;
        float _4735 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2882 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2852 / ((_2856 * _2856) * 3.141590118408203125));
        float _2883 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2799 = (((((_2863 * _2519) + _903) * cbLight._m0[_2814].x) * _2882) * _2883) + _2689;
        _2801 = (((((_2863 * _2521) + _905) * cbLight._m0[_2814].y) * _2882) * _2883) + _2691;
        _2803 = (((((_2863 * _2522) + _906) * cbLight._m0[_2814].z) * _2882) * _2883) + _2693;
    }
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    if (_2219.y == 0u)
    {
        uvec4 _2904 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2905 = _2904.x;
        uint _2916 = uint((float(_2904.y) * floor(float(uint(cbSceneParam._m0[85u].y * _842) / _2905))) + floor(float(uint(cbSceneParam._m0[85u].x * _841) / _2905)));
        float _2926 = (log2(_1997 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2927 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        uint _2930 = uint(isnan(14.0) ? _2927 : (isnan(_2927) ? 14.0 : min(_2927, 14.0)));
        uvec4 _2935 = texelFetch(g_lightClusterGridBuffer, int(((_2930 << 2u) + (_2916 << 6u)) >> 2u));
        uint _2936 = _2935.x;
        uint _2937 = _2904.z;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        if (((((1u << ((_2937 >> 4u) & 15u)) + 4294967295u) & _2936) == 0u) || ((_2937 & 240u) == 0u))
        {
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
        }
        else
        {
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            uint _3167 = 0u;
            uint _3176;
            bool _3177;
            for (;;)
            {
                _3176 = texelFetch(g_lightClassification, int((((_2930 << 5u) + (_2916 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                _3177 = _3176 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3177)
                {
                    frontier_phi_66_pred = _3166;
                    frontier_phi_66_pred_1 = _3165;
                    frontier_phi_66_pred_2 = _3164;
                    frontier_phi_66_pred_3 = _3163;
                    frontier_phi_66_pred_4 = _3162;
                    frontier_phi_66_pred_5 = _3161;
                }
                else
                {
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    uint _3291;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3176;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    for (;;)
                    {
                        uint _3295 = uint(findLSB(_3291)) + (_3167 << 5u);
                        uint _3292 = (_3291 + 4294967295u) & _3291;
                        uint _3297 = _3295 * 48u;
                        vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3317 = (_3295 * 48u) + 4u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3336 = (_3295 * 48u) + 8u;
                        vec3 _3347 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x));
                        float _3351 = _3311.x - _1995;
                        float _3352 = _3311.y - _1996;
                        float _3353 = _3311.z - _1997;
                        float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                        float _3357 = inversesqrt(_3354);
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3361 = dot(vec3(_860, _863, _866), vec3(_3358, _3359, _3360));
                        float _3366 = 1.0 - (_3354 * _3311.w);
                        float _4761 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3368 = sqrt(_3354) * _3330.w;
                        float _3371 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                        float _3372 = _3371 * _3371;
                        float _3375 = ((1.0 - _3372) * _3361) + _3372;
                        float _3378 = _3368 * _3368;
                        float _3382 = ((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3367) / ((_3378 * 0.699999988079071044921875) + 1.0);
                        float _3386 = (-0.0) - _1995;
                        float _3387 = (-0.0) - _1996;
                        float _3388 = (-0.0) - _1997;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3402 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                        float _3403 = 1.0 - _935;
                        float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                        float _3411 = _3410 * _3410;
                        float _3412 = _3411 * _3411;
                        float _3413 = _3393 + _3358;
                        float _3414 = _3394 + _3359;
                        float _3415 = _3395 + _3360;
                        float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                        float _3423 = dot(vec3(_860, _863, _866), vec3(_3393, _3394, _3395));
                        float _4777 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3427 = dot(vec3(_860, _863, _866), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                        float _4788 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3430 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                        float _3435 = _3371 * _3411;
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3361) + _3436;
                        float _4799 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3441 = 1.0 - _3411;
                        float _3451 = (0.5 / (((_3440 * ((_3426 * _3441) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3440 * _3441) + _3411) * _3426))) * _3440;
                        float _4810 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3462 = (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3434 * _3434) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125))) * _3367;
                        _3220 = (_3382 * _3330.x) + _3288;
                        _3221 = (_3382 * _3330.y) + _3289;
                        _3222 = (_3382 * _3330.z) + _3290;
                        _3217 = (_3462 * _3347.x) + _3285;
                        _3218 = (_3462 * _3347.y) + _3286;
                        _3219 = (_3462 * _3347.z) + _3287;
                        if (_3292 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3292;
                        }
                    }
                    frontier_phi_66_pred = _3222;
                    frontier_phi_66_pred_1 = _3221;
                    frontier_phi_66_pred_2 = _3220;
                    frontier_phi_66_pred_3 = _3219;
                    frontier_phi_66_pred_4 = _3218;
                    frontier_phi_66_pred_5 = _3217;
                }
                _3027 = frontier_phi_66_pred;
                _3025 = frontier_phi_66_pred_1;
                _3023 = frontier_phi_66_pred_2;
                _3021 = frontier_phi_66_pred_3;
                _3019 = frontier_phi_66_pred_4;
                _3017 = frontier_phi_66_pred_5;
                uint _3168 = _3167 + 1u;
                if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3161 = _3017;
                    _3162 = _3019;
                    _3163 = _3021;
                    _3164 = _3023;
                    _3165 = _3025;
                    _3166 = _3027;
                    _3167 = _3168;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
        }
        uvec4 _3030 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3031 = _3030.z;
        uint _3033 = (_3031 >> 8u) & 15u;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        if (((4294967295u << _3033) & _2936) == 0u)
        {
            _3129 = _3016;
            _3131 = _3018;
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
        }
        else
        {
            float _3154 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
            float _3155 = _3154 * _1995;
            float _3156 = _3154 * _1996;
            float _3157 = _3154 * _1997;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3033 < ((_3031 >> 12u) & 15u))
            {
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3268 = _3016;
                float _3269 = _3018;
                float _3270 = _3020;
                float _3271 = _3022;
                float _3272 = _3024;
                float _3273 = _3026;
                uint _3274 = _3033;
                uint _3283;
                bool _3284;
                for (;;)
                {
                    _3283 = texelFetch(g_lightClassification, int((((_2930 << 5u) + (_2916 << 9u)) + (_3274 << 2u)) >> 2u)).x;
                    _3284 = _3283 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3284)
                    {
                        frontier_phi_72_pred = _3273;
                        frontier_phi_72_pred_1 = _3272;
                        frontier_phi_72_pred_2 = _3271;
                        frontier_phi_72_pred_3 = _3270;
                        frontier_phi_72_pred_4 = _3269;
                        frontier_phi_72_pred_5 = _3268;
                    }
                    else
                    {
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3480 = _3268;
                        float _3481 = _3269;
                        float _3482 = _3270;
                        float _3483 = _3271;
                        float _3484 = _3272;
                        float _3485 = _3273;
                        uint _3486 = _3283;
                        uint _3487;
                        vec4 _3512;
                        float _3513;
                        vec4 _3528;
                        vec3 _3540;
                        vec4 _3555;
                        vec4 _3571;
                        float _3617;
                        bool _3618;
                        for (;;)
                        {
                            uint _3497 = ((_3274 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3486));
                            _3487 = (_3486 + 4294967295u) & _3486;
                            uint _3499 = _3497 * 40u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3513 = _3512.w;
                            uint _3515 = (_3497 * 40u) + 4u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3497 * 40u) + 8u;
                            _3540 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x));
                            uint _3542 = (_3497 * 40u) + 16u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3558 = (_3497 * 40u) + 20u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3497 * 40u) + 24u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3592 = (_3497 * 40u) + 28u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3617 = fma(_1997, _3605.z, fma(_1996, _3605.y, _3605.x * _1995)) + _3605.w;
                            _3618 = !((fma(_1997, _3586.z, fma(_1996, _3586.y, _3586.x * _1995)) + _3586.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3618)
                            {
                                float _3645 = _3512.x - _1995;
                                float _3646 = _3512.y - _1996;
                                float _3647 = _3512.z - _1997;
                                float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                                float _3651 = inversesqrt(_3648);
                                float _3652 = _3651 * _3645;
                                float _3653 = _3651 * _3646;
                                float _3654 = _3651 * _3647;
                                float _3658 = 1.0 - (_3648 / (_3513 * _3513));
                                float _4821 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3663 = sqrt(_3648) * _3528.w;
                                float _3665 = 1.39999997615814208984375 / (_3663 + 1.39999997615814208984375);
                                float _3666 = _3665 * _3665;
                                float _3669 = ((1.0 - _3666) * dot(vec3(_3652, _3653, _3654), vec3(_860, _863, _866))) + _3666;
                                float _3672 = _3663 * _3663;
                                float _3676 = (fma(_1997, _3555.z, fma(_1996, _3555.y, _3555.x * _1995)) + _3555.w) / _3617;
                                float _3677 = (fma(_1997, _3571.z, fma(_1996, _3571.y, _3571.x * _1995)) + _3571.w) / _3617;
                                float _3681 = 1.0 - dot(vec2(_3676, _3677), vec2(_3676, _3677));
                                float _4837 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3683 = _3682 * (((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3659) / ((_3672 * 0.699999988079071044921875) + 1.0));
                                float _3695 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                                float _3696 = 1.0 - _935;
                                float _3703 = sqrt(1.0 - ((1.0 - (_3696 * _3696)) * (1.0 - (_3695 * _3695))));
                                float _3704 = _3703 * _3703;
                                float _3705 = _3704 * _3704;
                                float _3706 = _3652 - _3155;
                                float _3707 = _3653 - _3156;
                                float _3708 = _3654 - _3157;
                                float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                                float _3716 = dot(vec3(_860, _863, _866), vec3((-0.0) - _3155, (-0.0) - _3156, (-0.0) - _3157));
                                float _4848 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3720 = dot(vec3(_860, _863, _866), vec3(_3712 * _3706, _3712 * _3707, _3712 * _3708));
                                float _4859 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3727 = ((_3723 * _3723) * (_3705 + (-1.0))) + 1.0;
                                float _3728 = _3665 * _3704;
                                float _3729 = _3728 * _3728;
                                float _3735 = ((1.0 - _3729) * dot(vec3(_860, _863, _866), vec3(_3652, _3653, _3654))) + _3729;
                                float _4870 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3737 = 1.0 - _3704;
                                float _3747 = (0.5 / (((_3736 * ((_3719 * _3737) + _3704)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3704) * _3719))) * _3736;
                                float _4881 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3757 = (_3682 * _3659) * (((_3705 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3727 * _3727) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3683 * _3528.y;
                                frontier_phi_78_pred_1 = _3683 * _3528.x;
                                frontier_phi_78_pred_2 = _3757 * _3540.z;
                                frontier_phi_78_pred_3 = _3757 * _3540.y;
                                frontier_phi_78_pred_4 = _3757 * _3540.x;
                                frontier_phi_78_pred_5 = _3683 * _3528.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_78_pred;
                            _3764 = frontier_phi_78_pred_1;
                            _3763 = frontier_phi_78_pred_2;
                            _3762 = frontier_phi_78_pred_3;
                            _3761 = frontier_phi_78_pred_4;
                            _3766 = frontier_phi_78_pred_5;
                            _3470 = _3764 + _3483;
                            _3471 = _3765 + _3484;
                            _3472 = _3766 + _3485;
                            _3467 = _3761 + _3480;
                            _3468 = _3762 + _3481;
                            _3469 = _3763 + _3482;
                            if (_3487 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3487;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3472;
                        frontier_phi_72_pred_1 = _3471;
                        frontier_phi_72_pred_2 = _3470;
                        frontier_phi_72_pred_3 = _3469;
                        frontier_phi_72_pred_4 = _3468;
                        frontier_phi_72_pred_5 = _3467;
                    }
                    _3140 = frontier_phi_72_pred;
                    _3138 = frontier_phi_72_pred_1;
                    _3136 = frontier_phi_72_pred_2;
                    _3134 = frontier_phi_72_pred_3;
                    _3132 = frontier_phi_72_pred_4;
                    _3130 = frontier_phi_72_pred_5;
                    uint _3275 = _3274 + 1u;
                    if (_3275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3268 = _3130;
                        _3269 = _3132;
                        _3270 = _3134;
                        _3271 = _3136;
                        _3272 = _3138;
                        _3273 = _3140;
                        _3274 = _3275;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3140;
                frontier_phi_60_61_ladder_1 = _3138;
                frontier_phi_60_61_ladder_2 = _3134;
                frontier_phi_60_61_ladder_3 = _3132;
                frontier_phi_60_61_ladder_4 = _3130;
                frontier_phi_60_61_ladder_5 = _3136;
            }
            else
            {
                frontier_phi_60_61_ladder = _3026;
                frontier_phi_60_61_ladder_1 = _3024;
                frontier_phi_60_61_ladder_2 = _3020;
                frontier_phi_60_61_ladder_3 = _3018;
                frontier_phi_60_61_ladder_4 = _3016;
                frontier_phi_60_61_ladder_5 = _3022;
            }
            _3129 = frontier_phi_60_61_ladder_4;
            _3131 = frontier_phi_60_61_ladder_3;
            _3133 = frontier_phi_60_61_ladder_2;
            _3135 = frontier_phi_60_61_ladder_5;
            _3137 = frontier_phi_60_61_ladder_1;
            _3139 = frontier_phi_60_61_ladder;
        }
        float _3144 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2949 = (_3144 * _3135) + _2461;
        _2951 = (_3144 * _3137) + _2463;
        _2953 = (_3144 * _3139) + _2465;
        _2955 = ((_3129 * _903) * _3144) + _2799;
        _2957 = ((_3131 * _905) * _3144) + _2801;
        _2959 = ((_3133 * _906) * _3144) + _2803;
    }
    else
    {
        _2949 = _2461;
        _2951 = _2463;
        _2953 = _2465;
        _2955 = _2799;
        _2957 = _2801;
        _2959 = _2803;
    }
    float _4897 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4908 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4919 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    uint _2979 = _253 + 6u;
    float _2987 = _841 / cbSceneParam._m0[86u].x;
    float _2988 = _842 / cbSceneParam._m0[86u].y;
    vec4 _3002 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2987, _2988, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3004 = _3002.x;
    float _3005 = _3002.y;
    float _3006 = _3002.z;
    float _3007 = _3002.w;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _3041 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _3042 = _3041 / _776;
        float _3053 = _3042 * _826;
        float _3054 = _827 * _3042;
        float _3055 = (-0.0) - _3054;
        float _3057 = _3042 * _828;
        float _3059 = (cbSceneParam._m0[77u].w * _3055) / _3041;
        float _3060 = _3059 + cbSceneParam._m0[79u].w;
        float _3061 = cbSceneParam._m0[79u].w - _3054;
        float _3067 = sqrt(((_3053 * _3053) + (_3054 * _3054)) + (_3057 * _3057));
        float _3070 = (1.0 - (cbSceneParam._m0[77u].w / _3041)) * _3067;
        float _3075 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3077 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3230;
        if (abs((_3055 - _3059) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3230 = ((((_3060 > 0.0) ? exp2(_3075 * _3060) : (2.0 - exp2(_3077 * _3060))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3070;
        }
        else
        {
            float _3190 = 1.0 / cbSceneParam._m0[80u].x;
            float _3191 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : max(_3060, _3061));
            float _3192 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : min(_3060, _3061));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            _3230 = ((abs(_3067 / _3055) * cbSceneParam._m0[80u].y) * ((((_3201 - _3202) * 2.0) - ((exp2(_3075 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0)))) - exp2(_3075 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))))) * _3190)) - ((exp2(_3077 * _3201) - exp2(_3077 * _3202)) * _3190))) + (_3070 * cbSceneParam._m0[80u].z);
        }
        vec4 _3232 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2987, _2988, 1.0), 0.0);
        float _3241 = exp2((_3230 * (-1.44269502162933349609375)) * (1.0 - _3232.w));
        float _3242 = log2(_3241);
        float _3258 = log2(_3007);
        _3079 = (exp2(_3258 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].x)) * _3232.x) / cbSceneParam._m0[78u].x)) + _3004;
        _3081 = (exp2(_3258 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].y)) * _3232.y) / cbSceneParam._m0[78u].y)) + _3005;
        _3083 = (exp2(_3258 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3242 * cbSceneParam._m0[78u].z)) * _3232.z) / cbSceneParam._m0[78u].z)) + _3006;
        _3085 = _3241 * _3007;
    }
    else
    {
        _3079 = _3004;
        _3081 = _3005;
        _3083 = _3006;
        _3085 = _3007;
    }
    float _3097 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3098 = _3097 == 3.0;
    float _3099 = log2(_3085);
    float _3106 = exp2(_3099 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2949 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _919))) + ((_2955 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1727)) * cbPerFrame._m0[3u].x));
    float _3107 = exp2(_3099 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2951 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _919))) + ((_2957 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1727)) * cbPerFrame._m0[3u].x));
    float _3108 = exp2(_3099 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2953 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _919))) + ((_2959 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1727)) * cbPerFrame._m0[3u].x));
    float _3117 = (_3097 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3117 * (_3098 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.y = _3117 * (_3098 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3081)));
    SV_Target.z = _3117 * (_3098 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3083)));
    SV_Target.w = cbInstanceData._m0[_2979].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2979].w;
}


