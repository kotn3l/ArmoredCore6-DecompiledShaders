#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1314;
float _3978;
float _3979;
float _3980;
float _3981;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3990 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4001 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4012 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].y) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4023 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _432 = (_425 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _433 = (_425 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _434 = (_425 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _438 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _432;
    float _441 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _433;
    float _444 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _434;
    float _451 = ((_432 - _438) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) + _438;
    float _452 = ((_433 - _441) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) + _441;
    float _453 = ((_434 - _444) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) + _444;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _526 = ((_496.z - _517) * _425) + _517;
    float _529 = ((((_496.x - _515) * _425) + _515) * 2.0) + (-1.0);
    float _530 = ((((_496.y - _516) * _425) + _516) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _4034 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _579 = _577.x;
    float _580 = 1.0 - _579;
    float _593 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_579 - _580) * cbMtdParam._m0[24u].z) + _580) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4045 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _601 = (_594 * (cbMtdParam._m0[17u].x - _451)) + _451;
    float _602 = (_594 * (cbMtdParam._m0[17u].y - _452)) + _452;
    float _603 = (_594 * (cbMtdParam._m0[17u].z - _453)) + _453;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _631 = _629.x;
    float _649 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _631) * _425) + _631;
    float _653 = ((_615.x - _649) * cbMtdParam._m0[19u].z) + _649;
    float _655 = _653 - (_653 * _594);
    float _660 = (((_471.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    float _664 = ((_552.z - _660) * cbMtdParam._m0[19u].w) + _660;
    vec4 _677 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _684 = (_677.x * 2.0) + (-1.0);
    float _685 = (_677.y * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _4056 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _694 = (_594 * (_677.z - _664)) + _664;
    float _703 = (_529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_471.x * 2.0) + (-1.0)))) + (((_552.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _704 = (_530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_471.y * 2.0) + (-1.0)))) + (((_552.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _716 = (((_684 - _703) + (cbMtdParam._m0[21u].x * _703)) * _594) + _703;
    float _717 = (((_685 - _704) + (cbMtdParam._m0[21u].x * _704)) * _594) + _704;
    float _718 = (_594 * (sqrt(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) - _536)) + _536;
    float _720 = cbMtdParam._m0[22u].x + _552.w;
    float _723 = fma(_718, _240 * NORMAL.x, fma(_717, _247 * TANGENT.x, (_233 * _225) * _716));
    float _726 = fma(_718, _240 * NORMAL.y, fma(_717, _247 * TANGENT.y, (_233 * _226) * _716));
    float _729 = fma(_718, _240 * NORMAL.z, fma(_717, _247 * TANGENT.z, (_233 * _227) * _716));
    float _733 = inversesqrt(dot(vec3(_723, _726, _729), vec3(_723, _726, _729)));
    float _734 = _733 * _723;
    float _735 = _733 * _726;
    float _736 = _733 * _729;
    float _4067 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _737 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4089 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4100 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4111 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4122 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _742 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _756 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _807 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _797);
    float _808 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _797);
    float _809 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _797);
    float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
    float _814 = _807 * _813;
    float _815 = _808 * _813;
    float _816 = _809 * _813;
    vec4 _821 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _823 = _821.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _995 = sqrt(((_807 * _807) + (_808 * _808)) + (_809 * _809));
        float _1001 = (cbMatDynParam._m0[5u].x * _995) + cbMatDynParam._m0[5u].y;
        float _4133 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1006 = (cbMatDynParam._m0[5u].z * _995) + cbMatDynParam._m0[5u].w;
        float _4144 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) - _1002)) + _1002) < ((_823 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _853 = fma(_736, cbSceneParam._m0[5u].z, fma(_735, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _734));
    float _856 = fma(_736, cbSceneParam._m0[6u].z, fma(_735, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _734));
    float _859 = fma(_736, cbSceneParam._m0[7u].z, fma(_735, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _734));
    uint _872 = _274 + 9u;
    uint _873 = _872 + uint(cbMatDynParam._m0[0u].w);
    float _879 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_873].x;
    float _880 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_873].y;
    float _881 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_873].z;
    float _4155 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _885 = 1.0 - _742;
    float _886 = _882 * _885;
    float _887 = _883 * _885;
    float _888 = _884 * _885;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _742;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _742;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _742;
    float _896 = _893 + 0.039999999105930328369140625;
    float _898 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    vec4 _908 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _834, cbSceneParam._m0[86u].y * _835));
    float _912 = ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * TEXCOORD_5.w) * _908.x;
    float _913 = dot(vec3(_734, _735, _736), vec3(_814, _815, _816));
    float _916 = _913 * 2.0;
    float _920 = (_916 * _734) - _814;
    float _921 = (_916 * _735) - _815;
    float _922 = (_916 * _736) - _816;
    float _926 = abs(dot(vec3(_814, _815, _816), vec3(_734, _735, _736)));
    float _4188 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _928 = sqrt(_737);
    float _941 = exp2((_928 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_928 * 3.0));
    float _947 = (1.0 - _941) * ((_928 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _948 = _941 * _928;
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1313;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1038 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1042 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1046 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1071 = _976 + _734;
        float _1072 = _980 + _735;
        float _1073 = _984 + _736;
        float _1083 = fma(_1073, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071)) - _1038;
        float _1084 = fma(_1073, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071)) - _1042;
        float _1085 = fma(_1073, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071)) - _1046;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1038 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1042 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[34u].z) + ((((((_1046 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1141 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1107.x + (-0.5));
        float _1143 = _1141 * (_1107.y + (-0.5));
        float _1144 = _1141 * (_1107.z + (-0.5));
        float _1151 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1114.x + (-0.5));
        float _1153 = _1151 * (_1114.y + (-0.5));
        float _1154 = _1151 * (_1114.z + (-0.5));
        float _1161 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1121.x + (-0.5));
        float _1163 = _1161 * (_1121.y + (-0.5));
        float _1164 = _1161 * (_1121.z + (-0.5));
        float _1171 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1128.x + (-0.5));
        float _1173 = _1171 * (_1128.y + (-0.5));
        float _1174 = _1171 * (_1128.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1195 = (dot(vec3(_734, _735, _736), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1205 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _4236 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1207 + 1.0))) + _1212) * _1175;
        float _1222 = _1143 * 0.5;
        float _1223 = _1153 * 0.5;
        float _1224 = _1163 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_734, _735, _736), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4269 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1249 + 1.0))) + _1254) * _1176;
        float _1264 = _1144 * 0.5;
        float _1265 = _1154 * 0.5;
        float _1266 = _1164 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_734, _735, _736), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4302 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1291 + 1.0))) + _1296) * _1177;
        _1313 = _1144;
        _1315 = _1143;
        _1316 = _1142;
        _1317 = _1154;
        _1318 = _1153;
        _1319 = _1152;
        _1320 = _1164;
        _1321 = _1163;
        _1322 = _1162;
        _1323 = _1177;
        _1324 = _1176;
        _1325 = _1175;
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1314;
        _1315 = _1314;
        _1316 = _1314;
        _1317 = _1314;
        _1318 = _1314;
        _1319 = _1314;
        _1320 = _1314;
        _1321 = _1314;
        _1322 = _1314;
        _1323 = _1314;
        _1324 = _1314;
        _1325 = _1314;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1360 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1364 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1387 = _976 + _734;
        float _1388 = _980 + _735;
        float _1389 = _984 + _736;
        float _1399 = fma(_1389, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387)) - _1356;
        float _1400 = fma(_1389, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387)) - _1360;
        float _1401 = fma(_1389, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387)) - _1364;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1356 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1360 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[35u].z) + ((((((_1364 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1455 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1422.x + (-0.5));
        float _1457 = _1455 * (_1422.y + (-0.5));
        float _1458 = _1455 * (_1422.z + (-0.5));
        float _1465 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1429.x + (-0.5));
        float _1467 = _1465 * (_1429.y + (-0.5));
        float _1468 = _1465 * (_1429.z + (-0.5));
        float _1475 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1436.x + (-0.5));
        float _1477 = _1475 * (_1436.y + (-0.5));
        float _1478 = _1475 * (_1436.z + (-0.5));
        float _1485 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1443.x + (-0.5));
        float _1487 = _1485 * (_1443.y + (-0.5));
        float _1488 = _1485 * (_1443.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_734, _735, _736), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4365 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1519 + 1.0))) + _1524) * _1489;
        float _1534 = _1457 * 0.5;
        float _1535 = _1467 * 0.5;
        float _1536 = _1477 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_734, _735, _736), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4398 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1561 + 1.0))) + _1566) * _1490;
        float _1576 = _1458 * 0.5;
        float _1577 = _1468 * 0.5;
        float _1578 = _1478 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_734, _735, _736), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4431 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1603 + 1.0))) + _1608) * _1491;
        _1625 = _1458;
        _1626 = _1457;
        _1627 = _1456;
        _1628 = _1468;
        _1629 = _1467;
        _1630 = _1466;
        _1631 = _1478;
        _1632 = _1477;
        _1633 = _1476;
        _1634 = _1491;
        _1635 = _1490;
        _1636 = _1489;
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1314;
        _1626 = _1314;
        _1627 = _1314;
        _1628 = _1314;
        _1629 = _1314;
        _1630 = _1314;
        _1631 = _1314;
        _1632 = _1314;
        _1633 = _1314;
        _1634 = _1314;
        _1635 = _1314;
        _1636 = _1314;
        _1637 = 0.0;
        _1638 = 0.0;
        _1639 = 0.0;
    }
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1326)) + _1326;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1327)) + _1327;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1328)) + _1328;
    float _1672 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1649));
    float _1693 = _920 * 0.5;
    float _1694 = _921 * 0.5;
    float _1695 = _922 * 0.5;
    float _1696 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1699 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1702 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1709 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1313, _1317, _1320, _1323));
        float _1713 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1717 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1724 = dot(vec4(cbModelParam._m0[39u]), vec4(_1693, _1694, _1695, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1693, _1694, _1695, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_922, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920));
        float _1824 = fma(_922, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920));
        float _1827 = fma(_922, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1855 = frontier_phi_17_15_ladder;
        }
        float _2027;
        if (_1824 > 0.0)
        {
            _2027 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2027 = frontier_phi_26_22_ladder;
        }
        float _2322;
        if (_1827 > 0.0)
        {
            _2322 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2322 = frontier_phi_38_33_ladder;
        }
        float _2324 = isnan(_2027) ? _1855 : (isnan(_1855) ? _2027 : min(_1855, _2027));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1821) + _1810;
        float _2330 = (_2325 * _1824) + _1814;
        float _2331 = (_2325 * _1827) + _1818;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2332;
        float _2336 = _2332 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 > _2336) || ((_2330 < _2334) || ((_2329 < _2334) || (_2329 > _2336))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_16_38_ladder = _2476.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2476.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2476.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_16_38_ladder_2;
        _1845 = frontier_phi_16_38_ladder_1;
        _1847 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_920, _921, _922), _1762);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_922, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920));
        float _1920 = fma(_922, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920));
        float _1923 = fma(_922, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920));
        float _2032;
        if (_1917 > 0.0)
        {
            _2032 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2032 = frontier_phi_28_24_ladder;
        }
        float _2349;
        if (_1920 > 0.0)
        {
            _2349 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2349 = frontier_phi_40_35_ladder;
        }
        float _2687;
        if (_1923 > 0.0)
        {
            _2687 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2687 = frontier_phi_50_47_ladder;
        }
        float _2689 = isnan(_2349) ? _2032 : (isnan(_2032) ? _2349 : min(_2032, _2349));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _1917) + _1906;
        float _2695 = (_2690 * _1920) + _1910;
        float _2696 = (_2690 * _1923) + _1914;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_25_50_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_25_50_ladder_2;
        _1944 = frontier_phi_25_50_ladder_1;
        _1946 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_920, _921, _922), _1852);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1959 = (((_947 * _896) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1961 = (((_947 * _898) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1963 = (((_947 * _899) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1946 - _1847)) + _1847);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2019 = _2006 / _2018;
    float _2020 = _2010 / _2018;
    float _2021 = _2014 / _2018;
    float _2168;
    float _2169;
    float _2170;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2048 = ((uint(_2021 > cbSceneParam._m0[59u].y) + uint(_2021 > cbSceneParam._m0[59u].x)) + uint(_2021 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2049 = _2048 + 43u;
        uint _2057 = _2048 + 44u;
        uint _2065 = _2048 + 45u;
        uint _2073 = _2048 + 46u;
        float _2084 = fma(_2018, cbSceneParam._m0[_2049].w, fma(_2014, cbSceneParam._m0[_2049].z, fma(_2010, cbSceneParam._m0[_2049].y, _2006 * cbSceneParam._m0[_2049].x)));
        float _2088 = fma(_2018, cbSceneParam._m0[_2057].w, fma(_2014, cbSceneParam._m0[_2057].z, fma(_2010, cbSceneParam._m0[_2057].y, _2006 * cbSceneParam._m0[_2057].x)));
        float _2096 = fma(_2018, cbSceneParam._m0[_2073].w, fma(_2014, cbSceneParam._m0[_2073].z, fma(_2010, cbSceneParam._m0[_2073].y, _2006 * cbSceneParam._m0[_2073].x)));
        float _2101 = cbSceneParam._m0[33u].z * _2096;
        float _2103 = cbSceneParam._m0[33u].w * _2096;
        float _2106 = fma(_2018, cbSceneParam._m0[_2065].w, fma(_2014, cbSceneParam._m0[_2065].z, fma(_2010, cbSceneParam._m0[_2065].y, _2006 * cbSceneParam._m0[_2065].x))) / _2096;
        float _2154 = (cbSceneParam._m0[33u].x - sqrt(((_2020 * _2020) + (_2019 * _2019)) + (_2021 * _2021))) * cbSceneParam._m0[33u].y;
        float _4557 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2161 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 + _2084) / _2096, (_2103 + _2088) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2084) / _2096, (_2088 - _2101) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 - _2101) / _2096, (_2088 - _2103) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 - _2103) / _2096, (_2101 + _2088) / _2096), _2106), 0.0)).x), vec4(0.25)));
        _2168 = 1.0 - (_2161 * cbSceneParam._m0[34u].x);
        _2169 = 1.0 - (_2161 * cbSceneParam._m0[34u].y);
        _2170 = 1.0 - (_2161 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2168 = 1.0;
        _2169 = 1.0;
        _2170 = 1.0;
    }
    float _2234;
    float _2236;
    float _2238;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2222 = fma(_2018, cbSceneParam._m0[63u].w, fma(_2014, cbSceneParam._m0[63u].z, fma(_2010, cbSceneParam._m0[63u].y, _2006 * cbSceneParam._m0[63u].x)));
        float _2223 = fma(_2018, cbSceneParam._m0[60u].w, fma(_2014, cbSceneParam._m0[60u].z, fma(_2010, cbSceneParam._m0[60u].y, _2006 * cbSceneParam._m0[60u].x))) / _2222;
        float _2224 = fma(_2018, cbSceneParam._m0[61u].w, fma(_2014, cbSceneParam._m0[61u].z, fma(_2010, cbSceneParam._m0[61u].y, _2006 * cbSceneParam._m0[61u].x))) / _2222;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2223 >= cbSceneParam._m0[64u].x) && (_2224 >= cbSceneParam._m0[64u].y)) && (_2223 <= cbSceneParam._m0[64u].z)) && (_2224 <= cbSceneParam._m0[64u].w))
        {
            float _2362 = fma(_2018, cbSceneParam._m0[62u].w, fma(_2014, cbSceneParam._m0[62u].z, fma(_2010, cbSceneParam._m0[62u].y, _2006 * cbSceneParam._m0[62u].x))) / _2222;
            float _2366 = isnan(cbSceneParam._m0[41u].w) ? _2362 : (isnan(_2362) ? cbSceneParam._m0[41u].w : max(_2362, cbSceneParam._m0[41u].w));
            float _2409 = (cbSceneParam._m0[33u].x - sqrt(((_2020 * _2020) + (_2019 * _2019)) + (_2021 * _2021))) * cbSceneParam._m0[33u].y;
            float _4573 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
            float _2416 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2223, cbSceneParam._m0[33u].w + _2224), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2223, _2224 - cbSceneParam._m0[33u].z), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2223 - cbSceneParam._m0[33u].z, _2224 - cbSceneParam._m0[33u].w), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2223 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2224), _2366), 0.0)).x), vec4(0.25)));
            float _2420 = 1.0 - (_2416 * cbSceneParam._m0[34u].x);
            float _2421 = 1.0 - (_2416 * cbSceneParam._m0[34u].y);
            float _2422 = 1.0 - (_2416 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
            frontier_phi_37_36_ladder_1 = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
            frontier_phi_37_36_ladder_2 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
        }
        else
        {
            frontier_phi_37_36_ladder = _2170;
            frontier_phi_37_36_ladder_1 = _2169;
            frontier_phi_37_36_ladder_2 = _2168;
        }
        _2234 = frontier_phi_37_36_ladder_2;
        _2236 = frontier_phi_37_36_ladder_1;
        _2238 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2234 = _2168;
        _2236 = _2169;
        _2238 = _2170;
    }
    uvec4 _2243 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2245 = _2243.x * 14u;
    uint _2246 = _2245 + 13u;
    float _2253 = _912 + (-1.0);
    float _2258 = (cbLight._m0[_2246].x * _2253) + 1.0;
    float _2259 = (cbLight._m0[_2246].y * _2253) + 1.0;
    float _2260 = (cbLight._m0[_2246].z * _2253) + 1.0;
    float _2261 = (cbLight._m0[_2246].w * _2253) + 1.0;
    uint _2262 = _2245 + 5u;
    float _2268 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2272 = _2245 + 4u;
    float _2281 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2285 = _2245 | 1u;
    float _2296 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_734, _735, _736));
    float _2299 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_734, _735, _736));
    float _4609 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _4620 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2304 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2306 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2313 = ((cbLight._m0[_2262].x * _2268) * _2306) + (((cbLight._m0[_2272].x * _2234) * _2281) * _2304);
    float _2314 = ((_2268 * cbLight._m0[_2262].y) * _2306) + (((cbLight._m0[_2272].y * _2236) * _2281) * _2304);
    float _2315 = ((_2268 * cbLight._m0[_2262].z) * _2306) + (((cbLight._m0[_2272].z * _2238) * _2281) * _2304);
    uvec4 _2319 = floatBitsToUint(cbLight._m0[_2245 + 12u]);
    bool _2321 = _2319.x == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2321)
    {
        _2423 = _2313;
        _2425 = _2314;
        _2427 = _2315;
    }
    else
    {
        uint _2431 = _2245 + 6u;
        float _2447 = (dot(vec3(cbLight._m0[_2245 + 2u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4631 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2450 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2423 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2313;
        _2425 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2314;
        _2427 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2315;
    }
    bool _2430 = _2319.y == 0u;
    float _2485;
    float _2487;
    float _2489;
    if (_2430)
    {
        _2485 = _2423;
        _2487 = _2425;
        _2489 = _2427;
    }
    else
    {
        uint _2658 = _2245 + 7u;
        float _2674 = (dot(vec3(cbLight._m0[_2245 + 3u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2675 = _2674 * _2674;
        float _4647 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2676 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2677 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2485 = (((cbLight._m0[_2658].x * 0.3183098733425140380859375) * _2676) * _2677) + _2423;
        _2487 = (((cbLight._m0[_2658].y * 0.3183098733425140380859375) * _2676) * _2677) + _2425;
        _2489 = (((cbLight._m0[_2658].z * 0.3183098733425140380859375) * _2676) * _2677) + _2427;
    }
    uint _2492 = _2245 + 8u;
    float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _737) * 0.949999988079071044921875);
    float _2506 = _2505 * _2505;
    float _2507 = cbLight._m0[_2245].x + _814;
    float _2508 = cbLight._m0[_2245].y + _815;
    float _2509 = cbLight._m0[_2245].z + _816;
    float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
    float _2514 = _2513 * _2507;
    float _2515 = _2513 * _2508;
    float _2516 = _2513 * _2509;
    float _2517 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2245].xyz));
    float _4663 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2521 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2522 = dot(vec3(_734, _735, _736), vec3(_2514, _2515, _2516));
    float _4685 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2526 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2514, _2515, _2516));
    float _4696 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = _2506 * _2506;
    float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
    float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2543 = 0.959999978542327880859375 - _893;
    float _2545 = 0.959999978542327880859375 - _894;
    float _2546 = 0.959999978542327880859375 - _895;
    float _2553 = 1.0 - _2506;
    float _2564 = (0.5 / (((_2521 * ((_2520 * _2553) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2553) + _2506) * _2520))) * _2520;
    float _4707 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2566 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
    uint _2580 = _2245 + 9u;
    float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _737) * 0.949999988079071044921875);
    float _2592 = _2591 * _2591;
    float _2593 = cbLight._m0[_2285].x + _814;
    float _2594 = cbLight._m0[_2285].y + _815;
    float _2595 = cbLight._m0[_2285].z + _816;
    float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
    float _2600 = _2599 * _2593;
    float _2601 = _2599 * _2594;
    float _2602 = _2599 * _2595;
    float _2603 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2285].xyz));
    float _4718 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2607 = dot(vec3(_734, _735, _736), vec3(_2600, _2601, _2602));
    float _4729 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2611 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2600, _2601, _2602));
    float _4740 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2615 = _2592 * _2592;
    float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
    float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2633 = 1.0 - _2592;
    float _2643 = (0.5 / (((_2521 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2633) + _2592) * _2606))) * _2606;
    float _4751 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2645 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
    float _2655 = (((((_2626 * _2543) + _896) * cbLight._m0[_2580].x) * _2645) * _2268) + ((((cbLight._m0[_2492].x * _2234) * ((_2542 * _2543) + _896)) * _2566) * _2281);
    float _2656 = (((((_2626 * _2545) + _898) * cbLight._m0[_2580].y) * _2645) * _2268) + ((((cbLight._m0[_2492].y * _2236) * ((_2542 * _2545) + _898)) * _2566) * _2281);
    float _2657 = (((((_2626 * _2546) + _899) * cbLight._m0[_2580].z) * _2645) * _2268) + ((((cbLight._m0[_2492].z * _2238) * ((_2542 * _2546) + _899)) * _2566) * _2281);
    float _2713;
    float _2715;
    float _2717;
    if (_2321)
    {
        _2713 = _2655;
        _2715 = _2656;
        _2717 = _2657;
    }
    else
    {
        uint _2719 = _2245 + 2u;
        uint _2723 = _2245 + 10u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _737) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _814;
        float _2740 = cbLight._m0[_2719].y + _815;
        float _2741 = cbLight._m0[_2719].z + _816;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2719].xyz));
        float _4762 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2753 = dot(vec3(_734, _735, _736), vec3(_2746, _2747, _2748));
        float _4773 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4784 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2772 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2779 = 1.0 - _2738;
        float _2789 = (0.5 / (((_2521 * ((_2752 * _2779) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2779) + _2738) * _2752))) * _2752;
        float _4795 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2791 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2792 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2713 = (((((_2772 * _2543) + _896) * cbLight._m0[_2723].x) * _2791) * _2792) + _2655;
        _2715 = (((((_2772 * _2545) + _898) * cbLight._m0[_2723].y) * _2791) * _2792) + _2656;
        _2717 = (((((_2772 * _2546) + _899) * cbLight._m0[_2723].z) * _2791) * _2792) + _2657;
    }
    float _2823;
    float _2825;
    float _2827;
    if (_2430)
    {
        _2823 = _2713;
        _2825 = _2715;
        _2827 = _2717;
    }
    else
    {
        uint _2834 = _2245 + 3u;
        uint _2838 = _2245 + 11u;
        float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2834].w)) * _737) * 0.949999988079071044921875);
        float _2853 = _2852 * _2852;
        float _2854 = cbLight._m0[_2834].x + _814;
        float _2855 = cbLight._m0[_2834].y + _815;
        float _2856 = cbLight._m0[_2834].z + _816;
        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
        float _2861 = _2860 * _2854;
        float _2862 = _2860 * _2855;
        float _2863 = _2860 * _2856;
        float _2864 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2834].xyz));
        float _4811 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2868 = dot(vec3(_734, _735, _736), vec3(_2861, _2862, _2863));
        float _4822 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2872 = dot(vec3(cbLight._m0[_2834].xyz), vec3(_2861, _2862, _2863));
        float _4833 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2876 = _2853 * _2853;
        float _2880 = ((_2871 * _2871) * (_2876 + (-1.0))) + 1.0;
        float _2887 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2894 = 1.0 - _2853;
        float _2904 = (0.5 / (((_2521 * ((_2867 * _2894) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2894) + _2853) * _2867))) * _2867;
        float _4844 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2906 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2876 / ((_2880 * _2880) * 3.141590118408203125));
        float _2907 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2823 = (((((_2887 * _2543) + _896) * cbLight._m0[_2838].x) * _2906) * _2907) + _2713;
        _2825 = (((((_2887 * _2545) + _898) * cbLight._m0[_2838].y) * _2906) * _2907) + _2715;
        _2827 = (((((_2887 * _2546) + _899) * cbLight._m0[_2838].z) * _2906) * _2907) + _2717;
    }
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_2243.y == 0u)
    {
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.x;
        uint _2940 = uint((float(_2928.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2929))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2929)));
        float _2950 = (log2(_2021 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2951 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        uint _2954 = uint(isnan(14.0) ? _2951 : (isnan(_2951) ? 14.0 : min(_2951, 14.0)));
        uvec4 _2959 = texelFetch(g_lightClusterGridBuffer, int(((_2954 << 2u) + (_2940 << 6u)) >> 2u));
        uint _2960 = _2959.x;
        uint _2961 = _2928.z;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((((1u << ((_2961 >> 4u) & 15u)) + 4294967295u) & _2960) == 0u) || ((_2961 & 240u) == 0u))
        {
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
        }
        else
        {
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            uint _3199 = 0u;
            uint _3208;
            bool _3209;
            for (;;)
            {
                _3208 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                _3209 = _3208 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3209)
                {
                    frontier_phi_71_pred = _3198;
                    frontier_phi_71_pred_1 = _3197;
                    frontier_phi_71_pred_2 = _3196;
                    frontier_phi_71_pred_3 = _3195;
                    frontier_phi_71_pred_4 = _3194;
                    frontier_phi_71_pred_5 = _3193;
                }
                else
                {
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    uint _3344;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3208;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    for (;;)
                    {
                        uint _3348 = uint(findLSB(_3344)) + (_3199 << 5u);
                        uint _3345 = (_3344 + 4294967295u) & _3344;
                        uint _3350 = _3348 * 48u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3370 = (_3348 * 48u) + 4u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3389 = (_3348 * 48u) + 8u;
                        vec3 _3400 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x));
                        float _3404 = _3364.x - _2019;
                        float _3405 = _3364.y - _2020;
                        float _3406 = _3364.z - _2021;
                        float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                        float _3410 = inversesqrt(_3407);
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3414 = dot(vec3(_853, _856, _859), vec3(_3411, _3412, _3413));
                        float _3419 = 1.0 - (_3407 * _3364.w);
                        float _4870 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3421 = sqrt(_3407) * _3383.w;
                        float _3424 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                        float _3425 = _3424 * _3424;
                        float _3428 = ((1.0 - _3425) * _3414) + _3425;
                        float _3431 = _3421 * _3421;
                        float _3435 = ((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3420) / ((_3431 * 0.699999988079071044921875) + 1.0);
                        float _3439 = (-0.0) - _2019;
                        float _3440 = (-0.0) - _2020;
                        float _3441 = (-0.0) - _2021;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3455 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                        float _3456 = 1.0 - _928;
                        float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                        float _3464 = _3463 * _3463;
                        float _3465 = _3464 * _3464;
                        float _3466 = _3446 + _3411;
                        float _3467 = _3447 + _3412;
                        float _3468 = _3448 + _3413;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3476 = dot(vec3(_853, _856, _859), vec3(_3446, _3447, _3448));
                        float _4886 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3479 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3480 = dot(vec3(_853, _856, _859), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                        float _4897 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                        float _3488 = _3424 * _3464;
                        float _3489 = _3488 * _3488;
                        float _3492 = ((1.0 - _3489) * _3414) + _3489;
                        float _4908 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3493 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3494 = 1.0 - _3464;
                        float _3504 = (0.5 / (((_3493 * ((_3479 * _3494) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3464) * _3479))) * _3493;
                        float _4919 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3515 = (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3487 * _3487) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125))) * _3420;
                        _3268 = (_3435 * _3383.x) + _3341;
                        _3269 = (_3435 * _3383.y) + _3342;
                        _3270 = (_3435 * _3383.z) + _3343;
                        _3265 = (_3515 * _3400.x) + _3338;
                        _3266 = (_3515 * _3400.y) + _3339;
                        _3267 = (_3515 * _3400.z) + _3340;
                        if (_3345 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3345;
                        }
                    }
                    frontier_phi_71_pred = _3270;
                    frontier_phi_71_pred_1 = _3269;
                    frontier_phi_71_pred_2 = _3268;
                    frontier_phi_71_pred_3 = _3267;
                    frontier_phi_71_pred_4 = _3266;
                    frontier_phi_71_pred_5 = _3265;
                }
                _3051 = frontier_phi_71_pred;
                _3049 = frontier_phi_71_pred_1;
                _3047 = frontier_phi_71_pred_2;
                _3045 = frontier_phi_71_pred_3;
                _3043 = frontier_phi_71_pred_4;
                _3041 = frontier_phi_71_pred_5;
                uint _3200 = _3199 + 1u;
                if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3193 = _3041;
                    _3194 = _3043;
                    _3195 = _3045;
                    _3196 = _3047;
                    _3197 = _3049;
                    _3198 = _3051;
                    _3199 = _3200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
        }
        uvec4 _3054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3055 = _3054.z;
        uint _3057 = (_3055 >> 8u) & 15u;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        if (((4294967295u << _3057) & _2960) == 0u)
        {
            _3161 = _3040;
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
            _3171 = _3050;
        }
        else
        {
            float _3186 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
            float _3187 = _3186 * _2019;
            float _3188 = _3186 * _2020;
            float _3189 = _3186 * _2021;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3057 < ((_3055 >> 12u) & 15u))
            {
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3321 = _3040;
                float _3322 = _3042;
                float _3323 = _3044;
                float _3324 = _3046;
                float _3325 = _3048;
                float _3326 = _3050;
                uint _3327 = _3057;
                uint _3336;
                bool _3337;
                for (;;)
                {
                    _3336 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3327 << 2u)) >> 2u)).x;
                    _3337 = _3336 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3337)
                    {
                        frontier_phi_82_pred = _3326;
                        frontier_phi_82_pred_1 = _3325;
                        frontier_phi_82_pred_2 = _3324;
                        frontier_phi_82_pred_3 = _3323;
                        frontier_phi_82_pred_4 = _3322;
                        frontier_phi_82_pred_5 = _3321;
                    }
                    else
                    {
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3542 = _3321;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        uint _3548 = _3336;
                        uint _3549;
                        vec4 _3574;
                        float _3575;
                        vec4 _3590;
                        vec3 _3602;
                        vec4 _3617;
                        vec4 _3632;
                        float _3678;
                        bool _3679;
                        for (;;)
                        {
                            uint _3559 = ((_3327 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3548));
                            _3549 = (_3548 + 4294967295u) & _3548;
                            uint _3561 = _3559 * 40u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3575 = _3574.w;
                            uint _3577 = (_3559 * 40u) + 4u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3559 * 40u) + 8u;
                            _3602 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x));
                            uint _3604 = (_3559 * 40u) + 16u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3619 = (_3559 * 40u) + 20u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3559 * 40u) + 24u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3653 = (_3559 * 40u) + 28u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            _3678 = fma(_2021, _3666.z, fma(_2020, _3666.y, _3666.x * _2019)) + _3666.w;
                            _3679 = !((fma(_2021, _3647.z, fma(_2020, _3647.y, _3647.x * _2019)) + _3647.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3679)
                            {
                                float _3706 = _3574.x - _2019;
                                float _3707 = _3574.y - _2020;
                                float _3708 = _3574.z - _2021;
                                float _3709 = dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708));
                                float _3712 = inversesqrt(_3709);
                                float _3713 = _3712 * _3706;
                                float _3714 = _3712 * _3707;
                                float _3715 = _3712 * _3708;
                                float _3719 = 1.0 - (_3709 / (_3575 * _3575));
                                float _4930 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3724 = sqrt(_3709) * _3590.w;
                                float _3726 = 1.39999997615814208984375 / (_3724 + 1.39999997615814208984375);
                                float _3727 = _3726 * _3726;
                                float _3730 = ((1.0 - _3727) * dot(vec3(_3713, _3714, _3715), vec3(_853, _856, _859))) + _3727;
                                float _3733 = _3724 * _3724;
                                float _3737 = (fma(_2021, _3617.z, fma(_2020, _3617.y, _3617.x * _2019)) + _3617.w) / _3678;
                                float _3738 = (fma(_2021, _3632.z, fma(_2020, _3632.y, _3632.x * _2019)) + _3632.w) / _3678;
                                float _3742 = 1.0 - dot(vec2(_3737, _3738), vec2(_3737, _3738));
                                float _4946 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3744 = _3743 * (((isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0))) * _3720) / ((_3733 * 0.699999988079071044921875) + 1.0));
                                float _3756 = exp2(log2(1.0 / ((_3733 * 3.5) + 5.0)) * 0.25);
                                float _3757 = 1.0 - _928;
                                float _3764 = sqrt(1.0 - ((1.0 - (_3757 * _3757)) * (1.0 - (_3756 * _3756))));
                                float _3765 = _3764 * _3764;
                                float _3766 = _3765 * _3765;
                                float _3767 = _3713 - _3187;
                                float _3768 = _3714 - _3188;
                                float _3769 = _3715 - _3189;
                                float _3773 = inversesqrt(dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769)));
                                float _3777 = dot(vec3(_853, _856, _859), vec3((-0.0) - _3187, (-0.0) - _3188, (-0.0) - _3189));
                                float _4957 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3780 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3781 = dot(vec3(_853, _856, _859), vec3(_3773 * _3767, _3773 * _3768, _3773 * _3769));
                                float _4968 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3784 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3788 = ((_3784 * _3784) * (_3766 + (-1.0))) + 1.0;
                                float _3789 = _3726 * _3765;
                                float _3790 = _3789 * _3789;
                                float _3796 = ((1.0 - _3790) * dot(vec3(_853, _856, _859), vec3(_3713, _3714, _3715))) + _3790;
                                float _4979 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3798 = 1.0 - _3765;
                                float _3808 = (0.5 / (((_3797 * ((_3780 * _3798) + _3765)) + 9.9999999392252902907785028219223e-09) + (((_3797 * _3798) + _3765) * _3780))) * _3797;
                                float _4990 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3818 = (_3743 * _3720) * (((_3766 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3788 * _3788) * ((_3733 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3744 * _3590.z;
                                frontier_phi_88_pred_1 = _3744 * _3590.y;
                                frontier_phi_88_pred_2 = _3744 * _3590.x;
                                frontier_phi_88_pred_3 = _3818 * _3602.z;
                                frontier_phi_88_pred_4 = _3818 * _3602.y;
                                frontier_phi_88_pred_5 = _3818 * _3602.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3827 = frontier_phi_88_pred;
                            _3826 = frontier_phi_88_pred_1;
                            _3825 = frontier_phi_88_pred_2;
                            _3824 = frontier_phi_88_pred_3;
                            _3823 = frontier_phi_88_pred_4;
                            _3822 = frontier_phi_88_pred_5;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            if (_3549 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3549;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3534;
                        frontier_phi_82_pred_1 = _3533;
                        frontier_phi_82_pred_2 = _3532;
                        frontier_phi_82_pred_3 = _3531;
                        frontier_phi_82_pred_4 = _3530;
                        frontier_phi_82_pred_5 = _3529;
                    }
                    _3172 = frontier_phi_82_pred;
                    _3170 = frontier_phi_82_pred_1;
                    _3168 = frontier_phi_82_pred_2;
                    _3166 = frontier_phi_82_pred_3;
                    _3164 = frontier_phi_82_pred_4;
                    _3162 = frontier_phi_82_pred_5;
                    uint _3328 = _3327 + 1u;
                    if (_3328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3321 = _3162;
                        _3322 = _3164;
                        _3323 = _3166;
                        _3324 = _3168;
                        _3325 = _3170;
                        _3326 = _3172;
                        _3327 = _3328;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3168;
                frontier_phi_63_64_ladder_1 = _3172;
                frontier_phi_63_64_ladder_2 = _3170;
                frontier_phi_63_64_ladder_3 = _3166;
                frontier_phi_63_64_ladder_4 = _3164;
                frontier_phi_63_64_ladder_5 = _3162;
            }
            else
            {
                frontier_phi_63_64_ladder = _3046;
                frontier_phi_63_64_ladder_1 = _3050;
                frontier_phi_63_64_ladder_2 = _3048;
                frontier_phi_63_64_ladder_3 = _3044;
                frontier_phi_63_64_ladder_4 = _3042;
                frontier_phi_63_64_ladder_5 = _3040;
            }
            _3161 = frontier_phi_63_64_ladder_5;
            _3163 = frontier_phi_63_64_ladder_4;
            _3165 = frontier_phi_63_64_ladder_3;
            _3167 = frontier_phi_63_64_ladder;
            _3169 = frontier_phi_63_64_ladder_2;
            _3171 = frontier_phi_63_64_ladder_1;
        }
        float _3176 = isnan(1.0) ? _912 : (isnan(_912) ? 1.0 : min(_912, 1.0));
        _2973 = (_3176 * _3167) + _2485;
        _2975 = (_3176 * _3169) + _2487;
        _2977 = (_3176 * _3171) + _2489;
        _2979 = ((_3161 * _896) * _3176) + _2823;
        _2981 = ((_3163 * _898) * _3176) + _2825;
        _2983 = ((_3165 * _899) * _3176) + _2827;
    }
    else
    {
        _2973 = _2485;
        _2975 = _2487;
        _2977 = _2489;
        _2979 = _2823;
        _2981 = _2825;
        _2983 = _2827;
    }
    float _5006 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _5017 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _5028 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _3000 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2973 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _912))) + ((_2979 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1751)) * cbPerFrame._m0[3u].x);
    float _3001 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2975 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _912))) + ((_2981 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1751)) * cbPerFrame._m0[3u].x);
    float _3002 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2977 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _912))) + ((_2983 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1751)) * cbPerFrame._m0[3u].x);
    uint _3003 = _274 + 6u;
    float _3011 = _834 / cbSceneParam._m0[86u].x;
    float _3012 = _835 / cbSceneParam._m0[86u].y;
    vec4 _3026 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, (log2((isnan(cbSceneParam._m0[77u].w) ? _756 : (isnan(_756) ? cbSceneParam._m0[77u].w : min(_756, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3028 = _3026.x;
    float _3029 = _3026.y;
    float _3030 = _3026.z;
    float _3031 = _3026.w;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    if (_756 > cbSceneParam._m0[78u].w)
    {
        float _3065 = isnan(_756) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _756 : min(cbSceneParam._m0[80u].w, _756));
        float _3066 = _3065 / _756;
        float _3077 = _3066 * _807;
        float _3078 = _808 * _3066;
        float _3079 = (-0.0) - _3078;
        float _3081 = _3066 * _809;
        float _3083 = (cbSceneParam._m0[77u].w * _3079) / _3065;
        float _3084 = _3083 + cbSceneParam._m0[79u].w;
        float _3085 = cbSceneParam._m0[79u].w - _3078;
        float _3091 = sqrt(((_3077 * _3077) + (_3078 * _3078)) + (_3081 * _3081));
        float _3094 = (1.0 - (cbSceneParam._m0[77u].w / _3065)) * _3091;
        float _3099 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3101 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3278;
        if (abs((_3079 - _3083) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3278 = ((((_3084 > 0.0) ? exp2(_3099 * _3084) : (2.0 - exp2(_3101 * _3084))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3094;
        }
        else
        {
            float _3222 = 1.0 / cbSceneParam._m0[80u].x;
            float _3223 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : max(_3084, _3085));
            float _3224 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : min(_3084, _3085));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            _3278 = ((abs(_3091 / _3079) * cbSceneParam._m0[80u].y) * ((((_3233 - _3234) * 2.0) - ((exp2(_3099 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0)))) - exp2(_3099 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))))) * _3222)) - ((exp2(_3101 * _3233) - exp2(_3101 * _3234)) * _3222))) + (_3094 * cbSceneParam._m0[80u].z);
        }
        vec4 _3280 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, 1.0), 0.0);
        float _3289 = exp2((_3278 * (-1.44269502162933349609375)) * (1.0 - _3280.w));
        float _3290 = log2(_3289);
        float _3306 = log2(_3031);
        _3103 = (exp2(_3306 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].x)) * _3280.x) / cbSceneParam._m0[78u].x)) + _3028;
        _3105 = (exp2(_3306 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].y)) * _3280.y) / cbSceneParam._m0[78u].y)) + _3029;
        _3107 = (exp2(_3306 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].z)) * _3280.z) / cbSceneParam._m0[78u].z)) + _3030;
        _3109 = _3289 * _3031;
    }
    else
    {
        _3103 = _3028;
        _3105 = _3029;
        _3107 = _3030;
        _3109 = _3031;
    }
    bool _3316;
    vec4 _3119;
    vec4 _3141;
    float _3143;
    float _3147;
    float _3148;
    float _3149;
    float _3150;
    bool _3160;
    for (;;)
    {
        _3119 = cbMatDynParam._m0[0u];
        float _3121 = roundEven(_3119.y);
        bool _3122 = _3121 == 3.0;
        float _3123 = log2(_3109);
        float _3130 = exp2(_3123 * cbSceneParam._m0[78u].x) * _3000;
        float _3131 = exp2(_3123 * cbSceneParam._m0[78u].y) * _3001;
        float _3132 = exp2(_3123 * cbSceneParam._m0[78u].z) * _3002;
        float _3139 = _823 + (-0.5);
        _3141 = cbMtdParam._m0[1u];
        _3143 = _3141.y * _3139;
        float _3146 = (_3121 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3147 = _3146 * (_3122 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3103)));
        _3148 = _3146 * (_3122 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3105)));
        _3149 = _3146 * (_3122 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3107)));
        _3150 = _3139 * 0.999000012874603271484375;
        _3160 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3160)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3150) < 0.5)
            {
                _3316 = true;
                break;
            }
        }
        uint _3257 = _872 + uint(_3119.w);
        if ((cbInstanceData._m0[_3257].w < 1.0) && ((cbInstanceData._m0[_3257].w + _3150) < 0.5))
        {
            _3316 = true;
            break;
        }
        if ((_3143 + 1.0) < _3141.x)
        {
            _3316 = true;
            break;
        }
        _3316 = false;
        break;
    }
    float _3520;
    if (_3316)
    {
        discard_state = true;
        _3520 = 0.0;
    }
    else
    {
        _3520 = cbInstanceData._m0[_3003].w;
    }
    SV_Target.x = _3147;
    SV_Target.y = _3148;
    SV_Target.z = _3149;
    SV_Target.w = _3520;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3003].w;
    discard_exit();
}


