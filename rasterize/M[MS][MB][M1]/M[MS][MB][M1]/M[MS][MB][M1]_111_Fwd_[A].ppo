#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1272;
float _3653;
float _3654;
float _3655;
float _3656;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3665 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _382) + _457;
    float _469 = ((((_436.x - _455) * _382) + _455) * 2.0) + (-1.0);
    float _470 = ((((_436.y - _456) * _382) + _456) * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3676 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    float _479 = _469 + ((((_409.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _480 = _470 + ((((_409.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _483 = fma(_476, _232, fma(_480, _239, _479 * _225));
    float _486 = fma(_476, _233, fma(_480, _240, _479 * _226));
    float _489 = fma(_476, _234, fma(_480, _241, _479 * _227));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _537 = _535.x;
    float _538 = 1.0 - _537;
    float _542 = ((_537 - _538) * cbMtdParam._m0[24u].z) + _538;
    float _544 = (cbMtdParam._m0[19u].x + dot(vec4(_493 * _483, _493 * _486, _493 * _489, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_542 * cbMtdParam._m0[21u].z);
    float _3687 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _560 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_542 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3698 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _565 = ((_545 * (cbMtdParam._m0[17u].x - _389)) * _561) + _389;
    float _566 = ((_545 * (cbMtdParam._m0[17u].y - _390)) * _561) + _390;
    float _567 = ((_545 * (cbMtdParam._m0[17u].z - _391)) * _561) + _391;
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _595 = _593.x;
    float _613 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _595) * _382) + _595;
    float _617 = ((_579.x - _613) * cbMtdParam._m0[19u].z) + _613;
    float _620 = _617 - ((_561 * _545) * _617);
    float _625 = (((_409.z - _466) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _466;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3709 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _656 = (((_638.z - _625) * _545) * _561) + _625;
    float _671 = (((cbMtdParam._m0[21u].x * _479) + ((_645 - _479) * _545)) * _561) + _479;
    float _672 = (((cbMtdParam._m0[21u].x * _480) + ((_646 - _480) * _545)) * _561) + _480;
    float _673 = (((sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _476) * _545) * _561) + _476;
    float _678 = cbMtdParam._m0[22u].x + _509.w;
    float _681 = fma(_673, _232, fma(_672, _239, _671 * _225));
    float _684 = fma(_673, _233, fma(_672, _240, _671 * _226));
    float _687 = fma(_673, _234, fma(_672, _241, _671 * _227));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3720 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _695 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3742 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3753 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3764 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3775 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _700 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _755);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _755);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _755);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    vec4 _779 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _781 = _779.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _953 = sqrt(((_765 * _765) + (_766 * _766)) + (_767 * _767));
        float _959 = (cbMatDynParam._m0[5u].x * _953) + cbMatDynParam._m0[5u].y;
        float _3786 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _964 = (cbMatDynParam._m0[5u].z * _953) + cbMatDynParam._m0[5u].w;
        float _3797 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) - _960)) + _960) < ((_781 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _814 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _817 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    uint _830 = _244 + 9u;
    uint _831 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_831].z;
    float _3808 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _843 = 1.0 - _700;
    float _844 = _840 * _843;
    float _845 = _841 * _843;
    float _846 = _842 * _843;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _700;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _700;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _700;
    float _854 = _851 + 0.039999999105930328369140625;
    float _856 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _870 = ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * TEXCOORD_5.w) * _866.x;
    float _871 = dot(vec3(_692, _693, _694), vec3(_772, _773, _774));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _692) - _772;
    float _879 = (_874 * _693) - _773;
    float _880 = (_874 * _694) - _774;
    float _884 = abs(dot(vec3(_772, _773, _774), vec3(_692, _693, _694)));
    float _3841 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_695);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _905 = (1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _906 = _899 * _886;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _1000 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _1004 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1029 = _934 + _692;
        float _1030 = _938 + _693;
        float _1031 = _942 + _694;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _996;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1000;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1004;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_692, _693, _694), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3889 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_692, _693, _694), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3922 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_692, _693, _694), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3955 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1273 = _1101;
        _1274 = _1100;
        _1275 = _1112;
        _1276 = _1111;
        _1277 = _1110;
        _1278 = _1122;
        _1279 = _1121;
        _1280 = _1120;
        _1281 = _1135;
        _1282 = _1134;
        _1283 = _1133;
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _1272;
        _1273 = _1272;
        _1274 = _1272;
        _1275 = _1272;
        _1276 = _1272;
        _1277 = _1272;
        _1278 = _1272;
        _1279 = _1272;
        _1280 = _1272;
        _1281 = _1272;
        _1282 = _1272;
        _1283 = _1272;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1314 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1318 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1322 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1345 = _934 + _692;
        float _1346 = _938 + _693;
        float _1347 = _942 + _694;
        float _1357 = fma(_1347, cbModelParam._m0[30u].z, fma(_1346, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1345)) - _1314;
        float _1358 = fma(_1347, cbModelParam._m0[31u].z, fma(_1346, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1345)) - _1318;
        float _1359 = fma(_1347, cbModelParam._m0[32u].z, fma(_1346, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1345)) - _1322;
        float _1363 = inversesqrt(dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359)));
        float _1376 = ((_1363 * _1357) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1314 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1363 * _1358) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1318 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1363 * _1359) / cbModelParam._m0[35u].z) + ((((((_1322 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        float _1413 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1380.x + (-0.5));
        float _1415 = _1413 * (_1380.y + (-0.5));
        float _1416 = _1413 * (_1380.z + (-0.5));
        float _1423 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1387.x + (-0.5));
        float _1425 = _1423 * (_1387.y + (-0.5));
        float _1426 = _1423 * (_1387.z + (-0.5));
        float _1433 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1394.x + (-0.5));
        float _1435 = _1433 * (_1394.y + (-0.5));
        float _1436 = _1433 * (_1394.z + (-0.5));
        float _1443 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1401.x + (-0.5));
        float _1445 = _1443 * (_1401.y + (-0.5));
        float _1446 = _1443 * (_1401.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_692, _693, _694), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4018 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1477 + 1.0))) + _1482) * _1447;
        float _1492 = _1415 * 0.5;
        float _1493 = _1425 * 0.5;
        float _1494 = _1435 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_692, _693, _694), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4051 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1519 + 1.0))) + _1524) * _1448;
        float _1534 = _1416 * 0.5;
        float _1535 = _1426 * 0.5;
        float _1536 = _1436 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_692, _693, _694), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4084 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1561 + 1.0))) + _1566) * _1449;
        _1583 = _1416;
        _1584 = _1415;
        _1585 = _1414;
        _1586 = _1426;
        _1587 = _1425;
        _1588 = _1424;
        _1589 = _1436;
        _1590 = _1435;
        _1591 = _1434;
        _1592 = _1449;
        _1593 = _1448;
        _1594 = _1447;
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1272;
        _1584 = _1272;
        _1585 = _1272;
        _1586 = _1272;
        _1587 = _1272;
        _1588 = _1272;
        _1589 = _1272;
        _1590 = _1272;
        _1591 = _1272;
        _1592 = _1272;
        _1593 = _1272;
        _1594 = _1272;
        _1595 = 0.0;
        _1596 = 0.0;
        _1597 = 0.0;
    }
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1284)) + _1284;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1285)) + _1285;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1286)) + _1286;
    float _1630 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1607));
    float _1651 = _878 * 0.5;
    float _1652 = _879 * 0.5;
    float _1653 = _880 * 0.5;
    float _1654 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1657 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1660 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1694;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1667 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1271, _1275, _1278, _1281));
        float _1671 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1675 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1682 = dot(vec4(cbModelParam._m0[39u]), vec4(_1651, _1652, _1653, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1705;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1696 = dot(vec4(cbModelParam._m0[40u]), vec4(_1651, _1652, _1653, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1709 = (_1705 * cbModelParam._m0[1u].x) + (_1694 * (1.0 - cbModelParam._m0[1u].x));
    float _1719 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _695);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1719 : min(cbModelParam._m0[25u].z, _1719));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1768 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1772 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1776 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1779 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1782 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1785 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1813;
        if (_1779 > 0.0)
        {
            _1813 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1813 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1782 > 0.0)
        {
            _2016 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2270;
        if (_1785 > 0.0)
        {
            _2270 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2270 = frontier_phi_38_33_ladder;
        }
        float _2272 = isnan(_2016) ? _1813 : (isnan(_1813) ? _2016 : min(_1813, _2016));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1779) + _1768;
        float _2278 = (_2273 * _1782) + _1772;
        float _2279 = (_2273 * _1785) + _1776;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2280;
        float _2284 = _2280 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 > _2284) || ((_2278 < _2282) || ((_2277 < _2282) || (_2277 > _2284))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1720);
            frontier_phi_16_38_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1801 = frontier_phi_16_38_ladder_2;
        _1803 = frontier_phi_16_38_ladder_1;
        _1805 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1720);
        _1801 = _1789.x * cbModelParam._m0[1u].y;
        _1803 = _1789.y * cbModelParam._m0[1u].y;
        _1805 = _1789.z * cbModelParam._m0[1u].y;
    }
    float _1809 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _695);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1809 : min(cbModelParam._m0[25u].w, _1809));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1878 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1881 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _2021;
        if (_1875 > 0.0)
        {
            _2021 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2297;
        if (_1878 > 0.0)
        {
            _2297 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2297 = frontier_phi_40_35_ladder;
        }
        float _2510;
        if (_1881 > 0.0)
        {
            _2510 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2510 = frontier_phi_49_46_ladder;
        }
        float _2512 = isnan(_2297) ? _2021 : (isnan(_2021) ? _2297 : min(_2021, _2297));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1875) + _1864;
        float _2518 = (_2513 * _1878) + _1868;
        float _2519 = (_2513 * _1881) + _1872;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1810);
            frontier_phi_25_49_ladder = _2718.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2718.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2718.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_25_49_ladder_2;
        _1902 = frontier_phi_25_49_ladder_1;
        _1904 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1810);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1917 = (((_905 * _854) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1919 = (((_905 * _856) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1902 - _1803)) + _1803);
    float _1921 = (((_905 * _857) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    uvec4 _1940 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1942 = _1940.x * 14u;
    uint _1943 = _1942 + 13u;
    float _1950 = _870 + (-1.0);
    float _1955 = (cbLight._m0[_1943].x * _1950) + 1.0;
    float _1956 = (cbLight._m0[_1943].y * _1950) + 1.0;
    float _1957 = (cbLight._m0[_1943].z * _1950) + 1.0;
    float _1958 = (cbLight._m0[_1943].w * _1950) + 1.0;
    uint _1959 = _1942 + 5u;
    float _1965 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1969 = _1942 + 4u;
    float _1975 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1979 = _1942 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_692, _693, _694));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_692, _693, _694));
    float _4220 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4231 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1959].x * _1965) * _2000) + ((cbLight._m0[_1969].x * _1975) * _1998);
    float _2008 = ((_1965 * cbLight._m0[_1959].y) * _2000) + ((_1975 * cbLight._m0[_1969].y) * _1998);
    float _2009 = ((_1965 * cbLight._m0[_1959].z) * _2000) + ((_1975 * cbLight._m0[_1969].z) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1942 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1942 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1942 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4242 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2053 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2241 = _1942 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1942 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4258 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2260 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2071 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2026;
        _2073 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2028;
        _2075 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2030;
    }
    uint _2078 = _1942 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _695) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1942].x + _772;
    float _2094 = cbLight._m0[_1942].y + _773;
    float _2095 = cbLight._m0[_1942].z + _774;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1942].xyz));
    float _4274 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2107 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2108 = dot(vec3(_692, _693, _694), vec3(_2100, _2101, _2102));
    float _4296 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2100, _2101, _2102));
    float _4307 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
    float _2129 = 0.959999978542327880859375 - _851;
    float _2131 = 0.959999978542327880859375 - _852;
    float _2132 = 0.959999978542327880859375 - _853;
    float _2139 = 1.0 - _2092;
    float _2150 = (0.5 / (((_2107 * ((_2106 * _2139) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2139) + _2092) * _2106))) * _2106;
    float _4318 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2163 = _1942 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _695) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1979].x + _772;
    float _2177 = cbLight._m0[_1979].y + _773;
    float _2178 = cbLight._m0[_1979].z + _774;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1979].xyz));
    float _4329 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2190 = dot(vec3(_692, _693, _694), vec3(_2183, _2184, _2185));
    float _4340 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2183, _2184, _2185));
    float _4351 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
    float _2216 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2107 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2216) + _2175) * _2189))) * _2189;
    float _4362 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2238 = (((((_2209 * _2129) + _854) * cbLight._m0[_2163].x) * _2228) * _1965) + (((((_2128 * _2129) + _854) * cbLight._m0[_2078].x) * _2152) * _1975);
    float _2239 = (((((_2209 * _2131) + _856) * cbLight._m0[_2163].y) * _2228) * _1965) + (((((_2128 * _2131) + _856) * cbLight._m0[_2078].y) * _2152) * _1975);
    float _2240 = (((((_2209 * _2132) + _857) * cbLight._m0[_2163].z) * _2228) * _1965) + (((((_2128 * _2132) + _857) * cbLight._m0[_2078].z) * _2152) * _1975);
    float _2302;
    float _2304;
    float _2306;
    if (_2015)
    {
        _2302 = _2238;
        _2304 = _2239;
        _2306 = _2240;
    }
    else
    {
        uint _2308 = _1942 + 2u;
        uint _2312 = _1942 + 10u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _695) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _772;
        float _2329 = cbLight._m0[_2308].y + _773;
        float _2330 = cbLight._m0[_2308].z + _774;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2308].xyz));
        float _4373 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2342 = dot(vec3(_692, _693, _694), vec3(_2335, _2336, _2337));
        float _4384 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4395 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_2107 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2368) + _2327) * _2341))) * _2341;
        float _4406 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2302 = (((((_2361 * _2129) + _854) * cbLight._m0[_2312].x) * _2380) * _2381) + _2238;
        _2304 = (((((_2361 * _2131) + _856) * cbLight._m0[_2312].y) * _2380) * _2381) + _2239;
        _2306 = (((((_2361 * _2132) + _857) * cbLight._m0[_2312].z) * _2380) * _2381) + _2240;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2033)
    {
        _2416 = _2302;
        _2418 = _2304;
        _2420 = _2306;
    }
    else
    {
        uint _2427 = _1942 + 3u;
        uint _2431 = _1942 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _695) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _772;
        float _2448 = cbLight._m0[_2427].y + _773;
        float _2449 = cbLight._m0[_2427].z + _774;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2427].xyz));
        float _4422 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2461 = dot(vec3(_692, _693, _694), vec3(_2454, _2455, _2456));
        float _4433 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4444 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2107 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2487) + _2446) * _2460))) * _2460;
        float _4455 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2416 = (((((_2480 * _2129) + _854) * cbLight._m0[_2431].x) * _2499) * _2500) + _2302;
        _2418 = (((((_2480 * _2131) + _856) * cbLight._m0[_2431].y) * _2499) * _2500) + _2304;
        _2420 = (((((_2480 * _2132) + _857) * cbLight._m0[_2431].z) * _2499) * _2500) + _2306;
    }
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_1940.y == 0u)
    {
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2575;
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2575;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2575;
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.x;
        uint _2602 = uint((float(_2590.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2591))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2591)));
        float _2612 = (log2(_2578 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2613 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        uint _2616 = uint(isnan(14.0) ? _2613 : (isnan(_2613) ? 14.0 : min(_2613, 14.0)));
        uvec4 _2621 = texelFetch(g_lightClusterGridBuffer, int(((_2616 << 2u) + (_2602 << 6u)) >> 2u));
        uint _2622 = _2621.x;
        uint _2623 = _2590.z;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((((1u << ((_2623 >> 4u) & 15u)) + 4294967295u) & _2622) == 0u) || ((_2623 & 240u) == 0u))
        {
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
        }
        else
        {
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            uint _2882 = 0u;
            uint _2891;
            bool _2892;
            for (;;)
            {
                _2891 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                _2892 = _2891 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2892)
                {
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2881;
                    frontier_phi_66_pred_2 = _2880;
                    frontier_phi_66_pred_3 = _2879;
                    frontier_phi_66_pred_4 = _2878;
                    frontier_phi_66_pred_5 = _2877;
                }
                else
                {
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    uint _3027;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2891;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    for (;;)
                    {
                        uint _3031 = uint(findLSB(_3027)) + (_2882 << 5u);
                        uint _3028 = (_3027 + 4294967295u) & _3027;
                        uint _3033 = _3031 * 48u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3053 = (_3031 * 48u) + 4u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3072 = (_3031 * 48u) + 8u;
                        vec3 _3083 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x));
                        float _3087 = _3047.x - _2576;
                        float _3088 = _3047.y - _2577;
                        float _3089 = _3047.z - _2578;
                        float _3090 = dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089));
                        float _3093 = inversesqrt(_3090);
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3097 = dot(vec3(_811, _814, _817), vec3(_3094, _3095, _3096));
                        float _3102 = 1.0 - (_3090 * _3047.w);
                        float _4481 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3104 = sqrt(_3090) * _3066.w;
                        float _3107 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3097) + _3108;
                        float _3114 = _3104 * _3104;
                        float _3118 = ((isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))) * _3103) / ((_3114 * 0.699999988079071044921875) + 1.0);
                        float _3122 = (-0.0) - _2576;
                        float _3123 = (-0.0) - _2577;
                        float _3124 = (-0.0) - _2578;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3139 = exp2(log2(1.0 / ((_3114 * 3.5) + 5.0)) * 0.25);
                        float _3140 = 1.0 - _886;
                        float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                        float _3148 = _3147 * _3147;
                        float _3149 = _3148 * _3148;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3152 = _3131 + _3096;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3160 = dot(vec3(_811, _814, _817), vec3(_3129, _3130, _3131));
                        float _4497 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3164 = dot(vec3(_811, _814, _817), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                        float _4508 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                        float _3172 = _3107 * _3148;
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3097) + _3173;
                        float _4519 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3178 = 1.0 - _3148;
                        float _3188 = (0.5 / (((_3177 * ((_3163 * _3178) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3148) * _3163))) * _3177;
                        float _4530 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3199 = (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3171 * _3171) * ((_3114 * 2.1991131305694580078125) + 3.141590118408203125))) * _3103;
                        _2951 = (_3118 * _3066.x) + _3024;
                        _2952 = (_3118 * _3066.y) + _3025;
                        _2953 = (_3118 * _3066.z) + _3026;
                        _2948 = (_3199 * _3083.x) + _3021;
                        _2949 = (_3199 * _3083.y) + _3022;
                        _2950 = (_3199 * _3083.z) + _3023;
                        if (_3028 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _3028;
                        }
                    }
                    frontier_phi_66_pred = _2948;
                    frontier_phi_66_pred_1 = _2953;
                    frontier_phi_66_pred_2 = _2952;
                    frontier_phi_66_pred_3 = _2951;
                    frontier_phi_66_pred_4 = _2950;
                    frontier_phi_66_pred_5 = _2949;
                }
                _2724 = frontier_phi_66_pred;
                _2734 = frontier_phi_66_pred_1;
                _2732 = frontier_phi_66_pred_2;
                _2730 = frontier_phi_66_pred_3;
                _2728 = frontier_phi_66_pred_4;
                _2726 = frontier_phi_66_pred_5;
                uint _2883 = _2882 + 1u;
                if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2876 = _2724;
                    _2877 = _2726;
                    _2878 = _2728;
                    _2879 = _2730;
                    _2880 = _2732;
                    _2881 = _2734;
                    _2882 = _2883;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
        }
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.z;
        uint _2740 = (_2738 >> 8u) & 15u;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        if (((4294967295u << _2740) & _2622) == 0u)
        {
            _2844 = _2723;
            _2846 = _2725;
            _2848 = _2727;
            _2850 = _2729;
            _2852 = _2731;
            _2854 = _2733;
        }
        else
        {
            float _2869 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
            float _2870 = _2869 * _2576;
            float _2871 = _2869 * _2577;
            float _2872 = _2869 * _2578;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2740 < ((_2738 >> 12u) & 15u))
            {
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _3004 = _2723;
                float _3005 = _2725;
                float _3006 = _2727;
                float _3007 = _2729;
                float _3008 = _2731;
                float _3009 = _2733;
                uint _3010 = _2740;
                uint _3019;
                bool _3020;
                for (;;)
                {
                    _3019 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                    _3020 = _3019 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3020)
                    {
                        frontier_phi_77_pred = _3009;
                        frontier_phi_77_pred_1 = _3008;
                        frontier_phi_77_pred_2 = _3007;
                        frontier_phi_77_pred_3 = _3006;
                        frontier_phi_77_pred_4 = _3005;
                        frontier_phi_77_pred_5 = _3004;
                    }
                    else
                    {
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3226 = _3004;
                        float _3227 = _3005;
                        float _3228 = _3006;
                        float _3229 = _3007;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        uint _3232 = _3019;
                        uint _3233;
                        vec4 _3258;
                        float _3259;
                        vec4 _3274;
                        vec3 _3286;
                        vec4 _3301;
                        vec4 _3316;
                        float _3362;
                        bool _3363;
                        for (;;)
                        {
                            uint _3243 = ((_3010 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3232));
                            _3233 = (_3232 + 4294967295u) & _3232;
                            uint _3245 = _3243 * 40u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3259 = _3258.w;
                            uint _3261 = (_3243 * 40u) + 4u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3243 * 40u) + 8u;
                            _3286 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x));
                            uint _3288 = (_3243 * 40u) + 16u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3243 * 40u) + 20u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3243 * 40u) + 24u;
                            vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3337 = (_3243 * 40u) + 28u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3362 = fma(_2578, _3350.z, fma(_2577, _3350.y, _3350.x * _2576)) + _3350.w;
                            _3363 = !((fma(_2578, _3331.z, fma(_2577, _3331.y, _3331.x * _2576)) + _3331.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3363)
                            {
                                float _3390 = _3258.x - _2576;
                                float _3391 = _3258.y - _2577;
                                float _3392 = _3258.z - _2578;
                                float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                                float _3396 = inversesqrt(_3393);
                                float _3397 = _3396 * _3390;
                                float _3398 = _3396 * _3391;
                                float _3399 = _3396 * _3392;
                                float _3403 = 1.0 - (_3393 / (_3259 * _3259));
                                float _4541 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3408 = sqrt(_3393) * _3274.w;
                                float _3410 = 1.39999997615814208984375 / (_3408 + 1.39999997615814208984375);
                                float _3411 = _3410 * _3410;
                                float _3414 = ((1.0 - _3411) * dot(vec3(_3397, _3398, _3399), vec3(_811, _814, _817))) + _3411;
                                float _3417 = _3408 * _3408;
                                float _3421 = (fma(_2578, _3301.z, fma(_2577, _3301.y, _3301.x * _2576)) + _3301.w) / _3362;
                                float _3422 = (fma(_2578, _3316.z, fma(_2577, _3316.y, _3316.x * _2576)) + _3316.w) / _3362;
                                float _3426 = 1.0 - dot(vec2(_3421, _3422), vec2(_3421, _3422));
                                float _4557 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3428 = _3427 * (((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3404) / ((_3417 * 0.699999988079071044921875) + 1.0));
                                float _3440 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                                float _3441 = 1.0 - _886;
                                float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                                float _3449 = _3448 * _3448;
                                float _3450 = _3449 * _3449;
                                float _3451 = _3397 - _2870;
                                float _3452 = _3398 - _2871;
                                float _3453 = _3399 - _2872;
                                float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                                float _3461 = dot(vec3(_811, _814, _817), vec3((-0.0) - _2870, (-0.0) - _2871, (-0.0) - _2872));
                                float _4568 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3465 = dot(vec3(_811, _814, _817), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                                float _4579 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                                float _3473 = _3410 * _3449;
                                float _3474 = _3473 * _3473;
                                float _3480 = ((1.0 - _3474) * dot(vec3(_811, _814, _817), vec3(_3397, _3398, _3399))) + _3474;
                                float _4590 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3482 = 1.0 - _3449;
                                float _3492 = (0.5 / (((_3481 * ((_3464 * _3482) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3481 * _3482) + _3449) * _3464))) * _3481;
                                float _4601 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3502 = (_3427 * _3404) * (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) / ((_3472 * _3472) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3428 * _3274.y;
                                frontier_phi_83_pred_1 = _3428 * _3274.x;
                                frontier_phi_83_pred_2 = _3502 * _3286.z;
                                frontier_phi_83_pred_3 = _3502 * _3286.y;
                                frontier_phi_83_pred_4 = _3502 * _3286.x;
                                frontier_phi_83_pred_5 = _3428 * _3274.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3510 = frontier_phi_83_pred;
                            _3509 = frontier_phi_83_pred_1;
                            _3508 = frontier_phi_83_pred_2;
                            _3507 = frontier_phi_83_pred_3;
                            _3506 = frontier_phi_83_pred_4;
                            _3511 = frontier_phi_83_pred_5;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            _3218 = _3511 + _3231;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            if (_3233 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3233;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3218;
                        frontier_phi_77_pred_1 = _3217;
                        frontier_phi_77_pred_2 = _3216;
                        frontier_phi_77_pred_3 = _3215;
                        frontier_phi_77_pred_4 = _3214;
                        frontier_phi_77_pred_5 = _3213;
                    }
                    _2855 = frontier_phi_77_pred;
                    _2853 = frontier_phi_77_pred_1;
                    _2851 = frontier_phi_77_pred_2;
                    _2849 = frontier_phi_77_pred_3;
                    _2847 = frontier_phi_77_pred_4;
                    _2845 = frontier_phi_77_pred_5;
                    uint _3011 = _3010 + 1u;
                    if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3004 = _2845;
                        _3005 = _2847;
                        _3006 = _2849;
                        _3007 = _2851;
                        _3008 = _2853;
                        _3009 = _2855;
                        _3010 = _3011;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2849;
                frontier_phi_58_59_ladder_1 = _2855;
                frontier_phi_58_59_ladder_2 = _2853;
                frontier_phi_58_59_ladder_3 = _2851;
                frontier_phi_58_59_ladder_4 = _2847;
                frontier_phi_58_59_ladder_5 = _2845;
            }
            else
            {
                frontier_phi_58_59_ladder = _2727;
                frontier_phi_58_59_ladder_1 = _2733;
                frontier_phi_58_59_ladder_2 = _2731;
                frontier_phi_58_59_ladder_3 = _2729;
                frontier_phi_58_59_ladder_4 = _2725;
                frontier_phi_58_59_ladder_5 = _2723;
            }
            _2844 = frontier_phi_58_59_ladder_5;
            _2846 = frontier_phi_58_59_ladder_4;
            _2848 = frontier_phi_58_59_ladder;
            _2850 = frontier_phi_58_59_ladder_3;
            _2852 = frontier_phi_58_59_ladder_2;
            _2854 = frontier_phi_58_59_ladder_1;
        }
        float _2859 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2635 = (_2859 * _2850) + _2071;
        _2637 = (_2859 * _2852) + _2073;
        _2639 = (_2859 * _2854) + _2075;
        _2641 = ((_2844 * _854) * _2859) + _2416;
        _2643 = ((_2846 * _856) * _2859) + _2418;
        _2645 = ((_2848 * _857) * _2859) + _2420;
    }
    else
    {
        _2635 = _2071;
        _2637 = _2073;
        _2639 = _2075;
        _2641 = _2416;
        _2643 = _2418;
        _2645 = _2420;
    }
    float _4617 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4628 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4639 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2662 = ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2635 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _870))) + ((_2641 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1709)) * cbPerFrame._m0[3u].x);
    float _2663 = ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2637 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _870))) + ((_2643 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1709)) * cbPerFrame._m0[3u].x);
    float _2664 = ((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2639 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _870))) + ((_2645 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1709)) * cbPerFrame._m0[3u].x);
    uint _2665 = _244 + 6u;
    float _2673 = _792 / cbSceneParam._m0[86u].x;
    float _2674 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2688 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2690 = _2688.x;
    float _2691 = _2688.y;
    float _2692 = _2688.z;
    float _2693 = _2688.w;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2748 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2749 = _2748 / _714;
        float _2760 = _2749 * _765;
        float _2761 = _766 * _2749;
        float _2762 = (-0.0) - _2761;
        float _2764 = _2749 * _767;
        float _2766 = (cbSceneParam._m0[77u].w * _2762) / _2748;
        float _2767 = _2766 + cbSceneParam._m0[79u].w;
        float _2768 = cbSceneParam._m0[79u].w - _2761;
        float _2774 = sqrt(((_2760 * _2760) + (_2761 * _2761)) + (_2764 * _2764));
        float _2777 = (1.0 - (cbSceneParam._m0[77u].w / _2748)) * _2774;
        float _2782 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2784 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2961;
        if (abs((_2762 - _2766) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2961 = ((((_2767 > 0.0) ? exp2(_2782 * _2767) : (2.0 - exp2(_2784 * _2767))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2777;
        }
        else
        {
            float _2905 = 1.0 / cbSceneParam._m0[80u].x;
            float _2906 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : max(_2767, _2768));
            float _2907 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : min(_2767, _2768));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            _2961 = ((abs(_2774 / _2762) * cbSceneParam._m0[80u].y) * ((((_2916 - _2917) * 2.0) - ((exp2(_2782 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0)))) - exp2(_2782 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))))) * _2905)) - ((exp2(_2784 * _2916) - exp2(_2784 * _2917)) * _2905))) + (_2777 * cbSceneParam._m0[80u].z);
        }
        vec4 _2963 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, 1.0), 0.0);
        float _2972 = exp2((_2961 * (-1.44269502162933349609375)) * (1.0 - _2963.w));
        float _2973 = log2(_2972);
        float _2989 = log2(_2693);
        _2786 = (exp2(_2989 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].x)) * _2963.x) / cbSceneParam._m0[78u].x)) + _2690;
        _2788 = (exp2(_2989 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].y)) * _2963.y) / cbSceneParam._m0[78u].y)) + _2691;
        _2790 = (exp2(_2989 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].z)) * _2963.z) / cbSceneParam._m0[78u].z)) + _2692;
        _2792 = _2972 * _2693;
    }
    else
    {
        _2786 = _2690;
        _2788 = _2691;
        _2790 = _2692;
        _2792 = _2693;
    }
    bool _2999;
    vec4 _2802;
    vec4 _2824;
    float _2826;
    float _2830;
    float _2831;
    float _2832;
    float _2833;
    bool _2843;
    for (;;)
    {
        _2802 = cbMatDynParam._m0[0u];
        float _2804 = roundEven(_2802.y);
        bool _2805 = _2804 == 3.0;
        float _2806 = log2(_2792);
        float _2813 = exp2(_2806 * cbSceneParam._m0[78u].x) * _2662;
        float _2814 = exp2(_2806 * cbSceneParam._m0[78u].y) * _2663;
        float _2815 = exp2(_2806 * cbSceneParam._m0[78u].z) * _2664;
        float _2822 = _781 + (-0.5);
        _2824 = cbMtdParam._m0[1u];
        _2826 = _2824.y * _2822;
        float _2829 = (_2804 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2830 = _2829 * (_2805 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2786)));
        _2831 = _2829 * (_2805 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2788)));
        _2832 = _2829 * (_2805 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2790)));
        _2833 = _2822 * 0.999000012874603271484375;
        _2843 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2843)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2833) < 0.5)
            {
                _2999 = true;
                break;
            }
        }
        uint _2940 = _830 + uint(_2802.w);
        if ((cbInstanceData._m0[_2940].w < 1.0) && ((cbInstanceData._m0[_2940].w + _2833) < 0.5))
        {
            _2999 = true;
            break;
        }
        if ((_2826 + 1.0) < _2824.x)
        {
            _2999 = true;
            break;
        }
        _2999 = false;
        break;
    }
    float _3204;
    if (_2999)
    {
        discard_state = true;
        _3204 = 0.0;
    }
    else
    {
        _3204 = cbInstanceData._m0[_2665].w;
    }
    SV_Target.x = _2830;
    SV_Target.y = _2831;
    SV_Target.z = _2832;
    SV_Target.w = _3204;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2665].w;
    discard_exit();
}


