#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1121;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _332 = (_323.x * 2.0) + (-1.0);
    float _334 = (_323.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3449 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _360 = _358.x;
    float _361 = 1.0 - _360;
    float _370 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _373 = ((isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : min(_370, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _382 = (_373 - ((((((_360 - _361) * cbMtdParam._m0[24u].z) + _361) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _373))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3470 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _390 = (_383 * ((_303.x * cbMtdParam._m0[18u].x) - _282)) + _282;
    float _391 = (_383 * ((_303.y * cbMtdParam._m0[18u].y) - _283)) + _283;
    float _392 = (_383 * ((_303.z * cbMtdParam._m0[18u].z) - _284)) + _284;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _407 = _405.x;
    float _408 = 1.0 - _407;
    float _437 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_407 - _408) * cbMtdParam._m0[24u].w) + _408) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3481 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _446 = ((((cbMtdParam._m0[10u].x - _390) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _438) + _390;
    float _447 = ((((cbMtdParam._m0[10u].y - _391) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _438) + _391;
    float _448 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _392)) * _438) + _392;
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _463 = _461.x;
    float _465 = _463 - (_463 * _383);
    float _467 = _465 - (_465 * _438);
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _488 = (_481.x * 2.0) + (-1.0);
    float _489 = (_481.y * 2.0) + (-1.0);
    float _490 = dot(vec2(_488, _489), vec2(_488, _489));
    float _3492 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _498 = (_383 * (_481.z - _327)) + _327;
    float _501 = ((cbMtdParam._m0[23u].y - _498) * _438) + _498;
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _529 = (_523.x * 2.0) + (-1.0);
    float _530 = (_523.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3503 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _548 = (((_488 - _332) + (cbMtdParam._m0[21u].x * _332)) * _383) + _332;
    float _549 = (((_489 - _334) + (cbMtdParam._m0[21u].x * _334)) * _383) + _334;
    float _550 = (_383 * (sqrt(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) - _341)) + _341;
    float _561 = (((_529 - _548) + (_548 * cbMtdParam._m0[22u].z)) * _438) + _548;
    float _562 = (((_530 - _549) + (_549 * cbMtdParam._m0[22u].z)) * _438) + _549;
    float _563 = ((sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) - _550) * _438) + _550;
    float _565 = cbMtdParam._m0[22u].x + _323.w;
    float _568 = fma(_563, _224 * NORMAL.x, fma(_562, _231 * TANGENT.x, (_217 * _209) * _561));
    float _571 = fma(_563, _224 * NORMAL.y, fma(_562, _231 * TANGENT.y, (_217 * _210) * _561));
    float _574 = fma(_563, _224 * NORMAL.z, fma(_562, _231 * TANGENT.z, (_217 * _211) * _561));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3514 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _582 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3536 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3547 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3558 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3569 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _587 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _601 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _688 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _691 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _694 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _708 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _714 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_708].x;
    float _715 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_708].y;
    float _716 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_708].z;
    float _3580 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _720 = 1.0 - _587;
    float _721 = _717 * _720;
    float _722 = _718 * _720;
    float _723 = _719 * _720;
    float _728 = (_717 + (-0.039999999105930328369140625)) * _587;
    float _729 = (_718 + (-0.039999999105930328369140625)) * _587;
    float _730 = (_719 + (-0.039999999105930328369140625)) * _587;
    float _731 = _728 + 0.039999999105930328369140625;
    float _733 = _729 + 0.039999999105930328369140625;
    float _734 = _730 + 0.039999999105930328369140625;
    vec4 _743 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _747 = ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * TEXCOORD_5.w) * _743.x;
    float _748 = dot(vec3(_579, _580, _581), vec3(_658, _659, _660));
    float _751 = _748 * 2.0;
    float _755 = (_751 * _579) - _658;
    float _756 = (_751 * _580) - _659;
    float _757 = (_751 * _581) - _660;
    float _761 = abs(dot(vec3(_658, _659, _660), vec3(_579, _580, _581)));
    float _3613 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _763 = sqrt(_582);
    float _776 = exp2((_763 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_763 * 3.0));
    float _782 = (1.0 - _776) * ((_763 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _783 = _776 * _763;
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1120;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _845 = fma(_819, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811));
        float _849 = fma(_819, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811));
        float _853 = fma(_819, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811));
        float _878 = _811 + _579;
        float _879 = _815 + _580;
        float _880 = _819 + _581;
        float _890 = fma(_880, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878)) - _845;
        float _891 = fma(_880, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878)) - _849;
        float _892 = fma(_880, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878)) - _853;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_845 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_849 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[34u].z) + ((((((_853 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _948 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_914.x + (-0.5));
        float _950 = _948 * (_914.y + (-0.5));
        float _951 = _948 * (_914.z + (-0.5));
        float _958 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_921.x + (-0.5));
        float _960 = _958 * (_921.y + (-0.5));
        float _961 = _958 * (_921.z + (-0.5));
        float _968 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_928.x + (-0.5));
        float _970 = _968 * (_928.y + (-0.5));
        float _971 = _968 * (_928.z + (-0.5));
        float _978 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_935.x + (-0.5));
        float _980 = _978 * (_935.y + (-0.5));
        float _981 = _978 * (_935.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1002 = (dot(vec3(_579, _580, _581), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1012 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3661 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1014 + 1.0))) + _1019) * _982;
        float _1029 = _950 * 0.5;
        float _1030 = _960 * 0.5;
        float _1031 = _970 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_579, _580, _581), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3694 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1056 + 1.0))) + _1061) * _983;
        float _1071 = _951 * 0.5;
        float _1072 = _961 * 0.5;
        float _1073 = _971 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_579, _580, _581), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3727 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1098 + 1.0))) + _1103) * _984;
        _1120 = _951;
        _1122 = _950;
        _1123 = _949;
        _1124 = _961;
        _1125 = _960;
        _1126 = _959;
        _1127 = _971;
        _1128 = _970;
        _1129 = _969;
        _1130 = _984;
        _1131 = _983;
        _1132 = _982;
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _1121;
        _1122 = _1121;
        _1123 = _1121;
        _1124 = _1121;
        _1125 = _1121;
        _1126 = _1121;
        _1127 = _1121;
        _1128 = _1121;
        _1129 = _1121;
        _1130 = _1121;
        _1131 = _1121;
        _1132 = _1121;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_819, cbModelParam._m0[30u].z, fma(_815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _811));
        float _1164 = fma(_819, cbModelParam._m0[31u].z, fma(_815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _811));
        float _1168 = fma(_819, cbModelParam._m0[32u].z, fma(_815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _811));
        float _1191 = _811 + _579;
        float _1192 = _815 + _580;
        float _1193 = _819 + _581;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_579, _580, _581), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3790 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_579, _580, _581), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3823 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_579, _580, _581), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3856 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1121;
        _1430 = _1121;
        _1431 = _1121;
        _1432 = _1121;
        _1433 = _1121;
        _1434 = _1121;
        _1435 = _1121;
        _1436 = _1121;
        _1437 = _1121;
        _1438 = _1121;
        _1439 = _1121;
        _1440 = _1121;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1133)) + _1133;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1134)) + _1134;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1135)) + _1135;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _755 * 0.5;
    float _1498 = _756 * 0.5;
    float _1499 = _757 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1120, _1124, _1127, _1130));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1613 = fma(_819, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811)) + cbModelParam._m0[13u].w;
        float _1617 = fma(_819, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811)) + cbModelParam._m0[14u].w;
        float _1621 = fma(_819, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811)) + cbModelParam._m0[15u].w;
        float _1624 = fma(_757, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755));
        float _1627 = fma(_757, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755));
        float _1630 = fma(_757, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755));
        float _1658;
        if (_1624 > 0.0)
        {
            _1658 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1658 = frontier_phi_14_12_ladder;
        }
        float _1861;
        if (_1627 > 0.0)
        {
            _1861 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1861 = frontier_phi_23_19_ladder;
        }
        float _2115;
        if (_1630 > 0.0)
        {
            _2115 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2115 = frontier_phi_35_30_ladder;
        }
        float _2117 = isnan(_1861) ? _1658 : (isnan(_1658) ? _1861 : min(_1658, _1861));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1624) + _1613;
        float _2123 = (_2118 * _1627) + _1617;
        float _2124 = (_2118 * _1630) + _1621;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2125;
        float _2129 = _2125 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 > _2129) || ((_2123 < _2127) || ((_2122 < _2127) || (_2122 > _2129))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2124, cbModelParam._m0[9u].z, fma(_2123, cbModelParam._m0[9u].y, _2122 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2124, cbModelParam._m0[10u].z, fma(_2123, cbModelParam._m0[10u].y, _2122 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2124, cbModelParam._m0[11u].z, fma(_2123, cbModelParam._m0[11u].y, _2122 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_13_35_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1646 = frontier_phi_13_35_ladder_2;
        _1648 = frontier_phi_13_35_ladder_1;
        _1650 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_755, _756, _757), _1566);
        _1646 = _1634.x * cbModelParam._m0[1u].y;
        _1648 = _1634.y * cbModelParam._m0[1u].y;
        _1650 = _1634.z * cbModelParam._m0[1u].y;
    }
    float _1654 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1654 : min(cbModelParam._m0[25u].w, _1654));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1708 = fma(_819, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811)) + cbModelParam._m0[21u].w;
        float _1712 = fma(_819, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811)) + cbModelParam._m0[22u].w;
        float _1716 = fma(_819, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811)) + cbModelParam._m0[23u].w;
        float _1719 = fma(_757, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755));
        float _1722 = fma(_757, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755));
        float _1725 = fma(_757, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755));
        float _1866;
        if (_1719 > 0.0)
        {
            _1866 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1866 = frontier_phi_25_21_ladder;
        }
        float _2142;
        if (_1722 > 0.0)
        {
            _2142 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2142 = frontier_phi_37_32_ladder;
        }
        float _2355;
        if (_1725 > 0.0)
        {
            _2355 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2355 = frontier_phi_46_43_ladder;
        }
        float _2357 = isnan(_2142) ? _1866 : (isnan(_1866) ? _2142 : min(_1866, _2142));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1719) + _1708;
        float _2363 = (_2358 * _1722) + _1712;
        float _2364 = (_2358 * _1725) + _1716;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2365;
        float _2368 = _2365 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2364 > _2368) || ((_2364 < _2366) || ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 < _2366) || (_2362 > _2368))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2364, cbModelParam._m0[17u].z, fma(_2363, cbModelParam._m0[17u].y, _2362 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2364, cbModelParam._m0[18u].z, fma(_2363, cbModelParam._m0[18u].y, _2362 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2364, cbModelParam._m0[19u].z, fma(_2363, cbModelParam._m0[19u].y, _2362 * cbModelParam._m0[19u].x))), _1655);
            frontier_phi_22_46_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1744 = frontier_phi_22_46_ladder_2;
        _1746 = frontier_phi_22_46_ladder_1;
        _1748 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_755, _756, _757), _1655);
        _1744 = _1728.x * cbModelParam._m0[1u].z;
        _1746 = _1728.y * cbModelParam._m0[1u].z;
        _1748 = _1728.z * cbModelParam._m0[1u].z;
    }
    float _1761 = (((_782 * _731) + _783) * _747) * ((cbModelParam._m0[1u].w * (_1744 - _1646)) + _1646);
    float _1763 = (((_782 * _733) + _783) * _747) * ((cbModelParam._m0[1u].w * (_1746 - _1648)) + _1648);
    float _1765 = (((_782 * _734) + _783) * _747) * ((cbModelParam._m0[1u].w * (_1748 - _1650)) + _1650);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, _1761 * cbSceneParam._m0[91u].x));
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _747 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1820 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1824 = _1786 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_579, _580, _581));
    float _1838 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_579, _580, _581));
    float _3992 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _4003 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1843 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.3183098733425140380859375;
    float _1845 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1852 = ((cbLight._m0[_1803].x * _1809) * _1845) + ((cbLight._m0[_1813].x * _1820) * _1843);
    float _1853 = ((_1809 * cbLight._m0[_1803].y) * _1845) + ((_1820 * cbLight._m0[_1813].y) * _1843);
    float _1854 = ((_1809 * cbLight._m0[_1803].z) * _1845) + ((_1820 * cbLight._m0[_1813].z) * _1843);
    uvec4 _1858 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1860 = _1858.x == 0u;
    float _1871;
    float _1873;
    float _1875;
    if (_1860)
    {
        _1871 = _1852;
        _1873 = _1853;
        _1875 = _1854;
    }
    else
    {
        uint _1879 = _1786 + 6u;
        float _1895 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _4014 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1898 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1871 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1852;
        _1873 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1853;
        _1875 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1854;
    }
    bool _1878 = _1858.y == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1878)
    {
        _1916 = _1871;
        _1918 = _1873;
        _1920 = _1875;
    }
    else
    {
        uint _2086 = _1786 + 7u;
        float _2102 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4030 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2105 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1916 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1871;
        _1918 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1873;
        _1920 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1875;
    }
    uint _1923 = _1786 + 8u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _582) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1786].x + _658;
    float _1939 = cbLight._m0[_1786].y + _659;
    float _1940 = cbLight._m0[_1786].z + _660;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1786].xyz));
    float _4046 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _1952 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1953 = dot(vec3(_579, _580, _581), vec3(_1945, _1946, _1947));
    float _4068 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1945, _1946, _1947));
    float _4079 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1937 * _1937;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
    float _1974 = 0.959999978542327880859375 - _728;
    float _1976 = 0.959999978542327880859375 - _729;
    float _1977 = 0.959999978542327880859375 - _730;
    float _1984 = 1.0 - _1937;
    float _1995 = (0.5 / (((_1952 * ((_1951 * _1984) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _1984) + _1937) * _1951))) * _1951;
    float _4090 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    uint _2008 = _1786 + 9u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _582) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1824].x + _658;
    float _2022 = cbLight._m0[_1824].y + _659;
    float _2023 = cbLight._m0[_1824].z + _660;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1824].xyz));
    float _4101 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2035 = dot(vec3(_579, _580, _581), vec3(_2028, _2029, _2030));
    float _4112 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_2028, _2029, _2030));
    float _4123 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2020 * _2020;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2054 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
    float _2061 = 1.0 - _2020;
    float _2071 = (0.5 / (((_1952 * ((_2034 * _2061) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2061) + _2020) * _2034))) * _2034;
    float _4134 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    float _2083 = (((((_2054 * _1974) + _731) * cbLight._m0[_2008].x) * _2073) * _1809) + (((((_1973 * _1974) + _731) * cbLight._m0[_1923].x) * _1997) * _1820);
    float _2084 = (((((_2054 * _1976) + _733) * cbLight._m0[_2008].y) * _2073) * _1809) + (((((_1973 * _1976) + _733) * cbLight._m0[_1923].y) * _1997) * _1820);
    float _2085 = (((((_2054 * _1977) + _734) * cbLight._m0[_2008].z) * _2073) * _1809) + (((((_1973 * _1977) + _734) * cbLight._m0[_1923].z) * _1997) * _1820);
    float _2147;
    float _2149;
    float _2151;
    if (_1860)
    {
        _2147 = _2083;
        _2149 = _2084;
        _2151 = _2085;
    }
    else
    {
        uint _2153 = _1786 + 2u;
        uint _2157 = _1786 + 10u;
        float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _582) * 0.949999988079071044921875);
        float _2172 = _2171 * _2171;
        float _2173 = cbLight._m0[_2153].x + _658;
        float _2174 = cbLight._m0[_2153].y + _659;
        float _2175 = cbLight._m0[_2153].z + _660;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2180 = _2179 * _2173;
        float _2181 = _2179 * _2174;
        float _2182 = _2179 * _2175;
        float _2183 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2153].xyz));
        float _4145 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2187 = dot(vec3(_579, _580, _581), vec3(_2180, _2181, _2182));
        float _4156 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2191 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2180, _2181, _2182));
        float _4167 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2195 = _2172 * _2172;
        float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
        float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
        float _2213 = 1.0 - _2172;
        float _2223 = (0.5 / (((_1952 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2213) + _2172) * _2186))) * _2186;
        float _4178 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2147 = (((((_2206 * _1974) + _731) * cbLight._m0[_2157].x) * _2225) * _2226) + _2083;
        _2149 = (((((_2206 * _1976) + _733) * cbLight._m0[_2157].y) * _2225) * _2226) + _2084;
        _2151 = (((((_2206 * _1977) + _734) * cbLight._m0[_2157].z) * _2225) * _2226) + _2085;
    }
    float _2261;
    float _2263;
    float _2265;
    if (_1878)
    {
        _2261 = _2147;
        _2263 = _2149;
        _2265 = _2151;
    }
    else
    {
        uint _2272 = _1786 + 3u;
        uint _2276 = _1786 + 11u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _582) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _658;
        float _2293 = cbLight._m0[_2272].y + _659;
        float _2294 = cbLight._m0[_2272].z + _660;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2272].xyz));
        float _4194 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2306 = dot(vec3(_579, _580, _581), vec3(_2299, _2300, _2301));
        float _4205 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4216 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2332 = 1.0 - _2291;
        float _2342 = (0.5 / (((_1952 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2332) + _2291) * _2305))) * _2305;
        float _4227 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2344 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2345 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2261 = (((((_2325 * _1974) + _731) * cbLight._m0[_2276].x) * _2344) * _2345) + _2147;
        _2263 = (((((_2325 * _1976) + _733) * cbLight._m0[_2276].y) * _2344) * _2345) + _2149;
        _2265 = (((((_2325 * _1977) + _734) * cbLight._m0[_2276].z) * _2344) * _2345) + _2151;
    }
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_1784.y == 0u)
    {
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2420;
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2420;
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2420;
        uvec4 _2435 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2436 = _2435.x;
        uint _2447 = uint((float(_2435.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2436))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2436)));
        float _2457 = (log2(_2423 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2458 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        uint _2461 = uint(isnan(14.0) ? _2458 : (isnan(_2458) ? 14.0 : min(_2458, 14.0)));
        uvec4 _2466 = texelFetch(g_lightClusterGridBuffer, int(((_2461 << 2u) + (_2447 << 6u)) >> 2u));
        uint _2467 = _2466.x;
        uint _2468 = _2435.z;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((((1u << ((_2468 >> 4u) & 15u)) + 4294967295u) & _2467) == 0u) || ((_2468 & 240u) == 0u))
        {
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
        }
        else
        {
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2461 << 5u) + (_2447 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2729)
                {
                    frontier_phi_61_pred = _2713;
                    frontier_phi_61_pred_1 = _2718;
                    frontier_phi_61_pred_2 = _2717;
                    frontier_phi_61_pred_3 = _2716;
                    frontier_phi_61_pred_4 = _2715;
                    frontier_phi_61_pred_5 = _2714;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2728;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2719 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        float _2903 = _2863.x - _2421;
                        float _2904 = _2863.y - _2422;
                        float _2905 = _2863.z - _2423;
                        float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                        float _2909 = inversesqrt(_2906);
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2913 = dot(vec3(_688, _691, _694), vec3(_2910, _2911, _2912));
                        float _2918 = 1.0 - (_2906 * _2863.w);
                        float _4253 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2920 = sqrt(_2906) * _2882.w;
                        float _2923 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2913) + _2924;
                        float _2930 = _2920 * _2920;
                        float _2934 = ((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2919) / ((_2930 * 0.699999988079071044921875) + 1.0);
                        float _2938 = (-0.0) - _2421;
                        float _2939 = (-0.0) - _2422;
                        float _2940 = (-0.0) - _2423;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2955 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2956 = 1.0 - _763;
                        float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                        float _2964 = _2963 * _2963;
                        float _2965 = _2964 * _2964;
                        float _2966 = _2945 + _2910;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2976 = dot(vec3(_688, _691, _694), vec3(_2945, _2946, _2947));
                        float _4269 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2980 = dot(vec3(_688, _691, _694), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                        float _4280 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                        float _2988 = _2923 * _2964;
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2913) + _2989;
                        float _4291 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2994 = 1.0 - _2964;
                        float _3004 = (0.5 / (((_2993 * ((_2979 * _2994) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2964) * _2979))) * _2993;
                        float _4302 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3015 = (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_2987 * _2987) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2919;
                        _2772 = (_2934 * _2882.x) + _2840;
                        _2773 = (_2934 * _2882.y) + _2841;
                        _2774 = (_2934 * _2882.z) + _2842;
                        _2769 = (_3015 * _2899.x) + _2837;
                        _2770 = (_3015 * _2899.y) + _2838;
                        _2771 = (_3015 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_61_pred = _2769;
                    frontier_phi_61_pred_1 = _2774;
                    frontier_phi_61_pred_2 = _2773;
                    frontier_phi_61_pred_3 = _2772;
                    frontier_phi_61_pred_4 = _2771;
                    frontier_phi_61_pred_5 = _2770;
                }
                _2569 = frontier_phi_61_pred;
                _2579 = frontier_phi_61_pred_1;
                _2577 = frontier_phi_61_pred_2;
                _2575 = frontier_phi_61_pred_3;
                _2573 = frontier_phi_61_pred_4;
                _2571 = frontier_phi_61_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2569;
                    _2714 = _2571;
                    _2715 = _2573;
                    _2716 = _2575;
                    _2717 = _2577;
                    _2718 = _2579;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
        }
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.z;
        uint _2585 = (_2583 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2585) & _2467) == 0u)
        {
            _2681 = _2568;
            _2683 = _2570;
            _2685 = _2572;
            _2687 = _2574;
            _2689 = _2576;
            _2691 = _2578;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
            float _2707 = _2706 * _2421;
            float _2708 = _2706 * _2422;
            float _2709 = _2706 * _2423;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2585 < ((_2583 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2820 = _2568;
                float _2821 = _2570;
                float _2822 = _2572;
                float _2823 = _2574;
                float _2824 = _2576;
                float _2825 = _2578;
                uint _2826 = _2585;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2461 << 5u) + (_2447 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2836)
                    {
                        frontier_phi_67_pred = _2823;
                        frontier_phi_67_pred_1 = _2824;
                        frontier_phi_67_pred_2 = _2825;
                        frontier_phi_67_pred_3 = _2822;
                        frontier_phi_67_pred_4 = _2821;
                        frontier_phi_67_pred_5 = _2820;
                    }
                    else
                    {
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3033 = _2820;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        uint _3039 = _2835;
                        uint _3040;
                        vec4 _3065;
                        float _3066;
                        vec4 _3081;
                        vec3 _3093;
                        vec4 _3109;
                        vec4 _3125;
                        float _3171;
                        bool _3172;
                        for (;;)
                        {
                            uint _3050 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3039));
                            _3040 = (_3039 + 4294967295u) & _3039;
                            uint _3052 = _3050 * 40u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3066 = _3065.w;
                            uint _3068 = (_3050 * 40u) + 4u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3050 * 40u) + 8u;
                            _3093 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x));
                            uint _3096 = (_3050 * 40u) + 16u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3112 = (_3050 * 40u) + 20u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3050 * 40u) + 24u;
                            vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3146 = (_3050 * 40u) + 28u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            _3171 = fma(_2423, _3159.z, fma(_2422, _3159.y, _3159.x * _2421)) + _3159.w;
                            _3172 = !((fma(_2423, _3140.z, fma(_2422, _3140.y, _3140.x * _2421)) + _3140.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3172)
                            {
                                float _3199 = _3065.x - _2421;
                                float _3200 = _3065.y - _2422;
                                float _3201 = _3065.z - _2423;
                                float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                                float _3205 = inversesqrt(_3202);
                                float _3206 = _3205 * _3199;
                                float _3207 = _3205 * _3200;
                                float _3208 = _3205 * _3201;
                                float _3212 = 1.0 - (_3202 / (_3066 * _3066));
                                float _4313 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3217 = sqrt(_3202) * _3081.w;
                                float _3219 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                                float _3220 = _3219 * _3219;
                                float _3223 = ((1.0 - _3220) * dot(vec3(_3206, _3207, _3208), vec3(_688, _691, _694))) + _3220;
                                float _3226 = _3217 * _3217;
                                float _3230 = (fma(_2423, _3109.z, fma(_2422, _3109.y, _3109.x * _2421)) + _3109.w) / _3171;
                                float _3231 = (fma(_2423, _3125.z, fma(_2422, _3125.y, _3125.x * _2421)) + _3125.w) / _3171;
                                float _3235 = 1.0 - dot(vec2(_3230, _3231), vec2(_3230, _3231));
                                float _4329 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3237 = _3236 * (((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3213) / ((_3226 * 0.699999988079071044921875) + 1.0));
                                float _3249 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                                float _3250 = 1.0 - _763;
                                float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                                float _3258 = _3257 * _3257;
                                float _3259 = _3258 * _3258;
                                float _3260 = _3206 - _2707;
                                float _3261 = _3207 - _2708;
                                float _3262 = _3208 - _2709;
                                float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                                float _3270 = dot(vec3(_688, _691, _694), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4340 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3273 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3274 = dot(vec3(_688, _691, _694), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                                float _4351 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                                float _3282 = _3219 * _3258;
                                float _3283 = _3282 * _3282;
                                float _3289 = ((1.0 - _3283) * dot(vec3(_688, _691, _694), vec3(_3206, _3207, _3208))) + _3283;
                                float _4362 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3291 = 1.0 - _3258;
                                float _3301 = (0.5 / (((_3290 * ((_3273 * _3291) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3290 * _3291) + _3258) * _3273))) * _3290;
                                float _4373 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3311 = (_3236 * _3213) * (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3281 * _3281) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3311 * _3093.x;
                                frontier_phi_73_pred_1 = _3311 * _3093.y;
                                frontier_phi_73_pred_2 = _3237 * _3081.z;
                                frontier_phi_73_pred_3 = _3237 * _3081.y;
                                frontier_phi_73_pred_4 = _3237 * _3081.x;
                                frontier_phi_73_pred_5 = _3311 * _3093.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_73_pred;
                            _3316 = frontier_phi_73_pred_1;
                            _3320 = frontier_phi_73_pred_2;
                            _3319 = frontier_phi_73_pred_3;
                            _3318 = frontier_phi_73_pred_4;
                            _3317 = frontier_phi_73_pred_5;
                            _3023 = _3318 + _3036;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            _3020 = _3315 + _3033;
                            _3021 = _3316 + _3034;
                            _3022 = _3317 + _3035;
                            if (_3040 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3040;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3023;
                        frontier_phi_67_pred_1 = _3024;
                        frontier_phi_67_pred_2 = _3025;
                        frontier_phi_67_pred_3 = _3022;
                        frontier_phi_67_pred_4 = _3021;
                        frontier_phi_67_pred_5 = _3020;
                    }
                    _2688 = frontier_phi_67_pred;
                    _2690 = frontier_phi_67_pred_1;
                    _2692 = frontier_phi_67_pred_2;
                    _2686 = frontier_phi_67_pred_3;
                    _2684 = frontier_phi_67_pred_4;
                    _2682 = frontier_phi_67_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2682;
                        _2821 = _2684;
                        _2822 = _2686;
                        _2823 = _2688;
                        _2824 = _2690;
                        _2825 = _2692;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2690;
                frontier_phi_55_56_ladder_1 = _2692;
                frontier_phi_55_56_ladder_2 = _2688;
                frontier_phi_55_56_ladder_3 = _2686;
                frontier_phi_55_56_ladder_4 = _2684;
                frontier_phi_55_56_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_55_56_ladder = _2576;
                frontier_phi_55_56_ladder_1 = _2578;
                frontier_phi_55_56_ladder_2 = _2574;
                frontier_phi_55_56_ladder_3 = _2572;
                frontier_phi_55_56_ladder_4 = _2570;
                frontier_phi_55_56_ladder_5 = _2568;
            }
            _2681 = frontier_phi_55_56_ladder_5;
            _2683 = frontier_phi_55_56_ladder_4;
            _2685 = frontier_phi_55_56_ladder_3;
            _2687 = frontier_phi_55_56_ladder_2;
            _2689 = frontier_phi_55_56_ladder;
            _2691 = frontier_phi_55_56_ladder_1;
        }
        float _2696 = isnan(1.0) ? _747 : (isnan(_747) ? 1.0 : min(_747, 1.0));
        _2480 = (_2696 * _2687) + _1916;
        _2482 = (_2696 * _2689) + _1918;
        _2484 = (_2696 * _2691) + _1920;
        _2486 = ((_2681 * _731) * _2696) + _2261;
        _2488 = ((_2683 * _733) * _2696) + _2263;
        _2490 = ((_2685 * _734) * _2696) + _2265;
    }
    else
    {
        _2480 = _1916;
        _2482 = _1918;
        _2484 = _1920;
        _2486 = _2261;
        _2488 = _2263;
        _2490 = _2265;
    }
    float _4389 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4400 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4411 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    uint _2510 = _237 + 6u;
    float _2518 = _666 / cbSceneParam._m0[86u].x;
    float _2519 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2533 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, (log2((isnan(cbSceneParam._m0[77u].w) ? _601 : (isnan(_601) ? cbSceneParam._m0[77u].w : min(_601, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2535 = _2533.x;
    float _2536 = _2533.y;
    float _2537 = _2533.z;
    float _2538 = _2533.w;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_601 > cbSceneParam._m0[78u].w)
    {
        float _2593 = isnan(_601) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _601 : min(cbSceneParam._m0[80u].w, _601));
        float _2594 = _2593 / _601;
        float _2605 = _2594 * _651;
        float _2606 = _652 * _2594;
        float _2607 = (-0.0) - _2606;
        float _2609 = _2594 * _653;
        float _2611 = (cbSceneParam._m0[77u].w * _2607) / _2593;
        float _2612 = _2611 + cbSceneParam._m0[79u].w;
        float _2613 = cbSceneParam._m0[79u].w - _2606;
        float _2619 = sqrt(((_2605 * _2605) + (_2606 * _2606)) + (_2609 * _2609));
        float _2622 = (1.0 - (cbSceneParam._m0[77u].w / _2593)) * _2619;
        float _2627 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2629 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2782;
        if (abs((_2607 - _2611) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2782 = ((((_2612 > 0.0) ? exp2(_2627 * _2612) : (2.0 - exp2(_2629 * _2612))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2622;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : max(_2612, _2613));
            float _2744 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : min(_2612, _2613));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2782 = ((abs(_2619 / _2607) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2627 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2627 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2629 * _2753) - exp2(_2629 * _2754)) * _2742))) + (_2622 * cbSceneParam._m0[80u].z);
        }
        vec4 _2784 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, 1.0), 0.0);
        float _2793 = exp2((_2782 * (-1.44269502162933349609375)) * (1.0 - _2784.w));
        float _2794 = log2(_2793);
        float _2810 = log2(_2538);
        _2631 = (exp2(_2810 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].x)) * _2784.x) / cbSceneParam._m0[78u].x)) + _2535;
        _2633 = (exp2(_2810 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].y)) * _2784.y) / cbSceneParam._m0[78u].y)) + _2536;
        _2635 = (exp2(_2810 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].z)) * _2784.z) / cbSceneParam._m0[78u].z)) + _2537;
        _2637 = _2793 * _2538;
    }
    else
    {
        _2631 = _2535;
        _2633 = _2536;
        _2635 = _2537;
        _2637 = _2538;
    }
    float _2649 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2650 = _2649 == 3.0;
    float _2651 = log2(_2637);
    float _2658 = exp2(_2651 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2480 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _747))) + ((_2486 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2659 = exp2(_2651 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2482 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _747))) + ((_2488 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2660 = exp2(_2651 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2484 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _747))) + ((_2490 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2669 = (_2649 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2669 * (_2650 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.y = _2669 * (_2650 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.z = _2669 * (_2650 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.w = cbInstanceData._m0[_2510].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2510].w;
}


