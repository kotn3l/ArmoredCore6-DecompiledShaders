#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1276;
float _3940;
float _3941;
float _3942;
float _3943;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3952 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _386) + _461;
    float _473 = ((((_440.x - _459) * _386) + _459) * 2.0) + (-1.0);
    float _474 = ((((_440.y - _460) * _386) + _460) * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3963 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))));
    float _483 = _473 + ((((_413.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _484 = _474 + ((((_413.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _487 = fma(_480, _236, fma(_484, _243, _483 * _229));
    float _490 = fma(_480, _237, fma(_484, _244, _483 * _230));
    float _493 = fma(_480, _238, fma(_484, _245, _483 * _231));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _539 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _541 = _539.x;
    float _542 = 1.0 - _541;
    float _546 = ((_541 - _542) * cbMtdParam._m0[24u].z) + _542;
    float _548 = (cbMtdParam._m0[19u].x + dot(vec4(_497 * _487, _497 * _490, _497 * _493, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_546 * cbMtdParam._m0[21u].z);
    float _3974 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _564 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_546 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3985 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _569 = ((_549 * (cbMtdParam._m0[17u].x - _393)) * _565) + _393;
    float _570 = ((_549 * (cbMtdParam._m0[17u].y - _394)) * _565) + _394;
    float _571 = ((_549 * (cbMtdParam._m0[17u].z - _395)) * _565) + _395;
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _599 = _597.x;
    float _617 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _599) * _386) + _599;
    float _621 = ((_583.x - _617) * cbMtdParam._m0[19u].z) + _617;
    float _624 = _621 - ((_565 * _549) * _621);
    float _629 = (((_413.z - _470) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _470;
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3996 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _660 = (((_642.z - _629) * _549) * _565) + _629;
    float _675 = (((cbMtdParam._m0[21u].x * _483) + ((_649 - _483) * _549)) * _565) + _483;
    float _676 = (((cbMtdParam._m0[21u].x * _484) + ((_650 - _484) * _549)) * _565) + _484;
    float _677 = (((sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _480) * _549) * _565) + _480;
    float _682 = cbMtdParam._m0[22u].x + _513.w;
    float _685 = fma(_677, _236, fma(_676, _243, _675 * _229));
    float _688 = fma(_677, _237, fma(_676, _244, _675 * _230));
    float _691 = fma(_677, _238, fma(_676, _245, _675 * _231));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _4007 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _699 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4029 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4040 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4051 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4062 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _704 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    vec4 _783 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _785 = _783.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _957 = sqrt(((_769 * _769) + (_770 * _770)) + (_771 * _771));
        float _963 = (cbMatDynParam._m0[5u].x * _957) + cbMatDynParam._m0[5u].y;
        float _4073 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _968 = (cbMatDynParam._m0[5u].z * _957) + cbMatDynParam._m0[5u].w;
        float _4084 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) - _964)) + _964) < ((_785 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _818 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _821 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    uint _834 = _248 + 9u;
    uint _835 = _834 + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_835].z;
    float _4095 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _847 = 1.0 - _704;
    float _848 = _844 * _847;
    float _849 = _845 * _847;
    float _850 = _846 * _847;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _704;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _704;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _704;
    float _858 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    vec4 _870 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _874 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * TEXCOORD_5.w) * _870.x;
    float _875 = dot(vec3(_696, _697, _698), vec3(_776, _777, _778));
    float _878 = _875 * 2.0;
    float _882 = (_878 * _696) - _776;
    float _883 = (_878 * _697) - _777;
    float _884 = (_878 * _698) - _778;
    float _888 = abs(dot(vec3(_776, _777, _778), vec3(_696, _697, _698)));
    float _4128 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _890 = sqrt(_699);
    float _903 = exp2((_890 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_890 * 3.0));
    float _909 = (1.0 - _903) * ((_890 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _910 = _903 * _890;
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _1004 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _1008 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1033 = _938 + _696;
        float _1034 = _942 + _697;
        float _1035 = _946 + _698;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_696, _697, _698), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_696, _697, _698), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4209 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_696, _697, _698), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4242 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1322 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1326 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1349 = _938 + _696;
        float _1350 = _942 + _697;
        float _1351 = _946 + _698;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_696, _697, _698), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4305 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_696, _697, _698), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4338 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_696, _697, _698), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4371 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = _1276;
        _1598 = _1276;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _882 * 0.5;
    float _1656 = _883 * 0.5;
    float _1657 = _884 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_884, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882));
        float _1786 = fma(_884, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882));
        float _1789 = fma(_884, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1817 = frontier_phi_17_15_ladder;
        }
        float _1989;
        if (_1786 > 0.0)
        {
            _1989 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1989 = frontier_phi_26_22_ladder;
        }
        float _2284;
        if (_1789 > 0.0)
        {
            _2284 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2284 = frontier_phi_38_33_ladder;
        }
        float _2286 = isnan(_1989) ? _1817 : (isnan(_1817) ? _1989 : min(_1817, _1989));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1783) + _1772;
        float _2292 = (_2287 * _1786) + _1776;
        float _2293 = (_2287 * _1789) + _1780;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_16_38_ladder = _2438.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2438.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2438.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_16_38_ladder_2;
        _1807 = frontier_phi_16_38_ladder_1;
        _1809 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_882, _883, _884), _1724);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_884, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882));
        float _1882 = fma(_884, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882));
        float _1885 = fma(_884, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882));
        float _1994;
        if (_1879 > 0.0)
        {
            _1994 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1994 = frontier_phi_28_24_ladder;
        }
        float _2311;
        if (_1882 > 0.0)
        {
            _2311 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2311 = frontier_phi_40_35_ladder;
        }
        float _2649;
        if (_1885 > 0.0)
        {
            _2649 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2649 = frontier_phi_50_47_ladder;
        }
        float _2651 = isnan(_2311) ? _1994 : (isnan(_1994) ? _2311 : min(_1994, _2311));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _1879) + _1868;
        float _2657 = (_2652 * _1882) + _1872;
        float _2658 = (_2652 * _1885) + _1876;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2659;
        float _2662 = _2659 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2658 > _2662) || ((_2658 < _2660) || ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 < _2660) || (_2656 > _2662))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2658, cbModelParam._m0[17u].z, fma(_2657, cbModelParam._m0[17u].y, _2656 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2658, cbModelParam._m0[18u].z, fma(_2657, cbModelParam._m0[18u].y, _2656 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2658, cbModelParam._m0[19u].z, fma(_2657, cbModelParam._m0[19u].y, _2656 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_25_50_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_25_50_ladder_2;
        _1906 = frontier_phi_25_50_ladder_1;
        _1908 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_882, _883, _884), _1814);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1921 = (((_909 * _858) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1923 = (((_909 * _860) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1925 = (((_909 * _861) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1928 = fma(_1925, cbSceneParam._m0[89u].z, fma(_1923, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1925, cbSceneParam._m0[90u].z, fma(_1923, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1925, cbSceneParam._m0[91u].z, fma(_1923, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1981 = _1968 / _1980;
    float _1982 = _1972 / _1980;
    float _1983 = _1976 / _1980;
    float _2130;
    float _2131;
    float _2132;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2010 = ((uint(_1983 > cbSceneParam._m0[59u].y) + uint(_1983 > cbSceneParam._m0[59u].x)) + uint(_1983 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2011 = _2010 + 43u;
        uint _2019 = _2010 + 44u;
        uint _2027 = _2010 + 45u;
        uint _2035 = _2010 + 46u;
        float _2046 = fma(_1980, cbSceneParam._m0[_2011].w, fma(_1976, cbSceneParam._m0[_2011].z, fma(_1972, cbSceneParam._m0[_2011].y, _1968 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1980, cbSceneParam._m0[_2019].w, fma(_1976, cbSceneParam._m0[_2019].z, fma(_1972, cbSceneParam._m0[_2019].y, _1968 * cbSceneParam._m0[_2019].x)));
        float _2058 = fma(_1980, cbSceneParam._m0[_2035].w, fma(_1976, cbSceneParam._m0[_2035].z, fma(_1972, cbSceneParam._m0[_2035].y, _1968 * cbSceneParam._m0[_2035].x)));
        float _2063 = cbSceneParam._m0[33u].z * _2058;
        float _2065 = cbSceneParam._m0[33u].w * _2058;
        float _2068 = fma(_1980, cbSceneParam._m0[_2027].w, fma(_1976, cbSceneParam._m0[_2027].z, fma(_1972, cbSceneParam._m0[_2027].y, _1968 * cbSceneParam._m0[_2027].x))) / _2058;
        float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
        float _4497 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2123 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2046) / _2058, (_2065 + _2050) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 + _2046) / _2058, (_2050 - _2063) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2063) / _2058, (_2050 - _2065) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2065) / _2058, (_2063 + _2050) / _2058), _2068), 0.0)).x), vec4(0.25)));
        _2130 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
        _2131 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
        _2132 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2130 = 1.0;
        _2131 = 1.0;
        _2132 = 1.0;
    }
    float _2196;
    float _2198;
    float _2200;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2184 = fma(_1980, cbSceneParam._m0[63u].w, fma(_1976, cbSceneParam._m0[63u].z, fma(_1972, cbSceneParam._m0[63u].y, _1968 * cbSceneParam._m0[63u].x)));
        float _2185 = fma(_1980, cbSceneParam._m0[60u].w, fma(_1976, cbSceneParam._m0[60u].z, fma(_1972, cbSceneParam._m0[60u].y, _1968 * cbSceneParam._m0[60u].x))) / _2184;
        float _2186 = fma(_1980, cbSceneParam._m0[61u].w, fma(_1976, cbSceneParam._m0[61u].z, fma(_1972, cbSceneParam._m0[61u].y, _1968 * cbSceneParam._m0[61u].x))) / _2184;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2185 >= cbSceneParam._m0[64u].x) && (_2186 >= cbSceneParam._m0[64u].y)) && (_2185 <= cbSceneParam._m0[64u].z)) && (_2186 <= cbSceneParam._m0[64u].w))
        {
            float _2324 = fma(_1980, cbSceneParam._m0[62u].w, fma(_1976, cbSceneParam._m0[62u].z, fma(_1972, cbSceneParam._m0[62u].y, _1968 * cbSceneParam._m0[62u].x))) / _2184;
            float _2328 = isnan(cbSceneParam._m0[41u].w) ? _2324 : (isnan(_2324) ? cbSceneParam._m0[41u].w : max(_2324, cbSceneParam._m0[41u].w));
            float _2371 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
            float _4513 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
            float _2378 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2185, cbSceneParam._m0[33u].w + _2186), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2185, _2186 - cbSceneParam._m0[33u].z), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].z, _2186 - cbSceneParam._m0[33u].w), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2186), _2328), 0.0)).x), vec4(0.25)));
            float _2382 = 1.0 - (_2378 * cbSceneParam._m0[34u].x);
            float _2383 = 1.0 - (_2378 * cbSceneParam._m0[34u].y);
            float _2384 = 1.0 - (_2378 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
            frontier_phi_37_36_ladder_1 = isnan(_2383) ? _2131 : (isnan(_2131) ? _2383 : min(_2131, _2383));
            frontier_phi_37_36_ladder_2 = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
        }
        else
        {
            frontier_phi_37_36_ladder = _2132;
            frontier_phi_37_36_ladder_1 = _2131;
            frontier_phi_37_36_ladder_2 = _2130;
        }
        _2196 = frontier_phi_37_36_ladder_2;
        _2198 = frontier_phi_37_36_ladder_1;
        _2200 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2196 = _2130;
        _2198 = _2131;
        _2200 = _2132;
    }
    uvec4 _2205 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2207 = _2205.x * 14u;
    uint _2208 = _2207 + 13u;
    float _2215 = _874 + (-1.0);
    float _2220 = (cbLight._m0[_2208].x * _2215) + 1.0;
    float _2221 = (cbLight._m0[_2208].y * _2215) + 1.0;
    float _2222 = (cbLight._m0[_2208].z * _2215) + 1.0;
    float _2223 = (cbLight._m0[_2208].w * _2215) + 1.0;
    uint _2224 = _2207 + 5u;
    float _2230 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2234 = _2207 + 4u;
    float _2243 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2247 = _2207 | 1u;
    float _2258 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_696, _697, _698));
    float _2261 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_696, _697, _698));
    float _4549 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _4560 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2266 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2268 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2275 = ((cbLight._m0[_2224].x * _2230) * _2268) + (((cbLight._m0[_2234].x * _2196) * _2243) * _2266);
    float _2276 = ((_2230 * cbLight._m0[_2224].y) * _2268) + (((cbLight._m0[_2234].y * _2198) * _2243) * _2266);
    float _2277 = ((_2230 * cbLight._m0[_2224].z) * _2268) + (((cbLight._m0[_2234].z * _2200) * _2243) * _2266);
    uvec4 _2281 = floatBitsToUint(cbLight._m0[_2207 + 12u]);
    bool _2283 = _2281.x == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2283)
    {
        _2385 = _2275;
        _2387 = _2276;
        _2389 = _2277;
    }
    else
    {
        uint _2393 = _2207 + 6u;
        float _2409 = (dot(vec3(cbLight._m0[_2207 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4571 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2412 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2385 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2275;
        _2387 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2276;
        _2389 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2277;
    }
    bool _2392 = _2281.y == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2392)
    {
        _2447 = _2385;
        _2449 = _2387;
        _2451 = _2389;
    }
    else
    {
        uint _2620 = _2207 + 7u;
        float _2636 = (dot(vec3(cbLight._m0[_2207 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2637 = _2636 * _2636;
        float _4587 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2638 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2639 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2447 = (((cbLight._m0[_2620].x * 0.3183098733425140380859375) * _2638) * _2639) + _2385;
        _2449 = (((cbLight._m0[_2620].y * 0.3183098733425140380859375) * _2638) * _2639) + _2387;
        _2451 = (((cbLight._m0[_2620].z * 0.3183098733425140380859375) * _2638) * _2639) + _2389;
    }
    uint _2454 = _2207 + 8u;
    float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _699) * 0.949999988079071044921875);
    float _2468 = _2467 * _2467;
    float _2469 = cbLight._m0[_2207].x + _776;
    float _2470 = cbLight._m0[_2207].y + _777;
    float _2471 = cbLight._m0[_2207].z + _778;
    float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
    float _2476 = _2475 * _2469;
    float _2477 = _2475 * _2470;
    float _2478 = _2475 * _2471;
    float _2479 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2207].xyz));
    float _4603 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _4614 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2483 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2484 = dot(vec3(_696, _697, _698), vec3(_2476, _2477, _2478));
    float _4625 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2476, _2477, _2478));
    float _4636 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2468 * _2468;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
    float _2505 = 0.959999978542327880859375 - _855;
    float _2507 = 0.959999978542327880859375 - _856;
    float _2508 = 0.959999978542327880859375 - _857;
    float _2515 = 1.0 - _2468;
    float _2526 = (0.5 / (((_2483 * ((_2482 * _2515) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2515) + _2468) * _2482))) * _2482;
    float _4647 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    uint _2542 = _2207 + 9u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _699) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2247].x + _776;
    float _2556 = cbLight._m0[_2247].y + _777;
    float _2557 = cbLight._m0[_2247].z + _778;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2247].xyz));
    float _4658 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2569 = dot(vec3(_696, _697, _698), vec3(_2562, _2563, _2564));
    float _4669 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2562, _2563, _2564));
    float _4680 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2554 * _2554;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
    float _2595 = 1.0 - _2554;
    float _2605 = (0.5 / (((_2483 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2595) + _2554) * _2568))) * _2568;
    float _4691 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    float _2617 = (((((_2588 * _2505) + _858) * cbLight._m0[_2542].x) * _2607) * _2230) + ((((cbLight._m0[_2454].x * _2196) * ((_2504 * _2505) + _858)) * _2528) * _2243);
    float _2618 = (((((_2588 * _2507) + _860) * cbLight._m0[_2542].y) * _2607) * _2230) + ((((cbLight._m0[_2454].y * _2198) * ((_2504 * _2507) + _860)) * _2528) * _2243);
    float _2619 = (((((_2588 * _2508) + _861) * cbLight._m0[_2542].z) * _2607) * _2230) + ((((cbLight._m0[_2454].z * _2200) * ((_2504 * _2508) + _861)) * _2528) * _2243);
    float _2675;
    float _2677;
    float _2679;
    if (_2283)
    {
        _2675 = _2617;
        _2677 = _2618;
        _2679 = _2619;
    }
    else
    {
        uint _2681 = _2207 + 2u;
        uint _2685 = _2207 + 10u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _699) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _776;
        float _2702 = cbLight._m0[_2681].y + _777;
        float _2703 = cbLight._m0[_2681].z + _778;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2681].xyz));
        float _4702 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2715 = dot(vec3(_696, _697, _698), vec3(_2708, _2709, _2710));
        float _4713 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4724 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2483 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2741) + _2700) * _2714))) * _2714;
        float _4735 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2675 = (((((_2734 * _2505) + _858) * cbLight._m0[_2685].x) * _2753) * _2754) + _2617;
        _2677 = (((((_2734 * _2507) + _860) * cbLight._m0[_2685].y) * _2753) * _2754) + _2618;
        _2679 = (((((_2734 * _2508) + _861) * cbLight._m0[_2685].z) * _2753) * _2754) + _2619;
    }
    float _2785;
    float _2787;
    float _2789;
    if (_2392)
    {
        _2785 = _2675;
        _2787 = _2677;
        _2789 = _2679;
    }
    else
    {
        uint _2796 = _2207 + 3u;
        uint _2800 = _2207 + 11u;
        float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2796].w)) * _699) * 0.949999988079071044921875);
        float _2815 = _2814 * _2814;
        float _2816 = cbLight._m0[_2796].x + _776;
        float _2817 = cbLight._m0[_2796].y + _777;
        float _2818 = cbLight._m0[_2796].z + _778;
        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
        float _2823 = _2822 * _2816;
        float _2824 = _2822 * _2817;
        float _2825 = _2822 * _2818;
        float _2826 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2796].xyz));
        float _4751 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2830 = dot(vec3(_696, _697, _698), vec3(_2823, _2824, _2825));
        float _4762 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2834 = dot(vec3(cbLight._m0[_2796].xyz), vec3(_2823, _2824, _2825));
        float _4773 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2838 = _2815 * _2815;
        float _2842 = ((_2833 * _2833) * (_2838 + (-1.0))) + 1.0;
        float _2849 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
        float _2856 = 1.0 - _2815;
        float _2866 = (0.5 / (((_2483 * ((_2829 * _2856) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2856) + _2815) * _2829))) * _2829;
        float _4784 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2868 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2838 / ((_2842 * _2842) * 3.141590118408203125));
        float _2869 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2785 = (((((_2849 * _2505) + _858) * cbLight._m0[_2800].x) * _2868) * _2869) + _2675;
        _2787 = (((((_2849 * _2507) + _860) * cbLight._m0[_2800].y) * _2868) * _2869) + _2677;
        _2789 = (((((_2849 * _2508) + _861) * cbLight._m0[_2800].z) * _2868) * _2869) + _2679;
    }
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_2205.y == 0u)
    {
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.x;
        uint _2902 = uint((float(_2890.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2891))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2891)));
        float _2912 = (log2(_1983 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2913 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        uint _2916 = uint(isnan(14.0) ? _2913 : (isnan(_2913) ? 14.0 : min(_2913, 14.0)));
        uvec4 _2921 = texelFetch(g_lightClusterGridBuffer, int(((_2916 << 2u) + (_2902 << 6u)) >> 2u));
        uint _2922 = _2921.x;
        uint _2923 = _2890.z;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((((1u << ((_2923 >> 4u) & 15u)) + 4294967295u) & _2922) == 0u) || ((_2923 & 240u) == 0u))
        {
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
        }
        else
        {
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            uint _3161 = 0u;
            uint _3170;
            bool _3171;
            for (;;)
            {
                _3170 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                _3171 = _3170 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3171)
                {
                    frontier_phi_71_pred = _3160;
                    frontier_phi_71_pred_1 = _3159;
                    frontier_phi_71_pred_2 = _3158;
                    frontier_phi_71_pred_3 = _3157;
                    frontier_phi_71_pred_4 = _3156;
                    frontier_phi_71_pred_5 = _3155;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3170;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3161 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _1981;
                        float _3367 = _3326.y - _1982;
                        float _3368 = _3326.z - _1983;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_815, _818, _821), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4810 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _1981;
                        float _3402 = (-0.0) - _1982;
                        float _3403 = (-0.0) - _1983;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3417 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3418 = 1.0 - _890;
                        float _3425 = sqrt(1.0 - ((1.0 - (_3418 * _3418)) * (1.0 - (_3417 * _3417))));
                        float _3426 = _3425 * _3425;
                        float _3427 = _3426 * _3426;
                        float _3428 = _3408 + _3373;
                        float _3429 = _3409 + _3374;
                        float _3430 = _3410 + _3375;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3438 = dot(vec3(_815, _818, _821), vec3(_3408, _3409, _3410));
                        float _4826 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3442 = dot(vec3(_815, _818, _821), vec3(_3434 * _3428, _3434 * _3429, _3434 * _3430));
                        float _4837 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3449 = ((_3445 * _3445) * (_3427 + (-1.0))) + 1.0;
                        float _3450 = _3386 * _3426;
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3376) + _3451;
                        float _4848 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3456 = 1.0 - _3426;
                        float _3466 = (0.5 / (((_3455 * ((_3441 * _3456) + _3426)) + 9.9999999392252902907785028219223e-09) + (((_3455 * _3456) + _3426) * _3441))) * _3455;
                        float _4859 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3477 = (((_3427 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3449 * _3449) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3230 = (_3397 * _3345.x) + _3303;
                        _3231 = (_3397 * _3345.y) + _3304;
                        _3232 = (_3397 * _3345.z) + _3305;
                        _3227 = (_3477 * _3362.x) + _3300;
                        _3228 = (_3477 * _3362.y) + _3301;
                        _3229 = (_3477 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_71_pred = _3232;
                    frontier_phi_71_pred_1 = _3231;
                    frontier_phi_71_pred_2 = _3230;
                    frontier_phi_71_pred_3 = _3229;
                    frontier_phi_71_pred_4 = _3228;
                    frontier_phi_71_pred_5 = _3227;
                }
                _3013 = frontier_phi_71_pred;
                _3011 = frontier_phi_71_pred_1;
                _3009 = frontier_phi_71_pred_2;
                _3007 = frontier_phi_71_pred_3;
                _3005 = frontier_phi_71_pred_4;
                _3003 = frontier_phi_71_pred_5;
                uint _3162 = _3161 + 1u;
                if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3155 = _3003;
                    _3156 = _3005;
                    _3157 = _3007;
                    _3158 = _3009;
                    _3159 = _3011;
                    _3160 = _3013;
                    _3161 = _3162;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
        }
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.z;
        uint _3019 = (_3017 >> 8u) & 15u;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((4294967295u << _3019) & _2922) == 0u)
        {
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
        }
        else
        {
            float _3148 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
            float _3149 = _3148 * _1981;
            float _3150 = _3148 * _1982;
            float _3151 = _3148 * _1983;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3019 < ((_3017 >> 12u) & 15u))
            {
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3283 = _3002;
                float _3284 = _3004;
                float _3285 = _3006;
                float _3286 = _3008;
                float _3287 = _3010;
                float _3288 = _3012;
                uint _3289 = _3019;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3299)
                    {
                        frontier_phi_82_pred = _3288;
                        frontier_phi_82_pred_1 = _3287;
                        frontier_phi_82_pred_2 = _3286;
                        frontier_phi_82_pred_3 = _3285;
                        frontier_phi_82_pred_4 = _3284;
                        frontier_phi_82_pred_5 = _3283;
                    }
                    else
                    {
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3504 = _3283;
                        float _3505 = _3284;
                        float _3506 = _3285;
                        float _3507 = _3286;
                        float _3508 = _3287;
                        float _3509 = _3288;
                        uint _3510 = _3298;
                        uint _3511;
                        vec4 _3536;
                        float _3537;
                        vec4 _3552;
                        vec3 _3564;
                        vec4 _3579;
                        vec4 _3594;
                        float _3640;
                        bool _3641;
                        for (;;)
                        {
                            uint _3521 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3510));
                            _3511 = (_3510 + 4294967295u) & _3510;
                            uint _3523 = _3521 * 40u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3537 = _3536.w;
                            uint _3539 = (_3521 * 40u) + 4u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3521 * 40u) + 8u;
                            _3564 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x));
                            uint _3566 = (_3521 * 40u) + 16u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3521 * 40u) + 20u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3521 * 40u) + 24u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3615 = (_3521 * 40u) + 28u;
                            vec4 _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            _3640 = fma(_1983, _3628.z, fma(_1982, _3628.y, _3628.x * _1981)) + _3628.w;
                            _3641 = !((fma(_1983, _3609.z, fma(_1982, _3609.y, _3609.x * _1981)) + _3609.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3641)
                            {
                                float _3668 = _3536.x - _1981;
                                float _3669 = _3536.y - _1982;
                                float _3670 = _3536.z - _1983;
                                float _3671 = dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670));
                                float _3674 = inversesqrt(_3671);
                                float _3675 = _3674 * _3668;
                                float _3676 = _3674 * _3669;
                                float _3677 = _3674 * _3670;
                                float _3681 = 1.0 - (_3671 / (_3537 * _3537));
                                float _4870 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3686 = sqrt(_3671) * _3552.w;
                                float _3688 = 1.39999997615814208984375 / (_3686 + 1.39999997615814208984375);
                                float _3689 = _3688 * _3688;
                                float _3692 = ((1.0 - _3689) * dot(vec3(_3675, _3676, _3677), vec3(_815, _818, _821))) + _3689;
                                float _3695 = _3686 * _3686;
                                float _3699 = (fma(_1983, _3579.z, fma(_1982, _3579.y, _3579.x * _1981)) + _3579.w) / _3640;
                                float _3700 = (fma(_1983, _3594.z, fma(_1982, _3594.y, _3594.x * _1981)) + _3594.w) / _3640;
                                float _3704 = 1.0 - dot(vec2(_3699, _3700), vec2(_3699, _3700));
                                float _4886 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3705 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3706 = _3705 * (((isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0))) * _3682) / ((_3695 * 0.699999988079071044921875) + 1.0));
                                float _3718 = exp2(log2(1.0 / ((_3695 * 3.5) + 5.0)) * 0.25);
                                float _3719 = 1.0 - _890;
                                float _3726 = sqrt(1.0 - ((1.0 - (_3719 * _3719)) * (1.0 - (_3718 * _3718))));
                                float _3727 = _3726 * _3726;
                                float _3728 = _3727 * _3727;
                                float _3729 = _3675 - _3149;
                                float _3730 = _3676 - _3150;
                                float _3731 = _3677 - _3151;
                                float _3735 = inversesqrt(dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731)));
                                float _3739 = dot(vec3(_815, _818, _821), vec3((-0.0) - _3149, (-0.0) - _3150, (-0.0) - _3151));
                                float _4897 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3743 = dot(vec3(_815, _818, _821), vec3(_3735 * _3729, _3735 * _3730, _3735 * _3731));
                                float _4908 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3750 = ((_3746 * _3746) * (_3728 + (-1.0))) + 1.0;
                                float _3751 = _3688 * _3727;
                                float _3752 = _3751 * _3751;
                                float _3758 = ((1.0 - _3752) * dot(vec3(_815, _818, _821), vec3(_3675, _3676, _3677))) + _3752;
                                float _4919 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3760 = 1.0 - _3727;
                                float _3770 = (0.5 / (((_3759 * ((_3742 * _3760) + _3727)) + 9.9999999392252902907785028219223e-09) + (((_3759 * _3760) + _3727) * _3742))) * _3759;
                                float _4930 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3780 = (_3705 * _3682) * (((_3728 * 3.1415927410125732421875) * (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) / ((_3750 * _3750) * ((_3695 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3706 * _3552.z;
                                frontier_phi_88_pred_1 = _3706 * _3552.y;
                                frontier_phi_88_pred_2 = _3706 * _3552.x;
                                frontier_phi_88_pred_3 = _3780 * _3564.z;
                                frontier_phi_88_pred_4 = _3780 * _3564.y;
                                frontier_phi_88_pred_5 = _3780 * _3564.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3789 = frontier_phi_88_pred;
                            _3788 = frontier_phi_88_pred_1;
                            _3787 = frontier_phi_88_pred_2;
                            _3786 = frontier_phi_88_pred_3;
                            _3785 = frontier_phi_88_pred_4;
                            _3784 = frontier_phi_88_pred_5;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            if (_3511 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3511;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3496;
                        frontier_phi_82_pred_1 = _3495;
                        frontier_phi_82_pred_2 = _3494;
                        frontier_phi_82_pred_3 = _3493;
                        frontier_phi_82_pred_4 = _3492;
                        frontier_phi_82_pred_5 = _3491;
                    }
                    _3134 = frontier_phi_82_pred;
                    _3132 = frontier_phi_82_pred_1;
                    _3130 = frontier_phi_82_pred_2;
                    _3128 = frontier_phi_82_pred_3;
                    _3126 = frontier_phi_82_pred_4;
                    _3124 = frontier_phi_82_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3124;
                        _3284 = _3126;
                        _3285 = _3128;
                        _3286 = _3130;
                        _3287 = _3132;
                        _3288 = _3134;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3130;
                frontier_phi_63_64_ladder_1 = _3134;
                frontier_phi_63_64_ladder_2 = _3132;
                frontier_phi_63_64_ladder_3 = _3128;
                frontier_phi_63_64_ladder_4 = _3126;
                frontier_phi_63_64_ladder_5 = _3124;
            }
            else
            {
                frontier_phi_63_64_ladder = _3008;
                frontier_phi_63_64_ladder_1 = _3012;
                frontier_phi_63_64_ladder_2 = _3010;
                frontier_phi_63_64_ladder_3 = _3006;
                frontier_phi_63_64_ladder_4 = _3004;
                frontier_phi_63_64_ladder_5 = _3002;
            }
            _3123 = frontier_phi_63_64_ladder_5;
            _3125 = frontier_phi_63_64_ladder_4;
            _3127 = frontier_phi_63_64_ladder_3;
            _3129 = frontier_phi_63_64_ladder;
            _3131 = frontier_phi_63_64_ladder_2;
            _3133 = frontier_phi_63_64_ladder_1;
        }
        float _3138 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2935 = (_3138 * _3129) + _2447;
        _2937 = (_3138 * _3131) + _2449;
        _2939 = (_3138 * _3133) + _2451;
        _2941 = ((_3123 * _858) * _3138) + _2785;
        _2943 = ((_3125 * _860) * _3138) + _2787;
        _2945 = ((_3127 * _861) * _3138) + _2789;
    }
    else
    {
        _2935 = _2447;
        _2937 = _2449;
        _2939 = _2451;
        _2941 = _2785;
        _2943 = _2787;
        _2945 = _2789;
    }
    float _4946 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4957 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4968 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2962 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2935 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _874))) + ((_2941 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2963 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2937 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _874))) + ((_2943 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2964 = ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2939 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _874))) + ((_2945 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    uint _2965 = _248 + 6u;
    float _2973 = _796 / cbSceneParam._m0[86u].x;
    float _2974 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2988 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2990 = _2988.x;
    float _2991 = _2988.y;
    float _2992 = _2988.z;
    float _2993 = _2988.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _3027 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _3028 = _3027 / _718;
        float _3039 = _3028 * _769;
        float _3040 = _770 * _3028;
        float _3041 = (-0.0) - _3040;
        float _3043 = _3028 * _771;
        float _3045 = (cbSceneParam._m0[77u].w * _3041) / _3027;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3040;
        float _3053 = sqrt(((_3039 * _3039) + (_3040 * _3040)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3027)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3240;
        if (abs((_3041 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3240 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3184 = 1.0 / cbSceneParam._m0[80u].x;
            float _3185 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3186 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            _3240 = ((abs(_3053 / _3041) * cbSceneParam._m0[80u].y) * ((((_3195 - _3196) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))))) * _3184)) - ((exp2(_3063 * _3195) - exp2(_3063 * _3196)) * _3184))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3242 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, 1.0), 0.0);
        float _3251 = exp2((_3240 * (-1.44269502162933349609375)) * (1.0 - _3242.w));
        float _3252 = log2(_3251);
        float _3268 = log2(_2993);
        _3065 = (exp2(_3268 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].x)) * _3242.x) / cbSceneParam._m0[78u].x)) + _2990;
        _3067 = (exp2(_3268 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].y)) * _3242.y) / cbSceneParam._m0[78u].y)) + _2991;
        _3069 = (exp2(_3268 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].z)) * _3242.z) / cbSceneParam._m0[78u].z)) + _2992;
        _3071 = _3251 * _2993;
    }
    else
    {
        _3065 = _2990;
        _3067 = _2991;
        _3069 = _2992;
        _3071 = _2993;
    }
    bool _3278;
    vec4 _3081;
    vec4 _3103;
    float _3105;
    float _3109;
    float _3110;
    float _3111;
    float _3112;
    bool _3122;
    for (;;)
    {
        _3081 = cbMatDynParam._m0[0u];
        float _3083 = roundEven(_3081.y);
        bool _3084 = _3083 == 3.0;
        float _3085 = log2(_3071);
        float _3092 = exp2(_3085 * cbSceneParam._m0[78u].x) * _2962;
        float _3093 = exp2(_3085 * cbSceneParam._m0[78u].y) * _2963;
        float _3094 = exp2(_3085 * cbSceneParam._m0[78u].z) * _2964;
        float _3101 = _785 + (-0.5);
        _3103 = cbMtdParam._m0[1u];
        _3105 = _3103.y * _3101;
        float _3108 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3109 = _3108 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
        _3110 = _3108 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
        _3111 = _3108 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
        _3112 = _3101 * 0.999000012874603271484375;
        _3122 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3122)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _3112) < 0.5)
            {
                _3278 = true;
                break;
            }
        }
        uint _3219 = _834 + uint(_3081.w);
        if ((cbInstanceData._m0[_3219].w < 1.0) && ((cbInstanceData._m0[_3219].w + _3112) < 0.5))
        {
            _3278 = true;
            break;
        }
        if ((_3105 + 1.0) < _3103.x)
        {
            _3278 = true;
            break;
        }
        _3278 = false;
        break;
    }
    float _3482;
    if (_3278)
    {
        discard_state = true;
        _3482 = 0.0;
    }
    else
    {
        _3482 = cbInstanceData._m0[_2965].w;
    }
    SV_Target.x = _3109;
    SV_Target.y = _3110;
    SV_Target.z = _3111;
    SV_Target.w = _3482;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2965].w;
    discard_exit();
}


