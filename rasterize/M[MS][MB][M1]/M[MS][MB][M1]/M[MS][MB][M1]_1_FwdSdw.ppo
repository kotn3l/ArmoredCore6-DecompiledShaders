#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _853;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _256 = _252.z;
    float _261 = (_252.x * 2.0) + (-1.0);
    float _263 = (_252.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3470 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _285 = _283.x;
    float _290 = cbMtdParam._m0[22u].x + _252.w;
    float _293 = fma(_270, _201 * NORMAL.x, fma(_263, _208 * TANGENT.x, (_194 * _186) * _261));
    float _296 = fma(_270, _201 * NORMAL.y, fma(_263, _208 * TANGENT.y, (_194 * _187) * _261));
    float _299 = fma(_270, _201 * NORMAL.z, fma(_263, _208 * TANGENT.z, (_194 * _188) * _261));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3481 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _307 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _3503 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3514 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3525 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3536 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _312 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    float _395 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _396 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _420 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _423 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _439 = (_436 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3547 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _451 = 1.0 - _312;
    float _452 = _448 * _451;
    float _453 = _449 * _451;
    float _454 = _450 * _451;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _312;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _312;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _312;
    float _462 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _395, cbSceneParam._m0[86u].y * _396));
    float _478 = ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * TEXCOORD_5.w) * _474.x;
    float _479 = dot(vec3(_304, _305, _306), vec3(_387, _388, _389));
    float _482 = _479 * 2.0;
    float _486 = (_482 * _304) - _387;
    float _487 = (_482 * _305) - _388;
    float _488 = (_482 * _306) - _389;
    float _492 = abs(dot(vec3(_387, _388, _389), vec3(_304, _305, _306)));
    float _3580 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _494 = sqrt(_307);
    float _507 = exp2((_494 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_494 * 3.0));
    float _513 = (1.0 - _507) * ((_494 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _514 = _507 * _494;
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _852;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_550, cbModelParam._m0[26u].z, fma(_546, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542));
        float _581 = fma(_550, cbModelParam._m0[27u].z, fma(_546, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542));
        float _585 = fma(_550, cbModelParam._m0[28u].z, fma(_546, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542));
        float _610 = _542 + _304;
        float _611 = _546 + _305;
        float _612 = _550 + _306;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_646.x + (-0.5));
        float _682 = _680 * (_646.y + (-0.5));
        float _683 = _680 * (_646.z + (-0.5));
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_653.x + (-0.5));
        float _692 = _690 * (_653.y + (-0.5));
        float _693 = _690 * (_653.z + (-0.5));
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_660.x + (-0.5));
        float _702 = _700 * (_660.y + (-0.5));
        float _703 = _700 * (_660.z + (-0.5));
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = _681 * 0.5;
        float _718 = _691 * 0.5;
        float _719 = _701 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_304, _305, _306), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3628 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_746 + 1.0))) + _751) * _714;
        float _761 = _682 * 0.5;
        float _762 = _692 * 0.5;
        float _763 = _702 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_304, _305, _306), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3661 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_788 + 1.0))) + _793) * _715;
        float _803 = _683 * 0.5;
        float _804 = _693 * 0.5;
        float _805 = _703 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_304, _305, _306), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3694 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_830 + 1.0))) + _835) * _716;
        _852 = _683;
        _854 = _682;
        _855 = _681;
        _856 = _693;
        _857 = _692;
        _858 = _691;
        _859 = _703;
        _860 = _702;
        _861 = _701;
        _862 = _716;
        _863 = _715;
        _864 = _714;
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
    }
    else
    {
        _852 = _853;
        _854 = _853;
        _855 = _853;
        _856 = _853;
        _857 = _853;
        _858 = _853;
        _859 = _853;
        _860 = _853;
        _861 = _853;
        _862 = _853;
        _863 = _853;
        _864 = _853;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
    }
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _892 = fma(_550, cbModelParam._m0[30u].z, fma(_546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _542));
        float _896 = fma(_550, cbModelParam._m0[31u].z, fma(_546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _542));
        float _900 = fma(_550, cbModelParam._m0[32u].z, fma(_546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _542));
        float _923 = _542 + _304;
        float _924 = _546 + _305;
        float _925 = _550 + _306;
        float _935 = fma(_925, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923)) - _892;
        float _936 = fma(_925, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923)) - _896;
        float _937 = fma(_925, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923)) - _900;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_892 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_896 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[35u].z) + ((((((_900 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _991 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_958.x + (-0.5));
        float _993 = _991 * (_958.y + (-0.5));
        float _994 = _991 * (_958.z + (-0.5));
        float _1001 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_965.x + (-0.5));
        float _1003 = _1001 * (_965.y + (-0.5));
        float _1004 = _1001 * (_965.z + (-0.5));
        float _1011 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_972.x + (-0.5));
        float _1013 = _1011 * (_972.y + (-0.5));
        float _1014 = _1011 * (_972.z + (-0.5));
        float _1021 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_979.x + (-0.5));
        float _1023 = _1021 * (_979.y + (-0.5));
        float _1024 = _1021 * (_979.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_304, _305, _306), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3757 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1055 + 1.0))) + _1060) * _1025;
        float _1070 = _993 * 0.5;
        float _1071 = _1003 * 0.5;
        float _1072 = _1013 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_304, _305, _306), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3790 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1097 + 1.0))) + _1102) * _1026;
        float _1112 = _994 * 0.5;
        float _1113 = _1004 * 0.5;
        float _1114 = _1014 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_304, _305, _306), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3823 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1139 + 1.0))) + _1144) * _1027;
        _1161 = _994;
        _1162 = _993;
        _1163 = _992;
        _1164 = _1004;
        _1165 = _1003;
        _1166 = _1002;
        _1167 = _1014;
        _1168 = _1013;
        _1169 = _1012;
        _1170 = _1027;
        _1171 = _1026;
        _1172 = _1025;
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _853;
        _1162 = _853;
        _1163 = _853;
        _1164 = _853;
        _1165 = _853;
        _1166 = _853;
        _1167 = _853;
        _1168 = _853;
        _1169 = _853;
        _1170 = _853;
        _1171 = _853;
        _1172 = _853;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _865)) + _865;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _866)) + _866;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _867)) + _867;
    float _1208 = fma(_1187, cbSceneParam._m0[89u].z, fma(_1186, cbSceneParam._m0[89u].y, _1185 * cbSceneParam._m0[89u].x));
    float _1211 = fma(_1187, cbSceneParam._m0[90u].z, fma(_1186, cbSceneParam._m0[90u].y, _1185 * cbSceneParam._m0[90u].x));
    float _1214 = fma(_1187, cbSceneParam._m0[91u].z, fma(_1186, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1185));
    float _1229 = _486 * 0.5;
    float _1230 = _487 * 0.5;
    float _1231 = _488 * 0.5;
    float _1232 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1235 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1238 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1272;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1245 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_852, _856, _859, _862));
        float _1249 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_854, _857, _860, _863));
        float _1253 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_855, _858, _861, _864));
        float _1260 = dot(vec4(cbModelParam._m0[39u]), vec4(_1229, _1230, _1231, 1.0));
        _1272 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1272 = 1.0;
    }
    float _1283;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1274 = dot(vec4(cbModelParam._m0[40u]), vec4(_1229, _1230, _1231, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1274) ? 0.0 : (isnan(0.0) ? _1274 : max(0.0, _1274))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1287 = (_1283 * cbModelParam._m0[1u].x) + (_1272 * (1.0 - cbModelParam._m0[1u].x));
    float _1297 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1298 = isnan(_1297) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1297 : min(cbModelParam._m0[25u].z, _1297));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1347 = fma(_550, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542)) + cbModelParam._m0[13u].w;
        float _1351 = fma(_550, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542)) + cbModelParam._m0[14u].w;
        float _1355 = fma(_550, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542)) + cbModelParam._m0[15u].w;
        float _1358 = fma(_488, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486));
        float _1361 = fma(_488, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486));
        float _1364 = fma(_488, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486));
        float _1392;
        if (_1358 > 0.0)
        {
            _1392 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1392 = frontier_phi_14_12_ladder;
        }
        float _1566;
        if (_1361 > 0.0)
        {
            _1566 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1566 = frontier_phi_23_19_ladder;
        }
        float _1862;
        if (_1364 > 0.0)
        {
            _1862 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1862 = frontier_phi_35_30_ladder;
        }
        float _1864 = isnan(_1566) ? _1392 : (isnan(_1392) ? _1566 : min(_1392, _1566));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1358) + _1347;
        float _1870 = (_1865 * _1361) + _1351;
        float _1871 = (_1865 * _1364) + _1355;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1872;
        float _1876 = _1872 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 > _1876) || ((_1870 < _1874) || ((_1869 < _1874) || (_1869 > _1876))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1871, cbModelParam._m0[9u].z, fma(_1870, cbModelParam._m0[9u].y, _1869 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1871, cbModelParam._m0[10u].z, fma(_1870, cbModelParam._m0[10u].y, _1869 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1871, cbModelParam._m0[11u].z, fma(_1870, cbModelParam._m0[11u].y, _1869 * cbModelParam._m0[11u].x))), _1298);
            frontier_phi_13_35_ladder = _2016.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2016.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2016.x * cbModelParam._m0[1u].y;
        }
        _1380 = frontier_phi_13_35_ladder_2;
        _1382 = frontier_phi_13_35_ladder_1;
        _1384 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_486, _487, _488), _1298);
        _1380 = _1368.x * cbModelParam._m0[1u].y;
        _1382 = _1368.y * cbModelParam._m0[1u].y;
        _1384 = _1368.z * cbModelParam._m0[1u].y;
    }
    float _1388 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1389 = isnan(_1388) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1388 : min(cbModelParam._m0[25u].w, _1388));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1445 = fma(_550, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542)) + cbModelParam._m0[21u].w;
        float _1449 = fma(_550, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542)) + cbModelParam._m0[22u].w;
        float _1453 = fma(_550, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542)) + cbModelParam._m0[23u].w;
        float _1456 = fma(_488, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486));
        float _1459 = fma(_488, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486));
        float _1462 = fma(_488, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486));
        float _1571;
        if (_1456 > 0.0)
        {
            _1571 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1571 = frontier_phi_25_21_ladder;
        }
        float _1889;
        if (_1459 > 0.0)
        {
            _1889 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1889 = frontier_phi_37_32_ladder;
        }
        float _2227;
        if (_1462 > 0.0)
        {
            _2227 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2227 = frontier_phi_47_44_ladder;
        }
        float _2229 = isnan(_1889) ? _1571 : (isnan(_1571) ? _1889 : min(_1571, _1889));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1456) + _1445;
        float _2235 = (_2230 * _1459) + _1449;
        float _2236 = (_2230 * _1462) + _1453;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2237;
        float _2240 = _2237 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2236 > _2240) || ((_2236 < _2238) || ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 < _2238) || (_2234 > _2240))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2236, cbModelParam._m0[17u].z, fma(_2235, cbModelParam._m0[17u].y, _2234 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2236, cbModelParam._m0[18u].z, fma(_2235, cbModelParam._m0[18u].y, _2234 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2236, cbModelParam._m0[19u].z, fma(_2235, cbModelParam._m0[19u].y, _2234 * cbModelParam._m0[19u].x))), _1389);
            frontier_phi_22_47_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1481 = frontier_phi_22_47_ladder_2;
        _1483 = frontier_phi_22_47_ladder_1;
        _1485 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_486, _487, _488), _1389);
        _1481 = _1465.x * cbModelParam._m0[1u].z;
        _1483 = _1465.y * cbModelParam._m0[1u].z;
        _1485 = _1465.z * cbModelParam._m0[1u].z;
    }
    float _1498 = (((_513 * _462) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1481 - _1380)) + _1380);
    float _1500 = (((_513 * _464) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1483 - _1382)) + _1382);
    float _1502 = (((_513 * _465) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1485 - _1384)) + _1384);
    float _1505 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, _1498 * cbSceneParam._m0[91u].x));
    float _1545 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1549 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1558 = _1545 / _1557;
    float _1559 = _1549 / _1557;
    float _1560 = _1553 / _1557;
    float _1707;
    float _1708;
    float _1709;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1587 = ((uint(_1560 > cbSceneParam._m0[59u].y) + uint(_1560 > cbSceneParam._m0[59u].x)) + uint(_1560 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1588 = _1587 + 43u;
        uint _1596 = _1587 + 44u;
        uint _1604 = _1587 + 45u;
        uint _1612 = _1587 + 46u;
        float _1623 = fma(_1557, cbSceneParam._m0[_1588].w, fma(_1553, cbSceneParam._m0[_1588].z, fma(_1549, cbSceneParam._m0[_1588].y, _1545 * cbSceneParam._m0[_1588].x)));
        float _1627 = fma(_1557, cbSceneParam._m0[_1596].w, fma(_1553, cbSceneParam._m0[_1596].z, fma(_1549, cbSceneParam._m0[_1596].y, _1545 * cbSceneParam._m0[_1596].x)));
        float _1635 = fma(_1557, cbSceneParam._m0[_1612].w, fma(_1553, cbSceneParam._m0[_1612].z, fma(_1549, cbSceneParam._m0[_1612].y, _1545 * cbSceneParam._m0[_1612].x)));
        float _1640 = cbSceneParam._m0[33u].z * _1635;
        float _1642 = cbSceneParam._m0[33u].w * _1635;
        float _1645 = fma(_1557, cbSceneParam._m0[_1604].w, fma(_1553, cbSceneParam._m0[_1604].z, fma(_1549, cbSceneParam._m0[_1604].y, _1545 * cbSceneParam._m0[_1604].x))) / _1635;
        float _1693 = (cbSceneParam._m0[33u].x - sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560))) * cbSceneParam._m0[33u].y;
        float _3949 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1700 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 + _1623) / _1635, (_1642 + _1627) / _1635), _1645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 + _1623) / _1635, (_1627 - _1640) / _1635), _1645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1623 - _1640) / _1635, (_1627 - _1642) / _1635), _1645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1623 - _1642) / _1635, (_1640 + _1627) / _1635), _1645), 0.0)).x), vec4(0.25)));
        _1707 = 1.0 - (_1700 * cbSceneParam._m0[34u].x);
        _1708 = 1.0 - (_1700 * cbSceneParam._m0[34u].y);
        _1709 = 1.0 - (_1700 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1707 = 1.0;
        _1708 = 1.0;
        _1709 = 1.0;
    }
    float _1773;
    float _1775;
    float _1777;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1761 = fma(_1557, cbSceneParam._m0[63u].w, fma(_1553, cbSceneParam._m0[63u].z, fma(_1549, cbSceneParam._m0[63u].y, _1545 * cbSceneParam._m0[63u].x)));
        float _1762 = fma(_1557, cbSceneParam._m0[60u].w, fma(_1553, cbSceneParam._m0[60u].z, fma(_1549, cbSceneParam._m0[60u].y, _1545 * cbSceneParam._m0[60u].x))) / _1761;
        float _1763 = fma(_1557, cbSceneParam._m0[61u].w, fma(_1553, cbSceneParam._m0[61u].z, fma(_1549, cbSceneParam._m0[61u].y, _1545 * cbSceneParam._m0[61u].x))) / _1761;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1762 >= cbSceneParam._m0[64u].x) && (_1763 >= cbSceneParam._m0[64u].y)) && (_1762 <= cbSceneParam._m0[64u].z)) && (_1763 <= cbSceneParam._m0[64u].w))
        {
            float _1902 = fma(_1557, cbSceneParam._m0[62u].w, fma(_1553, cbSceneParam._m0[62u].z, fma(_1549, cbSceneParam._m0[62u].y, _1545 * cbSceneParam._m0[62u].x))) / _1761;
            float _1906 = isnan(cbSceneParam._m0[41u].w) ? _1902 : (isnan(_1902) ? cbSceneParam._m0[41u].w : max(_1902, cbSceneParam._m0[41u].w));
            float _1949 = (cbSceneParam._m0[33u].x - sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560))) * cbSceneParam._m0[33u].y;
            float _3965 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
            float _1956 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1762, cbSceneParam._m0[33u].w + _1763), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1762, _1763 - cbSceneParam._m0[33u].z), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1762 - cbSceneParam._m0[33u].z, _1763 - cbSceneParam._m0[33u].w), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1762 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1763), _1906), 0.0)).x), vec4(0.25)));
            float _1960 = 1.0 - (_1956 * cbSceneParam._m0[34u].x);
            float _1961 = 1.0 - (_1956 * cbSceneParam._m0[34u].y);
            float _1962 = 1.0 - (_1956 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1962) ? _1709 : (isnan(_1709) ? _1962 : min(_1709, _1962));
            frontier_phi_34_33_ladder_1 = isnan(_1961) ? _1708 : (isnan(_1708) ? _1961 : min(_1708, _1961));
            frontier_phi_34_33_ladder_2 = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
        }
        else
        {
            frontier_phi_34_33_ladder = _1709;
            frontier_phi_34_33_ladder_1 = _1708;
            frontier_phi_34_33_ladder_2 = _1707;
        }
        _1773 = frontier_phi_34_33_ladder_2;
        _1775 = frontier_phi_34_33_ladder_1;
        _1777 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1773 = _1707;
        _1775 = _1708;
        _1777 = _1709;
    }
    uvec4 _1782 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1784 = _1782.x * 14u;
    uint _1785 = _1784 + 13u;
    float _1792 = _478 + (-1.0);
    float _1797 = (cbLight._m0[_1785].x * _1792) + 1.0;
    float _1798 = (cbLight._m0[_1785].y * _1792) + 1.0;
    float _1799 = (cbLight._m0[_1785].z * _1792) + 1.0;
    float _1800 = (cbLight._m0[_1785].w * _1792) + 1.0;
    uint _1801 = _1784 + 5u;
    float _1807 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1811 = _1784 + 4u;
    float _1821 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1825 = _1784 | 1u;
    float _1836 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_304, _305, _306));
    float _1839 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_304, _305, _306));
    float _4001 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _4012 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1844 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _1846 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.3183098733425140380859375;
    float _1853 = ((cbLight._m0[_1801].x * _1807) * _1846) + (((cbLight._m0[_1811].x * _1773) * _1821) * _1844);
    float _1854 = ((_1807 * cbLight._m0[_1801].y) * _1846) + (((cbLight._m0[_1811].y * _1775) * _1821) * _1844);
    float _1855 = ((_1807 * cbLight._m0[_1801].z) * _1846) + (((cbLight._m0[_1811].z * _1777) * _1821) * _1844);
    uvec4 _1859 = floatBitsToUint(cbLight._m0[_1784 + 12u]);
    bool _1861 = _1859.x == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1861)
    {
        _1963 = _1853;
        _1965 = _1854;
        _1967 = _1855;
    }
    else
    {
        uint _1971 = _1784 + 6u;
        float _1987 = (dot(vec3(cbLight._m0[_1784 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1988 = _1987 * _1987;
        float _4023 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1990 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _1963 = (((cbLight._m0[_1971].x * 0.3183098733425140380859375) * _1989) * _1990) + _1853;
        _1965 = (((cbLight._m0[_1971].y * 0.3183098733425140380859375) * _1989) * _1990) + _1854;
        _1967 = (((cbLight._m0[_1971].z * 0.3183098733425140380859375) * _1989) * _1990) + _1855;
    }
    bool _1970 = _1859.y == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_1970)
    {
        _2025 = _1963;
        _2027 = _1965;
        _2029 = _1967;
    }
    else
    {
        uint _2198 = _1784 + 7u;
        float _2214 = (dot(vec3(cbLight._m0[_1784 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4039 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2217 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2025 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _1963;
        _2027 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _1965;
        _2029 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _1967;
    }
    uint _2032 = _1784 + 8u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _307) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1784].x + _387;
    float _2048 = cbLight._m0[_1784].y + _388;
    float _2049 = cbLight._m0[_1784].z + _389;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1784].xyz));
    float _4055 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2061 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _2062 = dot(vec3(_304, _305, _306), vec3(_2054, _2055, _2056));
    float _4077 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_2054, _2055, _2056));
    float _4088 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2046 * _2046;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
    float _2083 = 0.959999978542327880859375 - _459;
    float _2085 = 0.959999978542327880859375 - _460;
    float _2086 = 0.959999978542327880859375 - _461;
    float _2093 = 1.0 - _2046;
    float _2104 = (0.5 / (((_2061 * ((_2060 * _2093) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2093) + _2046) * _2060))) * _2060;
    float _4099 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2106 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    uint _2120 = _1784 + 9u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _307) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1825].x + _387;
    float _2134 = cbLight._m0[_1825].y + _388;
    float _2135 = cbLight._m0[_1825].z + _389;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1825].xyz));
    float _4110 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2147 = dot(vec3(_304, _305, _306), vec3(_2140, _2141, _2142));
    float _4121 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2140, _2141, _2142));
    float _4132 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2132 * _2132;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2166 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
    float _2173 = 1.0 - _2132;
    float _2183 = (0.5 / (((_2061 * ((_2146 * _2173) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2173) + _2132) * _2146))) * _2146;
    float _4143 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    float _2195 = (((((_2166 * _2083) + _462) * cbLight._m0[_2120].x) * _2185) * _1807) + ((((cbLight._m0[_2032].x * _1773) * ((_2082 * _2083) + _462)) * _2106) * _1821);
    float _2196 = (((((_2166 * _2085) + _464) * cbLight._m0[_2120].y) * _2185) * _1807) + ((((cbLight._m0[_2032].y * _1775) * ((_2082 * _2085) + _464)) * _2106) * _1821);
    float _2197 = (((((_2166 * _2086) + _465) * cbLight._m0[_2120].z) * _2185) * _1807) + ((((cbLight._m0[_2032].z * _1777) * ((_2082 * _2086) + _465)) * _2106) * _1821);
    float _2253;
    float _2255;
    float _2257;
    if (_1861)
    {
        _2253 = _2195;
        _2255 = _2196;
        _2257 = _2197;
    }
    else
    {
        uint _2259 = _1784 + 2u;
        uint _2263 = _1784 + 10u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _307) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _387;
        float _2280 = cbLight._m0[_2259].y + _388;
        float _2281 = cbLight._m0[_2259].z + _389;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2259].xyz));
        float _4154 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2293 = dot(vec3(_304, _305, _306), vec3(_2286, _2287, _2288));
        float _4165 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4176 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
        float _2319 = 1.0 - _2278;
        float _2329 = (0.5 / (((_2061 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2319) + _2278) * _2292))) * _2292;
        float _4187 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2253 = (((((_2312 * _2083) + _462) * cbLight._m0[_2263].x) * _2331) * _2332) + _2195;
        _2255 = (((((_2312 * _2085) + _464) * cbLight._m0[_2263].y) * _2331) * _2332) + _2196;
        _2257 = (((((_2312 * _2086) + _465) * cbLight._m0[_2263].z) * _2331) * _2332) + _2197;
    }
    float _2363;
    float _2365;
    float _2367;
    if (_1970)
    {
        _2363 = _2253;
        _2365 = _2255;
        _2367 = _2257;
    }
    else
    {
        uint _2374 = _1784 + 3u;
        uint _2378 = _1784 + 11u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _307) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _387;
        float _2395 = cbLight._m0[_2374].y + _388;
        float _2396 = cbLight._m0[_2374].z + _389;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2374].xyz));
        float _4203 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2408 = dot(vec3(_304, _305, _306), vec3(_2401, _2402, _2403));
        float _4214 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4225 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0);
        float _2434 = 1.0 - _2393;
        float _2444 = (0.5 / (((_2061 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2434) + _2393) * _2407))) * _2407;
        float _4236 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2363 = (((((_2427 * _2083) + _462) * cbLight._m0[_2378].x) * _2446) * _2447) + _2253;
        _2365 = (((((_2427 * _2085) + _464) * cbLight._m0[_2378].y) * _2446) * _2447) + _2255;
        _2367 = (((((_2427 * _2086) + _465) * cbLight._m0[_2378].z) * _2446) * _2447) + _2257;
    }
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_1782.y == 0u)
    {
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.x;
        uint _2480 = uint((float(_2468.y) * floor(float(uint(cbSceneParam._m0[85u].y * _396) / _2469))) + floor(float(uint(cbSceneParam._m0[85u].x * _395) / _2469)));
        float _2490 = (log2(_1560 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        uint _2494 = uint(isnan(14.0) ? _2491 : (isnan(_2491) ? 14.0 : min(_2491, 14.0)));
        uvec4 _2499 = texelFetch(g_lightClusterGridBuffer, int(((_2494 << 2u) + (_2480 << 6u)) >> 2u));
        uint _2500 = _2499.x;
        uint _2501 = _2468.z;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((((1u << ((_2501 >> 4u) & 15u)) + 4294967295u) & _2500) == 0u) || ((_2501 & 240u) == 0u))
        {
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
        }
        else
        {
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2741)
                {
                    frontier_phi_66_pred = _2730;
                    frontier_phi_66_pred_1 = _2729;
                    frontier_phi_66_pred_2 = _2728;
                    frontier_phi_66_pred_3 = _2727;
                    frontier_phi_66_pred_4 = _2726;
                    frontier_phi_66_pred_5 = _2725;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2740;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2731 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _1558;
                        float _2916 = _2875.y - _1559;
                        float _2917 = _2875.z - _1560;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_417, _420, _423), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4262 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _1558;
                        float _2951 = (-0.0) - _1559;
                        float _2952 = (-0.0) - _1560;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2966 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _494;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2957 + _2922;
                        float _2978 = _2958 + _2923;
                        float _2979 = _2959 + _2924;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_417, _420, _423), vec3(_2957, _2958, _2959));
                        float _4278 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2991 = dot(vec3(_417, _420, _423), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4289 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2935 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2925) + _3000;
                        float _4300 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4311 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3026 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_2998 * _2998) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2784 = (_2946 * _2894.x) + _2852;
                        _2785 = (_2946 * _2894.y) + _2853;
                        _2786 = (_2946 * _2894.z) + _2854;
                        _2781 = (_3026 * _2911.x) + _2849;
                        _2782 = (_3026 * _2911.y) + _2850;
                        _2783 = (_3026 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_66_pred = _2786;
                    frontier_phi_66_pred_1 = _2785;
                    frontier_phi_66_pred_2 = _2784;
                    frontier_phi_66_pred_3 = _2783;
                    frontier_phi_66_pred_4 = _2782;
                    frontier_phi_66_pred_5 = _2781;
                }
                _2591 = frontier_phi_66_pred;
                _2589 = frontier_phi_66_pred_1;
                _2587 = frontier_phi_66_pred_2;
                _2585 = frontier_phi_66_pred_3;
                _2583 = frontier_phi_66_pred_4;
                _2581 = frontier_phi_66_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2581;
                    _2726 = _2583;
                    _2727 = _2585;
                    _2728 = _2587;
                    _2729 = _2589;
                    _2730 = _2591;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
        }
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.z;
        uint _2597 = (_2595 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2597) & _2500) == 0u)
        {
            _2693 = _2580;
            _2695 = _2582;
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
            float _2719 = _2718 * _1558;
            float _2720 = _2718 * _1559;
            float _2721 = _2718 * _1560;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2597 < ((_2595 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2832 = _2580;
                float _2833 = _2582;
                float _2834 = _2584;
                float _2835 = _2586;
                float _2836 = _2588;
                float _2837 = _2590;
                uint _2838 = _2597;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2848)
                    {
                        frontier_phi_72_pred = _2837;
                        frontier_phi_72_pred_1 = _2836;
                        frontier_phi_72_pred_2 = _2835;
                        frontier_phi_72_pred_3 = _2834;
                        frontier_phi_72_pred_4 = _2833;
                        frontier_phi_72_pred_5 = _2832;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        uint _3050 = _2847;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3120;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3061 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3107 = (_3061 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3123 = (_3061 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3061 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3061 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_1560, _3171.z, fma(_1559, _3171.y, _3171.x * _1558)) + _3171.w;
                            _3184 = !((fma(_1560, _3152.z, fma(_1559, _3152.y, _3152.x * _1558)) + _3152.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3076.x - _1558;
                                float _3212 = _3076.y - _1559;
                                float _3213 = _3076.z - _1560;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3077 * _3077));
                                float _4322 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3229 = sqrt(_3214) * _3092.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_417, _420, _423))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_1560, _3120.z, fma(_1559, _3120.y, _3120.x * _1558)) + _3120.w) / _3183;
                                float _3243 = (fma(_1560, _3136.z, fma(_1559, _3136.y, _3136.x * _1558)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4338 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _494;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2719;
                                float _3273 = _3219 - _2720;
                                float _3274 = _3220 - _2721;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_417, _420, _423), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4349 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3286 = dot(vec3(_417, _420, _423), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4360 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_417, _420, _423), vec3(_3218, _3219, _3220))) + _3295;
                                float _4371 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4382 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3249 * _3092.y;
                                frontier_phi_78_pred_1 = _3249 * _3092.x;
                                frontier_phi_78_pred_2 = _3323 * _3104.z;
                                frontier_phi_78_pred_3 = _3323 * _3104.y;
                                frontier_phi_78_pred_4 = _3323 * _3104.x;
                                frontier_phi_78_pred_5 = _3249 * _3092.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3331 = frontier_phi_78_pred;
                            _3330 = frontier_phi_78_pred_1;
                            _3329 = frontier_phi_78_pred_2;
                            _3328 = frontier_phi_78_pred_3;
                            _3327 = frontier_phi_78_pred_4;
                            _3332 = frontier_phi_78_pred_5;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3036;
                        frontier_phi_72_pred_1 = _3035;
                        frontier_phi_72_pred_2 = _3034;
                        frontier_phi_72_pred_3 = _3033;
                        frontier_phi_72_pred_4 = _3032;
                        frontier_phi_72_pred_5 = _3031;
                    }
                    _2704 = frontier_phi_72_pred;
                    _2702 = frontier_phi_72_pred_1;
                    _2700 = frontier_phi_72_pred_2;
                    _2698 = frontier_phi_72_pred_3;
                    _2696 = frontier_phi_72_pred_4;
                    _2694 = frontier_phi_72_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2694;
                        _2833 = _2696;
                        _2834 = _2698;
                        _2835 = _2700;
                        _2836 = _2702;
                        _2837 = _2704;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2704;
                frontier_phi_60_61_ladder_1 = _2702;
                frontier_phi_60_61_ladder_2 = _2698;
                frontier_phi_60_61_ladder_3 = _2696;
                frontier_phi_60_61_ladder_4 = _2694;
                frontier_phi_60_61_ladder_5 = _2700;
            }
            else
            {
                frontier_phi_60_61_ladder = _2590;
                frontier_phi_60_61_ladder_1 = _2588;
                frontier_phi_60_61_ladder_2 = _2584;
                frontier_phi_60_61_ladder_3 = _2582;
                frontier_phi_60_61_ladder_4 = _2580;
                frontier_phi_60_61_ladder_5 = _2586;
            }
            _2693 = frontier_phi_60_61_ladder_4;
            _2695 = frontier_phi_60_61_ladder_3;
            _2697 = frontier_phi_60_61_ladder_2;
            _2699 = frontier_phi_60_61_ladder_5;
            _2701 = frontier_phi_60_61_ladder_1;
            _2703 = frontier_phi_60_61_ladder;
        }
        float _2708 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        _2513 = (_2708 * _2699) + _2025;
        _2515 = (_2708 * _2701) + _2027;
        _2517 = (_2708 * _2703) + _2029;
        _2519 = ((_2693 * _462) * _2708) + _2363;
        _2521 = ((_2695 * _464) * _2708) + _2365;
        _2523 = ((_2697 * _465) * _2708) + _2367;
    }
    else
    {
        _2513 = _2025;
        _2515 = _2027;
        _2517 = _2029;
        _2519 = _2363;
        _2521 = _2365;
        _2523 = _2367;
    }
    float _4398 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4409 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4420 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    uint _2543 = _436 + 6u;
    float _2551 = _395 / cbSceneParam._m0[86u].x;
    float _2552 = _396 / cbSceneParam._m0[86u].y;
    vec4 _2566 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2568 = _2566.x;
    float _2569 = _2566.y;
    float _2570 = _2566.z;
    float _2571 = _2566.w;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2605 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2606 = _2605 / _328;
        float _2617 = _2606 * _380;
        float _2618 = _381 * _2606;
        float _2619 = (-0.0) - _2618;
        float _2621 = _2606 * _382;
        float _2623 = (cbSceneParam._m0[77u].w * _2619) / _2605;
        float _2624 = _2623 + cbSceneParam._m0[79u].w;
        float _2625 = cbSceneParam._m0[79u].w - _2618;
        float _2631 = sqrt(((_2617 * _2617) + (_2618 * _2618)) + (_2621 * _2621));
        float _2634 = (1.0 - (cbSceneParam._m0[77u].w / _2605)) * _2631;
        float _2639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2619 - _2623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2624 > 0.0) ? exp2(_2639 * _2624) : (2.0 - exp2(_2641 * _2624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2634;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : max(_2624, _2625));
            float _2756 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : min(_2624, _2625));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2794 = ((abs(_2631 / _2619) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2639 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2639 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2641 * _2765) - exp2(_2641 * _2766)) * _2754))) + (_2634 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2571);
        _2643 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2568;
        _2645 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2569;
        _2647 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2570;
        _2649 = _2805 * _2571;
    }
    else
    {
        _2643 = _2568;
        _2645 = _2569;
        _2647 = _2570;
        _2649 = _2571;
    }
    float _2661 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2662 = _2661 == 3.0;
    float _2663 = log2(_2649);
    float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2513 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _478))) + ((_2519 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1287)) * cbPerFrame._m0[3u].x));
    float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2515 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _478))) + ((_2521 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1287)) * cbPerFrame._m0[3u].x));
    float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2517 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _478))) + ((_2523 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1287)) * cbPerFrame._m0[3u].x));
    float _2681 = (_2661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2681 * (_2662 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.y = _2681 * (_2662 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.z = _2681 * (_2662 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.w = cbInstanceData._m0[_2543].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2543].w;
}


