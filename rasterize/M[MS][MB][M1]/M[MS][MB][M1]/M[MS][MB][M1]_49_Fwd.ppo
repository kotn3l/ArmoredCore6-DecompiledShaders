#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1150;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _325 = _321.z;
    float _330 = (_321.x * 2.0) + (-1.0);
    float _332 = (_321.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_330, _332), vec2(_330, _332));
    float _3477 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    float _342 = fma(_339, _223, fma(_332, _230, _330 * _216));
    float _345 = fma(_339, _224, fma(_332, _231, _330 * _217));
    float _348 = fma(_339, _225, fma(_332, _232, _330 * _218));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _390 = _388.x;
    float _391 = 1.0 - _390;
    float _400 = (cbMtdParam._m0[19u].x + dot(vec4(_352 * _342, _352 * _345, _352 * _348, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_390 - _391) * cbMtdParam._m0[24u].z) + _391) * cbMtdParam._m0[21u].z);
    float _3488 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _403 = (-0.0) - cbMtdParam._m0[24u].x;
    float _405 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _405 : (isnan(_405) ? 1.0 : min(_405, 1.0));
    float _413 = _401 - ((_401 * TEXCOORD_8.x) * _406);
    float _414 = _401 - ((_401 * TEXCOORD_8.y) * _406);
    float _415 = _401 - ((_401 * TEXCOORD_8.z) * _406);
    float _422 = (_413 * ((_301.x * cbMtdParam._m0[18u].x) - _280)) + _280;
    float _423 = (_414 * ((_301.y * cbMtdParam._m0[18u].y) - _281)) + _281;
    float _424 = (_415 * ((_301.z * cbMtdParam._m0[18u].z) - _282)) + _282;
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _438 = _436.x;
    float _439 = 1.0 - _438;
    float _469 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_438 - _439) * cbMtdParam._m0[24u].w) + _439) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3509 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _478 = ((((cbMtdParam._m0[10u].x - _422) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _470) + _422;
    float _479 = ((((cbMtdParam._m0[10u].y - _423) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _470) + _423;
    float _480 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _424)) * _470) + _424;
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _495 = _493.x;
    float _497 = _495 - (_495 * _413);
    float _499 = _497 - (_497 * _470);
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _520 = (_513.x * 2.0) + (-1.0);
    float _521 = (_513.y * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3520 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _530 = ((_513.z - _325) * _413) + _325;
    float _533 = ((cbMtdParam._m0[23u].y - _530) * _470) + _530;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _558 = (_552.x * 2.0) + (-1.0);
    float _559 = (_552.y * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3531 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _575 = ((sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) - _339) * _415) + _339;
    float _578 = (((_520 - _330) * _413) + _330) + (cbMtdParam._m0[21u].x * _330);
    float _579 = (((_521 - _332) * _414) + _332) + (cbMtdParam._m0[21u].x * _332);
    float _590 = (((_558 - _578) + (_578 * cbMtdParam._m0[22u].z)) * _470) + _578;
    float _591 = (((_559 - _579) + (_579 * cbMtdParam._m0[22u].z)) * _470) + _579;
    float _592 = (_470 * (sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) - _575)) + _575;
    float _594 = cbMtdParam._m0[22u].x + _321.w;
    float _597 = fma(_592, _223, fma(_591, _230, _590 * _216));
    float _600 = fma(_592, _224, fma(_591, _231, _590 * _217));
    float _603 = fma(_592, _225, fma(_591, _232, _590 * _218));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3542 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _611 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3564 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3575 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3586 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3597 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _616 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _630 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _680 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _670);
    float _681 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _670);
    float _682 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _670);
    float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
    float _687 = _680 * _686;
    float _688 = _681 * _686;
    float _689 = _682 * _686;
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _717 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _720 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _723 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    uint _737 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3608 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _749 = 1.0 - _616;
    float _750 = _746 * _749;
    float _751 = _747 * _749;
    float _752 = _748 * _749;
    float _757 = (_746 + (-0.039999999105930328369140625)) * _616;
    float _758 = (_747 + (-0.039999999105930328369140625)) * _616;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _616;
    float _760 = _757 + 0.039999999105930328369140625;
    float _762 = _758 + 0.039999999105930328369140625;
    float _763 = _759 + 0.039999999105930328369140625;
    vec4 _772 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _776 = ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * TEXCOORD_5.w) * _772.x;
    float _777 = dot(vec3(_608, _609, _610), vec3(_687, _688, _689));
    float _780 = _777 * 2.0;
    float _784 = (_780 * _608) - _687;
    float _785 = (_780 * _609) - _688;
    float _786 = (_780 * _610) - _689;
    float _790 = abs(dot(vec3(_687, _688, _689), vec3(_608, _609, _610)));
    float _3641 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = sqrt(_611);
    float _805 = exp2((_792 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_792 * 3.0));
    float _811 = (1.0 - _805) * ((_792 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _812 = _805 * _792;
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1149;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _874 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _878 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _882 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _907 = _840 + _608;
        float _908 = _844 + _609;
        float _909 = _848 + _610;
        float _919 = fma(_909, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907)) - _874;
        float _920 = fma(_909, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907)) - _878;
        float _921 = fma(_909, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907)) - _882;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_874 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_878 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[34u].z) + ((((((_882 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _977 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_943.x + (-0.5));
        float _979 = _977 * (_943.y + (-0.5));
        float _980 = _977 * (_943.z + (-0.5));
        float _987 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_950.x + (-0.5));
        float _989 = _987 * (_950.y + (-0.5));
        float _990 = _987 * (_950.z + (-0.5));
        float _997 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_957.x + (-0.5));
        float _999 = _997 * (_957.y + (-0.5));
        float _1000 = _997 * (_957.z + (-0.5));
        float _1007 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_964.x + (-0.5));
        float _1009 = _1007 * (_964.y + (-0.5));
        float _1010 = _1007 * (_964.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1031 = (dot(vec3(_608, _609, _610), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1041 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3689 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1043 + 1.0))) + _1048) * _1011;
        float _1058 = _979 * 0.5;
        float _1059 = _989 * 0.5;
        float _1060 = _999 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_608, _609, _610), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3722 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1085 + 1.0))) + _1090) * _1012;
        float _1100 = _980 * 0.5;
        float _1101 = _990 * 0.5;
        float _1102 = _1000 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_608, _609, _610), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3755 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1127 + 1.0))) + _1132) * _1013;
        _1149 = _980;
        _1151 = _979;
        _1152 = _978;
        _1153 = _990;
        _1154 = _989;
        _1155 = _988;
        _1156 = _1000;
        _1157 = _999;
        _1158 = _998;
        _1159 = _1013;
        _1160 = _1012;
        _1161 = _1011;
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _1150;
        _1151 = _1150;
        _1152 = _1150;
        _1153 = _1150;
        _1154 = _1150;
        _1155 = _1150;
        _1156 = _1150;
        _1157 = _1150;
        _1158 = _1150;
        _1159 = _1150;
        _1160 = _1150;
        _1161 = _1150;
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
    }
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1189 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1193 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1197 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1220 = _840 + _608;
        float _1221 = _844 + _609;
        float _1222 = _848 + _610;
        float _1232 = fma(_1222, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1189 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1193 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[35u].z) + ((((((_1197 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1288 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1255.x + (-0.5));
        float _1290 = _1288 * (_1255.y + (-0.5));
        float _1291 = _1288 * (_1255.z + (-0.5));
        float _1298 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1262.x + (-0.5));
        float _1300 = _1298 * (_1262.y + (-0.5));
        float _1301 = _1298 * (_1262.z + (-0.5));
        float _1308 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1269.x + (-0.5));
        float _1310 = _1308 * (_1269.y + (-0.5));
        float _1311 = _1308 * (_1269.z + (-0.5));
        float _1318 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1276.x + (-0.5));
        float _1320 = _1318 * (_1276.y + (-0.5));
        float _1321 = _1318 * (_1276.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_608, _609, _610), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3818 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1352 + 1.0))) + _1357) * _1322;
        float _1367 = _1290 * 0.5;
        float _1368 = _1300 * 0.5;
        float _1369 = _1310 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_608, _609, _610), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3851 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1394 + 1.0))) + _1399) * _1323;
        float _1409 = _1291 * 0.5;
        float _1410 = _1301 * 0.5;
        float _1411 = _1311 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_608, _609, _610), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3884 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1436 + 1.0))) + _1441) * _1324;
        _1458 = _1291;
        _1459 = _1290;
        _1460 = _1289;
        _1461 = _1301;
        _1462 = _1300;
        _1463 = _1299;
        _1464 = _1311;
        _1465 = _1310;
        _1466 = _1309;
        _1467 = _1324;
        _1468 = _1323;
        _1469 = _1322;
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1150;
        _1459 = _1150;
        _1460 = _1150;
        _1461 = _1150;
        _1462 = _1150;
        _1463 = _1150;
        _1464 = _1150;
        _1465 = _1150;
        _1466 = _1150;
        _1467 = _1150;
        _1468 = _1150;
        _1469 = _1150;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1162)) + _1162;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1505 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1482));
    float _1526 = _784 * 0.5;
    float _1527 = _785 * 0.5;
    float _1528 = _786 * 0.5;
    float _1529 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1532 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1535 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1569;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1542 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1149, _1153, _1156, _1159));
        float _1546 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1550 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1557 = dot(vec4(cbModelParam._m0[39u]), vec4(_1526, _1527, _1528, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1580;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1571 = dot(vec4(cbModelParam._m0[40u]), vec4(_1526, _1527, _1528, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1584 = (_1580 * cbModelParam._m0[1u].x) + (_1569 * (1.0 - cbModelParam._m0[1u].x));
    float _1594 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1594 : min(cbModelParam._m0[25u].z, _1594));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1642 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1646 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1650 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1653 = fma(_786, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784));
        float _1656 = fma(_786, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784));
        float _1659 = fma(_786, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784));
        float _1687;
        if (_1653 > 0.0)
        {
            _1687 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1687 = frontier_phi_14_12_ladder;
        }
        float _1890;
        if (_1656 > 0.0)
        {
            _1890 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1890 = frontier_phi_23_19_ladder;
        }
        float _2144;
        if (_1659 > 0.0)
        {
            _2144 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2144 = frontier_phi_35_30_ladder;
        }
        float _2146 = isnan(_1890) ? _1687 : (isnan(_1687) ? _1890 : min(_1687, _1890));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1653) + _1642;
        float _2152 = (_2147 * _1656) + _1646;
        float _2153 = (_2147 * _1659) + _1650;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2281 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1595);
            frontier_phi_13_35_ladder = _2281.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2281.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2281.x * cbModelParam._m0[1u].y;
        }
        _1675 = frontier_phi_13_35_ladder_2;
        _1677 = frontier_phi_13_35_ladder_1;
        _1679 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_784, _785, _786), _1595);
        _1675 = _1663.x * cbModelParam._m0[1u].y;
        _1677 = _1663.y * cbModelParam._m0[1u].y;
        _1679 = _1663.z * cbModelParam._m0[1u].y;
    }
    float _1683 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1683 : min(cbModelParam._m0[25u].w, _1683));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1737 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1741 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1745 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1748 = fma(_786, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784));
        float _1751 = fma(_786, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784));
        float _1754 = fma(_786, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784));
        float _1895;
        if (_1748 > 0.0)
        {
            _1895 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1895 = frontier_phi_25_21_ladder;
        }
        float _2171;
        if (_1751 > 0.0)
        {
            _2171 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2171 = frontier_phi_37_32_ladder;
        }
        float _2384;
        if (_1754 > 0.0)
        {
            _2384 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2384 = frontier_phi_46_43_ladder;
        }
        float _2386 = isnan(_2171) ? _1895 : (isnan(_1895) ? _2171 : min(_1895, _2171));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1748) + _1737;
        float _2392 = (_2387 * _1751) + _1741;
        float _2393 = (_2387 * _1754) + _1745;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1684);
            frontier_phi_22_46_ladder = _2592.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2592.x * cbModelParam._m0[1u].z;
        }
        _1773 = frontier_phi_22_46_ladder_2;
        _1775 = frontier_phi_22_46_ladder_1;
        _1777 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_784, _785, _786), _1684);
        _1773 = _1757.x * cbModelParam._m0[1u].z;
        _1775 = _1757.y * cbModelParam._m0[1u].z;
        _1777 = _1757.z * cbModelParam._m0[1u].z;
    }
    float _1790 = (((_811 * _760) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1773 - _1675)) + _1675);
    float _1792 = (((_811 * _762) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1775 - _1677)) + _1677);
    float _1794 = (((_811 * _763) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1777 - _1679)) + _1679);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, _1790 * cbSceneParam._m0[91u].x));
    uvec4 _1813 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1815 = _1813.x * 14u;
    uint _1816 = _1815 + 13u;
    float _1823 = _776 + (-1.0);
    float _1828 = (cbLight._m0[_1816].x * _1823) + 1.0;
    float _1829 = (cbLight._m0[_1816].y * _1823) + 1.0;
    float _1830 = (cbLight._m0[_1816].z * _1823) + 1.0;
    float _1831 = (cbLight._m0[_1816].w * _1823) + 1.0;
    uint _1832 = _1815 + 5u;
    float _1838 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1842 = _1815 + 4u;
    float _1849 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1853 = _1815 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_608, _609, _610));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_608, _609, _610));
    float _4020 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4031 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1832].x * _1838) * _1874) + ((cbLight._m0[_1842].x * _1849) * _1872);
    float _1882 = ((_1838 * cbLight._m0[_1832].y) * _1874) + ((_1849 * cbLight._m0[_1842].y) * _1872);
    float _1883 = ((_1838 * cbLight._m0[_1832].z) * _1874) + ((_1849 * cbLight._m0[_1842].z) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1815 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1889)
    {
        _1900 = _1881;
        _1902 = _1882;
        _1904 = _1883;
    }
    else
    {
        uint _1908 = _1815 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1815 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _4042 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1927 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1881;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1882;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1883;
    }
    bool _1907 = _1887.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1907)
    {
        _1945 = _1900;
        _1947 = _1902;
        _1949 = _1904;
    }
    else
    {
        uint _2115 = _1815 + 7u;
        float _2131 = (dot(vec3(cbLight._m0[_1815 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4058 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2134 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1945 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1900;
        _1947 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1902;
        _1949 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1904;
    }
    uint _1952 = _1815 + 8u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _611) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1815].x + _687;
    float _1968 = cbLight._m0[_1815].y + _688;
    float _1969 = cbLight._m0[_1815].z + _689;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1815].xyz));
    float _4074 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _1981 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1982 = dot(vec3(_608, _609, _610), vec3(_1974, _1975, _1976));
    float _4096 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_1974, _1975, _1976));
    float _4107 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1966 * _1966;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2002 = exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0);
    float _2003 = 0.959999978542327880859375 - _757;
    float _2005 = 0.959999978542327880859375 - _758;
    float _2006 = 0.959999978542327880859375 - _759;
    float _2013 = 1.0 - _1966;
    float _2024 = (0.5 / (((_1981 * ((_1980 * _2013) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2013) + _1966) * _1980))) * _1980;
    float _4118 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    uint _2037 = _1815 + 9u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _611) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1853].x + _687;
    float _2051 = cbLight._m0[_1853].y + _688;
    float _2052 = cbLight._m0[_1853].z + _689;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1853].xyz));
    float _4129 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2064 = dot(vec3(_608, _609, _610), vec3(_2057, _2058, _2059));
    float _4140 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2057, _2058, _2059));
    float _4151 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2049 * _2049;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
    float _2090 = 1.0 - _2049;
    float _2100 = (0.5 / (((_1981 * ((_2063 * _2090) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2090) + _2049) * _2063))) * _2063;
    float _4162 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    float _2112 = (((((_2083 * _2003) + _760) * cbLight._m0[_2037].x) * _2102) * _1838) + (((((_2002 * _2003) + _760) * cbLight._m0[_1952].x) * _2026) * _1849);
    float _2113 = (((((_2083 * _2005) + _762) * cbLight._m0[_2037].y) * _2102) * _1838) + (((((_2002 * _2005) + _762) * cbLight._m0[_1952].y) * _2026) * _1849);
    float _2114 = (((((_2083 * _2006) + _763) * cbLight._m0[_2037].z) * _2102) * _1838) + (((((_2002 * _2006) + _763) * cbLight._m0[_1952].z) * _2026) * _1849);
    float _2176;
    float _2178;
    float _2180;
    if (_1889)
    {
        _2176 = _2112;
        _2178 = _2113;
        _2180 = _2114;
    }
    else
    {
        uint _2182 = _1815 + 2u;
        uint _2186 = _1815 + 10u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _611) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _687;
        float _2203 = cbLight._m0[_2182].y + _688;
        float _2204 = cbLight._m0[_2182].z + _689;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2182].xyz));
        float _4173 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2216 = dot(vec3(_608, _609, _610), vec3(_2209, _2210, _2211));
        float _4184 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4195 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2235 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
        float _2242 = 1.0 - _2201;
        float _2252 = (0.5 / (((_1981 * ((_2215 * _2242) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2242) + _2201) * _2215))) * _2215;
        float _4206 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2254 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2255 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2176 = (((((_2235 * _2003) + _760) * cbLight._m0[_2186].x) * _2254) * _2255) + _2112;
        _2178 = (((((_2235 * _2005) + _762) * cbLight._m0[_2186].y) * _2254) * _2255) + _2113;
        _2180 = (((((_2235 * _2006) + _763) * cbLight._m0[_2186].z) * _2254) * _2255) + _2114;
    }
    float _2290;
    float _2292;
    float _2294;
    if (_1907)
    {
        _2290 = _2176;
        _2292 = _2178;
        _2294 = _2180;
    }
    else
    {
        uint _2301 = _1815 + 3u;
        uint _2305 = _1815 + 11u;
        float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _611) * 0.949999988079071044921875);
        float _2320 = _2319 * _2319;
        float _2321 = cbLight._m0[_2301].x + _687;
        float _2322 = cbLight._m0[_2301].y + _688;
        float _2323 = cbLight._m0[_2301].z + _689;
        float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
        float _2328 = _2327 * _2321;
        float _2329 = _2327 * _2322;
        float _2330 = _2327 * _2323;
        float _2331 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2301].xyz));
        float _4222 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2335 = dot(vec3(_608, _609, _610), vec3(_2328, _2329, _2330));
        float _4233 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2339 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2328, _2329, _2330));
        float _4244 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _2320 * _2320;
        float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
        float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
        float _2361 = 1.0 - _2320;
        float _2371 = (0.5 / (((_1981 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2361) + _2320) * _2334))) * _2334;
        float _4255 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2290 = (((((_2354 * _2003) + _760) * cbLight._m0[_2305].x) * _2373) * _2374) + _2176;
        _2292 = (((((_2354 * _2005) + _762) * cbLight._m0[_2305].y) * _2373) * _2374) + _2178;
        _2294 = (((((_2354 * _2006) + _763) * cbLight._m0[_2305].z) * _2373) * _2374) + _2180;
    }
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_1813.y == 0u)
    {
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2449;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2449;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2449;
        uvec4 _2464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2465 = _2464.x;
        uint _2476 = uint((float(_2464.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2465))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2465)));
        float _2486 = (log2(_2452 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2487 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        uint _2490 = uint(isnan(14.0) ? _2487 : (isnan(_2487) ? 14.0 : min(_2487, 14.0)));
        uvec4 _2495 = texelFetch(g_lightClusterGridBuffer, int(((_2490 << 2u) + (_2476 << 6u)) >> 2u));
        uint _2496 = _2495.x;
        uint _2497 = _2464.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2497 >> 4u) & 15u)) + 4294967295u) & _2496) == 0u) || ((_2497 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            uint _2747 = 0u;
            uint _2756;
            bool _2757;
            for (;;)
            {
                _2756 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                _2757 = _2756 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2757)
                {
                    frontier_phi_61_pred = _2741;
                    frontier_phi_61_pred_1 = _2746;
                    frontier_phi_61_pred_2 = _2745;
                    frontier_phi_61_pred_3 = _2744;
                    frontier_phi_61_pred_4 = _2743;
                    frontier_phi_61_pred_5 = _2742;
                }
                else
                {
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    uint _2871;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2756;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    for (;;)
                    {
                        uint _2875 = uint(findLSB(_2871)) + (_2747 << 5u);
                        uint _2872 = (_2871 + 4294967295u) & _2871;
                        uint _2877 = _2875 * 48u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2897 = (_2875 * 48u) + 4u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2916 = (_2875 * 48u) + 8u;
                        vec3 _2927 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x));
                        float _2931 = _2891.x - _2450;
                        float _2932 = _2891.y - _2451;
                        float _2933 = _2891.z - _2452;
                        float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                        float _2937 = inversesqrt(_2934);
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2941 = dot(vec3(_717, _720, _723), vec3(_2938, _2939, _2940));
                        float _2946 = 1.0 - (_2934 * _2891.w);
                        float _4281 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2948 = sqrt(_2934) * _2910.w;
                        float _2951 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2941) + _2952;
                        float _2958 = _2948 * _2948;
                        float _2962 = ((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2947) / ((_2958 * 0.699999988079071044921875) + 1.0);
                        float _2966 = (-0.0) - _2450;
                        float _2967 = (-0.0) - _2451;
                        float _2968 = (-0.0) - _2452;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2983 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _792;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2973 + _2938;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_717, _720, _723), vec3(_2973, _2974, _2975));
                        float _4297 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3008 = dot(vec3(_717, _720, _723), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4308 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2951 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2941) + _3017;
                        float _4319 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4330 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3015 * _3015) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125))) * _2947;
                        _2800 = (_2962 * _2910.x) + _2868;
                        _2801 = (_2962 * _2910.y) + _2869;
                        _2802 = (_2962 * _2910.z) + _2870;
                        _2797 = (_3043 * _2927.x) + _2865;
                        _2798 = (_3043 * _2927.y) + _2866;
                        _2799 = (_3043 * _2927.z) + _2867;
                        if (_2872 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2872;
                        }
                    }
                    frontier_phi_61_pred = _2797;
                    frontier_phi_61_pred_1 = _2802;
                    frontier_phi_61_pred_2 = _2801;
                    frontier_phi_61_pred_3 = _2800;
                    frontier_phi_61_pred_4 = _2799;
                    frontier_phi_61_pred_5 = _2798;
                }
                _2598 = frontier_phi_61_pred;
                _2608 = frontier_phi_61_pred_1;
                _2606 = frontier_phi_61_pred_2;
                _2604 = frontier_phi_61_pred_3;
                _2602 = frontier_phi_61_pred_4;
                _2600 = frontier_phi_61_pred_5;
                uint _2748 = _2747 + 1u;
                if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2741 = _2598;
                    _2742 = _2600;
                    _2743 = _2602;
                    _2744 = _2604;
                    _2745 = _2606;
                    _2746 = _2608;
                    _2747 = _2748;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((4294967295u << _2614) & _2496) == 0u)
        {
            _2709 = _2597;
            _2711 = _2599;
            _2713 = _2601;
            _2715 = _2603;
            _2717 = _2605;
            _2719 = _2607;
        }
        else
        {
            float _2734 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
            float _2735 = _2734 * _2450;
            float _2736 = _2734 * _2451;
            float _2737 = _2734 * _2452;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2848 = _2597;
                float _2849 = _2599;
                float _2850 = _2601;
                float _2851 = _2603;
                float _2852 = _2605;
                float _2853 = _2607;
                uint _2854 = _2614;
                uint _2863;
                bool _2864;
                for (;;)
                {
                    _2863 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                    _2864 = _2863 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2864)
                    {
                        frontier_phi_67_pred = _2851;
                        frontier_phi_67_pred_1 = _2852;
                        frontier_phi_67_pred_2 = _2853;
                        frontier_phi_67_pred_3 = _2850;
                        frontier_phi_67_pred_4 = _2849;
                        frontier_phi_67_pred_5 = _2848;
                    }
                    else
                    {
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3061 = _2848;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        uint _3067 = _2863;
                        uint _3068;
                        vec4 _3093;
                        float _3094;
                        vec4 _3109;
                        vec3 _3121;
                        vec4 _3137;
                        vec4 _3153;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3078 = ((_2854 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3067));
                            _3068 = (_3067 + 4294967295u) & _3067;
                            uint _3080 = _3078 * 40u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.w;
                            uint _3096 = (_3078 * 40u) + 4u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3078 * 40u) + 8u;
                            _3121 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x));
                            uint _3124 = (_3078 * 40u) + 16u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3140 = (_3078 * 40u) + 20u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3078 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3078 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_2452, _3187.z, fma(_2451, _3187.y, _3187.x * _2450)) + _3187.w;
                            _3200 = !((fma(_2452, _3168.z, fma(_2451, _3168.y, _3168.x * _2450)) + _3168.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3093.x - _2450;
                                float _3228 = _3093.y - _2451;
                                float _3229 = _3093.z - _2452;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3094 * _3094));
                                float _4341 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3245 = sqrt(_3230) * _3109.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_717, _720, _723))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_2452, _3137.z, fma(_2451, _3137.y, _3137.x * _2450)) + _3137.w) / _3199;
                                float _3259 = (fma(_2452, _3153.z, fma(_2451, _3153.y, _3153.x * _2450)) + _3153.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4357 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _792;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2735;
                                float _3289 = _3235 - _2736;
                                float _3290 = _3236 - _2737;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_717, _720, _723), vec3((-0.0) - _2735, (-0.0) - _2736, (-0.0) - _2737));
                                float _4368 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3302 = dot(vec3(_717, _720, _723), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4379 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_717, _720, _723), vec3(_3234, _3235, _3236))) + _3311;
                                float _4390 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4401 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3339 * _3121.x;
                                frontier_phi_73_pred_1 = _3339 * _3121.y;
                                frontier_phi_73_pred_2 = _3265 * _3109.z;
                                frontier_phi_73_pred_3 = _3265 * _3109.y;
                                frontier_phi_73_pred_4 = _3265 * _3109.x;
                                frontier_phi_73_pred_5 = _3339 * _3121.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3343 = frontier_phi_73_pred;
                            _3344 = frontier_phi_73_pred_1;
                            _3348 = frontier_phi_73_pred_2;
                            _3347 = frontier_phi_73_pred_3;
                            _3346 = frontier_phi_73_pred_4;
                            _3345 = frontier_phi_73_pred_5;
                            _3051 = _3346 + _3064;
                            _3052 = _3347 + _3065;
                            _3053 = _3348 + _3066;
                            _3048 = _3343 + _3061;
                            _3049 = _3344 + _3062;
                            _3050 = _3345 + _3063;
                            if (_3068 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3068;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3051;
                        frontier_phi_67_pred_1 = _3052;
                        frontier_phi_67_pred_2 = _3053;
                        frontier_phi_67_pred_3 = _3050;
                        frontier_phi_67_pred_4 = _3049;
                        frontier_phi_67_pred_5 = _3048;
                    }
                    _2716 = frontier_phi_67_pred;
                    _2718 = frontier_phi_67_pred_1;
                    _2720 = frontier_phi_67_pred_2;
                    _2714 = frontier_phi_67_pred_3;
                    _2712 = frontier_phi_67_pred_4;
                    _2710 = frontier_phi_67_pred_5;
                    uint _2855 = _2854 + 1u;
                    if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2848 = _2710;
                        _2849 = _2712;
                        _2850 = _2714;
                        _2851 = _2716;
                        _2852 = _2718;
                        _2853 = _2720;
                        _2854 = _2855;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2718;
                frontier_phi_55_56_ladder_1 = _2720;
                frontier_phi_55_56_ladder_2 = _2716;
                frontier_phi_55_56_ladder_3 = _2714;
                frontier_phi_55_56_ladder_4 = _2712;
                frontier_phi_55_56_ladder_5 = _2710;
            }
            else
            {
                frontier_phi_55_56_ladder = _2605;
                frontier_phi_55_56_ladder_1 = _2607;
                frontier_phi_55_56_ladder_2 = _2603;
                frontier_phi_55_56_ladder_3 = _2601;
                frontier_phi_55_56_ladder_4 = _2599;
                frontier_phi_55_56_ladder_5 = _2597;
            }
            _2709 = frontier_phi_55_56_ladder_5;
            _2711 = frontier_phi_55_56_ladder_4;
            _2713 = frontier_phi_55_56_ladder_3;
            _2715 = frontier_phi_55_56_ladder_2;
            _2717 = frontier_phi_55_56_ladder;
            _2719 = frontier_phi_55_56_ladder_1;
        }
        float _2724 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
        _2509 = (_2724 * _2715) + _1945;
        _2511 = (_2724 * _2717) + _1947;
        _2513 = (_2724 * _2719) + _1949;
        _2515 = ((_2709 * _760) * _2724) + _2290;
        _2517 = ((_2711 * _762) * _2724) + _2292;
        _2519 = ((_2713 * _763) * _2724) + _2294;
    }
    else
    {
        _2509 = _1945;
        _2511 = _1947;
        _2513 = _1949;
        _2515 = _2290;
        _2517 = _2292;
        _2519 = _2294;
    }
    float _4417 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4428 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4439 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    uint _2539 = _235 + 6u;
    float _2547 = _695 / cbSceneParam._m0[86u].x;
    float _2548 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _630 : (isnan(_630) ? cbSceneParam._m0[77u].w : min(_630, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_630 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_630) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _630 : min(cbSceneParam._m0[80u].w, _630));
        float _2623 = _2622 / _630;
        float _2634 = _2623 * _680;
        float _2635 = _681 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2637 = _2623 * _682;
        float _2639 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2640 = _2639 + cbSceneParam._m0[79u].w;
        float _2641 = cbSceneParam._m0[79u].w - _2635;
        float _2647 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2637 * _2637));
        float _2650 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2647;
        float _2655 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2657 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2810;
        if (abs((_2636 - _2639) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2810 = ((((_2640 > 0.0) ? exp2(_2655 * _2640) : (2.0 - exp2(_2657 * _2640))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2650;
        }
        else
        {
            float _2770 = 1.0 / cbSceneParam._m0[80u].x;
            float _2771 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : max(_2640, _2641));
            float _2772 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : min(_2640, _2641));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            _2810 = ((abs(_2647 / _2636) * cbSceneParam._m0[80u].y) * ((((_2781 - _2782) * 2.0) - ((exp2(_2655 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0)))) - exp2(_2655 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))))) * _2770)) - ((exp2(_2657 * _2781) - exp2(_2657 * _2782)) * _2770))) + (_2650 * cbSceneParam._m0[80u].z);
        }
        vec4 _2812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2821 = exp2((_2810 * (-1.44269502162933349609375)) * (1.0 - _2812.w));
        float _2822 = log2(_2821);
        float _2838 = log2(_2567);
        _2659 = (exp2(_2838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].x)) * _2812.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2661 = (exp2(_2838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].y)) * _2812.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2663 = (exp2(_2838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].z)) * _2812.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2665 = _2821 * _2567;
    }
    else
    {
        _2659 = _2564;
        _2661 = _2565;
        _2663 = _2566;
        _2665 = _2567;
    }
    float _2677 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2678 = _2677 == 3.0;
    float _2679 = log2(_2665);
    float _2686 = exp2(_2679 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2509 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _776))) + ((_2515 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2687 = exp2(_2679 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2511 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _776))) + ((_2517 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2688 = exp2(_2679 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2513 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _776))) + ((_2519 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2697 = (_2677 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2697 * (_2678 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.y = _2697 * (_2678 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2661)));
    SV_Target.z = _2697 * (_2678 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.w = cbInstanceData._m0[_2539].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2539].w;
}


