#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1235;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3843 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _410 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _478 = _474.z;
    float _487 = ((_457.z - _478) * _382) + _478;
    float _490 = ((((_457.x - _476) * _382) + _476) * 2.0) + (-1.0);
    float _491 = ((((_457.y - _477) * _382) + _477) * 2.0) + (-1.0);
    float _492 = dot(vec2(_490, _491), vec2(_490, _491));
    float _3854 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))));
    float _500 = _490 + ((((_430.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _501 = _491 + ((((_430.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _504 = fma(_497, _232, fma(_501, _239, _500 * _225));
    float _507 = fma(_497, _233, fma(_501, _240, _500 * _226));
    float _510 = fma(_497, _234, fma(_501, _241, _500 * _227));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _558 = _556.x;
    float _559 = 1.0 - _558;
    float _565 = (cbMtdParam._m0[19u].x + dot(vec4(_514 * _504, _514 * _507, _514 * _510, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_558 - _559) * cbMtdParam._m0[24u].z) + _559) * cbMtdParam._m0[21u].z);
    float _3865 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _573 = (_566 * ((_410.x * cbMtdParam._m0[18u].x) - _389)) + _389;
    float _574 = (_566 * ((_410.y * cbMtdParam._m0[18u].y) - _390)) + _390;
    float _575 = (_566 * ((_410.z * cbMtdParam._m0[18u].z) - _391)) + _391;
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _603 = _601.x;
    float _621 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _603) * _382) + _603;
    float _625 = ((_587.x - _621) * cbMtdParam._m0[19u].z) + _621;
    float _627 = _625 - (_625 * _566);
    float _632 = (((_430.z - _487) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _487;
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _652 = (_645.x * 2.0) + (-1.0);
    float _653 = (_645.y * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3876 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _662 = ((_645.z - _632) * _566) + _632;
    float _672 = ((sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) - _497) * _566) + _497;
    float _675 = (((_652 - _500) * _566) + _500) + (cbMtdParam._m0[21u].x * _500);
    float _676 = (((_653 - _501) * _566) + _501) + (cbMtdParam._m0[21u].x * _501);
    float _681 = cbMtdParam._m0[22u].x + _530.w;
    float _684 = fma(_672, _232, fma(_676, _239, _675 * _225));
    float _687 = fma(_672, _233, fma(_676, _240, _675 * _226));
    float _690 = fma(_672, _234, fma(_676, _241, _675 * _227));
    float _694 = inversesqrt(dot(vec3(_684, _687, _690), vec3(_684, _687, _690)));
    float _695 = _694 * _684;
    float _696 = _694 * _687;
    float _697 = _694 * _690;
    float _3887 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _698 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3909 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3920 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3931 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3942 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _703 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _717 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _768 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _770 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
    float _775 = _768 * _774;
    float _776 = _769 * _774;
    float _777 = _770 * _774;
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _802 = fma(_697, cbSceneParam._m0[5u].z, fma(_696, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _695));
    float _805 = fma(_697, cbSceneParam._m0[6u].z, fma(_696, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _695));
    float _808 = fma(_697, cbSceneParam._m0[7u].z, fma(_696, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _695));
    uint _822 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_822].z;
    float _3953 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _834 = 1.0 - _703;
    float _835 = _831 * _834;
    float _836 = _832 * _834;
    float _837 = _833 * _834;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _703;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _703;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _703;
    float _845 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _861 = ((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * TEXCOORD_5.w) * _857.x;
    float _862 = dot(vec3(_695, _696, _697), vec3(_775, _776, _777));
    float _865 = _862 * 2.0;
    float _869 = (_865 * _695) - _775;
    float _870 = (_865 * _696) - _776;
    float _871 = (_865 * _697) - _777;
    float _875 = abs(dot(vec3(_775, _776, _777), vec3(_695, _696, _697)));
    float _3986 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _877 = sqrt(_698);
    float _890 = exp2((_877 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_877 * 3.0));
    float _896 = (1.0 - _890) * ((_877 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _897 = _890 * _877;
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_933, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925));
        float _963 = fma(_933, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925));
        float _967 = fma(_933, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925));
        float _992 = _925 + _695;
        float _993 = _929 + _696;
        float _994 = _933 + _697;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_695, _696, _697), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _4034 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_695, _696, _697), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _4067 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_695, _696, _697), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4100 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_933, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925));
        float _1278 = fma(_933, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925));
        float _1282 = fma(_933, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925));
        float _1305 = _925 + _695;
        float _1306 = _929 + _696;
        float _1307 = _933 + _697;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_695, _696, _697), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4163 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_695, _696, _697), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4196 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_695, _696, _697), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4229 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1235;
        _1544 = _1235;
        _1545 = _1235;
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = _1235;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1247)) + _1247;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1248)) + _1248;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1249)) + _1249;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _869 * 0.5;
    float _1612 = _870 * 0.5;
    float _1613 = _871 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _698);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1727 = fma(_933, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925)) + cbModelParam._m0[13u].w;
        float _1731 = fma(_933, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925)) + cbModelParam._m0[14u].w;
        float _1735 = fma(_933, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925)) + cbModelParam._m0[15u].w;
        float _1738 = fma(_871, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869));
        float _1741 = fma(_871, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869));
        float _1744 = fma(_871, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869));
        float _1772;
        if (_1738 > 0.0)
        {
            _1772 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1772 = frontier_phi_14_12_ladder;
        }
        float _1943;
        if (_1741 > 0.0)
        {
            _1943 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1943 = frontier_phi_23_19_ladder;
        }
        float _2238;
        if (_1744 > 0.0)
        {
            _2238 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2238 = frontier_phi_35_30_ladder;
        }
        float _2240 = isnan(_1943) ? _1772 : (isnan(_1772) ? _1943 : min(_1772, _1943));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1738) + _1727;
        float _2246 = (_2241 * _1741) + _1731;
        float _2247 = (_2241 * _1744) + _1735;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2248;
        float _2252 = _2248 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 > _2252) || ((_2246 < _2250) || ((_2245 < _2250) || (_2245 > _2252))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_13_35_ladder = _2392.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2392.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2392.x * cbModelParam._m0[1u].y;
        }
        _1760 = frontier_phi_13_35_ladder_2;
        _1762 = frontier_phi_13_35_ladder_1;
        _1764 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_869, _870, _871), _1680);
        _1760 = _1748.x * cbModelParam._m0[1u].y;
        _1762 = _1748.y * cbModelParam._m0[1u].y;
        _1764 = _1748.z * cbModelParam._m0[1u].y;
    }
    float _1768 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _698);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1768 : min(cbModelParam._m0[25u].w, _1768));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1822 = fma(_933, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925)) + cbModelParam._m0[21u].w;
        float _1826 = fma(_933, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925)) + cbModelParam._m0[22u].w;
        float _1830 = fma(_933, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925)) + cbModelParam._m0[23u].w;
        float _1833 = fma(_871, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869));
        float _1836 = fma(_871, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869));
        float _1839 = fma(_871, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869));
        float _1948;
        if (_1833 > 0.0)
        {
            _1948 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1948 = frontier_phi_25_21_ladder;
        }
        float _2265;
        if (_1836 > 0.0)
        {
            _2265 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2265 = frontier_phi_37_32_ladder;
        }
        float _2603;
        if (_1839 > 0.0)
        {
            _2603 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2603 = frontier_phi_47_44_ladder;
        }
        float _2605 = isnan(_2265) ? _1948 : (isnan(_1948) ? _2265 : min(_1948, _2265));
        float _2606 = isnan(_2603) ? _2605 : (isnan(_2605) ? _2603 : min(_2605, _2603));
        float _2610 = (_2606 * _1833) + _1822;
        float _2611 = (_2606 * _1836) + _1826;
        float _2612 = (_2606 * _1839) + _1830;
        float _2613 = _2606 * 9.9999997473787516355514526367188e-05;
        float _2614 = (-1.0) - _2613;
        float _2616 = _2613 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2612 > _2616) || ((_2612 < _2614) || ((_2611 > _2616) || ((_2611 < _2614) || ((_2610 < _2614) || (_2610 > _2616))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2612, cbModelParam._m0[17u].z, fma(_2611, cbModelParam._m0[17u].y, _2610 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2612, cbModelParam._m0[18u].z, fma(_2611, cbModelParam._m0[18u].y, _2610 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2612, cbModelParam._m0[19u].z, fma(_2611, cbModelParam._m0[19u].y, _2610 * cbModelParam._m0[19u].x))), _1769);
            frontier_phi_22_47_ladder = _2734.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2734.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2734.x * cbModelParam._m0[1u].z;
        }
        _1858 = frontier_phi_22_47_ladder_2;
        _1860 = frontier_phi_22_47_ladder_1;
        _1862 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_869, _870, _871), _1769);
        _1858 = _1842.x * cbModelParam._m0[1u].z;
        _1860 = _1842.y * cbModelParam._m0[1u].z;
        _1862 = _1842.z * cbModelParam._m0[1u].z;
    }
    float _1875 = (((_896 * _845) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1858 - _1760)) + _1760);
    float _1877 = (((_896 * _847) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1860 - _1762)) + _1762);
    float _1879 = (((_896 * _848) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1862 - _1764)) + _1764);
    float _1882 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1877, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1877, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1877, cbSceneParam._m0[91u].y, _1875 * cbSceneParam._m0[91u].x));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1935 = _1922 / _1934;
    float _1936 = _1926 / _1934;
    float _1937 = _1930 / _1934;
    float _2084;
    float _2085;
    float _2086;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1964 = ((uint(_1937 > cbSceneParam._m0[59u].y) + uint(_1937 > cbSceneParam._m0[59u].x)) + uint(_1937 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1965 = _1964 + 43u;
        uint _1973 = _1964 + 44u;
        uint _1981 = _1964 + 45u;
        uint _1989 = _1964 + 46u;
        float _2000 = fma(_1934, cbSceneParam._m0[_1965].w, fma(_1930, cbSceneParam._m0[_1965].z, fma(_1926, cbSceneParam._m0[_1965].y, _1922 * cbSceneParam._m0[_1965].x)));
        float _2004 = fma(_1934, cbSceneParam._m0[_1973].w, fma(_1930, cbSceneParam._m0[_1973].z, fma(_1926, cbSceneParam._m0[_1973].y, _1922 * cbSceneParam._m0[_1973].x)));
        float _2012 = fma(_1934, cbSceneParam._m0[_1989].w, fma(_1930, cbSceneParam._m0[_1989].z, fma(_1926, cbSceneParam._m0[_1989].y, _1922 * cbSceneParam._m0[_1989].x)));
        float _2017 = cbSceneParam._m0[33u].z * _2012;
        float _2019 = cbSceneParam._m0[33u].w * _2012;
        float _2022 = fma(_1934, cbSceneParam._m0[_1981].w, fma(_1930, cbSceneParam._m0[_1981].z, fma(_1926, cbSceneParam._m0[_1981].y, _1922 * cbSceneParam._m0[_1981].x))) / _2012;
        float _2070 = (cbSceneParam._m0[33u].x - sqrt(((_1936 * _1936) + (_1935 * _1935)) + (_1937 * _1937))) * cbSceneParam._m0[33u].y;
        float _4355 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2077 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2017 + _2000) / _2012, (_2019 + _2004) / _2012), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 + _2000) / _2012, (_2004 - _2017) / _2012), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 - _2017) / _2012, (_2004 - _2019) / _2012), _2022), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 - _2019) / _2012, (_2017 + _2004) / _2012), _2022), 0.0)).x), vec4(0.25)));
        _2084 = 1.0 - (_2077 * cbSceneParam._m0[34u].x);
        _2085 = 1.0 - (_2077 * cbSceneParam._m0[34u].y);
        _2086 = 1.0 - (_2077 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2084 = 1.0;
        _2085 = 1.0;
        _2086 = 1.0;
    }
    float _2150;
    float _2152;
    float _2154;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2138 = fma(_1934, cbSceneParam._m0[63u].w, fma(_1930, cbSceneParam._m0[63u].z, fma(_1926, cbSceneParam._m0[63u].y, _1922 * cbSceneParam._m0[63u].x)));
        float _2139 = fma(_1934, cbSceneParam._m0[60u].w, fma(_1930, cbSceneParam._m0[60u].z, fma(_1926, cbSceneParam._m0[60u].y, _1922 * cbSceneParam._m0[60u].x))) / _2138;
        float _2140 = fma(_1934, cbSceneParam._m0[61u].w, fma(_1930, cbSceneParam._m0[61u].z, fma(_1926, cbSceneParam._m0[61u].y, _1922 * cbSceneParam._m0[61u].x))) / _2138;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2139 >= cbSceneParam._m0[64u].x) && (_2140 >= cbSceneParam._m0[64u].y)) && (_2139 <= cbSceneParam._m0[64u].z)) && (_2140 <= cbSceneParam._m0[64u].w))
        {
            float _2278 = fma(_1934, cbSceneParam._m0[62u].w, fma(_1930, cbSceneParam._m0[62u].z, fma(_1926, cbSceneParam._m0[62u].y, _1922 * cbSceneParam._m0[62u].x))) / _2138;
            float _2282 = isnan(cbSceneParam._m0[41u].w) ? _2278 : (isnan(_2278) ? cbSceneParam._m0[41u].w : max(_2278, cbSceneParam._m0[41u].w));
            float _2325 = (cbSceneParam._m0[33u].x - sqrt(((_1936 * _1936) + (_1935 * _1935)) + (_1937 * _1937))) * cbSceneParam._m0[33u].y;
            float _4371 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
            float _2332 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2139, cbSceneParam._m0[33u].w + _2140), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2139, _2140 - cbSceneParam._m0[33u].z), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2139 - cbSceneParam._m0[33u].z, _2140 - cbSceneParam._m0[33u].w), _2282), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2139 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2140), _2282), 0.0)).x), vec4(0.25)));
            float _2336 = 1.0 - (_2332 * cbSceneParam._m0[34u].x);
            float _2337 = 1.0 - (_2332 * cbSceneParam._m0[34u].y);
            float _2338 = 1.0 - (_2332 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2338) ? _2086 : (isnan(_2086) ? _2338 : min(_2086, _2338));
            frontier_phi_34_33_ladder_1 = isnan(_2337) ? _2085 : (isnan(_2085) ? _2337 : min(_2085, _2337));
            frontier_phi_34_33_ladder_2 = isnan(_2336) ? _2084 : (isnan(_2084) ? _2336 : min(_2084, _2336));
        }
        else
        {
            frontier_phi_34_33_ladder = _2086;
            frontier_phi_34_33_ladder_1 = _2085;
            frontier_phi_34_33_ladder_2 = _2084;
        }
        _2150 = frontier_phi_34_33_ladder_2;
        _2152 = frontier_phi_34_33_ladder_1;
        _2154 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2150 = _2084;
        _2152 = _2085;
        _2154 = _2086;
    }
    uvec4 _2159 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2161 = _2159.x * 14u;
    uint _2162 = _2161 + 13u;
    float _2169 = _861 + (-1.0);
    float _2174 = (cbLight._m0[_2162].x * _2169) + 1.0;
    float _2175 = (cbLight._m0[_2162].y * _2169) + 1.0;
    float _2176 = (cbLight._m0[_2162].z * _2169) + 1.0;
    float _2177 = (cbLight._m0[_2162].w * _2169) + 1.0;
    uint _2178 = _2161 + 5u;
    float _2184 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2188 = _2161 + 4u;
    float _2197 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2201 = _2161 | 1u;
    float _2212 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_695, _696, _697));
    float _2215 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_695, _696, _697));
    float _4407 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _4418 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2220 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
    float _2222 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * 0.3183098733425140380859375;
    float _2229 = ((cbLight._m0[_2178].x * _2184) * _2222) + (((cbLight._m0[_2188].x * _2150) * _2197) * _2220);
    float _2230 = ((_2184 * cbLight._m0[_2178].y) * _2222) + (((cbLight._m0[_2188].y * _2152) * _2197) * _2220);
    float _2231 = ((_2184 * cbLight._m0[_2178].z) * _2222) + (((cbLight._m0[_2188].z * _2154) * _2197) * _2220);
    uvec4 _2235 = floatBitsToUint(cbLight._m0[_2161 + 12u]);
    bool _2237 = _2235.x == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2237)
    {
        _2339 = _2229;
        _2341 = _2230;
        _2343 = _2231;
    }
    else
    {
        uint _2347 = _2161 + 6u;
        float _2363 = (dot(vec3(cbLight._m0[_2161 + 2u].xyz), vec3(_695, _696, _697)) * 0.5) + 0.5;
        float _2364 = _2363 * _2363;
        float _4429 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2365 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2366 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2339 = (((cbLight._m0[_2347].x * 0.3183098733425140380859375) * _2365) * _2366) + _2229;
        _2341 = (((cbLight._m0[_2347].y * 0.3183098733425140380859375) * _2365) * _2366) + _2230;
        _2343 = (((cbLight._m0[_2347].z * 0.3183098733425140380859375) * _2365) * _2366) + _2231;
    }
    bool _2346 = _2235.y == 0u;
    float _2401;
    float _2403;
    float _2405;
    if (_2346)
    {
        _2401 = _2339;
        _2403 = _2341;
        _2405 = _2343;
    }
    else
    {
        uint _2574 = _2161 + 7u;
        float _2590 = (dot(vec3(cbLight._m0[_2161 + 3u].xyz), vec3(_695, _696, _697)) * 0.5) + 0.5;
        float _2591 = _2590 * _2590;
        float _4445 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2592 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2593 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2401 = (((cbLight._m0[_2574].x * 0.3183098733425140380859375) * _2592) * _2593) + _2339;
        _2403 = (((cbLight._m0[_2574].y * 0.3183098733425140380859375) * _2592) * _2593) + _2341;
        _2405 = (((cbLight._m0[_2574].z * 0.3183098733425140380859375) * _2592) * _2593) + _2343;
    }
    uint _2408 = _2161 + 8u;
    float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _698) * 0.949999988079071044921875);
    float _2422 = _2421 * _2421;
    float _2423 = cbLight._m0[_2161].x + _775;
    float _2424 = cbLight._m0[_2161].y + _776;
    float _2425 = cbLight._m0[_2161].z + _777;
    float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
    float _2430 = _2429 * _2423;
    float _2431 = _2429 * _2424;
    float _2432 = _2429 * _2425;
    float _2433 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2161].xyz));
    float _4461 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _4472 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2437 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2438 = dot(vec3(_695, _696, _697), vec3(_2430, _2431, _2432));
    float _4483 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2442 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2430, _2431, _2432));
    float _4494 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2446 = _2422 * _2422;
    float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
    float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
    float _2459 = 0.959999978542327880859375 - _842;
    float _2461 = 0.959999978542327880859375 - _843;
    float _2462 = 0.959999978542327880859375 - _844;
    float _2469 = 1.0 - _2422;
    float _2480 = (0.5 / (((_2437 * ((_2436 * _2469) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2469) + _2422) * _2436))) * _2436;
    float _4505 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
    uint _2496 = _2161 + 9u;
    float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _698) * 0.949999988079071044921875);
    float _2508 = _2507 * _2507;
    float _2509 = cbLight._m0[_2201].x + _775;
    float _2510 = cbLight._m0[_2201].y + _776;
    float _2511 = cbLight._m0[_2201].z + _777;
    float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
    float _2516 = _2515 * _2509;
    float _2517 = _2515 * _2510;
    float _2518 = _2515 * _2511;
    float _2519 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2201].xyz));
    float _4516 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2523 = dot(vec3(_695, _696, _697), vec3(_2516, _2517, _2518));
    float _4527 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2516, _2517, _2518));
    float _4538 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2508 * _2508;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
    float _2549 = 1.0 - _2508;
    float _2559 = (0.5 / (((_2437 * ((_2522 * _2549) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2549) + _2508) * _2522))) * _2522;
    float _4549 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2561 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    float _2571 = (((((_2542 * _2459) + _845) * cbLight._m0[_2496].x) * _2561) * _2184) + ((((cbLight._m0[_2408].x * _2150) * ((_2458 * _2459) + _845)) * _2482) * _2197);
    float _2572 = (((((_2542 * _2461) + _847) * cbLight._m0[_2496].y) * _2561) * _2184) + ((((cbLight._m0[_2408].y * _2152) * ((_2458 * _2461) + _847)) * _2482) * _2197);
    float _2573 = (((((_2542 * _2462) + _848) * cbLight._m0[_2496].z) * _2561) * _2184) + ((((cbLight._m0[_2408].z * _2154) * ((_2458 * _2462) + _848)) * _2482) * _2197);
    float _2629;
    float _2631;
    float _2633;
    if (_2237)
    {
        _2629 = _2571;
        _2631 = _2572;
        _2633 = _2573;
    }
    else
    {
        uint _2635 = _2161 + 2u;
        uint _2639 = _2161 + 10u;
        float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2635].w)) * _698) * 0.949999988079071044921875);
        float _2654 = _2653 * _2653;
        float _2655 = cbLight._m0[_2635].x + _775;
        float _2656 = cbLight._m0[_2635].y + _776;
        float _2657 = cbLight._m0[_2635].z + _777;
        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
        float _2662 = _2661 * _2655;
        float _2663 = _2661 * _2656;
        float _2664 = _2661 * _2657;
        float _2665 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2635].xyz));
        float _4560 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2669 = dot(vec3(_695, _696, _697), vec3(_2662, _2663, _2664));
        float _4571 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2673 = dot(vec3(cbLight._m0[_2635].xyz), vec3(_2662, _2663, _2664));
        float _4582 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2677 = _2654 * _2654;
        float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
        float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
        float _2695 = 1.0 - _2654;
        float _2705 = (0.5 / (((_2437 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2695) + _2654) * _2668))) * _2668;
        float _4593 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2707 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
        float _2708 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2629 = (((((_2688 * _2459) + _845) * cbLight._m0[_2639].x) * _2707) * _2708) + _2571;
        _2631 = (((((_2688 * _2461) + _847) * cbLight._m0[_2639].y) * _2707) * _2708) + _2572;
        _2633 = (((((_2688 * _2462) + _848) * cbLight._m0[_2639].z) * _2707) * _2708) + _2573;
    }
    float _2739;
    float _2741;
    float _2743;
    if (_2346)
    {
        _2739 = _2629;
        _2741 = _2631;
        _2743 = _2633;
    }
    else
    {
        uint _2750 = _2161 + 3u;
        uint _2754 = _2161 + 11u;
        float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2750].w)) * _698) * 0.949999988079071044921875);
        float _2769 = _2768 * _2768;
        float _2770 = cbLight._m0[_2750].x + _775;
        float _2771 = cbLight._m0[_2750].y + _776;
        float _2772 = cbLight._m0[_2750].z + _777;
        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
        float _2777 = _2776 * _2770;
        float _2778 = _2776 * _2771;
        float _2779 = _2776 * _2772;
        float _2780 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2750].xyz));
        float _4609 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2784 = dot(vec3(_695, _696, _697), vec3(_2777, _2778, _2779));
        float _4620 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2788 = dot(vec3(cbLight._m0[_2750].xyz), vec3(_2777, _2778, _2779));
        float _4631 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2792 = _2769 * _2769;
        float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
        float _2803 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
        float _2810 = 1.0 - _2769;
        float _2820 = (0.5 / (((_2437 * ((_2783 * _2810) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2437 * _2810) + _2769) * _2783))) * _2783;
        float _4642 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2822 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
        float _2823 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2739 = (((((_2803 * _2459) + _845) * cbLight._m0[_2754].x) * _2822) * _2823) + _2629;
        _2741 = (((((_2803 * _2461) + _847) * cbLight._m0[_2754].y) * _2822) * _2823) + _2631;
        _2743 = (((((_2803 * _2462) + _848) * cbLight._m0[_2754].z) * _2822) * _2823) + _2633;
    }
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    if (_2159.y == 0u)
    {
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.x;
        uint _2856 = uint((float(_2844.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2845))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2845)));
        float _2866 = (log2(_1937 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2867 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        uint _2870 = uint(isnan(14.0) ? _2867 : (isnan(_2867) ? 14.0 : min(_2867, 14.0)));
        uvec4 _2875 = texelFetch(g_lightClusterGridBuffer, int(((_2870 << 2u) + (_2856 << 6u)) >> 2u));
        uint _2876 = _2875.x;
        uint _2877 = _2844.z;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((((1u << ((_2877 >> 4u) & 15u)) + 4294967295u) & _2876) == 0u) || ((_2877 & 240u) == 0u))
        {
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
        }
        else
        {
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            uint _3107 = 0u;
            uint _3116;
            bool _3117;
            for (;;)
            {
                _3116 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                _3117 = _3116 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3117)
                {
                    frontier_phi_66_pred = _3106;
                    frontier_phi_66_pred_1 = _3105;
                    frontier_phi_66_pred_2 = _3104;
                    frontier_phi_66_pred_3 = _3103;
                    frontier_phi_66_pred_4 = _3102;
                    frontier_phi_66_pred_5 = _3101;
                }
                else
                {
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    uint _3231;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3116;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    for (;;)
                    {
                        uint _3235 = uint(findLSB(_3231)) + (_3107 << 5u);
                        uint _3232 = (_3231 + 4294967295u) & _3231;
                        uint _3237 = _3235 * 48u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3257 = (_3235 * 48u) + 4u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3276 = (_3235 * 48u) + 8u;
                        vec3 _3287 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x));
                        float _3291 = _3251.x - _1935;
                        float _3292 = _3251.y - _1936;
                        float _3293 = _3251.z - _1937;
                        float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                        float _3297 = inversesqrt(_3294);
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3301 = dot(vec3(_802, _805, _808), vec3(_3298, _3299, _3300));
                        float _3306 = 1.0 - (_3294 * _3251.w);
                        float _4668 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3308 = sqrt(_3294) * _3270.w;
                        float _3311 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3301) + _3312;
                        float _3318 = _3308 * _3308;
                        float _3322 = ((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3307) / ((_3318 * 0.699999988079071044921875) + 1.0);
                        float _3326 = (-0.0) - _1935;
                        float _3327 = (-0.0) - _1936;
                        float _3328 = (-0.0) - _1937;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3342 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                        float _3343 = 1.0 - _877;
                        float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                        float _3351 = _3350 * _3350;
                        float _3352 = _3351 * _3351;
                        float _3353 = _3333 + _3298;
                        float _3354 = _3334 + _3299;
                        float _3355 = _3335 + _3300;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3363 = dot(vec3(_802, _805, _808), vec3(_3333, _3334, _3335));
                        float _4684 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3367 = dot(vec3(_802, _805, _808), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                        float _4695 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                        float _3375 = _3311 * _3351;
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3301) + _3376;
                        float _4706 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3381 = 1.0 - _3351;
                        float _3391 = (0.5 / (((_3380 * ((_3366 * _3381) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3351) * _3366))) * _3380;
                        float _4717 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3402 = (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) / ((_3374 * _3374) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125))) * _3307;
                        _3160 = (_3322 * _3270.x) + _3228;
                        _3161 = (_3322 * _3270.y) + _3229;
                        _3162 = (_3322 * _3270.z) + _3230;
                        _3157 = (_3402 * _3287.x) + _3225;
                        _3158 = (_3402 * _3287.y) + _3226;
                        _3159 = (_3402 * _3287.z) + _3227;
                        if (_3232 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3232;
                        }
                    }
                    frontier_phi_66_pred = _3162;
                    frontier_phi_66_pred_1 = _3161;
                    frontier_phi_66_pred_2 = _3160;
                    frontier_phi_66_pred_3 = _3159;
                    frontier_phi_66_pred_4 = _3158;
                    frontier_phi_66_pred_5 = _3157;
                }
                _2967 = frontier_phi_66_pred;
                _2965 = frontier_phi_66_pred_1;
                _2963 = frontier_phi_66_pred_2;
                _2961 = frontier_phi_66_pred_3;
                _2959 = frontier_phi_66_pred_4;
                _2957 = frontier_phi_66_pred_5;
                uint _3108 = _3107 + 1u;
                if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3101 = _2957;
                    _3102 = _2959;
                    _3103 = _2961;
                    _3104 = _2963;
                    _3105 = _2965;
                    _3106 = _2967;
                    _3107 = _3108;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
        }
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.z;
        uint _2973 = (_2971 >> 8u) & 15u;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((4294967295u << _2973) & _2876) == 0u)
        {
            _3069 = _2956;
            _3071 = _2958;
            _3073 = _2960;
            _3075 = _2962;
            _3077 = _2964;
            _3079 = _2966;
        }
        else
        {
            float _3094 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
            float _3095 = _3094 * _1935;
            float _3096 = _3094 * _1936;
            float _3097 = _3094 * _1937;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2973 < ((_2971 >> 12u) & 15u))
            {
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3208 = _2956;
                float _3209 = _2958;
                float _3210 = _2960;
                float _3211 = _2962;
                float _3212 = _2964;
                float _3213 = _2966;
                uint _3214 = _2973;
                uint _3223;
                bool _3224;
                for (;;)
                {
                    _3223 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                    _3224 = _3223 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3224)
                    {
                        frontier_phi_72_pred = _3213;
                        frontier_phi_72_pred_1 = _3212;
                        frontier_phi_72_pred_2 = _3211;
                        frontier_phi_72_pred_3 = _3210;
                        frontier_phi_72_pred_4 = _3209;
                        frontier_phi_72_pred_5 = _3208;
                    }
                    else
                    {
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3420 = _3208;
                        float _3421 = _3209;
                        float _3422 = _3210;
                        float _3423 = _3211;
                        float _3424 = _3212;
                        float _3425 = _3213;
                        uint _3426 = _3223;
                        uint _3427;
                        vec4 _3452;
                        float _3453;
                        vec4 _3468;
                        vec3 _3480;
                        vec4 _3495;
                        vec4 _3510;
                        float _3556;
                        bool _3557;
                        for (;;)
                        {
                            uint _3437 = ((_3214 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3426));
                            _3427 = (_3426 + 4294967295u) & _3426;
                            uint _3439 = _3437 * 40u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            _3453 = _3452.w;
                            uint _3455 = (_3437 * 40u) + 4u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3437 * 40u) + 8u;
                            _3480 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x));
                            uint _3482 = (_3437 * 40u) + 16u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3437 * 40u) + 20u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3437 * 40u) + 24u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3531 = (_3437 * 40u) + 28u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3556 = fma(_1937, _3544.z, fma(_1936, _3544.y, _3544.x * _1935)) + _3544.w;
                            _3557 = !((fma(_1937, _3525.z, fma(_1936, _3525.y, _3525.x * _1935)) + _3525.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3557)
                            {
                                float _3584 = _3452.x - _1935;
                                float _3585 = _3452.y - _1936;
                                float _3586 = _3452.z - _1937;
                                float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                                float _3590 = inversesqrt(_3587);
                                float _3591 = _3590 * _3584;
                                float _3592 = _3590 * _3585;
                                float _3593 = _3590 * _3586;
                                float _3597 = 1.0 - (_3587 / (_3453 * _3453));
                                float _4728 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3602 = sqrt(_3587) * _3468.w;
                                float _3604 = 1.39999997615814208984375 / (_3602 + 1.39999997615814208984375);
                                float _3605 = _3604 * _3604;
                                float _3608 = ((1.0 - _3605) * dot(vec3(_3591, _3592, _3593), vec3(_802, _805, _808))) + _3605;
                                float _3611 = _3602 * _3602;
                                float _3615 = (fma(_1937, _3495.z, fma(_1936, _3495.y, _3495.x * _1935)) + _3495.w) / _3556;
                                float _3616 = (fma(_1937, _3510.z, fma(_1936, _3510.y, _3510.x * _1935)) + _3510.w) / _3556;
                                float _3620 = 1.0 - dot(vec2(_3615, _3616), vec2(_3615, _3616));
                                float _4744 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3622 = _3621 * (((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3598) / ((_3611 * 0.699999988079071044921875) + 1.0));
                                float _3634 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                                float _3635 = 1.0 - _877;
                                float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                                float _3643 = _3642 * _3642;
                                float _3644 = _3643 * _3643;
                                float _3645 = _3591 - _3095;
                                float _3646 = _3592 - _3096;
                                float _3647 = _3593 - _3097;
                                float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                                float _3655 = dot(vec3(_802, _805, _808), vec3((-0.0) - _3095, (-0.0) - _3096, (-0.0) - _3097));
                                float _4755 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3659 = dot(vec3(_802, _805, _808), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                                float _4766 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                                float _3667 = _3604 * _3643;
                                float _3668 = _3667 * _3667;
                                float _3674 = ((1.0 - _3668) * dot(vec3(_802, _805, _808), vec3(_3591, _3592, _3593))) + _3668;
                                float _4777 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3676 = 1.0 - _3643;
                                float _3686 = (0.5 / (((_3675 * ((_3658 * _3676) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3643) * _3658))) * _3675;
                                float _4788 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3696 = (_3621 * _3598) * (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3666 * _3666) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3622 * _3468.y;
                                frontier_phi_78_pred_1 = _3622 * _3468.x;
                                frontier_phi_78_pred_2 = _3696 * _3480.z;
                                frontier_phi_78_pred_3 = _3696 * _3480.y;
                                frontier_phi_78_pred_4 = _3696 * _3480.x;
                                frontier_phi_78_pred_5 = _3622 * _3468.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3704 = frontier_phi_78_pred;
                            _3703 = frontier_phi_78_pred_1;
                            _3702 = frontier_phi_78_pred_2;
                            _3701 = frontier_phi_78_pred_3;
                            _3700 = frontier_phi_78_pred_4;
                            _3705 = frontier_phi_78_pred_5;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            if (_3427 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3427;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3412;
                        frontier_phi_72_pred_1 = _3411;
                        frontier_phi_72_pred_2 = _3410;
                        frontier_phi_72_pred_3 = _3409;
                        frontier_phi_72_pred_4 = _3408;
                        frontier_phi_72_pred_5 = _3407;
                    }
                    _3080 = frontier_phi_72_pred;
                    _3078 = frontier_phi_72_pred_1;
                    _3076 = frontier_phi_72_pred_2;
                    _3074 = frontier_phi_72_pred_3;
                    _3072 = frontier_phi_72_pred_4;
                    _3070 = frontier_phi_72_pred_5;
                    uint _3215 = _3214 + 1u;
                    if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3208 = _3070;
                        _3209 = _3072;
                        _3210 = _3074;
                        _3211 = _3076;
                        _3212 = _3078;
                        _3213 = _3080;
                        _3214 = _3215;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3080;
                frontier_phi_60_61_ladder_1 = _3078;
                frontier_phi_60_61_ladder_2 = _3074;
                frontier_phi_60_61_ladder_3 = _3072;
                frontier_phi_60_61_ladder_4 = _3070;
                frontier_phi_60_61_ladder_5 = _3076;
            }
            else
            {
                frontier_phi_60_61_ladder = _2966;
                frontier_phi_60_61_ladder_1 = _2964;
                frontier_phi_60_61_ladder_2 = _2960;
                frontier_phi_60_61_ladder_3 = _2958;
                frontier_phi_60_61_ladder_4 = _2956;
                frontier_phi_60_61_ladder_5 = _2962;
            }
            _3069 = frontier_phi_60_61_ladder_4;
            _3071 = frontier_phi_60_61_ladder_3;
            _3073 = frontier_phi_60_61_ladder_2;
            _3075 = frontier_phi_60_61_ladder_5;
            _3077 = frontier_phi_60_61_ladder_1;
            _3079 = frontier_phi_60_61_ladder;
        }
        float _3084 = isnan(1.0) ? _861 : (isnan(_861) ? 1.0 : min(_861, 1.0));
        _2889 = (_3084 * _3075) + _2401;
        _2891 = (_3084 * _3077) + _2403;
        _2893 = (_3084 * _3079) + _2405;
        _2895 = ((_3069 * _845) * _3084) + _2739;
        _2897 = ((_3071 * _847) * _3084) + _2741;
        _2899 = ((_3073 * _848) * _3084) + _2743;
    }
    else
    {
        _2889 = _2401;
        _2891 = _2403;
        _2893 = _2405;
        _2895 = _2739;
        _2897 = _2741;
        _2899 = _2743;
    }
    float _4804 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4815 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4826 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    uint _2919 = _244 + 6u;
    float _2927 = _783 / cbSceneParam._m0[86u].x;
    float _2928 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2942 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, (log2((isnan(cbSceneParam._m0[77u].w) ? _717 : (isnan(_717) ? cbSceneParam._m0[77u].w : min(_717, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2944 = _2942.x;
    float _2945 = _2942.y;
    float _2946 = _2942.z;
    float _2947 = _2942.w;
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    if (_717 > cbSceneParam._m0[78u].w)
    {
        float _2981 = isnan(_717) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _717 : min(cbSceneParam._m0[80u].w, _717));
        float _2982 = _2981 / _717;
        float _2993 = _2982 * _768;
        float _2994 = _769 * _2982;
        float _2995 = (-0.0) - _2994;
        float _2997 = _2982 * _770;
        float _2999 = (cbSceneParam._m0[77u].w * _2995) / _2981;
        float _3000 = _2999 + cbSceneParam._m0[79u].w;
        float _3001 = cbSceneParam._m0[79u].w - _2994;
        float _3007 = sqrt(((_2993 * _2993) + (_2994 * _2994)) + (_2997 * _2997));
        float _3010 = (1.0 - (cbSceneParam._m0[77u].w / _2981)) * _3007;
        float _3015 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3017 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3170;
        if (abs((_2995 - _2999) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3170 = ((((_3000 > 0.0) ? exp2(_3015 * _3000) : (2.0 - exp2(_3017 * _3000))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3010;
        }
        else
        {
            float _3130 = 1.0 / cbSceneParam._m0[80u].x;
            float _3131 = isnan(_3001) ? _3000 : (isnan(_3000) ? _3001 : max(_3000, _3001));
            float _3132 = isnan(_3001) ? _3000 : (isnan(_3000) ? _3001 : min(_3000, _3001));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            _3170 = ((abs(_3007 / _2995) * cbSceneParam._m0[80u].y) * ((((_3141 - _3142) * 2.0) - ((exp2(_3015 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0)))) - exp2(_3015 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))))) * _3130)) - ((exp2(_3017 * _3141) - exp2(_3017 * _3142)) * _3130))) + (_3010 * cbSceneParam._m0[80u].z);
        }
        vec4 _3172 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, 1.0), 0.0);
        float _3181 = exp2((_3170 * (-1.44269502162933349609375)) * (1.0 - _3172.w));
        float _3182 = log2(_3181);
        float _3198 = log2(_2947);
        _3019 = (exp2(_3198 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].x)) * _3172.x) / cbSceneParam._m0[78u].x)) + _2944;
        _3021 = (exp2(_3198 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].y)) * _3172.y) / cbSceneParam._m0[78u].y)) + _2945;
        _3023 = (exp2(_3198 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].z)) * _3172.z) / cbSceneParam._m0[78u].z)) + _2946;
        _3025 = _3181 * _2947;
    }
    else
    {
        _3019 = _2944;
        _3021 = _2945;
        _3023 = _2946;
        _3025 = _2947;
    }
    float _3037 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3038 = _3037 == 3.0;
    float _3039 = log2(_3025);
    float _3046 = exp2(_3039 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2889 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _861))) + ((_2895 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _3047 = exp2(_3039 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2891 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _861))) + ((_2897 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _3048 = exp2(_3039 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2893 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _861))) + ((_2899 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _3057 = (_3037 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3057 * (_3038 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3019)));
    SV_Target.y = _3057 * (_3038 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3021)));
    SV_Target.z = _3057 * (_3038 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3023)));
    SV_Target.w = cbInstanceData._m0[_2919].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2919].w;
}


