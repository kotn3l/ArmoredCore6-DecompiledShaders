#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1195;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _361 = _357.z;
    float _365 = (_357.x * 2.0) + (-1.0);
    float _366 = (_357.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_365, _366), vec2(_365, _366));
    float _3804 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))));
    float _378 = _365 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_331.x * 2.0) + (-1.0)));
    float _379 = _366 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_331.y * 2.0) + (-1.0)));
    float _382 = fma(_373, _233, fma(_379, _240, _378 * _226));
    float _385 = fma(_373, _234, fma(_379, _241, _378 * _227));
    float _388 = fma(_373, _235, fma(_379, _242, _378 * _228));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = 1.0 - _430;
    float _440 = (cbMtdParam._m0[19u].x + dot(vec4(_392 * _382, _392 * _385, _392 * _388, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_430 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[21u].z);
    float _3815 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _443 = (-0.0) - cbMtdParam._m0[24u].x;
    float _445 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
    float _453 = _441 - ((_441 * TEXCOORD_8.x) * _446);
    float _454 = _441 - ((_441 * TEXCOORD_8.y) * _446);
    float _455 = _441 - ((_441 * TEXCOORD_8.z) * _446);
    float _462 = (_453 * ((_311.x * cbMtdParam._m0[18u].x) - _290)) + _290;
    float _463 = (_454 * ((_311.y * cbMtdParam._m0[18u].y) - _291)) + _291;
    float _464 = (_455 * ((_311.z * cbMtdParam._m0[18u].z) - _292)) + _292;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _509 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3836 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _518 = ((((cbMtdParam._m0[10u].x - _462) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _510) + _462;
    float _519 = ((((cbMtdParam._m0[10u].y - _463) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _510) + _463;
    float _520 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _464)) * _510) + _464;
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _535 = _533.x;
    float _537 = _535 - (_535 * _453);
    float _539 = _537 - (_537 * _510);
    float _544 = (((_331.z - _361) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _361;
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _565 = (_558.x * 2.0) + (-1.0);
    float _566 = (_558.y * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3847 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _575 = ((_558.z - _544) * _453) + _544;
    float _578 = ((cbMtdParam._m0[23u].y - _575) * _510) + _575;
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _603 = (_597.x * 2.0) + (-1.0);
    float _604 = (_597.y * 2.0) + (-1.0);
    float _605 = dot(vec2(_603, _604), vec2(_603, _604));
    float _3858 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _620 = ((sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) - _373) * _455) + _373;
    float _623 = (((_565 - _378) * _453) + _378) + (cbMtdParam._m0[21u].x * _378);
    float _624 = (((_566 - _379) * _454) + _379) + (cbMtdParam._m0[21u].x * _379);
    float _635 = (((_603 - _623) + (_623 * cbMtdParam._m0[22u].z)) * _510) + _623;
    float _636 = (((_604 - _624) + (_624 * cbMtdParam._m0[22u].z)) * _510) + _624;
    float _637 = (_510 * (sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) - _620)) + _620;
    float _639 = cbMtdParam._m0[22u].x + _357.w;
    float _642 = fma(_637, _233, fma(_636, _240, _635 * _226));
    float _645 = fma(_637, _234, fma(_636, _241, _635 * _227));
    float _648 = fma(_637, _235, fma(_636, _242, _635 * _228));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3869 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _656 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3891 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3902 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3913 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3924 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _661 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    float _740 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _741 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _762 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _765 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _768 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _782 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _788 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_782].x;
    float _789 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_782].y;
    float _790 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_782].z;
    float _3935 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _794 = 1.0 - _661;
    float _795 = _791 * _794;
    float _796 = _792 * _794;
    float _797 = _793 * _794;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _661;
    float _803 = (_792 + (-0.039999999105930328369140625)) * _661;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _661;
    float _805 = _802 + 0.039999999105930328369140625;
    float _807 = _803 + 0.039999999105930328369140625;
    float _808 = _804 + 0.039999999105930328369140625;
    vec4 _817 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _740, cbSceneParam._m0[86u].y * _741));
    float _821 = ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * TEXCOORD_5.w) * _817.x;
    float _822 = dot(vec3(_653, _654, _655), vec3(_732, _733, _734));
    float _825 = _822 * 2.0;
    float _829 = (_825 * _653) - _732;
    float _830 = (_825 * _654) - _733;
    float _831 = (_825 * _655) - _734;
    float _835 = abs(dot(vec3(_732, _733, _734), vec3(_653, _654, _655)));
    float _3968 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = sqrt(_656);
    float _850 = exp2((_837 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _856 = (1.0 - _850) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _857 = _850 * _837;
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1194;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _919 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _923 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _927 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _952 = _885 + _653;
        float _953 = _889 + _654;
        float _954 = _893 + _655;
        float _964 = fma(_954, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952)) - _919;
        float _965 = fma(_954, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952)) - _923;
        float _966 = fma(_954, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952)) - _927;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_919 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_923 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[34u].z) + ((((((_927 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1022 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_988.x + (-0.5));
        float _1024 = _1022 * (_988.y + (-0.5));
        float _1025 = _1022 * (_988.z + (-0.5));
        float _1032 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_995.x + (-0.5));
        float _1034 = _1032 * (_995.y + (-0.5));
        float _1035 = _1032 * (_995.z + (-0.5));
        float _1042 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1002.x + (-0.5));
        float _1044 = _1042 * (_1002.y + (-0.5));
        float _1045 = _1042 * (_1002.z + (-0.5));
        float _1052 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1009.x + (-0.5));
        float _1054 = _1052 * (_1009.y + (-0.5));
        float _1055 = _1052 * (_1009.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1076 = (dot(vec3(_653, _654, _655), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1086 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _4016 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1088 + 1.0))) + _1093) * _1056;
        float _1103 = _1024 * 0.5;
        float _1104 = _1034 * 0.5;
        float _1105 = _1044 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_653, _654, _655), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _4049 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1130 + 1.0))) + _1135) * _1057;
        float _1145 = _1025 * 0.5;
        float _1146 = _1035 * 0.5;
        float _1147 = _1045 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_653, _654, _655), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _4082 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1172 + 1.0))) + _1177) * _1058;
        _1194 = _1025;
        _1196 = _1024;
        _1197 = _1023;
        _1198 = _1035;
        _1199 = _1034;
        _1200 = _1033;
        _1201 = _1045;
        _1202 = _1044;
        _1203 = _1043;
        _1204 = _1058;
        _1205 = _1057;
        _1206 = _1056;
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _1195;
        _1196 = _1195;
        _1197 = _1195;
        _1198 = _1195;
        _1199 = _1195;
        _1200 = _1195;
        _1201 = _1195;
        _1202 = _1195;
        _1203 = _1195;
        _1204 = _1195;
        _1205 = _1195;
        _1206 = _1195;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1234 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1238 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1242 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1265 = _885 + _653;
        float _1266 = _889 + _654;
        float _1267 = _893 + _655;
        float _1277 = fma(_1267, cbModelParam._m0[30u].z, fma(_1266, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265)) - _1234;
        float _1278 = fma(_1267, cbModelParam._m0[31u].z, fma(_1266, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265)) - _1238;
        float _1279 = fma(_1267, cbModelParam._m0[32u].z, fma(_1266, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265)) - _1242;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1234 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1238 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[35u].z) + ((((((_1242 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1333 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1300.x + (-0.5));
        float _1335 = _1333 * (_1300.y + (-0.5));
        float _1336 = _1333 * (_1300.z + (-0.5));
        float _1343 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1307.x + (-0.5));
        float _1345 = _1343 * (_1307.y + (-0.5));
        float _1346 = _1343 * (_1307.z + (-0.5));
        float _1353 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1314.x + (-0.5));
        float _1355 = _1353 * (_1314.y + (-0.5));
        float _1356 = _1353 * (_1314.z + (-0.5));
        float _1363 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1321.x + (-0.5));
        float _1365 = _1363 * (_1321.y + (-0.5));
        float _1366 = _1363 * (_1321.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_653, _654, _655), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4145 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1397 + 1.0))) + _1402) * _1367;
        float _1412 = _1335 * 0.5;
        float _1413 = _1345 * 0.5;
        float _1414 = _1355 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_653, _654, _655), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4178 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1439 + 1.0))) + _1444) * _1368;
        float _1454 = _1336 * 0.5;
        float _1455 = _1346 * 0.5;
        float _1456 = _1356 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_653, _654, _655), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4211 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1481 + 1.0))) + _1486) * _1369;
        _1503 = _1336;
        _1504 = _1335;
        _1505 = _1334;
        _1506 = _1346;
        _1507 = _1345;
        _1508 = _1344;
        _1509 = _1356;
        _1510 = _1355;
        _1511 = _1354;
        _1512 = _1369;
        _1513 = _1368;
        _1514 = _1367;
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
    }
    else
    {
        _1503 = _1195;
        _1504 = _1195;
        _1505 = _1195;
        _1506 = _1195;
        _1507 = _1195;
        _1508 = _1195;
        _1509 = _1195;
        _1510 = _1195;
        _1511 = _1195;
        _1512 = _1195;
        _1513 = _1195;
        _1514 = _1195;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1207)) + _1207;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1208)) + _1208;
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1550 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1527));
    float _1571 = _829 * 0.5;
    float _1572 = _830 * 0.5;
    float _1573 = _831 * 0.5;
    float _1574 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1577 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1580 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1614;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1587 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1194, _1198, _1201, _1204));
        float _1591 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1595 = dot(vec4(_1571, _1572, _1573, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1602 = dot(vec4(cbModelParam._m0[39u]), vec4(_1571, _1572, _1573, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1625;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1616 = dot(vec4(cbModelParam._m0[40u]), vec4(_1571, _1572, _1573, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1629 = (_1625 * cbModelParam._m0[1u].x) + (_1614 * (1.0 - cbModelParam._m0[1u].x));
    float _1639 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1639 : min(cbModelParam._m0[25u].z, _1639));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1687 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1691 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1695 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1698 = fma(_831, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829));
        float _1701 = fma(_831, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829));
        float _1704 = fma(_831, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829));
        float _1732;
        if (_1698 > 0.0)
        {
            _1732 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1732 = frontier_phi_14_12_ladder;
        }
        float _1903;
        if (_1701 > 0.0)
        {
            _1903 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1903 = frontier_phi_23_19_ladder;
        }
        float _2199;
        if (_1704 > 0.0)
        {
            _2199 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2199 = frontier_phi_35_30_ladder;
        }
        float _2201 = isnan(_1903) ? _1732 : (isnan(_1732) ? _1903 : min(_1732, _1903));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1698) + _1687;
        float _2207 = (_2202 * _1701) + _1691;
        float _2208 = (_2202 * _1704) + _1695;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2209;
        float _2213 = _2209 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 > _2213) || ((_2207 < _2211) || ((_2206 < _2211) || (_2206 > _2213))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2208, cbModelParam._m0[9u].z, fma(_2207, cbModelParam._m0[9u].y, _2206 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2208, cbModelParam._m0[10u].z, fma(_2207, cbModelParam._m0[10u].y, _2206 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2208, cbModelParam._m0[11u].z, fma(_2207, cbModelParam._m0[11u].y, _2206 * cbModelParam._m0[11u].x))), _1640);
            frontier_phi_13_35_ladder = _2353.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2353.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2353.x * cbModelParam._m0[1u].y;
        }
        _1720 = frontier_phi_13_35_ladder_2;
        _1722 = frontier_phi_13_35_ladder_1;
        _1724 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_829, _830, _831), _1640);
        _1720 = _1708.x * cbModelParam._m0[1u].y;
        _1722 = _1708.y * cbModelParam._m0[1u].y;
        _1724 = _1708.z * cbModelParam._m0[1u].y;
    }
    float _1728 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1728 : min(cbModelParam._m0[25u].w, _1728));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1782 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1786 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1790 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1793 = fma(_831, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829));
        float _1796 = fma(_831, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829));
        float _1799 = fma(_831, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829));
        float _1908;
        if (_1793 > 0.0)
        {
            _1908 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1908 = frontier_phi_25_21_ladder;
        }
        float _2226;
        if (_1796 > 0.0)
        {
            _2226 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2226 = frontier_phi_37_32_ladder;
        }
        float _2564;
        if (_1799 > 0.0)
        {
            _2564 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2564 = frontier_phi_47_44_ladder;
        }
        float _2566 = isnan(_2226) ? _1908 : (isnan(_1908) ? _2226 : min(_1908, _2226));
        float _2567 = isnan(_2564) ? _2566 : (isnan(_2566) ? _2564 : min(_2566, _2564));
        float _2571 = (_2567 * _1793) + _1782;
        float _2572 = (_2567 * _1796) + _1786;
        float _2573 = (_2567 * _1799) + _1790;
        float _2574 = _2567 * 9.9999997473787516355514526367188e-05;
        float _2575 = (-1.0) - _2574;
        float _2577 = _2574 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2573 > _2577) || ((_2573 < _2575) || ((_2572 > _2577) || ((_2572 < _2575) || ((_2571 < _2575) || (_2571 > _2577))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2573, cbModelParam._m0[17u].z, fma(_2572, cbModelParam._m0[17u].y, _2571 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2573, cbModelParam._m0[18u].z, fma(_2572, cbModelParam._m0[18u].y, _2571 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2573, cbModelParam._m0[19u].z, fma(_2572, cbModelParam._m0[19u].y, _2571 * cbModelParam._m0[19u].x))), _1729);
            frontier_phi_22_47_ladder = _2695.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2695.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2695.x * cbModelParam._m0[1u].z;
        }
        _1818 = frontier_phi_22_47_ladder_2;
        _1820 = frontier_phi_22_47_ladder_1;
        _1822 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_829, _830, _831), _1729);
        _1818 = _1802.x * cbModelParam._m0[1u].z;
        _1820 = _1802.y * cbModelParam._m0[1u].z;
        _1822 = _1802.z * cbModelParam._m0[1u].z;
    }
    float _1835 = (((_856 * _805) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1818 - _1720)) + _1720);
    float _1837 = (((_856 * _807) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1820 - _1722)) + _1722);
    float _1839 = (((_856 * _808) + _857) * _821) * ((cbModelParam._m0[1u].w * (_1822 - _1724)) + _1724);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1835 * cbSceneParam._m0[91u].x));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1895 = _1882 / _1894;
    float _1896 = _1886 / _1894;
    float _1897 = _1890 / _1894;
    float _2044;
    float _2045;
    float _2046;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1924 = ((uint(_1897 > cbSceneParam._m0[59u].y) + uint(_1897 > cbSceneParam._m0[59u].x)) + uint(_1897 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1925 = _1924 + 43u;
        uint _1933 = _1924 + 44u;
        uint _1941 = _1924 + 45u;
        uint _1949 = _1924 + 46u;
        float _1960 = fma(_1894, cbSceneParam._m0[_1925].w, fma(_1890, cbSceneParam._m0[_1925].z, fma(_1886, cbSceneParam._m0[_1925].y, _1882 * cbSceneParam._m0[_1925].x)));
        float _1964 = fma(_1894, cbSceneParam._m0[_1933].w, fma(_1890, cbSceneParam._m0[_1933].z, fma(_1886, cbSceneParam._m0[_1933].y, _1882 * cbSceneParam._m0[_1933].x)));
        float _1972 = fma(_1894, cbSceneParam._m0[_1949].w, fma(_1890, cbSceneParam._m0[_1949].z, fma(_1886, cbSceneParam._m0[_1949].y, _1882 * cbSceneParam._m0[_1949].x)));
        float _1977 = cbSceneParam._m0[33u].z * _1972;
        float _1979 = cbSceneParam._m0[33u].w * _1972;
        float _1982 = fma(_1894, cbSceneParam._m0[_1941].w, fma(_1890, cbSceneParam._m0[_1941].z, fma(_1886, cbSceneParam._m0[_1941].y, _1882 * cbSceneParam._m0[_1941].x))) / _1972;
        float _2030 = (cbSceneParam._m0[33u].x - sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897))) * cbSceneParam._m0[33u].y;
        float _4337 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2037 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1977 + _1960) / _1972, (_1979 + _1964) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1979 + _1960) / _1972, (_1964 - _1977) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 - _1977) / _1972, (_1964 - _1979) / _1972), _1982), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 - _1979) / _1972, (_1977 + _1964) / _1972), _1982), 0.0)).x), vec4(0.25)));
        _2044 = 1.0 - (_2037 * cbSceneParam._m0[34u].x);
        _2045 = 1.0 - (_2037 * cbSceneParam._m0[34u].y);
        _2046 = 1.0 - (_2037 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2044 = 1.0;
        _2045 = 1.0;
        _2046 = 1.0;
    }
    float _2110;
    float _2112;
    float _2114;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2098 = fma(_1894, cbSceneParam._m0[63u].w, fma(_1890, cbSceneParam._m0[63u].z, fma(_1886, cbSceneParam._m0[63u].y, _1882 * cbSceneParam._m0[63u].x)));
        float _2099 = fma(_1894, cbSceneParam._m0[60u].w, fma(_1890, cbSceneParam._m0[60u].z, fma(_1886, cbSceneParam._m0[60u].y, _1882 * cbSceneParam._m0[60u].x))) / _2098;
        float _2100 = fma(_1894, cbSceneParam._m0[61u].w, fma(_1890, cbSceneParam._m0[61u].z, fma(_1886, cbSceneParam._m0[61u].y, _1882 * cbSceneParam._m0[61u].x))) / _2098;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2099 >= cbSceneParam._m0[64u].x) && (_2100 >= cbSceneParam._m0[64u].y)) && (_2099 <= cbSceneParam._m0[64u].z)) && (_2100 <= cbSceneParam._m0[64u].w))
        {
            float _2239 = fma(_1894, cbSceneParam._m0[62u].w, fma(_1890, cbSceneParam._m0[62u].z, fma(_1886, cbSceneParam._m0[62u].y, _1882 * cbSceneParam._m0[62u].x))) / _2098;
            float _2243 = isnan(cbSceneParam._m0[41u].w) ? _2239 : (isnan(_2239) ? cbSceneParam._m0[41u].w : max(_2239, cbSceneParam._m0[41u].w));
            float _2286 = (cbSceneParam._m0[33u].x - sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897))) * cbSceneParam._m0[33u].y;
            float _4353 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
            float _2293 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2099, cbSceneParam._m0[33u].w + _2100), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2099, _2100 - cbSceneParam._m0[33u].z), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2099 - cbSceneParam._m0[33u].z, _2100 - cbSceneParam._m0[33u].w), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2099 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2100), _2243), 0.0)).x), vec4(0.25)));
            float _2297 = 1.0 - (_2293 * cbSceneParam._m0[34u].x);
            float _2298 = 1.0 - (_2293 * cbSceneParam._m0[34u].y);
            float _2299 = 1.0 - (_2293 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2299) ? _2046 : (isnan(_2046) ? _2299 : min(_2046, _2299));
            frontier_phi_34_33_ladder_1 = isnan(_2298) ? _2045 : (isnan(_2045) ? _2298 : min(_2045, _2298));
            frontier_phi_34_33_ladder_2 = isnan(_2297) ? _2044 : (isnan(_2044) ? _2297 : min(_2044, _2297));
        }
        else
        {
            frontier_phi_34_33_ladder = _2046;
            frontier_phi_34_33_ladder_1 = _2045;
            frontier_phi_34_33_ladder_2 = _2044;
        }
        _2110 = frontier_phi_34_33_ladder_2;
        _2112 = frontier_phi_34_33_ladder_1;
        _2114 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2110 = _2044;
        _2112 = _2045;
        _2114 = _2046;
    }
    uvec4 _2119 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2121 = _2119.x * 14u;
    uint _2122 = _2121 + 13u;
    float _2129 = _821 + (-1.0);
    float _2134 = (cbLight._m0[_2122].x * _2129) + 1.0;
    float _2135 = (cbLight._m0[_2122].y * _2129) + 1.0;
    float _2136 = (cbLight._m0[_2122].z * _2129) + 1.0;
    float _2137 = (cbLight._m0[_2122].w * _2129) + 1.0;
    uint _2138 = _2121 + 5u;
    float _2144 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2148 = _2121 + 4u;
    float _2158 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2162 = _2121 | 1u;
    float _2173 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_653, _654, _655));
    float _2176 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_653, _654, _655));
    float _4389 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _4400 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2181 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2183 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2190 = ((cbLight._m0[_2138].x * _2144) * _2183) + (((cbLight._m0[_2148].x * _2110) * _2158) * _2181);
    float _2191 = ((_2144 * cbLight._m0[_2138].y) * _2183) + (((cbLight._m0[_2148].y * _2112) * _2158) * _2181);
    float _2192 = ((_2144 * cbLight._m0[_2138].z) * _2183) + (((cbLight._m0[_2148].z * _2114) * _2158) * _2181);
    uvec4 _2196 = floatBitsToUint(cbLight._m0[_2121 + 12u]);
    bool _2198 = _2196.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2198)
    {
        _2300 = _2190;
        _2302 = _2191;
        _2304 = _2192;
    }
    else
    {
        uint _2308 = _2121 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2121 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4411 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2327 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2190;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2191;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2192;
    }
    bool _2307 = _2196.y == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2307)
    {
        _2362 = _2300;
        _2364 = _2302;
        _2366 = _2304;
    }
    else
    {
        uint _2535 = _2121 + 7u;
        float _2551 = (dot(vec3(cbLight._m0[_2121 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2552 = _2551 * _2551;
        float _4427 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2553 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2554 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2362 = (((cbLight._m0[_2535].x * 0.3183098733425140380859375) * _2553) * _2554) + _2300;
        _2364 = (((cbLight._m0[_2535].y * 0.3183098733425140380859375) * _2553) * _2554) + _2302;
        _2366 = (((cbLight._m0[_2535].z * 0.3183098733425140380859375) * _2553) * _2554) + _2304;
    }
    uint _2369 = _2121 + 8u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _656) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2121].x + _732;
    float _2385 = cbLight._m0[_2121].y + _733;
    float _2386 = cbLight._m0[_2121].z + _734;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2121].xyz));
    float _4443 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2398 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2399 = dot(vec3(_653, _654, _655), vec3(_2391, _2392, _2393));
    float _4465 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2391, _2392, _2393));
    float _4476 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2383 * _2383;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2420 = 0.959999978542327880859375 - _802;
    float _2422 = 0.959999978542327880859375 - _803;
    float _2423 = 0.959999978542327880859375 - _804;
    float _2430 = 1.0 - _2383;
    float _2441 = (0.5 / (((_2398 * ((_2397 * _2430) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2430) + _2383) * _2397))) * _2397;
    float _4487 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    uint _2457 = _2121 + 9u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _656) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2162].x + _732;
    float _2471 = cbLight._m0[_2162].y + _733;
    float _2472 = cbLight._m0[_2162].z + _734;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2162].xyz));
    float _4498 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2484 = dot(vec3(_653, _654, _655), vec3(_2477, _2478, _2479));
    float _4509 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2477, _2478, _2479));
    float _4520 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2469 * _2469;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2510 = 1.0 - _2469;
    float _2520 = (0.5 / (((_2398 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2510) + _2469) * _2483))) * _2483;
    float _4531 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    float _2532 = (((((_2503 * _2420) + _805) * cbLight._m0[_2457].x) * _2522) * _2144) + ((((cbLight._m0[_2369].x * _2110) * ((_2419 * _2420) + _805)) * _2443) * _2158);
    float _2533 = (((((_2503 * _2422) + _807) * cbLight._m0[_2457].y) * _2522) * _2144) + ((((cbLight._m0[_2369].y * _2112) * ((_2419 * _2422) + _807)) * _2443) * _2158);
    float _2534 = (((((_2503 * _2423) + _808) * cbLight._m0[_2457].z) * _2522) * _2144) + ((((cbLight._m0[_2369].z * _2114) * ((_2419 * _2423) + _808)) * _2443) * _2158);
    float _2590;
    float _2592;
    float _2594;
    if (_2198)
    {
        _2590 = _2532;
        _2592 = _2533;
        _2594 = _2534;
    }
    else
    {
        uint _2596 = _2121 + 2u;
        uint _2600 = _2121 + 10u;
        float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2596].w)) * _656) * 0.949999988079071044921875);
        float _2615 = _2614 * _2614;
        float _2616 = cbLight._m0[_2596].x + _732;
        float _2617 = cbLight._m0[_2596].y + _733;
        float _2618 = cbLight._m0[_2596].z + _734;
        float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
        float _2623 = _2622 * _2616;
        float _2624 = _2622 * _2617;
        float _2625 = _2622 * _2618;
        float _2626 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2596].xyz));
        float _4542 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2630 = dot(vec3(_653, _654, _655), vec3(_2623, _2624, _2625));
        float _4553 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2634 = dot(vec3(cbLight._m0[_2596].xyz), vec3(_2623, _2624, _2625));
        float _4564 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2638 = _2615 * _2615;
        float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
        float _2649 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2656 = 1.0 - _2615;
        float _2666 = (0.5 / (((_2398 * ((_2629 * _2656) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2656) + _2615) * _2629))) * _2629;
        float _4575 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2668 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
        float _2669 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2590 = (((((_2649 * _2420) + _805) * cbLight._m0[_2600].x) * _2668) * _2669) + _2532;
        _2592 = (((((_2649 * _2422) + _807) * cbLight._m0[_2600].y) * _2668) * _2669) + _2533;
        _2594 = (((((_2649 * _2423) + _808) * cbLight._m0[_2600].z) * _2668) * _2669) + _2534;
    }
    float _2700;
    float _2702;
    float _2704;
    if (_2307)
    {
        _2700 = _2590;
        _2702 = _2592;
        _2704 = _2594;
    }
    else
    {
        uint _2711 = _2121 + 3u;
        uint _2715 = _2121 + 11u;
        float _2729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2711].w)) * _656) * 0.949999988079071044921875);
        float _2730 = _2729 * _2729;
        float _2731 = cbLight._m0[_2711].x + _732;
        float _2732 = cbLight._m0[_2711].y + _733;
        float _2733 = cbLight._m0[_2711].z + _734;
        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
        float _2738 = _2737 * _2731;
        float _2739 = _2737 * _2732;
        float _2740 = _2737 * _2733;
        float _2741 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2711].xyz));
        float _4591 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2745 = dot(vec3(_653, _654, _655), vec3(_2738, _2739, _2740));
        float _4602 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2749 = dot(vec3(cbLight._m0[_2711].xyz), vec3(_2738, _2739, _2740));
        float _4613 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2753 = _2730 * _2730;
        float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
        float _2764 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
        float _2771 = 1.0 - _2730;
        float _2781 = (0.5 / (((_2398 * ((_2744 * _2771) + _2730)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2771) + _2730) * _2744))) * _2744;
        float _4624 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2783 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
        float _2784 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2700 = (((((_2764 * _2420) + _805) * cbLight._m0[_2715].x) * _2783) * _2784) + _2590;
        _2702 = (((((_2764 * _2422) + _807) * cbLight._m0[_2715].y) * _2783) * _2784) + _2592;
        _2704 = (((((_2764 * _2423) + _808) * cbLight._m0[_2715].z) * _2783) * _2784) + _2594;
    }
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_2119.y == 0u)
    {
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.x;
        uint _2817 = uint((float(_2805.y) * floor(float(uint(cbSceneParam._m0[85u].y * _741) / _2806))) + floor(float(uint(cbSceneParam._m0[85u].x * _740) / _2806)));
        float _2827 = (log2(_1897 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2828 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        uint _2831 = uint(isnan(14.0) ? _2828 : (isnan(_2828) ? 14.0 : min(_2828, 14.0)));
        uvec4 _2836 = texelFetch(g_lightClusterGridBuffer, int(((_2831 << 2u) + (_2817 << 6u)) >> 2u));
        uint _2837 = _2836.x;
        uint _2838 = _2805.z;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((((1u << ((_2838 >> 4u) & 15u)) + 4294967295u) & _2837) == 0u) || ((_2838 & 240u) == 0u))
        {
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
        }
        else
        {
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            uint _3067 = 0u;
            uint _3076;
            bool _3077;
            for (;;)
            {
                _3076 = texelFetch(g_lightClassification, int((((_2831 << 5u) + (_2817 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                _3077 = _3076 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3077)
                {
                    frontier_phi_66_pred = _3066;
                    frontier_phi_66_pred_1 = _3065;
                    frontier_phi_66_pred_2 = _3064;
                    frontier_phi_66_pred_3 = _3063;
                    frontier_phi_66_pred_4 = _3062;
                    frontier_phi_66_pred_5 = _3061;
                }
                else
                {
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    uint _3191;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3076;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    for (;;)
                    {
                        uint _3195 = uint(findLSB(_3191)) + (_3067 << 5u);
                        uint _3192 = (_3191 + 4294967295u) & _3191;
                        uint _3197 = _3195 * 48u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3217 = (_3195 * 48u) + 4u;
                        vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3236 = (_3195 * 48u) + 8u;
                        vec3 _3247 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x));
                        float _3251 = _3211.x - _1895;
                        float _3252 = _3211.y - _1896;
                        float _3253 = _3211.z - _1897;
                        float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                        float _3257 = inversesqrt(_3254);
                        float _3258 = _3257 * _3251;
                        float _3259 = _3257 * _3252;
                        float _3260 = _3257 * _3253;
                        float _3261 = dot(vec3(_762, _765, _768), vec3(_3258, _3259, _3260));
                        float _3266 = 1.0 - (_3254 * _3211.w);
                        float _4650 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3267 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3268 = sqrt(_3254) * _3230.w;
                        float _3271 = 1.39999997615814208984375 / (_3268 + 1.39999997615814208984375);
                        float _3272 = _3271 * _3271;
                        float _3275 = ((1.0 - _3272) * _3261) + _3272;
                        float _3278 = _3268 * _3268;
                        float _3282 = ((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3267) / ((_3278 * 0.699999988079071044921875) + 1.0);
                        float _3286 = (-0.0) - _1895;
                        float _3287 = (-0.0) - _1896;
                        float _3288 = (-0.0) - _1897;
                        float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3302 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                        float _3303 = 1.0 - _837;
                        float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                        float _3311 = _3310 * _3310;
                        float _3312 = _3311 * _3311;
                        float _3313 = _3293 + _3258;
                        float _3314 = _3294 + _3259;
                        float _3315 = _3295 + _3260;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3323 = dot(vec3(_762, _765, _768), vec3(_3293, _3294, _3295));
                        float _4666 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3327 = dot(vec3(_762, _765, _768), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                        float _4677 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                        float _3335 = _3271 * _3311;
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3261) + _3336;
                        float _4688 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3340 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3341 = 1.0 - _3311;
                        float _3351 = (0.5 / (((_3340 * ((_3326 * _3341) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3311) * _3326))) * _3340;
                        float _4699 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3362 = (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3334 * _3334) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125))) * _3267;
                        _3120 = (_3282 * _3230.x) + _3188;
                        _3121 = (_3282 * _3230.y) + _3189;
                        _3122 = (_3282 * _3230.z) + _3190;
                        _3117 = (_3362 * _3247.x) + _3185;
                        _3118 = (_3362 * _3247.y) + _3186;
                        _3119 = (_3362 * _3247.z) + _3187;
                        if (_3192 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3192;
                        }
                    }
                    frontier_phi_66_pred = _3122;
                    frontier_phi_66_pred_1 = _3121;
                    frontier_phi_66_pred_2 = _3120;
                    frontier_phi_66_pred_3 = _3119;
                    frontier_phi_66_pred_4 = _3118;
                    frontier_phi_66_pred_5 = _3117;
                }
                _2928 = frontier_phi_66_pred;
                _2926 = frontier_phi_66_pred_1;
                _2924 = frontier_phi_66_pred_2;
                _2922 = frontier_phi_66_pred_3;
                _2920 = frontier_phi_66_pred_4;
                _2918 = frontier_phi_66_pred_5;
                uint _3068 = _3067 + 1u;
                if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3061 = _2918;
                    _3062 = _2920;
                    _3063 = _2922;
                    _3064 = _2924;
                    _3065 = _2926;
                    _3066 = _2928;
                    _3067 = _3068;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
        }
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.z;
        uint _2934 = (_2932 >> 8u) & 15u;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((4294967295u << _2934) & _2837) == 0u)
        {
            _3029 = _2917;
            _3031 = _2919;
            _3033 = _2921;
            _3035 = _2923;
            _3037 = _2925;
            _3039 = _2927;
        }
        else
        {
            float _3054 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
            float _3055 = _3054 * _1895;
            float _3056 = _3054 * _1896;
            float _3057 = _3054 * _1897;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2934 < ((_2932 >> 12u) & 15u))
            {
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3168 = _2917;
                float _3169 = _2919;
                float _3170 = _2921;
                float _3171 = _2923;
                float _3172 = _2925;
                float _3173 = _2927;
                uint _3174 = _2934;
                uint _3183;
                bool _3184;
                for (;;)
                {
                    _3183 = texelFetch(g_lightClassification, int((((_2831 << 5u) + (_2817 << 9u)) + (_3174 << 2u)) >> 2u)).x;
                    _3184 = _3183 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3184)
                    {
                        frontier_phi_72_pred = _3173;
                        frontier_phi_72_pred_1 = _3172;
                        frontier_phi_72_pred_2 = _3171;
                        frontier_phi_72_pred_3 = _3170;
                        frontier_phi_72_pred_4 = _3169;
                        frontier_phi_72_pred_5 = _3168;
                    }
                    else
                    {
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        float _3384 = _3172;
                        float _3385 = _3173;
                        uint _3386 = _3183;
                        uint _3387;
                        vec4 _3412;
                        float _3413;
                        vec4 _3428;
                        vec3 _3440;
                        vec4 _3456;
                        vec4 _3471;
                        float _3517;
                        bool _3518;
                        for (;;)
                        {
                            uint _3397 = ((_3174 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3386));
                            _3387 = (_3386 + 4294967295u) & _3386;
                            uint _3399 = _3397 * 40u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3413 = _3412.w;
                            uint _3415 = (_3397 * 40u) + 4u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3397 * 40u) + 8u;
                            _3440 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x));
                            uint _3443 = (_3397 * 40u) + 16u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3397 * 40u) + 20u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3397 * 40u) + 24u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3492 = (_3397 * 40u) + 28u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            _3517 = fma(_1897, _3505.z, fma(_1896, _3505.y, _3505.x * _1895)) + _3505.w;
                            _3518 = !((fma(_1897, _3486.z, fma(_1896, _3486.y, _3486.x * _1895)) + _3486.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3518)
                            {
                                float _3545 = _3412.x - _1895;
                                float _3546 = _3412.y - _1896;
                                float _3547 = _3412.z - _1897;
                                float _3548 = dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547));
                                float _3551 = inversesqrt(_3548);
                                float _3552 = _3551 * _3545;
                                float _3553 = _3551 * _3546;
                                float _3554 = _3551 * _3547;
                                float _3558 = 1.0 - (_3548 / (_3413 * _3413));
                                float _4710 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3563 = sqrt(_3548) * _3428.w;
                                float _3565 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                                float _3566 = _3565 * _3565;
                                float _3569 = ((1.0 - _3566) * dot(vec3(_3552, _3553, _3554), vec3(_762, _765, _768))) + _3566;
                                float _3572 = _3563 * _3563;
                                float _3576 = (fma(_1897, _3456.z, fma(_1896, _3456.y, _3456.x * _1895)) + _3456.w) / _3517;
                                float _3577 = (fma(_1897, _3471.z, fma(_1896, _3471.y, _3471.x * _1895)) + _3471.w) / _3517;
                                float _3581 = 1.0 - dot(vec2(_3576, _3577), vec2(_3576, _3577));
                                float _4726 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3583 = _3582 * (((isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0))) * _3559) / ((_3572 * 0.699999988079071044921875) + 1.0));
                                float _3595 = exp2(log2(1.0 / ((_3572 * 3.5) + 5.0)) * 0.25);
                                float _3596 = 1.0 - _837;
                                float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                                float _3604 = _3603 * _3603;
                                float _3605 = _3604 * _3604;
                                float _3606 = _3552 - _3055;
                                float _3607 = _3553 - _3056;
                                float _3608 = _3554 - _3057;
                                float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                                float _3616 = dot(vec3(_762, _765, _768), vec3((-0.0) - _3055, (-0.0) - _3056, (-0.0) - _3057));
                                float _4737 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3620 = dot(vec3(_762, _765, _768), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                                float _4748 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                                float _3628 = _3565 * _3604;
                                float _3629 = _3628 * _3628;
                                float _3635 = ((1.0 - _3629) * dot(vec3(_762, _765, _768), vec3(_3552, _3553, _3554))) + _3629;
                                float _4759 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3637 = 1.0 - _3604;
                                float _3647 = (0.5 / (((_3636 * ((_3619 * _3637) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3636 * _3637) + _3604) * _3619))) * _3636;
                                float _4770 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3657 = (_3582 * _3559) * (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3627 * _3627) * ((_3572 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3583 * _3428.y;
                                frontier_phi_78_pred_1 = _3583 * _3428.x;
                                frontier_phi_78_pred_2 = _3657 * _3440.z;
                                frontier_phi_78_pred_3 = _3657 * _3440.y;
                                frontier_phi_78_pred_4 = _3657 * _3440.x;
                                frontier_phi_78_pred_5 = _3583 * _3428.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3665 = frontier_phi_78_pred;
                            _3664 = frontier_phi_78_pred_1;
                            _3663 = frontier_phi_78_pred_2;
                            _3662 = frontier_phi_78_pred_3;
                            _3661 = frontier_phi_78_pred_4;
                            _3666 = frontier_phi_78_pred_5;
                            _3370 = _3664 + _3383;
                            _3371 = _3665 + _3384;
                            _3372 = _3666 + _3385;
                            _3367 = _3661 + _3380;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            if (_3387 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3387;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3372;
                        frontier_phi_72_pred_1 = _3371;
                        frontier_phi_72_pred_2 = _3370;
                        frontier_phi_72_pred_3 = _3369;
                        frontier_phi_72_pred_4 = _3368;
                        frontier_phi_72_pred_5 = _3367;
                    }
                    _3040 = frontier_phi_72_pred;
                    _3038 = frontier_phi_72_pred_1;
                    _3036 = frontier_phi_72_pred_2;
                    _3034 = frontier_phi_72_pred_3;
                    _3032 = frontier_phi_72_pred_4;
                    _3030 = frontier_phi_72_pred_5;
                    uint _3175 = _3174 + 1u;
                    if (_3175 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3168 = _3030;
                        _3169 = _3032;
                        _3170 = _3034;
                        _3171 = _3036;
                        _3172 = _3038;
                        _3173 = _3040;
                        _3174 = _3175;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3040;
                frontier_phi_60_61_ladder_1 = _3038;
                frontier_phi_60_61_ladder_2 = _3034;
                frontier_phi_60_61_ladder_3 = _3032;
                frontier_phi_60_61_ladder_4 = _3030;
                frontier_phi_60_61_ladder_5 = _3036;
            }
            else
            {
                frontier_phi_60_61_ladder = _2927;
                frontier_phi_60_61_ladder_1 = _2925;
                frontier_phi_60_61_ladder_2 = _2921;
                frontier_phi_60_61_ladder_3 = _2919;
                frontier_phi_60_61_ladder_4 = _2917;
                frontier_phi_60_61_ladder_5 = _2923;
            }
            _3029 = frontier_phi_60_61_ladder_4;
            _3031 = frontier_phi_60_61_ladder_3;
            _3033 = frontier_phi_60_61_ladder_2;
            _3035 = frontier_phi_60_61_ladder_5;
            _3037 = frontier_phi_60_61_ladder_1;
            _3039 = frontier_phi_60_61_ladder;
        }
        float _3044 = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
        _2850 = (_3044 * _3035) + _2362;
        _2852 = (_3044 * _3037) + _2364;
        _2854 = (_3044 * _3039) + _2366;
        _2856 = ((_3029 * _805) * _3044) + _2700;
        _2858 = ((_3031 * _807) * _3044) + _2702;
        _2860 = ((_3033 * _808) * _3044) + _2704;
    }
    else
    {
        _2850 = _2362;
        _2852 = _2364;
        _2854 = _2366;
        _2856 = _2700;
        _2858 = _2702;
        _2860 = _2704;
    }
    float _4786 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4797 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4808 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    uint _2880 = _245 + 6u;
    float _2888 = _740 / cbSceneParam._m0[86u].x;
    float _2889 = _741 / cbSceneParam._m0[86u].y;
    vec4 _2903 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2905 = _2903.x;
    float _2906 = _2903.y;
    float _2907 = _2903.z;
    float _2908 = _2903.w;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2942 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2943 = _2942 / _675;
        float _2954 = _2943 * _725;
        float _2955 = _726 * _2943;
        float _2956 = (-0.0) - _2955;
        float _2957 = _2943 * _727;
        float _2959 = (cbSceneParam._m0[77u].w * _2956) / _2942;
        float _2960 = _2959 + cbSceneParam._m0[79u].w;
        float _2961 = cbSceneParam._m0[79u].w - _2955;
        float _2967 = sqrt(((_2954 * _2954) + (_2955 * _2955)) + (_2957 * _2957));
        float _2970 = (1.0 - (cbSceneParam._m0[77u].w / _2942)) * _2967;
        float _2975 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2977 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3130;
        if (abs((_2956 - _2959) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3130 = ((((_2960 > 0.0) ? exp2(_2975 * _2960) : (2.0 - exp2(_2977 * _2960))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2970;
        }
        else
        {
            float _3090 = 1.0 / cbSceneParam._m0[80u].x;
            float _3091 = isnan(_2961) ? _2960 : (isnan(_2960) ? _2961 : max(_2960, _2961));
            float _3092 = isnan(_2961) ? _2960 : (isnan(_2960) ? _2961 : min(_2960, _2961));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            _3130 = ((abs(_2967 / _2956) * cbSceneParam._m0[80u].y) * ((((_3101 - _3102) * 2.0) - ((exp2(_2975 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0)))) - exp2(_2975 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))))) * _3090)) - ((exp2(_2977 * _3101) - exp2(_2977 * _3102)) * _3090))) + (_2970 * cbSceneParam._m0[80u].z);
        }
        vec4 _3132 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, 1.0), 0.0);
        float _3141 = exp2((_3130 * (-1.44269502162933349609375)) * (1.0 - _3132.w));
        float _3142 = log2(_3141);
        float _3158 = log2(_2908);
        _2979 = (exp2(_3158 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3142 * cbSceneParam._m0[78u].x)) * _3132.x) / cbSceneParam._m0[78u].x)) + _2905;
        _2981 = (exp2(_3158 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3142 * cbSceneParam._m0[78u].y)) * _3132.y) / cbSceneParam._m0[78u].y)) + _2906;
        _2983 = (exp2(_3158 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3142 * cbSceneParam._m0[78u].z)) * _3132.z) / cbSceneParam._m0[78u].z)) + _2907;
        _2985 = _3141 * _2908;
    }
    else
    {
        _2979 = _2905;
        _2981 = _2906;
        _2983 = _2907;
        _2985 = _2908;
    }
    float _2997 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2998 = _2997 == 3.0;
    float _2999 = log2(_2985);
    float _3006 = exp2(_2999 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2850 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _821))) + ((_2856 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1629)) * cbPerFrame._m0[3u].x));
    float _3007 = exp2(_2999 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2852 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _821))) + ((_2858 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1629)) * cbPerFrame._m0[3u].x));
    float _3008 = exp2(_2999 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2854 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _821))) + ((_2860 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1629)) * cbPerFrame._m0[3u].x));
    float _3017 = (_2997 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3017 * (_2998 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.y = _3017 * (_2998 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.z = _3017 * (_2998 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2983)));
    SV_Target.w = cbInstanceData._m0[_2880].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2880].w;
}


