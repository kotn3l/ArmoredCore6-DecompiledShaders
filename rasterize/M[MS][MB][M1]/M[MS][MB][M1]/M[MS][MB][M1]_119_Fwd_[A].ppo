#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1381;
float _3762;
float _3763;
float _3764;
float _3765;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3774 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3785 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _486 = (((_474.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _487 = (((_474.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _490 = fma(_458, _241, fma(_487, _248, _486 * _234));
    float _493 = fma(_458, _242, fma(_487, _249, _486 * _235));
    float _496 = fma(_458, _243, fma(_487, _250, _486 * _236));
    float _500 = inversesqrt(dot(vec3(_490, _493, _496), vec3(_490, _493, _496)));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _529 = _527.x;
    float _530 = 1.0 - _529;
    float _534 = ((_529 - _530) * cbMtdParam._m0[24u].z) + _530;
    float _536 = (cbMtdParam._m0[19u].x + dot(vec4(_500 * _490, _500 * _493, _500 * _496, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_534 * cbMtdParam._m0[21u].z);
    float _3796 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _539 = (-0.0) - cbMtdParam._m0[24u].x;
    float _541 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0));
    float _549 = _537 - ((_537 * TEXCOORD_8.x) * _542);
    float _550 = _537 - ((_537 * TEXCOORD_8.y) * _542);
    float _551 = _537 - ((_537 * TEXCOORD_8.z) * _542);
    float _558 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _562 = ((isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : min(_558, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _570 = (_562 - (((_534 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _562))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3827 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _575 = ((_549 * (cbMtdParam._m0[17u].x - _397)) * _571) + _397;
    float _576 = ((_550 * (cbMtdParam._m0[17u].y - _398)) * _571) + _398;
    float _577 = ((_551 * (cbMtdParam._m0[17u].z - _399)) * _571) + _399;
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _619 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].w) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3838 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _628 = ((((cbMtdParam._m0[10u].x - _575) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _620) + _575;
    float _629 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _620) + _576;
    float _630 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _577)) * _620) + _577;
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _658 = _656.x;
    float _676 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _658) * _390) + _658;
    float _680 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _676) * cbMtdParam._m0[19u].z) + _676;
    float _683 = _680 - ((_571 * _549) * _680);
    float _685 = _683 - (_683 * _620);
    float _689 = (cbMtdParam._m0[19u].w * (_474.z - _447)) + _447;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _710 = (_703.x * 2.0) + (-1.0);
    float _711 = (_703.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3849 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _721 = (((_703.z - _689) * _549) * _571) + _689;
    float _724 = ((cbMtdParam._m0[23u].y - _721) * _620) + _721;
    vec4 _743 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _749 = (_743.x * 2.0) + (-1.0);
    float _750 = (_743.y * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _3860 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _771 = (((cbMtdParam._m0[21u].x * _486) + ((_710 - _486) * _549)) * _571) + _486;
    float _772 = (((cbMtdParam._m0[21u].x * _487) + ((_711 - _487) * _550)) * _571) + _487;
    float _773 = (((sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) - _458) * _551) * _571) + _458;
    float _784 = (((_749 - _771) + (_771 * cbMtdParam._m0[22u].z)) * _620) + _771;
    float _785 = (((_750 - _772) + (_772 * cbMtdParam._m0[22u].z)) * _620) + _772;
    float _786 = ((sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _773) * _620) + _773;
    float _788 = cbMtdParam._m0[22u].x + _474.w;
    float _791 = fma(_786, _241, fma(_785, _248, _784 * _234));
    float _794 = fma(_786, _242, fma(_785, _249, _784 * _235));
    float _797 = fma(_786, _243, fma(_785, _250, _784 * _236));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _3871 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _805 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _3893 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3904 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3915 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3926 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _810 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _824 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    vec4 _888 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _890 = _888.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1062 = sqrt(((_874 * _874) + (_875 * _875)) + (_876 * _876));
        float _1068 = (cbMatDynParam._m0[5u].x * _1062) + cbMatDynParam._m0[5u].y;
        float _3937 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1073 = (cbMatDynParam._m0[5u].z * _1062) + cbMatDynParam._m0[5u].w;
        float _3948 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) - _1069)) + _1069) < ((_890 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _901 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _902 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _923 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _926 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _939 = _253 + 9u;
    uint _940 = _939 + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_940].z;
    float _3959 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _952 = 1.0 - _810;
    float _953 = _949 * _952;
    float _954 = _950 * _952;
    float _955 = _951 * _952;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _810;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _810;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _810;
    float _963 = _960 + 0.039999999105930328369140625;
    float _965 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _901, cbSceneParam._m0[86u].y * _902));
    float _979 = ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * TEXCOORD_5.w) * _975.x;
    float _980 = dot(vec3(_802, _803, _804), vec3(_881, _882, _883));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _802) - _881;
    float _988 = (_983 * _803) - _882;
    float _989 = (_983 * _804) - _883;
    float _993 = abs(dot(vec3(_881, _882, _883), vec3(_802, _803, _804)));
    float _3992 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_805);
    float _1008 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1014 = (1.0 - _1008) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1015 = _1008 * _995;
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1380;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1109 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1113 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1138 = _1043 + _802;
        float _1139 = _1047 + _803;
        float _1140 = _1051 + _804;
        float _1150 = fma(_1140, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138)) - _1105;
        float _1151 = fma(_1140, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138)) - _1109;
        float _1152 = fma(_1140, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138)) - _1113;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1208 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1174.x + (-0.5));
        float _1210 = _1208 * (_1174.y + (-0.5));
        float _1211 = _1208 * (_1174.z + (-0.5));
        float _1218 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1181.x + (-0.5));
        float _1220 = _1218 * (_1181.y + (-0.5));
        float _1221 = _1218 * (_1181.z + (-0.5));
        float _1228 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1188.x + (-0.5));
        float _1230 = _1228 * (_1188.y + (-0.5));
        float _1231 = _1228 * (_1188.z + (-0.5));
        float _1238 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1195.x + (-0.5));
        float _1240 = _1238 * (_1195.y + (-0.5));
        float _1241 = _1238 * (_1195.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1262 = (dot(vec3(_802, _803, _804), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1272 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4040 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1274 + 1.0))) + _1279) * _1242;
        float _1289 = _1210 * 0.5;
        float _1290 = _1220 * 0.5;
        float _1291 = _1230 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_802, _803, _804), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4073 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1316 + 1.0))) + _1321) * _1243;
        float _1331 = _1211 * 0.5;
        float _1332 = _1221 * 0.5;
        float _1333 = _1231 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_802, _803, _804), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4106 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1358 + 1.0))) + _1363) * _1244;
        _1380 = _1211;
        _1382 = _1210;
        _1383 = _1209;
        _1384 = _1221;
        _1385 = _1220;
        _1386 = _1219;
        _1387 = _1231;
        _1388 = _1230;
        _1389 = _1229;
        _1390 = _1244;
        _1391 = _1243;
        _1392 = _1242;
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1381;
        _1382 = _1381;
        _1383 = _1381;
        _1384 = _1381;
        _1385 = _1381;
        _1386 = _1381;
        _1387 = _1381;
        _1388 = _1381;
        _1389 = _1381;
        _1390 = _1381;
        _1391 = _1381;
        _1392 = _1381;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1423 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1427 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1431 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1454 = _1043 + _802;
        float _1455 = _1047 + _803;
        float _1456 = _1051 + _804;
        float _1466 = fma(_1456, cbModelParam._m0[30u].z, fma(_1455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1454)) - _1423;
        float _1467 = fma(_1456, cbModelParam._m0[31u].z, fma(_1455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1454)) - _1427;
        float _1468 = fma(_1456, cbModelParam._m0[32u].z, fma(_1455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1454)) - _1431;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1423 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1427 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[35u].z) + ((((((_1431 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1522 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1489.x + (-0.5));
        float _1524 = _1522 * (_1489.y + (-0.5));
        float _1525 = _1522 * (_1489.z + (-0.5));
        float _1532 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1496.x + (-0.5));
        float _1534 = _1532 * (_1496.y + (-0.5));
        float _1535 = _1532 * (_1496.z + (-0.5));
        float _1542 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1503.x + (-0.5));
        float _1544 = _1542 * (_1503.y + (-0.5));
        float _1545 = _1542 * (_1503.z + (-0.5));
        float _1552 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1510.x + (-0.5));
        float _1554 = _1552 * (_1510.y + (-0.5));
        float _1555 = _1552 * (_1510.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_802, _803, _804), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4169 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1586 + 1.0))) + _1591) * _1556;
        float _1601 = _1524 * 0.5;
        float _1602 = _1534 * 0.5;
        float _1603 = _1544 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_802, _803, _804), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4202 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1628 + 1.0))) + _1633) * _1557;
        float _1643 = _1525 * 0.5;
        float _1644 = _1535 * 0.5;
        float _1645 = _1545 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_802, _803, _804), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4235 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1670 + 1.0))) + _1675) * _1558;
        _1692 = _1525;
        _1693 = _1524;
        _1694 = _1523;
        _1695 = _1535;
        _1696 = _1534;
        _1697 = _1533;
        _1698 = _1545;
        _1699 = _1544;
        _1700 = _1543;
        _1701 = _1558;
        _1702 = _1557;
        _1703 = _1556;
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1381;
        _1693 = _1381;
        _1694 = _1381;
        _1695 = _1381;
        _1696 = _1381;
        _1697 = _1381;
        _1698 = _1381;
        _1699 = _1381;
        _1700 = _1381;
        _1701 = _1381;
        _1702 = _1381;
        _1703 = _1381;
        _1704 = 0.0;
        _1705 = 0.0;
        _1706 = 0.0;
    }
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1393)) + _1393;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1394)) + _1394;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1395)) + _1395;
    float _1739 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1716));
    float _1760 = _987 * 0.5;
    float _1761 = _988 * 0.5;
    float _1762 = _989 * 0.5;
    float _1763 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1766 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1769 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1803;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1776 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1380, _1384, _1387, _1390));
        float _1780 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1784 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1791 = dot(vec4(cbModelParam._m0[39u]), vec4(_1760, _1761, _1762, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1814;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1805 = dot(vec4(cbModelParam._m0[40u]), vec4(_1760, _1761, _1762, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1818 = (_1814 * cbModelParam._m0[1u].x) + (_1803 * (1.0 - cbModelParam._m0[1u].x));
    float _1828 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1828 : min(cbModelParam._m0[25u].z, _1828));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1891 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1894 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1922 = frontier_phi_17_15_ladder;
        }
        float _2125;
        if (_1891 > 0.0)
        {
            _2125 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2125 = frontier_phi_26_22_ladder;
        }
        float _2379;
        if (_1894 > 0.0)
        {
            _2379 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2379 = frontier_phi_38_33_ladder;
        }
        float _2381 = isnan(_2125) ? _1922 : (isnan(_1922) ? _2125 : min(_1922, _2125));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1888) + _1877;
        float _2387 = (_2382 * _1891) + _1881;
        float _2388 = (_2382 * _1894) + _1885;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1829);
            frontier_phi_16_38_ladder = _2516.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2516.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2516.x * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_16_38_ladder_2;
        _1912 = frontier_phi_16_38_ladder_1;
        _1914 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1829);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1973 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1977 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1981 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1984 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1987 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1990 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2130;
        if (_1984 > 0.0)
        {
            _2130 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2130 = frontier_phi_28_24_ladder;
        }
        float _2406;
        if (_1987 > 0.0)
        {
            _2406 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2406 = frontier_phi_40_35_ladder;
        }
        float _2619;
        if (_1990 > 0.0)
        {
            _2619 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2619 = frontier_phi_49_46_ladder;
        }
        float _2621 = isnan(_2406) ? _2130 : (isnan(_2130) ? _2406 : min(_2130, _2406));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _1984) + _1973;
        float _2627 = (_2622 * _1987) + _1977;
        float _2628 = (_2622 * _1990) + _1981;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2629;
        float _2632 = _2629 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2628 > _2632) || ((_2628 < _2630) || ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 < _2630) || (_2626 > _2632))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2628, cbModelParam._m0[17u].z, fma(_2627, cbModelParam._m0[17u].y, _2626 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2628, cbModelParam._m0[18u].z, fma(_2627, cbModelParam._m0[18u].y, _2626 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2628, cbModelParam._m0[19u].z, fma(_2627, cbModelParam._m0[19u].y, _2626 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_25_49_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _2009 = frontier_phi_25_49_ladder_2;
        _2011 = frontier_phi_25_49_ladder_1;
        _2013 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1919);
        _2009 = _1993.x * cbModelParam._m0[1u].z;
        _2011 = _1993.y * cbModelParam._m0[1u].z;
        _2013 = _1993.z * cbModelParam._m0[1u].z;
    }
    float _2026 = (((_1014 * _963) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2028 = (((_1014 * _965) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2030 = (((_1014 * _966) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2026 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2026 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, _2026 * cbSceneParam._m0[91u].x));
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2059 = _979 + (-1.0);
    float _2064 = (cbLight._m0[_2052].x * _2059) + 1.0;
    float _2065 = (cbLight._m0[_2052].y * _2059) + 1.0;
    float _2066 = (cbLight._m0[_2052].z * _2059) + 1.0;
    float _2067 = (cbLight._m0[_2052].w * _2059) + 1.0;
    uint _2068 = _2051 + 5u;
    float _2074 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2078 = _2051 + 4u;
    float _2084 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2088 = _2051 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_802, _803, _804));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_802, _803, _804));
    float _4371 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4382 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2068].x * _2074) * _2109) + ((cbLight._m0[_2078].x * _2084) * _2107);
    float _2117 = ((_2074 * cbLight._m0[_2068].y) * _2109) + ((_2084 * cbLight._m0[_2078].y) * _2107);
    float _2118 = ((_2074 * cbLight._m0[_2068].z) * _2109) + ((_2084 * cbLight._m0[_2078].z) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2051 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2124)
    {
        _2135 = _2116;
        _2137 = _2117;
        _2139 = _2118;
    }
    else
    {
        uint _2143 = _2051 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_2051 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4393 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2162 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2116;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2117;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2118;
    }
    bool _2142 = _2122.y == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2142)
    {
        _2180 = _2135;
        _2182 = _2137;
        _2184 = _2139;
    }
    else
    {
        uint _2350 = _2051 + 7u;
        float _2366 = (dot(vec3(cbLight._m0[_2051 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2367 = _2366 * _2366;
        float _4409 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2368 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2369 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2180 = (((cbLight._m0[_2350].x * 0.3183098733425140380859375) * _2368) * _2369) + _2135;
        _2182 = (((cbLight._m0[_2350].y * 0.3183098733425140380859375) * _2368) * _2369) + _2137;
        _2184 = (((cbLight._m0[_2350].z * 0.3183098733425140380859375) * _2368) * _2369) + _2139;
    }
    uint _2187 = _2051 + 8u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _805) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2051].x + _881;
    float _2203 = cbLight._m0[_2051].y + _882;
    float _2204 = cbLight._m0[_2051].z + _883;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2051].xyz));
    float _4425 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2216 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2217 = dot(vec3(_802, _803, _804), vec3(_2209, _2210, _2211));
    float _4447 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2209, _2210, _2211));
    float _4458 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2201 * _2201;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2238 = 0.959999978542327880859375 - _960;
    float _2240 = 0.959999978542327880859375 - _961;
    float _2241 = 0.959999978542327880859375 - _962;
    float _2248 = 1.0 - _2201;
    float _2259 = (0.5 / (((_2216 * ((_2215 * _2248) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2248) + _2201) * _2215))) * _2215;
    float _4469 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    uint _2272 = _2051 + 9u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _805) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2088].x + _881;
    float _2286 = cbLight._m0[_2088].y + _882;
    float _2287 = cbLight._m0[_2088].z + _883;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2088].xyz));
    float _4480 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2299 = dot(vec3(_802, _803, _804), vec3(_2292, _2293, _2294));
    float _4491 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2292, _2293, _2294));
    float _4502 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2284 * _2284;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
    float _2325 = 1.0 - _2284;
    float _2335 = (0.5 / (((_2216 * ((_2298 * _2325) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2325) + _2284) * _2298))) * _2298;
    float _4513 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    float _2347 = (((((_2318 * _2238) + _963) * cbLight._m0[_2272].x) * _2337) * _2074) + (((((_2237 * _2238) + _963) * cbLight._m0[_2187].x) * _2261) * _2084);
    float _2348 = (((((_2318 * _2240) + _965) * cbLight._m0[_2272].y) * _2337) * _2074) + (((((_2237 * _2240) + _965) * cbLight._m0[_2187].y) * _2261) * _2084);
    float _2349 = (((((_2318 * _2241) + _966) * cbLight._m0[_2272].z) * _2337) * _2074) + (((((_2237 * _2241) + _966) * cbLight._m0[_2187].z) * _2261) * _2084);
    float _2411;
    float _2413;
    float _2415;
    if (_2124)
    {
        _2411 = _2347;
        _2413 = _2348;
        _2415 = _2349;
    }
    else
    {
        uint _2417 = _2051 + 2u;
        uint _2421 = _2051 + 10u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _805) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _881;
        float _2438 = cbLight._m0[_2417].y + _882;
        float _2439 = cbLight._m0[_2417].z + _883;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2417].xyz));
        float _4524 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2451 = dot(vec3(_802, _803, _804), vec3(_2444, _2445, _2446));
        float _4535 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4546 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2216 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2477) + _2436) * _2450))) * _2450;
        float _4557 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2411 = (((((_2470 * _2238) + _963) * cbLight._m0[_2421].x) * _2489) * _2490) + _2347;
        _2413 = (((((_2470 * _2240) + _965) * cbLight._m0[_2421].y) * _2489) * _2490) + _2348;
        _2415 = (((((_2470 * _2241) + _966) * cbLight._m0[_2421].z) * _2489) * _2490) + _2349;
    }
    float _2525;
    float _2527;
    float _2529;
    if (_2142)
    {
        _2525 = _2411;
        _2527 = _2413;
        _2529 = _2415;
    }
    else
    {
        uint _2536 = _2051 + 3u;
        uint _2540 = _2051 + 11u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _805) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _881;
        float _2557 = cbLight._m0[_2536].y + _882;
        float _2558 = cbLight._m0[_2536].z + _883;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2536].xyz));
        float _4573 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2570 = dot(vec3(_802, _803, _804), vec3(_2563, _2564, _2565));
        float _4584 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4595 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2216 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2596) + _2555) * _2569))) * _2569;
        float _4606 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2525 = (((((_2589 * _2238) + _963) * cbLight._m0[_2540].x) * _2608) * _2609) + _2411;
        _2527 = (((((_2589 * _2240) + _965) * cbLight._m0[_2540].y) * _2608) * _2609) + _2413;
        _2529 = (((((_2589 * _2241) + _966) * cbLight._m0[_2540].z) * _2608) * _2609) + _2415;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2049.y == 0u)
    {
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2684;
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2684;
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2684;
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _902) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _901) / _2700)));
        float _2721 = (log2(_2687 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3000)
                {
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2999;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_2990 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _2685;
                        float _3196 = _3155.y - _2686;
                        float _3197 = _3155.z - _2687;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_920, _923, _926), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4632 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _2685;
                        float _3231 = (-0.0) - _2686;
                        float _3232 = (-0.0) - _2687;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3247 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3248 = 1.0 - _995;
                        float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                        float _3256 = _3255 * _3255;
                        float _3257 = _3256 * _3256;
                        float _3258 = _3237 + _3202;
                        float _3259 = _3238 + _3203;
                        float _3260 = _3239 + _3204;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3268 = dot(vec3(_920, _923, _926), vec3(_3237, _3238, _3239));
                        float _4648 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3272 = dot(vec3(_920, _923, _926), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                        float _4659 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                        float _3280 = _3215 * _3256;
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3205) + _3281;
                        float _4670 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3286 = 1.0 - _3256;
                        float _3296 = (0.5 / (((_3285 * ((_3271 * _3286) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3256) * _3271))) * _3285;
                        float _4681 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3307 = (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3279 * _3279) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3059 = (_3226 * _3174.x) + _3132;
                        _3060 = (_3226 * _3174.y) + _3133;
                        _3061 = (_3226 * _3174.z) + _3134;
                        _3056 = (_3307 * _3191.x) + _3129;
                        _3057 = (_3307 * _3191.y) + _3130;
                        _3058 = (_3307 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_66_pred = _3056;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                _2833 = frontier_phi_66_pred;
                _2843 = frontier_phi_66_pred_1;
                _2841 = frontier_phi_66_pred_2;
                _2839 = frontier_phi_66_pred_3;
                _2837 = frontier_phi_66_pred_4;
                _2835 = frontier_phi_66_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2833;
                    _2985 = _2835;
                    _2986 = _2837;
                    _2987 = _2839;
                    _2988 = _2841;
                    _2989 = _2843;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2849) & _2731) == 0u)
        {
            _2952 = _2832;
            _2954 = _2834;
            _2956 = _2836;
            _2958 = _2838;
            _2960 = _2840;
            _2962 = _2842;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
            float _2978 = _2977 * _2685;
            float _2979 = _2977 * _2686;
            float _2980 = _2977 * _2687;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3112 = _2832;
                float _3113 = _2834;
                float _3114 = _2836;
                float _3115 = _2838;
                float _3116 = _2840;
                float _3117 = _2842;
                uint _3118 = _2849;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3128)
                    {
                        frontier_phi_77_pred = _3117;
                        frontier_phi_77_pred_1 = _3116;
                        frontier_phi_77_pred_2 = _3115;
                        frontier_phi_77_pred_3 = _3114;
                        frontier_phi_77_pred_4 = _3113;
                        frontier_phi_77_pred_5 = _3112;
                    }
                    else
                    {
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        uint _3340 = _3127;
                        uint _3341;
                        vec4 _3366;
                        float _3367;
                        vec4 _3382;
                        vec3 _3394;
                        vec4 _3409;
                        vec4 _3425;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3351 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3340));
                            _3341 = (_3340 + 4294967295u) & _3340;
                            uint _3353 = _3351 * 40u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3367 = _3366.w;
                            uint _3369 = (_3351 * 40u) + 4u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3351 * 40u) + 8u;
                            _3394 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x));
                            uint _3396 = (_3351 * 40u) + 16u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3412 = (_3351 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3351 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3351 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_2687, _3459.z, fma(_2686, _3459.y, _3459.x * _2685)) + _3459.w;
                            _3472 = !((fma(_2687, _3440.z, fma(_2686, _3440.y, _3440.x * _2685)) + _3440.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3366.x - _2685;
                                float _3500 = _3366.y - _2686;
                                float _3501 = _3366.z - _2687;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3367 * _3367));
                                float _4692 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3517 = sqrt(_3502) * _3382.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_920, _923, _926))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_2687, _3409.z, fma(_2686, _3409.y, _3409.x * _2685)) + _3409.w) / _3471;
                                float _3531 = (fma(_2687, _3425.z, fma(_2686, _3425.y, _3425.x * _2685)) + _3425.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4708 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _995;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _2978;
                                float _3561 = _3507 - _2979;
                                float _3562 = _3508 - _2980;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_920, _923, _926), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4719 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3574 = dot(vec3(_920, _923, _926), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4730 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_920, _923, _926), vec3(_3506, _3507, _3508))) + _3583;
                                float _4741 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4752 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3537 * _3382.y;
                                frontier_phi_83_pred_1 = _3537 * _3382.x;
                                frontier_phi_83_pred_2 = _3611 * _3394.z;
                                frontier_phi_83_pred_3 = _3611 * _3394.y;
                                frontier_phi_83_pred_4 = _3611 * _3394.x;
                                frontier_phi_83_pred_5 = _3537 * _3382.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3619 = frontier_phi_83_pred;
                            _3618 = frontier_phi_83_pred_1;
                            _3617 = frontier_phi_83_pred_2;
                            _3616 = frontier_phi_83_pred_3;
                            _3615 = frontier_phi_83_pred_4;
                            _3620 = frontier_phi_83_pred_5;
                            _3324 = _3618 + _3337;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            if (_3341 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3341;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3326;
                        frontier_phi_77_pred_1 = _3325;
                        frontier_phi_77_pred_2 = _3324;
                        frontier_phi_77_pred_3 = _3323;
                        frontier_phi_77_pred_4 = _3322;
                        frontier_phi_77_pred_5 = _3321;
                    }
                    _2963 = frontier_phi_77_pred;
                    _2961 = frontier_phi_77_pred_1;
                    _2959 = frontier_phi_77_pred_2;
                    _2957 = frontier_phi_77_pred_3;
                    _2955 = frontier_phi_77_pred_4;
                    _2953 = frontier_phi_77_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2953;
                        _3113 = _2955;
                        _3114 = _2957;
                        _3115 = _2959;
                        _3116 = _2961;
                        _3117 = _2963;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2957;
                frontier_phi_58_59_ladder_1 = _2963;
                frontier_phi_58_59_ladder_2 = _2961;
                frontier_phi_58_59_ladder_3 = _2959;
                frontier_phi_58_59_ladder_4 = _2955;
                frontier_phi_58_59_ladder_5 = _2953;
            }
            else
            {
                frontier_phi_58_59_ladder = _2836;
                frontier_phi_58_59_ladder_1 = _2842;
                frontier_phi_58_59_ladder_2 = _2840;
                frontier_phi_58_59_ladder_3 = _2838;
                frontier_phi_58_59_ladder_4 = _2834;
                frontier_phi_58_59_ladder_5 = _2832;
            }
            _2952 = frontier_phi_58_59_ladder_5;
            _2954 = frontier_phi_58_59_ladder_4;
            _2956 = frontier_phi_58_59_ladder;
            _2958 = frontier_phi_58_59_ladder_3;
            _2960 = frontier_phi_58_59_ladder_2;
            _2962 = frontier_phi_58_59_ladder_1;
        }
        float _2967 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _2744 = (_2967 * _2958) + _2180;
        _2746 = (_2967 * _2960) + _2182;
        _2748 = (_2967 * _2962) + _2184;
        _2750 = ((_2952 * _963) * _2967) + _2525;
        _2752 = ((_2954 * _965) * _2967) + _2527;
        _2754 = ((_2956 * _966) * _2967) + _2529;
    }
    else
    {
        _2744 = _2180;
        _2746 = _2182;
        _2748 = _2184;
        _2750 = _2525;
        _2752 = _2527;
        _2754 = _2529;
    }
    float _4768 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4779 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4790 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _2771 = ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2744 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _979))) + ((_2750 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _2772 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2746 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _979))) + ((_2752 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _2773 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2748 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _979))) + ((_2754 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    uint _2774 = _253 + 6u;
    float _2782 = _901 / cbSceneParam._m0[86u].x;
    float _2783 = _902 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _824 : (isnan(_824) ? cbSceneParam._m0[77u].w : min(_824, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_824 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_824) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _824 : min(cbSceneParam._m0[80u].w, _824));
        float _2858 = _2857 / _824;
        float _2869 = _2858 * _874;
        float _2870 = _875 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2872 = _2858 * _876;
        float _2874 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2875 = _2874 + cbSceneParam._m0[79u].w;
        float _2876 = cbSceneParam._m0[79u].w - _2870;
        float _2882 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2872 * _2872));
        float _2885 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2882;
        float _2890 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2892 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3069;
        if (abs((_2871 - _2874) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3069 = ((((_2875 > 0.0) ? exp2(_2890 * _2875) : (2.0 - exp2(_2892 * _2875))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2885;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : max(_2875, _2876));
            float _3015 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : min(_2875, _2876));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3069 = ((abs(_2882 / _2871) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2890 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2890 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2892 * _3024) - exp2(_2892 * _3025)) * _3013))) + (_2885 * cbSceneParam._m0[80u].z);
        }
        vec4 _3071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3080 = exp2((_3069 * (-1.44269502162933349609375)) * (1.0 - _3071.w));
        float _3081 = log2(_3080);
        float _3097 = log2(_2802);
        _2894 = (exp2(_3097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].x)) * _3071.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2896 = (exp2(_3097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].y)) * _3071.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2898 = (exp2(_3097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].z)) * _3071.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2900 = _3080 * _2802;
    }
    else
    {
        _2894 = _2799;
        _2896 = _2800;
        _2898 = _2801;
        _2900 = _2802;
    }
    bool _3107;
    vec4 _2910;
    vec4 _2932;
    float _2934;
    float _2938;
    float _2939;
    float _2940;
    float _2941;
    bool _2951;
    for (;;)
    {
        _2910 = cbMatDynParam._m0[0u];
        float _2912 = roundEven(_2910.y);
        bool _2913 = _2912 == 3.0;
        float _2914 = log2(_2900);
        float _2921 = exp2(_2914 * cbSceneParam._m0[78u].x) * _2771;
        float _2922 = exp2(_2914 * cbSceneParam._m0[78u].y) * _2772;
        float _2923 = exp2(_2914 * cbSceneParam._m0[78u].z) * _2773;
        float _2930 = _890 + (-0.5);
        _2932 = cbMtdParam._m0[1u];
        _2934 = _2932.y * _2930;
        float _2937 = (_2912 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2938 = _2937 * (_2913 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2894)));
        _2939 = _2937 * (_2913 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2896)));
        _2940 = _2937 * (_2913 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2898)));
        _2941 = _2930 * 0.999000012874603271484375;
        _2951 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2951)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2941) < 0.5)
            {
                _3107 = true;
                break;
            }
        }
        uint _3048 = _939 + uint(_2910.w);
        if ((cbInstanceData._m0[_3048].w < 1.0) && ((cbInstanceData._m0[_3048].w + _2941) < 0.5))
        {
            _3107 = true;
            break;
        }
        if ((_2934 + 1.0) < _2932.x)
        {
            _3107 = true;
            break;
        }
        _3107 = false;
        break;
    }
    float _3312;
    if (_3107)
    {
        discard_state = true;
        _3312 = 0.0;
    }
    else
    {
        _3312 = cbInstanceData._m0[_2774].w;
    }
    SV_Target.x = _2938;
    SV_Target.y = _2939;
    SV_Target.z = _2940;
    SV_Target.w = _3312;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2774].w;
    discard_exit();
}


