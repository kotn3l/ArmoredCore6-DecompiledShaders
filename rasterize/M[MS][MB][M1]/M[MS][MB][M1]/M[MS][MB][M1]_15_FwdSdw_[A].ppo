#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1119;
float _3785;
float _3786;
float _3787;
float _3788;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3797 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3808 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3819 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _321 = _316.x * cbMtdParam._m0[9u].x;
    float _322 = _316.y * cbMtdParam._m0[9u].y;
    float _323 = _316.z * cbMtdParam._m0[9u].z;
    float _327 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _321;
    float _330 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _322;
    float _333 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _323;
    float _340 = ((_321 - _327) * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) + _327;
    float _341 = ((_322 - _330) * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) + _330;
    float _342 = ((_323 - _333) * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) + _333;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _390 = _386.z;
    float _394 = (_386.x * 2.0) + (-1.0);
    float _395 = (_386.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3830 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))));
    float _406 = _394 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_360.x * 2.0) + (-1.0)));
    float _407 = _395 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_360.y * 2.0) + (-1.0)));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _426 = _424.x;
    float _427 = 1.0 - _426;
    float _443 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_426 - _427) * cbMtdParam._m0[24u].z) + _427) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3841 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _451 = (_444 * (cbMtdParam._m0[17u].x - _340)) + _340;
    float _452 = (_444 * (cbMtdParam._m0[17u].y - _341)) + _341;
    float _453 = (_444 * (cbMtdParam._m0[17u].z - _342)) + _342;
    vec4 _466 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _468 = _466.x;
    float _470 = _468 - (_468 * _444);
    float _475 = (((_360.z - _390) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _390;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _495 = (_488.x * 2.0) + (-1.0);
    float _496 = (_488.y * 2.0) + (-1.0);
    float _497 = dot(vec2(_495, _496), vec2(_495, _496));
    float _3852 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _505 = (_444 * (_488.z - _475)) + _475;
    float _517 = (((_495 - _406) + (cbMtdParam._m0[21u].x * _406)) * _444) + _406;
    float _518 = (((_496 - _407) + (cbMtdParam._m0[21u].x * _407)) * _444) + _407;
    float _519 = (_444 * (sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) - _401)) + _401;
    float _521 = cbMtdParam._m0[22u].x + _386.w;
    float _524 = fma(_519, _226 * NORMAL.x, fma(_518, _233 * TANGENT.x, (_219 * _211) * _517));
    float _527 = fma(_519, _226 * NORMAL.y, fma(_518, _233 * TANGENT.y, (_219 * _212) * _517));
    float _530 = fma(_519, _226 * NORMAL.z, fma(_518, _233 * TANGENT.z, (_219 * _213) * _517));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3863 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _538 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3885 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3896 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3907 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3918 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _543 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _557 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _608 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _598);
    float _609 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _598);
    float _610 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _598);
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _608 * _614;
    float _616 = _609 * _614;
    float _617 = _610 * _614;
    vec4 _622 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _624 = _622.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _799 = sqrt(((_608 * _608) + (_609 * _609)) + (_610 * _610));
        float _805 = (cbMatDynParam._m0[5u].x * _799) + cbMatDynParam._m0[5u].y;
        float _3929 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _810 = (cbMatDynParam._m0[5u].z * _799) + cbMatDynParam._m0[5u].w;
        float _3940 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) - _806)) + _806) < ((_624 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _636 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _637 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _657 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _660 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _663 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    uint _676 = _260 + 9u;
    uint _677 = _676 + uint(cbMatDynParam._m0[0u].w);
    float _683 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_677].x;
    float _684 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_677].y;
    float _685 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_677].z;
    float _3951 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _689 = 1.0 - _543;
    float _690 = _686 * _689;
    float _691 = _687 * _689;
    float _692 = _688 * _689;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _543;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _543;
    float _699 = (_688 + (-0.039999999105930328369140625)) * _543;
    float _700 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    float _703 = _699 + 0.039999999105930328369140625;
    vec4 _712 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _636, cbSceneParam._m0[86u].y * _637));
    float _716 = ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * TEXCOORD_5.w) * _712.x;
    float _717 = dot(vec3(_535, _536, _537), vec3(_615, _616, _617));
    float _720 = _717 * 2.0;
    float _724 = (_720 * _535) - _615;
    float _725 = (_720 * _536) - _616;
    float _726 = (_720 * _537) - _617;
    float _730 = abs(dot(vec3(_615, _616, _617), vec3(_535, _536, _537)));
    float _3984 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _732 = sqrt(_538);
    float _745 = exp2((_732 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_732 * 3.0));
    float _751 = (1.0 - _745) * ((_732 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _752 = _745 * _732;
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _843 = fma(_788, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780));
        float _847 = fma(_788, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780));
        float _851 = fma(_788, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780));
        float _876 = _780 + _535;
        float _877 = _784 + _536;
        float _878 = _788 + _537;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _843;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _847;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _851;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_843 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_847 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_851 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_535, _536, _537), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _4032 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_535, _536, _537), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _4065 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_535, _536, _537), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _4098 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = fma(_788, cbModelParam._m0[30u].z, fma(_784, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _780));
        float _1165 = fma(_788, cbModelParam._m0[31u].z, fma(_784, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _780));
        float _1169 = fma(_788, cbModelParam._m0[32u].z, fma(_784, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _780));
        float _1192 = _780 + _535;
        float _1193 = _784 + _536;
        float _1194 = _788 + _537;
        float _1204 = fma(_1194, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192)) - _1161;
        float _1205 = fma(_1194, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192)) - _1165;
        float _1206 = fma(_1194, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192)) - _1169;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1161 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1165 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[35u].z) + ((((((_1169 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1260 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1227.x + (-0.5));
        float _1262 = _1260 * (_1227.y + (-0.5));
        float _1263 = _1260 * (_1227.z + (-0.5));
        float _1270 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1234.x + (-0.5));
        float _1272 = _1270 * (_1234.y + (-0.5));
        float _1273 = _1270 * (_1234.z + (-0.5));
        float _1280 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1241.x + (-0.5));
        float _1282 = _1280 * (_1241.y + (-0.5));
        float _1283 = _1280 * (_1241.z + (-0.5));
        float _1290 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1248.x + (-0.5));
        float _1292 = _1290 * (_1248.y + (-0.5));
        float _1293 = _1290 * (_1248.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_535, _536, _537), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4161 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1324 + 1.0))) + _1329) * _1294;
        float _1339 = _1262 * 0.5;
        float _1340 = _1272 * 0.5;
        float _1341 = _1282 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_535, _536, _537), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4194 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1366 + 1.0))) + _1371) * _1295;
        float _1381 = _1263 * 0.5;
        float _1382 = _1273 * 0.5;
        float _1383 = _1283 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_535, _536, _537), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4227 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1408 + 1.0))) + _1413) * _1296;
        _1430 = _1263;
        _1431 = _1262;
        _1432 = _1261;
        _1433 = _1273;
        _1434 = _1272;
        _1435 = _1271;
        _1436 = _1283;
        _1437 = _1282;
        _1438 = _1281;
        _1439 = _1296;
        _1440 = _1295;
        _1441 = _1294;
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1119;
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = _1119;
        _1439 = _1119;
        _1440 = _1119;
        _1441 = _1119;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1131)) + _1131;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1132)) + _1132;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1133)) + _1133;
    float _1477 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1454));
    float _1498 = _724 * 0.5;
    float _1499 = _725 * 0.5;
    float _1500 = _726 * 0.5;
    float _1501 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1504 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1507 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1541;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1514 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1518 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1522 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1529 = dot(vec4(cbModelParam._m0[39u]), vec4(_1498, _1499, _1500, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1552;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1543 = dot(vec4(cbModelParam._m0[40u]), vec4(_1498, _1499, _1500, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1556 = (_1552 * cbModelParam._m0[1u].x) + (_1541 * (1.0 - cbModelParam._m0[1u].x));
    float _1566 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _538);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1566 : min(cbModelParam._m0[25u].z, _1566));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1615 = fma(_788, cbModelParam._m0[13u].z, fma(_784, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _780)) + cbModelParam._m0[13u].w;
        float _1619 = fma(_788, cbModelParam._m0[14u].z, fma(_784, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _780)) + cbModelParam._m0[14u].w;
        float _1623 = fma(_788, cbModelParam._m0[15u].z, fma(_784, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _780)) + cbModelParam._m0[15u].w;
        float _1626 = fma(_726, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724));
        float _1629 = fma(_726, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724));
        float _1632 = fma(_726, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724));
        float _1660;
        if (_1626 > 0.0)
        {
            _1660 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1660 = frontier_phi_17_15_ladder;
        }
        float _1833;
        if (_1629 > 0.0)
        {
            _1833 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1833 = frontier_phi_26_22_ladder;
        }
        float _2129;
        if (_1632 > 0.0)
        {
            _2129 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2129 = frontier_phi_38_33_ladder;
        }
        float _2131 = isnan(_1833) ? _1660 : (isnan(_1660) ? _1833 : min(_1660, _1833));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1626) + _1615;
        float _2137 = (_2132 * _1629) + _1619;
        float _2138 = (_2132 * _1632) + _1623;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2139;
        float _2143 = _2139 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 > _2143) || ((_2137 < _2141) || ((_2136 < _2141) || (_2136 > _2143))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2283 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2138, cbModelParam._m0[9u].z, fma(_2137, cbModelParam._m0[9u].y, _2136 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2138, cbModelParam._m0[10u].z, fma(_2137, cbModelParam._m0[10u].y, _2136 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2138, cbModelParam._m0[11u].z, fma(_2137, cbModelParam._m0[11u].y, _2136 * cbModelParam._m0[11u].x))), _1567);
            frontier_phi_16_38_ladder = _2283.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2283.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2283.x * cbModelParam._m0[1u].y;
        }
        _1648 = frontier_phi_16_38_ladder_2;
        _1650 = frontier_phi_16_38_ladder_1;
        _1652 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_724, _725, _726), _1567);
        _1648 = _1636.x * cbModelParam._m0[1u].y;
        _1650 = _1636.y * cbModelParam._m0[1u].y;
        _1652 = _1636.z * cbModelParam._m0[1u].y;
    }
    float _1656 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _538);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1656 : min(cbModelParam._m0[25u].w, _1656));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_788, cbModelParam._m0[21u].z, fma(_784, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _780)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_788, cbModelParam._m0[22u].z, fma(_784, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _780)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_788, cbModelParam._m0[23u].z, fma(_784, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _780)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_726, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724));
        float _1726 = fma(_726, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724));
        float _1729 = fma(_726, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724));
        float _1838;
        if (_1723 > 0.0)
        {
            _1838 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1838 = frontier_phi_28_24_ladder;
        }
        float _2156;
        if (_1726 > 0.0)
        {
            _2156 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2156 = frontier_phi_40_35_ladder;
        }
        float _2494;
        if (_1729 > 0.0)
        {
            _2494 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2494 = frontier_phi_50_47_ladder;
        }
        float _2496 = isnan(_2156) ? _1838 : (isnan(_1838) ? _2156 : min(_1838, _2156));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1723) + _1712;
        float _2502 = (_2497 * _1726) + _1716;
        float _2503 = (_2497 * _1729) + _1720;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1657);
            frontier_phi_25_50_ladder = _2625.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2625.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2625.x * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_25_50_ladder_2;
        _1750 = frontier_phi_25_50_ladder_1;
        _1752 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_724, _725, _726), _1657);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1765 = (((_751 * _700) + _752) * _716) * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1767 = (((_751 * _702) + _752) * _716) * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1769 = (((_751 * _703) + _752) * _716) * ((cbModelParam._m0[1u].w * (_1752 - _1652)) + _1652);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1825 = _1812 / _1824;
    float _1826 = _1816 / _1824;
    float _1827 = _1820 / _1824;
    float _1974;
    float _1975;
    float _1976;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1854 = ((uint(_1827 > cbSceneParam._m0[59u].y) + uint(_1827 > cbSceneParam._m0[59u].x)) + uint(_1827 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1855 = _1854 + 43u;
        uint _1863 = _1854 + 44u;
        uint _1871 = _1854 + 45u;
        uint _1879 = _1854 + 46u;
        float _1890 = fma(_1824, cbSceneParam._m0[_1855].w, fma(_1820, cbSceneParam._m0[_1855].z, fma(_1816, cbSceneParam._m0[_1855].y, _1812 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1824, cbSceneParam._m0[_1863].w, fma(_1820, cbSceneParam._m0[_1863].z, fma(_1816, cbSceneParam._m0[_1863].y, _1812 * cbSceneParam._m0[_1863].x)));
        float _1902 = fma(_1824, cbSceneParam._m0[_1879].w, fma(_1820, cbSceneParam._m0[_1879].z, fma(_1816, cbSceneParam._m0[_1879].y, _1812 * cbSceneParam._m0[_1879].x)));
        float _1907 = cbSceneParam._m0[33u].z * _1902;
        float _1909 = cbSceneParam._m0[33u].w * _1902;
        float _1912 = fma(_1824, cbSceneParam._m0[_1871].w, fma(_1820, cbSceneParam._m0[_1871].z, fma(_1816, cbSceneParam._m0[_1871].y, _1812 * cbSceneParam._m0[_1871].x))) / _1902;
        float _1960 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
        float _4353 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1967 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1907 + _1890) / _1902, (_1909 + _1894) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1909 + _1890) / _1902, (_1894 - _1907) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1907) / _1902, (_1894 - _1909) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1909) / _1902, (_1907 + _1894) / _1902), _1912), 0.0)).x), vec4(0.25)));
        _1974 = 1.0 - (_1967 * cbSceneParam._m0[34u].x);
        _1975 = 1.0 - (_1967 * cbSceneParam._m0[34u].y);
        _1976 = 1.0 - (_1967 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1974 = 1.0;
        _1975 = 1.0;
        _1976 = 1.0;
    }
    float _2040;
    float _2042;
    float _2044;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2028 = fma(_1824, cbSceneParam._m0[63u].w, fma(_1820, cbSceneParam._m0[63u].z, fma(_1816, cbSceneParam._m0[63u].y, _1812 * cbSceneParam._m0[63u].x)));
        float _2029 = fma(_1824, cbSceneParam._m0[60u].w, fma(_1820, cbSceneParam._m0[60u].z, fma(_1816, cbSceneParam._m0[60u].y, _1812 * cbSceneParam._m0[60u].x))) / _2028;
        float _2030 = fma(_1824, cbSceneParam._m0[61u].w, fma(_1820, cbSceneParam._m0[61u].z, fma(_1816, cbSceneParam._m0[61u].y, _1812 * cbSceneParam._m0[61u].x))) / _2028;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2029 >= cbSceneParam._m0[64u].x) && (_2030 >= cbSceneParam._m0[64u].y)) && (_2029 <= cbSceneParam._m0[64u].z)) && (_2030 <= cbSceneParam._m0[64u].w))
        {
            float _2169 = fma(_1824, cbSceneParam._m0[62u].w, fma(_1820, cbSceneParam._m0[62u].z, fma(_1816, cbSceneParam._m0[62u].y, _1812 * cbSceneParam._m0[62u].x))) / _2028;
            float _2173 = isnan(cbSceneParam._m0[41u].w) ? _2169 : (isnan(_2169) ? cbSceneParam._m0[41u].w : max(_2169, cbSceneParam._m0[41u].w));
            float _2216 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
            float _4369 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
            float _2223 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2029, cbSceneParam._m0[33u].w + _2030), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2029, _2030 - cbSceneParam._m0[33u].z), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].z, _2030 - cbSceneParam._m0[33u].w), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2030), _2173), 0.0)).x), vec4(0.25)));
            float _2227 = 1.0 - (_2223 * cbSceneParam._m0[34u].x);
            float _2228 = 1.0 - (_2223 * cbSceneParam._m0[34u].y);
            float _2229 = 1.0 - (_2223 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2229) ? _1976 : (isnan(_1976) ? _2229 : min(_1976, _2229));
            frontier_phi_37_36_ladder_1 = isnan(_2228) ? _1975 : (isnan(_1975) ? _2228 : min(_1975, _2228));
            frontier_phi_37_36_ladder_2 = isnan(_2227) ? _1974 : (isnan(_1974) ? _2227 : min(_1974, _2227));
        }
        else
        {
            frontier_phi_37_36_ladder = _1976;
            frontier_phi_37_36_ladder_1 = _1975;
            frontier_phi_37_36_ladder_2 = _1974;
        }
        _2040 = frontier_phi_37_36_ladder_2;
        _2042 = frontier_phi_37_36_ladder_1;
        _2044 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2040 = _1974;
        _2042 = _1975;
        _2044 = _1976;
    }
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2059 = _716 + (-1.0);
    float _2064 = (cbLight._m0[_2052].x * _2059) + 1.0;
    float _2065 = (cbLight._m0[_2052].y * _2059) + 1.0;
    float _2066 = (cbLight._m0[_2052].z * _2059) + 1.0;
    float _2067 = (cbLight._m0[_2052].w * _2059) + 1.0;
    uint _2068 = _2051 + 5u;
    float _2074 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2078 = _2051 + 4u;
    float _2088 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2092 = _2051 | 1u;
    float _2103 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_535, _536, _537));
    float _2106 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_535, _536, _537));
    float _4405 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _4416 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2111 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2113 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2120 = ((cbLight._m0[_2068].x * _2074) * _2113) + (((cbLight._m0[_2078].x * _2040) * _2088) * _2111);
    float _2121 = ((_2074 * cbLight._m0[_2068].y) * _2113) + (((cbLight._m0[_2078].y * _2042) * _2088) * _2111);
    float _2122 = ((_2074 * cbLight._m0[_2068].z) * _2113) + (((cbLight._m0[_2078].z * _2044) * _2088) * _2111);
    uvec4 _2126 = floatBitsToUint(cbLight._m0[_2051 + 12u]);
    bool _2128 = _2126.x == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2128)
    {
        _2230 = _2120;
        _2232 = _2121;
        _2234 = _2122;
    }
    else
    {
        uint _2238 = _2051 + 6u;
        float _2254 = (dot(vec3(cbLight._m0[_2051 + 2u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4427 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2257 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2230 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2120;
        _2232 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2121;
        _2234 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2122;
    }
    bool _2237 = _2126.y == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2237)
    {
        _2292 = _2230;
        _2294 = _2232;
        _2296 = _2234;
    }
    else
    {
        uint _2465 = _2051 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2051 + 3u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4443 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2484 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2292 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2230;
        _2294 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2232;
        _2296 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2234;
    }
    uint _2299 = _2051 + 8u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _538) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2051].x + _615;
    float _2315 = cbLight._m0[_2051].y + _616;
    float _2316 = cbLight._m0[_2051].z + _617;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2051].xyz));
    float _4459 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _4470 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _2328 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2329 = dot(vec3(_535, _536, _537), vec3(_2321, _2322, _2323));
    float _4481 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2321, _2322, _2323));
    float _4492 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2313 * _2313;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
    float _2350 = 0.959999978542327880859375 - _697;
    float _2352 = 0.959999978542327880859375 - _698;
    float _2353 = 0.959999978542327880859375 - _699;
    float _2360 = 1.0 - _2313;
    float _2371 = (0.5 / (((_2328 * ((_2327 * _2360) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2360) + _2313) * _2327))) * _2327;
    float _4503 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    uint _2387 = _2051 + 9u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _538) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2092].x + _615;
    float _2401 = cbLight._m0[_2092].y + _616;
    float _2402 = cbLight._m0[_2092].z + _617;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2092].xyz));
    float _4514 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2414 = dot(vec3(_535, _536, _537), vec3(_2407, _2408, _2409));
    float _4525 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2407, _2408, _2409));
    float _4536 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2399 * _2399;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
    float _2440 = 1.0 - _2399;
    float _2450 = (0.5 / (((_2328 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2440) + _2399) * _2413))) * _2413;
    float _4547 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2462 = (((((_2433 * _2350) + _700) * cbLight._m0[_2387].x) * _2452) * _2074) + ((((cbLight._m0[_2299].x * _2040) * ((_2349 * _2350) + _700)) * _2373) * _2088);
    float _2463 = (((((_2433 * _2352) + _702) * cbLight._m0[_2387].y) * _2452) * _2074) + ((((cbLight._m0[_2299].y * _2042) * ((_2349 * _2352) + _702)) * _2373) * _2088);
    float _2464 = (((((_2433 * _2353) + _703) * cbLight._m0[_2387].z) * _2452) * _2074) + ((((cbLight._m0[_2299].z * _2044) * ((_2349 * _2353) + _703)) * _2373) * _2088);
    float _2520;
    float _2522;
    float _2524;
    if (_2128)
    {
        _2520 = _2462;
        _2522 = _2463;
        _2524 = _2464;
    }
    else
    {
        uint _2526 = _2051 + 2u;
        uint _2530 = _2051 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _538) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _615;
        float _2547 = cbLight._m0[_2526].y + _616;
        float _2548 = cbLight._m0[_2526].z + _617;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2526].xyz));
        float _4558 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2560 = dot(vec3(_535, _536, _537), vec3(_2553, _2554, _2555));
        float _4569 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4580 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
        float _2586 = 1.0 - _2545;
        float _2596 = (0.5 / (((_2328 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2586) + _2545) * _2559))) * _2559;
        float _4591 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2520 = (((((_2579 * _2350) + _700) * cbLight._m0[_2530].x) * _2598) * _2599) + _2462;
        _2522 = (((((_2579 * _2352) + _702) * cbLight._m0[_2530].y) * _2598) * _2599) + _2463;
        _2524 = (((((_2579 * _2353) + _703) * cbLight._m0[_2530].z) * _2598) * _2599) + _2464;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2237)
    {
        _2630 = _2520;
        _2632 = _2522;
        _2634 = _2524;
    }
    else
    {
        uint _2641 = _2051 + 3u;
        uint _2645 = _2051 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _538) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _615;
        float _2662 = cbLight._m0[_2641].y + _616;
        float _2663 = cbLight._m0[_2641].z + _617;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2641].xyz));
        float _4607 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2675 = dot(vec3(_535, _536, _537), vec3(_2668, _2669, _2670));
        float _4618 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4629 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2328 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2701) + _2660) * _2674))) * _2674;
        float _4640 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2630 = (((((_2694 * _2350) + _700) * cbLight._m0[_2645].x) * _2713) * _2714) + _2520;
        _2632 = (((((_2694 * _2352) + _702) * cbLight._m0[_2645].y) * _2713) * _2714) + _2522;
        _2634 = (((((_2694 * _2353) + _703) * cbLight._m0[_2645].z) * _2713) * _2714) + _2524;
    }
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_2049.y == 0u)
    {
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.x;
        uint _2747 = uint((float(_2735.y) * floor(float(uint(cbSceneParam._m0[85u].y * _637) / _2736))) + floor(float(uint(cbSceneParam._m0[85u].x * _636) / _2736)));
        float _2757 = (log2(_1827 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2758 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        uint _2761 = uint(isnan(14.0) ? _2758 : (isnan(_2758) ? 14.0 : min(_2758, 14.0)));
        uvec4 _2766 = texelFetch(g_lightClusterGridBuffer, int(((_2761 << 2u) + (_2747 << 6u)) >> 2u));
        uint _2767 = _2766.x;
        uint _2768 = _2735.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2768 >> 4u) & 15u)) + 4294967295u) & _2767) == 0u) || ((_2768 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            uint _3006 = 0u;
            uint _3015;
            bool _3016;
            for (;;)
            {
                _3015 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                _3016 = _3015 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3016)
                {
                    frontier_phi_71_pred = _3005;
                    frontier_phi_71_pred_1 = _3004;
                    frontier_phi_71_pred_2 = _3003;
                    frontier_phi_71_pred_3 = _3002;
                    frontier_phi_71_pred_4 = _3001;
                    frontier_phi_71_pred_5 = _3000;
                }
                else
                {
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    uint _3151;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3015;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    for (;;)
                    {
                        uint _3155 = uint(findLSB(_3151)) + (_3006 << 5u);
                        uint _3152 = (_3151 + 4294967295u) & _3151;
                        uint _3157 = _3155 * 48u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3177 = (_3155 * 48u) + 4u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3196 = (_3155 * 48u) + 8u;
                        vec3 _3207 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x));
                        float _3211 = _3171.x - _1825;
                        float _3212 = _3171.y - _1826;
                        float _3213 = _3171.z - _1827;
                        float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                        float _3217 = inversesqrt(_3214);
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3221 = dot(vec3(_657, _660, _663), vec3(_3218, _3219, _3220));
                        float _3226 = 1.0 - (_3214 * _3171.w);
                        float _4666 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3228 = sqrt(_3214) * _3190.w;
                        float _3231 = 1.39999997615814208984375 / (_3228 + 1.39999997615814208984375);
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3221) + _3232;
                        float _3238 = _3228 * _3228;
                        float _3242 = ((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3227) / ((_3238 * 0.699999988079071044921875) + 1.0);
                        float _3246 = (-0.0) - _1825;
                        float _3247 = (-0.0) - _1826;
                        float _3248 = (-0.0) - _1827;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3262 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _732;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3253 + _3218;
                        float _3274 = _3254 + _3219;
                        float _3275 = _3255 + _3220;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_657, _660, _663), vec3(_3253, _3254, _3255));
                        float _4682 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3287 = dot(vec3(_657, _660, _663), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4693 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3231 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3221) + _3296;
                        float _4704 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4715 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3294 * _3294) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125))) * _3227;
                        _3075 = (_3242 * _3190.x) + _3148;
                        _3076 = (_3242 * _3190.y) + _3149;
                        _3077 = (_3242 * _3190.z) + _3150;
                        _3072 = (_3322 * _3207.x) + _3145;
                        _3073 = (_3322 * _3207.y) + _3146;
                        _3074 = (_3322 * _3207.z) + _3147;
                        if (_3152 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3152;
                        }
                    }
                    frontier_phi_71_pred = _3077;
                    frontier_phi_71_pred_1 = _3076;
                    frontier_phi_71_pred_2 = _3075;
                    frontier_phi_71_pred_3 = _3074;
                    frontier_phi_71_pred_4 = _3073;
                    frontier_phi_71_pred_5 = _3072;
                }
                _2858 = frontier_phi_71_pred;
                _2856 = frontier_phi_71_pred_1;
                _2854 = frontier_phi_71_pred_2;
                _2852 = frontier_phi_71_pred_3;
                _2850 = frontier_phi_71_pred_4;
                _2848 = frontier_phi_71_pred_5;
                uint _3007 = _3006 + 1u;
                if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3000 = _2848;
                    _3001 = _2850;
                    _3002 = _2852;
                    _3003 = _2854;
                    _3004 = _2856;
                    _3005 = _2858;
                    _3006 = _3007;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((4294967295u << _2864) & _2767) == 0u)
        {
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
        }
        else
        {
            float _2993 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
            float _2994 = _2993 * _1825;
            float _2995 = _2993 * _1826;
            float _2996 = _2993 * _1827;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _3128 = _2847;
                float _3129 = _2849;
                float _3130 = _2851;
                float _3131 = _2853;
                float _3132 = _2855;
                float _3133 = _2857;
                uint _3134 = _2864;
                uint _3143;
                bool _3144;
                for (;;)
                {
                    _3143 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                    _3144 = _3143 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3144)
                    {
                        frontier_phi_82_pred = _3133;
                        frontier_phi_82_pred_1 = _3132;
                        frontier_phi_82_pred_2 = _3131;
                        frontier_phi_82_pred_3 = _3130;
                        frontier_phi_82_pred_4 = _3129;
                        frontier_phi_82_pred_5 = _3128;
                    }
                    else
                    {
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3349 = _3128;
                        float _3350 = _3129;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        uint _3355 = _3143;
                        uint _3356;
                        vec4 _3381;
                        float _3382;
                        vec4 _3397;
                        vec3 _3409;
                        vec4 _3424;
                        vec4 _3439;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3366 = ((_3134 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3355));
                            _3356 = (_3355 + 4294967295u) & _3355;
                            uint _3368 = _3366 * 40u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3382 = _3381.w;
                            uint _3384 = (_3366 * 40u) + 4u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3366 * 40u) + 8u;
                            _3409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x));
                            uint _3411 = (_3366 * 40u) + 16u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3366 * 40u) + 20u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3366 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3366 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_1827, _3473.z, fma(_1826, _3473.y, _3473.x * _1825)) + _3473.w;
                            _3486 = !((fma(_1827, _3454.z, fma(_1826, _3454.y, _3454.x * _1825)) + _3454.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3381.x - _1825;
                                float _3514 = _3381.y - _1826;
                                float _3515 = _3381.z - _1827;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3382 * _3382));
                                float _4726 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3531 = sqrt(_3516) * _3397.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_657, _660, _663))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_1827, _3424.z, fma(_1826, _3424.y, _3424.x * _1825)) + _3424.w) / _3485;
                                float _3545 = (fma(_1827, _3439.z, fma(_1826, _3439.y, _3439.x * _1825)) + _3439.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4742 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _732;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _2994;
                                float _3575 = _3521 - _2995;
                                float _3576 = _3522 - _2996;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_657, _660, _663), vec3((-0.0) - _2994, (-0.0) - _2995, (-0.0) - _2996));
                                float _4753 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3588 = dot(vec3(_657, _660, _663), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4764 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_657, _660, _663), vec3(_3520, _3521, _3522))) + _3597;
                                float _4775 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4786 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3551 * _3397.z;
                                frontier_phi_88_pred_1 = _3551 * _3397.y;
                                frontier_phi_88_pred_2 = _3551 * _3397.x;
                                frontier_phi_88_pred_3 = _3625 * _3409.z;
                                frontier_phi_88_pred_4 = _3625 * _3409.y;
                                frontier_phi_88_pred_5 = _3625 * _3409.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_88_pred;
                            _3633 = frontier_phi_88_pred_1;
                            _3632 = frontier_phi_88_pred_2;
                            _3631 = frontier_phi_88_pred_3;
                            _3630 = frontier_phi_88_pred_4;
                            _3629 = frontier_phi_88_pred_5;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            if (_3356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3356;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3341;
                        frontier_phi_82_pred_1 = _3340;
                        frontier_phi_82_pred_2 = _3339;
                        frontier_phi_82_pred_3 = _3338;
                        frontier_phi_82_pred_4 = _3337;
                        frontier_phi_82_pred_5 = _3336;
                    }
                    _2979 = frontier_phi_82_pred;
                    _2977 = frontier_phi_82_pred_1;
                    _2975 = frontier_phi_82_pred_2;
                    _2973 = frontier_phi_82_pred_3;
                    _2971 = frontier_phi_82_pred_4;
                    _2969 = frontier_phi_82_pred_5;
                    uint _3135 = _3134 + 1u;
                    if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3128 = _2969;
                        _3129 = _2971;
                        _3130 = _2973;
                        _3131 = _2975;
                        _3132 = _2977;
                        _3133 = _2979;
                        _3134 = _3135;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2975;
                frontier_phi_63_64_ladder_1 = _2979;
                frontier_phi_63_64_ladder_2 = _2977;
                frontier_phi_63_64_ladder_3 = _2973;
                frontier_phi_63_64_ladder_4 = _2971;
                frontier_phi_63_64_ladder_5 = _2969;
            }
            else
            {
                frontier_phi_63_64_ladder = _2853;
                frontier_phi_63_64_ladder_1 = _2857;
                frontier_phi_63_64_ladder_2 = _2855;
                frontier_phi_63_64_ladder_3 = _2851;
                frontier_phi_63_64_ladder_4 = _2849;
                frontier_phi_63_64_ladder_5 = _2847;
            }
            _2968 = frontier_phi_63_64_ladder_5;
            _2970 = frontier_phi_63_64_ladder_4;
            _2972 = frontier_phi_63_64_ladder_3;
            _2974 = frontier_phi_63_64_ladder;
            _2976 = frontier_phi_63_64_ladder_2;
            _2978 = frontier_phi_63_64_ladder_1;
        }
        float _2983 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
        _2780 = (_2983 * _2974) + _2292;
        _2782 = (_2983 * _2976) + _2294;
        _2784 = (_2983 * _2978) + _2296;
        _2786 = ((_2968 * _700) * _2983) + _2630;
        _2788 = ((_2970 * _702) * _2983) + _2632;
        _2790 = ((_2972 * _703) * _2983) + _2634;
    }
    else
    {
        _2780 = _2292;
        _2782 = _2294;
        _2784 = _2296;
        _2786 = _2630;
        _2788 = _2632;
        _2790 = _2634;
    }
    float _4802 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4813 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4824 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2807 = ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2780 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _716))) + ((_2786 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1556)) * cbPerFrame._m0[3u].x);
    float _2808 = ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2782 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _716))) + ((_2788 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1556)) * cbPerFrame._m0[3u].x);
    float _2809 = ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2784 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _716))) + ((_2790 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1556)) * cbPerFrame._m0[3u].x);
    uint _2810 = _260 + 6u;
    float _2818 = _636 / cbSceneParam._m0[86u].x;
    float _2819 = _637 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _557 : (isnan(_557) ? cbSceneParam._m0[77u].w : min(_557, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_557 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_557) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _557 : min(cbSceneParam._m0[80u].w, _557));
        float _2873 = _2872 / _557;
        float _2884 = _2873 * _608;
        float _2885 = _609 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2888 = _2873 * _610;
        float _2890 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2891 = _2890 + cbSceneParam._m0[79u].w;
        float _2892 = cbSceneParam._m0[79u].w - _2885;
        float _2898 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2888 * _2888));
        float _2901 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2898;
        float _2906 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2908 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3085;
        if (abs((_2886 - _2890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3085 = ((((_2891 > 0.0) ? exp2(_2906 * _2891) : (2.0 - exp2(_2908 * _2891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2901;
        }
        else
        {
            float _3029 = 1.0 / cbSceneParam._m0[80u].x;
            float _3030 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : max(_2891, _2892));
            float _3031 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : min(_2891, _2892));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            _3085 = ((abs(_2898 / _2886) * cbSceneParam._m0[80u].y) * ((((_3040 - _3041) * 2.0) - ((exp2(_2906 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0)))) - exp2(_2906 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))))) * _3029)) - ((exp2(_2908 * _3040) - exp2(_2908 * _3041)) * _3029))) + (_2901 * cbSceneParam._m0[80u].z);
        }
        vec4 _3087 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3096 = exp2((_3085 * (-1.44269502162933349609375)) * (1.0 - _3087.w));
        float _3097 = log2(_3096);
        float _3113 = log2(_2838);
        _2910 = (exp2(_3113 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].x)) * _3087.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2912 = (exp2(_3113 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].y)) * _3087.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2914 = (exp2(_3113 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].z)) * _3087.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2916 = _3096 * _2838;
    }
    else
    {
        _2910 = _2835;
        _2912 = _2836;
        _2914 = _2837;
        _2916 = _2838;
    }
    bool _3123;
    vec4 _2926;
    vec4 _2948;
    float _2950;
    float _2954;
    float _2955;
    float _2956;
    float _2957;
    bool _2967;
    for (;;)
    {
        _2926 = cbMatDynParam._m0[0u];
        float _2928 = roundEven(_2926.y);
        bool _2929 = _2928 == 3.0;
        float _2930 = log2(_2916);
        float _2937 = exp2(_2930 * cbSceneParam._m0[78u].x) * _2807;
        float _2938 = exp2(_2930 * cbSceneParam._m0[78u].y) * _2808;
        float _2939 = exp2(_2930 * cbSceneParam._m0[78u].z) * _2809;
        float _2946 = _624 + (-0.5);
        _2948 = cbMtdParam._m0[1u];
        _2950 = _2948.y * _2946;
        float _2953 = (_2928 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2954 = _2953 * (_2929 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2910)));
        _2955 = _2953 * (_2929 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2912)));
        _2956 = _2953 * (_2929 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2914)));
        _2957 = _2946 * 0.999000012874603271484375;
        _2967 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2967)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _2957) < 0.5)
            {
                _3123 = true;
                break;
            }
        }
        uint _3064 = _676 + uint(_2926.w);
        if ((cbInstanceData._m0[_3064].w < 1.0) && ((cbInstanceData._m0[_3064].w + _2957) < 0.5))
        {
            _3123 = true;
            break;
        }
        if ((_2950 + 1.0) < _2948.x)
        {
            _3123 = true;
            break;
        }
        _3123 = false;
        break;
    }
    float _3327;
    if (_3123)
    {
        discard_state = true;
        _3327 = 0.0;
    }
    else
    {
        _3327 = cbInstanceData._m0[_2810].w;
    }
    SV_Target.x = _2954;
    SV_Target.y = _2955;
    SV_Target.z = _2956;
    SV_Target.w = _3327;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
    discard_exit();
}


