#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1260;
float _3664;
float _3665;
float _3666;
float _3667;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.x * cbMtdParam._m0[9u].x;
    float _295 = _288.y * cbMtdParam._m0[9u].y;
    float _296 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _365 = _361.z;
    float _369 = (_361.x * 2.0) + (-1.0);
    float _370 = (_361.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3676 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    float _382 = _369 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_335.x * 2.0) + (-1.0)));
    float _383 = _370 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_335.y * 2.0) + (-1.0)));
    float _386 = fma(_377, _237, fma(_383, _244, _382 * _230));
    float _389 = fma(_377, _238, fma(_383, _245, _382 * _231));
    float _392 = fma(_377, _239, fma(_383, _246, _382 * _232));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _434 = _432.x;
    float _435 = 1.0 - _434;
    float _442 = ((_434 - _435) * cbMtdParam._m0[24u].z) + _435;
    float _444 = (cbMtdParam._m0[19u].x + dot(vec4(_396 * _386, _396 * _389, _396 * _392, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_442 * cbMtdParam._m0[21u].z);
    float _3687 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _447 = (-0.0) - cbMtdParam._m0[24u].x;
    float _449 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
    float _457 = _445 - ((_445 * TEXCOORD_8.x) * _450);
    float _458 = _445 - ((_445 * TEXCOORD_8.y) * _450);
    float _459 = _445 - ((_445 * TEXCOORD_8.z) * _450);
    float _466 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _470 = ((isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : min(_466, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _478 = (_470 - (((_442 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _470))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3718 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _483 = ((_457 * ((_315.x * cbMtdParam._m0[18u].x) - _294)) * _479) + _294;
    float _484 = ((_458 * ((_315.y * cbMtdParam._m0[18u].y) - _295)) * _479) + _295;
    float _485 = ((_459 * ((_315.z * cbMtdParam._m0[18u].z) - _296)) * _479) + _296;
    vec4 _497 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _499 = _497.x;
    float _500 = 1.0 - _499;
    float _529 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_499 - _500) * cbMtdParam._m0[24u].w) + _500) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3729 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _538 = ((((cbMtdParam._m0[10u].x - _483) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _530) + _483;
    float _539 = ((((cbMtdParam._m0[10u].y - _484) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _530) + _484;
    float _540 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _485)) * _530) + _485;
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _555 = _553.x;
    float _558 = _555 - ((_555 * _457) * _479);
    float _560 = _558 - (_558 * _530);
    float _565 = (((_335.z - _365) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _365;
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _586 = (_579.x * 2.0) + (-1.0);
    float _587 = (_579.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3740 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _597 = (((_579.z - _565) * _457) * _479) + _565;
    float _600 = ((cbMtdParam._m0[23u].y - _597) * _530) + _597;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _625 = (_619.x * 2.0) + (-1.0);
    float _626 = (_619.y * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _3751 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _647 = (((cbMtdParam._m0[21u].x * _382) + ((_586 - _382) * _457)) * _479) + _382;
    float _648 = (((cbMtdParam._m0[21u].x * _383) + ((_587 - _383) * _458)) * _479) + _383;
    float _649 = (((sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) - _377) * _459) * _479) + _377;
    float _660 = (((_625 - _647) + (_647 * cbMtdParam._m0[22u].z)) * _530) + _647;
    float _661 = (((_626 - _648) + (_648 * cbMtdParam._m0[22u].z)) * _530) + _648;
    float _662 = ((sqrt(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) - _649) * _530) + _649;
    float _664 = cbMtdParam._m0[22u].x + _361.w;
    float _667 = fma(_662, _237, fma(_661, _244, _660 * _230));
    float _670 = fma(_662, _238, fma(_661, _245, _660 * _231));
    float _673 = fma(_662, _239, fma(_661, _246, _660 * _232));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3762 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _681 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3784 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3795 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3806 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3817 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _686 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    vec4 _764 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _766 = _764.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _941 = sqrt(((_750 * _750) + (_751 * _751)) + (_752 * _752));
        float _947 = (cbMatDynParam._m0[5u].x * _941) + cbMatDynParam._m0[5u].y;
        float _3828 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _952 = (cbMatDynParam._m0[5u].z * _941) + cbMatDynParam._m0[5u].w;
        float _3839 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) - _948)) + _948) < ((_766 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _799 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _802 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _805 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _818 = _249 + 9u;
    uint _819 = _818 + uint(cbMatDynParam._m0[0u].w);
    float _825 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_819].x;
    float _826 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_819].y;
    float _827 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_819].z;
    float _3850 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _831 = 1.0 - _686;
    float _832 = _828 * _831;
    float _833 = _829 * _831;
    float _834 = _830 * _831;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _686;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _686;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _686;
    float _842 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    float _845 = _841 + 0.039999999105930328369140625;
    vec4 _854 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _858 = ((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * TEXCOORD_5.w) * _854.x;
    float _859 = dot(vec3(_678, _679, _680), vec3(_757, _758, _759));
    float _862 = _859 * 2.0;
    float _866 = (_862 * _678) - _757;
    float _867 = (_862 * _679) - _758;
    float _868 = (_862 * _680) - _759;
    float _872 = abs(dot(vec3(_757, _758, _759), vec3(_678, _679, _680)));
    float _3883 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _874 = sqrt(_681);
    float _887 = exp2((_874 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_874 * 3.0));
    float _893 = (1.0 - _887) * ((_874 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _894 = _887 * _874;
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_930, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922));
        float _988 = fma(_930, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922));
        float _992 = fma(_930, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922));
        float _1017 = _922 + _678;
        float _1018 = _926 + _679;
        float _1019 = _930 + _680;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_678, _679, _680), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3931 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_678, _679, _680), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3964 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_678, _679, _680), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3997 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_930, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922));
        float _1306 = fma(_930, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922));
        float _1310 = fma(_930, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922));
        float _1333 = _922 + _678;
        float _1334 = _926 + _679;
        float _1335 = _930 + _680;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_678, _679, _680), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4060 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_678, _679, _680), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4093 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_678, _679, _680), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4126 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = _1260;
        _1582 = _1260;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1272)) + _1272;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1273)) + _1273;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1274)) + _1274;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _866 * 0.5;
    float _1640 = _867 * 0.5;
    float _1641 = _868 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_930, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_930, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_930, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_868, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866));
        float _1769 = fma(_868, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866));
        float _1772 = fma(_868, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1800 = frontier_phi_17_15_ladder;
        }
        float _2024;
        if (_1769 > 0.0)
        {
            _2024 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2024 = frontier_phi_26_22_ladder;
        }
        float _2281;
        if (_1772 > 0.0)
        {
            _2281 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2281 = frontier_phi_38_33_ladder;
        }
        float _2283 = isnan(_2024) ? _1800 : (isnan(_1800) ? _2024 : min(_1800, _2024));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1766) + _1755;
        float _2289 = (_2284 * _1769) + _1759;
        float _2290 = (_2284 * _1772) + _1763;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2291;
        float _2295 = _2291 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 > _2295) || ((_2289 < _2293) || ((_2288 < _2293) || (_2288 > _2295))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2290, cbModelParam._m0[9u].z, fma(_2289, cbModelParam._m0[9u].y, _2288 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2290, cbModelParam._m0[10u].z, fma(_2289, cbModelParam._m0[10u].y, _2288 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2290, cbModelParam._m0[11u].z, fma(_2289, cbModelParam._m0[11u].y, _2288 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_16_38_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_16_38_ladder_2;
        _1790 = frontier_phi_16_38_ladder_1;
        _1792 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_866, _867, _868), _1708);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_930, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_930, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_930, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_868, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866));
        float _1864 = fma(_868, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866));
        float _1867 = fma(_868, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866));
        float _2029;
        if (_1861 > 0.0)
        {
            _2029 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2029 = frontier_phi_28_24_ladder;
        }
        float _2308;
        if (_1864 > 0.0)
        {
            _2308 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2308 = frontier_phi_40_35_ladder;
        }
        float _2521;
        if (_1867 > 0.0)
        {
            _2521 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2521 = frontier_phi_49_46_ladder;
        }
        float _2523 = isnan(_2308) ? _2029 : (isnan(_2029) ? _2308 : min(_2029, _2308));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _1861) + _1850;
        float _2529 = (_2524 * _1864) + _1854;
        float _2530 = (_2524 * _1867) + _1858;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2531;
        float _2534 = _2531 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2530 > _2534) || ((_2530 < _2532) || ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 < _2532) || (_2528 > _2534))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2530, cbModelParam._m0[17u].z, fma(_2529, cbModelParam._m0[17u].y, _2528 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2530, cbModelParam._m0[18u].z, fma(_2529, cbModelParam._m0[18u].y, _2528 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2530, cbModelParam._m0[19u].z, fma(_2529, cbModelParam._m0[19u].y, _2528 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_25_49_ladder = _2729.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2729.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2729.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_25_49_ladder_2;
        _1888 = frontier_phi_25_49_ladder_1;
        _1890 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_866, _867, _868), _1797);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1903 = (((_893 * _842) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1905 = (((_893 * _844) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1907 = (((_893 * _845) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    vec4 _1924 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_778, _779));
    float _1926 = _1924.w;
    float _1938 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1926);
    float _1939 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1926);
    float _1940 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1926);
    uvec4 _1944 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1946 = _1944.x * 14u;
    uint _1947 = _1946 + 13u;
    float _1954 = _858 + (-1.0);
    float _1959 = (cbLight._m0[_1947].x * _1954) + 1.0;
    float _1960 = (cbLight._m0[_1947].y * _1954) + 1.0;
    float _1961 = (cbLight._m0[_1947].z * _1954) + 1.0;
    float _1962 = (cbLight._m0[_1947].w * _1954) + 1.0;
    uint _1963 = _1946 + 5u;
    float _1969 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1973 = _1946 + 4u;
    float _1983 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1987 = _1946 | 1u;
    float _1998 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_678, _679, _680));
    float _2001 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_678, _679, _680));
    float _4262 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _4273 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2006 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2008 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _2015 = ((cbLight._m0[_1963].x * _1969) * _2008) + (((cbLight._m0[_1973].x * _1938) * _1983) * _2006);
    float _2016 = ((_1969 * cbLight._m0[_1963].y) * _2008) + (((cbLight._m0[_1973].y * _1939) * _1983) * _2006);
    float _2017 = ((_1969 * cbLight._m0[_1963].z) * _2008) + (((cbLight._m0[_1973].z * _1940) * _1983) * _2006);
    uvec4 _2021 = floatBitsToUint(cbLight._m0[_1946 + 12u]);
    bool _2023 = _2021.x == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_2023)
    {
        _2034 = _2015;
        _2036 = _2016;
        _2038 = _2017;
    }
    else
    {
        uint _2042 = _1946 + 6u;
        float _2058 = (dot(vec3(cbLight._m0[_1946 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2059 = _2058 * _2058;
        float _4284 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2061 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2034 = (((cbLight._m0[_2042].x * 0.3183098733425140380859375) * _2060) * _2061) + _2015;
        _2036 = (((cbLight._m0[_2042].y * 0.3183098733425140380859375) * _2060) * _2061) + _2016;
        _2038 = (((cbLight._m0[_2042].z * 0.3183098733425140380859375) * _2060) * _2061) + _2017;
    }
    bool _2041 = _2021.y == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_2041)
    {
        _2079 = _2034;
        _2081 = _2036;
        _2083 = _2038;
    }
    else
    {
        uint _2252 = _1946 + 7u;
        float _2268 = (dot(vec3(cbLight._m0[_1946 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4300 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2271 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2079 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2034;
        _2081 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2036;
        _2083 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2038;
    }
    uint _2086 = _1946 + 8u;
    float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _681) * 0.949999988079071044921875);
    float _2100 = _2099 * _2099;
    float _2101 = cbLight._m0[_1946].x + _757;
    float _2102 = cbLight._m0[_1946].y + _758;
    float _2103 = cbLight._m0[_1946].z + _759;
    float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
    float _2108 = _2107 * _2101;
    float _2109 = _2107 * _2102;
    float _2110 = _2107 * _2103;
    float _2111 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1946].xyz));
    float _4316 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2115 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2116 = dot(vec3(_678, _679, _680), vec3(_2108, _2109, _2110));
    float _4338 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2120 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2108, _2109, _2110));
    float _4349 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = _2100 * _2100;
    float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
    float _2136 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2137 = 0.959999978542327880859375 - _839;
    float _2139 = 0.959999978542327880859375 - _840;
    float _2140 = 0.959999978542327880859375 - _841;
    float _2147 = 1.0 - _2100;
    float _2158 = (0.5 / (((_2115 * ((_2114 * _2147) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2147) + _2100) * _2114))) * _2114;
    float _4360 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
    uint _2174 = _1946 + 9u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _681) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_1987].x + _757;
    float _2188 = cbLight._m0[_1987].y + _758;
    float _2189 = cbLight._m0[_1987].z + _759;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1987].xyz));
    float _4371 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2201 = dot(vec3(_678, _679, _680), vec3(_2194, _2195, _2196));
    float _4382 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2194, _2195, _2196));
    float _4393 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2186 * _2186;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
    float _2227 = 1.0 - _2186;
    float _2237 = (0.5 / (((_2115 * ((_2200 * _2227) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2227) + _2186) * _2200))) * _2200;
    float _4404 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2239 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    float _2249 = (((((_2220 * _2137) + _842) * cbLight._m0[_2174].x) * _2239) * _1969) + ((((cbLight._m0[_2086].x * _1938) * ((_2136 * _2137) + _842)) * _2160) * _1983);
    float _2250 = (((((_2220 * _2139) + _844) * cbLight._m0[_2174].y) * _2239) * _1969) + ((((cbLight._m0[_2086].y * _1939) * ((_2136 * _2139) + _844)) * _2160) * _1983);
    float _2251 = (((((_2220 * _2140) + _845) * cbLight._m0[_2174].z) * _2239) * _1969) + ((((cbLight._m0[_2086].z * _1940) * ((_2136 * _2140) + _845)) * _2160) * _1983);
    float _2313;
    float _2315;
    float _2317;
    if (_2023)
    {
        _2313 = _2249;
        _2315 = _2250;
        _2317 = _2251;
    }
    else
    {
        uint _2319 = _1946 + 2u;
        uint _2323 = _1946 + 10u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _681) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _757;
        float _2340 = cbLight._m0[_2319].y + _758;
        float _2341 = cbLight._m0[_2319].z + _759;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2319].xyz));
        float _4415 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2353 = dot(vec3(_678, _679, _680), vec3(_2346, _2347, _2348));
        float _4426 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4437 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_2115 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2379) + _2338) * _2352))) * _2352;
        float _4448 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2313 = (((((_2372 * _2137) + _842) * cbLight._m0[_2323].x) * _2391) * _2392) + _2249;
        _2315 = (((((_2372 * _2139) + _844) * cbLight._m0[_2323].y) * _2391) * _2392) + _2250;
        _2317 = (((((_2372 * _2140) + _845) * cbLight._m0[_2323].z) * _2391) * _2392) + _2251;
    }
    float _2427;
    float _2429;
    float _2431;
    if (_2041)
    {
        _2427 = _2313;
        _2429 = _2315;
        _2431 = _2317;
    }
    else
    {
        uint _2438 = _1946 + 3u;
        uint _2442 = _1946 + 11u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _681) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _757;
        float _2459 = cbLight._m0[_2438].y + _758;
        float _2460 = cbLight._m0[_2438].z + _759;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2438].xyz));
        float _4464 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2472 = dot(vec3(_678, _679, _680), vec3(_2465, _2466, _2467));
        float _4475 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
        float _2498 = 1.0 - _2457;
        float _2508 = (0.5 / (((_2115 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2115 * _2498) + _2457) * _2471))) * _2471;
        float _4497 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2427 = (((((_2491 * _2137) + _842) * cbLight._m0[_2442].x) * _2510) * _2511) + _2313;
        _2429 = (((((_2491 * _2139) + _844) * cbLight._m0[_2442].y) * _2510) * _2511) + _2315;
        _2431 = (((((_2491 * _2140) + _845) * cbLight._m0[_2442].z) * _2510) * _2511) + _2317;
    }
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_1944.y == 0u)
    {
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2586;
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2586;
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2586;
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.x;
        uint _2613 = uint((float(_2601.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2602))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2602)));
        float _2623 = (log2(_2589 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2624 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        uint _2627 = uint(isnan(14.0) ? _2624 : (isnan(_2624) ? 14.0 : min(_2624, 14.0)));
        uvec4 _2632 = texelFetch(g_lightClusterGridBuffer, int(((_2627 << 2u) + (_2613 << 6u)) >> 2u));
        uint _2633 = _2632.x;
        uint _2634 = _2601.z;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((((1u << ((_2634 >> 4u) & 15u)) + 4294967295u) & _2633) == 0u) || ((_2634 & 240u) == 0u))
        {
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
        }
        else
        {
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            uint _2892 = 0u;
            uint _2901;
            bool _2902;
            for (;;)
            {
                _2901 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                _2902 = _2901 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2902)
                {
                    frontier_phi_66_pred = _2886;
                    frontier_phi_66_pred_1 = _2891;
                    frontier_phi_66_pred_2 = _2890;
                    frontier_phi_66_pred_3 = _2889;
                    frontier_phi_66_pred_4 = _2888;
                    frontier_phi_66_pred_5 = _2887;
                }
                else
                {
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    uint _3037;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2901;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    for (;;)
                    {
                        uint _3041 = uint(findLSB(_3037)) + (_2892 << 5u);
                        uint _3038 = (_3037 + 4294967295u) & _3037;
                        uint _3043 = _3041 * 48u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3063 = (_3041 * 48u) + 4u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3082 = (_3041 * 48u) + 8u;
                        vec3 _3093 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x));
                        float _3097 = _3057.x - _2587;
                        float _3098 = _3057.y - _2588;
                        float _3099 = _3057.z - _2589;
                        float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                        float _3103 = inversesqrt(_3100);
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3107 = dot(vec3(_799, _802, _805), vec3(_3104, _3105, _3106));
                        float _3112 = 1.0 - (_3100 * _3057.w);
                        float _4523 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3114 = sqrt(_3100) * _3076.w;
                        float _3117 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3107) + _3118;
                        float _3124 = _3114 * _3114;
                        float _3128 = ((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3113) / ((_3124 * 0.699999988079071044921875) + 1.0);
                        float _3132 = (-0.0) - _2587;
                        float _3133 = (-0.0) - _2588;
                        float _3134 = (-0.0) - _2589;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3149 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                        float _3150 = 1.0 - _874;
                        float _3157 = sqrt(1.0 - ((1.0 - (_3150 * _3150)) * (1.0 - (_3149 * _3149))));
                        float _3158 = _3157 * _3157;
                        float _3159 = _3158 * _3158;
                        float _3160 = _3139 + _3104;
                        float _3161 = _3140 + _3105;
                        float _3162 = _3141 + _3106;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3170 = dot(vec3(_799, _802, _805), vec3(_3139, _3140, _3141));
                        float _4539 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3173 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3174 = dot(vec3(_799, _802, _805), vec3(_3166 * _3160, _3166 * _3161, _3166 * _3162));
                        float _4550 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3177 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3181 = ((_3177 * _3177) * (_3159 + (-1.0))) + 1.0;
                        float _3182 = _3117 * _3158;
                        float _3183 = _3182 * _3182;
                        float _3186 = ((1.0 - _3183) * _3107) + _3183;
                        float _4561 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3187 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3188 = 1.0 - _3158;
                        float _3198 = (0.5 / (((_3187 * ((_3173 * _3188) + _3158)) + 9.9999999392252902907785028219223e-09) + (((_3187 * _3188) + _3158) * _3173))) * _3187;
                        float _4572 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3209 = (((_3159 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3181 * _3181) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125))) * _3113;
                        _2961 = (_3128 * _3076.x) + _3034;
                        _2962 = (_3128 * _3076.y) + _3035;
                        _2963 = (_3128 * _3076.z) + _3036;
                        _2958 = (_3209 * _3093.x) + _3031;
                        _2959 = (_3209 * _3093.y) + _3032;
                        _2960 = (_3209 * _3093.z) + _3033;
                        if (_3038 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _3038;
                        }
                    }
                    frontier_phi_66_pred = _2958;
                    frontier_phi_66_pred_1 = _2963;
                    frontier_phi_66_pred_2 = _2962;
                    frontier_phi_66_pred_3 = _2961;
                    frontier_phi_66_pred_4 = _2960;
                    frontier_phi_66_pred_5 = _2959;
                }
                _2735 = frontier_phi_66_pred;
                _2745 = frontier_phi_66_pred_1;
                _2743 = frontier_phi_66_pred_2;
                _2741 = frontier_phi_66_pred_3;
                _2739 = frontier_phi_66_pred_4;
                _2737 = frontier_phi_66_pred_5;
                uint _2893 = _2892 + 1u;
                if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2886 = _2735;
                    _2887 = _2737;
                    _2888 = _2739;
                    _2889 = _2741;
                    _2890 = _2743;
                    _2891 = _2745;
                    _2892 = _2893;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
        }
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.z;
        uint _2751 = (_2749 >> 8u) & 15u;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((4294967295u << _2751) & _2633) == 0u)
        {
            _2854 = _2734;
            _2856 = _2736;
            _2858 = _2738;
            _2860 = _2740;
            _2862 = _2742;
            _2864 = _2744;
        }
        else
        {
            float _2879 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
            float _2880 = _2879 * _2587;
            float _2881 = _2879 * _2588;
            float _2882 = _2879 * _2589;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2751 < ((_2749 >> 12u) & 15u))
            {
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _3014 = _2734;
                float _3015 = _2736;
                float _3016 = _2738;
                float _3017 = _2740;
                float _3018 = _2742;
                float _3019 = _2744;
                uint _3020 = _2751;
                uint _3029;
                bool _3030;
                for (;;)
                {
                    _3029 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_3020 << 2u)) >> 2u)).x;
                    _3030 = _3029 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3030)
                    {
                        frontier_phi_77_pred = _3019;
                        frontier_phi_77_pred_1 = _3018;
                        frontier_phi_77_pred_2 = _3017;
                        frontier_phi_77_pred_3 = _3016;
                        frontier_phi_77_pred_4 = _3015;
                        frontier_phi_77_pred_5 = _3014;
                    }
                    else
                    {
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        uint _3242 = _3029;
                        uint _3243;
                        vec4 _3268;
                        float _3269;
                        vec4 _3284;
                        vec3 _3296;
                        vec4 _3312;
                        vec4 _3327;
                        float _3373;
                        bool _3374;
                        for (;;)
                        {
                            uint _3253 = ((_3020 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3242));
                            _3243 = (_3242 + 4294967295u) & _3242;
                            uint _3255 = _3253 * 40u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            _3269 = _3268.w;
                            uint _3271 = (_3253 * 40u) + 4u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3253 * 40u) + 8u;
                            _3296 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x));
                            uint _3299 = (_3253 * 40u) + 16u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3253 * 40u) + 20u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3253 * 40u) + 24u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3348 = (_3253 * 40u) + 28u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3373 = fma(_2589, _3361.z, fma(_2588, _3361.y, _3361.x * _2587)) + _3361.w;
                            _3374 = !((fma(_2589, _3342.z, fma(_2588, _3342.y, _3342.x * _2587)) + _3342.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3374)
                            {
                                float _3401 = _3268.x - _2587;
                                float _3402 = _3268.y - _2588;
                                float _3403 = _3268.z - _2589;
                                float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                                float _3407 = inversesqrt(_3404);
                                float _3408 = _3407 * _3401;
                                float _3409 = _3407 * _3402;
                                float _3410 = _3407 * _3403;
                                float _3414 = 1.0 - (_3404 / (_3269 * _3269));
                                float _4583 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3419 = sqrt(_3404) * _3284.w;
                                float _3421 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                                float _3422 = _3421 * _3421;
                                float _3425 = ((1.0 - _3422) * dot(vec3(_3408, _3409, _3410), vec3(_799, _802, _805))) + _3422;
                                float _3428 = _3419 * _3419;
                                float _3432 = (fma(_2589, _3312.z, fma(_2588, _3312.y, _3312.x * _2587)) + _3312.w) / _3373;
                                float _3433 = (fma(_2589, _3327.z, fma(_2588, _3327.y, _3327.x * _2587)) + _3327.w) / _3373;
                                float _3437 = 1.0 - dot(vec2(_3432, _3433), vec2(_3432, _3433));
                                float _4599 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3439 = _3438 * (((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3415) / ((_3428 * 0.699999988079071044921875) + 1.0));
                                float _3451 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                                float _3452 = 1.0 - _874;
                                float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                                float _3460 = _3459 * _3459;
                                float _3461 = _3460 * _3460;
                                float _3462 = _3408 - _2880;
                                float _3463 = _3409 - _2881;
                                float _3464 = _3410 - _2882;
                                float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                                float _3472 = dot(vec3(_799, _802, _805), vec3((-0.0) - _2880, (-0.0) - _2881, (-0.0) - _2882));
                                float _4610 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3475 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3476 = dot(vec3(_799, _802, _805), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                                float _4621 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                                float _3484 = _3421 * _3460;
                                float _3485 = _3484 * _3484;
                                float _3491 = ((1.0 - _3485) * dot(vec3(_799, _802, _805), vec3(_3408, _3409, _3410))) + _3485;
                                float _4632 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3493 = 1.0 - _3460;
                                float _3503 = (0.5 / (((_3492 * ((_3475 * _3493) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3460) * _3475))) * _3492;
                                float _4643 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3513 = (_3438 * _3415) * (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3483 * _3483) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3439 * _3284.y;
                                frontier_phi_83_pred_1 = _3439 * _3284.x;
                                frontier_phi_83_pred_2 = _3513 * _3296.z;
                                frontier_phi_83_pred_3 = _3513 * _3296.y;
                                frontier_phi_83_pred_4 = _3513 * _3296.x;
                                frontier_phi_83_pred_5 = _3439 * _3284.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_83_pred;
                            _3520 = frontier_phi_83_pred_1;
                            _3519 = frontier_phi_83_pred_2;
                            _3518 = frontier_phi_83_pred_3;
                            _3517 = frontier_phi_83_pred_4;
                            _3522 = frontier_phi_83_pred_5;
                            _3226 = _3520 + _3239;
                            _3227 = _3521 + _3240;
                            _3228 = _3522 + _3241;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            if (_3243 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3243;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3228;
                        frontier_phi_77_pred_1 = _3227;
                        frontier_phi_77_pred_2 = _3226;
                        frontier_phi_77_pred_3 = _3225;
                        frontier_phi_77_pred_4 = _3224;
                        frontier_phi_77_pred_5 = _3223;
                    }
                    _2865 = frontier_phi_77_pred;
                    _2863 = frontier_phi_77_pred_1;
                    _2861 = frontier_phi_77_pred_2;
                    _2859 = frontier_phi_77_pred_3;
                    _2857 = frontier_phi_77_pred_4;
                    _2855 = frontier_phi_77_pred_5;
                    uint _3021 = _3020 + 1u;
                    if (_3021 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3014 = _2855;
                        _3015 = _2857;
                        _3016 = _2859;
                        _3017 = _2861;
                        _3018 = _2863;
                        _3019 = _2865;
                        _3020 = _3021;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2859;
                frontier_phi_58_59_ladder_1 = _2865;
                frontier_phi_58_59_ladder_2 = _2863;
                frontier_phi_58_59_ladder_3 = _2861;
                frontier_phi_58_59_ladder_4 = _2857;
                frontier_phi_58_59_ladder_5 = _2855;
            }
            else
            {
                frontier_phi_58_59_ladder = _2738;
                frontier_phi_58_59_ladder_1 = _2744;
                frontier_phi_58_59_ladder_2 = _2742;
                frontier_phi_58_59_ladder_3 = _2740;
                frontier_phi_58_59_ladder_4 = _2736;
                frontier_phi_58_59_ladder_5 = _2734;
            }
            _2854 = frontier_phi_58_59_ladder_5;
            _2856 = frontier_phi_58_59_ladder_4;
            _2858 = frontier_phi_58_59_ladder;
            _2860 = frontier_phi_58_59_ladder_3;
            _2862 = frontier_phi_58_59_ladder_2;
            _2864 = frontier_phi_58_59_ladder_1;
        }
        float _2869 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
        _2646 = (_2869 * _2860) + _2079;
        _2648 = (_2869 * _2862) + _2081;
        _2650 = (_2869 * _2864) + _2083;
        _2652 = ((_2854 * _842) * _2869) + _2427;
        _2654 = ((_2856 * _844) * _2869) + _2429;
        _2656 = ((_2858 * _845) * _2869) + _2431;
    }
    else
    {
        _2646 = _2079;
        _2648 = _2081;
        _2650 = _2083;
        _2652 = _2427;
        _2654 = _2429;
        _2656 = _2431;
    }
    float _4659 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4670 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4681 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2673 = ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2646 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _858))) + ((_2652 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    float _2674 = ((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2648 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _858))) + ((_2654 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2650 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _858))) + ((_2656 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    uint _2676 = _249 + 6u;
    float _2684 = _778 / cbSceneParam._m0[86u].x;
    float _2685 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2699 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2701 = _2699.x;
    float _2702 = _2699.y;
    float _2703 = _2699.z;
    float _2704 = _2699.w;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _2759 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _2760 = _2759 / _700;
        float _2771 = _2760 * _750;
        float _2772 = _751 * _2760;
        float _2773 = (-0.0) - _2772;
        float _2774 = _2760 * _752;
        float _2776 = (cbSceneParam._m0[77u].w * _2773) / _2759;
        float _2777 = _2776 + cbSceneParam._m0[79u].w;
        float _2778 = cbSceneParam._m0[79u].w - _2772;
        float _2784 = sqrt(((_2771 * _2771) + (_2772 * _2772)) + (_2774 * _2774));
        float _2787 = (1.0 - (cbSceneParam._m0[77u].w / _2759)) * _2784;
        float _2792 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2794 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2971;
        if (abs((_2773 - _2776) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2971 = ((((_2777 > 0.0) ? exp2(_2792 * _2777) : (2.0 - exp2(_2794 * _2777))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2787;
        }
        else
        {
            float _2915 = 1.0 / cbSceneParam._m0[80u].x;
            float _2916 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : max(_2777, _2778));
            float _2917 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : min(_2777, _2778));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            _2971 = ((abs(_2784 / _2773) * cbSceneParam._m0[80u].y) * ((((_2926 - _2927) * 2.0) - ((exp2(_2792 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0)))) - exp2(_2792 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))))) * _2915)) - ((exp2(_2794 * _2926) - exp2(_2794 * _2927)) * _2915))) + (_2787 * cbSceneParam._m0[80u].z);
        }
        vec4 _2973 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, 1.0), 0.0);
        float _2982 = exp2((_2971 * (-1.44269502162933349609375)) * (1.0 - _2973.w));
        float _2983 = log2(_2982);
        float _2999 = log2(_2704);
        _2796 = (exp2(_2999 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].x)) * _2973.x) / cbSceneParam._m0[78u].x)) + _2701;
        _2798 = (exp2(_2999 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].y)) * _2973.y) / cbSceneParam._m0[78u].y)) + _2702;
        _2800 = (exp2(_2999 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].z)) * _2973.z) / cbSceneParam._m0[78u].z)) + _2703;
        _2802 = _2982 * _2704;
    }
    else
    {
        _2796 = _2701;
        _2798 = _2702;
        _2800 = _2703;
        _2802 = _2704;
    }
    bool _3009;
    vec4 _2812;
    vec4 _2834;
    float _2836;
    float _2840;
    float _2841;
    float _2842;
    float _2843;
    bool _2853;
    for (;;)
    {
        _2812 = cbMatDynParam._m0[0u];
        float _2814 = roundEven(_2812.y);
        bool _2815 = _2814 == 3.0;
        float _2816 = log2(_2802);
        float _2823 = exp2(_2816 * cbSceneParam._m0[78u].x) * _2673;
        float _2824 = exp2(_2816 * cbSceneParam._m0[78u].y) * _2674;
        float _2825 = exp2(_2816 * cbSceneParam._m0[78u].z) * _2675;
        float _2832 = _766 + (-0.5);
        _2834 = cbMtdParam._m0[1u];
        _2836 = _2834.y * _2832;
        float _2839 = (_2814 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2840 = _2839 * (_2815 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2796)));
        _2841 = _2839 * (_2815 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2798)));
        _2842 = _2839 * (_2815 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2800)));
        _2843 = _2832 * 0.999000012874603271484375;
        _2853 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2853)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2843) < 0.5)
            {
                _3009 = true;
                break;
            }
        }
        uint _2950 = _818 + uint(_2812.w);
        if ((cbInstanceData._m0[_2950].w < 1.0) && ((cbInstanceData._m0[_2950].w + _2843) < 0.5))
        {
            _3009 = true;
            break;
        }
        if ((_2836 + 1.0) < _2834.x)
        {
            _3009 = true;
            break;
        }
        _3009 = false;
        break;
    }
    float _3214;
    if (_3009)
    {
        discard_state = true;
        _3214 = 0.0;
    }
    else
    {
        _3214 = cbInstanceData._m0[_2676].w;
    }
    SV_Target.x = _2840;
    SV_Target.y = _2841;
    SV_Target.z = _2842;
    SV_Target.w = _3214;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2676].w;
    discard_exit();
}


