#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1536;
float _3940;
float _3941;
float _3942;
float _3943;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3952 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3963 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3974 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[24u].y) + _427) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3985 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _452 = (_445 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _453 = (_445 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _454 = (_445 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[24u].y) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3996 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    float _531 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _525;
    float _534 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _526;
    float _537 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _527;
    float _544 = ((_525 - _531) * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) + _531;
    float _545 = ((_526 - _534) * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) + _534;
    float _546 = ((_527 - _537) * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) + _537;
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _605 = _603.x;
    float _606 = _603.y;
    float _607 = _603.z;
    float _614 = ((_586.x - _605) * _445) + _605;
    float _615 = ((_586.y - _606) * _445) + _606;
    float _616 = ((_586.z - _607) * _445) + _607;
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _641 = ((_628.z - _616) * _518) + _616;
    float _644 = ((((_628.x - _614) * _518) + _614) * 2.0) + (-1.0);
    float _645 = ((((_628.y - _615) * _518) + _615) * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _4007 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _651 = sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))));
    vec4 _664 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _684 = _682.x;
    float _685 = 1.0 - _684;
    float _691 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _694 = ((isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : min(_691, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _703 = (_694 - ((((((_684 - _685) * cbMtdParam._m0[24u].z) + _685) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _694))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4028 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _711 = (_704 * (cbMtdParam._m0[17u].x - _544)) + _544;
    float _712 = (_704 * (cbMtdParam._m0[17u].y - _545)) + _545;
    float _713 = (_704 * (cbMtdParam._m0[17u].z - _546)) + _546;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _727 = _725.x;
    float _728 = 1.0 - _727;
    float _753 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_727 - _728) * cbMtdParam._m0[24u].w) + _728) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4039 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _762 = ((((cbMtdParam._m0[10u].x - _711) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _754) + _711;
    float _763 = ((((cbMtdParam._m0[10u].y - _712) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _754) + _712;
    float _764 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _713)) * _754) + _713;
    vec4 _790 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _792 = _790.x;
    float _810 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _792) * _445) + _792;
    float _827 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _810) * _518) + _810;
    float _831 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _827) * cbMtdParam._m0[19u].z) + _827;
    float _833 = _831 - (_831 * _704);
    float _835 = _833 - (_833 * _754);
    float _840 = (((_563.z - _641) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _641;
    vec4 _854 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _861 = (_854.x * 2.0) + (-1.0);
    float _862 = (_854.y * 2.0) + (-1.0);
    float _863 = dot(vec2(_861, _862), vec2(_861, _862));
    float _4050 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _871 = (_704 * (_854.z - _840)) + _840;
    float _874 = ((cbMtdParam._m0[23u].y - _871) * _754) + _871;
    vec4 _895 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _901 = (_895.x * 2.0) + (-1.0);
    float _902 = (_895.y * 2.0) + (-1.0);
    float _903 = dot(vec2(_901, _902), vec2(_901, _902));
    float _4061 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _913 = _644 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_563.x * 2.0) + (-1.0)));
    float _914 = _645 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_563.y * 2.0) + (-1.0)));
    float _926 = (((_861 - _913) + (cbMtdParam._m0[21u].x * _913)) * _704) + _913;
    float _927 = (((_862 - _914) + (cbMtdParam._m0[21u].x * _914)) * _704) + _914;
    float _928 = (_704 * (sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) - _651)) + _651;
    float _939 = (((_901 - _926) + (_926 * cbMtdParam._m0[22u].z)) * _754) + _926;
    float _940 = (((_902 - _927) + (_927 * cbMtdParam._m0[22u].z)) * _754) + _927;
    float _941 = ((sqrt(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) - _928) * _754) + _928;
    float _943 = cbMtdParam._m0[22u].x + _664.w;
    float _946 = fma(_941, _261 * NORMAL.x, fma(_940, _268 * TANGENT.x, (_254 * _246) * _939));
    float _949 = fma(_941, _261 * NORMAL.y, fma(_940, _268 * TANGENT.y, (_254 * _247) * _939));
    float _952 = fma(_941, _261 * NORMAL.z, fma(_940, _268 * TANGENT.z, (_254 * _248) * _939));
    float _956 = inversesqrt(dot(vec3(_946, _949, _952), vec3(_946, _949, _952)));
    float _957 = _956 * _946;
    float _958 = _956 * _949;
    float _959 = _956 * _952;
    float _4072 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _960 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4094 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4105 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4116 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4127 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _965 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _979 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1029 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1019);
    float _1030 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1019);
    float _1031 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1019);
    float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
    float _1036 = _1029 * _1035;
    float _1037 = _1030 * _1035;
    float _1038 = _1031 * _1035;
    vec4 _1043 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1045 = _1043.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1217 = sqrt(((_1029 * _1029) + (_1030 * _1030)) + (_1031 * _1031));
        float _1223 = (cbMatDynParam._m0[5u].x * _1217) + cbMatDynParam._m0[5u].y;
        float _4138 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1228 = (cbMatDynParam._m0[5u].z * _1217) + cbMatDynParam._m0[5u].w;
        float _4149 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) - _1224)) + _1224) < ((_1045 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1056 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1057 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1075 = fma(_959, cbSceneParam._m0[5u].z, fma(_958, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _957));
    float _1078 = fma(_959, cbSceneParam._m0[6u].z, fma(_958, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _957));
    float _1081 = fma(_959, cbSceneParam._m0[7u].z, fma(_958, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _957));
    uint _1094 = _293 + 9u;
    uint _1095 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4160 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _1107 = 1.0 - _965;
    float _1108 = _1104 * _1107;
    float _1109 = _1105 * _1107;
    float _1110 = _1106 * _1107;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _965;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _965;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _965;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1056, cbSceneParam._m0[86u].y * _1057));
    float _1134 = ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * TEXCOORD_5.w) * _1130.x;
    float _1135 = dot(vec3(_957, _958, _959), vec3(_1036, _1037, _1038));
    float _1138 = _1135 * 2.0;
    float _1142 = (_1138 * _957) - _1036;
    float _1143 = (_1138 * _958) - _1037;
    float _1144 = (_1138 * _959) - _1038;
    float _1148 = abs(dot(vec3(_1036, _1037, _1038), vec3(_957, _958, _959)));
    float _4193 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1150 = sqrt(_960);
    float _1163 = exp2((_1150 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1150 * 3.0));
    float _1169 = (1.0 - _1163) * ((_1150 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1170 = _1163 * _1150;
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1535;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1260 = fma(_1206, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1198));
        float _1264 = fma(_1206, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1198));
        float _1268 = fma(_1206, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1198));
        float _1293 = _1198 + _957;
        float _1294 = _1202 + _958;
        float _1295 = _1206 + _959;
        float _1305 = fma(_1295, cbModelParam._m0[26u].z, fma(_1294, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1293)) - _1260;
        float _1306 = fma(_1295, cbModelParam._m0[27u].z, fma(_1294, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1293)) - _1264;
        float _1307 = fma(_1295, cbModelParam._m0[28u].z, fma(_1294, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1293)) - _1268;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1260 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1264 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[34u].z) + ((((((_1268 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1363 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1329.x + (-0.5));
        float _1365 = _1363 * (_1329.y + (-0.5));
        float _1366 = _1363 * (_1329.z + (-0.5));
        float _1373 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1336.x + (-0.5));
        float _1375 = _1373 * (_1336.y + (-0.5));
        float _1376 = _1373 * (_1336.z + (-0.5));
        float _1383 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1343.x + (-0.5));
        float _1385 = _1383 * (_1343.y + (-0.5));
        float _1386 = _1383 * (_1343.z + (-0.5));
        float _1393 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1350.x + (-0.5));
        float _1395 = _1393 * (_1350.y + (-0.5));
        float _1396 = _1393 * (_1350.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1417 = (dot(vec3(_957, _958, _959), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1427 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4241 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1429 + 1.0))) + _1434) * _1397;
        float _1444 = _1365 * 0.5;
        float _1445 = _1375 * 0.5;
        float _1446 = _1385 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_957, _958, _959), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4274 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1471 + 1.0))) + _1476) * _1398;
        float _1486 = _1366 * 0.5;
        float _1487 = _1376 * 0.5;
        float _1488 = _1386 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_957, _958, _959), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4307 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1513 + 1.0))) + _1518) * _1399;
        _1535 = _1366;
        _1537 = _1365;
        _1538 = _1364;
        _1539 = _1376;
        _1540 = _1375;
        _1541 = _1374;
        _1542 = _1386;
        _1543 = _1385;
        _1544 = _1384;
        _1545 = _1399;
        _1546 = _1398;
        _1547 = _1397;
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1550 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1536;
        _1537 = _1536;
        _1538 = _1536;
        _1539 = _1536;
        _1540 = _1536;
        _1541 = _1536;
        _1542 = _1536;
        _1543 = _1536;
        _1544 = _1536;
        _1545 = _1536;
        _1546 = _1536;
        _1547 = _1536;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1577 = fma(_1206, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198));
        float _1581 = fma(_1206, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198));
        float _1585 = fma(_1206, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198));
        float _1608 = _1198 + _957;
        float _1609 = _1202 + _958;
        float _1610 = _1206 + _959;
        float _1620 = fma(_1610, cbModelParam._m0[30u].z, fma(_1609, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1608)) - _1577;
        float _1621 = fma(_1610, cbModelParam._m0[31u].z, fma(_1609, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1608)) - _1581;
        float _1622 = fma(_1610, cbModelParam._m0[32u].z, fma(_1609, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1608)) - _1585;
        float _1626 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
        float _1639 = ((_1626 * _1620) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1577 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1640 = ((_1626 * _1621) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1581 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1641 = ((_1626 * _1622) / cbModelParam._m0[35u].z) + ((((((_1585 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        float _1676 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1643.x + (-0.5));
        float _1678 = _1676 * (_1643.y + (-0.5));
        float _1679 = _1676 * (_1643.z + (-0.5));
        float _1686 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1650.x + (-0.5));
        float _1688 = _1686 * (_1650.y + (-0.5));
        float _1689 = _1686 * (_1650.z + (-0.5));
        float _1696 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1657.x + (-0.5));
        float _1698 = _1696 * (_1657.y + (-0.5));
        float _1699 = _1696 * (_1657.z + (-0.5));
        float _1706 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1664.x + (-0.5));
        float _1708 = _1706 * (_1664.y + (-0.5));
        float _1709 = _1706 * (_1664.z + (-0.5));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = _1677 * 0.5;
        float _1714 = _1687 * 0.5;
        float _1715 = _1697 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_957, _958, _959), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4370 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1740 + 1.0))) + _1745) * _1710;
        float _1755 = _1678 * 0.5;
        float _1756 = _1688 * 0.5;
        float _1757 = _1698 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_957, _958, _959), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1711 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4403 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1782 + 1.0))) + _1787) * _1711;
        float _1797 = _1679 * 0.5;
        float _1798 = _1689 * 0.5;
        float _1799 = _1699 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_957, _958, _959), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4436 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1824 + 1.0))) + _1829) * _1712;
        _1846 = _1679;
        _1847 = _1678;
        _1848 = _1677;
        _1849 = _1689;
        _1850 = _1688;
        _1851 = _1687;
        _1852 = _1699;
        _1853 = _1698;
        _1854 = _1697;
        _1855 = _1712;
        _1856 = _1711;
        _1857 = _1710;
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1859 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
    }
    else
    {
        _1846 = _1536;
        _1847 = _1536;
        _1848 = _1536;
        _1849 = _1536;
        _1850 = _1536;
        _1851 = _1536;
        _1852 = _1536;
        _1853 = _1536;
        _1854 = _1536;
        _1855 = _1536;
        _1856 = _1536;
        _1857 = _1536;
        _1858 = 0.0;
        _1859 = 0.0;
        _1860 = 0.0;
    }
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1548)) + _1548;
    float _1871 = (cbModelParam._m0[1u].x * (_1859 - _1549)) + _1549;
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1550)) + _1550;
    float _1893 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1870));
    float _1914 = _1142 * 0.5;
    float _1915 = _1143 * 0.5;
    float _1916 = _1144 * 0.5;
    float _1917 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1920 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1847, _1850, _1853, _1856));
    float _1923 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1957;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1930 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1535, _1539, _1542, _1545));
        float _1934 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1537, _1540, _1543, _1546));
        float _1938 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1538, _1541, _1544, _1547));
        float _1945 = dot(vec4(cbModelParam._m0[39u]), vec4(_1914, _1915, _1916, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1968;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1959 = dot(vec4(cbModelParam._m0[40u]), vec4(_1914, _1915, _1916, 1.0));
        _1968 = dot(vec3(isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1959) ? 0.0 : (isnan(0.0) ? _1959 : max(0.0, _1959))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1968 = 1.0;
    }
    float _1972 = (_1968 * cbModelParam._m0[1u].x) + (_1957 * (1.0 - cbModelParam._m0[1u].x));
    float _1982 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _960);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1982 : min(cbModelParam._m0[25u].z, _1982));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2031 = fma(_1206, cbModelParam._m0[13u].z, fma(_1202, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1198)) + cbModelParam._m0[13u].w;
        float _2035 = fma(_1206, cbModelParam._m0[14u].z, fma(_1202, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1198)) + cbModelParam._m0[14u].w;
        float _2039 = fma(_1206, cbModelParam._m0[15u].z, fma(_1202, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1198)) + cbModelParam._m0[15u].w;
        float _2042 = fma(_1144, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142));
        float _2045 = fma(_1144, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142));
        float _2048 = fma(_1144, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142));
        float _2076;
        if (_2042 > 0.0)
        {
            _2076 = abs((1.0 - _2031) / _2042);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2031 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2076 = frontier_phi_17_15_ladder;
        }
        float _2300;
        if (_2045 > 0.0)
        {
            _2300 = abs((1.0 - _2035) / _2045);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2035 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2300 = frontier_phi_26_22_ladder;
        }
        float _2557;
        if (_2048 > 0.0)
        {
            _2557 = abs((1.0 - _2039) / _2048);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2039 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2557 = frontier_phi_38_33_ladder;
        }
        float _2559 = isnan(_2300) ? _2076 : (isnan(_2076) ? _2300 : min(_2076, _2300));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _2042) + _2031;
        float _2565 = (_2560 * _2045) + _2035;
        float _2566 = (_2560 * _2048) + _2039;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2567;
        float _2571 = _2567 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 > _2571) || ((_2565 < _2569) || ((_2564 < _2569) || (_2564 > _2571))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2566, cbModelParam._m0[9u].z, fma(_2565, cbModelParam._m0[9u].y, _2564 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2566, cbModelParam._m0[10u].z, fma(_2565, cbModelParam._m0[10u].y, _2564 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2566, cbModelParam._m0[11u].z, fma(_2565, cbModelParam._m0[11u].y, _2564 * cbModelParam._m0[11u].x))), _1983);
            frontier_phi_16_38_ladder = _2694.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2694.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2694.x * cbModelParam._m0[1u].y;
        }
        _2064 = frontier_phi_16_38_ladder_2;
        _2066 = frontier_phi_16_38_ladder_1;
        _2068 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1142, _1143, _1144), _1983);
        _2064 = _2052.x * cbModelParam._m0[1u].y;
        _2066 = _2052.y * cbModelParam._m0[1u].y;
        _2068 = _2052.z * cbModelParam._m0[1u].y;
    }
    float _2072 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _960);
    float _2073 = isnan(_2072) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2072 : min(cbModelParam._m0[25u].w, _2072));
    float _2163;
    float _2165;
    float _2167;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2127 = fma(_1206, cbModelParam._m0[21u].z, fma(_1202, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1198)) + cbModelParam._m0[21u].w;
        float _2131 = fma(_1206, cbModelParam._m0[22u].z, fma(_1202, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1198)) + cbModelParam._m0[22u].w;
        float _2135 = fma(_1206, cbModelParam._m0[23u].z, fma(_1202, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1198)) + cbModelParam._m0[23u].w;
        float _2138 = fma(_1144, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142));
        float _2141 = fma(_1144, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142));
        float _2144 = fma(_1144, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142));
        float _2305;
        if (_2138 > 0.0)
        {
            _2305 = abs((1.0 - _2127) / _2138);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2127 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2305 = frontier_phi_28_24_ladder;
        }
        float _2584;
        if (_2141 > 0.0)
        {
            _2584 = abs((1.0 - _2131) / _2141);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2131 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2584 = frontier_phi_40_35_ladder;
        }
        float _2797;
        if (_2144 > 0.0)
        {
            _2797 = abs((1.0 - _2135) / _2144);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2135 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2797 = frontier_phi_49_46_ladder;
        }
        float _2799 = isnan(_2584) ? _2305 : (isnan(_2305) ? _2584 : min(_2305, _2584));
        float _2800 = isnan(_2797) ? _2799 : (isnan(_2799) ? _2797 : min(_2799, _2797));
        float _2804 = (_2800 * _2138) + _2127;
        float _2805 = (_2800 * _2141) + _2131;
        float _2806 = (_2800 * _2144) + _2135;
        float _2807 = _2800 * 9.9999997473787516355514526367188e-05;
        float _2808 = (-1.0) - _2807;
        float _2810 = _2807 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2806 > _2810) || ((_2806 < _2808) || ((_2805 > _2810) || ((_2805 < _2808) || ((_2804 < _2808) || (_2804 > _2810))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2806, cbModelParam._m0[17u].z, fma(_2805, cbModelParam._m0[17u].y, _2804 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2806, cbModelParam._m0[18u].z, fma(_2805, cbModelParam._m0[18u].y, _2804 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2806, cbModelParam._m0[19u].z, fma(_2805, cbModelParam._m0[19u].y, _2804 * cbModelParam._m0[19u].x))), _2073);
            frontier_phi_25_49_ladder = _3005.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3005.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3005.x * cbModelParam._m0[1u].z;
        }
        _2163 = frontier_phi_25_49_ladder_2;
        _2165 = frontier_phi_25_49_ladder_1;
        _2167 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1142, _1143, _1144), _2073);
        _2163 = _2147.x * cbModelParam._m0[1u].z;
        _2165 = _2147.y * cbModelParam._m0[1u].z;
        _2167 = _2147.z * cbModelParam._m0[1u].z;
    }
    float _2180 = (((_1169 * _1118) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2163 - _2064)) + _2064);
    float _2182 = (((_1169 * _1120) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2184 = (((_1169 * _1121) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2187 = fma(_2184, cbSceneParam._m0[89u].z, fma(_2182, cbSceneParam._m0[89u].y, _2180 * cbSceneParam._m0[89u].x));
    float _2190 = fma(_2184, cbSceneParam._m0[90u].z, fma(_2182, cbSceneParam._m0[90u].y, _2180 * cbSceneParam._m0[90u].x));
    float _2193 = fma(_2184, cbSceneParam._m0[91u].z, fma(_2182, cbSceneParam._m0[91u].y, _2180 * cbSceneParam._m0[91u].x));
    vec4 _2201 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1056, _1057));
    float _2203 = _2201.w;
    float _2215 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2203);
    float _2216 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2203);
    float _2217 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2203);
    uvec4 _2221 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2223 = _2221.x * 14u;
    uint _2224 = _2223 + 13u;
    float _2231 = _1134 + (-1.0);
    float _2236 = (cbLight._m0[_2224].x * _2231) + 1.0;
    float _2237 = (cbLight._m0[_2224].y * _2231) + 1.0;
    float _2238 = (cbLight._m0[_2224].z * _2231) + 1.0;
    float _2239 = (cbLight._m0[_2224].w * _2231) + 1.0;
    uint _2240 = _2223 + 5u;
    float _2246 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2250 = _2223 + 4u;
    float _2259 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2263 = _2223 | 1u;
    float _2274 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_957, _958, _959));
    float _2277 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_957, _958, _959));
    float _4572 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _4583 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2282 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * 0.3183098733425140380859375;
    float _2284 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * 0.3183098733425140380859375;
    float _2291 = ((cbLight._m0[_2240].x * _2246) * _2284) + (((cbLight._m0[_2250].x * _2215) * _2259) * _2282);
    float _2292 = ((_2246 * cbLight._m0[_2240].y) * _2284) + (((cbLight._m0[_2250].y * _2216) * _2259) * _2282);
    float _2293 = ((_2246 * cbLight._m0[_2240].z) * _2284) + (((cbLight._m0[_2250].z * _2217) * _2259) * _2282);
    uvec4 _2297 = floatBitsToUint(cbLight._m0[_2223 + 12u]);
    bool _2299 = _2297.x == 0u;
    float _2310;
    float _2312;
    float _2314;
    if (_2299)
    {
        _2310 = _2291;
        _2312 = _2292;
        _2314 = _2293;
    }
    else
    {
        uint _2318 = _2223 + 6u;
        float _2334 = (dot(vec3(cbLight._m0[_2223 + 2u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4594 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2337 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2310 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2291;
        _2312 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2292;
        _2314 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2293;
    }
    bool _2317 = _2297.y == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2317)
    {
        _2355 = _2310;
        _2357 = _2312;
        _2359 = _2314;
    }
    else
    {
        uint _2528 = _2223 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2223 + 3u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4610 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2547 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2355 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2310;
        _2357 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2312;
        _2359 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2314;
    }
    uint _2362 = _2223 + 8u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _960) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2223].x + _1036;
    float _2378 = cbLight._m0[_2223].y + _1037;
    float _2379 = cbLight._m0[_2223].z + _1038;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2223].xyz));
    float _4626 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _4637 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _2391 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2392 = dot(vec3(_957, _958, _959), vec3(_2384, _2385, _2386));
    float _4648 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2384, _2385, _2386));
    float _4659 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2376 * _2376;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2413 = 0.959999978542327880859375 - _1115;
    float _2415 = 0.959999978542327880859375 - _1116;
    float _2416 = 0.959999978542327880859375 - _1117;
    float _2423 = 1.0 - _2376;
    float _2434 = (0.5 / (((_2391 * ((_2390 * _2423) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2423) + _2376) * _2390))) * _2390;
    float _4670 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2436 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    uint _2450 = _2223 + 9u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _960) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2263].x + _1036;
    float _2464 = cbLight._m0[_2263].y + _1037;
    float _2465 = cbLight._m0[_2263].z + _1038;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2263].xyz));
    float _4681 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2477 = dot(vec3(_957, _958, _959), vec3(_2470, _2471, _2472));
    float _4692 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2470, _2471, _2472));
    float _4703 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2462 * _2462;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
    float _2503 = 1.0 - _2462;
    float _2513 = (0.5 / (((_2391 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2503) + _2462) * _2476))) * _2476;
    float _4714 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    float _2525 = (((((_2496 * _2413) + _1118) * cbLight._m0[_2450].x) * _2515) * _2246) + ((((cbLight._m0[_2362].x * _2215) * ((_2412 * _2413) + _1118)) * _2436) * _2259);
    float _2526 = (((((_2496 * _2415) + _1120) * cbLight._m0[_2450].y) * _2515) * _2246) + ((((cbLight._m0[_2362].y * _2216) * ((_2412 * _2415) + _1120)) * _2436) * _2259);
    float _2527 = (((((_2496 * _2416) + _1121) * cbLight._m0[_2450].z) * _2515) * _2246) + ((((cbLight._m0[_2362].z * _2217) * ((_2412 * _2416) + _1121)) * _2436) * _2259);
    float _2589;
    float _2591;
    float _2593;
    if (_2299)
    {
        _2589 = _2525;
        _2591 = _2526;
        _2593 = _2527;
    }
    else
    {
        uint _2595 = _2223 + 2u;
        uint _2599 = _2223 + 10u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _960) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _1036;
        float _2616 = cbLight._m0[_2595].y + _1037;
        float _2617 = cbLight._m0[_2595].z + _1038;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2595].xyz));
        float _4725 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2629 = dot(vec3(_957, _958, _959), vec3(_2622, _2623, _2624));
        float _4736 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4747 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
        float _2655 = 1.0 - _2614;
        float _2665 = (0.5 / (((_2391 * ((_2628 * _2655) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2655) + _2614) * _2628))) * _2628;
        float _4758 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2667 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2668 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2589 = (((((_2648 * _2413) + _1118) * cbLight._m0[_2599].x) * _2667) * _2668) + _2525;
        _2591 = (((((_2648 * _2415) + _1120) * cbLight._m0[_2599].y) * _2667) * _2668) + _2526;
        _2593 = (((((_2648 * _2416) + _1121) * cbLight._m0[_2599].z) * _2667) * _2668) + _2527;
    }
    float _2703;
    float _2705;
    float _2707;
    if (_2317)
    {
        _2703 = _2589;
        _2705 = _2591;
        _2707 = _2593;
    }
    else
    {
        uint _2714 = _2223 + 3u;
        uint _2718 = _2223 + 11u;
        float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2714].w)) * _960) * 0.949999988079071044921875);
        float _2733 = _2732 * _2732;
        float _2734 = cbLight._m0[_2714].x + _1036;
        float _2735 = cbLight._m0[_2714].y + _1037;
        float _2736 = cbLight._m0[_2714].z + _1038;
        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
        float _2741 = _2740 * _2734;
        float _2742 = _2740 * _2735;
        float _2743 = _2740 * _2736;
        float _2744 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2714].xyz));
        float _4774 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2748 = dot(vec3(_957, _958, _959), vec3(_2741, _2742, _2743));
        float _4785 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2752 = dot(vec3(cbLight._m0[_2714].xyz), vec3(_2741, _2742, _2743));
        float _4796 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2756 = _2733 * _2733;
        float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
        float _2767 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
        float _2774 = 1.0 - _2733;
        float _2784 = (0.5 / (((_2391 * ((_2747 * _2774) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2774) + _2733) * _2747))) * _2747;
        float _4807 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2786 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
        float _2787 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2703 = (((((_2767 * _2413) + _1118) * cbLight._m0[_2718].x) * _2786) * _2787) + _2589;
        _2705 = (((((_2767 * _2415) + _1120) * cbLight._m0[_2718].y) * _2786) * _2787) + _2591;
        _2707 = (((((_2767 * _2416) + _1121) * cbLight._m0[_2718].z) * _2786) * _2787) + _2593;
    }
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_2221.y == 0u)
    {
        float _2862 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2863 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2862;
        float _2864 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2862;
        float _2865 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2862;
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.x;
        uint _2889 = uint((float(_2877.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1057) / _2878))) + floor(float(uint(cbSceneParam._m0[85u].x * _1056) / _2878)));
        float _2899 = (log2(_2865 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2900 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        uint _2903 = uint(isnan(14.0) ? _2900 : (isnan(_2900) ? 14.0 : min(_2900, 14.0)));
        uvec4 _2908 = texelFetch(g_lightClusterGridBuffer, int(((_2903 << 2u) + (_2889 << 6u)) >> 2u));
        uint _2909 = _2908.x;
        uint _2910 = _2877.z;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((((1u << ((_2910 >> 4u) & 15u)) + 4294967295u) & _2909) == 0u) || ((_2910 & 240u) == 0u))
        {
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
        }
        else
        {
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            uint _3169 = 0u;
            uint _3178;
            bool _3179;
            for (;;)
            {
                _3178 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                _3179 = _3178 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3179)
                {
                    frontier_phi_66_pred = _3163;
                    frontier_phi_66_pred_1 = _3168;
                    frontier_phi_66_pred_2 = _3167;
                    frontier_phi_66_pred_3 = _3166;
                    frontier_phi_66_pred_4 = _3165;
                    frontier_phi_66_pred_5 = _3164;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3178;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3169 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _2863;
                        float _3375 = _3334.y - _2864;
                        float _3376 = _3334.z - _2865;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_1075, _1078, _1081), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4833 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _2863;
                        float _3410 = (-0.0) - _2864;
                        float _3411 = (-0.0) - _2865;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3426 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3427 = 1.0 - _1150;
                        float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                        float _3435 = _3434 * _3434;
                        float _3436 = _3435 * _3435;
                        float _3437 = _3416 + _3381;
                        float _3438 = _3417 + _3382;
                        float _3439 = _3418 + _3383;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3447 = dot(vec3(_1075, _1078, _1081), vec3(_3416, _3417, _3418));
                        float _4849 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3450 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3451 = dot(vec3(_1075, _1078, _1081), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                        float _4860 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3454 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                        float _3459 = _3394 * _3435;
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3384) + _3460;
                        float _4871 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3465 = 1.0 - _3435;
                        float _3475 = (0.5 / (((_3464 * ((_3450 * _3465) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3435) * _3450))) * _3464;
                        float _4882 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3486 = (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3458 * _3458) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3238 = (_3405 * _3353.x) + _3311;
                        _3239 = (_3405 * _3353.y) + _3312;
                        _3240 = (_3405 * _3353.z) + _3313;
                        _3235 = (_3486 * _3370.x) + _3308;
                        _3236 = (_3486 * _3370.y) + _3309;
                        _3237 = (_3486 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_66_pred = _3235;
                    frontier_phi_66_pred_1 = _3240;
                    frontier_phi_66_pred_2 = _3239;
                    frontier_phi_66_pred_3 = _3238;
                    frontier_phi_66_pred_4 = _3237;
                    frontier_phi_66_pred_5 = _3236;
                }
                _3011 = frontier_phi_66_pred;
                _3021 = frontier_phi_66_pred_1;
                _3019 = frontier_phi_66_pred_2;
                _3017 = frontier_phi_66_pred_3;
                _3015 = frontier_phi_66_pred_4;
                _3013 = frontier_phi_66_pred_5;
                uint _3170 = _3169 + 1u;
                if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3163 = _3011;
                    _3164 = _3013;
                    _3165 = _3015;
                    _3166 = _3017;
                    _3167 = _3019;
                    _3168 = _3021;
                    _3169 = _3170;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
        }
        uvec4 _3024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3025 = _3024.z;
        uint _3027 = (_3025 >> 8u) & 15u;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((4294967295u << _3027) & _2909) == 0u)
        {
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
            _3141 = _3020;
        }
        else
        {
            float _3156 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
            float _3157 = _3156 * _2863;
            float _3158 = _3156 * _2864;
            float _3159 = _3156 * _2865;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3027 < ((_3025 >> 12u) & 15u))
            {
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3291 = _3010;
                float _3292 = _3012;
                float _3293 = _3014;
                float _3294 = _3016;
                float _3295 = _3018;
                float _3296 = _3020;
                uint _3297 = _3027;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3307)
                    {
                        frontier_phi_77_pred = _3296;
                        frontier_phi_77_pred_1 = _3295;
                        frontier_phi_77_pred_2 = _3294;
                        frontier_phi_77_pred_3 = _3293;
                        frontier_phi_77_pred_4 = _3292;
                        frontier_phi_77_pred_5 = _3291;
                    }
                    else
                    {
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3513 = _3291;
                        float _3514 = _3292;
                        float _3515 = _3293;
                        float _3516 = _3294;
                        float _3517 = _3295;
                        float _3518 = _3296;
                        uint _3519 = _3306;
                        uint _3520;
                        vec4 _3545;
                        float _3546;
                        vec4 _3561;
                        vec3 _3573;
                        vec4 _3588;
                        vec4 _3603;
                        float _3649;
                        bool _3650;
                        for (;;)
                        {
                            uint _3530 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3519));
                            _3520 = (_3519 + 4294967295u) & _3519;
                            uint _3532 = _3530 * 40u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            _3546 = _3545.w;
                            uint _3548 = (_3530 * 40u) + 4u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3530 * 40u) + 8u;
                            _3573 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x));
                            uint _3575 = (_3530 * 40u) + 16u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3530 * 40u) + 20u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3530 * 40u) + 24u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3624 = (_3530 * 40u) + 28u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3649 = fma(_2865, _3637.z, fma(_2864, _3637.y, _3637.x * _2863)) + _3637.w;
                            _3650 = !((fma(_2865, _3618.z, fma(_2864, _3618.y, _3618.x * _2863)) + _3618.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3650)
                            {
                                float _3677 = _3545.x - _2863;
                                float _3678 = _3545.y - _2864;
                                float _3679 = _3545.z - _2865;
                                float _3680 = dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679));
                                float _3683 = inversesqrt(_3680);
                                float _3684 = _3683 * _3677;
                                float _3685 = _3683 * _3678;
                                float _3686 = _3683 * _3679;
                                float _3690 = 1.0 - (_3680 / (_3546 * _3546));
                                float _4893 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3695 = sqrt(_3680) * _3561.w;
                                float _3697 = 1.39999997615814208984375 / (_3695 + 1.39999997615814208984375);
                                float _3698 = _3697 * _3697;
                                float _3701 = ((1.0 - _3698) * dot(vec3(_3684, _3685, _3686), vec3(_1075, _1078, _1081))) + _3698;
                                float _3704 = _3695 * _3695;
                                float _3708 = (fma(_2865, _3588.z, fma(_2864, _3588.y, _3588.x * _2863)) + _3588.w) / _3649;
                                float _3709 = (fma(_2865, _3603.z, fma(_2864, _3603.y, _3603.x * _2863)) + _3603.w) / _3649;
                                float _3713 = 1.0 - dot(vec2(_3708, _3709), vec2(_3708, _3709));
                                float _4909 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3715 = _3714 * (((isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0))) * _3691) / ((_3704 * 0.699999988079071044921875) + 1.0));
                                float _3727 = exp2(log2(1.0 / ((_3704 * 3.5) + 5.0)) * 0.25);
                                float _3728 = 1.0 - _1150;
                                float _3735 = sqrt(1.0 - ((1.0 - (_3728 * _3728)) * (1.0 - (_3727 * _3727))));
                                float _3736 = _3735 * _3735;
                                float _3737 = _3736 * _3736;
                                float _3738 = _3684 - _3157;
                                float _3739 = _3685 - _3158;
                                float _3740 = _3686 - _3159;
                                float _3744 = inversesqrt(dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740)));
                                float _3748 = dot(vec3(_1075, _1078, _1081), vec3((-0.0) - _3157, (-0.0) - _3158, (-0.0) - _3159));
                                float _4920 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3752 = dot(vec3(_1075, _1078, _1081), vec3(_3744 * _3738, _3744 * _3739, _3744 * _3740));
                                float _4931 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3759 = ((_3755 * _3755) * (_3737 + (-1.0))) + 1.0;
                                float _3760 = _3697 * _3736;
                                float _3761 = _3760 * _3760;
                                float _3767 = ((1.0 - _3761) * dot(vec3(_1075, _1078, _1081), vec3(_3684, _3685, _3686))) + _3761;
                                float _4942 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3769 = 1.0 - _3736;
                                float _3779 = (0.5 / (((_3768 * ((_3751 * _3769) + _3736)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3736) * _3751))) * _3768;
                                float _4953 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3789 = (_3714 * _3691) * (((_3737 * 3.1415927410125732421875) * (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) / ((_3759 * _3759) * ((_3704 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3715 * _3561.y;
                                frontier_phi_83_pred_1 = _3715 * _3561.x;
                                frontier_phi_83_pred_2 = _3789 * _3573.z;
                                frontier_phi_83_pred_3 = _3789 * _3573.y;
                                frontier_phi_83_pred_4 = _3789 * _3573.x;
                                frontier_phi_83_pred_5 = _3715 * _3561.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3797 = frontier_phi_83_pred;
                            _3796 = frontier_phi_83_pred_1;
                            _3795 = frontier_phi_83_pred_2;
                            _3794 = frontier_phi_83_pred_3;
                            _3793 = frontier_phi_83_pred_4;
                            _3798 = frontier_phi_83_pred_5;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            if (_3520 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3520;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3505;
                        frontier_phi_77_pred_1 = _3504;
                        frontier_phi_77_pred_2 = _3503;
                        frontier_phi_77_pred_3 = _3502;
                        frontier_phi_77_pred_4 = _3501;
                        frontier_phi_77_pred_5 = _3500;
                    }
                    _3142 = frontier_phi_77_pred;
                    _3140 = frontier_phi_77_pred_1;
                    _3138 = frontier_phi_77_pred_2;
                    _3136 = frontier_phi_77_pred_3;
                    _3134 = frontier_phi_77_pred_4;
                    _3132 = frontier_phi_77_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3132;
                        _3292 = _3134;
                        _3293 = _3136;
                        _3294 = _3138;
                        _3295 = _3140;
                        _3296 = _3142;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3136;
                frontier_phi_58_59_ladder_1 = _3142;
                frontier_phi_58_59_ladder_2 = _3140;
                frontier_phi_58_59_ladder_3 = _3138;
                frontier_phi_58_59_ladder_4 = _3134;
                frontier_phi_58_59_ladder_5 = _3132;
            }
            else
            {
                frontier_phi_58_59_ladder = _3014;
                frontier_phi_58_59_ladder_1 = _3020;
                frontier_phi_58_59_ladder_2 = _3018;
                frontier_phi_58_59_ladder_3 = _3016;
                frontier_phi_58_59_ladder_4 = _3012;
                frontier_phi_58_59_ladder_5 = _3010;
            }
            _3131 = frontier_phi_58_59_ladder_5;
            _3133 = frontier_phi_58_59_ladder_4;
            _3135 = frontier_phi_58_59_ladder;
            _3137 = frontier_phi_58_59_ladder_3;
            _3139 = frontier_phi_58_59_ladder_2;
            _3141 = frontier_phi_58_59_ladder_1;
        }
        float _3146 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
        _2922 = (_3146 * _3137) + _2355;
        _2924 = (_3146 * _3139) + _2357;
        _2926 = (_3146 * _3141) + _2359;
        _2928 = ((_3131 * _1118) * _3146) + _2703;
        _2930 = ((_3133 * _1120) * _3146) + _2705;
        _2932 = ((_3135 * _1121) * _3146) + _2707;
    }
    else
    {
        _2922 = _2355;
        _2924 = _2357;
        _2926 = _2359;
        _2928 = _2703;
        _2930 = _2705;
        _2932 = _2707;
    }
    float _4969 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4980 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4991 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2949 = ((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2922 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1134))) + ((_2928 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _2950 = ((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_2924 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1134))) + ((_2930 + ((isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _2951 = ((isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_2926 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1134))) + ((_2932 + ((isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    uint _2952 = _293 + 6u;
    float _2960 = _1056 / cbSceneParam._m0[86u].x;
    float _2961 = _1057 / cbSceneParam._m0[86u].y;
    vec4 _2975 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, (log2((isnan(cbSceneParam._m0[77u].w) ? _979 : (isnan(_979) ? cbSceneParam._m0[77u].w : min(_979, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2977 = _2975.x;
    float _2978 = _2975.y;
    float _2979 = _2975.z;
    float _2980 = _2975.w;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    if (_979 > cbSceneParam._m0[78u].w)
    {
        float _3035 = isnan(_979) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _979 : min(cbSceneParam._m0[80u].w, _979));
        float _3036 = _3035 / _979;
        float _3047 = _3036 * _1029;
        float _3048 = _1030 * _3036;
        float _3049 = (-0.0) - _3048;
        float _3051 = _3036 * _1031;
        float _3053 = (cbSceneParam._m0[77u].w * _3049) / _3035;
        float _3054 = _3053 + cbSceneParam._m0[79u].w;
        float _3055 = cbSceneParam._m0[79u].w - _3048;
        float _3061 = sqrt(((_3047 * _3047) + (_3048 * _3048)) + (_3051 * _3051));
        float _3064 = (1.0 - (cbSceneParam._m0[77u].w / _3035)) * _3061;
        float _3069 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3071 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3248;
        if (abs((_3049 - _3053) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3248 = ((((_3054 > 0.0) ? exp2(_3069 * _3054) : (2.0 - exp2(_3071 * _3054))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3064;
        }
        else
        {
            float _3192 = 1.0 / cbSceneParam._m0[80u].x;
            float _3193 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : max(_3054, _3055));
            float _3194 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : min(_3054, _3055));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            _3248 = ((abs(_3061 / _3049) * cbSceneParam._m0[80u].y) * ((((_3203 - _3204) * 2.0) - ((exp2(_3069 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0)))) - exp2(_3069 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))))) * _3192)) - ((exp2(_3071 * _3203) - exp2(_3071 * _3204)) * _3192))) + (_3064 * cbSceneParam._m0[80u].z);
        }
        vec4 _3250 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, 1.0), 0.0);
        float _3259 = exp2((_3248 * (-1.44269502162933349609375)) * (1.0 - _3250.w));
        float _3260 = log2(_3259);
        float _3276 = log2(_2980);
        _3073 = (exp2(_3276 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].x)) * _3250.x) / cbSceneParam._m0[78u].x)) + _2977;
        _3075 = (exp2(_3276 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].y)) * _3250.y) / cbSceneParam._m0[78u].y)) + _2978;
        _3077 = (exp2(_3276 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].z)) * _3250.z) / cbSceneParam._m0[78u].z)) + _2979;
        _3079 = _3259 * _2980;
    }
    else
    {
        _3073 = _2977;
        _3075 = _2978;
        _3077 = _2979;
        _3079 = _2980;
    }
    bool _3286;
    vec4 _3089;
    vec4 _3111;
    float _3113;
    float _3117;
    float _3118;
    float _3119;
    float _3120;
    bool _3130;
    for (;;)
    {
        _3089 = cbMatDynParam._m0[0u];
        float _3091 = roundEven(_3089.y);
        bool _3092 = _3091 == 3.0;
        float _3093 = log2(_3079);
        float _3100 = exp2(_3093 * cbSceneParam._m0[78u].x) * _2949;
        float _3101 = exp2(_3093 * cbSceneParam._m0[78u].y) * _2950;
        float _3102 = exp2(_3093 * cbSceneParam._m0[78u].z) * _2951;
        float _3109 = _1045 + (-0.5);
        _3111 = cbMtdParam._m0[1u];
        _3113 = _3111.y * _3109;
        float _3116 = (_3091 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3117 = _3116 * (_3092 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3073)));
        _3118 = _3116 * (_3092 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3075)));
        _3119 = _3116 * (_3092 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3077)));
        _3120 = _3109 * 0.999000012874603271484375;
        _3130 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3130)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3120) < 0.5)
            {
                _3286 = true;
                break;
            }
        }
        uint _3227 = _1094 + uint(_3089.w);
        if ((cbInstanceData._m0[_3227].w < 1.0) && ((cbInstanceData._m0[_3227].w + _3120) < 0.5))
        {
            _3286 = true;
            break;
        }
        if ((_3113 + 1.0) < _3111.x)
        {
            _3286 = true;
            break;
        }
        _3286 = false;
        break;
    }
    float _3491;
    if (_3286)
    {
        discard_state = true;
        _3491 = 0.0;
    }
    else
    {
        _3491 = cbInstanceData._m0[_2952].w;
    }
    SV_Target.x = _3117;
    SV_Target.y = _3118;
    SV_Target.z = _3119;
    SV_Target.w = _3491;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2952].w;
    discard_exit();
}


