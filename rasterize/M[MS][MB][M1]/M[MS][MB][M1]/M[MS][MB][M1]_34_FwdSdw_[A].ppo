#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1239;
float _3904;
float _3905;
float _3906;
float _3907;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.x * cbMtdParam._m0[9u].x;
    float _295 = _288.y * cbMtdParam._m0[9u].y;
    float _296 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _344 = _340.z;
    float _348 = (_340.x * 2.0) + (-1.0);
    float _349 = (_340.y * 2.0) + (-1.0);
    float _350 = dot(vec2(_348, _349), vec2(_348, _349));
    float _3916 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _356 = sqrt(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))));
    float _361 = _348 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_314.x * 2.0) + (-1.0)));
    float _362 = _349 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_314.y * 2.0) + (-1.0)));
    float _365 = fma(_356, _237, fma(_362, _244, _361 * _230));
    float _368 = fma(_356, _238, fma(_362, _245, _361 * _231));
    float _371 = fma(_356, _239, fma(_362, _246, _361 * _232));
    float _375 = inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371)));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _413 = _411.x;
    float _414 = 1.0 - _413;
    float _421 = ((_413 - _414) * cbMtdParam._m0[24u].z) + _414;
    float _423 = (cbMtdParam._m0[19u].x + dot(vec4(_375 * _365, _375 * _368, _375 * _371, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_421 * cbMtdParam._m0[21u].z);
    float _3927 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _426 = (-0.0) - cbMtdParam._m0[24u].x;
    float _428 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _428 : (isnan(_428) ? 1.0 : min(_428, 1.0));
    float _436 = _424 - ((_424 * TEXCOORD_8.x) * _429);
    float _437 = _424 - ((_424 * TEXCOORD_8.y) * _429);
    float _438 = _424 - ((_424 * TEXCOORD_8.z) * _429);
    float _445 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _449 = ((isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : min(_445, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _457 = (_449 - (((_421 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _449))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3958 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _462 = ((_436 * (cbMtdParam._m0[17u].x - _294)) * _458) + _294;
    float _463 = ((_437 * (cbMtdParam._m0[17u].y - _295)) * _458) + _295;
    float _464 = ((_438 * (cbMtdParam._m0[17u].z - _296)) * _458) + _296;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _508 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3969 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _517 = ((((cbMtdParam._m0[10u].x - _462) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _509) + _462;
    float _518 = ((((cbMtdParam._m0[10u].y - _463) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _509) + _463;
    float _519 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _464)) * _509) + _464;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _534 = _532.x;
    float _537 = _534 - ((_534 * _436) * _458);
    float _539 = _537 - (_537 * _509);
    float _544 = (((_314.z - _344) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _344;
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _565 = (_558.x * 2.0) + (-1.0);
    float _566 = (_558.y * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3980 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _576 = (((_558.z - _544) * _436) * _458) + _544;
    float _579 = ((cbMtdParam._m0[23u].y - _576) * _509) + _576;
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _604 = (_598.x * 2.0) + (-1.0);
    float _605 = (_598.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3991 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _626 = (((cbMtdParam._m0[21u].x * _361) + ((_565 - _361) * _436)) * _458) + _361;
    float _627 = (((cbMtdParam._m0[21u].x * _362) + ((_566 - _362) * _437)) * _458) + _362;
    float _628 = (((sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) - _356) * _438) * _458) + _356;
    float _639 = (((_604 - _626) + (_626 * cbMtdParam._m0[22u].z)) * _509) + _626;
    float _640 = (((_605 - _627) + (_627 * cbMtdParam._m0[22u].z)) * _509) + _627;
    float _641 = ((sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) - _628) * _509) + _628;
    float _643 = cbMtdParam._m0[22u].x + _340.w;
    float _646 = fma(_641, _237, fma(_640, _244, _639 * _230));
    float _649 = fma(_641, _238, fma(_640, _245, _639 * _231));
    float _652 = fma(_641, _239, fma(_640, _246, _639 * _232));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _4002 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _660 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4024 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4035 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4046 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4057 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _665 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    vec4 _743 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _745 = _743.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _920 = sqrt(((_729 * _729) + (_730 * _730)) + (_731 * _731));
        float _926 = (cbMatDynParam._m0[5u].x * _920) + cbMatDynParam._m0[5u].y;
        float _4068 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _931 = (cbMatDynParam._m0[5u].z * _920) + cbMatDynParam._m0[5u].w;
        float _4079 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) - _927)) + _927) < ((_745 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _781 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _784 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    uint _797 = _249 + 9u;
    uint _798 = _797 + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_798].z;
    float _4090 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _810 = 1.0 - _665;
    float _811 = _807 * _810;
    float _812 = _808 * _810;
    float _813 = _809 * _810;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _665;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _665;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _665;
    float _821 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _837 = ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * TEXCOORD_5.w) * _833.x;
    float _838 = dot(vec3(_657, _658, _659), vec3(_736, _737, _738));
    float _841 = _838 * 2.0;
    float _845 = (_841 * _657) - _736;
    float _846 = (_841 * _658) - _737;
    float _847 = (_841 * _659) - _738;
    float _851 = abs(dot(vec3(_736, _737, _738), vec3(_657, _658, _659)));
    float _4123 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _853 = sqrt(_660);
    float _866 = exp2((_853 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_853 * 3.0));
    float _872 = (1.0 - _866) * ((_853 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _873 = _866 * _853;
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _967 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _971 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _996 = _901 + _657;
        float _997 = _905 + _658;
        float _998 = _909 + _659;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_657, _658, _659), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4171 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_657, _658, _659), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4204 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_657, _658, _659), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4237 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1281 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1285 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1289 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1312 = _901 + _657;
        float _1313 = _905 + _658;
        float _1314 = _909 + _659;
        float _1324 = fma(_1314, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312)) - _1281;
        float _1325 = fma(_1314, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312)) - _1285;
        float _1326 = fma(_1314, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312)) - _1289;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1281 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1285 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[35u].z) + ((((((_1289 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1380 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1347.x + (-0.5));
        float _1382 = _1380 * (_1347.y + (-0.5));
        float _1383 = _1380 * (_1347.z + (-0.5));
        float _1390 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1354.x + (-0.5));
        float _1392 = _1390 * (_1354.y + (-0.5));
        float _1393 = _1390 * (_1354.z + (-0.5));
        float _1400 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1361.x + (-0.5));
        float _1402 = _1400 * (_1361.y + (-0.5));
        float _1403 = _1400 * (_1361.z + (-0.5));
        float _1410 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1368.x + (-0.5));
        float _1412 = _1410 * (_1368.y + (-0.5));
        float _1413 = _1410 * (_1368.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_657, _658, _659), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4300 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1444 + 1.0))) + _1449) * _1414;
        float _1459 = _1382 * 0.5;
        float _1460 = _1392 * 0.5;
        float _1461 = _1402 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_657, _658, _659), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4333 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1486 + 1.0))) + _1491) * _1415;
        float _1501 = _1383 * 0.5;
        float _1502 = _1393 * 0.5;
        float _1503 = _1403 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_657, _658, _659), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4366 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1528 + 1.0))) + _1533) * _1416;
        _1550 = _1383;
        _1551 = _1382;
        _1552 = _1381;
        _1553 = _1393;
        _1554 = _1392;
        _1555 = _1391;
        _1556 = _1403;
        _1557 = _1402;
        _1558 = _1401;
        _1559 = _1416;
        _1560 = _1415;
        _1561 = _1414;
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
    }
    else
    {
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = _1239;
        _1560 = _1239;
        _1561 = _1239;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1252)) + _1252;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1253)) + _1253;
    float _1597 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1574));
    float _1618 = _845 * 0.5;
    float _1619 = _846 * 0.5;
    float _1620 = _847 * 0.5;
    float _1621 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1624 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1627 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1661;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1634 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1638 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1642 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1649 = dot(vec4(cbModelParam._m0[39u]), vec4(_1618, _1619, _1620, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1672;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1663 = dot(vec4(cbModelParam._m0[40u]), vec4(_1618, _1619, _1620, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1676 = (_1672 * cbModelParam._m0[1u].x) + (_1661 * (1.0 - cbModelParam._m0[1u].x));
    float _1686 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _660);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1686 : min(cbModelParam._m0[25u].z, _1686));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_847, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845));
        float _1749 = fma(_847, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845));
        float _1752 = fma(_847, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1780 = frontier_phi_17_15_ladder;
        }
        float _1952;
        if (_1749 > 0.0)
        {
            _1952 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1952 = frontier_phi_26_22_ladder;
        }
        float _2248;
        if (_1752 > 0.0)
        {
            _2248 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2248 = frontier_phi_38_33_ladder;
        }
        float _2250 = isnan(_1952) ? _1780 : (isnan(_1780) ? _1952 : min(_1780, _1952));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1746) + _1735;
        float _2256 = (_2251 * _1749) + _1739;
        float _2257 = (_2251 * _1752) + _1743;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2258;
        float _2262 = _2258 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 > _2262) || ((_2256 < _2260) || ((_2255 < _2260) || (_2255 > _2262))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2257, cbModelParam._m0[9u].z, fma(_2256, cbModelParam._m0[9u].y, _2255 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2257, cbModelParam._m0[10u].z, fma(_2256, cbModelParam._m0[10u].y, _2255 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2257, cbModelParam._m0[11u].z, fma(_2256, cbModelParam._m0[11u].y, _2255 * cbModelParam._m0[11u].x))), _1687);
            frontier_phi_16_38_ladder = _2402.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2402.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_16_38_ladder_2;
        _1770 = frontier_phi_16_38_ladder_1;
        _1772 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_845, _846, _847), _1687);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _660);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_847, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845));
        float _1845 = fma(_847, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845));
        float _1848 = fma(_847, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845));
        float _1957;
        if (_1842 > 0.0)
        {
            _1957 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1957 = frontier_phi_28_24_ladder;
        }
        float _2275;
        if (_1845 > 0.0)
        {
            _2275 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2275 = frontier_phi_40_35_ladder;
        }
        float _2613;
        if (_1848 > 0.0)
        {
            _2613 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2613 = frontier_phi_50_47_ladder;
        }
        float _2615 = isnan(_2275) ? _1957 : (isnan(_1957) ? _2275 : min(_1957, _2275));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1842) + _1831;
        float _2621 = (_2616 * _1845) + _1835;
        float _2622 = (_2616 * _1848) + _1839;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_25_50_ladder = _2744.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2744.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2744.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_25_50_ladder_2;
        _1869 = frontier_phi_25_50_ladder_1;
        _1871 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_845, _846, _847), _1777);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1884 = (((_872 * _821) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1886 = (((_872 * _823) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1888 = (((_872 * _824) + _873) * _837) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1891 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1944 = _1931 / _1943;
    float _1945 = _1935 / _1943;
    float _1946 = _1939 / _1943;
    float _2093;
    float _2094;
    float _2095;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1973 = ((uint(_1946 > cbSceneParam._m0[59u].y) + uint(_1946 > cbSceneParam._m0[59u].x)) + uint(_1946 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1974 = _1973 + 43u;
        uint _1982 = _1973 + 44u;
        uint _1990 = _1973 + 45u;
        uint _1998 = _1973 + 46u;
        float _2009 = fma(_1943, cbSceneParam._m0[_1974].w, fma(_1939, cbSceneParam._m0[_1974].z, fma(_1935, cbSceneParam._m0[_1974].y, _1931 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1943, cbSceneParam._m0[_1982].w, fma(_1939, cbSceneParam._m0[_1982].z, fma(_1935, cbSceneParam._m0[_1982].y, _1931 * cbSceneParam._m0[_1982].x)));
        float _2021 = fma(_1943, cbSceneParam._m0[_1998].w, fma(_1939, cbSceneParam._m0[_1998].z, fma(_1935, cbSceneParam._m0[_1998].y, _1931 * cbSceneParam._m0[_1998].x)));
        float _2026 = cbSceneParam._m0[33u].z * _2021;
        float _2028 = cbSceneParam._m0[33u].w * _2021;
        float _2031 = fma(_1943, cbSceneParam._m0[_1990].w, fma(_1939, cbSceneParam._m0[_1990].z, fma(_1935, cbSceneParam._m0[_1990].y, _1931 * cbSceneParam._m0[_1990].x))) / _2021;
        float _2079 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
        float _4492 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2086 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 + _2009) / _2021, (_2028 + _2013) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 + _2009) / _2021, (_2013 - _2026) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2026) / _2021, (_2013 - _2028) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2028) / _2021, (_2026 + _2013) / _2021), _2031), 0.0)).x), vec4(0.25)));
        _2093 = 1.0 - (_2086 * cbSceneParam._m0[34u].x);
        _2094 = 1.0 - (_2086 * cbSceneParam._m0[34u].y);
        _2095 = 1.0 - (_2086 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2093 = 1.0;
        _2094 = 1.0;
        _2095 = 1.0;
    }
    float _2159;
    float _2161;
    float _2163;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2147 = fma(_1943, cbSceneParam._m0[63u].w, fma(_1939, cbSceneParam._m0[63u].z, fma(_1935, cbSceneParam._m0[63u].y, _1931 * cbSceneParam._m0[63u].x)));
        float _2148 = fma(_1943, cbSceneParam._m0[60u].w, fma(_1939, cbSceneParam._m0[60u].z, fma(_1935, cbSceneParam._m0[60u].y, _1931 * cbSceneParam._m0[60u].x))) / _2147;
        float _2149 = fma(_1943, cbSceneParam._m0[61u].w, fma(_1939, cbSceneParam._m0[61u].z, fma(_1935, cbSceneParam._m0[61u].y, _1931 * cbSceneParam._m0[61u].x))) / _2147;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2148 >= cbSceneParam._m0[64u].x) && (_2149 >= cbSceneParam._m0[64u].y)) && (_2148 <= cbSceneParam._m0[64u].z)) && (_2149 <= cbSceneParam._m0[64u].w))
        {
            float _2288 = fma(_1943, cbSceneParam._m0[62u].w, fma(_1939, cbSceneParam._m0[62u].z, fma(_1935, cbSceneParam._m0[62u].y, _1931 * cbSceneParam._m0[62u].x))) / _2147;
            float _2292 = isnan(cbSceneParam._m0[41u].w) ? _2288 : (isnan(_2288) ? cbSceneParam._m0[41u].w : max(_2288, cbSceneParam._m0[41u].w));
            float _2335 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
            float _4508 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
            float _2342 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2148, cbSceneParam._m0[33u].w + _2149), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2148, _2149 - cbSceneParam._m0[33u].z), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].z, _2149 - cbSceneParam._m0[33u].w), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2149), _2292), 0.0)).x), vec4(0.25)));
            float _2346 = 1.0 - (_2342 * cbSceneParam._m0[34u].x);
            float _2347 = 1.0 - (_2342 * cbSceneParam._m0[34u].y);
            float _2348 = 1.0 - (_2342 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2348) ? _2095 : (isnan(_2095) ? _2348 : min(_2095, _2348));
            frontier_phi_37_36_ladder_1 = isnan(_2347) ? _2094 : (isnan(_2094) ? _2347 : min(_2094, _2347));
            frontier_phi_37_36_ladder_2 = isnan(_2346) ? _2093 : (isnan(_2093) ? _2346 : min(_2093, _2346));
        }
        else
        {
            frontier_phi_37_36_ladder = _2095;
            frontier_phi_37_36_ladder_1 = _2094;
            frontier_phi_37_36_ladder_2 = _2093;
        }
        _2159 = frontier_phi_37_36_ladder_2;
        _2161 = frontier_phi_37_36_ladder_1;
        _2163 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2159 = _2093;
        _2161 = _2094;
        _2163 = _2095;
    }
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _837 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2207 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2211 = _2170 | 1u;
    float _2222 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_657, _658, _659));
    float _2225 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_657, _658, _659));
    float _4544 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _4555 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2230 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2232 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * 0.3183098733425140380859375;
    float _2239 = ((cbLight._m0[_2187].x * _2193) * _2232) + (((cbLight._m0[_2197].x * _2159) * _2207) * _2230);
    float _2240 = ((_2193 * cbLight._m0[_2187].y) * _2232) + (((cbLight._m0[_2197].y * _2161) * _2207) * _2230);
    float _2241 = ((_2193 * cbLight._m0[_2187].z) * _2232) + (((cbLight._m0[_2197].z * _2163) * _2207) * _2230);
    uvec4 _2245 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2247 = _2245.x == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2247)
    {
        _2349 = _2239;
        _2351 = _2240;
        _2353 = _2241;
    }
    else
    {
        uint _2357 = _2170 + 6u;
        float _2373 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2374 = _2373 * _2373;
        float _4566 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2375 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2376 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2349 = (((cbLight._m0[_2357].x * 0.3183098733425140380859375) * _2375) * _2376) + _2239;
        _2351 = (((cbLight._m0[_2357].y * 0.3183098733425140380859375) * _2375) * _2376) + _2240;
        _2353 = (((cbLight._m0[_2357].z * 0.3183098733425140380859375) * _2375) * _2376) + _2241;
    }
    bool _2356 = _2245.y == 0u;
    float _2411;
    float _2413;
    float _2415;
    if (_2356)
    {
        _2411 = _2349;
        _2413 = _2351;
        _2415 = _2353;
    }
    else
    {
        uint _2584 = _2170 + 7u;
        float _2600 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2601 = _2600 * _2600;
        float _4582 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2602 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2603 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2411 = (((cbLight._m0[_2584].x * 0.3183098733425140380859375) * _2602) * _2603) + _2349;
        _2413 = (((cbLight._m0[_2584].y * 0.3183098733425140380859375) * _2602) * _2603) + _2351;
        _2415 = (((cbLight._m0[_2584].z * 0.3183098733425140380859375) * _2602) * _2603) + _2353;
    }
    uint _2418 = _2170 + 8u;
    float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _660) * 0.949999988079071044921875);
    float _2432 = _2431 * _2431;
    float _2433 = cbLight._m0[_2170].x + _736;
    float _2434 = cbLight._m0[_2170].y + _737;
    float _2435 = cbLight._m0[_2170].z + _738;
    float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
    float _2440 = _2439 * _2433;
    float _2441 = _2439 * _2434;
    float _2442 = _2439 * _2435;
    float _2443 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2170].xyz));
    float _4598 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _4609 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2447 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2448 = dot(vec3(_657, _658, _659), vec3(_2440, _2441, _2442));
    float _4620 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2451 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2452 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2440, _2441, _2442));
    float _4631 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2456 = _2432 * _2432;
    float _2460 = ((_2451 * _2451) * (_2456 + (-1.0))) + 1.0;
    float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2469 = 0.959999978542327880859375 - _818;
    float _2471 = 0.959999978542327880859375 - _819;
    float _2472 = 0.959999978542327880859375 - _820;
    float _2479 = 1.0 - _2432;
    float _2490 = (0.5 / (((_2447 * ((_2446 * _2479) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2479) + _2432) * _2446))) * _2446;
    float _4642 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2456 / ((_2460 * _2460) * 3.141590118408203125));
    uint _2506 = _2170 + 9u;
    float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _660) * 0.949999988079071044921875);
    float _2518 = _2517 * _2517;
    float _2519 = cbLight._m0[_2211].x + _736;
    float _2520 = cbLight._m0[_2211].y + _737;
    float _2521 = cbLight._m0[_2211].z + _738;
    float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
    float _2526 = _2525 * _2519;
    float _2527 = _2525 * _2520;
    float _2528 = _2525 * _2521;
    float _2529 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2211].xyz));
    float _4653 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2533 = dot(vec3(_657, _658, _659), vec3(_2526, _2527, _2528));
    float _4664 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2526, _2527, _2528));
    float _4675 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2518 * _2518;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
    float _2559 = 1.0 - _2518;
    float _2569 = (0.5 / (((_2447 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2559) + _2518) * _2532))) * _2532;
    float _4686 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2571 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    float _2581 = (((((_2552 * _2469) + _821) * cbLight._m0[_2506].x) * _2571) * _2193) + ((((cbLight._m0[_2418].x * _2159) * ((_2468 * _2469) + _821)) * _2492) * _2207);
    float _2582 = (((((_2552 * _2471) + _823) * cbLight._m0[_2506].y) * _2571) * _2193) + ((((cbLight._m0[_2418].y * _2161) * ((_2468 * _2471) + _823)) * _2492) * _2207);
    float _2583 = (((((_2552 * _2472) + _824) * cbLight._m0[_2506].z) * _2571) * _2193) + ((((cbLight._m0[_2418].z * _2163) * ((_2468 * _2472) + _824)) * _2492) * _2207);
    float _2639;
    float _2641;
    float _2643;
    if (_2247)
    {
        _2639 = _2581;
        _2641 = _2582;
        _2643 = _2583;
    }
    else
    {
        uint _2645 = _2170 + 2u;
        uint _2649 = _2170 + 10u;
        float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2645].w)) * _660) * 0.949999988079071044921875);
        float _2664 = _2663 * _2663;
        float _2665 = cbLight._m0[_2645].x + _736;
        float _2666 = cbLight._m0[_2645].y + _737;
        float _2667 = cbLight._m0[_2645].z + _738;
        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
        float _2672 = _2671 * _2665;
        float _2673 = _2671 * _2666;
        float _2674 = _2671 * _2667;
        float _2675 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2645].xyz));
        float _4697 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2679 = dot(vec3(_657, _658, _659), vec3(_2672, _2673, _2674));
        float _4708 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2683 = dot(vec3(cbLight._m0[_2645].xyz), vec3(_2672, _2673, _2674));
        float _4719 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2687 = _2664 * _2664;
        float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
        float _2698 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2705 = 1.0 - _2664;
        float _2715 = (0.5 / (((_2447 * ((_2678 * _2705) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2705) + _2664) * _2678))) * _2678;
        float _4730 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2717 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
        float _2718 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2639 = (((((_2698 * _2469) + _821) * cbLight._m0[_2649].x) * _2717) * _2718) + _2581;
        _2641 = (((((_2698 * _2471) + _823) * cbLight._m0[_2649].y) * _2717) * _2718) + _2582;
        _2643 = (((((_2698 * _2472) + _824) * cbLight._m0[_2649].z) * _2717) * _2718) + _2583;
    }
    float _2749;
    float _2751;
    float _2753;
    if (_2356)
    {
        _2749 = _2639;
        _2751 = _2641;
        _2753 = _2643;
    }
    else
    {
        uint _2760 = _2170 + 3u;
        uint _2764 = _2170 + 11u;
        float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2760].w)) * _660) * 0.949999988079071044921875);
        float _2779 = _2778 * _2778;
        float _2780 = cbLight._m0[_2760].x + _736;
        float _2781 = cbLight._m0[_2760].y + _737;
        float _2782 = cbLight._m0[_2760].z + _738;
        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
        float _2787 = _2786 * _2780;
        float _2788 = _2786 * _2781;
        float _2789 = _2786 * _2782;
        float _2790 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2760].xyz));
        float _4746 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2794 = dot(vec3(_657, _658, _659), vec3(_2787, _2788, _2789));
        float _4757 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2798 = dot(vec3(cbLight._m0[_2760].xyz), vec3(_2787, _2788, _2789));
        float _4768 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2802 = _2779 * _2779;
        float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
        float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
        float _2820 = 1.0 - _2779;
        float _2830 = (0.5 / (((_2447 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2820) + _2779) * _2793))) * _2793;
        float _4779 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2832 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
        float _2833 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2749 = (((((_2813 * _2469) + _821) * cbLight._m0[_2764].x) * _2832) * _2833) + _2639;
        _2751 = (((((_2813 * _2471) + _823) * cbLight._m0[_2764].y) * _2832) * _2833) + _2641;
        _2753 = (((((_2813 * _2472) + _824) * cbLight._m0[_2764].z) * _2832) * _2833) + _2643;
    }
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    if (_2168.y == 0u)
    {
        uvec4 _2854 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2855 = _2854.x;
        uint _2866 = uint((float(_2854.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2855))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2855)));
        float _2876 = (log2(_1946 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2877 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        uint _2880 = uint(isnan(14.0) ? _2877 : (isnan(_2877) ? 14.0 : min(_2877, 14.0)));
        uvec4 _2885 = texelFetch(g_lightClusterGridBuffer, int(((_2880 << 2u) + (_2866 << 6u)) >> 2u));
        uint _2886 = _2885.x;
        uint _2887 = _2854.z;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((((1u << ((_2887 >> 4u) & 15u)) + 4294967295u) & _2886) == 0u) || ((_2887 & 240u) == 0u))
        {
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
        }
        else
        {
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            uint _3124 = 0u;
            uint _3133;
            bool _3134;
            for (;;)
            {
                _3133 = texelFetch(g_lightClassification, int((((_2880 << 5u) + (_2866 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                _3134 = _3133 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3134)
                {
                    frontier_phi_71_pred = _3123;
                    frontier_phi_71_pred_1 = _3122;
                    frontier_phi_71_pred_2 = _3121;
                    frontier_phi_71_pred_3 = _3120;
                    frontier_phi_71_pred_4 = _3119;
                    frontier_phi_71_pred_5 = _3118;
                }
                else
                {
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    uint _3269;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3133;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    for (;;)
                    {
                        uint _3273 = uint(findLSB(_3269)) + (_3124 << 5u);
                        uint _3270 = (_3269 + 4294967295u) & _3269;
                        uint _3275 = _3273 * 48u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3295 = (_3273 * 48u) + 4u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3314 = (_3273 * 48u) + 8u;
                        vec3 _3325 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x));
                        float _3329 = _3289.x - _1944;
                        float _3330 = _3289.y - _1945;
                        float _3331 = _3289.z - _1946;
                        float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                        float _3335 = inversesqrt(_3332);
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3339 = dot(vec3(_778, _781, _784), vec3(_3336, _3337, _3338));
                        float _3344 = 1.0 - (_3332 * _3289.w);
                        float _4805 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3346 = sqrt(_3332) * _3308.w;
                        float _3349 = 1.39999997615814208984375 / (_3346 + 1.39999997615814208984375);
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3339) + _3350;
                        float _3356 = _3346 * _3346;
                        float _3360 = ((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3345) / ((_3356 * 0.699999988079071044921875) + 1.0);
                        float _3364 = (-0.0) - _1944;
                        float _3365 = (-0.0) - _1945;
                        float _3366 = (-0.0) - _1946;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3380 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                        float _3381 = 1.0 - _853;
                        float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                        float _3389 = _3388 * _3388;
                        float _3390 = _3389 * _3389;
                        float _3391 = _3371 + _3336;
                        float _3392 = _3372 + _3337;
                        float _3393 = _3373 + _3338;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3401 = dot(vec3(_778, _781, _784), vec3(_3371, _3372, _3373));
                        float _4821 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3405 = dot(vec3(_778, _781, _784), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                        float _4832 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                        float _3413 = _3349 * _3389;
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3339) + _3414;
                        float _4843 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3419 = 1.0 - _3389;
                        float _3429 = (0.5 / (((_3418 * ((_3404 * _3419) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3389) * _3404))) * _3418;
                        float _4854 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3440 = (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3412 * _3412) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125))) * _3345;
                        _3193 = (_3360 * _3308.x) + _3266;
                        _3194 = (_3360 * _3308.y) + _3267;
                        _3195 = (_3360 * _3308.z) + _3268;
                        _3190 = (_3440 * _3325.x) + _3263;
                        _3191 = (_3440 * _3325.y) + _3264;
                        _3192 = (_3440 * _3325.z) + _3265;
                        if (_3270 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3270;
                        }
                    }
                    frontier_phi_71_pred = _3195;
                    frontier_phi_71_pred_1 = _3194;
                    frontier_phi_71_pred_2 = _3193;
                    frontier_phi_71_pred_3 = _3192;
                    frontier_phi_71_pred_4 = _3191;
                    frontier_phi_71_pred_5 = _3190;
                }
                _2977 = frontier_phi_71_pred;
                _2975 = frontier_phi_71_pred_1;
                _2973 = frontier_phi_71_pred_2;
                _2971 = frontier_phi_71_pred_3;
                _2969 = frontier_phi_71_pred_4;
                _2967 = frontier_phi_71_pred_5;
                uint _3125 = _3124 + 1u;
                if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3118 = _2967;
                    _3119 = _2969;
                    _3120 = _2971;
                    _3121 = _2973;
                    _3122 = _2975;
                    _3123 = _2977;
                    _3124 = _3125;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
        }
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.z;
        uint _2983 = (_2981 >> 8u) & 15u;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        if (((4294967295u << _2983) & _2886) == 0u)
        {
            _3086 = _2966;
            _3088 = _2968;
            _3090 = _2970;
            _3092 = _2972;
            _3094 = _2974;
            _3096 = _2976;
        }
        else
        {
            float _3111 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
            float _3112 = _3111 * _1944;
            float _3113 = _3111 * _1945;
            float _3114 = _3111 * _1946;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2983 < ((_2981 >> 12u) & 15u))
            {
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3246 = _2966;
                float _3247 = _2968;
                float _3248 = _2970;
                float _3249 = _2972;
                float _3250 = _2974;
                float _3251 = _2976;
                uint _3252 = _2983;
                uint _3261;
                bool _3262;
                for (;;)
                {
                    _3261 = texelFetch(g_lightClassification, int((((_2880 << 5u) + (_2866 << 9u)) + (_3252 << 2u)) >> 2u)).x;
                    _3262 = _3261 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3262)
                    {
                        frontier_phi_82_pred = _3251;
                        frontier_phi_82_pred_1 = _3250;
                        frontier_phi_82_pred_2 = _3249;
                        frontier_phi_82_pred_3 = _3248;
                        frontier_phi_82_pred_4 = _3247;
                        frontier_phi_82_pred_5 = _3246;
                    }
                    else
                    {
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        float _3469 = _3248;
                        float _3470 = _3249;
                        float _3471 = _3250;
                        float _3472 = _3251;
                        uint _3473 = _3261;
                        uint _3474;
                        vec4 _3499;
                        float _3500;
                        vec4 _3515;
                        vec3 _3527;
                        vec4 _3543;
                        vec4 _3558;
                        float _3604;
                        bool _3605;
                        for (;;)
                        {
                            uint _3484 = ((_3252 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 4u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3484 * 40u) + 8u;
                            _3527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x));
                            uint _3530 = (_3484 * 40u) + 16u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3484 * 40u) + 20u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3484 * 40u) + 24u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3579 = (_3484 * 40u) + 28u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3604 = fma(_1946, _3592.z, fma(_1945, _3592.y, _3592.x * _1944)) + _3592.w;
                            _3605 = !((fma(_1946, _3573.z, fma(_1945, _3573.y, _3573.x * _1944)) + _3573.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3605)
                            {
                                float _3632 = _3499.x - _1944;
                                float _3633 = _3499.y - _1945;
                                float _3634 = _3499.z - _1946;
                                float _3635 = dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634));
                                float _3638 = inversesqrt(_3635);
                                float _3639 = _3638 * _3632;
                                float _3640 = _3638 * _3633;
                                float _3641 = _3638 * _3634;
                                float _3645 = 1.0 - (_3635 / (_3500 * _3500));
                                float _4865 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3650 = sqrt(_3635) * _3515.w;
                                float _3652 = 1.39999997615814208984375 / (_3650 + 1.39999997615814208984375);
                                float _3653 = _3652 * _3652;
                                float _3656 = ((1.0 - _3653) * dot(vec3(_3639, _3640, _3641), vec3(_778, _781, _784))) + _3653;
                                float _3659 = _3650 * _3650;
                                float _3663 = (fma(_1946, _3543.z, fma(_1945, _3543.y, _3543.x * _1944)) + _3543.w) / _3604;
                                float _3664 = (fma(_1946, _3558.z, fma(_1945, _3558.y, _3558.x * _1944)) + _3558.w) / _3604;
                                float _3668 = 1.0 - dot(vec2(_3663, _3664), vec2(_3663, _3664));
                                float _4881 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3670 = _3669 * (((isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0))) * _3646) / ((_3659 * 0.699999988079071044921875) + 1.0));
                                float _3682 = exp2(log2(1.0 / ((_3659 * 3.5) + 5.0)) * 0.25);
                                float _3683 = 1.0 - _853;
                                float _3690 = sqrt(1.0 - ((1.0 - (_3683 * _3683)) * (1.0 - (_3682 * _3682))));
                                float _3691 = _3690 * _3690;
                                float _3692 = _3691 * _3691;
                                float _3693 = _3639 - _3112;
                                float _3694 = _3640 - _3113;
                                float _3695 = _3641 - _3114;
                                float _3699 = inversesqrt(dot(vec3(_3693, _3694, _3695), vec3(_3693, _3694, _3695)));
                                float _3703 = dot(vec3(_778, _781, _784), vec3((-0.0) - _3112, (-0.0) - _3113, (-0.0) - _3114));
                                float _4892 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3707 = dot(vec3(_778, _781, _784), vec3(_3699 * _3693, _3699 * _3694, _3699 * _3695));
                                float _4903 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3714 = ((_3710 * _3710) * (_3692 + (-1.0))) + 1.0;
                                float _3715 = _3652 * _3691;
                                float _3716 = _3715 * _3715;
                                float _3722 = ((1.0 - _3716) * dot(vec3(_778, _781, _784), vec3(_3639, _3640, _3641))) + _3716;
                                float _4914 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3724 = 1.0 - _3691;
                                float _3734 = (0.5 / (((_3723 * ((_3706 * _3724) + _3691)) + 9.9999999392252902907785028219223e-09) + (((_3723 * _3724) + _3691) * _3706))) * _3723;
                                float _4925 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3744 = (_3669 * _3646) * (((_3692 * 3.1415927410125732421875) * (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) / ((_3714 * _3714) * ((_3659 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3670 * _3515.z;
                                frontier_phi_88_pred_1 = _3670 * _3515.y;
                                frontier_phi_88_pred_2 = _3670 * _3515.x;
                                frontier_phi_88_pred_3 = _3744 * _3527.z;
                                frontier_phi_88_pred_4 = _3744 * _3527.y;
                                frontier_phi_88_pred_5 = _3744 * _3527.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3753 = frontier_phi_88_pred;
                            _3752 = frontier_phi_88_pred_1;
                            _3751 = frontier_phi_88_pred_2;
                            _3750 = frontier_phi_88_pred_3;
                            _3749 = frontier_phi_88_pred_4;
                            _3748 = frontier_phi_88_pred_5;
                            _3457 = _3751 + _3470;
                            _3458 = _3752 + _3471;
                            _3459 = _3753 + _3472;
                            _3454 = _3748 + _3467;
                            _3455 = _3749 + _3468;
                            _3456 = _3750 + _3469;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3459;
                        frontier_phi_82_pred_1 = _3458;
                        frontier_phi_82_pred_2 = _3457;
                        frontier_phi_82_pred_3 = _3456;
                        frontier_phi_82_pred_4 = _3455;
                        frontier_phi_82_pred_5 = _3454;
                    }
                    _3097 = frontier_phi_82_pred;
                    _3095 = frontier_phi_82_pred_1;
                    _3093 = frontier_phi_82_pred_2;
                    _3091 = frontier_phi_82_pred_3;
                    _3089 = frontier_phi_82_pred_4;
                    _3087 = frontier_phi_82_pred_5;
                    uint _3253 = _3252 + 1u;
                    if (_3253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3246 = _3087;
                        _3247 = _3089;
                        _3248 = _3091;
                        _3249 = _3093;
                        _3250 = _3095;
                        _3251 = _3097;
                        _3252 = _3253;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3093;
                frontier_phi_63_64_ladder_1 = _3097;
                frontier_phi_63_64_ladder_2 = _3095;
                frontier_phi_63_64_ladder_3 = _3091;
                frontier_phi_63_64_ladder_4 = _3089;
                frontier_phi_63_64_ladder_5 = _3087;
            }
            else
            {
                frontier_phi_63_64_ladder = _2972;
                frontier_phi_63_64_ladder_1 = _2976;
                frontier_phi_63_64_ladder_2 = _2974;
                frontier_phi_63_64_ladder_3 = _2970;
                frontier_phi_63_64_ladder_4 = _2968;
                frontier_phi_63_64_ladder_5 = _2966;
            }
            _3086 = frontier_phi_63_64_ladder_5;
            _3088 = frontier_phi_63_64_ladder_4;
            _3090 = frontier_phi_63_64_ladder_3;
            _3092 = frontier_phi_63_64_ladder;
            _3094 = frontier_phi_63_64_ladder_2;
            _3096 = frontier_phi_63_64_ladder_1;
        }
        float _3101 = isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0));
        _2899 = (_3101 * _3092) + _2411;
        _2901 = (_3101 * _3094) + _2413;
        _2903 = (_3101 * _3096) + _2415;
        _2905 = ((_3086 * _821) * _3101) + _2749;
        _2907 = ((_3088 * _823) * _3101) + _2751;
        _2909 = ((_3090 * _824) * _3101) + _2753;
    }
    else
    {
        _2899 = _2411;
        _2901 = _2413;
        _2903 = _2415;
        _2905 = _2749;
        _2907 = _2751;
        _2909 = _2753;
    }
    float _4941 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4952 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4963 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2926 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2899 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _837))) + ((_2905 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    float _2927 = ((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2901 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _837))) + ((_2907 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    float _2928 = ((isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2903 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _837))) + ((_2909 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1676)) * cbPerFrame._m0[3u].x);
    uint _2929 = _249 + 6u;
    float _2937 = _757 / cbSceneParam._m0[86u].x;
    float _2938 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2952 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2954 = _2952.x;
    float _2955 = _2952.y;
    float _2956 = _2952.z;
    float _2957 = _2952.w;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2991 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2992 = _2991 / _679;
        float _3003 = _2992 * _729;
        float _3004 = _730 * _2992;
        float _3005 = (-0.0) - _3004;
        float _3006 = _2992 * _731;
        float _3008 = (cbSceneParam._m0[77u].w * _3005) / _2991;
        float _3009 = _3008 + cbSceneParam._m0[79u].w;
        float _3010 = cbSceneParam._m0[79u].w - _3004;
        float _3016 = sqrt(((_3003 * _3003) + (_3004 * _3004)) + (_3006 * _3006));
        float _3019 = (1.0 - (cbSceneParam._m0[77u].w / _2991)) * _3016;
        float _3024 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3026 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3203;
        if (abs((_3005 - _3008) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3203 = ((((_3009 > 0.0) ? exp2(_3024 * _3009) : (2.0 - exp2(_3026 * _3009))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3019;
        }
        else
        {
            float _3147 = 1.0 / cbSceneParam._m0[80u].x;
            float _3148 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : max(_3009, _3010));
            float _3149 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : min(_3009, _3010));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            float _3159 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : min(_3149, 0.0));
            _3203 = ((abs(_3016 / _3005) * cbSceneParam._m0[80u].y) * ((((_3158 - _3159) * 2.0) - ((exp2(_3024 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0)))) - exp2(_3024 * (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))))) * _3147)) - ((exp2(_3026 * _3158) - exp2(_3026 * _3159)) * _3147))) + (_3019 * cbSceneParam._m0[80u].z);
        }
        vec4 _3205 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, 1.0), 0.0);
        float _3214 = exp2((_3203 * (-1.44269502162933349609375)) * (1.0 - _3205.w));
        float _3215 = log2(_3214);
        float _3231 = log2(_2957);
        _3028 = (exp2(_3231 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].x)) * _3205.x) / cbSceneParam._m0[78u].x)) + _2954;
        _3030 = (exp2(_3231 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].y)) * _3205.y) / cbSceneParam._m0[78u].y)) + _2955;
        _3032 = (exp2(_3231 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3215 * cbSceneParam._m0[78u].z)) * _3205.z) / cbSceneParam._m0[78u].z)) + _2956;
        _3034 = _3214 * _2957;
    }
    else
    {
        _3028 = _2954;
        _3030 = _2955;
        _3032 = _2956;
        _3034 = _2957;
    }
    bool _3241;
    vec4 _3044;
    vec4 _3066;
    float _3068;
    float _3072;
    float _3073;
    float _3074;
    float _3075;
    bool _3085;
    for (;;)
    {
        _3044 = cbMatDynParam._m0[0u];
        float _3046 = roundEven(_3044.y);
        bool _3047 = _3046 == 3.0;
        float _3048 = log2(_3034);
        float _3055 = exp2(_3048 * cbSceneParam._m0[78u].x) * _2926;
        float _3056 = exp2(_3048 * cbSceneParam._m0[78u].y) * _2927;
        float _3057 = exp2(_3048 * cbSceneParam._m0[78u].z) * _2928;
        float _3064 = _745 + (-0.5);
        _3066 = cbMtdParam._m0[1u];
        _3068 = _3066.y * _3064;
        float _3071 = (_3046 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3072 = _3071 * (_3047 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3028)));
        _3073 = _3071 * (_3047 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3030)));
        _3074 = _3071 * (_3047 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3032)));
        _3075 = _3064 * 0.999000012874603271484375;
        _3085 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3085)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _3075) < 0.5)
            {
                _3241 = true;
                break;
            }
        }
        uint _3182 = _797 + uint(_3044.w);
        if ((cbInstanceData._m0[_3182].w < 1.0) && ((cbInstanceData._m0[_3182].w + _3075) < 0.5))
        {
            _3241 = true;
            break;
        }
        if ((_3068 + 1.0) < _3066.x)
        {
            _3241 = true;
            break;
        }
        _3241 = false;
        break;
    }
    float _3445;
    if (_3241)
    {
        discard_state = true;
        _3445 = 0.0;
    }
    else
    {
        _3445 = cbInstanceData._m0[_2929].w;
    }
    SV_Target.x = _3072;
    SV_Target.y = _3073;
    SV_Target.z = _3074;
    SV_Target.w = _3445;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2929].w;
    discard_exit();
}


