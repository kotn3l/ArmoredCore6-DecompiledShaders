#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1280;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3889 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3900 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _513 = ((_485.x - _504) * _385) + _504;
    float _514 = ((_485.y - _505) * _385) + _505;
    float _515 = ((_485.z - _506) * _385) + _506;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _540 = ((_527.z - _515) * _458) + _515;
    float _543 = ((((_527.x - _513) * _458) + _513) * 2.0) + (-1.0);
    float _545 = ((((_527.y - _514) * _458) + _514) * 2.0) + (-1.0);
    float _546 = dot(vec2(_543, _545), vec2(_543, _545));
    float _3911 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))));
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _598 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_584 - _585) * cbMtdParam._m0[24u].z) + _585) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3922 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _606 = (_599 * (cbMtdParam._m0[17u].x - _465)) + _465;
    float _607 = (_599 * (cbMtdParam._m0[17u].y - _466)) + _466;
    float _608 = (_599 * (cbMtdParam._m0[17u].z - _467)) + _467;
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _636 = _634.x;
    float _654 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _636) * _385) + _636;
    float _671 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _654) * _458) + _654;
    float _675 = ((_620.x - _671) * cbMtdParam._m0[19u].z) + _671;
    float _677 = _675 - (_675 * _599);
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3933 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = (_599 * (_690.z - _540)) + _540;
    float _719 = (((_697 - _543) + (cbMtdParam._m0[21u].x * _543)) * _599) + _543;
    float _720 = (((_698 - _545) + (cbMtdParam._m0[21u].x * _545)) * _599) + _545;
    float _721 = (_599 * (sqrt(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) - _551)) + _551;
    float _726 = cbMtdParam._m0[22u].x + _564.w;
    float _729 = fma(_721, _233 * NORMAL.x, fma(_720, _240 * TANGENT.x, (_226 * _218) * _719));
    float _732 = fma(_721, _233 * NORMAL.y, fma(_720, _240 * TANGENT.y, (_226 * _219) * _719));
    float _735 = fma(_721, _233 * NORMAL.z, fma(_720, _240 * TANGENT.z, (_226 * _220) * _719));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    float _740 = _739 * _729;
    float _741 = _739 * _732;
    float _742 = _739 * _735;
    float _3944 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _743 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _3966 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3977 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3988 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3999 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _748 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _762 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _813 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _803);
    float _814 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _803);
    float _815 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _803);
    float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
    float _820 = _813 * _819;
    float _821 = _814 * _819;
    float _822 = _815 * _819;
    float _828 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _829 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _847 = fma(_742, cbSceneParam._m0[5u].z, fma(_741, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _740));
    float _850 = fma(_742, cbSceneParam._m0[6u].z, fma(_741, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _740));
    float _853 = fma(_742, cbSceneParam._m0[7u].z, fma(_741, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _740));
    uint _867 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _873 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_867].x;
    float _874 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_867].y;
    float _875 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_867].z;
    float _4010 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _879 = 1.0 - _748;
    float _880 = _876 * _879;
    float _881 = _877 * _879;
    float _882 = _878 * _879;
    float _887 = (_876 + (-0.039999999105930328369140625)) * _748;
    float _888 = (_877 + (-0.039999999105930328369140625)) * _748;
    float _889 = (_878 + (-0.039999999105930328369140625)) * _748;
    float _890 = _887 + 0.039999999105930328369140625;
    float _892 = _888 + 0.039999999105930328369140625;
    float _893 = _889 + 0.039999999105930328369140625;
    vec4 _902 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _828, cbSceneParam._m0[86u].y * _829));
    float _906 = ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * TEXCOORD_5.w) * _902.x;
    float _907 = dot(vec3(_740, _741, _742), vec3(_820, _821, _822));
    float _910 = _907 * 2.0;
    float _914 = (_910 * _740) - _820;
    float _915 = (_910 * _741) - _821;
    float _916 = (_910 * _742) - _822;
    float _920 = abs(dot(vec3(_820, _821, _822), vec3(_740, _741, _742)));
    float _4043 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _922 = sqrt(_743);
    float _935 = exp2((_922 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_922 * 3.0));
    float _941 = (1.0 - _935) * ((_922 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _942 = _935 * _922;
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_978, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970));
        float _1008 = fma(_978, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970));
        float _1012 = fma(_978, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970));
        float _1037 = _970 + _740;
        float _1038 = _974 + _741;
        float _1039 = _978 + _742;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_740, _741, _742), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4091 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_740, _741, _742), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4124 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_740, _741, _742), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4157 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_978, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970));
        float _1322 = fma(_978, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970));
        float _1326 = fma(_978, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970));
        float _1349 = _970 + _740;
        float _1350 = _974 + _741;
        float _1351 = _978 + _742;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_740, _741, _742), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4220 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_740, _741, _742), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4253 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_740, _741, _742), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4286 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1280;
        _1588 = _1280;
        _1589 = _1280;
        _1590 = _1280;
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1292)) + _1292;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1293)) + _1293;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1294)) + _1294;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _914 * 0.5;
    float _1656 = _915 * 0.5;
    float _1657 = _916 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _743);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_978, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_978, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_978, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_916, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914));
        float _1786 = fma(_916, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914));
        float _1789 = fma(_916, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1817 = frontier_phi_14_12_ladder;
        }
        float _1989;
        if (_1786 > 0.0)
        {
            _1989 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1989 = frontier_phi_23_19_ladder;
        }
        float _2284;
        if (_1789 > 0.0)
        {
            _2284 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2284 = frontier_phi_35_30_ladder;
        }
        float _2286 = isnan(_1989) ? _1817 : (isnan(_1817) ? _1989 : min(_1817, _1989));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1783) + _1772;
        float _2292 = (_2287 * _1786) + _1776;
        float _2293 = (_2287 * _1789) + _1780;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_13_35_ladder = _2438.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2438.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2438.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_13_35_ladder_2;
        _1807 = frontier_phi_13_35_ladder_1;
        _1809 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_914, _915, _916), _1724);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _743);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_978, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_978, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_978, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_916, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914));
        float _1882 = fma(_916, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914));
        float _1885 = fma(_916, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914));
        float _1994;
        if (_1879 > 0.0)
        {
            _1994 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1994 = frontier_phi_25_21_ladder;
        }
        float _2311;
        if (_1882 > 0.0)
        {
            _2311 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2311 = frontier_phi_37_32_ladder;
        }
        float _2649;
        if (_1885 > 0.0)
        {
            _2649 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2649 = frontier_phi_47_44_ladder;
        }
        float _2651 = isnan(_2311) ? _1994 : (isnan(_1994) ? _2311 : min(_1994, _2311));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _1879) + _1868;
        float _2657 = (_2652 * _1882) + _1872;
        float _2658 = (_2652 * _1885) + _1876;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2659;
        float _2662 = _2659 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2658 > _2662) || ((_2658 < _2660) || ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 < _2660) || (_2656 > _2662))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2658, cbModelParam._m0[17u].z, fma(_2657, cbModelParam._m0[17u].y, _2656 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2658, cbModelParam._m0[18u].z, fma(_2657, cbModelParam._m0[18u].y, _2656 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2658, cbModelParam._m0[19u].z, fma(_2657, cbModelParam._m0[19u].y, _2656 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_22_47_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_22_47_ladder_2;
        _1906 = frontier_phi_22_47_ladder_1;
        _1908 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_914, _915, _916), _1814);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1921 = (((_941 * _890) + _942) * _906) * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1923 = (((_941 * _892) + _942) * _906) * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1925 = (((_941 * _893) + _942) * _906) * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1928 = fma(_1925, cbSceneParam._m0[89u].z, fma(_1923, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1925, cbSceneParam._m0[90u].z, fma(_1923, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1925, cbSceneParam._m0[91u].z, fma(_1923, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1981 = _1968 / _1980;
    float _1982 = _1972 / _1980;
    float _1983 = _1976 / _1980;
    float _2130;
    float _2131;
    float _2132;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2010 = ((uint(_1983 > cbSceneParam._m0[59u].y) + uint(_1983 > cbSceneParam._m0[59u].x)) + uint(_1983 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2011 = _2010 + 43u;
        uint _2019 = _2010 + 44u;
        uint _2027 = _2010 + 45u;
        uint _2035 = _2010 + 46u;
        float _2046 = fma(_1980, cbSceneParam._m0[_2011].w, fma(_1976, cbSceneParam._m0[_2011].z, fma(_1972, cbSceneParam._m0[_2011].y, _1968 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1980, cbSceneParam._m0[_2019].w, fma(_1976, cbSceneParam._m0[_2019].z, fma(_1972, cbSceneParam._m0[_2019].y, _1968 * cbSceneParam._m0[_2019].x)));
        float _2058 = fma(_1980, cbSceneParam._m0[_2035].w, fma(_1976, cbSceneParam._m0[_2035].z, fma(_1972, cbSceneParam._m0[_2035].y, _1968 * cbSceneParam._m0[_2035].x)));
        float _2063 = cbSceneParam._m0[33u].z * _2058;
        float _2065 = cbSceneParam._m0[33u].w * _2058;
        float _2068 = fma(_1980, cbSceneParam._m0[_2027].w, fma(_1976, cbSceneParam._m0[_2027].z, fma(_1972, cbSceneParam._m0[_2027].y, _1968 * cbSceneParam._m0[_2027].x))) / _2058;
        float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
        float _4412 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2123 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2046) / _2058, (_2065 + _2050) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 + _2046) / _2058, (_2050 - _2063) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2063) / _2058, (_2050 - _2065) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2065) / _2058, (_2063 + _2050) / _2058), _2068), 0.0)).x), vec4(0.25)));
        _2130 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
        _2131 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
        _2132 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2130 = 1.0;
        _2131 = 1.0;
        _2132 = 1.0;
    }
    float _2196;
    float _2198;
    float _2200;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2184 = fma(_1980, cbSceneParam._m0[63u].w, fma(_1976, cbSceneParam._m0[63u].z, fma(_1972, cbSceneParam._m0[63u].y, _1968 * cbSceneParam._m0[63u].x)));
        float _2185 = fma(_1980, cbSceneParam._m0[60u].w, fma(_1976, cbSceneParam._m0[60u].z, fma(_1972, cbSceneParam._m0[60u].y, _1968 * cbSceneParam._m0[60u].x))) / _2184;
        float _2186 = fma(_1980, cbSceneParam._m0[61u].w, fma(_1976, cbSceneParam._m0[61u].z, fma(_1972, cbSceneParam._m0[61u].y, _1968 * cbSceneParam._m0[61u].x))) / _2184;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2185 >= cbSceneParam._m0[64u].x) && (_2186 >= cbSceneParam._m0[64u].y)) && (_2185 <= cbSceneParam._m0[64u].z)) && (_2186 <= cbSceneParam._m0[64u].w))
        {
            float _2324 = fma(_1980, cbSceneParam._m0[62u].w, fma(_1976, cbSceneParam._m0[62u].z, fma(_1972, cbSceneParam._m0[62u].y, _1968 * cbSceneParam._m0[62u].x))) / _2184;
            float _2328 = isnan(cbSceneParam._m0[41u].w) ? _2324 : (isnan(_2324) ? cbSceneParam._m0[41u].w : max(_2324, cbSceneParam._m0[41u].w));
            float _2371 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
            float _4428 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
            float _2378 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2185, cbSceneParam._m0[33u].w + _2186), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2185, _2186 - cbSceneParam._m0[33u].z), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].z, _2186 - cbSceneParam._m0[33u].w), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2186), _2328), 0.0)).x), vec4(0.25)));
            float _2382 = 1.0 - (_2378 * cbSceneParam._m0[34u].x);
            float _2383 = 1.0 - (_2378 * cbSceneParam._m0[34u].y);
            float _2384 = 1.0 - (_2378 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
            frontier_phi_34_33_ladder_1 = isnan(_2383) ? _2131 : (isnan(_2131) ? _2383 : min(_2131, _2383));
            frontier_phi_34_33_ladder_2 = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
        }
        else
        {
            frontier_phi_34_33_ladder = _2132;
            frontier_phi_34_33_ladder_1 = _2131;
            frontier_phi_34_33_ladder_2 = _2130;
        }
        _2196 = frontier_phi_34_33_ladder_2;
        _2198 = frontier_phi_34_33_ladder_1;
        _2200 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2196 = _2130;
        _2198 = _2131;
        _2200 = _2132;
    }
    uvec4 _2205 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2207 = _2205.x * 14u;
    uint _2208 = _2207 + 13u;
    float _2215 = _906 + (-1.0);
    float _2220 = (cbLight._m0[_2208].x * _2215) + 1.0;
    float _2221 = (cbLight._m0[_2208].y * _2215) + 1.0;
    float _2222 = (cbLight._m0[_2208].z * _2215) + 1.0;
    float _2223 = (cbLight._m0[_2208].w * _2215) + 1.0;
    uint _2224 = _2207 + 5u;
    float _2230 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2234 = _2207 + 4u;
    float _2243 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2247 = _2207 | 1u;
    float _2258 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_740, _741, _742));
    float _2261 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_740, _741, _742));
    float _4464 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _4475 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2266 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2268 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2275 = ((cbLight._m0[_2224].x * _2230) * _2268) + (((cbLight._m0[_2234].x * _2196) * _2243) * _2266);
    float _2276 = ((_2230 * cbLight._m0[_2224].y) * _2268) + (((cbLight._m0[_2234].y * _2198) * _2243) * _2266);
    float _2277 = ((_2230 * cbLight._m0[_2224].z) * _2268) + (((cbLight._m0[_2234].z * _2200) * _2243) * _2266);
    uvec4 _2281 = floatBitsToUint(cbLight._m0[_2207 + 12u]);
    bool _2283 = _2281.x == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2283)
    {
        _2385 = _2275;
        _2387 = _2276;
        _2389 = _2277;
    }
    else
    {
        uint _2393 = _2207 + 6u;
        float _2409 = (dot(vec3(cbLight._m0[_2207 + 2u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4486 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2412 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2385 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2275;
        _2387 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2276;
        _2389 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2277;
    }
    bool _2392 = _2281.y == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2392)
    {
        _2447 = _2385;
        _2449 = _2387;
        _2451 = _2389;
    }
    else
    {
        uint _2620 = _2207 + 7u;
        float _2636 = (dot(vec3(cbLight._m0[_2207 + 3u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2637 = _2636 * _2636;
        float _4502 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2638 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2639 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2447 = (((cbLight._m0[_2620].x * 0.3183098733425140380859375) * _2638) * _2639) + _2385;
        _2449 = (((cbLight._m0[_2620].y * 0.3183098733425140380859375) * _2638) * _2639) + _2387;
        _2451 = (((cbLight._m0[_2620].z * 0.3183098733425140380859375) * _2638) * _2639) + _2389;
    }
    uint _2454 = _2207 + 8u;
    float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _743) * 0.949999988079071044921875);
    float _2468 = _2467 * _2467;
    float _2469 = cbLight._m0[_2207].x + _820;
    float _2470 = cbLight._m0[_2207].y + _821;
    float _2471 = cbLight._m0[_2207].z + _822;
    float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
    float _2476 = _2475 * _2469;
    float _2477 = _2475 * _2470;
    float _2478 = _2475 * _2471;
    float _2479 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2207].xyz));
    float _4518 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _4529 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2483 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2484 = dot(vec3(_740, _741, _742), vec3(_2476, _2477, _2478));
    float _4540 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2476, _2477, _2478));
    float _4551 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2468 * _2468;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
    float _2505 = 0.959999978542327880859375 - _887;
    float _2507 = 0.959999978542327880859375 - _888;
    float _2508 = 0.959999978542327880859375 - _889;
    float _2515 = 1.0 - _2468;
    float _2526 = (0.5 / (((_2483 * ((_2482 * _2515) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2515) + _2468) * _2482))) * _2482;
    float _4562 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    uint _2542 = _2207 + 9u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _743) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2247].x + _820;
    float _2556 = cbLight._m0[_2247].y + _821;
    float _2557 = cbLight._m0[_2247].z + _822;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2247].xyz));
    float _4573 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2569 = dot(vec3(_740, _741, _742), vec3(_2562, _2563, _2564));
    float _4584 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2562, _2563, _2564));
    float _4595 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2554 * _2554;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
    float _2595 = 1.0 - _2554;
    float _2605 = (0.5 / (((_2483 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2595) + _2554) * _2568))) * _2568;
    float _4606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    float _2617 = (((((_2588 * _2505) + _890) * cbLight._m0[_2542].x) * _2607) * _2230) + ((((cbLight._m0[_2454].x * _2196) * ((_2504 * _2505) + _890)) * _2528) * _2243);
    float _2618 = (((((_2588 * _2507) + _892) * cbLight._m0[_2542].y) * _2607) * _2230) + ((((cbLight._m0[_2454].y * _2198) * ((_2504 * _2507) + _892)) * _2528) * _2243);
    float _2619 = (((((_2588 * _2508) + _893) * cbLight._m0[_2542].z) * _2607) * _2230) + ((((cbLight._m0[_2454].z * _2200) * ((_2504 * _2508) + _893)) * _2528) * _2243);
    float _2675;
    float _2677;
    float _2679;
    if (_2283)
    {
        _2675 = _2617;
        _2677 = _2618;
        _2679 = _2619;
    }
    else
    {
        uint _2681 = _2207 + 2u;
        uint _2685 = _2207 + 10u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _743) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _820;
        float _2702 = cbLight._m0[_2681].y + _821;
        float _2703 = cbLight._m0[_2681].z + _822;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2681].xyz));
        float _4617 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2715 = dot(vec3(_740, _741, _742), vec3(_2708, _2709, _2710));
        float _4628 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4639 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2483 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2741) + _2700) * _2714))) * _2714;
        float _4650 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2675 = (((((_2734 * _2505) + _890) * cbLight._m0[_2685].x) * _2753) * _2754) + _2617;
        _2677 = (((((_2734 * _2507) + _892) * cbLight._m0[_2685].y) * _2753) * _2754) + _2618;
        _2679 = (((((_2734 * _2508) + _893) * cbLight._m0[_2685].z) * _2753) * _2754) + _2619;
    }
    float _2785;
    float _2787;
    float _2789;
    if (_2392)
    {
        _2785 = _2675;
        _2787 = _2677;
        _2789 = _2679;
    }
    else
    {
        uint _2796 = _2207 + 3u;
        uint _2800 = _2207 + 11u;
        float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2796].w)) * _743) * 0.949999988079071044921875);
        float _2815 = _2814 * _2814;
        float _2816 = cbLight._m0[_2796].x + _820;
        float _2817 = cbLight._m0[_2796].y + _821;
        float _2818 = cbLight._m0[_2796].z + _822;
        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
        float _2823 = _2822 * _2816;
        float _2824 = _2822 * _2817;
        float _2825 = _2822 * _2818;
        float _2826 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2796].xyz));
        float _4666 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2830 = dot(vec3(_740, _741, _742), vec3(_2823, _2824, _2825));
        float _4677 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2834 = dot(vec3(cbLight._m0[_2796].xyz), vec3(_2823, _2824, _2825));
        float _4688 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2838 = _2815 * _2815;
        float _2842 = ((_2833 * _2833) * (_2838 + (-1.0))) + 1.0;
        float _2849 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
        float _2856 = 1.0 - _2815;
        float _2866 = (0.5 / (((_2483 * ((_2829 * _2856) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2856) + _2815) * _2829))) * _2829;
        float _4699 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2868 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2838 / ((_2842 * _2842) * 3.141590118408203125));
        float _2869 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2785 = (((((_2849 * _2505) + _890) * cbLight._m0[_2800].x) * _2868) * _2869) + _2675;
        _2787 = (((((_2849 * _2507) + _892) * cbLight._m0[_2800].y) * _2868) * _2869) + _2677;
        _2789 = (((((_2849 * _2508) + _893) * cbLight._m0[_2800].z) * _2868) * _2869) + _2679;
    }
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_2205.y == 0u)
    {
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.x;
        uint _2902 = uint((float(_2890.y) * floor(float(uint(cbSceneParam._m0[85u].y * _829) / _2891))) + floor(float(uint(cbSceneParam._m0[85u].x * _828) / _2891)));
        float _2912 = (log2(_1983 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2913 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        uint _2916 = uint(isnan(14.0) ? _2913 : (isnan(_2913) ? 14.0 : min(_2913, 14.0)));
        uvec4 _2921 = texelFetch(g_lightClusterGridBuffer, int(((_2916 << 2u) + (_2902 << 6u)) >> 2u));
        uint _2922 = _2921.x;
        uint _2923 = _2890.z;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((((1u << ((_2923 >> 4u) & 15u)) + 4294967295u) & _2922) == 0u) || ((_2923 & 240u) == 0u))
        {
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
        }
        else
        {
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            uint _3153 = 0u;
            uint _3162;
            bool _3163;
            for (;;)
            {
                _3162 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                _3163 = _3162 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3163)
                {
                    frontier_phi_66_pred = _3152;
                    frontier_phi_66_pred_1 = _3151;
                    frontier_phi_66_pred_2 = _3150;
                    frontier_phi_66_pred_3 = _3149;
                    frontier_phi_66_pred_4 = _3148;
                    frontier_phi_66_pred_5 = _3147;
                }
                else
                {
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    uint _3277;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3162;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3281 = uint(findLSB(_3277)) + (_3153 << 5u);
                        uint _3278 = (_3277 + 4294967295u) & _3277;
                        uint _3283 = _3281 * 48u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3303 = (_3281 * 48u) + 4u;
                        vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3322 = (_3281 * 48u) + 8u;
                        vec3 _3333 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x));
                        float _3337 = _3297.x - _1981;
                        float _3338 = _3297.y - _1982;
                        float _3339 = _3297.z - _1983;
                        float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                        float _3343 = inversesqrt(_3340);
                        float _3344 = _3343 * _3337;
                        float _3345 = _3343 * _3338;
                        float _3346 = _3343 * _3339;
                        float _3347 = dot(vec3(_847, _850, _853), vec3(_3344, _3345, _3346));
                        float _3352 = 1.0 - (_3340 * _3297.w);
                        float _4725 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3353 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3354 = sqrt(_3340) * _3316.w;
                        float _3357 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3347) + _3358;
                        float _3364 = _3354 * _3354;
                        float _3368 = ((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3353) / ((_3364 * 0.699999988079071044921875) + 1.0);
                        float _3372 = (-0.0) - _1981;
                        float _3373 = (-0.0) - _1982;
                        float _3374 = (-0.0) - _1983;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3388 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                        float _3389 = 1.0 - _922;
                        float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                        float _3397 = _3396 * _3396;
                        float _3398 = _3397 * _3397;
                        float _3399 = _3379 + _3344;
                        float _3400 = _3380 + _3345;
                        float _3401 = _3381 + _3346;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3409 = dot(vec3(_847, _850, _853), vec3(_3379, _3380, _3381));
                        float _4741 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3413 = dot(vec3(_847, _850, _853), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                        float _4752 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                        float _3421 = _3357 * _3397;
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3347) + _3422;
                        float _4763 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3427 = 1.0 - _3397;
                        float _3437 = (0.5 / (((_3426 * ((_3412 * _3427) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3397) * _3412))) * _3426;
                        float _4774 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3448 = (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3420 * _3420) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125))) * _3353;
                        _3206 = (_3368 * _3316.x) + _3274;
                        _3207 = (_3368 * _3316.y) + _3275;
                        _3208 = (_3368 * _3316.z) + _3276;
                        _3203 = (_3448 * _3333.x) + _3271;
                        _3204 = (_3448 * _3333.y) + _3272;
                        _3205 = (_3448 * _3333.z) + _3273;
                        if (_3278 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3278;
                        }
                    }
                    frontier_phi_66_pred = _3208;
                    frontier_phi_66_pred_1 = _3207;
                    frontier_phi_66_pred_2 = _3206;
                    frontier_phi_66_pred_3 = _3205;
                    frontier_phi_66_pred_4 = _3204;
                    frontier_phi_66_pred_5 = _3203;
                }
                _3013 = frontier_phi_66_pred;
                _3011 = frontier_phi_66_pred_1;
                _3009 = frontier_phi_66_pred_2;
                _3007 = frontier_phi_66_pred_3;
                _3005 = frontier_phi_66_pred_4;
                _3003 = frontier_phi_66_pred_5;
                uint _3154 = _3153 + 1u;
                if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3147 = _3003;
                    _3148 = _3005;
                    _3149 = _3007;
                    _3150 = _3009;
                    _3151 = _3011;
                    _3152 = _3013;
                    _3153 = _3154;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
        }
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.z;
        uint _3019 = (_3017 >> 8u) & 15u;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((4294967295u << _3019) & _2922) == 0u)
        {
            _3115 = _3002;
            _3117 = _3004;
            _3119 = _3006;
            _3121 = _3008;
            _3123 = _3010;
            _3125 = _3012;
        }
        else
        {
            float _3140 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
            float _3141 = _3140 * _1981;
            float _3142 = _3140 * _1982;
            float _3143 = _3140 * _1983;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3019 < ((_3017 >> 12u) & 15u))
            {
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3254 = _3002;
                float _3255 = _3004;
                float _3256 = _3006;
                float _3257 = _3008;
                float _3258 = _3010;
                float _3259 = _3012;
                uint _3260 = _3019;
                uint _3269;
                bool _3270;
                for (;;)
                {
                    _3269 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                    _3270 = _3269 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3270)
                    {
                        frontier_phi_72_pred = _3259;
                        frontier_phi_72_pred_1 = _3258;
                        frontier_phi_72_pred_2 = _3257;
                        frontier_phi_72_pred_3 = _3256;
                        frontier_phi_72_pred_4 = _3255;
                        frontier_phi_72_pred_5 = _3254;
                    }
                    else
                    {
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3466 = _3254;
                        float _3467 = _3255;
                        float _3468 = _3256;
                        float _3469 = _3257;
                        float _3470 = _3258;
                        float _3471 = _3259;
                        uint _3472 = _3269;
                        uint _3473;
                        vec4 _3498;
                        float _3499;
                        vec4 _3514;
                        vec3 _3526;
                        vec4 _3541;
                        vec4 _3556;
                        float _3602;
                        bool _3603;
                        for (;;)
                        {
                            uint _3483 = ((_3260 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3472));
                            _3473 = (_3472 + 4294967295u) & _3472;
                            uint _3485 = _3483 * 40u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3499 = _3498.w;
                            uint _3501 = (_3483 * 40u) + 4u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3483 * 40u) + 8u;
                            _3526 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x));
                            uint _3528 = (_3483 * 40u) + 16u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3483 * 40u) + 20u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3483 * 40u) + 24u;
                            vec4 _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3577 = (_3483 * 40u) + 28u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3602 = fma(_1983, _3590.z, fma(_1982, _3590.y, _3590.x * _1981)) + _3590.w;
                            _3603 = !((fma(_1983, _3571.z, fma(_1982, _3571.y, _3571.x * _1981)) + _3571.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3603)
                            {
                                float _3630 = _3498.x - _1981;
                                float _3631 = _3498.y - _1982;
                                float _3632 = _3498.z - _1983;
                                float _3633 = dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632));
                                float _3636 = inversesqrt(_3633);
                                float _3637 = _3636 * _3630;
                                float _3638 = _3636 * _3631;
                                float _3639 = _3636 * _3632;
                                float _3643 = 1.0 - (_3633 / (_3499 * _3499));
                                float _4785 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3648 = sqrt(_3633) * _3514.w;
                                float _3650 = 1.39999997615814208984375 / (_3648 + 1.39999997615814208984375);
                                float _3651 = _3650 * _3650;
                                float _3654 = ((1.0 - _3651) * dot(vec3(_3637, _3638, _3639), vec3(_847, _850, _853))) + _3651;
                                float _3657 = _3648 * _3648;
                                float _3661 = (fma(_1983, _3541.z, fma(_1982, _3541.y, _3541.x * _1981)) + _3541.w) / _3602;
                                float _3662 = (fma(_1983, _3556.z, fma(_1982, _3556.y, _3556.x * _1981)) + _3556.w) / _3602;
                                float _3666 = 1.0 - dot(vec2(_3661, _3662), vec2(_3661, _3662));
                                float _4801 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3668 = _3667 * (((isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0))) * _3644) / ((_3657 * 0.699999988079071044921875) + 1.0));
                                float _3680 = exp2(log2(1.0 / ((_3657 * 3.5) + 5.0)) * 0.25);
                                float _3681 = 1.0 - _922;
                                float _3688 = sqrt(1.0 - ((1.0 - (_3681 * _3681)) * (1.0 - (_3680 * _3680))));
                                float _3689 = _3688 * _3688;
                                float _3690 = _3689 * _3689;
                                float _3691 = _3637 - _3141;
                                float _3692 = _3638 - _3142;
                                float _3693 = _3639 - _3143;
                                float _3697 = inversesqrt(dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693)));
                                float _3701 = dot(vec3(_847, _850, _853), vec3((-0.0) - _3141, (-0.0) - _3142, (-0.0) - _3143));
                                float _4812 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3705 = dot(vec3(_847, _850, _853), vec3(_3697 * _3691, _3697 * _3692, _3697 * _3693));
                                float _4823 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3712 = ((_3708 * _3708) * (_3690 + (-1.0))) + 1.0;
                                float _3713 = _3650 * _3689;
                                float _3714 = _3713 * _3713;
                                float _3720 = ((1.0 - _3714) * dot(vec3(_847, _850, _853), vec3(_3637, _3638, _3639))) + _3714;
                                float _4834 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3722 = 1.0 - _3689;
                                float _3732 = (0.5 / (((_3721 * ((_3704 * _3722) + _3689)) + 9.9999999392252902907785028219223e-09) + (((_3721 * _3722) + _3689) * _3704))) * _3721;
                                float _4845 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3742 = (_3667 * _3644) * (((_3690 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3712 * _3712) * ((_3657 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3668 * _3514.y;
                                frontier_phi_78_pred_1 = _3668 * _3514.x;
                                frontier_phi_78_pred_2 = _3742 * _3526.z;
                                frontier_phi_78_pred_3 = _3742 * _3526.y;
                                frontier_phi_78_pred_4 = _3742 * _3526.x;
                                frontier_phi_78_pred_5 = _3668 * _3514.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3750 = frontier_phi_78_pred;
                            _3749 = frontier_phi_78_pred_1;
                            _3748 = frontier_phi_78_pred_2;
                            _3747 = frontier_phi_78_pred_3;
                            _3746 = frontier_phi_78_pred_4;
                            _3751 = frontier_phi_78_pred_5;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            if (_3473 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3473;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3458;
                        frontier_phi_72_pred_1 = _3457;
                        frontier_phi_72_pred_2 = _3456;
                        frontier_phi_72_pred_3 = _3455;
                        frontier_phi_72_pred_4 = _3454;
                        frontier_phi_72_pred_5 = _3453;
                    }
                    _3126 = frontier_phi_72_pred;
                    _3124 = frontier_phi_72_pred_1;
                    _3122 = frontier_phi_72_pred_2;
                    _3120 = frontier_phi_72_pred_3;
                    _3118 = frontier_phi_72_pred_4;
                    _3116 = frontier_phi_72_pred_5;
                    uint _3261 = _3260 + 1u;
                    if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3254 = _3116;
                        _3255 = _3118;
                        _3256 = _3120;
                        _3257 = _3122;
                        _3258 = _3124;
                        _3259 = _3126;
                        _3260 = _3261;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3126;
                frontier_phi_60_61_ladder_1 = _3124;
                frontier_phi_60_61_ladder_2 = _3120;
                frontier_phi_60_61_ladder_3 = _3118;
                frontier_phi_60_61_ladder_4 = _3116;
                frontier_phi_60_61_ladder_5 = _3122;
            }
            else
            {
                frontier_phi_60_61_ladder = _3012;
                frontier_phi_60_61_ladder_1 = _3010;
                frontier_phi_60_61_ladder_2 = _3006;
                frontier_phi_60_61_ladder_3 = _3004;
                frontier_phi_60_61_ladder_4 = _3002;
                frontier_phi_60_61_ladder_5 = _3008;
            }
            _3115 = frontier_phi_60_61_ladder_4;
            _3117 = frontier_phi_60_61_ladder_3;
            _3119 = frontier_phi_60_61_ladder_2;
            _3121 = frontier_phi_60_61_ladder_5;
            _3123 = frontier_phi_60_61_ladder_1;
            _3125 = frontier_phi_60_61_ladder;
        }
        float _3130 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
        _2935 = (_3130 * _3121) + _2447;
        _2937 = (_3130 * _3123) + _2449;
        _2939 = (_3130 * _3125) + _2451;
        _2941 = ((_3115 * _890) * _3130) + _2785;
        _2943 = ((_3117 * _892) * _3130) + _2787;
        _2945 = ((_3119 * _893) * _3130) + _2789;
    }
    else
    {
        _2935 = _2447;
        _2937 = _2449;
        _2939 = _2451;
        _2941 = _2785;
        _2943 = _2787;
        _2945 = _2789;
    }
    float _4861 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4872 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4883 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    uint _2965 = _246 + 6u;
    float _2973 = _828 / cbSceneParam._m0[86u].x;
    float _2974 = _829 / cbSceneParam._m0[86u].y;
    vec4 _2988 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, (log2((isnan(cbSceneParam._m0[77u].w) ? _762 : (isnan(_762) ? cbSceneParam._m0[77u].w : min(_762, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2990 = _2988.x;
    float _2991 = _2988.y;
    float _2992 = _2988.z;
    float _2993 = _2988.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_762 > cbSceneParam._m0[78u].w)
    {
        float _3027 = isnan(_762) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _762 : min(cbSceneParam._m0[80u].w, _762));
        float _3028 = _3027 / _762;
        float _3039 = _3028 * _813;
        float _3040 = _814 * _3028;
        float _3041 = (-0.0) - _3040;
        float _3043 = _3028 * _815;
        float _3045 = (cbSceneParam._m0[77u].w * _3041) / _3027;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3040;
        float _3053 = sqrt(((_3039 * _3039) + (_3040 * _3040)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3027)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3041 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3176 = 1.0 / cbSceneParam._m0[80u].x;
            float _3177 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3178 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            _3216 = ((abs(_3053 / _3041) * cbSceneParam._m0[80u].y) * ((((_3187 - _3188) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))))) * _3176)) - ((exp2(_3063 * _3187) - exp2(_3063 * _3188)) * _3176))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2993);
        _3065 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2990;
        _3067 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2991;
        _3069 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2992;
        _3071 = _3227 * _2993;
    }
    else
    {
        _3065 = _2990;
        _3067 = _2991;
        _3069 = _2992;
        _3071 = _2993;
    }
    float _3083 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3084 = _3083 == 3.0;
    float _3085 = log2(_3071);
    float _3092 = exp2(_3085 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2935 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _906))) + ((_2941 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _3093 = exp2(_3085 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2937 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _906))) + ((_2943 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _3094 = exp2(_3085 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2939 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _906))) + ((_2945 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _3103 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3103 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.y = _3103 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.z = _3103 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
    SV_Target.w = cbInstanceData._m0[_2965].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2965].w;
}


