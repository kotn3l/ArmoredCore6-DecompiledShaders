#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1235;
float _3900;
float _3901;
float _3902;
float _3903;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3912 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _437 = ((_407.z - _428) * _380) + _428;
    float _440 = ((((_407.x - _426) * _380) + _426) * 2.0) + (-1.0);
    float _442 = ((((_407.y - _427) * _380) + _427) * 2.0) + (-1.0);
    float _443 = dot(vec2(_440, _442), vec2(_440, _442));
    float _3923 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))));
    float _451 = fma(_448, _230, fma(_442, _237, _440 * _223));
    float _454 = fma(_448, _231, fma(_442, _238, _440 * _224));
    float _457 = fma(_448, _232, fma(_442, _239, _440 * _225));
    float _461 = inversesqrt(dot(vec3(_451, _454, _457), vec3(_451, _454, _457)));
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _510 = ((_505 - _506) * cbMtdParam._m0[24u].z) + _506;
    float _512 = (cbMtdParam._m0[19u].x + dot(vec4(_461 * _451, _461 * _454, _461 * _457, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_510 * cbMtdParam._m0[21u].z);
    float _3934 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _528 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_510 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3945 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _533 = ((_513 * (cbMtdParam._m0[17u].x - _387)) * _529) + _387;
    float _534 = ((_513 * (cbMtdParam._m0[17u].y - _388)) * _529) + _388;
    float _535 = ((_513 * (cbMtdParam._m0[17u].z - _389)) * _529) + _389;
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _563 = _561.x;
    float _581 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _563) * _380) + _563;
    float _585 = ((_547.x - _581) * cbMtdParam._m0[19u].z) + _581;
    float _588 = _585 - ((_529 * _513) * _585);
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _608 = (_601.x * 2.0) + (-1.0);
    float _609 = (_601.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3956 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _619 = (((_601.z - _437) * _513) * _529) + _437;
    float _634 = (((cbMtdParam._m0[21u].x * _440) + ((_608 - _440) * _513)) * _529) + _440;
    float _635 = (((cbMtdParam._m0[21u].x * _442) + ((_609 - _442) * _513)) * _529) + _442;
    float _636 = (((sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) - _448) * _513) * _529) + _448;
    float _641 = cbMtdParam._m0[22u].x + _477.w;
    float _644 = fma(_636, _230, fma(_635, _237, _634 * _223));
    float _647 = fma(_636, _231, fma(_635, _238, _634 * _224));
    float _650 = fma(_636, _232, fma(_635, _239, _634 * _225));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3967 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _658 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3989 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4000 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4011 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _4022 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _663 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    vec4 _742 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _744 = _742.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _916 = sqrt(((_728 * _728) + (_729 * _729)) + (_730 * _730));
        float _922 = (cbMatDynParam._m0[5u].x * _916) + cbMatDynParam._m0[5u].y;
        float _4033 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _927 = (cbMatDynParam._m0[5u].z * _916) + cbMatDynParam._m0[5u].w;
        float _4044 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) - _923)) + _923) < ((_744 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _755 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _756 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _774 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _777 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _780 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _793 = _242 + 9u;
    uint _794 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_794].z;
    float _4055 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _806 = 1.0 - _663;
    float _807 = _803 * _806;
    float _808 = _804 * _806;
    float _809 = _805 * _806;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _663;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _663;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _663;
    float _817 = _814 + 0.039999999105930328369140625;
    float _819 = _815 + 0.039999999105930328369140625;
    float _820 = _816 + 0.039999999105930328369140625;
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _755, cbSceneParam._m0[86u].y * _756));
    float _833 = ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * TEXCOORD_5.w) * _829.x;
    float _834 = dot(vec3(_655, _656, _657), vec3(_735, _736, _737));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _655) - _735;
    float _842 = (_837 * _656) - _736;
    float _843 = (_837 * _657) - _737;
    float _847 = abs(dot(vec3(_735, _736, _737), vec3(_655, _656, _657)));
    float _4088 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_658);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _868 = (1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _869 = _862 * _849;
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _963 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _967 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _992 = _897 + _655;
        float _993 = _901 + _656;
        float _994 = _905 + _657;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_655, _656, _657), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _4136 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_655, _656, _657), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _4169 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_655, _656, _657), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4202 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1281 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1285 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1308 = _897 + _655;
        float _1309 = _901 + _656;
        float _1310 = _905 + _657;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_655, _656, _657), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4265 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_655, _656, _657), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4298 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_655, _656, _657), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4331 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = _1235;
        _1555 = _1235;
        _1556 = _1235;
        _1557 = _1235;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1247)) + _1247;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1248)) + _1248;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _841 * 0.5;
    float _1615 = _842 * 0.5;
    float _1616 = _843 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1731 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1735 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1739 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1742 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1745 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1748 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1776;
        if (_1742 > 0.0)
        {
            _1776 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1776 = frontier_phi_17_15_ladder;
        }
        float _1948;
        if (_1745 > 0.0)
        {
            _1948 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1948 = frontier_phi_26_22_ladder;
        }
        float _2243;
        if (_1748 > 0.0)
        {
            _2243 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2243 = frontier_phi_38_33_ladder;
        }
        float _2245 = isnan(_1948) ? _1776 : (isnan(_1776) ? _1948 : min(_1776, _1948));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1742) + _1731;
        float _2251 = (_2246 * _1745) + _1735;
        float _2252 = (_2246 * _1748) + _1739;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_16_38_ladder = _2397.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2397.x * cbModelParam._m0[1u].y;
        }
        _1764 = frontier_phi_16_38_ladder_2;
        _1766 = frontier_phi_16_38_ladder_1;
        _1768 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1683);
        _1764 = _1752.x * cbModelParam._m0[1u].y;
        _1766 = _1752.y * cbModelParam._m0[1u].y;
        _1768 = _1752.z * cbModelParam._m0[1u].y;
    }
    float _1772 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1772 : min(cbModelParam._m0[25u].w, _1772));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1841 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1844 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1953;
        if (_1838 > 0.0)
        {
            _1953 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1953 = frontier_phi_28_24_ladder;
        }
        float _2270;
        if (_1841 > 0.0)
        {
            _2270 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2270 = frontier_phi_40_35_ladder;
        }
        float _2608;
        if (_1844 > 0.0)
        {
            _2608 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2608 = frontier_phi_50_47_ladder;
        }
        float _2610 = isnan(_2270) ? _1953 : (isnan(_1953) ? _2270 : min(_1953, _2270));
        float _2611 = isnan(_2608) ? _2610 : (isnan(_2610) ? _2608 : min(_2610, _2608));
        float _2615 = (_2611 * _1838) + _1827;
        float _2616 = (_2611 * _1841) + _1831;
        float _2617 = (_2611 * _1844) + _1835;
        float _2618 = _2611 * 9.9999997473787516355514526367188e-05;
        float _2619 = (-1.0) - _2618;
        float _2621 = _2618 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2617 > _2621) || ((_2617 < _2619) || ((_2616 > _2621) || ((_2616 < _2619) || ((_2615 < _2619) || (_2615 > _2621))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2617, cbModelParam._m0[17u].z, fma(_2616, cbModelParam._m0[17u].y, _2615 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2617, cbModelParam._m0[18u].z, fma(_2616, cbModelParam._m0[18u].y, _2615 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2617, cbModelParam._m0[19u].z, fma(_2616, cbModelParam._m0[19u].y, _2615 * cbModelParam._m0[19u].x))), _1773);
            frontier_phi_25_50_ladder = _2739.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2739.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_25_50_ladder_2;
        _1865 = frontier_phi_25_50_ladder_1;
        _1867 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1773);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1880 = (((_868 * _817) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1882 = (((_868 * _819) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1884 = (((_868 * _820) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1940 = _1927 / _1939;
    float _1941 = _1931 / _1939;
    float _1942 = _1935 / _1939;
    float _2089;
    float _2090;
    float _2091;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1969 = ((uint(_1942 > cbSceneParam._m0[59u].y) + uint(_1942 > cbSceneParam._m0[59u].x)) + uint(_1942 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1970 = _1969 + 43u;
        uint _1978 = _1969 + 44u;
        uint _1986 = _1969 + 45u;
        uint _1994 = _1969 + 46u;
        float _2005 = fma(_1939, cbSceneParam._m0[_1970].w, fma(_1935, cbSceneParam._m0[_1970].z, fma(_1931, cbSceneParam._m0[_1970].y, _1927 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1939, cbSceneParam._m0[_1978].w, fma(_1935, cbSceneParam._m0[_1978].z, fma(_1931, cbSceneParam._m0[_1978].y, _1927 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1939, cbSceneParam._m0[_1994].w, fma(_1935, cbSceneParam._m0[_1994].z, fma(_1931, cbSceneParam._m0[_1994].y, _1927 * cbSceneParam._m0[_1994].x)));
        float _2022 = cbSceneParam._m0[33u].z * _2017;
        float _2024 = cbSceneParam._m0[33u].w * _2017;
        float _2027 = fma(_1939, cbSceneParam._m0[_1986].w, fma(_1935, cbSceneParam._m0[_1986].z, fma(_1931, cbSceneParam._m0[_1986].y, _1927 * cbSceneParam._m0[_1986].x))) / _2017;
        float _2075 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
        float _4457 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2082 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 + _2005) / _2017, (_2024 + _2009) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 + _2005) / _2017, (_2009 - _2022) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2022) / _2017, (_2009 - _2024) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2024) / _2017, (_2022 + _2009) / _2017), _2027), 0.0)).x), vec4(0.25)));
        _2089 = 1.0 - (_2082 * cbSceneParam._m0[34u].x);
        _2090 = 1.0 - (_2082 * cbSceneParam._m0[34u].y);
        _2091 = 1.0 - (_2082 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2089 = 1.0;
        _2090 = 1.0;
        _2091 = 1.0;
    }
    float _2155;
    float _2157;
    float _2159;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2143 = fma(_1939, cbSceneParam._m0[63u].w, fma(_1935, cbSceneParam._m0[63u].z, fma(_1931, cbSceneParam._m0[63u].y, _1927 * cbSceneParam._m0[63u].x)));
        float _2144 = fma(_1939, cbSceneParam._m0[60u].w, fma(_1935, cbSceneParam._m0[60u].z, fma(_1931, cbSceneParam._m0[60u].y, _1927 * cbSceneParam._m0[60u].x))) / _2143;
        float _2145 = fma(_1939, cbSceneParam._m0[61u].w, fma(_1935, cbSceneParam._m0[61u].z, fma(_1931, cbSceneParam._m0[61u].y, _1927 * cbSceneParam._m0[61u].x))) / _2143;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2144 >= cbSceneParam._m0[64u].x) && (_2145 >= cbSceneParam._m0[64u].y)) && (_2144 <= cbSceneParam._m0[64u].z)) && (_2145 <= cbSceneParam._m0[64u].w))
        {
            float _2283 = fma(_1939, cbSceneParam._m0[62u].w, fma(_1935, cbSceneParam._m0[62u].z, fma(_1931, cbSceneParam._m0[62u].y, _1927 * cbSceneParam._m0[62u].x))) / _2143;
            float _2287 = isnan(cbSceneParam._m0[41u].w) ? _2283 : (isnan(_2283) ? cbSceneParam._m0[41u].w : max(_2283, cbSceneParam._m0[41u].w));
            float _2330 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
            float _4473 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
            float _2337 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2144, cbSceneParam._m0[33u].w + _2145), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2144, _2145 - cbSceneParam._m0[33u].z), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].z, _2145 - cbSceneParam._m0[33u].w), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2145), _2287), 0.0)).x), vec4(0.25)));
            float _2341 = 1.0 - (_2337 * cbSceneParam._m0[34u].x);
            float _2342 = 1.0 - (_2337 * cbSceneParam._m0[34u].y);
            float _2343 = 1.0 - (_2337 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
            frontier_phi_37_36_ladder_1 = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
            frontier_phi_37_36_ladder_2 = isnan(_2341) ? _2089 : (isnan(_2089) ? _2341 : min(_2089, _2341));
        }
        else
        {
            frontier_phi_37_36_ladder = _2091;
            frontier_phi_37_36_ladder_1 = _2090;
            frontier_phi_37_36_ladder_2 = _2089;
        }
        _2155 = frontier_phi_37_36_ladder_2;
        _2157 = frontier_phi_37_36_ladder_1;
        _2159 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2155 = _2089;
        _2157 = _2090;
        _2159 = _2091;
    }
    uvec4 _2164 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2166 = _2164.x * 14u;
    uint _2167 = _2166 + 13u;
    float _2174 = _833 + (-1.0);
    float _2179 = (cbLight._m0[_2167].x * _2174) + 1.0;
    float _2180 = (cbLight._m0[_2167].y * _2174) + 1.0;
    float _2181 = (cbLight._m0[_2167].z * _2174) + 1.0;
    float _2182 = (cbLight._m0[_2167].w * _2174) + 1.0;
    uint _2183 = _2166 + 5u;
    float _2189 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2193 = _2166 + 4u;
    float _2202 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2206 = _2166 | 1u;
    float _2217 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_655, _656, _657));
    float _2220 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_655, _656, _657));
    float _4509 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _4520 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2225 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * 0.3183098733425140380859375;
    float _2227 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2234 = ((cbLight._m0[_2183].x * _2189) * _2227) + (((cbLight._m0[_2193].x * _2155) * _2202) * _2225);
    float _2235 = ((_2189 * cbLight._m0[_2183].y) * _2227) + (((cbLight._m0[_2193].y * _2157) * _2202) * _2225);
    float _2236 = ((_2189 * cbLight._m0[_2183].z) * _2227) + (((cbLight._m0[_2193].z * _2159) * _2202) * _2225);
    uvec4 _2240 = floatBitsToUint(cbLight._m0[_2166 + 12u]);
    bool _2242 = _2240.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2242)
    {
        _2344 = _2234;
        _2346 = _2235;
        _2348 = _2236;
    }
    else
    {
        uint _2352 = _2166 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2166 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4531 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2371 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2234;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2235;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2236;
    }
    bool _2351 = _2240.y == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2351)
    {
        _2406 = _2344;
        _2408 = _2346;
        _2410 = _2348;
    }
    else
    {
        uint _2579 = _2166 + 7u;
        float _2595 = (dot(vec3(cbLight._m0[_2166 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2596 = _2595 * _2595;
        float _4547 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2597 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2598 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2406 = (((cbLight._m0[_2579].x * 0.3183098733425140380859375) * _2597) * _2598) + _2344;
        _2408 = (((cbLight._m0[_2579].y * 0.3183098733425140380859375) * _2597) * _2598) + _2346;
        _2410 = (((cbLight._m0[_2579].z * 0.3183098733425140380859375) * _2597) * _2598) + _2348;
    }
    uint _2413 = _2166 + 8u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _658) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2166].x + _735;
    float _2429 = cbLight._m0[_2166].y + _736;
    float _2430 = cbLight._m0[_2166].z + _737;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2166].xyz));
    float _4563 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _4574 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2442 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2443 = dot(vec3(_655, _656, _657), vec3(_2435, _2436, _2437));
    float _4585 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2435, _2436, _2437));
    float _4596 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2427 * _2427;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2464 = 0.959999978542327880859375 - _814;
    float _2466 = 0.959999978542327880859375 - _815;
    float _2467 = 0.959999978542327880859375 - _816;
    float _2474 = 1.0 - _2427;
    float _2485 = (0.5 / (((_2442 * ((_2441 * _2474) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2474) + _2427) * _2441))) * _2441;
    float _4607 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    uint _2501 = _2166 + 9u;
    float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _658) * 0.949999988079071044921875);
    float _2513 = _2512 * _2512;
    float _2514 = cbLight._m0[_2206].x + _735;
    float _2515 = cbLight._m0[_2206].y + _736;
    float _2516 = cbLight._m0[_2206].z + _737;
    float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
    float _2521 = _2520 * _2514;
    float _2522 = _2520 * _2515;
    float _2523 = _2520 * _2516;
    float _2524 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2206].xyz));
    float _4618 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2528 = dot(vec3(_655, _656, _657), vec3(_2521, _2522, _2523));
    float _4629 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2521, _2522, _2523));
    float _4640 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2513 * _2513;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
    float _2554 = 1.0 - _2513;
    float _2564 = (0.5 / (((_2442 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2554) + _2513) * _2527))) * _2527;
    float _4651 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2566 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    float _2576 = (((((_2547 * _2464) + _817) * cbLight._m0[_2501].x) * _2566) * _2189) + ((((cbLight._m0[_2413].x * _2155) * ((_2463 * _2464) + _817)) * _2487) * _2202);
    float _2577 = (((((_2547 * _2466) + _819) * cbLight._m0[_2501].y) * _2566) * _2189) + ((((cbLight._m0[_2413].y * _2157) * ((_2463 * _2466) + _819)) * _2487) * _2202);
    float _2578 = (((((_2547 * _2467) + _820) * cbLight._m0[_2501].z) * _2566) * _2189) + ((((cbLight._m0[_2413].z * _2159) * ((_2463 * _2467) + _820)) * _2487) * _2202);
    float _2634;
    float _2636;
    float _2638;
    if (_2242)
    {
        _2634 = _2576;
        _2636 = _2577;
        _2638 = _2578;
    }
    else
    {
        uint _2640 = _2166 + 2u;
        uint _2644 = _2166 + 10u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _658) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _735;
        float _2661 = cbLight._m0[_2640].y + _736;
        float _2662 = cbLight._m0[_2640].z + _737;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2640].xyz));
        float _4662 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2674 = dot(vec3(_655, _656, _657), vec3(_2667, _2668, _2669));
        float _4673 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4684 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0);
        float _2700 = 1.0 - _2659;
        float _2710 = (0.5 / (((_2442 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2700) + _2659) * _2673))) * _2673;
        float _4695 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2634 = (((((_2693 * _2464) + _817) * cbLight._m0[_2644].x) * _2712) * _2713) + _2576;
        _2636 = (((((_2693 * _2466) + _819) * cbLight._m0[_2644].y) * _2712) * _2713) + _2577;
        _2638 = (((((_2693 * _2467) + _820) * cbLight._m0[_2644].z) * _2712) * _2713) + _2578;
    }
    float _2744;
    float _2746;
    float _2748;
    if (_2351)
    {
        _2744 = _2634;
        _2746 = _2636;
        _2748 = _2638;
    }
    else
    {
        uint _2755 = _2166 + 3u;
        uint _2759 = _2166 + 11u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _658) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _735;
        float _2776 = cbLight._m0[_2755].y + _736;
        float _2777 = cbLight._m0[_2755].z + _737;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2755].xyz));
        float _4711 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2789 = dot(vec3(_655, _656, _657), vec3(_2782, _2783, _2784));
        float _4722 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4733 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2808 = exp2(log2(1.0 - (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) * 5.0);
        float _2815 = 1.0 - _2774;
        float _2825 = (0.5 / (((_2442 * ((_2788 * _2815) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2815) + _2774) * _2788))) * _2788;
        float _4744 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2744 = (((((_2808 * _2464) + _817) * cbLight._m0[_2759].x) * _2827) * _2828) + _2634;
        _2746 = (((((_2808 * _2466) + _819) * cbLight._m0[_2759].y) * _2827) * _2828) + _2636;
        _2748 = (((((_2808 * _2467) + _820) * cbLight._m0[_2759].z) * _2827) * _2828) + _2638;
    }
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_2164.y == 0u)
    {
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.x;
        uint _2861 = uint((float(_2849.y) * floor(float(uint(cbSceneParam._m0[85u].y * _756) / _2850))) + floor(float(uint(cbSceneParam._m0[85u].x * _755) / _2850)));
        float _2871 = (log2(_1942 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2872 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        uint _2875 = uint(isnan(14.0) ? _2872 : (isnan(_2872) ? 14.0 : min(_2872, 14.0)));
        uvec4 _2880 = texelFetch(g_lightClusterGridBuffer, int(((_2875 << 2u) + (_2861 << 6u)) >> 2u));
        uint _2881 = _2880.x;
        uint _2882 = _2849.z;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((((1u << ((_2882 >> 4u) & 15u)) + 4294967295u) & _2881) == 0u) || ((_2882 & 240u) == 0u))
        {
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
        }
        else
        {
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            uint _3120 = 0u;
            uint _3129;
            bool _3130;
            for (;;)
            {
                _3129 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                _3130 = _3129 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3130)
                {
                    frontier_phi_71_pred = _3119;
                    frontier_phi_71_pred_1 = _3118;
                    frontier_phi_71_pred_2 = _3117;
                    frontier_phi_71_pred_3 = _3116;
                    frontier_phi_71_pred_4 = _3115;
                    frontier_phi_71_pred_5 = _3114;
                }
                else
                {
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    uint _3265;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3129;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    for (;;)
                    {
                        uint _3269 = uint(findLSB(_3265)) + (_3120 << 5u);
                        uint _3266 = (_3265 + 4294967295u) & _3265;
                        uint _3271 = _3269 * 48u;
                        vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3291 = (_3269 * 48u) + 4u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3310 = (_3269 * 48u) + 8u;
                        vec3 _3321 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x));
                        float _3325 = _3285.x - _1940;
                        float _3326 = _3285.y - _1941;
                        float _3327 = _3285.z - _1942;
                        float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                        float _3331 = inversesqrt(_3328);
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3335 = dot(vec3(_774, _777, _780), vec3(_3332, _3333, _3334));
                        float _3340 = 1.0 - (_3328 * _3285.w);
                        float _4770 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3341 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3342 = sqrt(_3328) * _3304.w;
                        float _3345 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3335) + _3346;
                        float _3352 = _3342 * _3342;
                        float _3356 = ((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3341) / ((_3352 * 0.699999988079071044921875) + 1.0);
                        float _3360 = (-0.0) - _1940;
                        float _3361 = (-0.0) - _1941;
                        float _3362 = (-0.0) - _1942;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3376 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                        float _3377 = 1.0 - _849;
                        float _3384 = sqrt(1.0 - ((1.0 - (_3377 * _3377)) * (1.0 - (_3376 * _3376))));
                        float _3385 = _3384 * _3384;
                        float _3386 = _3385 * _3385;
                        float _3387 = _3367 + _3332;
                        float _3388 = _3368 + _3333;
                        float _3389 = _3369 + _3334;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3397 = dot(vec3(_774, _777, _780), vec3(_3367, _3368, _3369));
                        float _4786 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3400 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3401 = dot(vec3(_774, _777, _780), vec3(_3393 * _3387, _3393 * _3388, _3393 * _3389));
                        float _4797 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3408 = ((_3404 * _3404) * (_3386 + (-1.0))) + 1.0;
                        float _3409 = _3345 * _3385;
                        float _3410 = _3409 * _3409;
                        float _3413 = ((1.0 - _3410) * _3335) + _3410;
                        float _4808 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3414 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3415 = 1.0 - _3385;
                        float _3425 = (0.5 / (((_3414 * ((_3400 * _3415) + _3385)) + 9.9999999392252902907785028219223e-09) + (((_3414 * _3415) + _3385) * _3400))) * _3414;
                        float _4819 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3436 = (((_3386 * 3.1415927410125732421875) * (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) / ((_3408 * _3408) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125))) * _3341;
                        _3189 = (_3356 * _3304.x) + _3262;
                        _3190 = (_3356 * _3304.y) + _3263;
                        _3191 = (_3356 * _3304.z) + _3264;
                        _3186 = (_3436 * _3321.x) + _3259;
                        _3187 = (_3436 * _3321.y) + _3260;
                        _3188 = (_3436 * _3321.z) + _3261;
                        if (_3266 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3266;
                        }
                    }
                    frontier_phi_71_pred = _3191;
                    frontier_phi_71_pred_1 = _3190;
                    frontier_phi_71_pred_2 = _3189;
                    frontier_phi_71_pred_3 = _3188;
                    frontier_phi_71_pred_4 = _3187;
                    frontier_phi_71_pred_5 = _3186;
                }
                _2972 = frontier_phi_71_pred;
                _2970 = frontier_phi_71_pred_1;
                _2968 = frontier_phi_71_pred_2;
                _2966 = frontier_phi_71_pred_3;
                _2964 = frontier_phi_71_pred_4;
                _2962 = frontier_phi_71_pred_5;
                uint _3121 = _3120 + 1u;
                if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3114 = _2962;
                    _3115 = _2964;
                    _3116 = _2966;
                    _3117 = _2968;
                    _3118 = _2970;
                    _3119 = _2972;
                    _3120 = _3121;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
        }
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.z;
        uint _2978 = (_2976 >> 8u) & 15u;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        if (((4294967295u << _2978) & _2881) == 0u)
        {
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
            _3090 = _2969;
            _3092 = _2971;
        }
        else
        {
            float _3107 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
            float _3108 = _3107 * _1940;
            float _3109 = _3107 * _1941;
            float _3110 = _3107 * _1942;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2978 < ((_2976 >> 12u) & 15u))
            {
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3242 = _2961;
                float _3243 = _2963;
                float _3244 = _2965;
                float _3245 = _2967;
                float _3246 = _2969;
                float _3247 = _2971;
                uint _3248 = _2978;
                uint _3257;
                bool _3258;
                for (;;)
                {
                    _3257 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                    _3258 = _3257 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3258)
                    {
                        frontier_phi_82_pred = _3247;
                        frontier_phi_82_pred_1 = _3246;
                        frontier_phi_82_pred_2 = _3245;
                        frontier_phi_82_pred_3 = _3244;
                        frontier_phi_82_pred_4 = _3243;
                        frontier_phi_82_pred_5 = _3242;
                    }
                    else
                    {
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3463 = _3242;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        uint _3469 = _3257;
                        uint _3470;
                        vec4 _3495;
                        float _3496;
                        vec4 _3511;
                        vec3 _3523;
                        vec4 _3538;
                        vec4 _3554;
                        float _3600;
                        bool _3601;
                        for (;;)
                        {
                            uint _3480 = ((_3248 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3469));
                            _3470 = (_3469 + 4294967295u) & _3469;
                            uint _3482 = _3480 * 40u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3496 = _3495.w;
                            uint _3498 = (_3480 * 40u) + 4u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3480 * 40u) + 8u;
                            _3523 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x));
                            uint _3525 = (_3480 * 40u) + 16u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3541 = (_3480 * 40u) + 20u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3480 * 40u) + 24u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3575 = (_3480 * 40u) + 28u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            _3600 = fma(_1942, _3588.z, fma(_1941, _3588.y, _3588.x * _1940)) + _3588.w;
                            _3601 = !((fma(_1942, _3569.z, fma(_1941, _3569.y, _3569.x * _1940)) + _3569.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3601)
                            {
                                float _3628 = _3495.x - _1940;
                                float _3629 = _3495.y - _1941;
                                float _3630 = _3495.z - _1942;
                                float _3631 = dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630));
                                float _3634 = inversesqrt(_3631);
                                float _3635 = _3634 * _3628;
                                float _3636 = _3634 * _3629;
                                float _3637 = _3634 * _3630;
                                float _3641 = 1.0 - (_3631 / (_3496 * _3496));
                                float _4830 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3646 = sqrt(_3631) * _3511.w;
                                float _3648 = 1.39999997615814208984375 / (_3646 + 1.39999997615814208984375);
                                float _3649 = _3648 * _3648;
                                float _3652 = ((1.0 - _3649) * dot(vec3(_3635, _3636, _3637), vec3(_774, _777, _780))) + _3649;
                                float _3655 = _3646 * _3646;
                                float _3659 = (fma(_1942, _3538.z, fma(_1941, _3538.y, _3538.x * _1940)) + _3538.w) / _3600;
                                float _3660 = (fma(_1942, _3554.z, fma(_1941, _3554.y, _3554.x * _1940)) + _3554.w) / _3600;
                                float _3664 = 1.0 - dot(vec2(_3659, _3660), vec2(_3659, _3660));
                                float _4846 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3666 = _3665 * (((isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0))) * _3642) / ((_3655 * 0.699999988079071044921875) + 1.0));
                                float _3678 = exp2(log2(1.0 / ((_3655 * 3.5) + 5.0)) * 0.25);
                                float _3679 = 1.0 - _849;
                                float _3686 = sqrt(1.0 - ((1.0 - (_3679 * _3679)) * (1.0 - (_3678 * _3678))));
                                float _3687 = _3686 * _3686;
                                float _3688 = _3687 * _3687;
                                float _3689 = _3635 - _3108;
                                float _3690 = _3636 - _3109;
                                float _3691 = _3637 - _3110;
                                float _3695 = inversesqrt(dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691)));
                                float _3699 = dot(vec3(_774, _777, _780), vec3((-0.0) - _3108, (-0.0) - _3109, (-0.0) - _3110));
                                float _4857 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3703 = dot(vec3(_774, _777, _780), vec3(_3695 * _3689, _3695 * _3690, _3695 * _3691));
                                float _4868 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3710 = ((_3706 * _3706) * (_3688 + (-1.0))) + 1.0;
                                float _3711 = _3648 * _3687;
                                float _3712 = _3711 * _3711;
                                float _3718 = ((1.0 - _3712) * dot(vec3(_774, _777, _780), vec3(_3635, _3636, _3637))) + _3712;
                                float _4879 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3720 = 1.0 - _3687;
                                float _3730 = (0.5 / (((_3719 * ((_3702 * _3720) + _3687)) + 9.9999999392252902907785028219223e-09) + (((_3719 * _3720) + _3687) * _3702))) * _3719;
                                float _4890 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3740 = (_3665 * _3642) * (((_3688 * 3.1415927410125732421875) * (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) / ((_3710 * _3710) * ((_3655 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3666 * _3511.z;
                                frontier_phi_88_pred_1 = _3666 * _3511.y;
                                frontier_phi_88_pred_2 = _3666 * _3511.x;
                                frontier_phi_88_pred_3 = _3740 * _3523.z;
                                frontier_phi_88_pred_4 = _3740 * _3523.y;
                                frontier_phi_88_pred_5 = _3740 * _3523.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3749 = frontier_phi_88_pred;
                            _3748 = frontier_phi_88_pred_1;
                            _3747 = frontier_phi_88_pred_2;
                            _3746 = frontier_phi_88_pred_3;
                            _3745 = frontier_phi_88_pred_4;
                            _3744 = frontier_phi_88_pred_5;
                            _3453 = _3747 + _3466;
                            _3454 = _3748 + _3467;
                            _3455 = _3749 + _3468;
                            _3450 = _3744 + _3463;
                            _3451 = _3745 + _3464;
                            _3452 = _3746 + _3465;
                            if (_3470 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3470;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3455;
                        frontier_phi_82_pred_1 = _3454;
                        frontier_phi_82_pred_2 = _3453;
                        frontier_phi_82_pred_3 = _3452;
                        frontier_phi_82_pred_4 = _3451;
                        frontier_phi_82_pred_5 = _3450;
                    }
                    _3093 = frontier_phi_82_pred;
                    _3091 = frontier_phi_82_pred_1;
                    _3089 = frontier_phi_82_pred_2;
                    _3087 = frontier_phi_82_pred_3;
                    _3085 = frontier_phi_82_pred_4;
                    _3083 = frontier_phi_82_pred_5;
                    uint _3249 = _3248 + 1u;
                    if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3242 = _3083;
                        _3243 = _3085;
                        _3244 = _3087;
                        _3245 = _3089;
                        _3246 = _3091;
                        _3247 = _3093;
                        _3248 = _3249;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3089;
                frontier_phi_63_64_ladder_1 = _3093;
                frontier_phi_63_64_ladder_2 = _3091;
                frontier_phi_63_64_ladder_3 = _3087;
                frontier_phi_63_64_ladder_4 = _3085;
                frontier_phi_63_64_ladder_5 = _3083;
            }
            else
            {
                frontier_phi_63_64_ladder = _2967;
                frontier_phi_63_64_ladder_1 = _2971;
                frontier_phi_63_64_ladder_2 = _2969;
                frontier_phi_63_64_ladder_3 = _2965;
                frontier_phi_63_64_ladder_4 = _2963;
                frontier_phi_63_64_ladder_5 = _2961;
            }
            _3082 = frontier_phi_63_64_ladder_5;
            _3084 = frontier_phi_63_64_ladder_4;
            _3086 = frontier_phi_63_64_ladder_3;
            _3088 = frontier_phi_63_64_ladder;
            _3090 = frontier_phi_63_64_ladder_2;
            _3092 = frontier_phi_63_64_ladder_1;
        }
        float _3097 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2894 = (_3097 * _3088) + _2406;
        _2896 = (_3097 * _3090) + _2408;
        _2898 = (_3097 * _3092) + _2410;
        _2900 = ((_3082 * _817) * _3097) + _2744;
        _2902 = ((_3084 * _819) * _3097) + _2746;
        _2904 = ((_3086 * _820) * _3097) + _2748;
    }
    else
    {
        _2894 = _2406;
        _2896 = _2408;
        _2898 = _2410;
        _2900 = _2744;
        _2902 = _2746;
        _2904 = _2748;
    }
    float _4906 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4917 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4928 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2921 = ((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2894 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _833))) + ((_2900 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2922 = ((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2896 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _833))) + ((_2902 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2923 = ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2898 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _833))) + ((_2904 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    uint _2924 = _242 + 6u;
    float _2932 = _755 / cbSceneParam._m0[86u].x;
    float _2933 = _756 / cbSceneParam._m0[86u].y;
    vec4 _2947 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2949 = _2947.x;
    float _2950 = _2947.y;
    float _2951 = _2947.z;
    float _2952 = _2947.w;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2986 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2987 = _2986 / _677;
        float _2998 = _2987 * _728;
        float _2999 = _729 * _2987;
        float _3000 = (-0.0) - _2999;
        float _3002 = _2987 * _730;
        float _3004 = (cbSceneParam._m0[77u].w * _3000) / _2986;
        float _3005 = _3004 + cbSceneParam._m0[79u].w;
        float _3006 = cbSceneParam._m0[79u].w - _2999;
        float _3012 = sqrt(((_2998 * _2998) + (_2999 * _2999)) + (_3002 * _3002));
        float _3015 = (1.0 - (cbSceneParam._m0[77u].w / _2986)) * _3012;
        float _3020 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3022 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3199;
        if (abs((_3000 - _3004) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3199 = ((((_3005 > 0.0) ? exp2(_3020 * _3005) : (2.0 - exp2(_3022 * _3005))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3015;
        }
        else
        {
            float _3143 = 1.0 / cbSceneParam._m0[80u].x;
            float _3144 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : max(_3005, _3006));
            float _3145 = isnan(_3006) ? _3005 : (isnan(_3005) ? _3006 : min(_3005, _3006));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            _3199 = ((abs(_3012 / _3000) * cbSceneParam._m0[80u].y) * ((((_3154 - _3155) * 2.0) - ((exp2(_3020 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0)))) - exp2(_3020 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))))) * _3143)) - ((exp2(_3022 * _3154) - exp2(_3022 * _3155)) * _3143))) + (_3015 * cbSceneParam._m0[80u].z);
        }
        vec4 _3201 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, 1.0), 0.0);
        float _3210 = exp2((_3199 * (-1.44269502162933349609375)) * (1.0 - _3201.w));
        float _3211 = log2(_3210);
        float _3227 = log2(_2952);
        _3024 = (exp2(_3227 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].x)) * _3201.x) / cbSceneParam._m0[78u].x)) + _2949;
        _3026 = (exp2(_3227 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].y)) * _3201.y) / cbSceneParam._m0[78u].y)) + _2950;
        _3028 = (exp2(_3227 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].z)) * _3201.z) / cbSceneParam._m0[78u].z)) + _2951;
        _3030 = _3210 * _2952;
    }
    else
    {
        _3024 = _2949;
        _3026 = _2950;
        _3028 = _2951;
        _3030 = _2952;
    }
    bool _3237;
    vec4 _3040;
    vec4 _3062;
    float _3064;
    float _3068;
    float _3069;
    float _3070;
    float _3071;
    bool _3081;
    for (;;)
    {
        _3040 = cbMatDynParam._m0[0u];
        float _3042 = roundEven(_3040.y);
        bool _3043 = _3042 == 3.0;
        float _3044 = log2(_3030);
        float _3051 = exp2(_3044 * cbSceneParam._m0[78u].x) * _2921;
        float _3052 = exp2(_3044 * cbSceneParam._m0[78u].y) * _2922;
        float _3053 = exp2(_3044 * cbSceneParam._m0[78u].z) * _2923;
        float _3060 = _744 + (-0.5);
        _3062 = cbMtdParam._m0[1u];
        _3064 = _3062.y * _3060;
        float _3067 = (_3042 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3068 = _3067 * (_3043 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3024)));
        _3069 = _3067 * (_3043 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3026)));
        _3070 = _3067 * (_3043 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3028)));
        _3071 = _3060 * 0.999000012874603271484375;
        _3081 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3081)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3071) < 0.5)
            {
                _3237 = true;
                break;
            }
        }
        uint _3178 = _793 + uint(_3040.w);
        if ((cbInstanceData._m0[_3178].w < 1.0) && ((cbInstanceData._m0[_3178].w + _3071) < 0.5))
        {
            _3237 = true;
            break;
        }
        if ((_3064 + 1.0) < _3062.x)
        {
            _3237 = true;
            break;
        }
        _3237 = false;
        break;
    }
    float _3441;
    if (_3237)
    {
        discard_state = true;
        _3441 = 0.0;
    }
    else
    {
        _3441 = cbInstanceData._m0[_2924].w;
    }
    SV_Target.x = _3068;
    SV_Target.y = _3069;
    SV_Target.z = _3070;
    SV_Target.w = _3441;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2924].w;
    discard_exit();
}


