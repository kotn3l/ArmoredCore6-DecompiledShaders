#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1296;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3905 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3916 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _513 = ((_485.x - _504) * _385) + _504;
    float _514 = ((_485.y - _505) * _385) + _505;
    float _515 = ((_485.z - _506) * _385) + _506;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _540 = ((_527.z - _515) * _458) + _515;
    float _543 = ((((_527.x - _513) * _458) + _513) * 2.0) + (-1.0);
    float _545 = ((((_527.y - _514) * _458) + _514) * 2.0) + (-1.0);
    float _546 = dot(vec2(_543, _545), vec2(_543, _545));
    float _3927 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _606 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_592 - _593) * cbMtdParam._m0[24u].z) + _593) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3938 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _614 = (_607 * (cbMtdParam._m0[17u].x - _465)) + _465;
    float _615 = (_607 * (cbMtdParam._m0[17u].y - _466)) + _466;
    float _616 = (_607 * (cbMtdParam._m0[17u].z - _467)) + _467;
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _644 = _642.x;
    float _662 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _644) * _385) + _644;
    float _679 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _662) * _458) + _662;
    float _683 = ((_628.x - _679) * cbMtdParam._m0[19u].z) + _679;
    float _685 = _683 - (_683 * _607);
    float _689 = (cbMtdParam._m0[19u].w * (_565.z - _540)) + _540;
    vec4 _702 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3949 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = (_607 * (_702.z - _689)) + _689;
    float _722 = (((_565.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _543;
    float _723 = (((_565.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _545;
    float _735 = (((_709 - _722) + (cbMtdParam._m0[21u].x * _722)) * _607) + _722;
    float _736 = (((_710 - _723) + (cbMtdParam._m0[21u].x * _723)) * _607) + _723;
    float _737 = (_607 * (sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) - _551)) + _551;
    float _742 = cbMtdParam._m0[22u].x + _565.w;
    float _745 = fma(_737, _233 * NORMAL.x, fma(_736, _240 * TANGENT.x, (_226 * _218) * _735));
    float _748 = fma(_737, _233 * NORMAL.y, fma(_736, _240 * TANGENT.y, (_226 * _219) * _735));
    float _751 = fma(_737, _233 * NORMAL.z, fma(_736, _240 * TANGENT.z, (_226 * _220) * _735));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3960 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _759 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3982 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3993 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4004 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4015 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _764 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _866 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _869 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _883 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_883].z;
    float _4026 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _895 = 1.0 - _764;
    float _896 = _892 * _895;
    float _897 = _893 * _895;
    float _898 = _894 * _895;
    float _903 = (_892 + (-0.039999999105930328369140625)) * _764;
    float _904 = (_893 + (-0.039999999105930328369140625)) * _764;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _764;
    float _906 = _903 + 0.039999999105930328369140625;
    float _908 = _904 + 0.039999999105930328369140625;
    float _909 = _905 + 0.039999999105930328369140625;
    vec4 _918 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _922 = ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * TEXCOORD_5.w) * _918.x;
    float _923 = dot(vec3(_756, _757, _758), vec3(_836, _837, _838));
    float _926 = _923 * 2.0;
    float _930 = (_926 * _756) - _836;
    float _931 = (_926 * _757) - _837;
    float _932 = (_926 * _758) - _838;
    float _936 = abs(dot(vec3(_836, _837, _838), vec3(_756, _757, _758)));
    float _4059 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _938 = sqrt(_759);
    float _951 = exp2((_938 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_938 * 3.0));
    float _957 = (1.0 - _951) * ((_938 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _958 = _951 * _938;
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1295;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1020 = fma(_994, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986));
        float _1024 = fma(_994, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986));
        float _1028 = fma(_994, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986));
        float _1053 = _986 + _756;
        float _1054 = _990 + _757;
        float _1055 = _994 + _758;
        float _1065 = fma(_1055, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053)) - _1020;
        float _1066 = fma(_1055, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053)) - _1024;
        float _1067 = fma(_1055, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053)) - _1028;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1020 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1024 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[34u].z) + ((((((_1028 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1123 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1089.x + (-0.5));
        float _1125 = _1123 * (_1089.y + (-0.5));
        float _1126 = _1123 * (_1089.z + (-0.5));
        float _1133 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1096.x + (-0.5));
        float _1135 = _1133 * (_1096.y + (-0.5));
        float _1136 = _1133 * (_1096.z + (-0.5));
        float _1143 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1103.x + (-0.5));
        float _1145 = _1143 * (_1103.y + (-0.5));
        float _1146 = _1143 * (_1103.z + (-0.5));
        float _1153 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1110.x + (-0.5));
        float _1155 = _1153 * (_1110.y + (-0.5));
        float _1156 = _1153 * (_1110.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1177 = (dot(vec3(_756, _757, _758), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1187 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _4107 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1189 + 1.0))) + _1194) * _1157;
        float _1204 = _1125 * 0.5;
        float _1205 = _1135 * 0.5;
        float _1206 = _1145 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_756, _757, _758), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4140 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1231 + 1.0))) + _1236) * _1158;
        float _1246 = _1126 * 0.5;
        float _1247 = _1136 * 0.5;
        float _1248 = _1146 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_756, _757, _758), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4173 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1273 + 1.0))) + _1278) * _1159;
        _1295 = _1126;
        _1297 = _1125;
        _1298 = _1124;
        _1299 = _1136;
        _1300 = _1135;
        _1301 = _1134;
        _1302 = _1146;
        _1303 = _1145;
        _1304 = _1144;
        _1305 = _1159;
        _1306 = _1158;
        _1307 = _1157;
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _1296;
        _1297 = _1296;
        _1298 = _1296;
        _1299 = _1296;
        _1300 = _1296;
        _1301 = _1296;
        _1302 = _1296;
        _1303 = _1296;
        _1304 = _1296;
        _1305 = _1296;
        _1306 = _1296;
        _1307 = _1296;
        _1308 = 0.0;
        _1309 = 0.0;
        _1310 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_994, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986));
        float _1338 = fma(_994, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986));
        float _1342 = fma(_994, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986));
        float _1365 = _986 + _756;
        float _1366 = _990 + _757;
        float _1367 = _994 + _758;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_756, _757, _758), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4236 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_756, _757, _758), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4269 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_756, _757, _758), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4302 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1296;
        _1604 = _1296;
        _1605 = _1296;
        _1606 = _1296;
        _1607 = _1296;
        _1608 = _1296;
        _1609 = _1296;
        _1610 = _1296;
        _1611 = _1296;
        _1612 = _1296;
        _1613 = _1296;
        _1614 = _1296;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1308)) + _1308;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1309)) + _1309;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1310)) + _1310;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _930 * 0.5;
    float _1672 = _931 * 0.5;
    float _1673 = _932 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1295, _1299, _1302, _1305));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_994, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_994, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_994, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_932, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930));
        float _1802 = fma(_932, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930));
        float _1805 = fma(_932, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1833 = frontier_phi_14_12_ladder;
        }
        float _2005;
        if (_1802 > 0.0)
        {
            _2005 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2005 = frontier_phi_23_19_ladder;
        }
        float _2300;
        if (_1805 > 0.0)
        {
            _2300 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2300 = frontier_phi_35_30_ladder;
        }
        float _2302 = isnan(_2005) ? _1833 : (isnan(_1833) ? _2005 : min(_1833, _2005));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1799) + _1788;
        float _2308 = (_2303 * _1802) + _1792;
        float _2309 = (_2303 * _1805) + _1796;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2310;
        float _2314 = _2310 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 > _2314) || ((_2308 < _2312) || ((_2307 < _2312) || (_2307 > _2314))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2309, cbModelParam._m0[9u].z, fma(_2308, cbModelParam._m0[9u].y, _2307 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2309, cbModelParam._m0[10u].z, fma(_2308, cbModelParam._m0[10u].y, _2307 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2309, cbModelParam._m0[11u].z, fma(_2308, cbModelParam._m0[11u].y, _2307 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_13_35_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_13_35_ladder_2;
        _1823 = frontier_phi_13_35_ladder_1;
        _1825 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_930, _931, _932), _1740);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1884 = fma(_994, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986)) + cbModelParam._m0[21u].w;
        float _1888 = fma(_994, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986)) + cbModelParam._m0[22u].w;
        float _1892 = fma(_994, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986)) + cbModelParam._m0[23u].w;
        float _1895 = fma(_932, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930));
        float _1898 = fma(_932, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930));
        float _1901 = fma(_932, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930));
        float _2010;
        if (_1895 > 0.0)
        {
            _2010 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2010 = frontier_phi_25_21_ladder;
        }
        float _2327;
        if (_1898 > 0.0)
        {
            _2327 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2327 = frontier_phi_37_32_ladder;
        }
        float _2665;
        if (_1901 > 0.0)
        {
            _2665 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2665 = frontier_phi_47_44_ladder;
        }
        float _2667 = isnan(_2327) ? _2010 : (isnan(_2010) ? _2327 : min(_2010, _2327));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _1895) + _1884;
        float _2673 = (_2668 * _1898) + _1888;
        float _2674 = (_2668 * _1901) + _1892;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_22_47_ladder = _2796.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2796.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2796.x * cbModelParam._m0[1u].z;
        }
        _1920 = frontier_phi_22_47_ladder_2;
        _1922 = frontier_phi_22_47_ladder_1;
        _1924 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_930, _931, _932), _1830);
        _1920 = _1904.x * cbModelParam._m0[1u].z;
        _1922 = _1904.y * cbModelParam._m0[1u].z;
        _1924 = _1904.z * cbModelParam._m0[1u].z;
    }
    float _1937 = (((_957 * _906) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1920 - _1821)) + _1821);
    float _1939 = (((_957 * _908) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1941 = (((_957 * _909) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1924 - _1825)) + _1825);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, _1937 * cbSceneParam._m0[91u].x));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1997 = _1984 / _1996;
    float _1998 = _1988 / _1996;
    float _1999 = _1992 / _1996;
    float _2146;
    float _2147;
    float _2148;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2026 = ((uint(_1999 > cbSceneParam._m0[59u].y) + uint(_1999 > cbSceneParam._m0[59u].x)) + uint(_1999 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2027 = _2026 + 43u;
        uint _2035 = _2026 + 44u;
        uint _2043 = _2026 + 45u;
        uint _2051 = _2026 + 46u;
        float _2062 = fma(_1996, cbSceneParam._m0[_2027].w, fma(_1992, cbSceneParam._m0[_2027].z, fma(_1988, cbSceneParam._m0[_2027].y, _1984 * cbSceneParam._m0[_2027].x)));
        float _2066 = fma(_1996, cbSceneParam._m0[_2035].w, fma(_1992, cbSceneParam._m0[_2035].z, fma(_1988, cbSceneParam._m0[_2035].y, _1984 * cbSceneParam._m0[_2035].x)));
        float _2074 = fma(_1996, cbSceneParam._m0[_2051].w, fma(_1992, cbSceneParam._m0[_2051].z, fma(_1988, cbSceneParam._m0[_2051].y, _1984 * cbSceneParam._m0[_2051].x)));
        float _2079 = cbSceneParam._m0[33u].z * _2074;
        float _2081 = cbSceneParam._m0[33u].w * _2074;
        float _2084 = fma(_1996, cbSceneParam._m0[_2043].w, fma(_1992, cbSceneParam._m0[_2043].z, fma(_1988, cbSceneParam._m0[_2043].y, _1984 * cbSceneParam._m0[_2043].x))) / _2074;
        float _2132 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
        float _4428 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2139 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2062) / _2074, (_2081 + _2066) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2062) / _2074, (_2066 - _2079) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2079) / _2074, (_2066 - _2081) / _2074), _2084), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 - _2081) / _2074, (_2079 + _2066) / _2074), _2084), 0.0)).x), vec4(0.25)));
        _2146 = 1.0 - (_2139 * cbSceneParam._m0[34u].x);
        _2147 = 1.0 - (_2139 * cbSceneParam._m0[34u].y);
        _2148 = 1.0 - (_2139 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2146 = 1.0;
        _2147 = 1.0;
        _2148 = 1.0;
    }
    float _2212;
    float _2214;
    float _2216;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2200 = fma(_1996, cbSceneParam._m0[63u].w, fma(_1992, cbSceneParam._m0[63u].z, fma(_1988, cbSceneParam._m0[63u].y, _1984 * cbSceneParam._m0[63u].x)));
        float _2201 = fma(_1996, cbSceneParam._m0[60u].w, fma(_1992, cbSceneParam._m0[60u].z, fma(_1988, cbSceneParam._m0[60u].y, _1984 * cbSceneParam._m0[60u].x))) / _2200;
        float _2202 = fma(_1996, cbSceneParam._m0[61u].w, fma(_1992, cbSceneParam._m0[61u].z, fma(_1988, cbSceneParam._m0[61u].y, _1984 * cbSceneParam._m0[61u].x))) / _2200;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2201 >= cbSceneParam._m0[64u].x) && (_2202 >= cbSceneParam._m0[64u].y)) && (_2201 <= cbSceneParam._m0[64u].z)) && (_2202 <= cbSceneParam._m0[64u].w))
        {
            float _2340 = fma(_1996, cbSceneParam._m0[62u].w, fma(_1992, cbSceneParam._m0[62u].z, fma(_1988, cbSceneParam._m0[62u].y, _1984 * cbSceneParam._m0[62u].x))) / _2200;
            float _2344 = isnan(cbSceneParam._m0[41u].w) ? _2340 : (isnan(_2340) ? cbSceneParam._m0[41u].w : max(_2340, cbSceneParam._m0[41u].w));
            float _2387 = (cbSceneParam._m0[33u].x - sqrt(((_1998 * _1998) + (_1997 * _1997)) + (_1999 * _1999))) * cbSceneParam._m0[33u].y;
            float _4444 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
            float _2394 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2201, cbSceneParam._m0[33u].w + _2202), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2201, _2202 - cbSceneParam._m0[33u].z), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].z, _2202 - cbSceneParam._m0[33u].w), _2344), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2201 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2202), _2344), 0.0)).x), vec4(0.25)));
            float _2398 = 1.0 - (_2394 * cbSceneParam._m0[34u].x);
            float _2399 = 1.0 - (_2394 * cbSceneParam._m0[34u].y);
            float _2400 = 1.0 - (_2394 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
            frontier_phi_34_33_ladder_1 = isnan(_2399) ? _2147 : (isnan(_2147) ? _2399 : min(_2147, _2399));
            frontier_phi_34_33_ladder_2 = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
        }
        else
        {
            frontier_phi_34_33_ladder = _2148;
            frontier_phi_34_33_ladder_1 = _2147;
            frontier_phi_34_33_ladder_2 = _2146;
        }
        _2212 = frontier_phi_34_33_ladder_2;
        _2214 = frontier_phi_34_33_ladder_1;
        _2216 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2212 = _2146;
        _2214 = _2147;
        _2216 = _2148;
    }
    uvec4 _2221 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2223 = _2221.x * 14u;
    uint _2224 = _2223 + 13u;
    float _2231 = _922 + (-1.0);
    float _2236 = (cbLight._m0[_2224].x * _2231) + 1.0;
    float _2237 = (cbLight._m0[_2224].y * _2231) + 1.0;
    float _2238 = (cbLight._m0[_2224].z * _2231) + 1.0;
    float _2239 = (cbLight._m0[_2224].w * _2231) + 1.0;
    uint _2240 = _2223 + 5u;
    float _2246 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2250 = _2223 + 4u;
    float _2259 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2263 = _2223 | 1u;
    float _2274 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_756, _757, _758));
    float _2277 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_756, _757, _758));
    float _4480 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _4491 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2282 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.3183098733425140380859375;
    float _2284 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2291 = ((cbLight._m0[_2240].x * _2246) * _2284) + (((cbLight._m0[_2250].x * _2212) * _2259) * _2282);
    float _2292 = ((_2246 * cbLight._m0[_2240].y) * _2284) + (((cbLight._m0[_2250].y * _2214) * _2259) * _2282);
    float _2293 = ((_2246 * cbLight._m0[_2240].z) * _2284) + (((cbLight._m0[_2250].z * _2216) * _2259) * _2282);
    uvec4 _2297 = floatBitsToUint(cbLight._m0[_2223 + 12u]);
    bool _2299 = _2297.x == 0u;
    float _2401;
    float _2403;
    float _2405;
    if (_2299)
    {
        _2401 = _2291;
        _2403 = _2292;
        _2405 = _2293;
    }
    else
    {
        uint _2409 = _2223 + 6u;
        float _2425 = (dot(vec3(cbLight._m0[_2223 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4502 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2428 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2401 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2291;
        _2403 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2292;
        _2405 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2293;
    }
    bool _2408 = _2297.y == 0u;
    float _2463;
    float _2465;
    float _2467;
    if (_2408)
    {
        _2463 = _2401;
        _2465 = _2403;
        _2467 = _2405;
    }
    else
    {
        uint _2636 = _2223 + 7u;
        float _2652 = (dot(vec3(cbLight._m0[_2223 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2653 = _2652 * _2652;
        float _4518 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2654 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2655 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2463 = (((cbLight._m0[_2636].x * 0.3183098733425140380859375) * _2654) * _2655) + _2401;
        _2465 = (((cbLight._m0[_2636].y * 0.3183098733425140380859375) * _2654) * _2655) + _2403;
        _2467 = (((cbLight._m0[_2636].z * 0.3183098733425140380859375) * _2654) * _2655) + _2405;
    }
    uint _2470 = _2223 + 8u;
    float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _759) * 0.949999988079071044921875);
    float _2484 = _2483 * _2483;
    float _2485 = cbLight._m0[_2223].x + _836;
    float _2486 = cbLight._m0[_2223].y + _837;
    float _2487 = cbLight._m0[_2223].z + _838;
    float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
    float _2492 = _2491 * _2485;
    float _2493 = _2491 * _2486;
    float _2494 = _2491 * _2487;
    float _2495 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2223].xyz));
    float _4534 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _4545 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2499 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2500 = dot(vec3(_756, _757, _758), vec3(_2492, _2493, _2494));
    float _4556 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2504 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2492, _2493, _2494));
    float _4567 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2508 = _2484 * _2484;
    float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
    float _2520 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
    float _2521 = 0.959999978542327880859375 - _903;
    float _2523 = 0.959999978542327880859375 - _904;
    float _2524 = 0.959999978542327880859375 - _905;
    float _2531 = 1.0 - _2484;
    float _2542 = (0.5 / (((_2499 * ((_2498 * _2531) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2531) + _2484) * _2498))) * _2498;
    float _4578 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
    uint _2558 = _2223 + 9u;
    float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _759) * 0.949999988079071044921875);
    float _2570 = _2569 * _2569;
    float _2571 = cbLight._m0[_2263].x + _836;
    float _2572 = cbLight._m0[_2263].y + _837;
    float _2573 = cbLight._m0[_2263].z + _838;
    float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
    float _2578 = _2577 * _2571;
    float _2579 = _2577 * _2572;
    float _2580 = _2577 * _2573;
    float _2581 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2263].xyz));
    float _4589 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2585 = dot(vec3(_756, _757, _758), vec3(_2578, _2579, _2580));
    float _4600 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2589 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2578, _2579, _2580));
    float _4611 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2593 = _2570 * _2570;
    float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
    float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2611 = 1.0 - _2570;
    float _2621 = (0.5 / (((_2499 * ((_2584 * _2611) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2611) + _2570) * _2584))) * _2584;
    float _4622 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
    float _2633 = (((((_2604 * _2521) + _906) * cbLight._m0[_2558].x) * _2623) * _2246) + ((((cbLight._m0[_2470].x * _2212) * ((_2520 * _2521) + _906)) * _2544) * _2259);
    float _2634 = (((((_2604 * _2523) + _908) * cbLight._m0[_2558].y) * _2623) * _2246) + ((((cbLight._m0[_2470].y * _2214) * ((_2520 * _2523) + _908)) * _2544) * _2259);
    float _2635 = (((((_2604 * _2524) + _909) * cbLight._m0[_2558].z) * _2623) * _2246) + ((((cbLight._m0[_2470].z * _2216) * ((_2520 * _2524) + _909)) * _2544) * _2259);
    float _2691;
    float _2693;
    float _2695;
    if (_2299)
    {
        _2691 = _2633;
        _2693 = _2634;
        _2695 = _2635;
    }
    else
    {
        uint _2697 = _2223 + 2u;
        uint _2701 = _2223 + 10u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _759) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _836;
        float _2718 = cbLight._m0[_2697].y + _837;
        float _2719 = cbLight._m0[_2697].z + _838;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2697].xyz));
        float _4633 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2731 = dot(vec3(_756, _757, _758), vec3(_2724, _2725, _2726));
        float _4644 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4655 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
        float _2757 = 1.0 - _2716;
        float _2767 = (0.5 / (((_2499 * ((_2730 * _2757) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2757) + _2716) * _2730))) * _2730;
        float _4666 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2769 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2770 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2691 = (((((_2750 * _2521) + _906) * cbLight._m0[_2701].x) * _2769) * _2770) + _2633;
        _2693 = (((((_2750 * _2523) + _908) * cbLight._m0[_2701].y) * _2769) * _2770) + _2634;
        _2695 = (((((_2750 * _2524) + _909) * cbLight._m0[_2701].z) * _2769) * _2770) + _2635;
    }
    float _2801;
    float _2803;
    float _2805;
    if (_2408)
    {
        _2801 = _2691;
        _2803 = _2693;
        _2805 = _2695;
    }
    else
    {
        uint _2812 = _2223 + 3u;
        uint _2816 = _2223 + 11u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _759) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _836;
        float _2833 = cbLight._m0[_2812].y + _837;
        float _2834 = cbLight._m0[_2812].z + _838;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2812].xyz));
        float _4682 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2846 = dot(vec3(_756, _757, _758), vec3(_2839, _2840, _2841));
        float _4693 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4704 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2865 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
        float _2872 = 1.0 - _2831;
        float _2882 = (0.5 / (((_2499 * ((_2845 * _2872) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2499 * _2872) + _2831) * _2845))) * _2845;
        float _4715 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2884 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2885 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2801 = (((((_2865 * _2521) + _906) * cbLight._m0[_2816].x) * _2884) * _2885) + _2691;
        _2803 = (((((_2865 * _2523) + _908) * cbLight._m0[_2816].y) * _2884) * _2885) + _2693;
        _2805 = (((((_2865 * _2524) + _909) * cbLight._m0[_2816].z) * _2884) * _2885) + _2695;
    }
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    if (_2221.y == 0u)
    {
        uvec4 _2906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2907 = _2906.x;
        uint _2918 = uint((float(_2906.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2907))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2907)));
        float _2928 = (log2(_1999 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2929 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        uint _2932 = uint(isnan(14.0) ? _2929 : (isnan(_2929) ? 14.0 : min(_2929, 14.0)));
        uvec4 _2937 = texelFetch(g_lightClusterGridBuffer, int(((_2932 << 2u) + (_2918 << 6u)) >> 2u));
        uint _2938 = _2937.x;
        uint _2939 = _2906.z;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((((1u << ((_2939 >> 4u) & 15u)) + 4294967295u) & _2938) == 0u) || ((_2939 & 240u) == 0u))
        {
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
        }
        else
        {
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            uint _3169 = 0u;
            uint _3178;
            bool _3179;
            for (;;)
            {
                _3178 = texelFetch(g_lightClassification, int((((_2932 << 5u) + (_2918 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                _3179 = _3178 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3179)
                {
                    frontier_phi_66_pred = _3168;
                    frontier_phi_66_pred_1 = _3167;
                    frontier_phi_66_pred_2 = _3166;
                    frontier_phi_66_pred_3 = _3165;
                    frontier_phi_66_pred_4 = _3164;
                    frontier_phi_66_pred_5 = _3163;
                }
                else
                {
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    uint _3293;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3178;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    for (;;)
                    {
                        uint _3297 = uint(findLSB(_3293)) + (_3169 << 5u);
                        uint _3294 = (_3293 + 4294967295u) & _3293;
                        uint _3299 = _3297 * 48u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3319 = (_3297 * 48u) + 4u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 3u)).x));
                        uint _3338 = (_3297 * 48u) + 8u;
                        vec3 _3349 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x));
                        float _3353 = _3313.x - _1997;
                        float _3354 = _3313.y - _1998;
                        float _3355 = _3313.z - _1999;
                        float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                        float _3359 = inversesqrt(_3356);
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3363 = dot(vec3(_863, _866, _869), vec3(_3360, _3361, _3362));
                        float _3368 = 1.0 - (_3356 * _3313.w);
                        float _4741 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3369 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3370 = sqrt(_3356) * _3332.w;
                        float _3373 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3363) + _3374;
                        float _3380 = _3370 * _3370;
                        float _3384 = ((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3369) / ((_3380 * 0.699999988079071044921875) + 1.0);
                        float _3388 = (-0.0) - _1997;
                        float _3389 = (-0.0) - _1998;
                        float _3390 = (-0.0) - _1999;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3404 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                        float _3405 = 1.0 - _938;
                        float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                        float _3413 = _3412 * _3412;
                        float _3414 = _3413 * _3413;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3425 = dot(vec3(_863, _866, _869), vec3(_3395, _3396, _3397));
                        float _4757 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3429 = dot(vec3(_863, _866, _869), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                        float _4768 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                        float _3437 = _3373 * _3413;
                        float _3438 = _3437 * _3437;
                        float _3441 = ((1.0 - _3438) * _3363) + _3438;
                        float _4779 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3443 = 1.0 - _3413;
                        float _3453 = (0.5 / (((_3442 * ((_3428 * _3443) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3413) * _3428))) * _3442;
                        float _4790 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3464 = (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) / ((_3436 * _3436) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125))) * _3369;
                        _3222 = (_3384 * _3332.x) + _3290;
                        _3223 = (_3384 * _3332.y) + _3291;
                        _3224 = (_3384 * _3332.z) + _3292;
                        _3219 = (_3464 * _3349.x) + _3287;
                        _3220 = (_3464 * _3349.y) + _3288;
                        _3221 = (_3464 * _3349.z) + _3289;
                        if (_3294 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3294;
                        }
                    }
                    frontier_phi_66_pred = _3224;
                    frontier_phi_66_pred_1 = _3223;
                    frontier_phi_66_pred_2 = _3222;
                    frontier_phi_66_pred_3 = _3221;
                    frontier_phi_66_pred_4 = _3220;
                    frontier_phi_66_pred_5 = _3219;
                }
                _3029 = frontier_phi_66_pred;
                _3027 = frontier_phi_66_pred_1;
                _3025 = frontier_phi_66_pred_2;
                _3023 = frontier_phi_66_pred_3;
                _3021 = frontier_phi_66_pred_4;
                _3019 = frontier_phi_66_pred_5;
                uint _3170 = _3169 + 1u;
                if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3163 = _3019;
                    _3164 = _3021;
                    _3165 = _3023;
                    _3166 = _3025;
                    _3167 = _3027;
                    _3168 = _3029;
                    _3169 = _3170;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
        }
        uvec4 _3032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3033 = _3032.z;
        uint _3035 = (_3033 >> 8u) & 15u;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((4294967295u << _3035) & _2938) == 0u)
        {
            _3131 = _3018;
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
            _3141 = _3028;
        }
        else
        {
            float _3156 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
            float _3157 = _3156 * _1997;
            float _3158 = _3156 * _1998;
            float _3159 = _3156 * _1999;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3035 < ((_3033 >> 12u) & 15u))
            {
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3270 = _3018;
                float _3271 = _3020;
                float _3272 = _3022;
                float _3273 = _3024;
                float _3274 = _3026;
                float _3275 = _3028;
                uint _3276 = _3035;
                uint _3285;
                bool _3286;
                for (;;)
                {
                    _3285 = texelFetch(g_lightClassification, int((((_2932 << 5u) + (_2918 << 9u)) + (_3276 << 2u)) >> 2u)).x;
                    _3286 = _3285 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3286)
                    {
                        frontier_phi_72_pred = _3275;
                        frontier_phi_72_pred_1 = _3274;
                        frontier_phi_72_pred_2 = _3273;
                        frontier_phi_72_pred_3 = _3272;
                        frontier_phi_72_pred_4 = _3271;
                        frontier_phi_72_pred_5 = _3270;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3482 = _3270;
                        float _3483 = _3271;
                        float _3484 = _3272;
                        float _3485 = _3273;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        uint _3488 = _3285;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3499 = ((_3276 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3499 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3499 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_1999, _3606.z, fma(_1998, _3606.y, _3606.x * _1997)) + _3606.w;
                            _3619 = !((fma(_1999, _3587.z, fma(_1998, _3587.y, _3587.x * _1997)) + _3587.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3514.x - _1997;
                                float _3647 = _3514.y - _1998;
                                float _3648 = _3514.z - _1999;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3515 * _3515));
                                float _4801 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3664 = sqrt(_3649) * _3530.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_863, _866, _869))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_1999, _3557.z, fma(_1998, _3557.y, _3557.x * _1997)) + _3557.w) / _3618;
                                float _3678 = (fma(_1999, _3572.z, fma(_1998, _3572.y, _3572.x * _1997)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4817 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _938;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3157;
                                float _3708 = _3654 - _3158;
                                float _3709 = _3655 - _3159;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_863, _866, _869), vec3((-0.0) - _3157, (-0.0) - _3158, (-0.0) - _3159));
                                float _4828 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3721 = dot(vec3(_863, _866, _869), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4839 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_863, _866, _869), vec3(_3653, _3654, _3655))) + _3730;
                                float _4850 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4861 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3684 * _3530.y;
                                frontier_phi_78_pred_1 = _3684 * _3530.x;
                                frontier_phi_78_pred_2 = _3758 * _3542.z;
                                frontier_phi_78_pred_3 = _3758 * _3542.y;
                                frontier_phi_78_pred_4 = _3758 * _3542.x;
                                frontier_phi_78_pred_5 = _3684 * _3530.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3766 = frontier_phi_78_pred;
                            _3765 = frontier_phi_78_pred_1;
                            _3764 = frontier_phi_78_pred_2;
                            _3763 = frontier_phi_78_pred_3;
                            _3762 = frontier_phi_78_pred_4;
                            _3767 = frontier_phi_78_pred_5;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3474;
                        frontier_phi_72_pred_1 = _3473;
                        frontier_phi_72_pred_2 = _3472;
                        frontier_phi_72_pred_3 = _3471;
                        frontier_phi_72_pred_4 = _3470;
                        frontier_phi_72_pred_5 = _3469;
                    }
                    _3142 = frontier_phi_72_pred;
                    _3140 = frontier_phi_72_pred_1;
                    _3138 = frontier_phi_72_pred_2;
                    _3136 = frontier_phi_72_pred_3;
                    _3134 = frontier_phi_72_pred_4;
                    _3132 = frontier_phi_72_pred_5;
                    uint _3277 = _3276 + 1u;
                    if (_3277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3270 = _3132;
                        _3271 = _3134;
                        _3272 = _3136;
                        _3273 = _3138;
                        _3274 = _3140;
                        _3275 = _3142;
                        _3276 = _3277;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3142;
                frontier_phi_60_61_ladder_1 = _3140;
                frontier_phi_60_61_ladder_2 = _3136;
                frontier_phi_60_61_ladder_3 = _3134;
                frontier_phi_60_61_ladder_4 = _3132;
                frontier_phi_60_61_ladder_5 = _3138;
            }
            else
            {
                frontier_phi_60_61_ladder = _3028;
                frontier_phi_60_61_ladder_1 = _3026;
                frontier_phi_60_61_ladder_2 = _3022;
                frontier_phi_60_61_ladder_3 = _3020;
                frontier_phi_60_61_ladder_4 = _3018;
                frontier_phi_60_61_ladder_5 = _3024;
            }
            _3131 = frontier_phi_60_61_ladder_4;
            _3133 = frontier_phi_60_61_ladder_3;
            _3135 = frontier_phi_60_61_ladder_2;
            _3137 = frontier_phi_60_61_ladder_5;
            _3139 = frontier_phi_60_61_ladder_1;
            _3141 = frontier_phi_60_61_ladder;
        }
        float _3146 = isnan(1.0) ? _922 : (isnan(_922) ? 1.0 : min(_922, 1.0));
        _2951 = (_3146 * _3137) + _2463;
        _2953 = (_3146 * _3139) + _2465;
        _2955 = (_3146 * _3141) + _2467;
        _2957 = ((_3131 * _906) * _3146) + _2801;
        _2959 = ((_3133 * _908) * _3146) + _2803;
        _2961 = ((_3135 * _909) * _3146) + _2805;
    }
    else
    {
        _2951 = _2463;
        _2953 = _2465;
        _2955 = _2467;
        _2957 = _2801;
        _2959 = _2803;
        _2961 = _2805;
    }
    float _4877 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4888 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4899 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    uint _2981 = _246 + 6u;
    float _2989 = _844 / cbSceneParam._m0[86u].x;
    float _2990 = _845 / cbSceneParam._m0[86u].y;
    vec4 _3004 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2989, _2990, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3006 = _3004.x;
    float _3007 = _3004.y;
    float _3008 = _3004.z;
    float _3009 = _3004.w;
    float _3081;
    float _3083;
    float _3085;
    float _3087;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _3043 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _3044 = _3043 / _778;
        float _3055 = _3044 * _829;
        float _3056 = _830 * _3044;
        float _3057 = (-0.0) - _3056;
        float _3059 = _3044 * _831;
        float _3061 = (cbSceneParam._m0[77u].w * _3057) / _3043;
        float _3062 = _3061 + cbSceneParam._m0[79u].w;
        float _3063 = cbSceneParam._m0[79u].w - _3056;
        float _3069 = sqrt(((_3055 * _3055) + (_3056 * _3056)) + (_3059 * _3059));
        float _3072 = (1.0 - (cbSceneParam._m0[77u].w / _3043)) * _3069;
        float _3077 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3079 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3232;
        if (abs((_3057 - _3061) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3232 = ((((_3062 > 0.0) ? exp2(_3077 * _3062) : (2.0 - exp2(_3079 * _3062))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3072;
        }
        else
        {
            float _3192 = 1.0 / cbSceneParam._m0[80u].x;
            float _3193 = isnan(_3063) ? _3062 : (isnan(_3062) ? _3063 : max(_3062, _3063));
            float _3194 = isnan(_3063) ? _3062 : (isnan(_3062) ? _3063 : min(_3062, _3063));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            _3232 = ((abs(_3069 / _3057) * cbSceneParam._m0[80u].y) * ((((_3203 - _3204) * 2.0) - ((exp2(_3077 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0)))) - exp2(_3077 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))))) * _3192)) - ((exp2(_3079 * _3203) - exp2(_3079 * _3204)) * _3192))) + (_3072 * cbSceneParam._m0[80u].z);
        }
        vec4 _3234 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2989, _2990, 1.0), 0.0);
        float _3243 = exp2((_3232 * (-1.44269502162933349609375)) * (1.0 - _3234.w));
        float _3244 = log2(_3243);
        float _3260 = log2(_3009);
        _3081 = (exp2(_3260 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].x)) * _3234.x) / cbSceneParam._m0[78u].x)) + _3006;
        _3083 = (exp2(_3260 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].y)) * _3234.y) / cbSceneParam._m0[78u].y)) + _3007;
        _3085 = (exp2(_3260 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].z)) * _3234.z) / cbSceneParam._m0[78u].z)) + _3008;
        _3087 = _3243 * _3009;
    }
    else
    {
        _3081 = _3006;
        _3083 = _3007;
        _3085 = _3008;
        _3087 = _3009;
    }
    float _3099 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3100 = _3099 == 3.0;
    float _3101 = log2(_3087);
    float _3108 = exp2(_3101 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2951 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _922))) + ((_2957 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1729)) * cbPerFrame._m0[3u].x));
    float _3109 = exp2(_3101 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2953 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _922))) + ((_2959 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1729)) * cbPerFrame._m0[3u].x));
    float _3110 = exp2(_3101 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2955 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _922))) + ((_2961 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1729)) * cbPerFrame._m0[3u].x));
    float _3119 = (_3099 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3119 * (_3100 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3081)));
    SV_Target.y = _3119 * (_3100 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3083)));
    SV_Target.z = _3119 * (_3100 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.w = cbInstanceData._m0[_2981].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2981].w;
}


