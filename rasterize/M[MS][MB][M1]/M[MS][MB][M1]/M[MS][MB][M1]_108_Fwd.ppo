#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1412;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3738 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3749 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3760 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3771 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _435 = (_428 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _436 = (_428 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _437 = (_428 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) + _447;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _531 = ((_501.z - _522) * _428) + _522;
    float _534 = ((((_501.x - _520) * _428) + _520) * 2.0) + (-1.0);
    float _535 = ((((_501.y - _521) * _428) + _521) * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3782 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))));
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _573 = (_534 + ((((_474.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_561.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _574 = (_535 + ((((_474.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_561.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _577 = fma(_541, _246, fma(_574, _253, _573 * _239));
    float _580 = fma(_541, _247, fma(_574, _254, _573 * _240));
    float _583 = fma(_541, _248, fma(_574, _255, _573 * _241));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _623 = (cbMtdParam._m0[19u].x + dot(vec4(_587 * _577, _587 * _580, _587 * _583, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_616 - _617) * cbMtdParam._m0[24u].z) + _617) * cbMtdParam._m0[21u].z);
    float _3793 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _626 = (-0.0) - cbMtdParam._m0[24u].x;
    float _628 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
    float _636 = _624 - ((_624 * TEXCOORD_8.x) * _629);
    float _637 = _624 - ((_624 * TEXCOORD_8.y) * _629);
    float _638 = _624 - ((_624 * TEXCOORD_8.z) * _629);
    float _645 = (_636 * (cbMtdParam._m0[17u].x - _454)) + _454;
    float _646 = (_637 * (cbMtdParam._m0[17u].y - _455)) + _455;
    float _647 = (_638 * (cbMtdParam._m0[17u].z - _456)) + _456;
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _661 = _659.x;
    float _662 = 1.0 - _661;
    float _688 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_661 - _662) * cbMtdParam._m0[24u].w) + _662) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3814 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _697 = ((((cbMtdParam._m0[10u].x - _645) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _689) + _645;
    float _698 = ((((cbMtdParam._m0[10u].y - _646) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _689) + _646;
    float _699 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _647)) * _689) + _647;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _727 = _725.x;
    float _745 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _727) * _428) + _727;
    float _749 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _745) * cbMtdParam._m0[19u].z) + _745;
    float _751 = _749 - (_749 * _636);
    float _753 = _751 - (_751 * _689);
    float _758 = (((_474.z - _531) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _531;
    float _762 = ((_561.z - _758) * cbMtdParam._m0[19u].w) + _758;
    vec4 _776 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _783 = (_776.x * 2.0) + (-1.0);
    float _784 = (_776.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _3825 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _793 = ((_776.z - _762) * _636) + _762;
    float _796 = ((cbMtdParam._m0[23u].y - _793) * _689) + _793;
    vec4 _815 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _821 = (_815.x * 2.0) + (-1.0);
    float _822 = (_815.y * 2.0) + (-1.0);
    float _823 = dot(vec2(_821, _822), vec2(_821, _822));
    float _3836 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _838 = ((sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) - _541) * _638) + _541;
    float _841 = (((_783 - _573) * _636) + _573) + (cbMtdParam._m0[21u].x * _573);
    float _842 = (((_784 - _574) * _637) + _574) + (cbMtdParam._m0[21u].x * _574);
    float _853 = (((_821 - _841) + (_841 * cbMtdParam._m0[22u].z)) * _689) + _841;
    float _854 = (((_822 - _842) + (_842 * cbMtdParam._m0[22u].z)) * _689) + _842;
    float _855 = (_689 * (sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) - _838)) + _838;
    float _859 = cbMtdParam._m0[22u].x + _561.w;
    float _862 = fma(_855, _246, fma(_854, _253, _853 * _239));
    float _865 = fma(_855, _247, fma(_854, _254, _853 * _240));
    float _868 = fma(_855, _248, fma(_854, _255, _853 * _241));
    float _872 = inversesqrt(dot(vec3(_862, _865, _868), vec3(_862, _865, _868)));
    float _873 = _872 * _862;
    float _874 = _872 * _865;
    float _875 = _872 * _868;
    float _3847 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _876 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _3869 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3880 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3891 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _3902 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _881 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _895 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _945 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _935);
    float _946 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _935);
    float _947 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _935);
    float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
    float _952 = _945 * _951;
    float _953 = _946 * _951;
    float _954 = _947 * _951;
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_875, cbSceneParam._m0[5u].z, fma(_874, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _873));
    float _982 = fma(_875, cbSceneParam._m0[6u].z, fma(_874, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _873));
    float _985 = fma(_875, cbSceneParam._m0[7u].z, fma(_874, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _873));
    uint _999 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_999].z;
    float _3913 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _1011 = 1.0 - _881;
    float _1012 = _1008 * _1011;
    float _1013 = _1009 * _1011;
    float _1014 = _1010 * _1011;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _881;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _881;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _881;
    float _1022 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _960, cbSceneParam._m0[86u].y * _961));
    float _1038 = ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * TEXCOORD_5.w) * _1034.x;
    float _1039 = dot(vec3(_873, _874, _875), vec3(_952, _953, _954));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _873) - _952;
    float _1047 = (_1042 * _874) - _953;
    float _1048 = (_1042 * _875) - _954;
    float _1052 = abs(dot(vec3(_952, _953, _954), vec3(_873, _874, _875)));
    float _3946 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_876);
    float _1067 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1073 = (1.0 - _1067) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1074 = _1067 * _1054;
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1411;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1136 = fma(_1110, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102));
        float _1140 = fma(_1110, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102));
        float _1144 = fma(_1110, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102));
        float _1169 = _1102 + _873;
        float _1170 = _1106 + _874;
        float _1171 = _1110 + _875;
        float _1181 = fma(_1171, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169)) - _1136;
        float _1182 = fma(_1171, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169)) - _1140;
        float _1183 = fma(_1171, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169)) - _1144;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1136 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1140 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[34u].z) + ((((((_1144 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1239 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1205.x + (-0.5));
        float _1241 = _1239 * (_1205.y + (-0.5));
        float _1242 = _1239 * (_1205.z + (-0.5));
        float _1249 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1212.x + (-0.5));
        float _1251 = _1249 * (_1212.y + (-0.5));
        float _1252 = _1249 * (_1212.z + (-0.5));
        float _1259 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1219.x + (-0.5));
        float _1261 = _1259 * (_1219.y + (-0.5));
        float _1262 = _1259 * (_1219.z + (-0.5));
        float _1269 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1226.x + (-0.5));
        float _1271 = _1269 * (_1226.y + (-0.5));
        float _1272 = _1269 * (_1226.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1293 = (dot(vec3(_873, _874, _875), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1303 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3994 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1305 + 1.0))) + _1310) * _1273;
        float _1320 = _1241 * 0.5;
        float _1321 = _1251 * 0.5;
        float _1322 = _1261 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_873, _874, _875), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4027 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1347 + 1.0))) + _1352) * _1274;
        float _1362 = _1242 * 0.5;
        float _1363 = _1252 * 0.5;
        float _1364 = _1262 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_873, _874, _875), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4060 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1389 + 1.0))) + _1394) * _1275;
        _1411 = _1242;
        _1413 = _1241;
        _1414 = _1240;
        _1415 = _1252;
        _1416 = _1251;
        _1417 = _1250;
        _1418 = _1262;
        _1419 = _1261;
        _1420 = _1260;
        _1421 = _1275;
        _1422 = _1274;
        _1423 = _1273;
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1412;
        _1413 = _1412;
        _1414 = _1412;
        _1415 = _1412;
        _1416 = _1412;
        _1417 = _1412;
        _1418 = _1412;
        _1419 = _1412;
        _1420 = _1412;
        _1421 = _1412;
        _1422 = _1412;
        _1423 = _1412;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1451 = fma(_1110, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102));
        float _1455 = fma(_1110, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102));
        float _1459 = fma(_1110, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102));
        float _1482 = _1102 + _873;
        float _1483 = _1106 + _874;
        float _1484 = _1110 + _875;
        float _1494 = fma(_1484, cbModelParam._m0[30u].z, fma(_1483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1482)) - _1451;
        float _1495 = fma(_1484, cbModelParam._m0[31u].z, fma(_1483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1482)) - _1455;
        float _1496 = fma(_1484, cbModelParam._m0[32u].z, fma(_1483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1482)) - _1459;
        float _1500 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
        float _1513 = ((_1500 * _1494) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1451 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1500 * _1495) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1455 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1500 * _1496) / cbModelParam._m0[35u].z) + ((((((_1459 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        float _1550 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1517.x + (-0.5));
        float _1552 = _1550 * (_1517.y + (-0.5));
        float _1553 = _1550 * (_1517.z + (-0.5));
        float _1560 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1524.x + (-0.5));
        float _1562 = _1560 * (_1524.y + (-0.5));
        float _1563 = _1560 * (_1524.z + (-0.5));
        float _1570 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1531.x + (-0.5));
        float _1572 = _1570 * (_1531.y + (-0.5));
        float _1573 = _1570 * (_1531.z + (-0.5));
        float _1580 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1538.x + (-0.5));
        float _1582 = _1580 * (_1538.y + (-0.5));
        float _1583 = _1580 * (_1538.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_873, _874, _875), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4123 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1614 + 1.0))) + _1619) * _1584;
        float _1629 = _1552 * 0.5;
        float _1630 = _1562 * 0.5;
        float _1631 = _1572 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_873, _874, _875), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4156 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1656 + 1.0))) + _1661) * _1585;
        float _1671 = _1553 * 0.5;
        float _1672 = _1563 * 0.5;
        float _1673 = _1573 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_873, _874, _875), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4189 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1698 + 1.0))) + _1703) * _1586;
        _1720 = _1553;
        _1721 = _1552;
        _1722 = _1551;
        _1723 = _1563;
        _1724 = _1562;
        _1725 = _1561;
        _1726 = _1573;
        _1727 = _1572;
        _1728 = _1571;
        _1729 = _1586;
        _1730 = _1585;
        _1731 = _1584;
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1412;
        _1721 = _1412;
        _1722 = _1412;
        _1723 = _1412;
        _1724 = _1412;
        _1725 = _1412;
        _1726 = _1412;
        _1727 = _1412;
        _1728 = _1412;
        _1729 = _1412;
        _1730 = _1412;
        _1731 = _1412;
        _1732 = 0.0;
        _1733 = 0.0;
        _1734 = 0.0;
    }
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1424)) + _1424;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1425)) + _1425;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1426)) + _1426;
    float _1767 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1744));
    float _1788 = _1046 * 0.5;
    float _1789 = _1047 * 0.5;
    float _1790 = _1048 * 0.5;
    float _1791 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1794 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1797 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1831;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1804 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1411, _1415, _1418, _1421));
        float _1808 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1812 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1819 = dot(vec4(cbModelParam._m0[39u]), vec4(_1788, _1789, _1790, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1842;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1833 = dot(vec4(cbModelParam._m0[40u]), vec4(_1788, _1789, _1790, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1846 = (_1842 * cbModelParam._m0[1u].x) + (_1831 * (1.0 - cbModelParam._m0[1u].x));
    float _1856 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _876);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1856 : min(cbModelParam._m0[25u].z, _1856));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1110, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1102)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1110, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1102)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1110, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1102)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1919 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1922 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1950 = frontier_phi_14_12_ladder;
        }
        float _2153;
        if (_1919 > 0.0)
        {
            _2153 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2153 = frontier_phi_23_19_ladder;
        }
        float _2407;
        if (_1922 > 0.0)
        {
            _2407 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2407 = frontier_phi_35_30_ladder;
        }
        float _2409 = isnan(_2153) ? _1950 : (isnan(_1950) ? _2153 : min(_1950, _2153));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1916) + _1905;
        float _2415 = (_2410 * _1919) + _1909;
        float _2416 = (_2410 * _1922) + _1913;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1857);
            frontier_phi_13_35_ladder = _2544.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2544.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2544.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_13_35_ladder_2;
        _1940 = frontier_phi_13_35_ladder_1;
        _1942 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1857);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _876);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1110, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1102)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1110, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1102)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1110, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1102)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2015 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2018 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2158;
        if (_2012 > 0.0)
        {
            _2158 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2158 = frontier_phi_25_21_ladder;
        }
        float _2434;
        if (_2015 > 0.0)
        {
            _2434 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2434 = frontier_phi_37_32_ladder;
        }
        float _2647;
        if (_2018 > 0.0)
        {
            _2647 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2647 = frontier_phi_46_43_ladder;
        }
        float _2649 = isnan(_2434) ? _2158 : (isnan(_2158) ? _2434 : min(_2158, _2434));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _2012) + _2001;
        float _2655 = (_2650 * _2015) + _2005;
        float _2656 = (_2650 * _2018) + _2009;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_22_46_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_22_46_ladder_2;
        _2039 = frontier_phi_22_46_ladder_1;
        _2041 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1947);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2054 = (((_1073 * _1022) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2056 = (((_1073 * _1024) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2058 = (((_1073 * _1025) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2056, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2056, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2056, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _1038 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2112 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2116 = _2079 | 1u;
    float _2127 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_873, _874, _875));
    float _2130 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_873, _874, _875));
    float _4325 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _4336 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2135 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * 0.3183098733425140380859375;
    float _2137 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * 0.3183098733425140380859375;
    float _2144 = ((cbLight._m0[_2096].x * _2102) * _2137) + ((cbLight._m0[_2106].x * _2112) * _2135);
    float _2145 = ((_2102 * cbLight._m0[_2096].y) * _2137) + ((_2112 * cbLight._m0[_2106].y) * _2135);
    float _2146 = ((_2102 * cbLight._m0[_2096].z) * _2137) + ((_2112 * cbLight._m0[_2106].z) * _2135);
    uvec4 _2150 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2152 = _2150.x == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2152)
    {
        _2163 = _2144;
        _2165 = _2145;
        _2167 = _2146;
    }
    else
    {
        uint _2171 = _2079 + 6u;
        float _2187 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4347 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2190 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2163 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _2144;
        _2165 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _2145;
        _2167 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _2146;
    }
    bool _2170 = _2150.y == 0u;
    float _2208;
    float _2210;
    float _2212;
    if (_2170)
    {
        _2208 = _2163;
        _2210 = _2165;
        _2212 = _2167;
    }
    else
    {
        uint _2378 = _2079 + 7u;
        float _2394 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2395 = _2394 * _2394;
        float _4363 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2396 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2397 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2208 = (((cbLight._m0[_2378].x * 0.3183098733425140380859375) * _2396) * _2397) + _2163;
        _2210 = (((cbLight._m0[_2378].y * 0.3183098733425140380859375) * _2396) * _2397) + _2165;
        _2212 = (((cbLight._m0[_2378].z * 0.3183098733425140380859375) * _2396) * _2397) + _2167;
    }
    uint _2215 = _2079 + 8u;
    float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _876) * 0.949999988079071044921875);
    float _2229 = _2228 * _2228;
    float _2230 = cbLight._m0[_2079].x + _952;
    float _2231 = cbLight._m0[_2079].y + _953;
    float _2232 = cbLight._m0[_2079].z + _954;
    float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
    float _2237 = _2236 * _2230;
    float _2238 = _2236 * _2231;
    float _2239 = _2236 * _2232;
    float _2240 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2079].xyz));
    float _4379 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2244 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2245 = dot(vec3(_873, _874, _875), vec3(_2237, _2238, _2239));
    float _4401 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2237, _2238, _2239));
    float _4412 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2229 * _2229;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
    float _2266 = 0.959999978542327880859375 - _1019;
    float _2268 = 0.959999978542327880859375 - _1020;
    float _2269 = 0.959999978542327880859375 - _1021;
    float _2276 = 1.0 - _2229;
    float _2287 = (0.5 / (((_2244 * ((_2243 * _2276) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2276) + _2229) * _2243))) * _2243;
    float _4423 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    uint _2300 = _2079 + 9u;
    float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _876) * 0.949999988079071044921875);
    float _2312 = _2311 * _2311;
    float _2313 = cbLight._m0[_2116].x + _952;
    float _2314 = cbLight._m0[_2116].y + _953;
    float _2315 = cbLight._m0[_2116].z + _954;
    float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
    float _2320 = _2319 * _2313;
    float _2321 = _2319 * _2314;
    float _2322 = _2319 * _2315;
    float _2323 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2116].xyz));
    float _4434 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2327 = dot(vec3(_873, _874, _875), vec3(_2320, _2321, _2322));
    float _4445 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2320, _2321, _2322));
    float _4456 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2312 * _2312;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2353 = 1.0 - _2312;
    float _2363 = (0.5 / (((_2244 * ((_2326 * _2353) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2353) + _2312) * _2326))) * _2326;
    float _4467 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    float _2375 = (((((_2346 * _2266) + _1022) * cbLight._m0[_2300].x) * _2365) * _2102) + (((((_2265 * _2266) + _1022) * cbLight._m0[_2215].x) * _2289) * _2112);
    float _2376 = (((((_2346 * _2268) + _1024) * cbLight._m0[_2300].y) * _2365) * _2102) + (((((_2265 * _2268) + _1024) * cbLight._m0[_2215].y) * _2289) * _2112);
    float _2377 = (((((_2346 * _2269) + _1025) * cbLight._m0[_2300].z) * _2365) * _2102) + (((((_2265 * _2269) + _1025) * cbLight._m0[_2215].z) * _2289) * _2112);
    float _2439;
    float _2441;
    float _2443;
    if (_2152)
    {
        _2439 = _2375;
        _2441 = _2376;
        _2443 = _2377;
    }
    else
    {
        uint _2445 = _2079 + 2u;
        uint _2449 = _2079 + 10u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _876) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _952;
        float _2466 = cbLight._m0[_2445].y + _953;
        float _2467 = cbLight._m0[_2445].z + _954;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2445].xyz));
        float _4478 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2479 = dot(vec3(_873, _874, _875), vec3(_2472, _2473, _2474));
        float _4489 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4500 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2244 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2505) + _2464) * _2478))) * _2478;
        float _4511 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2439 = (((((_2498 * _2266) + _1022) * cbLight._m0[_2449].x) * _2517) * _2518) + _2375;
        _2441 = (((((_2498 * _2268) + _1024) * cbLight._m0[_2449].y) * _2517) * _2518) + _2376;
        _2443 = (((((_2498 * _2269) + _1025) * cbLight._m0[_2449].z) * _2517) * _2518) + _2377;
    }
    float _2553;
    float _2555;
    float _2557;
    if (_2170)
    {
        _2553 = _2439;
        _2555 = _2441;
        _2557 = _2443;
    }
    else
    {
        uint _2564 = _2079 + 3u;
        uint _2568 = _2079 + 11u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _876) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _952;
        float _2585 = cbLight._m0[_2564].y + _953;
        float _2586 = cbLight._m0[_2564].z + _954;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2564].xyz));
        float _4527 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2598 = dot(vec3(_873, _874, _875), vec3(_2591, _2592, _2593));
        float _4538 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4549 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2244 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2624) + _2583) * _2597))) * _2597;
        float _4560 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2553 = (((((_2617 * _2266) + _1022) * cbLight._m0[_2568].x) * _2636) * _2637) + _2439;
        _2555 = (((((_2617 * _2268) + _1024) * cbLight._m0[_2568].y) * _2636) * _2637) + _2441;
        _2557 = (((((_2617 * _2269) + _1025) * cbLight._m0[_2568].z) * _2636) * _2637) + _2443;
    }
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_2077.y == 0u)
    {
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2712;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2712;
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2712;
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.x;
        uint _2739 = uint((float(_2727.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _2728))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _2728)));
        float _2749 = (log2(_2715 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        uint _2753 = uint(isnan(14.0) ? _2750 : (isnan(_2750) ? 14.0 : min(_2750, 14.0)));
        uvec4 _2758 = texelFetch(g_lightClusterGridBuffer, int(((_2753 << 2u) + (_2739 << 6u)) >> 2u));
        uint _2759 = _2758.x;
        uint _2760 = _2727.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2760 >> 4u) & 15u)) + 4294967295u) & _2759) == 0u) || ((_2760 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3020)
                {
                    frontier_phi_61_pred = _3004;
                    frontier_phi_61_pred_1 = _3009;
                    frontier_phi_61_pred_2 = _3008;
                    frontier_phi_61_pred_3 = _3007;
                    frontier_phi_61_pred_4 = _3006;
                    frontier_phi_61_pred_5 = _3005;
                }
                else
                {
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    uint _3134;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3019;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    for (;;)
                    {
                        uint _3138 = uint(findLSB(_3134)) + (_3010 << 5u);
                        uint _3135 = (_3134 + 4294967295u) & _3134;
                        uint _3140 = _3138 * 48u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3160 = (_3138 * 48u) + 4u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3179 = (_3138 * 48u) + 8u;
                        vec3 _3190 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x));
                        float _3194 = _3154.x - _2713;
                        float _3195 = _3154.y - _2714;
                        float _3196 = _3154.z - _2715;
                        float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                        float _3200 = inversesqrt(_3197);
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3204 = dot(vec3(_979, _982, _985), vec3(_3201, _3202, _3203));
                        float _3209 = 1.0 - (_3197 * _3154.w);
                        float _4586 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3211 = sqrt(_3197) * _3173.w;
                        float _3214 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3204) + _3215;
                        float _3221 = _3211 * _3211;
                        float _3225 = ((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3210) / ((_3221 * 0.699999988079071044921875) + 1.0);
                        float _3229 = (-0.0) - _2713;
                        float _3230 = (-0.0) - _2714;
                        float _3231 = (-0.0) - _2715;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3246 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _1054;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3259 = _3238 + _3203;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_979, _982, _985), vec3(_3236, _3237, _3238));
                        float _4602 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3271 = dot(vec3(_979, _982, _985), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4613 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3214 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3204) + _3280;
                        float _4624 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4635 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) / ((_3278 * _3278) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125))) * _3210;
                        _3063 = (_3225 * _3173.x) + _3131;
                        _3064 = (_3225 * _3173.y) + _3132;
                        _3065 = (_3225 * _3173.z) + _3133;
                        _3060 = (_3306 * _3190.x) + _3128;
                        _3061 = (_3306 * _3190.y) + _3129;
                        _3062 = (_3306 * _3190.z) + _3130;
                        if (_3135 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3135;
                        }
                    }
                    frontier_phi_61_pred = _3060;
                    frontier_phi_61_pred_1 = _3065;
                    frontier_phi_61_pred_2 = _3064;
                    frontier_phi_61_pred_3 = _3063;
                    frontier_phi_61_pred_4 = _3062;
                    frontier_phi_61_pred_5 = _3061;
                }
                _2861 = frontier_phi_61_pred;
                _2871 = frontier_phi_61_pred_1;
                _2869 = frontier_phi_61_pred_2;
                _2867 = frontier_phi_61_pred_3;
                _2865 = frontier_phi_61_pred_4;
                _2863 = frontier_phi_61_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2861;
                    _3005 = _2863;
                    _3006 = _2865;
                    _3007 = _2867;
                    _3008 = _2869;
                    _3009 = _2871;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2877) & _2759) == 0u)
        {
            _2972 = _2860;
            _2974 = _2862;
            _2976 = _2864;
            _2978 = _2866;
            _2980 = _2868;
            _2982 = _2870;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
            float _2998 = _2997 * _2713;
            float _2999 = _2997 * _2714;
            float _3000 = _2997 * _2715;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3111 = _2860;
                float _3112 = _2862;
                float _3113 = _2864;
                float _3114 = _2866;
                float _3115 = _2868;
                float _3116 = _2870;
                uint _3117 = _2877;
                uint _3126;
                bool _3127;
                for (;;)
                {
                    _3126 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                    _3127 = _3126 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3127)
                    {
                        frontier_phi_67_pred = _3114;
                        frontier_phi_67_pred_1 = _3115;
                        frontier_phi_67_pred_2 = _3116;
                        frontier_phi_67_pred_3 = _3113;
                        frontier_phi_67_pred_4 = _3112;
                        frontier_phi_67_pred_5 = _3111;
                    }
                    else
                    {
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3324 = _3111;
                        float _3325 = _3112;
                        float _3326 = _3113;
                        float _3327 = _3114;
                        float _3328 = _3115;
                        float _3329 = _3116;
                        uint _3330 = _3126;
                        uint _3331;
                        vec4 _3356;
                        float _3357;
                        vec4 _3372;
                        vec3 _3384;
                        vec4 _3399;
                        vec4 _3414;
                        float _3460;
                        bool _3461;
                        for (;;)
                        {
                            uint _3341 = ((_3117 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3330));
                            _3331 = (_3330 + 4294967295u) & _3330;
                            uint _3343 = _3341 * 40u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3357 = _3356.w;
                            uint _3359 = (_3341 * 40u) + 4u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3341 * 40u) + 8u;
                            _3384 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x));
                            uint _3386 = (_3341 * 40u) + 16u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3341 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3341 * 40u) + 24u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3435 = (_3341 * 40u) + 28u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3460 = fma(_2715, _3448.z, fma(_2714, _3448.y, _3448.x * _2713)) + _3448.w;
                            _3461 = !((fma(_2715, _3429.z, fma(_2714, _3429.y, _3429.x * _2713)) + _3429.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3461)
                            {
                                float _3488 = _3356.x - _2713;
                                float _3489 = _3356.y - _2714;
                                float _3490 = _3356.z - _2715;
                                float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                                float _3494 = inversesqrt(_3491);
                                float _3495 = _3494 * _3488;
                                float _3496 = _3494 * _3489;
                                float _3497 = _3494 * _3490;
                                float _3501 = 1.0 - (_3491 / (_3357 * _3357));
                                float _4646 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3506 = sqrt(_3491) * _3372.w;
                                float _3508 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                                float _3509 = _3508 * _3508;
                                float _3512 = ((1.0 - _3509) * dot(vec3(_3495, _3496, _3497), vec3(_979, _982, _985))) + _3509;
                                float _3515 = _3506 * _3506;
                                float _3519 = (fma(_2715, _3399.z, fma(_2714, _3399.y, _3399.x * _2713)) + _3399.w) / _3460;
                                float _3520 = (fma(_2715, _3414.z, fma(_2714, _3414.y, _3414.x * _2713)) + _3414.w) / _3460;
                                float _3524 = 1.0 - dot(vec2(_3519, _3520), vec2(_3519, _3520));
                                float _4662 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3526 = _3525 * (((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3502) / ((_3515 * 0.699999988079071044921875) + 1.0));
                                float _3538 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                                float _3539 = 1.0 - _1054;
                                float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                                float _3547 = _3546 * _3546;
                                float _3548 = _3547 * _3547;
                                float _3549 = _3495 - _2998;
                                float _3550 = _3496 - _2999;
                                float _3551 = _3497 - _3000;
                                float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                                float _3559 = dot(vec3(_979, _982, _985), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4673 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3563 = dot(vec3(_979, _982, _985), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                                float _4684 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3566 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                                float _3571 = _3508 * _3547;
                                float _3572 = _3571 * _3571;
                                float _3578 = ((1.0 - _3572) * dot(vec3(_979, _982, _985), vec3(_3495, _3496, _3497))) + _3572;
                                float _4695 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3580 = 1.0 - _3547;
                                float _3590 = (0.5 / (((_3579 * ((_3562 * _3580) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3547) * _3562))) * _3579;
                                float _4706 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3600 = (_3525 * _3502) * (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) / ((_3570 * _3570) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3600 * _3384.x;
                                frontier_phi_73_pred_1 = _3600 * _3384.y;
                                frontier_phi_73_pred_2 = _3526 * _3372.z;
                                frontier_phi_73_pred_3 = _3526 * _3372.y;
                                frontier_phi_73_pred_4 = _3526 * _3372.x;
                                frontier_phi_73_pred_5 = _3600 * _3384.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_73_pred;
                            _3605 = frontier_phi_73_pred_1;
                            _3609 = frontier_phi_73_pred_2;
                            _3608 = frontier_phi_73_pred_3;
                            _3607 = frontier_phi_73_pred_4;
                            _3606 = frontier_phi_73_pred_5;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            if (_3331 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3331;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3314;
                        frontier_phi_67_pred_1 = _3315;
                        frontier_phi_67_pred_2 = _3316;
                        frontier_phi_67_pred_3 = _3313;
                        frontier_phi_67_pred_4 = _3312;
                        frontier_phi_67_pred_5 = _3311;
                    }
                    _2979 = frontier_phi_67_pred;
                    _2981 = frontier_phi_67_pred_1;
                    _2983 = frontier_phi_67_pred_2;
                    _2977 = frontier_phi_67_pred_3;
                    _2975 = frontier_phi_67_pred_4;
                    _2973 = frontier_phi_67_pred_5;
                    uint _3118 = _3117 + 1u;
                    if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3111 = _2973;
                        _3112 = _2975;
                        _3113 = _2977;
                        _3114 = _2979;
                        _3115 = _2981;
                        _3116 = _2983;
                        _3117 = _3118;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2981;
                frontier_phi_55_56_ladder_1 = _2983;
                frontier_phi_55_56_ladder_2 = _2979;
                frontier_phi_55_56_ladder_3 = _2977;
                frontier_phi_55_56_ladder_4 = _2975;
                frontier_phi_55_56_ladder_5 = _2973;
            }
            else
            {
                frontier_phi_55_56_ladder = _2868;
                frontier_phi_55_56_ladder_1 = _2870;
                frontier_phi_55_56_ladder_2 = _2866;
                frontier_phi_55_56_ladder_3 = _2864;
                frontier_phi_55_56_ladder_4 = _2862;
                frontier_phi_55_56_ladder_5 = _2860;
            }
            _2972 = frontier_phi_55_56_ladder_5;
            _2974 = frontier_phi_55_56_ladder_4;
            _2976 = frontier_phi_55_56_ladder_3;
            _2978 = frontier_phi_55_56_ladder_2;
            _2980 = frontier_phi_55_56_ladder;
            _2982 = frontier_phi_55_56_ladder_1;
        }
        float _2987 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _2772 = (_2987 * _2978) + _2208;
        _2774 = (_2987 * _2980) + _2210;
        _2776 = (_2987 * _2982) + _2212;
        _2778 = ((_2972 * _1022) * _2987) + _2553;
        _2780 = ((_2974 * _1024) * _2987) + _2555;
        _2782 = ((_2976 * _1025) * _2987) + _2557;
    }
    else
    {
        _2772 = _2208;
        _2774 = _2210;
        _2776 = _2212;
        _2778 = _2553;
        _2780 = _2555;
        _2782 = _2557;
    }
    float _4722 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4733 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4744 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    uint _2802 = _277 + 6u;
    float _2810 = _960 / cbSceneParam._m0[86u].x;
    float _2811 = _961 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _895 : (isnan(_895) ? cbSceneParam._m0[77u].w : min(_895, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_895 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_895) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _895 : min(cbSceneParam._m0[80u].w, _895));
        float _2886 = _2885 / _895;
        float _2897 = _2886 * _945;
        float _2898 = _946 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2900 = _2886 * _947;
        float _2902 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2898;
        float _2910 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3073;
        if (abs((_2899 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3073 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3035 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3073 = ((abs(_2910 / _2899) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2920 * _3044) - exp2(_2920 * _3045)) * _3033))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3075 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3084 = exp2((_3073 * (-1.44269502162933349609375)) * (1.0 - _3075.w));
        float _3085 = log2(_3084);
        float _3101 = log2(_2830);
        _2922 = (exp2(_3101 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].x)) * _3075.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2924 = (exp2(_3101 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].y)) * _3075.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2926 = (exp2(_3101 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].z)) * _3075.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2928 = _3084 * _2830;
    }
    else
    {
        _2922 = _2827;
        _2924 = _2828;
        _2926 = _2829;
        _2928 = _2830;
    }
    float _2940 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2941 = _2940 == 3.0;
    float _2942 = log2(_2928);
    float _2949 = exp2(_2942 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2772 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1038))) + ((_2778 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1846)) * cbPerFrame._m0[3u].x));
    float _2950 = exp2(_2942 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2774 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1038))) + ((_2780 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1846)) * cbPerFrame._m0[3u].x));
    float _2951 = exp2(_2942 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2776 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1038))) + ((_2782 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1846)) * cbPerFrame._m0[3u].x));
    float _2960 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2960 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.y = _2960 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.z = _2960 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
    SV_Target.w = cbInstanceData._m0[_2802].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2802].w;
}


