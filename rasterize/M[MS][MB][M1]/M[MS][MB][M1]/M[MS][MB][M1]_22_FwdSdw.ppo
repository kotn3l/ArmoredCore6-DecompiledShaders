#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1041;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3653 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    float _345 = fma(_336, _216, fma(_342, _223, _341 * _209));
    float _348 = fma(_336, _217, fma(_342, _224, _341 * _210));
    float _351 = fma(_336, _218, fma(_342, _225, _341 * _211));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _393 = _391.x;
    float _394 = 1.0 - _393;
    float _403 = (cbMtdParam._m0[19u].x + dot(vec4(_355 * _345, _355 * _348, _355 * _351, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_393 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[21u].z);
    float _3664 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _411 = (_404 * (cbMtdParam._m0[17u].x - _274)) + _274;
    float _412 = (_404 * (cbMtdParam._m0[17u].y - _275)) + _275;
    float _413 = (_404 * (cbMtdParam._m0[17u].z - _276)) + _276;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _428 = _426.x;
    float _430 = _428 - (_428 * _404);
    float _435 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _455 = (_448.x * 2.0) + (-1.0);
    float _456 = (_448.y * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3675 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _465 = ((_448.z - _435) * _404) + _435;
    float _475 = ((sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) - _336) * _404) + _336;
    float _478 = (((_455 - _341) * _404) + _341) + (cbMtdParam._m0[21u].x * _341);
    float _479 = (((_456 - _342) * _404) + _342) + (cbMtdParam._m0[21u].x * _342);
    float _484 = cbMtdParam._m0[22u].x + _320.w;
    float _487 = fma(_475, _216, fma(_479, _223, _478 * _209));
    float _490 = fma(_475, _217, fma(_479, _224, _478 * _210));
    float _493 = fma(_475, _218, fma(_479, _225, _478 * _211));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3686 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _501 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3708 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3719 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3730 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3741 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _506 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _608 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _611 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _614 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _628 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _634 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_628].x;
    float _635 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_628].y;
    float _636 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_628].z;
    float _3752 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _640 = 1.0 - _506;
    float _641 = _637 * _640;
    float _642 = _638 * _640;
    float _643 = _639 * _640;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _506;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _506;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _506;
    float _651 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    float _654 = _650 + 0.039999999105930328369140625;
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _667 = ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * TEXCOORD_5.w) * _663.x;
    float _668 = dot(vec3(_498, _499, _500), vec3(_578, _579, _580));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _498) - _578;
    float _676 = (_671 * _499) - _579;
    float _677 = (_671 * _500) - _580;
    float _681 = abs(dot(vec3(_578, _579, _580), vec3(_498, _499, _500)));
    float _3785 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = sqrt(_501);
    float _696 = exp2((_683 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _702 = (1.0 - _696) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _703 = _696 * _683;
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _769 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _773 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _798 = _731 + _498;
        float _799 = _735 + _499;
        float _800 = _739 + _500;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _765;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _769;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _773;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_498, _499, _500), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3833 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_498, _499, _500), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3866 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_498, _499, _500), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3899 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1084 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1088 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1111 = _731 + _498;
        float _1112 = _735 + _499;
        float _1113 = _739 + _500;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_498, _499, _500), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3962 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_498, _499, _500), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3995 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_498, _499, _500), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4028 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1041;
        _1350 = _1041;
        _1351 = _1041;
        _1352 = _1041;
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1053)) + _1053;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1054)) + _1054;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1055)) + _1055;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _675 * 0.5;
    float _1418 = _676 * 0.5;
    float _1419 = _677 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1460;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1471;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1462 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1475 = (_1471 * cbModelParam._m0[1u].x) + (_1460 * (1.0 - cbModelParam._m0[1u].x));
    float _1485 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1485 : min(cbModelParam._m0[25u].z, _1485));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1534 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1538 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1542 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1545 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1548 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1551 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1579;
        if (_1545 > 0.0)
        {
            _1579 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1579 = frontier_phi_14_12_ladder;
        }
        float _1751;
        if (_1548 > 0.0)
        {
            _1751 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1751 = frontier_phi_23_19_ladder;
        }
        float _2047;
        if (_1551 > 0.0)
        {
            _2047 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2047 = frontier_phi_35_30_ladder;
        }
        float _2049 = isnan(_1751) ? _1579 : (isnan(_1579) ? _1751 : min(_1579, _1751));
        float _2050 = isnan(_2047) ? _2049 : (isnan(_2049) ? _2047 : min(_2049, _2047));
        float _2054 = (_2050 * _1545) + _1534;
        float _2055 = (_2050 * _1548) + _1538;
        float _2056 = (_2050 * _1551) + _1542;
        float _2057 = _2050 * 9.9999997473787516355514526367188e-05;
        float _2059 = (-1.0) - _2057;
        float _2061 = _2057 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2056 > _2061) || ((_2056 < _2059) || ((_2055 > _2061) || ((_2055 < _2059) || ((_2054 < _2059) || (_2054 > _2061))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2201 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2056, cbModelParam._m0[9u].z, fma(_2055, cbModelParam._m0[9u].y, _2054 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2056, cbModelParam._m0[10u].z, fma(_2055, cbModelParam._m0[10u].y, _2054 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2056, cbModelParam._m0[11u].z, fma(_2055, cbModelParam._m0[11u].y, _2054 * cbModelParam._m0[11u].x))), _1486);
            frontier_phi_13_35_ladder = _2201.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2201.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2201.x * cbModelParam._m0[1u].y;
        }
        _1567 = frontier_phi_13_35_ladder_2;
        _1569 = frontier_phi_13_35_ladder_1;
        _1571 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1486);
        _1567 = _1555.x * cbModelParam._m0[1u].y;
        _1569 = _1555.y * cbModelParam._m0[1u].y;
        _1571 = _1555.z * cbModelParam._m0[1u].y;
    }
    float _1575 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1575 : min(cbModelParam._m0[25u].w, _1575));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1644 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1647 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1756;
        if (_1641 > 0.0)
        {
            _1756 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1756 = frontier_phi_25_21_ladder;
        }
        float _2074;
        if (_1644 > 0.0)
        {
            _2074 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2074 = frontier_phi_37_32_ladder;
        }
        float _2412;
        if (_1647 > 0.0)
        {
            _2412 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2412 = frontier_phi_47_44_ladder;
        }
        float _2414 = isnan(_2074) ? _1756 : (isnan(_1756) ? _2074 : min(_1756, _2074));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1641) + _1630;
        float _2420 = (_2415 * _1644) + _1634;
        float _2421 = (_2415 * _1647) + _1638;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1576);
            frontier_phi_22_47_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_22_47_ladder_2;
        _1668 = frontier_phi_22_47_ladder_1;
        _1670 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1576);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1683 = (((_702 * _651) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1666 - _1567)) + _1567);
    float _1685 = (((_702 * _653) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1668 - _1569)) + _1569);
    float _1687 = (((_702 * _654) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1670 - _1571)) + _1571);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    float _1730 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1743 = _1730 / _1742;
    float _1744 = _1734 / _1742;
    float _1745 = _1738 / _1742;
    float _1892;
    float _1893;
    float _1894;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1772 = ((uint(_1745 > cbSceneParam._m0[59u].y) + uint(_1745 > cbSceneParam._m0[59u].x)) + uint(_1745 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1773 = _1772 + 43u;
        uint _1781 = _1772 + 44u;
        uint _1789 = _1772 + 45u;
        uint _1797 = _1772 + 46u;
        float _1808 = fma(_1742, cbSceneParam._m0[_1773].w, fma(_1738, cbSceneParam._m0[_1773].z, fma(_1734, cbSceneParam._m0[_1773].y, _1730 * cbSceneParam._m0[_1773].x)));
        float _1812 = fma(_1742, cbSceneParam._m0[_1781].w, fma(_1738, cbSceneParam._m0[_1781].z, fma(_1734, cbSceneParam._m0[_1781].y, _1730 * cbSceneParam._m0[_1781].x)));
        float _1820 = fma(_1742, cbSceneParam._m0[_1797].w, fma(_1738, cbSceneParam._m0[_1797].z, fma(_1734, cbSceneParam._m0[_1797].y, _1730 * cbSceneParam._m0[_1797].x)));
        float _1825 = cbSceneParam._m0[33u].z * _1820;
        float _1827 = cbSceneParam._m0[33u].w * _1820;
        float _1830 = fma(_1742, cbSceneParam._m0[_1789].w, fma(_1738, cbSceneParam._m0[_1789].z, fma(_1734, cbSceneParam._m0[_1789].y, _1730 * cbSceneParam._m0[_1789].x))) / _1820;
        float _1878 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
        float _4154 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1885 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1808) / _1820, (_1827 + _1812) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 + _1808) / _1820, (_1812 - _1825) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1825) / _1820, (_1812 - _1827) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1827) / _1820, (_1825 + _1812) / _1820), _1830), 0.0)).x), vec4(0.25)));
        _1892 = 1.0 - (_1885 * cbSceneParam._m0[34u].x);
        _1893 = 1.0 - (_1885 * cbSceneParam._m0[34u].y);
        _1894 = 1.0 - (_1885 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1892 = 1.0;
        _1893 = 1.0;
        _1894 = 1.0;
    }
    float _1958;
    float _1960;
    float _1962;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1946 = fma(_1742, cbSceneParam._m0[63u].w, fma(_1738, cbSceneParam._m0[63u].z, fma(_1734, cbSceneParam._m0[63u].y, _1730 * cbSceneParam._m0[63u].x)));
        float _1947 = fma(_1742, cbSceneParam._m0[60u].w, fma(_1738, cbSceneParam._m0[60u].z, fma(_1734, cbSceneParam._m0[60u].y, _1730 * cbSceneParam._m0[60u].x))) / _1946;
        float _1948 = fma(_1742, cbSceneParam._m0[61u].w, fma(_1738, cbSceneParam._m0[61u].z, fma(_1734, cbSceneParam._m0[61u].y, _1730 * cbSceneParam._m0[61u].x))) / _1946;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1947 >= cbSceneParam._m0[64u].x) && (_1948 >= cbSceneParam._m0[64u].y)) && (_1947 <= cbSceneParam._m0[64u].z)) && (_1948 <= cbSceneParam._m0[64u].w))
        {
            float _2087 = fma(_1742, cbSceneParam._m0[62u].w, fma(_1738, cbSceneParam._m0[62u].z, fma(_1734, cbSceneParam._m0[62u].y, _1730 * cbSceneParam._m0[62u].x))) / _1946;
            float _2091 = isnan(cbSceneParam._m0[41u].w) ? _2087 : (isnan(_2087) ? cbSceneParam._m0[41u].w : max(_2087, cbSceneParam._m0[41u].w));
            float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
            float _4170 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
            float _2141 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1947, cbSceneParam._m0[33u].w + _1948), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1947, _1948 - cbSceneParam._m0[33u].z), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].z, _1948 - cbSceneParam._m0[33u].w), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1948), _2091), 0.0)).x), vec4(0.25)));
            float _2145 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
            float _2146 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
            float _2147 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2147) ? _1894 : (isnan(_1894) ? _2147 : min(_1894, _2147));
            frontier_phi_34_33_ladder_1 = isnan(_2146) ? _1893 : (isnan(_1893) ? _2146 : min(_1893, _2146));
            frontier_phi_34_33_ladder_2 = isnan(_2145) ? _1892 : (isnan(_1892) ? _2145 : min(_1892, _2145));
        }
        else
        {
            frontier_phi_34_33_ladder = _1894;
            frontier_phi_34_33_ladder_1 = _1893;
            frontier_phi_34_33_ladder_2 = _1892;
        }
        _1958 = frontier_phi_34_33_ladder_2;
        _1960 = frontier_phi_34_33_ladder_1;
        _1962 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1958 = _1892;
        _1960 = _1893;
        _1962 = _1894;
    }
    uvec4 _1967 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1969 = _1967.x * 14u;
    uint _1970 = _1969 + 13u;
    float _1977 = _667 + (-1.0);
    float _1982 = (cbLight._m0[_1970].x * _1977) + 1.0;
    float _1983 = (cbLight._m0[_1970].y * _1977) + 1.0;
    float _1984 = (cbLight._m0[_1970].z * _1977) + 1.0;
    float _1985 = (cbLight._m0[_1970].w * _1977) + 1.0;
    uint _1986 = _1969 + 5u;
    float _1992 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _1996 = _1969 + 4u;
    float _2006 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _2010 = _1969 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_498, _499, _500));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_498, _499, _500));
    float _4206 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4217 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1986].x * _1992) * _2031) + (((cbLight._m0[_1996].x * _1958) * _2006) * _2029);
    float _2039 = ((_1992 * cbLight._m0[_1986].y) * _2031) + (((cbLight._m0[_1996].y * _1960) * _2006) * _2029);
    float _2040 = ((_1992 * cbLight._m0[_1986].z) * _2031) + (((cbLight._m0[_1996].z * _1962) * _2006) * _2029);
    uvec4 _2044 = floatBitsToUint(cbLight._m0[_1969 + 12u]);
    bool _2046 = _2044.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2046)
    {
        _2148 = _2038;
        _2150 = _2039;
        _2152 = _2040;
    }
    else
    {
        uint _2156 = _1969 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_1969 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4228 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2175 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2038;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2039;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2040;
    }
    bool _2155 = _2044.y == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2155)
    {
        _2210 = _2148;
        _2212 = _2150;
        _2214 = _2152;
    }
    else
    {
        uint _2383 = _1969 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_1969 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4244 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2402 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2210 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2148;
        _2212 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2150;
        _2214 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2152;
    }
    uint _2217 = _1969 + 8u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _501) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_1969].x + _578;
    float _2233 = cbLight._m0[_1969].y + _579;
    float _2234 = cbLight._m0[_1969].z + _580;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1969].xyz));
    float _4260 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2246 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2247 = dot(vec3(_498, _499, _500), vec3(_2239, _2240, _2241));
    float _4282 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2251 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2239, _2240, _2241));
    float _4293 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2255 = _2231 * _2231;
    float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
    float _2268 = 0.959999978542327880859375 - _648;
    float _2270 = 0.959999978542327880859375 - _649;
    float _2271 = 0.959999978542327880859375 - _650;
    float _2278 = 1.0 - _2231;
    float _2289 = (0.5 / (((_2246 * ((_2245 * _2278) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2278) + _2231) * _2245))) * _2245;
    float _4304 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
    uint _2305 = _1969 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _501) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2010].x + _578;
    float _2319 = cbLight._m0[_2010].y + _579;
    float _2320 = cbLight._m0[_2010].z + _580;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2010].xyz));
    float _4315 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2332 = dot(vec3(_498, _499, _500), vec3(_2325, _2326, _2327));
    float _4326 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2325, _2326, _2327));
    float _4337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
    float _2358 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2246 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2358) + _2317) * _2331))) * _2331;
    float _4348 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2380 = (((((_2351 * _2268) + _651) * cbLight._m0[_2305].x) * _2370) * _1992) + ((((cbLight._m0[_2217].x * _1958) * ((_2267 * _2268) + _651)) * _2291) * _2006);
    float _2381 = (((((_2351 * _2270) + _653) * cbLight._m0[_2305].y) * _2370) * _1992) + ((((cbLight._m0[_2217].y * _1960) * ((_2267 * _2270) + _653)) * _2291) * _2006);
    float _2382 = (((((_2351 * _2271) + _654) * cbLight._m0[_2305].z) * _2370) * _1992) + ((((cbLight._m0[_2217].z * _1962) * ((_2267 * _2271) + _654)) * _2291) * _2006);
    float _2438;
    float _2440;
    float _2442;
    if (_2046)
    {
        _2438 = _2380;
        _2440 = _2381;
        _2442 = _2382;
    }
    else
    {
        uint _2444 = _1969 + 2u;
        uint _2448 = _1969 + 10u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _501) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _578;
        float _2465 = cbLight._m0[_2444].y + _579;
        float _2466 = cbLight._m0[_2444].z + _580;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2444].xyz));
        float _4359 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2478 = dot(vec3(_498, _499, _500), vec3(_2471, _2472, _2473));
        float _4370 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4381 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2246 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2504) + _2463) * _2477))) * _2477;
        float _4392 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2438 = (((((_2497 * _2268) + _651) * cbLight._m0[_2448].x) * _2516) * _2517) + _2380;
        _2440 = (((((_2497 * _2270) + _653) * cbLight._m0[_2448].y) * _2516) * _2517) + _2381;
        _2442 = (((((_2497 * _2271) + _654) * cbLight._m0[_2448].z) * _2516) * _2517) + _2382;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2155)
    {
        _2548 = _2438;
        _2550 = _2440;
        _2552 = _2442;
    }
    else
    {
        uint _2559 = _1969 + 3u;
        uint _2563 = _1969 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _501) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _578;
        float _2580 = cbLight._m0[_2559].y + _579;
        float _2581 = cbLight._m0[_2559].z + _580;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2559].xyz));
        float _4408 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2593 = dot(vec3(_498, _499, _500), vec3(_2586, _2587, _2588));
        float _4419 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4430 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2246 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2619) + _2578) * _2592))) * _2592;
        float _4441 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2548 = (((((_2612 * _2268) + _651) * cbLight._m0[_2563].x) * _2631) * _2632) + _2438;
        _2550 = (((((_2612 * _2270) + _653) * cbLight._m0[_2563].y) * _2631) * _2632) + _2440;
        _2552 = (((((_2612 * _2271) + _654) * cbLight._m0[_2563].z) * _2631) * _2632) + _2442;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_1967.y == 0u)
    {
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _2654)));
        float _2675 = (log2(_1745 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
        }
        else
        {
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            uint _2916 = 0u;
            uint _2925;
            bool _2926;
            for (;;)
            {
                _2925 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                _2926 = _2925 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2926)
                {
                    frontier_phi_66_pred = _2915;
                    frontier_phi_66_pred_1 = _2914;
                    frontier_phi_66_pred_2 = _2913;
                    frontier_phi_66_pred_3 = _2912;
                    frontier_phi_66_pred_4 = _2911;
                    frontier_phi_66_pred_5 = _2910;
                }
                else
                {
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    uint _3040;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2925;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3044 = uint(findLSB(_3040)) + (_2916 << 5u);
                        uint _3041 = (_3040 + 4294967295u) & _3040;
                        uint _3046 = _3044 * 48u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3066 = (_3044 * 48u) + 4u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3085 = (_3044 * 48u) + 8u;
                        vec3 _3096 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x));
                        float _3100 = _3060.x - _1743;
                        float _3101 = _3060.y - _1744;
                        float _3102 = _3060.z - _1745;
                        float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                        float _3106 = inversesqrt(_3103);
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3110 = dot(vec3(_608, _611, _614), vec3(_3107, _3108, _3109));
                        float _3115 = 1.0 - (_3103 * _3060.w);
                        float _4467 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3117 = sqrt(_3103) * _3079.w;
                        float _3120 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3110) + _3121;
                        float _3127 = _3117 * _3117;
                        float _3131 = ((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3116) / ((_3127 * 0.699999988079071044921875) + 1.0);
                        float _3135 = (-0.0) - _1743;
                        float _3136 = (-0.0) - _1744;
                        float _3137 = (-0.0) - _1745;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3151 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                        float _3152 = 1.0 - _683;
                        float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                        float _3160 = _3159 * _3159;
                        float _3161 = _3160 * _3160;
                        float _3162 = _3142 + _3107;
                        float _3163 = _3143 + _3108;
                        float _3164 = _3144 + _3109;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3172 = dot(vec3(_608, _611, _614), vec3(_3142, _3143, _3144));
                        float _4483 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3176 = dot(vec3(_608, _611, _614), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                        float _4494 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                        float _3184 = _3120 * _3160;
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3110) + _3185;
                        float _4505 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3190 = 1.0 - _3160;
                        float _3200 = (0.5 / (((_3189 * ((_3175 * _3190) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3160) * _3175))) * _3189;
                        float _4516 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3211 = (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3183 * _3183) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125))) * _3116;
                        _2969 = (_3131 * _3079.x) + _3037;
                        _2970 = (_3131 * _3079.y) + _3038;
                        _2971 = (_3131 * _3079.z) + _3039;
                        _2966 = (_3211 * _3096.x) + _3034;
                        _2967 = (_3211 * _3096.y) + _3035;
                        _2968 = (_3211 * _3096.z) + _3036;
                        if (_3041 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _3041;
                        }
                    }
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2970;
                    frontier_phi_66_pred_2 = _2969;
                    frontier_phi_66_pred_3 = _2968;
                    frontier_phi_66_pred_4 = _2967;
                    frontier_phi_66_pred_5 = _2966;
                }
                _2776 = frontier_phi_66_pred;
                _2774 = frontier_phi_66_pred_1;
                _2772 = frontier_phi_66_pred_2;
                _2770 = frontier_phi_66_pred_3;
                _2768 = frontier_phi_66_pred_4;
                _2766 = frontier_phi_66_pred_5;
                uint _2917 = _2916 + 1u;
                if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2910 = _2766;
                    _2911 = _2768;
                    _2912 = _2770;
                    _2913 = _2772;
                    _2914 = _2774;
                    _2915 = _2776;
                    _2916 = _2917;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
        }
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.z;
        uint _2782 = (_2780 >> 8u) & 15u;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((4294967295u << _2782) & _2685) == 0u)
        {
            _2878 = _2765;
            _2880 = _2767;
            _2882 = _2769;
            _2884 = _2771;
            _2886 = _2773;
            _2888 = _2775;
        }
        else
        {
            float _2903 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
            float _2904 = _2903 * _1743;
            float _2905 = _2903 * _1744;
            float _2906 = _2903 * _1745;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2782 < ((_2780 >> 12u) & 15u))
            {
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _3017 = _2765;
                float _3018 = _2767;
                float _3019 = _2769;
                float _3020 = _2771;
                float _3021 = _2773;
                float _3022 = _2775;
                uint _3023 = _2782;
                uint _3032;
                bool _3033;
                for (;;)
                {
                    _3032 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                    _3033 = _3032 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3033)
                    {
                        frontier_phi_72_pred = _3022;
                        frontier_phi_72_pred_1 = _3021;
                        frontier_phi_72_pred_2 = _3020;
                        frontier_phi_72_pred_3 = _3019;
                        frontier_phi_72_pred_4 = _3018;
                        frontier_phi_72_pred_5 = _3017;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3229 = _3017;
                        float _3230 = _3018;
                        float _3231 = _3019;
                        float _3232 = _3020;
                        float _3233 = _3021;
                        float _3234 = _3022;
                        uint _3235 = _3032;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3305;
                        vec4 _3320;
                        float _3366;
                        bool _3367;
                        for (;;)
                        {
                            uint _3246 = ((_3023 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3292 = (_3246 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3246 * 40u) + 20u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3246 * 40u) + 24u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3341 = (_3246 * 40u) + 28u;
                            vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3366 = fma(_1745, _3354.z, fma(_1744, _3354.y, _3354.x * _1743)) + _3354.w;
                            _3367 = !((fma(_1745, _3335.z, fma(_1744, _3335.y, _3335.x * _1743)) + _3335.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3367)
                            {
                                float _3394 = _3261.x - _1743;
                                float _3395 = _3261.y - _1744;
                                float _3396 = _3261.z - _1745;
                                float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                                float _3400 = inversesqrt(_3397);
                                float _3401 = _3400 * _3394;
                                float _3402 = _3400 * _3395;
                                float _3403 = _3400 * _3396;
                                float _3407 = 1.0 - (_3397 / (_3262 * _3262));
                                float _4527 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3412 = sqrt(_3397) * _3277.w;
                                float _3414 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                                float _3415 = _3414 * _3414;
                                float _3418 = ((1.0 - _3415) * dot(vec3(_3401, _3402, _3403), vec3(_608, _611, _614))) + _3415;
                                float _3421 = _3412 * _3412;
                                float _3425 = (fma(_1745, _3305.z, fma(_1744, _3305.y, _3305.x * _1743)) + _3305.w) / _3366;
                                float _3426 = (fma(_1745, _3320.z, fma(_1744, _3320.y, _3320.x * _1743)) + _3320.w) / _3366;
                                float _3430 = 1.0 - dot(vec2(_3425, _3426), vec2(_3425, _3426));
                                float _4543 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3432 = _3431 * (((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3408) / ((_3421 * 0.699999988079071044921875) + 1.0));
                                float _3444 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                                float _3445 = 1.0 - _683;
                                float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                                float _3453 = _3452 * _3452;
                                float _3454 = _3453 * _3453;
                                float _3455 = _3401 - _2904;
                                float _3456 = _3402 - _2905;
                                float _3457 = _3403 - _2906;
                                float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                                float _3465 = dot(vec3(_608, _611, _614), vec3((-0.0) - _2904, (-0.0) - _2905, (-0.0) - _2906));
                                float _4554 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3469 = dot(vec3(_608, _611, _614), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                                float _4565 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                                float _3477 = _3414 * _3453;
                                float _3478 = _3477 * _3477;
                                float _3484 = ((1.0 - _3478) * dot(vec3(_608, _611, _614), vec3(_3401, _3402, _3403))) + _3478;
                                float _4576 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3486 = 1.0 - _3453;
                                float _3496 = (0.5 / (((_3485 * ((_3468 * _3486) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3453) * _3468))) * _3485;
                                float _4587 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3506 = (_3431 * _3408) * (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3476 * _3476) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3432 * _3277.y;
                                frontier_phi_78_pred_1 = _3432 * _3277.x;
                                frontier_phi_78_pred_2 = _3506 * _3289.z;
                                frontier_phi_78_pred_3 = _3506 * _3289.y;
                                frontier_phi_78_pred_4 = _3506 * _3289.x;
                                frontier_phi_78_pred_5 = _3432 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3514 = frontier_phi_78_pred;
                            _3513 = frontier_phi_78_pred_1;
                            _3512 = frontier_phi_78_pred_2;
                            _3511 = frontier_phi_78_pred_3;
                            _3510 = frontier_phi_78_pred_4;
                            _3515 = frontier_phi_78_pred_5;
                            _3219 = _3513 + _3232;
                            _3220 = _3514 + _3233;
                            _3221 = _3515 + _3234;
                            _3216 = _3510 + _3229;
                            _3217 = _3511 + _3230;
                            _3218 = _3512 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3221;
                        frontier_phi_72_pred_1 = _3220;
                        frontier_phi_72_pred_2 = _3219;
                        frontier_phi_72_pred_3 = _3218;
                        frontier_phi_72_pred_4 = _3217;
                        frontier_phi_72_pred_5 = _3216;
                    }
                    _2889 = frontier_phi_72_pred;
                    _2887 = frontier_phi_72_pred_1;
                    _2885 = frontier_phi_72_pred_2;
                    _2883 = frontier_phi_72_pred_3;
                    _2881 = frontier_phi_72_pred_4;
                    _2879 = frontier_phi_72_pred_5;
                    uint _3024 = _3023 + 1u;
                    if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3017 = _2879;
                        _3018 = _2881;
                        _3019 = _2883;
                        _3020 = _2885;
                        _3021 = _2887;
                        _3022 = _2889;
                        _3023 = _3024;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2889;
                frontier_phi_60_61_ladder_1 = _2887;
                frontier_phi_60_61_ladder_2 = _2883;
                frontier_phi_60_61_ladder_3 = _2881;
                frontier_phi_60_61_ladder_4 = _2879;
                frontier_phi_60_61_ladder_5 = _2885;
            }
            else
            {
                frontier_phi_60_61_ladder = _2775;
                frontier_phi_60_61_ladder_1 = _2773;
                frontier_phi_60_61_ladder_2 = _2769;
                frontier_phi_60_61_ladder_3 = _2767;
                frontier_phi_60_61_ladder_4 = _2765;
                frontier_phi_60_61_ladder_5 = _2771;
            }
            _2878 = frontier_phi_60_61_ladder_4;
            _2880 = frontier_phi_60_61_ladder_3;
            _2882 = frontier_phi_60_61_ladder_2;
            _2884 = frontier_phi_60_61_ladder_5;
            _2886 = frontier_phi_60_61_ladder_1;
            _2888 = frontier_phi_60_61_ladder;
        }
        float _2893 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2698 = (_2893 * _2884) + _2210;
        _2700 = (_2893 * _2886) + _2212;
        _2702 = (_2893 * _2888) + _2214;
        _2704 = ((_2878 * _651) * _2893) + _2548;
        _2706 = ((_2880 * _653) * _2893) + _2550;
        _2708 = ((_2882 * _654) * _2893) + _2552;
    }
    else
    {
        _2698 = _2210;
        _2700 = _2212;
        _2702 = _2214;
        _2704 = _2548;
        _2706 = _2550;
        _2708 = _2552;
    }
    float _4603 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4614 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4625 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    uint _2728 = _228 + 6u;
    float _2736 = _586 / cbSceneParam._m0[86u].x;
    float _2737 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _2790 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _2791 = _2790 / _520;
        float _2802 = _2791 * _571;
        float _2803 = _572 * _2791;
        float _2804 = (-0.0) - _2803;
        float _2806 = _2791 * _573;
        float _2808 = (cbSceneParam._m0[77u].w * _2804) / _2790;
        float _2809 = _2808 + cbSceneParam._m0[79u].w;
        float _2810 = cbSceneParam._m0[79u].w - _2803;
        float _2816 = sqrt(((_2802 * _2802) + (_2803 * _2803)) + (_2806 * _2806));
        float _2819 = (1.0 - (cbSceneParam._m0[77u].w / _2790)) * _2816;
        float _2824 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2826 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2804 - _2808) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2809 > 0.0) ? exp2(_2824 * _2809) : (2.0 - exp2(_2826 * _2809))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2819;
        }
        else
        {
            float _2939 = 1.0 / cbSceneParam._m0[80u].x;
            float _2940 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : max(_2809, _2810));
            float _2941 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : min(_2809, _2810));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            _2979 = ((abs(_2816 / _2804) * cbSceneParam._m0[80u].y) * ((((_2950 - _2951) * 2.0) - ((exp2(_2824 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)))) - exp2(_2824 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))))) * _2939)) - ((exp2(_2826 * _2950) - exp2(_2826 * _2951)) * _2939))) + (_2819 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2756);
        _2828 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2830 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2832 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2834 = _2990 * _2756;
    }
    else
    {
        _2828 = _2753;
        _2830 = _2754;
        _2832 = _2755;
        _2834 = _2756;
    }
    float _2846 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2847 = _2846 == 3.0;
    float _2848 = log2(_2834);
    float _2855 = exp2(_2848 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2698 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _667))) + ((_2704 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2856 = exp2(_2848 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2700 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _667))) + ((_2706 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2857 = exp2(_2848 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2702 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _667))) + ((_2708 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2866 = (_2846 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2866 * (_2847 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2828)));
    SV_Target.y = _2866 * (_2847 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2830)));
    SV_Target.z = _2866 * (_2847 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.w = cbInstanceData._m0[_2728].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
}


