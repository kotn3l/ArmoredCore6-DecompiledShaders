#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1218;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _368 = (_359.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3827 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))));
    float _380 = _367 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_333.x * 2.0) + (-1.0)));
    float _381 = _368 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_333.y * 2.0) + (-1.0)));
    float _384 = fma(_375, _235, fma(_381, _242, _380 * _228));
    float _387 = fma(_375, _236, fma(_381, _243, _380 * _229));
    float _390 = fma(_375, _237, fma(_381, _244, _380 * _230));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _432 = _430.x;
    float _433 = 1.0 - _432;
    float _440 = ((_432 - _433) * cbMtdParam._m0[24u].z) + _433;
    float _442 = (cbMtdParam._m0[19u].x + dot(vec4(_394 * _384, _394 * _387, _394 * _390, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_440 * cbMtdParam._m0[21u].z);
    float _3838 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _445 = (-0.0) - cbMtdParam._m0[24u].x;
    float _447 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
    float _455 = _443 - ((_443 * TEXCOORD_8.x) * _448);
    float _456 = _443 - ((_443 * TEXCOORD_8.y) * _448);
    float _457 = _443 - ((_443 * TEXCOORD_8.z) * _448);
    float _464 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _468 = ((isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : min(_464, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _476 = (_468 - (((_440 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _468))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3869 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _481 = ((_455 * ((_313.x * cbMtdParam._m0[18u].x) - _292)) * _477) + _292;
    float _482 = ((_456 * ((_313.y * cbMtdParam._m0[18u].y) - _293)) * _477) + _293;
    float _483 = ((_457 * ((_313.z * cbMtdParam._m0[18u].z) - _294)) * _477) + _294;
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _497 = _495.x;
    float _498 = 1.0 - _497;
    float _527 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_497 - _498) * cbMtdParam._m0[24u].w) + _498) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3880 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _536 = ((((cbMtdParam._m0[10u].x - _481) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _528) + _481;
    float _537 = ((((cbMtdParam._m0[10u].y - _482) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _528) + _482;
    float _538 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _483)) * _528) + _483;
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _553 = _551.x;
    float _556 = _553 - ((_553 * _455) * _477);
    float _558 = _556 - (_556 * _528);
    float _563 = (((_333.z - _363) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _363;
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _584 = (_577.x * 2.0) + (-1.0);
    float _585 = (_577.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3891 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _595 = (((_577.z - _563) * _455) * _477) + _563;
    float _598 = ((cbMtdParam._m0[23u].y - _595) * _528) + _595;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _623 = (_617.x * 2.0) + (-1.0);
    float _624 = (_617.y * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _3902 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _645 = (((cbMtdParam._m0[21u].x * _380) + ((_584 - _380) * _455)) * _477) + _380;
    float _646 = (((cbMtdParam._m0[21u].x * _381) + ((_585 - _381) * _456)) * _477) + _381;
    float _647 = (((sqrt(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) - _375) * _457) * _477) + _375;
    float _658 = (((_623 - _645) + (_645 * cbMtdParam._m0[22u].z)) * _528) + _645;
    float _659 = (((_624 - _646) + (_646 * cbMtdParam._m0[22u].z)) * _528) + _646;
    float _660 = ((sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) - _647) * _528) + _647;
    float _662 = cbMtdParam._m0[22u].x + _359.w;
    float _665 = fma(_660, _235, fma(_659, _242, _658 * _228));
    float _668 = fma(_660, _236, fma(_659, _243, _658 * _229));
    float _671 = fma(_660, _237, fma(_659, _244, _658 * _230));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3913 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _679 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3935 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3946 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3957 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3968 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _684 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _748 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _738);
    float _749 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _738);
    float _750 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _738);
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _755 = _748 * _754;
    float _756 = _749 * _754;
    float _757 = _750 * _754;
    float _763 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _764 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _788 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _791 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _805 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _811 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_805].x;
    float _812 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_805].y;
    float _813 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_805].z;
    float _3979 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _817 = 1.0 - _684;
    float _818 = _814 * _817;
    float _819 = _815 * _817;
    float _820 = _816 * _817;
    float _825 = (_814 + (-0.039999999105930328369140625)) * _684;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _684;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _684;
    float _828 = _825 + 0.039999999105930328369140625;
    float _830 = _826 + 0.039999999105930328369140625;
    float _831 = _827 + 0.039999999105930328369140625;
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _763, cbSceneParam._m0[86u].y * _764));
    float _844 = ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * TEXCOORD_5.w) * _840.x;
    float _845 = dot(vec3(_676, _677, _678), vec3(_755, _756, _757));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _676) - _755;
    float _853 = (_848 * _677) - _756;
    float _854 = (_848 * _678) - _757;
    float _858 = abs(dot(vec3(_755, _756, _757), vec3(_676, _677, _678)));
    float _4012 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_679);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _879 = (1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _880 = _873 * _860;
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _946 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _950 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _975 = _908 + _676;
        float _976 = _912 + _677;
        float _977 = _916 + _678;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_676, _677, _678), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4060 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_676, _677, _678), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4093 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_676, _677, _678), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4126 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1257 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1261 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1265 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1288 = _908 + _676;
        float _1289 = _912 + _677;
        float _1290 = _916 + _678;
        float _1300 = fma(_1290, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288)) - _1257;
        float _1301 = fma(_1290, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288)) - _1261;
        float _1302 = fma(_1290, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288)) - _1265;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1257 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1261 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[35u].z) + ((((((_1265 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1356 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1323.x + (-0.5));
        float _1358 = _1356 * (_1323.y + (-0.5));
        float _1359 = _1356 * (_1323.z + (-0.5));
        float _1366 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1330.x + (-0.5));
        float _1368 = _1366 * (_1330.y + (-0.5));
        float _1369 = _1366 * (_1330.z + (-0.5));
        float _1376 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1337.x + (-0.5));
        float _1378 = _1376 * (_1337.y + (-0.5));
        float _1379 = _1376 * (_1337.z + (-0.5));
        float _1386 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1344.x + (-0.5));
        float _1388 = _1386 * (_1344.y + (-0.5));
        float _1389 = _1386 * (_1344.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_676, _677, _678), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4189 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1420 + 1.0))) + _1425) * _1390;
        float _1435 = _1358 * 0.5;
        float _1436 = _1368 * 0.5;
        float _1437 = _1378 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_676, _677, _678), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4222 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1462 + 1.0))) + _1467) * _1391;
        float _1477 = _1359 * 0.5;
        float _1478 = _1369 * 0.5;
        float _1479 = _1379 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_676, _677, _678), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4255 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1504 + 1.0))) + _1509) * _1392;
        _1526 = _1359;
        _1527 = _1358;
        _1528 = _1357;
        _1529 = _1369;
        _1530 = _1368;
        _1531 = _1367;
        _1532 = _1379;
        _1533 = _1378;
        _1534 = _1377;
        _1535 = _1392;
        _1536 = _1391;
        _1537 = _1390;
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1218;
        _1527 = _1218;
        _1528 = _1218;
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1230)) + _1230;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1231)) + _1231;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1232)) + _1232;
    float _1573 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1550));
    float _1594 = _852 * 0.5;
    float _1595 = _853 * 0.5;
    float _1596 = _854 * 0.5;
    float _1597 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1600 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1603 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1637;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1610 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1614 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1618 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1625 = dot(vec4(cbModelParam._m0[39u]), vec4(_1594, _1595, _1596, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1648;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1639 = dot(vec4(cbModelParam._m0[40u]), vec4(_1594, _1595, _1596, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1652 = (_1648 * cbModelParam._m0[1u].x) + (_1637 * (1.0 - cbModelParam._m0[1u].x));
    float _1662 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1662 : min(cbModelParam._m0[25u].z, _1662));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1724 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1727 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1755 = frontier_phi_14_12_ladder;
        }
        float _1926;
        if (_1724 > 0.0)
        {
            _1926 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1926 = frontier_phi_23_19_ladder;
        }
        float _2222;
        if (_1727 > 0.0)
        {
            _2222 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2222 = frontier_phi_35_30_ladder;
        }
        float _2224 = isnan(_1926) ? _1755 : (isnan(_1755) ? _1926 : min(_1755, _1926));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1721) + _1710;
        float _2230 = (_2225 * _1724) + _1714;
        float _2231 = (_2225 * _1727) + _1718;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2232;
        float _2236 = _2232 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 > _2236) || ((_2230 < _2234) || ((_2229 < _2234) || (_2229 > _2236))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2231, cbModelParam._m0[9u].z, fma(_2230, cbModelParam._m0[9u].y, _2229 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2231, cbModelParam._m0[10u].z, fma(_2230, cbModelParam._m0[10u].y, _2229 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2231, cbModelParam._m0[11u].z, fma(_2230, cbModelParam._m0[11u].y, _2229 * cbModelParam._m0[11u].x))), _1663);
            frontier_phi_13_35_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_13_35_ladder_2;
        _1745 = frontier_phi_13_35_ladder_1;
        _1747 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1663);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1805 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1809 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1813 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1816 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1819 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1822 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _1931;
        if (_1816 > 0.0)
        {
            _1931 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1931 = frontier_phi_25_21_ladder;
        }
        float _2249;
        if (_1819 > 0.0)
        {
            _2249 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2249 = frontier_phi_37_32_ladder;
        }
        float _2587;
        if (_1822 > 0.0)
        {
            _2587 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2587 = frontier_phi_47_44_ladder;
        }
        float _2589 = isnan(_2249) ? _1931 : (isnan(_1931) ? _2249 : min(_1931, _2249));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _1816) + _1805;
        float _2595 = (_2590 * _1819) + _1809;
        float _2596 = (_2590 * _1822) + _1813;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2597;
        float _2600 = _2597 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2596 > _2600) || ((_2596 < _2598) || ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 < _2598) || (_2594 > _2600))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2596, cbModelParam._m0[17u].z, fma(_2595, cbModelParam._m0[17u].y, _2594 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2596, cbModelParam._m0[18u].z, fma(_2595, cbModelParam._m0[18u].y, _2594 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2596, cbModelParam._m0[19u].z, fma(_2595, cbModelParam._m0[19u].y, _2594 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_22_47_ladder = _2718.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2718.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2718.x * cbModelParam._m0[1u].z;
        }
        _1841 = frontier_phi_22_47_ladder_2;
        _1843 = frontier_phi_22_47_ladder_1;
        _1845 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1752);
        _1841 = _1825.x * cbModelParam._m0[1u].z;
        _1843 = _1825.y * cbModelParam._m0[1u].z;
        _1845 = _1825.z * cbModelParam._m0[1u].z;
    }
    float _1858 = (((_879 * _828) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1860 = (((_879 * _830) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1862 = (((_879 * _831) + _880) * _844) * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1865 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1860, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1860, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1860, cbSceneParam._m0[91u].y, _1858 * cbSceneParam._m0[91u].x));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1918 = _1905 / _1917;
    float _1919 = _1909 / _1917;
    float _1920 = _1913 / _1917;
    float _2067;
    float _2068;
    float _2069;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1947 = ((uint(_1920 > cbSceneParam._m0[59u].y) + uint(_1920 > cbSceneParam._m0[59u].x)) + uint(_1920 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1948 = _1947 + 43u;
        uint _1956 = _1947 + 44u;
        uint _1964 = _1947 + 45u;
        uint _1972 = _1947 + 46u;
        float _1983 = fma(_1917, cbSceneParam._m0[_1948].w, fma(_1913, cbSceneParam._m0[_1948].z, fma(_1909, cbSceneParam._m0[_1948].y, _1905 * cbSceneParam._m0[_1948].x)));
        float _1987 = fma(_1917, cbSceneParam._m0[_1956].w, fma(_1913, cbSceneParam._m0[_1956].z, fma(_1909, cbSceneParam._m0[_1956].y, _1905 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1917, cbSceneParam._m0[_1972].w, fma(_1913, cbSceneParam._m0[_1972].z, fma(_1909, cbSceneParam._m0[_1972].y, _1905 * cbSceneParam._m0[_1972].x)));
        float _2000 = cbSceneParam._m0[33u].z * _1995;
        float _2002 = cbSceneParam._m0[33u].w * _1995;
        float _2005 = fma(_1917, cbSceneParam._m0[_1964].w, fma(_1913, cbSceneParam._m0[_1964].z, fma(_1909, cbSceneParam._m0[_1964].y, _1905 * cbSceneParam._m0[_1964].x))) / _1995;
        float _2053 = (cbSceneParam._m0[33u].x - sqrt(((_1919 * _1919) + (_1918 * _1918)) + (_1920 * _1920))) * cbSceneParam._m0[33u].y;
        float _4381 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2060 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 + _1983) / _1995, (_2002 + _1987) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 + _1983) / _1995, (_1987 - _2000) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 - _2000) / _1995, (_1987 - _2002) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 - _2002) / _1995, (_2000 + _1987) / _1995), _2005), 0.0)).x), vec4(0.25)));
        _2067 = 1.0 - (_2060 * cbSceneParam._m0[34u].x);
        _2068 = 1.0 - (_2060 * cbSceneParam._m0[34u].y);
        _2069 = 1.0 - (_2060 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2067 = 1.0;
        _2068 = 1.0;
        _2069 = 1.0;
    }
    float _2133;
    float _2135;
    float _2137;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2121 = fma(_1917, cbSceneParam._m0[63u].w, fma(_1913, cbSceneParam._m0[63u].z, fma(_1909, cbSceneParam._m0[63u].y, _1905 * cbSceneParam._m0[63u].x)));
        float _2122 = fma(_1917, cbSceneParam._m0[60u].w, fma(_1913, cbSceneParam._m0[60u].z, fma(_1909, cbSceneParam._m0[60u].y, _1905 * cbSceneParam._m0[60u].x))) / _2121;
        float _2123 = fma(_1917, cbSceneParam._m0[61u].w, fma(_1913, cbSceneParam._m0[61u].z, fma(_1909, cbSceneParam._m0[61u].y, _1905 * cbSceneParam._m0[61u].x))) / _2121;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2122 >= cbSceneParam._m0[64u].x) && (_2123 >= cbSceneParam._m0[64u].y)) && (_2122 <= cbSceneParam._m0[64u].z)) && (_2123 <= cbSceneParam._m0[64u].w))
        {
            float _2262 = fma(_1917, cbSceneParam._m0[62u].w, fma(_1913, cbSceneParam._m0[62u].z, fma(_1909, cbSceneParam._m0[62u].y, _1905 * cbSceneParam._m0[62u].x))) / _2121;
            float _2266 = isnan(cbSceneParam._m0[41u].w) ? _2262 : (isnan(_2262) ? cbSceneParam._m0[41u].w : max(_2262, cbSceneParam._m0[41u].w));
            float _2309 = (cbSceneParam._m0[33u].x - sqrt(((_1919 * _1919) + (_1918 * _1918)) + (_1920 * _1920))) * cbSceneParam._m0[33u].y;
            float _4397 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
            float _2316 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2122, cbSceneParam._m0[33u].w + _2123), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2122, _2123 - cbSceneParam._m0[33u].z), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2122 - cbSceneParam._m0[33u].z, _2123 - cbSceneParam._m0[33u].w), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2122 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2123), _2266), 0.0)).x), vec4(0.25)));
            float _2320 = 1.0 - (_2316 * cbSceneParam._m0[34u].x);
            float _2321 = 1.0 - (_2316 * cbSceneParam._m0[34u].y);
            float _2322 = 1.0 - (_2316 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2322) ? _2069 : (isnan(_2069) ? _2322 : min(_2069, _2322));
            frontier_phi_34_33_ladder_1 = isnan(_2321) ? _2068 : (isnan(_2068) ? _2321 : min(_2068, _2321));
            frontier_phi_34_33_ladder_2 = isnan(_2320) ? _2067 : (isnan(_2067) ? _2320 : min(_2067, _2320));
        }
        else
        {
            frontier_phi_34_33_ladder = _2069;
            frontier_phi_34_33_ladder_1 = _2068;
            frontier_phi_34_33_ladder_2 = _2067;
        }
        _2133 = frontier_phi_34_33_ladder_2;
        _2135 = frontier_phi_34_33_ladder_1;
        _2137 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2133 = _2067;
        _2135 = _2068;
        _2137 = _2069;
    }
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _844 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2181 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2185 = _2144 | 1u;
    float _2196 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_676, _677, _678));
    float _2199 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_676, _677, _678));
    float _4433 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _4444 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2204 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2206 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2213 = ((cbLight._m0[_2161].x * _2167) * _2206) + (((cbLight._m0[_2171].x * _2133) * _2181) * _2204);
    float _2214 = ((_2167 * cbLight._m0[_2161].y) * _2206) + (((cbLight._m0[_2171].y * _2135) * _2181) * _2204);
    float _2215 = ((_2167 * cbLight._m0[_2161].z) * _2206) + (((cbLight._m0[_2171].z * _2137) * _2181) * _2204);
    uvec4 _2219 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2221 = _2219.x == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2221)
    {
        _2323 = _2213;
        _2325 = _2214;
        _2327 = _2215;
    }
    else
    {
        uint _2331 = _2144 + 6u;
        float _2347 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4455 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2350 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2323 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2213;
        _2325 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2214;
        _2327 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2215;
    }
    bool _2330 = _2219.y == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2330)
    {
        _2385 = _2323;
        _2387 = _2325;
        _2389 = _2327;
    }
    else
    {
        uint _2558 = _2144 + 7u;
        float _2574 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2575 = _2574 * _2574;
        float _4471 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2576 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2577 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2385 = (((cbLight._m0[_2558].x * 0.3183098733425140380859375) * _2576) * _2577) + _2323;
        _2387 = (((cbLight._m0[_2558].y * 0.3183098733425140380859375) * _2576) * _2577) + _2325;
        _2389 = (((cbLight._m0[_2558].z * 0.3183098733425140380859375) * _2576) * _2577) + _2327;
    }
    uint _2392 = _2144 + 8u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _679) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2144].x + _755;
    float _2408 = cbLight._m0[_2144].y + _756;
    float _2409 = cbLight._m0[_2144].z + _757;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2144].xyz));
    float _4487 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2421 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2422 = dot(vec3(_676, _677, _678), vec3(_2414, _2415, _2416));
    float _4509 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2414, _2415, _2416));
    float _4520 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2406 * _2406;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2443 = 0.959999978542327880859375 - _825;
    float _2445 = 0.959999978542327880859375 - _826;
    float _2446 = 0.959999978542327880859375 - _827;
    float _2453 = 1.0 - _2406;
    float _2464 = (0.5 / (((_2421 * ((_2420 * _2453) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2453) + _2406) * _2420))) * _2420;
    float _4531 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2466 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    uint _2480 = _2144 + 9u;
    float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _679) * 0.949999988079071044921875);
    float _2492 = _2491 * _2491;
    float _2493 = cbLight._m0[_2185].x + _755;
    float _2494 = cbLight._m0[_2185].y + _756;
    float _2495 = cbLight._m0[_2185].z + _757;
    float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
    float _2500 = _2499 * _2493;
    float _2501 = _2499 * _2494;
    float _2502 = _2499 * _2495;
    float _2503 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2185].xyz));
    float _4542 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2507 = dot(vec3(_676, _677, _678), vec3(_2500, _2501, _2502));
    float _4553 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2500, _2501, _2502));
    float _4564 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2492 * _2492;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2533 = 1.0 - _2492;
    float _2543 = (0.5 / (((_2421 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2533) + _2492) * _2506))) * _2506;
    float _4575 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2545 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    float _2555 = (((((_2526 * _2443) + _828) * cbLight._m0[_2480].x) * _2545) * _2167) + ((((cbLight._m0[_2392].x * _2133) * ((_2442 * _2443) + _828)) * _2466) * _2181);
    float _2556 = (((((_2526 * _2445) + _830) * cbLight._m0[_2480].y) * _2545) * _2167) + ((((cbLight._m0[_2392].y * _2135) * ((_2442 * _2445) + _830)) * _2466) * _2181);
    float _2557 = (((((_2526 * _2446) + _831) * cbLight._m0[_2480].z) * _2545) * _2167) + ((((cbLight._m0[_2392].z * _2137) * ((_2442 * _2446) + _831)) * _2466) * _2181);
    float _2613;
    float _2615;
    float _2617;
    if (_2221)
    {
        _2613 = _2555;
        _2615 = _2556;
        _2617 = _2557;
    }
    else
    {
        uint _2619 = _2144 + 2u;
        uint _2623 = _2144 + 10u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _679) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _755;
        float _2640 = cbLight._m0[_2619].y + _756;
        float _2641 = cbLight._m0[_2619].z + _757;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2619].xyz));
        float _4586 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2653 = dot(vec3(_676, _677, _678), vec3(_2646, _2647, _2648));
        float _4597 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4608 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2672 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
        float _2679 = 1.0 - _2638;
        float _2689 = (0.5 / (((_2421 * ((_2652 * _2679) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2679) + _2638) * _2652))) * _2652;
        float _4619 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2691 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2692 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2613 = (((((_2672 * _2443) + _828) * cbLight._m0[_2623].x) * _2691) * _2692) + _2555;
        _2615 = (((((_2672 * _2445) + _830) * cbLight._m0[_2623].y) * _2691) * _2692) + _2556;
        _2617 = (((((_2672 * _2446) + _831) * cbLight._m0[_2623].z) * _2691) * _2692) + _2557;
    }
    float _2723;
    float _2725;
    float _2727;
    if (_2330)
    {
        _2723 = _2613;
        _2725 = _2615;
        _2727 = _2617;
    }
    else
    {
        uint _2734 = _2144 + 3u;
        uint _2738 = _2144 + 11u;
        float _2752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2734].w)) * _679) * 0.949999988079071044921875);
        float _2753 = _2752 * _2752;
        float _2754 = cbLight._m0[_2734].x + _755;
        float _2755 = cbLight._m0[_2734].y + _756;
        float _2756 = cbLight._m0[_2734].z + _757;
        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
        float _2761 = _2760 * _2754;
        float _2762 = _2760 * _2755;
        float _2763 = _2760 * _2756;
        float _2764 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2734].xyz));
        float _4635 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2768 = dot(vec3(_676, _677, _678), vec3(_2761, _2762, _2763));
        float _4646 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2771 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2772 = dot(vec3(cbLight._m0[_2734].xyz), vec3(_2761, _2762, _2763));
        float _4657 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2776 = _2753 * _2753;
        float _2780 = ((_2771 * _2771) * (_2776 + (-1.0))) + 1.0;
        float _2787 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2794 = 1.0 - _2753;
        float _2804 = (0.5 / (((_2421 * ((_2767 * _2794) + _2753)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2794) + _2753) * _2767))) * _2767;
        float _4668 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2806 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2776 / ((_2780 * _2780) * 3.141590118408203125));
        float _2807 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2723 = (((((_2787 * _2443) + _828) * cbLight._m0[_2738].x) * _2806) * _2807) + _2613;
        _2725 = (((((_2787 * _2445) + _830) * cbLight._m0[_2738].y) * _2806) * _2807) + _2615;
        _2727 = (((((_2787 * _2446) + _831) * cbLight._m0[_2738].z) * _2806) * _2807) + _2617;
    }
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    if (_2142.y == 0u)
    {
        uvec4 _2828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2829 = _2828.x;
        uint _2840 = uint((float(_2828.y) * floor(float(uint(cbSceneParam._m0[85u].y * _764) / _2829))) + floor(float(uint(cbSceneParam._m0[85u].x * _763) / _2829)));
        float _2850 = (log2(_1920 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2851 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        uint _2854 = uint(isnan(14.0) ? _2851 : (isnan(_2851) ? 14.0 : min(_2851, 14.0)));
        uvec4 _2859 = texelFetch(g_lightClusterGridBuffer, int(((_2854 << 2u) + (_2840 << 6u)) >> 2u));
        uint _2860 = _2859.x;
        uint _2861 = _2828.z;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((((1u << ((_2861 >> 4u) & 15u)) + 4294967295u) & _2860) == 0u) || ((_2861 & 240u) == 0u))
        {
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
        }
        else
        {
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3100)
                {
                    frontier_phi_66_pred = _3089;
                    frontier_phi_66_pred_1 = _3088;
                    frontier_phi_66_pred_2 = _3087;
                    frontier_phi_66_pred_3 = _3086;
                    frontier_phi_66_pred_4 = _3085;
                    frontier_phi_66_pred_5 = _3084;
                }
                else
                {
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    uint _3214;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3099;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    for (;;)
                    {
                        uint _3218 = uint(findLSB(_3214)) + (_3090 << 5u);
                        uint _3215 = (_3214 + 4294967295u) & _3214;
                        uint _3220 = _3218 * 48u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3240 = (_3218 * 48u) + 4u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3259 = (_3218 * 48u) + 8u;
                        vec3 _3270 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x));
                        float _3274 = _3234.x - _1918;
                        float _3275 = _3234.y - _1919;
                        float _3276 = _3234.z - _1920;
                        float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                        float _3280 = inversesqrt(_3277);
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3284 = dot(vec3(_785, _788, _791), vec3(_3281, _3282, _3283));
                        float _3289 = 1.0 - (_3277 * _3234.w);
                        float _4694 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3290 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3291 = sqrt(_3277) * _3253.w;
                        float _3294 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3284) + _3295;
                        float _3301 = _3291 * _3291;
                        float _3305 = ((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3290) / ((_3301 * 0.699999988079071044921875) + 1.0);
                        float _3309 = (-0.0) - _1918;
                        float _3310 = (-0.0) - _1919;
                        float _3311 = (-0.0) - _1920;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3325 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                        float _3326 = 1.0 - _860;
                        float _3333 = sqrt(1.0 - ((1.0 - (_3326 * _3326)) * (1.0 - (_3325 * _3325))));
                        float _3334 = _3333 * _3333;
                        float _3335 = _3334 * _3334;
                        float _3336 = _3316 + _3281;
                        float _3337 = _3317 + _3282;
                        float _3338 = _3318 + _3283;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3346 = dot(vec3(_785, _788, _791), vec3(_3316, _3317, _3318));
                        float _4710 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3350 = dot(vec3(_785, _788, _791), vec3(_3342 * _3336, _3342 * _3337, _3342 * _3338));
                        float _4721 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3357 = ((_3353 * _3353) * (_3335 + (-1.0))) + 1.0;
                        float _3358 = _3294 * _3334;
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3284) + _3359;
                        float _4732 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3364 = 1.0 - _3334;
                        float _3374 = (0.5 / (((_3363 * ((_3349 * _3364) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3334) * _3349))) * _3363;
                        float _4743 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3385 = (((_3335 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3357 * _3357) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125))) * _3290;
                        _3143 = (_3305 * _3253.x) + _3211;
                        _3144 = (_3305 * _3253.y) + _3212;
                        _3145 = (_3305 * _3253.z) + _3213;
                        _3140 = (_3385 * _3270.x) + _3208;
                        _3141 = (_3385 * _3270.y) + _3209;
                        _3142 = (_3385 * _3270.z) + _3210;
                        if (_3215 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3215;
                        }
                    }
                    frontier_phi_66_pred = _3145;
                    frontier_phi_66_pred_1 = _3144;
                    frontier_phi_66_pred_2 = _3143;
                    frontier_phi_66_pred_3 = _3142;
                    frontier_phi_66_pred_4 = _3141;
                    frontier_phi_66_pred_5 = _3140;
                }
                _2951 = frontier_phi_66_pred;
                _2949 = frontier_phi_66_pred_1;
                _2947 = frontier_phi_66_pred_2;
                _2945 = frontier_phi_66_pred_3;
                _2943 = frontier_phi_66_pred_4;
                _2941 = frontier_phi_66_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2941;
                    _3085 = _2943;
                    _3086 = _2945;
                    _3087 = _2947;
                    _3088 = _2949;
                    _3089 = _2951;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
        }
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.z;
        uint _2957 = (_2955 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2957) & _2860) == 0u)
        {
            _3052 = _2940;
            _3054 = _2942;
            _3056 = _2944;
            _3058 = _2946;
            _3060 = _2948;
            _3062 = _2950;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
            float _3078 = _3077 * _1918;
            float _3079 = _3077 * _1919;
            float _3080 = _3077 * _1920;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2957 < ((_2955 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3191 = _2940;
                float _3192 = _2942;
                float _3193 = _2944;
                float _3194 = _2946;
                float _3195 = _2948;
                float _3196 = _2950;
                uint _3197 = _2957;
                uint _3206;
                bool _3207;
                for (;;)
                {
                    _3206 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                    _3207 = _3206 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3207)
                    {
                        frontier_phi_72_pred = _3196;
                        frontier_phi_72_pred_1 = _3195;
                        frontier_phi_72_pred_2 = _3194;
                        frontier_phi_72_pred_3 = _3193;
                        frontier_phi_72_pred_4 = _3192;
                        frontier_phi_72_pred_5 = _3191;
                    }
                    else
                    {
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3403 = _3191;
                        float _3404 = _3192;
                        float _3405 = _3193;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        uint _3409 = _3206;
                        uint _3410;
                        vec4 _3435;
                        float _3436;
                        vec4 _3451;
                        vec3 _3463;
                        vec4 _3479;
                        vec4 _3494;
                        float _3540;
                        bool _3541;
                        for (;;)
                        {
                            uint _3420 = ((_3197 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3409));
                            _3410 = (_3409 + 4294967295u) & _3409;
                            uint _3422 = _3420 * 40u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3436 = _3435.w;
                            uint _3438 = (_3420 * 40u) + 4u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3420 * 40u) + 8u;
                            _3463 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x));
                            uint _3466 = (_3420 * 40u) + 16u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3420 * 40u) + 20u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3420 * 40u) + 24u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3515 = (_3420 * 40u) + 28u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3540 = fma(_1920, _3528.z, fma(_1919, _3528.y, _3528.x * _1918)) + _3528.w;
                            _3541 = !((fma(_1920, _3509.z, fma(_1919, _3509.y, _3509.x * _1918)) + _3509.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3541)
                            {
                                float _3568 = _3435.x - _1918;
                                float _3569 = _3435.y - _1919;
                                float _3570 = _3435.z - _1920;
                                float _3571 = dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570));
                                float _3574 = inversesqrt(_3571);
                                float _3575 = _3574 * _3568;
                                float _3576 = _3574 * _3569;
                                float _3577 = _3574 * _3570;
                                float _3581 = 1.0 - (_3571 / (_3436 * _3436));
                                float _4754 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3586 = sqrt(_3571) * _3451.w;
                                float _3588 = 1.39999997615814208984375 / (_3586 + 1.39999997615814208984375);
                                float _3589 = _3588 * _3588;
                                float _3592 = ((1.0 - _3589) * dot(vec3(_3575, _3576, _3577), vec3(_785, _788, _791))) + _3589;
                                float _3595 = _3586 * _3586;
                                float _3599 = (fma(_1920, _3479.z, fma(_1919, _3479.y, _3479.x * _1918)) + _3479.w) / _3540;
                                float _3600 = (fma(_1920, _3494.z, fma(_1919, _3494.y, _3494.x * _1918)) + _3494.w) / _3540;
                                float _3604 = 1.0 - dot(vec2(_3599, _3600), vec2(_3599, _3600));
                                float _4770 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3606 = _3605 * (((isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0))) * _3582) / ((_3595 * 0.699999988079071044921875) + 1.0));
                                float _3618 = exp2(log2(1.0 / ((_3595 * 3.5) + 5.0)) * 0.25);
                                float _3619 = 1.0 - _860;
                                float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                                float _3627 = _3626 * _3626;
                                float _3628 = _3627 * _3627;
                                float _3629 = _3575 - _3078;
                                float _3630 = _3576 - _3079;
                                float _3631 = _3577 - _3080;
                                float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                                float _3639 = dot(vec3(_785, _788, _791), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4781 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3643 = dot(vec3(_785, _788, _791), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                                float _4792 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3646 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                                float _3651 = _3588 * _3627;
                                float _3652 = _3651 * _3651;
                                float _3658 = ((1.0 - _3652) * dot(vec3(_785, _788, _791), vec3(_3575, _3576, _3577))) + _3652;
                                float _4803 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3660 = 1.0 - _3627;
                                float _3670 = (0.5 / (((_3659 * ((_3642 * _3660) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3659 * _3660) + _3627) * _3642))) * _3659;
                                float _4814 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3680 = (_3605 * _3582) * (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3650 * _3650) * ((_3595 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3606 * _3451.y;
                                frontier_phi_78_pred_1 = _3606 * _3451.x;
                                frontier_phi_78_pred_2 = _3680 * _3463.z;
                                frontier_phi_78_pred_3 = _3680 * _3463.y;
                                frontier_phi_78_pred_4 = _3680 * _3463.x;
                                frontier_phi_78_pred_5 = _3606 * _3451.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3688 = frontier_phi_78_pred;
                            _3687 = frontier_phi_78_pred_1;
                            _3686 = frontier_phi_78_pred_2;
                            _3685 = frontier_phi_78_pred_3;
                            _3684 = frontier_phi_78_pred_4;
                            _3689 = frontier_phi_78_pred_5;
                            _3393 = _3687 + _3406;
                            _3394 = _3688 + _3407;
                            _3395 = _3689 + _3408;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3392 = _3686 + _3405;
                            if (_3410 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3410;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3395;
                        frontier_phi_72_pred_1 = _3394;
                        frontier_phi_72_pred_2 = _3393;
                        frontier_phi_72_pred_3 = _3392;
                        frontier_phi_72_pred_4 = _3391;
                        frontier_phi_72_pred_5 = _3390;
                    }
                    _3063 = frontier_phi_72_pred;
                    _3061 = frontier_phi_72_pred_1;
                    _3059 = frontier_phi_72_pred_2;
                    _3057 = frontier_phi_72_pred_3;
                    _3055 = frontier_phi_72_pred_4;
                    _3053 = frontier_phi_72_pred_5;
                    uint _3198 = _3197 + 1u;
                    if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3191 = _3053;
                        _3192 = _3055;
                        _3193 = _3057;
                        _3194 = _3059;
                        _3195 = _3061;
                        _3196 = _3063;
                        _3197 = _3198;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3063;
                frontier_phi_60_61_ladder_1 = _3061;
                frontier_phi_60_61_ladder_2 = _3057;
                frontier_phi_60_61_ladder_3 = _3055;
                frontier_phi_60_61_ladder_4 = _3053;
                frontier_phi_60_61_ladder_5 = _3059;
            }
            else
            {
                frontier_phi_60_61_ladder = _2950;
                frontier_phi_60_61_ladder_1 = _2948;
                frontier_phi_60_61_ladder_2 = _2944;
                frontier_phi_60_61_ladder_3 = _2942;
                frontier_phi_60_61_ladder_4 = _2940;
                frontier_phi_60_61_ladder_5 = _2946;
            }
            _3052 = frontier_phi_60_61_ladder_4;
            _3054 = frontier_phi_60_61_ladder_3;
            _3056 = frontier_phi_60_61_ladder_2;
            _3058 = frontier_phi_60_61_ladder_5;
            _3060 = frontier_phi_60_61_ladder_1;
            _3062 = frontier_phi_60_61_ladder;
        }
        float _3067 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2873 = (_3067 * _3058) + _2385;
        _2875 = (_3067 * _3060) + _2387;
        _2877 = (_3067 * _3062) + _2389;
        _2879 = ((_3052 * _828) * _3067) + _2723;
        _2881 = ((_3054 * _830) * _3067) + _2725;
        _2883 = ((_3056 * _831) * _3067) + _2727;
    }
    else
    {
        _2873 = _2385;
        _2875 = _2387;
        _2877 = _2389;
        _2879 = _2723;
        _2881 = _2725;
        _2883 = _2727;
    }
    float _4830 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4841 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4852 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    uint _2903 = _247 + 6u;
    float _2911 = _763 / cbSceneParam._m0[86u].x;
    float _2912 = _764 / cbSceneParam._m0[86u].y;
    vec4 _2926 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2928 = _2926.x;
    float _2929 = _2926.y;
    float _2930 = _2926.z;
    float _2931 = _2926.w;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _2965 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _2966 = _2965 / _698;
        float _2977 = _2966 * _748;
        float _2978 = _749 * _2966;
        float _2979 = (-0.0) - _2978;
        float _2980 = _2966 * _750;
        float _2982 = (cbSceneParam._m0[77u].w * _2979) / _2965;
        float _2983 = _2982 + cbSceneParam._m0[79u].w;
        float _2984 = cbSceneParam._m0[79u].w - _2978;
        float _2990 = sqrt(((_2977 * _2977) + (_2978 * _2978)) + (_2980 * _2980));
        float _2993 = (1.0 - (cbSceneParam._m0[77u].w / _2965)) * _2990;
        float _2998 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3000 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3153;
        if (abs((_2979 - _2982) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3153 = ((((_2983 > 0.0) ? exp2(_2998 * _2983) : (2.0 - exp2(_3000 * _2983))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2993;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2984) ? _2983 : (isnan(_2983) ? _2984 : max(_2983, _2984));
            float _3115 = isnan(_2984) ? _2983 : (isnan(_2983) ? _2984 : min(_2983, _2984));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3153 = ((abs(_2990 / _2979) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2998 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2998 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_3000 * _3124) - exp2(_3000 * _3125)) * _3113))) + (_2993 * cbSceneParam._m0[80u].z);
        }
        vec4 _3155 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, 1.0), 0.0);
        float _3164 = exp2((_3153 * (-1.44269502162933349609375)) * (1.0 - _3155.w));
        float _3165 = log2(_3164);
        float _3181 = log2(_2931);
        _3002 = (exp2(_3181 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].x)) * _3155.x) / cbSceneParam._m0[78u].x)) + _2928;
        _3004 = (exp2(_3181 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].y)) * _3155.y) / cbSceneParam._m0[78u].y)) + _2929;
        _3006 = (exp2(_3181 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3165 * cbSceneParam._m0[78u].z)) * _3155.z) / cbSceneParam._m0[78u].z)) + _2930;
        _3008 = _3164 * _2931;
    }
    else
    {
        _3002 = _2928;
        _3004 = _2929;
        _3006 = _2930;
        _3008 = _2931;
    }
    float _3020 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3021 = _3020 == 3.0;
    float _3022 = log2(_3008);
    float _3029 = exp2(_3022 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2873 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _844))) + ((_2879 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _3030 = exp2(_3022 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2875 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _844))) + ((_2881 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _3031 = exp2(_3022 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2877 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _844))) + ((_2883 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _3040 = (_3020 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3040 * (_3021 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3002)));
    SV_Target.y = _3040 * (_3021 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3004)));
    SV_Target.z = _3040 * (_3021 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.w = cbInstanceData._m0[_2903].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2903].w;
}


