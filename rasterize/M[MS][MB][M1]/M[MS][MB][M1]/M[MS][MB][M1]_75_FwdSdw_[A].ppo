#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1286;
float _3951;
float _3952;
float _3953;
float _3954;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3963 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _431 = _429.x;
    float _432 = _429.y;
    float _433 = _429.z;
    float _442 = ((_412.z - _433) * _390) + _433;
    float _445 = ((((_412.x - _431) * _390) + _431) * 2.0) + (-1.0);
    float _447 = ((((_412.y - _432) * _390) + _432) * 2.0) + (-1.0);
    float _448 = dot(vec2(_445, _447), vec2(_445, _447));
    float _3974 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))));
    vec4 _466 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _482 = _480.x;
    float _483 = 1.0 - _482;
    float _511 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_482 - _483) * cbMtdParam._m0[24u].w) + _483) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3985 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _520 = ((((cbMtdParam._m0[10u].x - _397) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _512) + _397;
    float _521 = ((((cbMtdParam._m0[10u].y - _398) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _512) + _398;
    float _522 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _399)) * _512) + _399;
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _550 = _548.x;
    float _568 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _550) * _390) + _550;
    float _572 = ((_534.x - _568) * cbMtdParam._m0[19u].z) + _568;
    float _574 = _572 - (_572 * _512);
    float _578 = ((cbMtdParam._m0[23u].y - _442) * _512) + _442;
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _604 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_241, _242, _243, 0.0));
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _272) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _273) + cbTextureTilingScale._m0[18u].w));
    float _621 = _619.x;
    float _626 = fract(_619.w + cbPerFrame._m0[22u].x);
    float _628 = (1.0 - _626) * _621;
    float _633 = ((_626 + (-1.0)) + _621) * 9.0;
    float _635 = ((_621 + (-1.0)) + _626) * 9.0;
    float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _637 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _651 = (_628 * ((_619.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _636 : (isnan(_636) ? 3.0 : min(_636, 3.0))) * 3.1415927410125732421875);
    float _653 = (_628 * ((_619.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _637 : (isnan(_637) ? 3.0 : min(_637, 3.0))) * 3.1415927410125732421875);
    float _657 = inversesqrt(dot(vec3(_651, _653, 1.0), vec3(_651, _653, 1.0)));
    float _673 = (((((0.5 - _599) + ((_651 * 0.5) * _657)) * _604) + _599) * 2.0) + (-1.0);
    float _674 = (((((0.5 - _600) + ((_657 * 0.5) * _653)) * _604) + _600) * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _4016 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _691 = ((((cbMtdParam._m0[22u].z * _445) - _445) + _673) * _512) + _445;
    float _692 = ((((cbMtdParam._m0[22u].z * _447) - _447) + _674) * _512) + _447;
    float _693 = (_512 * (sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _453)) + _453;
    float _695 = cbMtdParam._m0[22u].x + _466.w;
    float _698 = fma(_693, _241, fma(_692, _247 * TANGENT.x, (_233 * _225) * _691));
    float _701 = fma(_693, _242, fma(_692, _247 * TANGENT.y, (_233 * _226) * _691));
    float _704 = fma(_693, _243, fma(_692, _247 * TANGENT.z, (_233 * _227) * _691));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _4027 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _712 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4049 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4060 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4071 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4082 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _717 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    vec4 _795 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _797 = _795.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _968 = sqrt(((_781 * _781) + (_782 * _782)) + (_783 * _783));
        float _974 = (cbMatDynParam._m0[5u].x * _968) + cbMatDynParam._m0[5u].y;
        float _4093 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _979 = (cbMatDynParam._m0[5u].z * _968) + cbMatDynParam._m0[5u].w;
        float _4104 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) - _975)) + _975) < ((_797 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _827 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _830 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _833 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    uint _846 = _253 + 9u;
    uint _847 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_847].z;
    float _4115 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _859 = 1.0 - _717;
    float _860 = _856 * _859;
    float _861 = _857 * _859;
    float _862 = _858 * _859;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _717;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _717;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _717;
    float _870 = _867 + 0.039999999105930328369140625;
    float _872 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _886 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _882.x;
    float _887 = dot(vec3(_709, _710, _711), vec3(_788, _789, _790));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _709) - _788;
    float _895 = (_890 * _710) - _789;
    float _896 = (_890 * _711) - _790;
    float _900 = abs(dot(vec3(_788, _789, _790), vec3(_709, _710, _711)));
    float _4148 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_712);
    float _914 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _920 = (1.0 - _914) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _921 = _914 * _902;
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _1015 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _1019 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1043 = _949 + _709;
        float _1044 = _953 + _710;
        float _1045 = _957 + _711;
        float _1055 = fma(_1045, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043)) - _1011;
        float _1056 = fma(_1045, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043)) - _1015;
        float _1057 = fma(_1045, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043)) - _1019;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(_709, _710, _711), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _4196 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_709, _710, _711), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4229 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_709, _710, _711), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4262 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1328 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1332 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1336 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1359 = _949 + _709;
        float _1360 = _953 + _710;
        float _1361 = _957 + _711;
        float _1371 = fma(_1361, cbModelParam._m0[30u].z, fma(_1360, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359)) - _1328;
        float _1372 = fma(_1361, cbModelParam._m0[31u].z, fma(_1360, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359)) - _1332;
        float _1373 = fma(_1361, cbModelParam._m0[32u].z, fma(_1360, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359)) - _1336;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1328 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1332 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[35u].z) + ((((((_1336 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1427 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1394.x + (-0.5));
        float _1429 = _1427 * (_1394.y + (-0.5));
        float _1430 = _1427 * (_1394.z + (-0.5));
        float _1437 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1401.x + (-0.5));
        float _1439 = _1437 * (_1401.y + (-0.5));
        float _1440 = _1437 * (_1401.z + (-0.5));
        float _1447 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1408.x + (-0.5));
        float _1449 = _1447 * (_1408.y + (-0.5));
        float _1450 = _1447 * (_1408.z + (-0.5));
        float _1457 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1415.x + (-0.5));
        float _1459 = _1457 * (_1415.y + (-0.5));
        float _1460 = _1457 * (_1415.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_709, _710, _711), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4325 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1491 + 1.0))) + _1496) * _1461;
        float _1506 = _1429 * 0.5;
        float _1507 = _1439 * 0.5;
        float _1508 = _1449 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_709, _710, _711), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4358 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1533 + 1.0))) + _1538) * _1462;
        float _1548 = _1430 * 0.5;
        float _1549 = _1440 * 0.5;
        float _1550 = _1450 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_709, _710, _711), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4391 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1575 + 1.0))) + _1580) * _1463;
        _1597 = _1430;
        _1598 = _1429;
        _1599 = _1428;
        _1600 = _1440;
        _1601 = _1439;
        _1602 = _1438;
        _1603 = _1450;
        _1604 = _1449;
        _1605 = _1448;
        _1606 = _1463;
        _1607 = _1462;
        _1608 = _1461;
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1286;
        _1598 = _1286;
        _1599 = _1286;
        _1600 = _1286;
        _1601 = _1286;
        _1602 = _1286;
        _1603 = _1286;
        _1604 = _1286;
        _1605 = _1286;
        _1606 = _1286;
        _1607 = _1286;
        _1608 = _1286;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1298)) + _1298;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1299)) + _1299;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1300)) + _1300;
    float _1644 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1621));
    float _1665 = _894 * 0.5;
    float _1666 = _895 * 0.5;
    float _1667 = _896 * 0.5;
    float _1668 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1671 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1674 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1708;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1681 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1685 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1689 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1696 = dot(vec4(cbModelParam._m0[39u]), vec4(_1665, _1666, _1667, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1719;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1710 = dot(vec4(cbModelParam._m0[40u]), vec4(_1665, _1666, _1667, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1723 = (_1719 * cbModelParam._m0[1u].x) + (_1708 * (1.0 - cbModelParam._m0[1u].x));
    float _1733 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1733 : min(cbModelParam._m0[25u].z, _1733));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1797 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1800 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1828 = frontier_phi_17_15_ladder;
        }
        float _2000;
        if (_1797 > 0.0)
        {
            _2000 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2000 = frontier_phi_26_22_ladder;
        }
        float _2295;
        if (_1800 > 0.0)
        {
            _2295 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2295 = frontier_phi_38_33_ladder;
        }
        float _2297 = isnan(_2000) ? _1828 : (isnan(_1828) ? _2000 : min(_1828, _2000));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1794) + _1783;
        float _2303 = (_2298 * _1797) + _1787;
        float _2304 = (_2298 * _1800) + _1791;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2305;
        float _2309 = _2305 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 > _2309) || ((_2303 < _2307) || ((_2302 < _2307) || (_2302 > _2309))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2304, cbModelParam._m0[9u].z, fma(_2303, cbModelParam._m0[9u].y, _2302 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2304, cbModelParam._m0[10u].z, fma(_2303, cbModelParam._m0[10u].y, _2302 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2304, cbModelParam._m0[11u].z, fma(_2303, cbModelParam._m0[11u].y, _2302 * cbModelParam._m0[11u].x))), _1734);
            frontier_phi_16_38_ladder = _2449.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2449.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2449.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_16_38_ladder_2;
        _1818 = frontier_phi_16_38_ladder_1;
        _1820 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1734);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1915;
    float _1917;
    float _1919;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1879 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1883 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1887 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1890 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1893 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1896 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2005;
        if (_1890 > 0.0)
        {
            _2005 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2005 = frontier_phi_28_24_ladder;
        }
        float _2322;
        if (_1893 > 0.0)
        {
            _2322 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2322 = frontier_phi_40_35_ladder;
        }
        float _2660;
        if (_1896 > 0.0)
        {
            _2660 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2660 = frontier_phi_50_47_ladder;
        }
        float _2662 = isnan(_2322) ? _2005 : (isnan(_2005) ? _2322 : min(_2005, _2322));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _1890) + _1879;
        float _2668 = (_2663 * _1893) + _1883;
        float _2669 = (_2663 * _1896) + _1887;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_25_50_ladder = _2791.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2791.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2791.x * cbModelParam._m0[1u].z;
        }
        _1915 = frontier_phi_25_50_ladder_2;
        _1917 = frontier_phi_25_50_ladder_1;
        _1919 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1825);
        _1915 = _1899.x * cbModelParam._m0[1u].z;
        _1917 = _1899.y * cbModelParam._m0[1u].z;
        _1919 = _1899.z * cbModelParam._m0[1u].z;
    }
    float _1932 = (((_920 * _870) + _921) * _886) * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1934 = (((_920 * _872) + _921) * _886) * ((cbModelParam._m0[1u].w * (_1917 - _1818)) + _1818);
    float _1936 = (((_920 * _873) + _921) * _886) * ((cbModelParam._m0[1u].w * (_1919 - _1820)) + _1820);
    float _1939 = fma(_1936, cbSceneParam._m0[89u].z, fma(_1934, cbSceneParam._m0[89u].y, _1932 * cbSceneParam._m0[89u].x));
    float _1942 = fma(_1936, cbSceneParam._m0[90u].z, fma(_1934, cbSceneParam._m0[90u].y, _1932 * cbSceneParam._m0[90u].x));
    float _1945 = fma(_1936, cbSceneParam._m0[91u].z, fma(_1934, cbSceneParam._m0[91u].y, _1932 * cbSceneParam._m0[91u].x));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1992 = _1979 / _1991;
    float _1993 = _1983 / _1991;
    float _1994 = _1987 / _1991;
    float _2141;
    float _2142;
    float _2143;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2021 = ((uint(_1994 > cbSceneParam._m0[59u].y) + uint(_1994 > cbSceneParam._m0[59u].x)) + uint(_1994 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2022 = _2021 + 43u;
        uint _2030 = _2021 + 44u;
        uint _2038 = _2021 + 45u;
        uint _2046 = _2021 + 46u;
        float _2057 = fma(_1991, cbSceneParam._m0[_2022].w, fma(_1987, cbSceneParam._m0[_2022].z, fma(_1983, cbSceneParam._m0[_2022].y, _1979 * cbSceneParam._m0[_2022].x)));
        float _2061 = fma(_1991, cbSceneParam._m0[_2030].w, fma(_1987, cbSceneParam._m0[_2030].z, fma(_1983, cbSceneParam._m0[_2030].y, _1979 * cbSceneParam._m0[_2030].x)));
        float _2069 = fma(_1991, cbSceneParam._m0[_2046].w, fma(_1987, cbSceneParam._m0[_2046].z, fma(_1983, cbSceneParam._m0[_2046].y, _1979 * cbSceneParam._m0[_2046].x)));
        float _2074 = cbSceneParam._m0[33u].z * _2069;
        float _2076 = cbSceneParam._m0[33u].w * _2069;
        float _2079 = fma(_1991, cbSceneParam._m0[_2038].w, fma(_1987, cbSceneParam._m0[_2038].z, fma(_1983, cbSceneParam._m0[_2038].y, _1979 * cbSceneParam._m0[_2038].x))) / _2069;
        float _2127 = (cbSceneParam._m0[33u].x - sqrt(((_1993 * _1993) + (_1992 * _1992)) + (_1994 * _1994))) * cbSceneParam._m0[33u].y;
        float _4517 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2134 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 + _2057) / _2069, (_2076 + _2061) / _2069), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 + _2057) / _2069, (_2061 - _2074) / _2069), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 - _2074) / _2069, (_2061 - _2076) / _2069), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 - _2076) / _2069, (_2074 + _2061) / _2069), _2079), 0.0)).x), vec4(0.25)));
        _2141 = 1.0 - (_2134 * cbSceneParam._m0[34u].x);
        _2142 = 1.0 - (_2134 * cbSceneParam._m0[34u].y);
        _2143 = 1.0 - (_2134 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2141 = 1.0;
        _2142 = 1.0;
        _2143 = 1.0;
    }
    float _2207;
    float _2209;
    float _2211;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2195 = fma(_1991, cbSceneParam._m0[63u].w, fma(_1987, cbSceneParam._m0[63u].z, fma(_1983, cbSceneParam._m0[63u].y, _1979 * cbSceneParam._m0[63u].x)));
        float _2196 = fma(_1991, cbSceneParam._m0[60u].w, fma(_1987, cbSceneParam._m0[60u].z, fma(_1983, cbSceneParam._m0[60u].y, _1979 * cbSceneParam._m0[60u].x))) / _2195;
        float _2197 = fma(_1991, cbSceneParam._m0[61u].w, fma(_1987, cbSceneParam._m0[61u].z, fma(_1983, cbSceneParam._m0[61u].y, _1979 * cbSceneParam._m0[61u].x))) / _2195;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2196 >= cbSceneParam._m0[64u].x) && (_2197 >= cbSceneParam._m0[64u].y)) && (_2196 <= cbSceneParam._m0[64u].z)) && (_2197 <= cbSceneParam._m0[64u].w))
        {
            float _2335 = fma(_1991, cbSceneParam._m0[62u].w, fma(_1987, cbSceneParam._m0[62u].z, fma(_1983, cbSceneParam._m0[62u].y, _1979 * cbSceneParam._m0[62u].x))) / _2195;
            float _2339 = isnan(cbSceneParam._m0[41u].w) ? _2335 : (isnan(_2335) ? cbSceneParam._m0[41u].w : max(_2335, cbSceneParam._m0[41u].w));
            float _2382 = (cbSceneParam._m0[33u].x - sqrt(((_1993 * _1993) + (_1992 * _1992)) + (_1994 * _1994))) * cbSceneParam._m0[33u].y;
            float _4533 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
            float _2389 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2196, cbSceneParam._m0[33u].w + _2197), _2339), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2196, _2197 - cbSceneParam._m0[33u].z), _2339), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2196 - cbSceneParam._m0[33u].z, _2197 - cbSceneParam._m0[33u].w), _2339), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2196 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2197), _2339), 0.0)).x), vec4(0.25)));
            float _2393 = 1.0 - (_2389 * cbSceneParam._m0[34u].x);
            float _2394 = 1.0 - (_2389 * cbSceneParam._m0[34u].y);
            float _2395 = 1.0 - (_2389 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2395) ? _2143 : (isnan(_2143) ? _2395 : min(_2143, _2395));
            frontier_phi_37_36_ladder_1 = isnan(_2394) ? _2142 : (isnan(_2142) ? _2394 : min(_2142, _2394));
            frontier_phi_37_36_ladder_2 = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
        }
        else
        {
            frontier_phi_37_36_ladder = _2143;
            frontier_phi_37_36_ladder_1 = _2142;
            frontier_phi_37_36_ladder_2 = _2141;
        }
        _2207 = frontier_phi_37_36_ladder_2;
        _2209 = frontier_phi_37_36_ladder_1;
        _2211 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2207 = _2141;
        _2209 = _2142;
        _2211 = _2143;
    }
    uvec4 _2216 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2218 = _2216.x * 14u;
    uint _2219 = _2218 + 13u;
    float _2226 = _886 + (-1.0);
    float _2231 = (cbLight._m0[_2219].x * _2226) + 1.0;
    float _2232 = (cbLight._m0[_2219].y * _2226) + 1.0;
    float _2233 = (cbLight._m0[_2219].z * _2226) + 1.0;
    float _2234 = (cbLight._m0[_2219].w * _2226) + 1.0;
    uint _2235 = _2218 + 5u;
    float _2241 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2245 = _2218 + 4u;
    float _2254 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2258 = _2218 | 1u;
    float _2269 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_709, _710, _711));
    float _2272 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_709, _710, _711));
    float _4569 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _4580 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2277 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * 0.3183098733425140380859375;
    float _2279 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * 0.3183098733425140380859375;
    float _2286 = ((cbLight._m0[_2235].x * _2241) * _2279) + (((cbLight._m0[_2245].x * _2207) * _2254) * _2277);
    float _2287 = ((_2241 * cbLight._m0[_2235].y) * _2279) + (((cbLight._m0[_2245].y * _2209) * _2254) * _2277);
    float _2288 = ((_2241 * cbLight._m0[_2235].z) * _2279) + (((cbLight._m0[_2245].z * _2211) * _2254) * _2277);
    uvec4 _2292 = floatBitsToUint(cbLight._m0[_2218 + 12u]);
    bool _2294 = _2292.x == 0u;
    float _2396;
    float _2398;
    float _2400;
    if (_2294)
    {
        _2396 = _2286;
        _2398 = _2287;
        _2400 = _2288;
    }
    else
    {
        uint _2404 = _2218 + 6u;
        float _2420 = (dot(vec3(cbLight._m0[_2218 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4591 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2423 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2396 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2286;
        _2398 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2287;
        _2400 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2288;
    }
    bool _2403 = _2292.y == 0u;
    float _2458;
    float _2460;
    float _2462;
    if (_2403)
    {
        _2458 = _2396;
        _2460 = _2398;
        _2462 = _2400;
    }
    else
    {
        uint _2631 = _2218 + 7u;
        float _2647 = (dot(vec3(cbLight._m0[_2218 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2648 = _2647 * _2647;
        float _4607 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2649 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2650 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2458 = (((cbLight._m0[_2631].x * 0.3183098733425140380859375) * _2649) * _2650) + _2396;
        _2460 = (((cbLight._m0[_2631].y * 0.3183098733425140380859375) * _2649) * _2650) + _2398;
        _2462 = (((cbLight._m0[_2631].z * 0.3183098733425140380859375) * _2649) * _2650) + _2400;
    }
    uint _2465 = _2218 + 8u;
    float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _712) * 0.949999988079071044921875);
    float _2479 = _2478 * _2478;
    float _2480 = cbLight._m0[_2218].x + _788;
    float _2481 = cbLight._m0[_2218].y + _789;
    float _2482 = cbLight._m0[_2218].z + _790;
    float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
    float _2487 = _2486 * _2480;
    float _2488 = _2486 * _2481;
    float _2489 = _2486 * _2482;
    float _2490 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2218].xyz));
    float _4623 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _4634 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2494 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2495 = dot(vec3(_709, _710, _711), vec3(_2487, _2488, _2489));
    float _4645 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2499 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2487, _2488, _2489));
    float _4656 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2503 = _2479 * _2479;
    float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
    float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
    float _2516 = 0.959999978542327880859375 - _867;
    float _2518 = 0.959999978542327880859375 - _868;
    float _2519 = 0.959999978542327880859375 - _869;
    float _2526 = 1.0 - _2479;
    float _2537 = (0.5 / (((_2494 * ((_2493 * _2526) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2526) + _2479) * _2493))) * _2493;
    float _4667 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2539 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
    uint _2553 = _2218 + 9u;
    float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _712) * 0.949999988079071044921875);
    float _2565 = _2564 * _2564;
    float _2566 = cbLight._m0[_2258].x + _788;
    float _2567 = cbLight._m0[_2258].y + _789;
    float _2568 = cbLight._m0[_2258].z + _790;
    float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
    float _2573 = _2572 * _2566;
    float _2574 = _2572 * _2567;
    float _2575 = _2572 * _2568;
    float _2576 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2258].xyz));
    float _4678 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2580 = dot(vec3(_709, _710, _711), vec3(_2573, _2574, _2575));
    float _4689 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2573, _2574, _2575));
    float _4700 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2565 * _2565;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
    float _2606 = 1.0 - _2565;
    float _2616 = (0.5 / (((_2494 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2606) + _2565) * _2579))) * _2579;
    float _4711 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2618 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    float _2628 = (((((_2599 * _2516) + _870) * cbLight._m0[_2553].x) * _2618) * _2241) + ((((cbLight._m0[_2465].x * _2207) * ((_2515 * _2516) + _870)) * _2539) * _2254);
    float _2629 = (((((_2599 * _2518) + _872) * cbLight._m0[_2553].y) * _2618) * _2241) + ((((cbLight._m0[_2465].y * _2209) * ((_2515 * _2518) + _872)) * _2539) * _2254);
    float _2630 = (((((_2599 * _2519) + _873) * cbLight._m0[_2553].z) * _2618) * _2241) + ((((cbLight._m0[_2465].z * _2211) * ((_2515 * _2519) + _873)) * _2539) * _2254);
    float _2686;
    float _2688;
    float _2690;
    if (_2294)
    {
        _2686 = _2628;
        _2688 = _2629;
        _2690 = _2630;
    }
    else
    {
        uint _2692 = _2218 + 2u;
        uint _2696 = _2218 + 10u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _712) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _788;
        float _2713 = cbLight._m0[_2692].y + _789;
        float _2714 = cbLight._m0[_2692].z + _790;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2692].xyz));
        float _4722 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2726 = dot(vec3(_709, _710, _711), vec3(_2719, _2720, _2721));
        float _4733 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4744 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
        float _2752 = 1.0 - _2711;
        float _2762 = (0.5 / (((_2494 * ((_2725 * _2752) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2752) + _2711) * _2725))) * _2725;
        float _4755 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2764 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2765 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2686 = (((((_2745 * _2516) + _870) * cbLight._m0[_2696].x) * _2764) * _2765) + _2628;
        _2688 = (((((_2745 * _2518) + _872) * cbLight._m0[_2696].y) * _2764) * _2765) + _2629;
        _2690 = (((((_2745 * _2519) + _873) * cbLight._m0[_2696].z) * _2764) * _2765) + _2630;
    }
    float _2796;
    float _2798;
    float _2800;
    if (_2403)
    {
        _2796 = _2686;
        _2798 = _2688;
        _2800 = _2690;
    }
    else
    {
        uint _2807 = _2218 + 3u;
        uint _2811 = _2218 + 11u;
        float _2825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2807].w)) * _712) * 0.949999988079071044921875);
        float _2826 = _2825 * _2825;
        float _2827 = cbLight._m0[_2807].x + _788;
        float _2828 = cbLight._m0[_2807].y + _789;
        float _2829 = cbLight._m0[_2807].z + _790;
        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
        float _2834 = _2833 * _2827;
        float _2835 = _2833 * _2828;
        float _2836 = _2833 * _2829;
        float _2837 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2807].xyz));
        float _4771 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2841 = dot(vec3(_709, _710, _711), vec3(_2834, _2835, _2836));
        float _4782 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2845 = dot(vec3(cbLight._m0[_2807].xyz), vec3(_2834, _2835, _2836));
        float _4793 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2849 = _2826 * _2826;
        float _2853 = ((_2844 * _2844) * (_2849 + (-1.0))) + 1.0;
        float _2860 = exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0);
        float _2867 = 1.0 - _2826;
        float _2877 = (0.5 / (((_2494 * ((_2840 * _2867) + _2826)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2867) + _2826) * _2840))) * _2840;
        float _4804 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2879 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2849 / ((_2853 * _2853) * 3.141590118408203125));
        float _2880 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2796 = (((((_2860 * _2516) + _870) * cbLight._m0[_2811].x) * _2879) * _2880) + _2686;
        _2798 = (((((_2860 * _2518) + _872) * cbLight._m0[_2811].y) * _2879) * _2880) + _2688;
        _2800 = (((((_2860 * _2519) + _873) * cbLight._m0[_2811].z) * _2879) * _2880) + _2690;
    }
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    if (_2216.y == 0u)
    {
        uvec4 _2901 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2902 = _2901.x;
        uint _2913 = uint((float(_2901.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2902))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2902)));
        float _2923 = (log2(_1994 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2924 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        uint _2927 = uint(isnan(14.0) ? _2924 : (isnan(_2924) ? 14.0 : min(_2924, 14.0)));
        uvec4 _2932 = texelFetch(g_lightClusterGridBuffer, int(((_2927 << 2u) + (_2913 << 6u)) >> 2u));
        uint _2933 = _2932.x;
        uint _2934 = _2901.z;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((((1u << ((_2934 >> 4u) & 15u)) + 4294967295u) & _2933) == 0u) || ((_2934 & 240u) == 0u))
        {
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
        }
        else
        {
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            uint _3172 = 0u;
            uint _3181;
            bool _3182;
            for (;;)
            {
                _3181 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                _3182 = _3181 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3182)
                {
                    frontier_phi_71_pred = _3171;
                    frontier_phi_71_pred_1 = _3170;
                    frontier_phi_71_pred_2 = _3169;
                    frontier_phi_71_pred_3 = _3168;
                    frontier_phi_71_pred_4 = _3167;
                    frontier_phi_71_pred_5 = _3166;
                }
                else
                {
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    uint _3317;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3169;
                    _3315 = _3170;
                    _3316 = _3171;
                    _3317 = _3181;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    for (;;)
                    {
                        uint _3321 = uint(findLSB(_3317)) + (_3172 << 5u);
                        uint _3318 = (_3317 + 4294967295u) & _3317;
                        uint _3323 = _3321 * 48u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3343 = (_3321 * 48u) + 4u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3362 = (_3321 * 48u) + 8u;
                        vec3 _3373 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x));
                        float _3377 = _3337.x - _1992;
                        float _3378 = _3337.y - _1993;
                        float _3379 = _3337.z - _1994;
                        float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                        float _3383 = inversesqrt(_3380);
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3387 = dot(vec3(_827, _830, _833), vec3(_3384, _3385, _3386));
                        float _3392 = 1.0 - (_3380 * _3337.w);
                        float _4830 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3393 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3394 = sqrt(_3380) * _3356.w;
                        float _3397 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3387) + _3398;
                        float _3404 = _3394 * _3394;
                        float _3408 = ((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3393) / ((_3404 * 0.699999988079071044921875) + 1.0);
                        float _3412 = (-0.0) - _1992;
                        float _3413 = (-0.0) - _1993;
                        float _3414 = (-0.0) - _1994;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3428 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                        float _3429 = 1.0 - _902;
                        float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                        float _3437 = _3436 * _3436;
                        float _3438 = _3437 * _3437;
                        float _3439 = _3419 + _3384;
                        float _3440 = _3420 + _3385;
                        float _3441 = _3421 + _3386;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3449 = dot(vec3(_827, _830, _833), vec3(_3419, _3420, _3421));
                        float _4846 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3453 = dot(vec3(_827, _830, _833), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                        float _4857 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                        float _3461 = _3397 * _3437;
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3387) + _3462;
                        float _4868 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3467 = 1.0 - _3437;
                        float _3477 = (0.5 / (((_3466 * ((_3452 * _3467) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3437) * _3452))) * _3466;
                        float _4879 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3487 = (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3460 * _3460) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125))) * _3393;
                        _3241 = (_3408 * _3356.x) + _3314;
                        _3242 = (_3408 * _3356.y) + _3315;
                        _3243 = (_3408 * _3356.z) + _3316;
                        _3238 = (_3487 * _3373.x) + _3311;
                        _3239 = (_3487 * _3373.y) + _3312;
                        _3240 = (_3487 * _3373.z) + _3313;
                        if (_3318 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3241;
                            _3315 = _3242;
                            _3316 = _3243;
                            _3317 = _3318;
                        }
                    }
                    frontier_phi_71_pred = _3243;
                    frontier_phi_71_pred_1 = _3242;
                    frontier_phi_71_pred_2 = _3241;
                    frontier_phi_71_pred_3 = _3240;
                    frontier_phi_71_pred_4 = _3239;
                    frontier_phi_71_pred_5 = _3238;
                }
                _3024 = frontier_phi_71_pred;
                _3022 = frontier_phi_71_pred_1;
                _3020 = frontier_phi_71_pred_2;
                _3018 = frontier_phi_71_pred_3;
                _3016 = frontier_phi_71_pred_4;
                _3014 = frontier_phi_71_pred_5;
                uint _3173 = _3172 + 1u;
                if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3166 = _3014;
                    _3167 = _3016;
                    _3168 = _3018;
                    _3169 = _3020;
                    _3170 = _3022;
                    _3171 = _3024;
                    _3172 = _3173;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
        }
        uvec4 _3027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3028 = _3027.z;
        uint _3030 = (_3028 >> 8u) & 15u;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((4294967295u << _3030) & _2933) == 0u)
        {
            _3134 = _3013;
            _3136 = _3015;
            _3138 = _3017;
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
        }
        else
        {
            float _3159 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
            float _3160 = _3159 * _1992;
            float _3161 = _3159 * _1993;
            float _3162 = _3159 * _1994;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3030 < ((_3028 >> 12u) & 15u))
            {
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3294 = _3013;
                float _3295 = _3015;
                float _3296 = _3017;
                float _3297 = _3019;
                float _3298 = _3021;
                float _3299 = _3023;
                uint _3300 = _3030;
                uint _3309;
                bool _3310;
                for (;;)
                {
                    _3309 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3300 << 2u)) >> 2u)).x;
                    _3310 = _3309 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3310)
                    {
                        frontier_phi_82_pred = _3299;
                        frontier_phi_82_pred_1 = _3298;
                        frontier_phi_82_pred_2 = _3297;
                        frontier_phi_82_pred_3 = _3296;
                        frontier_phi_82_pred_4 = _3295;
                        frontier_phi_82_pred_5 = _3294;
                    }
                    else
                    {
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3514 = _3294;
                        float _3515 = _3295;
                        float _3516 = _3296;
                        float _3517 = _3297;
                        float _3518 = _3298;
                        float _3519 = _3299;
                        uint _3520 = _3309;
                        uint _3521;
                        vec4 _3546;
                        float _3547;
                        vec4 _3562;
                        vec3 _3574;
                        vec4 _3589;
                        vec4 _3605;
                        float _3651;
                        bool _3652;
                        for (;;)
                        {
                            uint _3531 = ((_3300 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3520));
                            _3521 = (_3520 + 4294967295u) & _3520;
                            uint _3533 = _3531 * 40u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3547 = _3546.w;
                            uint _3549 = (_3531 * 40u) + 4u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3531 * 40u) + 8u;
                            _3574 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x));
                            uint _3576 = (_3531 * 40u) + 16u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3592 = (_3531 * 40u) + 20u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3607 = (_3531 * 40u) + 24u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3626 = (_3531 * 40u) + 28u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3651 = fma(_1994, _3639.z, fma(_1993, _3639.y, _3639.x * _1992)) + _3639.w;
                            _3652 = !((fma(_1994, _3620.z, fma(_1993, _3620.y, _3620.x * _1992)) + _3620.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3652)
                            {
                                float _3679 = _3546.x - _1992;
                                float _3680 = _3546.y - _1993;
                                float _3681 = _3546.z - _1994;
                                float _3682 = dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681));
                                float _3685 = inversesqrt(_3682);
                                float _3686 = _3685 * _3679;
                                float _3687 = _3685 * _3680;
                                float _3688 = _3685 * _3681;
                                float _3692 = 1.0 - (_3682 / (_3547 * _3547));
                                float _4890 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3697 = sqrt(_3682) * _3562.w;
                                float _3699 = 1.39999997615814208984375 / (_3697 + 1.39999997615814208984375);
                                float _3700 = _3699 * _3699;
                                float _3703 = ((1.0 - _3700) * dot(vec3(_3686, _3687, _3688), vec3(_827, _830, _833))) + _3700;
                                float _3706 = _3697 * _3697;
                                float _3710 = (fma(_1994, _3589.z, fma(_1993, _3589.y, _3589.x * _1992)) + _3589.w) / _3651;
                                float _3711 = (fma(_1994, _3605.z, fma(_1993, _3605.y, _3605.x * _1992)) + _3605.w) / _3651;
                                float _3715 = 1.0 - dot(vec2(_3710, _3711), vec2(_3710, _3711));
                                float _4906 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3717 = _3716 * (((isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0))) * _3693) / ((_3706 * 0.699999988079071044921875) + 1.0));
                                float _3729 = exp2(log2(1.0 / ((_3706 * 3.5) + 5.0)) * 0.25);
                                float _3730 = 1.0 - _902;
                                float _3737 = sqrt(1.0 - ((1.0 - (_3730 * _3730)) * (1.0 - (_3729 * _3729))));
                                float _3738 = _3737 * _3737;
                                float _3739 = _3738 * _3738;
                                float _3740 = _3686 - _3160;
                                float _3741 = _3687 - _3161;
                                float _3742 = _3688 - _3162;
                                float _3746 = inversesqrt(dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742)));
                                float _3750 = dot(vec3(_827, _830, _833), vec3((-0.0) - _3160, (-0.0) - _3161, (-0.0) - _3162));
                                float _4917 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3753 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3754 = dot(vec3(_827, _830, _833), vec3(_3746 * _3740, _3746 * _3741, _3746 * _3742));
                                float _4928 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3761 = ((_3757 * _3757) * (_3739 + (-1.0))) + 1.0;
                                float _3762 = _3699 * _3738;
                                float _3763 = _3762 * _3762;
                                float _3769 = ((1.0 - _3763) * dot(vec3(_827, _830, _833), vec3(_3686, _3687, _3688))) + _3763;
                                float _4939 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                                float _3771 = 1.0 - _3738;
                                float _3781 = (0.5 / (((_3770 * ((_3753 * _3771) + _3738)) + 9.9999999392252902907785028219223e-09) + (((_3770 * _3771) + _3738) * _3753))) * _3770;
                                float _4950 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3791 = (_3716 * _3693) * (((_3739 * 3.1415927410125732421875) * (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) / ((_3761 * _3761) * ((_3706 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3717 * _3562.z;
                                frontier_phi_88_pred_1 = _3717 * _3562.y;
                                frontier_phi_88_pred_2 = _3717 * _3562.x;
                                frontier_phi_88_pred_3 = _3791 * _3574.z;
                                frontier_phi_88_pred_4 = _3791 * _3574.y;
                                frontier_phi_88_pred_5 = _3791 * _3574.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3800 = frontier_phi_88_pred;
                            _3799 = frontier_phi_88_pred_1;
                            _3798 = frontier_phi_88_pred_2;
                            _3797 = frontier_phi_88_pred_3;
                            _3796 = frontier_phi_88_pred_4;
                            _3795 = frontier_phi_88_pred_5;
                            _3504 = _3798 + _3517;
                            _3505 = _3799 + _3518;
                            _3506 = _3800 + _3519;
                            _3501 = _3795 + _3514;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            if (_3521 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3521;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3506;
                        frontier_phi_82_pred_1 = _3505;
                        frontier_phi_82_pred_2 = _3504;
                        frontier_phi_82_pred_3 = _3503;
                        frontier_phi_82_pred_4 = _3502;
                        frontier_phi_82_pred_5 = _3501;
                    }
                    _3145 = frontier_phi_82_pred;
                    _3143 = frontier_phi_82_pred_1;
                    _3141 = frontier_phi_82_pred_2;
                    _3139 = frontier_phi_82_pred_3;
                    _3137 = frontier_phi_82_pred_4;
                    _3135 = frontier_phi_82_pred_5;
                    uint _3301 = _3300 + 1u;
                    if (_3301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3294 = _3135;
                        _3295 = _3137;
                        _3296 = _3139;
                        _3297 = _3141;
                        _3298 = _3143;
                        _3299 = _3145;
                        _3300 = _3301;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3141;
                frontier_phi_63_64_ladder_1 = _3145;
                frontier_phi_63_64_ladder_2 = _3143;
                frontier_phi_63_64_ladder_3 = _3139;
                frontier_phi_63_64_ladder_4 = _3137;
                frontier_phi_63_64_ladder_5 = _3135;
            }
            else
            {
                frontier_phi_63_64_ladder = _3019;
                frontier_phi_63_64_ladder_1 = _3023;
                frontier_phi_63_64_ladder_2 = _3021;
                frontier_phi_63_64_ladder_3 = _3017;
                frontier_phi_63_64_ladder_4 = _3015;
                frontier_phi_63_64_ladder_5 = _3013;
            }
            _3134 = frontier_phi_63_64_ladder_5;
            _3136 = frontier_phi_63_64_ladder_4;
            _3138 = frontier_phi_63_64_ladder_3;
            _3140 = frontier_phi_63_64_ladder;
            _3142 = frontier_phi_63_64_ladder_2;
            _3144 = frontier_phi_63_64_ladder_1;
        }
        float _3149 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2946 = (_3149 * _3140) + _2458;
        _2948 = (_3149 * _3142) + _2460;
        _2950 = (_3149 * _3144) + _2462;
        _2952 = ((_3134 * _870) * _3149) + _2796;
        _2954 = ((_3136 * _872) * _3149) + _2798;
        _2956 = ((_3138 * _873) * _3149) + _2800;
    }
    else
    {
        _2946 = _2458;
        _2948 = _2460;
        _2950 = _2462;
        _2952 = _2796;
        _2954 = _2798;
        _2956 = _2800;
    }
    float _4966 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4977 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4988 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2973 = ((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2946 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _886))) + ((_2952 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2974 = ((isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2948 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _886))) + ((_2954 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    float _2975 = ((isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_2950 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _886))) + ((_2956 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1723)) * cbPerFrame._m0[3u].x);
    uint _2976 = _253 + 6u;
    float _2984 = _808 / cbSceneParam._m0[86u].x;
    float _2985 = _809 / cbSceneParam._m0[86u].y;
    vec4 _2999 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3001 = _2999.x;
    float _3002 = _2999.y;
    float _3003 = _2999.z;
    float _3004 = _2999.w;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _3038 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _3039 = _3038 / _731;
        float _3050 = _3039 * _781;
        float _3051 = _782 * _3039;
        float _3052 = (-0.0) - _3051;
        float _3054 = _3039 * _783;
        float _3056 = (cbSceneParam._m0[77u].w * _3052) / _3038;
        float _3057 = _3056 + cbSceneParam._m0[79u].w;
        float _3058 = cbSceneParam._m0[79u].w - _3051;
        float _3064 = sqrt(((_3050 * _3050) + (_3051 * _3051)) + (_3054 * _3054));
        float _3067 = (1.0 - (cbSceneParam._m0[77u].w / _3038)) * _3064;
        float _3072 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3074 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3251;
        if (abs((_3052 - _3056) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3251 = ((((_3057 > 0.0) ? exp2(_3072 * _3057) : (2.0 - exp2(_3074 * _3057))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3067;
        }
        else
        {
            float _3195 = 1.0 / cbSceneParam._m0[80u].x;
            float _3196 = isnan(_3058) ? _3057 : (isnan(_3057) ? _3058 : max(_3057, _3058));
            float _3197 = isnan(_3058) ? _3057 : (isnan(_3057) ? _3058 : min(_3057, _3058));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            _3251 = ((abs(_3064 / _3052) * cbSceneParam._m0[80u].y) * ((((_3206 - _3207) * 2.0) - ((exp2(_3072 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0)))) - exp2(_3072 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))))) * _3195)) - ((exp2(_3074 * _3206) - exp2(_3074 * _3207)) * _3195))) + (_3067 * cbSceneParam._m0[80u].z);
        }
        vec4 _3253 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, 1.0), 0.0);
        float _3262 = exp2((_3251 * (-1.44269502162933349609375)) * (1.0 - _3253.w));
        float _3263 = log2(_3262);
        float _3279 = log2(_3004);
        _3076 = (exp2(_3279 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].x)) * _3253.x) / cbSceneParam._m0[78u].x)) + _3001;
        _3078 = (exp2(_3279 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].y)) * _3253.y) / cbSceneParam._m0[78u].y)) + _3002;
        _3080 = (exp2(_3279 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].z)) * _3253.z) / cbSceneParam._m0[78u].z)) + _3003;
        _3082 = _3262 * _3004;
    }
    else
    {
        _3076 = _3001;
        _3078 = _3002;
        _3080 = _3003;
        _3082 = _3004;
    }
    bool _3289;
    vec4 _3092;
    vec4 _3114;
    float _3116;
    float _3120;
    float _3121;
    float _3122;
    float _3123;
    bool _3133;
    for (;;)
    {
        _3092 = cbMatDynParam._m0[0u];
        float _3094 = roundEven(_3092.y);
        bool _3095 = _3094 == 3.0;
        float _3096 = log2(_3082);
        float _3103 = exp2(_3096 * cbSceneParam._m0[78u].x) * _2973;
        float _3104 = exp2(_3096 * cbSceneParam._m0[78u].y) * _2974;
        float _3105 = exp2(_3096 * cbSceneParam._m0[78u].z) * _2975;
        float _3112 = _797 + (-0.5);
        _3114 = cbMtdParam._m0[1u];
        _3116 = _3114.y * _3112;
        float _3119 = (_3094 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3120 = _3119 * (_3095 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3076)));
        _3121 = _3119 * (_3095 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3078)));
        _3122 = _3119 * (_3095 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3080)));
        _3123 = _3112 * 0.999000012874603271484375;
        _3133 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3133)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3123) < 0.5)
            {
                _3289 = true;
                break;
            }
        }
        uint _3230 = _846 + uint(_3092.w);
        if ((cbInstanceData._m0[_3230].w < 1.0) && ((cbInstanceData._m0[_3230].w + _3123) < 0.5))
        {
            _3289 = true;
            break;
        }
        if ((_3116 + 1.0) < _3114.x)
        {
            _3289 = true;
            break;
        }
        _3289 = false;
        break;
    }
    float _3492;
    if (_3289)
    {
        discard_state = true;
        _3492 = 0.0;
    }
    else
    {
        _3492 = cbInstanceData._m0[_2976].w;
    }
    SV_Target.x = _3120;
    SV_Target.y = _3121;
    SV_Target.z = _3122;
    SV_Target.w = _3492;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2976].w;
    discard_exit();
}


