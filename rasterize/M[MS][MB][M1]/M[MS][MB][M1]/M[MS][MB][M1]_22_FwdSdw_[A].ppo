#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1086;
float _3752;
float _3753;
float _3754;
float _3755;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _333 = (_324.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_332, _333), vec2(_332, _333));
    float _3764 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    float _345 = _332 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_298.x * 2.0) + (-1.0)));
    float _346 = _333 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_298.y * 2.0) + (-1.0)));
    float _349 = fma(_340, _220, fma(_346, _227, _345 * _213));
    float _352 = fma(_340, _221, fma(_346, _228, _345 * _214));
    float _355 = fma(_340, _222, fma(_346, _229, _345 * _215));
    float _359 = inversesqrt(dot(vec3(_349, _352, _355), vec3(_349, _352, _355)));
    vec4 _395 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _397 = _395.x;
    float _398 = 1.0 - _397;
    float _407 = (cbMtdParam._m0[19u].x + dot(vec4(_359 * _349, _359 * _352, _359 * _355, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_397 - _398) * cbMtdParam._m0[24u].z) + _398) * cbMtdParam._m0[21u].z);
    float _3775 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _415 = (_408 * (cbMtdParam._m0[17u].x - _278)) + _278;
    float _416 = (_408 * (cbMtdParam._m0[17u].y - _279)) + _279;
    float _417 = (_408 * (cbMtdParam._m0[17u].z - _280)) + _280;
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _432 = _430.x;
    float _434 = _432 - (_432 * _408);
    float _439 = (((_298.z - _328) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _328;
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _459 = (_452.x * 2.0) + (-1.0);
    float _460 = (_452.y * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3786 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _469 = ((_452.z - _439) * _408) + _439;
    float _479 = ((sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) - _340) * _408) + _340;
    float _482 = (((_459 - _345) * _408) + _345) + (cbMtdParam._m0[21u].x * _345);
    float _483 = (((_460 - _346) * _408) + _346) + (cbMtdParam._m0[21u].x * _346);
    float _488 = cbMtdParam._m0[22u].x + _324.w;
    float _491 = fma(_479, _220, fma(_483, _227, _482 * _213));
    float _494 = fma(_479, _221, fma(_483, _228, _482 * _214));
    float _497 = fma(_479, _222, fma(_483, _229, _482 * _215));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3797 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _505 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3819 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3830 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3841 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3852 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _510 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _575 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _565);
    float _576 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _565);
    float _577 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _565);
    float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
    float _582 = _575 * _581;
    float _583 = _576 * _581;
    float _584 = _577 * _581;
    vec4 _589 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _591 = _589.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _766 = sqrt(((_575 * _575) + (_576 * _576)) + (_577 * _577));
        float _772 = (cbMatDynParam._m0[5u].x * _766) + cbMatDynParam._m0[5u].y;
        float _3863 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _777 = (cbMatDynParam._m0[5u].z * _766) + cbMatDynParam._m0[5u].w;
        float _3874 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) - _773)) + _773) < ((_591 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _603 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _604 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _624 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _627 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _630 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _643 = _232 + 9u;
    uint _644 = _643 + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3885 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _656 = 1.0 - _510;
    float _657 = _653 * _656;
    float _658 = _654 * _656;
    float _659 = _655 * _656;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _510;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _510;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _510;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _603, cbSceneParam._m0[86u].y * _604));
    float _683 = ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * TEXCOORD_5.w) * _679.x;
    float _684 = dot(vec3(_502, _503, _504), vec3(_582, _583, _584));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _502) - _582;
    float _692 = (_687 * _503) - _583;
    float _693 = (_687 * _504) - _584;
    float _697 = abs(dot(vec3(_582, _583, _584), vec3(_502, _503, _504)));
    float _3918 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_505);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _718 = (1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _719 = _712 * _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1085;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _814 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _818 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _843 = _747 + _502;
        float _844 = _751 + _503;
        float _845 = _755 + _504;
        float _855 = fma(_845, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843)) - _810;
        float _856 = fma(_845, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843)) - _814;
        float _857 = fma(_845, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843)) - _818;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _913 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_879.x + (-0.5));
        float _915 = _913 * (_879.y + (-0.5));
        float _916 = _913 * (_879.z + (-0.5));
        float _923 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_886.x + (-0.5));
        float _925 = _923 * (_886.y + (-0.5));
        float _926 = _923 * (_886.z + (-0.5));
        float _933 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_893.x + (-0.5));
        float _935 = _933 * (_893.y + (-0.5));
        float _936 = _933 * (_893.z + (-0.5));
        float _943 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_900.x + (-0.5));
        float _945 = _943 * (_900.y + (-0.5));
        float _946 = _943 * (_900.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _967 = (dot(vec3(_502, _503, _504), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _977 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3966 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_979 + 1.0))) + _984) * _947;
        float _994 = _915 * 0.5;
        float _995 = _925 * 0.5;
        float _996 = _935 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_502, _503, _504), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3999 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1021 + 1.0))) + _1026) * _948;
        float _1036 = _916 * 0.5;
        float _1037 = _926 * 0.5;
        float _1038 = _936 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_502, _503, _504), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _4032 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1063 + 1.0))) + _1068) * _949;
        _1085 = _916;
        _1087 = _915;
        _1088 = _914;
        _1089 = _926;
        _1090 = _925;
        _1091 = _924;
        _1092 = _936;
        _1093 = _935;
        _1094 = _934;
        _1095 = _949;
        _1096 = _948;
        _1097 = _947;
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _1086;
        _1087 = _1086;
        _1088 = _1086;
        _1089 = _1086;
        _1090 = _1086;
        _1091 = _1086;
        _1092 = _1086;
        _1093 = _1086;
        _1094 = _1086;
        _1095 = _1086;
        _1096 = _1086;
        _1097 = _1086;
        _1098 = 0.0;
        _1099 = 0.0;
        _1100 = 0.0;
    }
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1128 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1132 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1136 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1159 = _747 + _502;
        float _1160 = _751 + _503;
        float _1161 = _755 + _504;
        float _1171 = fma(_1161, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159)) - _1128;
        float _1172 = fma(_1161, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159)) - _1132;
        float _1173 = fma(_1161, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159)) - _1136;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1128 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1132 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[35u].z) + ((((((_1136 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1227 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1194.x + (-0.5));
        float _1229 = _1227 * (_1194.y + (-0.5));
        float _1230 = _1227 * (_1194.z + (-0.5));
        float _1237 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1201.x + (-0.5));
        float _1239 = _1237 * (_1201.y + (-0.5));
        float _1240 = _1237 * (_1201.z + (-0.5));
        float _1247 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1208.x + (-0.5));
        float _1249 = _1247 * (_1208.y + (-0.5));
        float _1250 = _1247 * (_1208.z + (-0.5));
        float _1257 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1215.x + (-0.5));
        float _1259 = _1257 * (_1215.y + (-0.5));
        float _1260 = _1257 * (_1215.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_502, _503, _504), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4095 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1291 + 1.0))) + _1296) * _1261;
        float _1306 = _1229 * 0.5;
        float _1307 = _1239 * 0.5;
        float _1308 = _1249 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_502, _503, _504), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4128 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1333 + 1.0))) + _1338) * _1262;
        float _1348 = _1230 * 0.5;
        float _1349 = _1240 * 0.5;
        float _1350 = _1250 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_502, _503, _504), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4161 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1375 + 1.0))) + _1380) * _1263;
        _1397 = _1230;
        _1398 = _1229;
        _1399 = _1228;
        _1400 = _1240;
        _1401 = _1239;
        _1402 = _1238;
        _1403 = _1250;
        _1404 = _1249;
        _1405 = _1248;
        _1406 = _1263;
        _1407 = _1262;
        _1408 = _1261;
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1086;
        _1398 = _1086;
        _1399 = _1086;
        _1400 = _1086;
        _1401 = _1086;
        _1402 = _1086;
        _1403 = _1086;
        _1404 = _1086;
        _1405 = _1086;
        _1406 = _1086;
        _1407 = _1086;
        _1408 = _1086;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1098)) + _1098;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1099)) + _1099;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1100)) + _1100;
    float _1444 = fma(_1423, cbSceneParam._m0[89u].z, fma(_1422, cbSceneParam._m0[89u].y, _1421 * cbSceneParam._m0[89u].x));
    float _1447 = fma(_1423, cbSceneParam._m0[90u].z, fma(_1422, cbSceneParam._m0[90u].y, _1421 * cbSceneParam._m0[90u].x));
    float _1450 = fma(_1423, cbSceneParam._m0[91u].z, fma(_1422, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1421));
    float _1465 = _691 * 0.5;
    float _1466 = _692 * 0.5;
    float _1467 = _693 * 0.5;
    float _1468 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1471 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1474 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1508;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1481 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1085, _1089, _1092, _1095));
        float _1485 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1489 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1496 = dot(vec4(cbModelParam._m0[39u]), vec4(_1465, _1466, _1467, 1.0));
        _1508 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1508 = 1.0;
    }
    float _1519;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1510 = dot(vec4(cbModelParam._m0[40u]), vec4(_1465, _1466, _1467, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1523 = (_1519 * cbModelParam._m0[1u].x) + (_1508 * (1.0 - cbModelParam._m0[1u].x));
    float _1533 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1533 : min(cbModelParam._m0[25u].z, _1533));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1596 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1599 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1627 = frontier_phi_17_15_ladder;
        }
        float _1799;
        if (_1596 > 0.0)
        {
            _1799 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1799 = frontier_phi_26_22_ladder;
        }
        float _2095;
        if (_1599 > 0.0)
        {
            _2095 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2095 = frontier_phi_38_33_ladder;
        }
        float _2097 = isnan(_1799) ? _1627 : (isnan(_1627) ? _1799 : min(_1627, _1799));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1593) + _1582;
        float _2103 = (_2098 * _1596) + _1586;
        float _2104 = (_2098 * _1599) + _1590;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2105;
        float _2109 = _2105 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 > _2109) || ((_2103 < _2107) || ((_2102 < _2107) || (_2102 > _2109))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2104, cbModelParam._m0[9u].z, fma(_2103, cbModelParam._m0[9u].y, _2102 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2104, cbModelParam._m0[10u].z, fma(_2103, cbModelParam._m0[10u].y, _2102 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2104, cbModelParam._m0[11u].z, fma(_2103, cbModelParam._m0[11u].y, _2102 * cbModelParam._m0[11u].x))), _1534);
            frontier_phi_16_38_ladder = _2249.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2249.x * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_16_38_ladder_2;
        _1617 = frontier_phi_16_38_ladder_1;
        _1619 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1534);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1678 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1682 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1686 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1689 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1692 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1695 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1804;
        if (_1689 > 0.0)
        {
            _1804 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1804 = frontier_phi_28_24_ladder;
        }
        float _2122;
        if (_1692 > 0.0)
        {
            _2122 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2122 = frontier_phi_40_35_ladder;
        }
        float _2460;
        if (_1695 > 0.0)
        {
            _2460 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2460 = frontier_phi_50_47_ladder;
        }
        float _2462 = isnan(_2122) ? _1804 : (isnan(_1804) ? _2122 : min(_1804, _2122));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1689) + _1678;
        float _2468 = (_2463 * _1692) + _1682;
        float _2469 = (_2463 * _1695) + _1686;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_25_50_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1714 = frontier_phi_25_50_ladder_2;
        _1716 = frontier_phi_25_50_ladder_1;
        _1718 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1624);
        _1714 = _1698.x * cbModelParam._m0[1u].z;
        _1716 = _1698.y * cbModelParam._m0[1u].z;
        _1718 = _1698.z * cbModelParam._m0[1u].z;
    }
    float _1731 = (((_718 * _667) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1714 - _1615)) + _1615);
    float _1733 = (((_718 * _669) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1716 - _1617)) + _1617);
    float _1735 = (((_718 * _670) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1718 - _1619)) + _1619);
    float _1738 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1731 * cbSceneParam._m0[91u].x));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1791 = _1778 / _1790;
    float _1792 = _1782 / _1790;
    float _1793 = _1786 / _1790;
    float _1940;
    float _1941;
    float _1942;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1820 = ((uint(_1793 > cbSceneParam._m0[59u].y) + uint(_1793 > cbSceneParam._m0[59u].x)) + uint(_1793 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1821 = _1820 + 43u;
        uint _1829 = _1820 + 44u;
        uint _1837 = _1820 + 45u;
        uint _1845 = _1820 + 46u;
        float _1856 = fma(_1790, cbSceneParam._m0[_1821].w, fma(_1786, cbSceneParam._m0[_1821].z, fma(_1782, cbSceneParam._m0[_1821].y, _1778 * cbSceneParam._m0[_1821].x)));
        float _1860 = fma(_1790, cbSceneParam._m0[_1829].w, fma(_1786, cbSceneParam._m0[_1829].z, fma(_1782, cbSceneParam._m0[_1829].y, _1778 * cbSceneParam._m0[_1829].x)));
        float _1868 = fma(_1790, cbSceneParam._m0[_1845].w, fma(_1786, cbSceneParam._m0[_1845].z, fma(_1782, cbSceneParam._m0[_1845].y, _1778 * cbSceneParam._m0[_1845].x)));
        float _1873 = cbSceneParam._m0[33u].z * _1868;
        float _1875 = cbSceneParam._m0[33u].w * _1868;
        float _1878 = fma(_1790, cbSceneParam._m0[_1837].w, fma(_1786, cbSceneParam._m0[_1837].z, fma(_1782, cbSceneParam._m0[_1837].y, _1778 * cbSceneParam._m0[_1837].x))) / _1868;
        float _1926 = (cbSceneParam._m0[33u].x - sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793))) * cbSceneParam._m0[33u].y;
        float _4287 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1933 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1873 + _1856) / _1868, (_1875 + _1860) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 + _1856) / _1868, (_1860 - _1873) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 - _1873) / _1868, (_1860 - _1875) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 - _1875) / _1868, (_1873 + _1860) / _1868), _1878), 0.0)).x), vec4(0.25)));
        _1940 = 1.0 - (_1933 * cbSceneParam._m0[34u].x);
        _1941 = 1.0 - (_1933 * cbSceneParam._m0[34u].y);
        _1942 = 1.0 - (_1933 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1940 = 1.0;
        _1941 = 1.0;
        _1942 = 1.0;
    }
    float _2006;
    float _2008;
    float _2010;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1994 = fma(_1790, cbSceneParam._m0[63u].w, fma(_1786, cbSceneParam._m0[63u].z, fma(_1782, cbSceneParam._m0[63u].y, _1778 * cbSceneParam._m0[63u].x)));
        float _1995 = fma(_1790, cbSceneParam._m0[60u].w, fma(_1786, cbSceneParam._m0[60u].z, fma(_1782, cbSceneParam._m0[60u].y, _1778 * cbSceneParam._m0[60u].x))) / _1994;
        float _1996 = fma(_1790, cbSceneParam._m0[61u].w, fma(_1786, cbSceneParam._m0[61u].z, fma(_1782, cbSceneParam._m0[61u].y, _1778 * cbSceneParam._m0[61u].x))) / _1994;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1995 >= cbSceneParam._m0[64u].x) && (_1996 >= cbSceneParam._m0[64u].y)) && (_1995 <= cbSceneParam._m0[64u].z)) && (_1996 <= cbSceneParam._m0[64u].w))
        {
            float _2135 = fma(_1790, cbSceneParam._m0[62u].w, fma(_1786, cbSceneParam._m0[62u].z, fma(_1782, cbSceneParam._m0[62u].y, _1778 * cbSceneParam._m0[62u].x))) / _1994;
            float _2139 = isnan(cbSceneParam._m0[41u].w) ? _2135 : (isnan(_2135) ? cbSceneParam._m0[41u].w : max(_2135, cbSceneParam._m0[41u].w));
            float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793))) * cbSceneParam._m0[33u].y;
            float _4303 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
            float _2189 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1995, cbSceneParam._m0[33u].w + _1996), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1995, _1996 - cbSceneParam._m0[33u].z), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1995 - cbSceneParam._m0[33u].z, _1996 - cbSceneParam._m0[33u].w), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1995 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1996), _2139), 0.0)).x), vec4(0.25)));
            float _2193 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
            float _2194 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
            float _2195 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2195) ? _1942 : (isnan(_1942) ? _2195 : min(_1942, _2195));
            frontier_phi_37_36_ladder_1 = isnan(_2194) ? _1941 : (isnan(_1941) ? _2194 : min(_1941, _2194));
            frontier_phi_37_36_ladder_2 = isnan(_2193) ? _1940 : (isnan(_1940) ? _2193 : min(_1940, _2193));
        }
        else
        {
            frontier_phi_37_36_ladder = _1942;
            frontier_phi_37_36_ladder_1 = _1941;
            frontier_phi_37_36_ladder_2 = _1940;
        }
        _2006 = frontier_phi_37_36_ladder_2;
        _2008 = frontier_phi_37_36_ladder_1;
        _2010 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2006 = _1940;
        _2008 = _1941;
        _2010 = _1942;
    }
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _683 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2054 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2058 = _2017 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_502, _503, _504));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_502, _503, _504));
    float _4339 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4350 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2034].x * _2040) * _2079) + (((cbLight._m0[_2044].x * _2006) * _2054) * _2077);
    float _2087 = ((_2040 * cbLight._m0[_2034].y) * _2079) + (((cbLight._m0[_2044].y * _2008) * _2054) * _2077);
    float _2088 = ((_2040 * cbLight._m0[_2034].z) * _2079) + (((cbLight._m0[_2044].z * _2010) * _2054) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2094)
    {
        _2196 = _2086;
        _2198 = _2087;
        _2200 = _2088;
    }
    else
    {
        uint _2204 = _2017 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4361 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2223 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2086;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2087;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2088;
    }
    bool _2203 = _2092.y == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2203)
    {
        _2258 = _2196;
        _2260 = _2198;
        _2262 = _2200;
    }
    else
    {
        uint _2431 = _2017 + 7u;
        float _2447 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4377 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2450 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2258 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2196;
        _2260 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2198;
        _2262 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2200;
    }
    uint _2265 = _2017 + 8u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _505) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2017].x + _582;
    float _2281 = cbLight._m0[_2017].y + _583;
    float _2282 = cbLight._m0[_2017].z + _584;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2017].xyz));
    float _4393 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2294 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2295 = dot(vec3(_502, _503, _504), vec3(_2287, _2288, _2289));
    float _4415 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2287, _2288, _2289));
    float _4426 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2279 * _2279;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2316 = 0.959999978542327880859375 - _664;
    float _2318 = 0.959999978542327880859375 - _665;
    float _2319 = 0.959999978542327880859375 - _666;
    float _2326 = 1.0 - _2279;
    float _2337 = (0.5 / (((_2294 * ((_2293 * _2326) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2326) + _2279) * _2293))) * _2293;
    float _4437 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    uint _2353 = _2017 + 9u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _505) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2058].x + _582;
    float _2367 = cbLight._m0[_2058].y + _583;
    float _2368 = cbLight._m0[_2058].z + _584;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2058].xyz));
    float _4448 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2380 = dot(vec3(_502, _503, _504), vec3(_2373, _2374, _2375));
    float _4459 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2373, _2374, _2375));
    float _4470 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2365 * _2365;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2406 = 1.0 - _2365;
    float _2416 = (0.5 / (((_2294 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2406) + _2365) * _2379))) * _2379;
    float _4481 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    float _2428 = (((((_2399 * _2316) + _667) * cbLight._m0[_2353].x) * _2418) * _2040) + ((((cbLight._m0[_2265].x * _2006) * ((_2315 * _2316) + _667)) * _2339) * _2054);
    float _2429 = (((((_2399 * _2318) + _669) * cbLight._m0[_2353].y) * _2418) * _2040) + ((((cbLight._m0[_2265].y * _2008) * ((_2315 * _2318) + _669)) * _2339) * _2054);
    float _2430 = (((((_2399 * _2319) + _670) * cbLight._m0[_2353].z) * _2418) * _2040) + ((((cbLight._m0[_2265].z * _2010) * ((_2315 * _2319) + _670)) * _2339) * _2054);
    float _2486;
    float _2488;
    float _2490;
    if (_2094)
    {
        _2486 = _2428;
        _2488 = _2429;
        _2490 = _2430;
    }
    else
    {
        uint _2492 = _2017 + 2u;
        uint _2496 = _2017 + 10u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _505) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _582;
        float _2513 = cbLight._m0[_2492].y + _583;
        float _2514 = cbLight._m0[_2492].z + _584;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2492].xyz));
        float _4492 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2526 = dot(vec3(_502, _503, _504), vec3(_2519, _2520, _2521));
        float _4503 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4514 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2552 = 1.0 - _2511;
        float _2562 = (0.5 / (((_2294 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2552) + _2511) * _2525))) * _2525;
        float _4525 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2486 = (((((_2545 * _2316) + _667) * cbLight._m0[_2496].x) * _2564) * _2565) + _2428;
        _2488 = (((((_2545 * _2318) + _669) * cbLight._m0[_2496].y) * _2564) * _2565) + _2429;
        _2490 = (((((_2545 * _2319) + _670) * cbLight._m0[_2496].z) * _2564) * _2565) + _2430;
    }
    float _2596;
    float _2598;
    float _2600;
    if (_2203)
    {
        _2596 = _2486;
        _2598 = _2488;
        _2600 = _2490;
    }
    else
    {
        uint _2607 = _2017 + 3u;
        uint _2611 = _2017 + 11u;
        float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2607].w)) * _505) * 0.949999988079071044921875);
        float _2626 = _2625 * _2625;
        float _2627 = cbLight._m0[_2607].x + _582;
        float _2628 = cbLight._m0[_2607].y + _583;
        float _2629 = cbLight._m0[_2607].z + _584;
        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
        float _2634 = _2633 * _2627;
        float _2635 = _2633 * _2628;
        float _2636 = _2633 * _2629;
        float _2637 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2607].xyz));
        float _4541 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2641 = dot(vec3(_502, _503, _504), vec3(_2634, _2635, _2636));
        float _4552 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2645 = dot(vec3(cbLight._m0[_2607].xyz), vec3(_2634, _2635, _2636));
        float _4563 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2649 = _2626 * _2626;
        float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
        float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2667 = 1.0 - _2626;
        float _2677 = (0.5 / (((_2294 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2667) + _2626) * _2640))) * _2640;
        float _4574 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2596 = (((((_2660 * _2316) + _667) * cbLight._m0[_2611].x) * _2679) * _2680) + _2486;
        _2598 = (((((_2660 * _2318) + _669) * cbLight._m0[_2611].y) * _2679) * _2680) + _2488;
        _2600 = (((((_2660 * _2319) + _670) * cbLight._m0[_2611].z) * _2679) * _2680) + _2490;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2015.y == 0u)
    {
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _604) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _603) / _2702)));
        float _2723 = (log2(_1793 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
        }
        else
        {
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2982)
                {
                    frontier_phi_71_pred = _2971;
                    frontier_phi_71_pred_1 = _2970;
                    frontier_phi_71_pred_2 = _2969;
                    frontier_phi_71_pred_3 = _2968;
                    frontier_phi_71_pred_4 = _2967;
                    frontier_phi_71_pred_5 = _2966;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2981;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2972 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _1791;
                        float _3178 = _3137.y - _1792;
                        float _3179 = _3137.z - _1793;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_624, _627, _630), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4600 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _1791;
                        float _3213 = (-0.0) - _1792;
                        float _3214 = (-0.0) - _1793;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3228 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _699;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_624, _627, _630), vec3(_3219, _3220, _3221));
                        float _4616 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3253 = dot(vec3(_624, _627, _630), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4627 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3197 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3187) + _3262;
                        float _4638 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4649 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3260 * _3260) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3041 = (_3208 * _3156.x) + _3114;
                        _3042 = (_3208 * _3156.y) + _3115;
                        _3043 = (_3208 * _3156.z) + _3116;
                        _3038 = (_3288 * _3173.x) + _3111;
                        _3039 = (_3288 * _3173.y) + _3112;
                        _3040 = (_3288 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_71_pred = _3043;
                    frontier_phi_71_pred_1 = _3042;
                    frontier_phi_71_pred_2 = _3041;
                    frontier_phi_71_pred_3 = _3040;
                    frontier_phi_71_pred_4 = _3039;
                    frontier_phi_71_pred_5 = _3038;
                }
                _2824 = frontier_phi_71_pred;
                _2822 = frontier_phi_71_pred_1;
                _2820 = frontier_phi_71_pred_2;
                _2818 = frontier_phi_71_pred_3;
                _2816 = frontier_phi_71_pred_4;
                _2814 = frontier_phi_71_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2814;
                    _2967 = _2816;
                    _2968 = _2818;
                    _2969 = _2820;
                    _2970 = _2822;
                    _2971 = _2824;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
        }
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.z;
        uint _2830 = (_2828 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2830) & _2733) == 0u)
        {
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
            float _2960 = _2959 * _1791;
            float _2961 = _2959 * _1792;
            float _2962 = _2959 * _1793;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2830 < ((_2828 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3094 = _2813;
                float _3095 = _2815;
                float _3096 = _2817;
                float _3097 = _2819;
                float _3098 = _2821;
                float _3099 = _2823;
                uint _3100 = _2830;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3110)
                    {
                        frontier_phi_82_pred = _3099;
                        frontier_phi_82_pred_1 = _3098;
                        frontier_phi_82_pred_2 = _3097;
                        frontier_phi_82_pred_3 = _3096;
                        frontier_phi_82_pred_4 = _3095;
                        frontier_phi_82_pred_5 = _3094;
                    }
                    else
                    {
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3315 = _3094;
                        float _3316 = _3095;
                        float _3317 = _3096;
                        float _3318 = _3097;
                        float _3319 = _3098;
                        float _3320 = _3099;
                        uint _3321 = _3109;
                        uint _3322;
                        vec4 _3347;
                        float _3348;
                        vec4 _3363;
                        vec3 _3375;
                        vec4 _3391;
                        vec4 _3406;
                        float _3452;
                        bool _3453;
                        for (;;)
                        {
                            uint _3332 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3321));
                            _3322 = (_3321 + 4294967295u) & _3321;
                            uint _3334 = _3332 * 40u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3348 = _3347.w;
                            uint _3350 = (_3332 * 40u) + 4u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3332 * 40u) + 8u;
                            _3375 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x));
                            uint _3378 = (_3332 * 40u) + 16u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3332 * 40u) + 20u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3332 * 40u) + 24u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3427 = (_3332 * 40u) + 28u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            _3452 = fma(_1793, _3440.z, fma(_1792, _3440.y, _3440.x * _1791)) + _3440.w;
                            _3453 = !((fma(_1793, _3421.z, fma(_1792, _3421.y, _3421.x * _1791)) + _3421.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3453)
                            {
                                float _3480 = _3347.x - _1791;
                                float _3481 = _3347.y - _1792;
                                float _3482 = _3347.z - _1793;
                                float _3483 = dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482));
                                float _3486 = inversesqrt(_3483);
                                float _3487 = _3486 * _3480;
                                float _3488 = _3486 * _3481;
                                float _3489 = _3486 * _3482;
                                float _3493 = 1.0 - (_3483 / (_3348 * _3348));
                                float _4660 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3498 = sqrt(_3483) * _3363.w;
                                float _3500 = 1.39999997615814208984375 / (_3498 + 1.39999997615814208984375);
                                float _3501 = _3500 * _3500;
                                float _3504 = ((1.0 - _3501) * dot(vec3(_3487, _3488, _3489), vec3(_624, _627, _630))) + _3501;
                                float _3507 = _3498 * _3498;
                                float _3511 = (fma(_1793, _3391.z, fma(_1792, _3391.y, _3391.x * _1791)) + _3391.w) / _3452;
                                float _3512 = (fma(_1793, _3406.z, fma(_1792, _3406.y, _3406.x * _1791)) + _3406.w) / _3452;
                                float _3516 = 1.0 - dot(vec2(_3511, _3512), vec2(_3511, _3512));
                                float _4676 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3518 = _3517 * (((isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0))) * _3494) / ((_3507 * 0.699999988079071044921875) + 1.0));
                                float _3530 = exp2(log2(1.0 / ((_3507 * 3.5) + 5.0)) * 0.25);
                                float _3531 = 1.0 - _699;
                                float _3538 = sqrt(1.0 - ((1.0 - (_3531 * _3531)) * (1.0 - (_3530 * _3530))));
                                float _3539 = _3538 * _3538;
                                float _3540 = _3539 * _3539;
                                float _3541 = _3487 - _2960;
                                float _3542 = _3488 - _2961;
                                float _3543 = _3489 - _2962;
                                float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                                float _3551 = dot(vec3(_624, _627, _630), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4687 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3554 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3555 = dot(vec3(_624, _627, _630), vec3(_3547 * _3541, _3547 * _3542, _3547 * _3543));
                                float _4698 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3562 = ((_3558 * _3558) * (_3540 + (-1.0))) + 1.0;
                                float _3563 = _3500 * _3539;
                                float _3564 = _3563 * _3563;
                                float _3570 = ((1.0 - _3564) * dot(vec3(_624, _627, _630), vec3(_3487, _3488, _3489))) + _3564;
                                float _4709 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3572 = 1.0 - _3539;
                                float _3582 = (0.5 / (((_3571 * ((_3554 * _3572) + _3539)) + 9.9999999392252902907785028219223e-09) + (((_3571 * _3572) + _3539) * _3554))) * _3571;
                                float _4720 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3592 = (_3517 * _3494) * (((_3540 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3562 * _3562) * ((_3507 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3518 * _3363.z;
                                frontier_phi_88_pred_1 = _3518 * _3363.y;
                                frontier_phi_88_pred_2 = _3518 * _3363.x;
                                frontier_phi_88_pred_3 = _3592 * _3375.z;
                                frontier_phi_88_pred_4 = _3592 * _3375.y;
                                frontier_phi_88_pred_5 = _3592 * _3375.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3601 = frontier_phi_88_pred;
                            _3600 = frontier_phi_88_pred_1;
                            _3599 = frontier_phi_88_pred_2;
                            _3598 = frontier_phi_88_pred_3;
                            _3597 = frontier_phi_88_pred_4;
                            _3596 = frontier_phi_88_pred_5;
                            _3305 = _3599 + _3318;
                            _3306 = _3600 + _3319;
                            _3307 = _3601 + _3320;
                            _3302 = _3596 + _3315;
                            _3303 = _3597 + _3316;
                            _3304 = _3598 + _3317;
                            if (_3322 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3322;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3307;
                        frontier_phi_82_pred_1 = _3306;
                        frontier_phi_82_pred_2 = _3305;
                        frontier_phi_82_pred_3 = _3304;
                        frontier_phi_82_pred_4 = _3303;
                        frontier_phi_82_pred_5 = _3302;
                    }
                    _2945 = frontier_phi_82_pred;
                    _2943 = frontier_phi_82_pred_1;
                    _2941 = frontier_phi_82_pred_2;
                    _2939 = frontier_phi_82_pred_3;
                    _2937 = frontier_phi_82_pred_4;
                    _2935 = frontier_phi_82_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2935;
                        _3095 = _2937;
                        _3096 = _2939;
                        _3097 = _2941;
                        _3098 = _2943;
                        _3099 = _2945;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2941;
                frontier_phi_63_64_ladder_1 = _2945;
                frontier_phi_63_64_ladder_2 = _2943;
                frontier_phi_63_64_ladder_3 = _2939;
                frontier_phi_63_64_ladder_4 = _2937;
                frontier_phi_63_64_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_63_64_ladder = _2819;
                frontier_phi_63_64_ladder_1 = _2823;
                frontier_phi_63_64_ladder_2 = _2821;
                frontier_phi_63_64_ladder_3 = _2817;
                frontier_phi_63_64_ladder_4 = _2815;
                frontier_phi_63_64_ladder_5 = _2813;
            }
            _2934 = frontier_phi_63_64_ladder_5;
            _2936 = frontier_phi_63_64_ladder_4;
            _2938 = frontier_phi_63_64_ladder_3;
            _2940 = frontier_phi_63_64_ladder;
            _2942 = frontier_phi_63_64_ladder_2;
            _2944 = frontier_phi_63_64_ladder_1;
        }
        float _2949 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2746 = (_2949 * _2940) + _2258;
        _2748 = (_2949 * _2942) + _2260;
        _2750 = (_2949 * _2944) + _2262;
        _2752 = ((_2934 * _667) * _2949) + _2596;
        _2754 = ((_2936 * _669) * _2949) + _2598;
        _2756 = ((_2938 * _670) * _2949) + _2600;
    }
    else
    {
        _2746 = _2258;
        _2748 = _2260;
        _2750 = _2262;
        _2752 = _2596;
        _2754 = _2598;
        _2756 = _2600;
    }
    float _4736 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4747 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4758 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _2773 = ((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2746 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _683))) + ((_2752 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1523)) * cbPerFrame._m0[3u].x);
    float _2774 = ((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2748 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _683))) + ((_2754 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1523)) * cbPerFrame._m0[3u].x);
    float _2775 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2750 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _683))) + ((_2756 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1523)) * cbPerFrame._m0[3u].x);
    uint _2776 = _232 + 6u;
    float _2784 = _603 / cbSceneParam._m0[86u].x;
    float _2785 = _604 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _2838 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _2839 = _2838 / _524;
        float _2850 = _2839 * _575;
        float _2851 = _576 * _2839;
        float _2852 = (-0.0) - _2851;
        float _2854 = _2839 * _577;
        float _2856 = (cbSceneParam._m0[77u].w * _2852) / _2838;
        float _2857 = _2856 + cbSceneParam._m0[79u].w;
        float _2858 = cbSceneParam._m0[79u].w - _2851;
        float _2864 = sqrt(((_2850 * _2850) + (_2851 * _2851)) + (_2854 * _2854));
        float _2867 = (1.0 - (cbSceneParam._m0[77u].w / _2838)) * _2864;
        float _2872 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2874 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3051;
        if (abs((_2852 - _2856) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3051 = ((((_2857 > 0.0) ? exp2(_2872 * _2857) : (2.0 - exp2(_2874 * _2857))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2867;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : max(_2857, _2858));
            float _2997 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : min(_2857, _2858));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3051 = ((abs(_2864 / _2852) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2872 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2872 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2874 * _3006) - exp2(_2874 * _3007)) * _2995))) + (_2867 * cbSceneParam._m0[80u].z);
        }
        vec4 _3053 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3062 = exp2((_3051 * (-1.44269502162933349609375)) * (1.0 - _3053.w));
        float _3063 = log2(_3062);
        float _3079 = log2(_2804);
        _2876 = (exp2(_3079 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].x)) * _3053.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2878 = (exp2(_3079 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].y)) * _3053.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2880 = (exp2(_3079 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].z)) * _3053.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2882 = _3062 * _2804;
    }
    else
    {
        _2876 = _2801;
        _2878 = _2802;
        _2880 = _2803;
        _2882 = _2804;
    }
    bool _3089;
    vec4 _2892;
    vec4 _2914;
    float _2916;
    float _2920;
    float _2921;
    float _2922;
    float _2923;
    bool _2933;
    for (;;)
    {
        _2892 = cbMatDynParam._m0[0u];
        float _2894 = roundEven(_2892.y);
        bool _2895 = _2894 == 3.0;
        float _2896 = log2(_2882);
        float _2903 = exp2(_2896 * cbSceneParam._m0[78u].x) * _2773;
        float _2904 = exp2(_2896 * cbSceneParam._m0[78u].y) * _2774;
        float _2905 = exp2(_2896 * cbSceneParam._m0[78u].z) * _2775;
        float _2912 = _591 + (-0.5);
        _2914 = cbMtdParam._m0[1u];
        _2916 = _2914.y * _2912;
        float _2919 = (_2894 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2920 = _2919 * (_2895 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2876)));
        _2921 = _2919 * (_2895 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2878)));
        _2922 = _2919 * (_2895 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2880)));
        _2923 = _2912 * 0.999000012874603271484375;
        _2933 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2933)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2923) < 0.5)
            {
                _3089 = true;
                break;
            }
        }
        uint _3030 = _643 + uint(_2892.w);
        if ((cbInstanceData._m0[_3030].w < 1.0) && ((cbInstanceData._m0[_3030].w + _2923) < 0.5))
        {
            _3089 = true;
            break;
        }
        if ((_2916 + 1.0) < _2914.x)
        {
            _3089 = true;
            break;
        }
        _3089 = false;
        break;
    }
    float _3293;
    if (_3089)
    {
        discard_state = true;
        _3293 = 0.0;
    }
    else
    {
        _3293 = cbInstanceData._m0[_2776].w;
    }
    SV_Target.x = _2920;
    SV_Target.y = _2921;
    SV_Target.z = _2922;
    SV_Target.w = _3293;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
    discard_exit();
}


