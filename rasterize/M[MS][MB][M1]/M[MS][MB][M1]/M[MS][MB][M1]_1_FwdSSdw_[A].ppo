#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _896;
float _3308;
float _3309;
float _3310;
float _3311;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _258 = _254.z;
    float _263 = (_254.x * 2.0) + (-1.0);
    float _265 = (_254.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3320 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))));
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _287 = _285.x;
    float _292 = cbMtdParam._m0[22u].x + _254.w;
    float _295 = fma(_272, _203 * NORMAL.x, fma(_265, _210 * TANGENT.x, (_196 * _188) * _263));
    float _298 = fma(_272, _203 * NORMAL.y, fma(_265, _210 * TANGENT.y, (_196 * _189) * _263));
    float _301 = fma(_272, _203 * NORMAL.z, fma(_265, _210 * TANGENT.z, (_196 * _190) * _263));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3331 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _309 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3353 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3364 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3375 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3386 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _314 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _372 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _382 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _372);
    float _383 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _372);
    float _384 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _372);
    float _388 = inversesqrt(dot(vec3(_382, _383, _384), vec3(_382, _383, _384)));
    float _389 = _382 * _388;
    float _390 = _383 * _388;
    float _391 = _384 * _388;
    vec4 _396 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _398 = _396.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _575 = sqrt(((_382 * _382) + (_383 * _383)) + (_384 * _384));
        float _581 = (cbMatDynParam._m0[5u].x * _575) + cbMatDynParam._m0[5u].y;
        float _3397 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _582 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _586 = (cbMatDynParam._m0[5u].z * _575) + cbMatDynParam._m0[5u].w;
        float _3408 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) - _582)) + _582) < ((_398 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _431 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _434 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _437 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _450 = uint(roundEven(NORMAL.w)) * 13u;
    uint _452 = _450 + 9u;
    uint _453 = _452 + uint(cbMatDynParam._m0[0u].w);
    float _459 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_453].x;
    float _460 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_453].y;
    float _461 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_453].z;
    float _3419 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _465 = 1.0 - _314;
    float _466 = _462 * _465;
    float _467 = _463 * _465;
    float _468 = _464 * _465;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _314;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _314;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _314;
    float _476 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    vec4 _488 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _492 = ((isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * TEXCOORD_5.w) * _488.x;
    float _493 = dot(vec3(_306, _307, _308), vec3(_389, _390, _391));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _306) - _389;
    float _501 = (_496 * _307) - _390;
    float _502 = (_496 * _308) - _391;
    float _506 = abs(dot(vec3(_389, _390, _391), vec3(_306, _307, _308)));
    float _3452 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = sqrt(_309);
    float _521 = exp2((_508 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_508 * 3.0));
    float _527 = (1.0 - _521) * ((_508 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _528 = _521 * _508;
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _895;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = fma(_564, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556));
        float _624 = fma(_564, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556));
        float _628 = fma(_564, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556));
        float _653 = _556 + _306;
        float _654 = _560 + _307;
        float _655 = _564 + _308;
        float _665 = fma(_655, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653)) - _620;
        float _666 = fma(_655, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653)) - _624;
        float _667 = fma(_655, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653)) - _628;
        float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
        float _684 = ((_671 * _665) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_620 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_671 * _666) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_624 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _686 = ((_671 * _667) / cbModelParam._m0[34u].z) + ((((((_628 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _723 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_689.x + (-0.5));
        float _725 = _723 * (_689.y + (-0.5));
        float _726 = _723 * (_689.z + (-0.5));
        float _733 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_696.x + (-0.5));
        float _735 = _733 * (_696.y + (-0.5));
        float _736 = _733 * (_696.z + (-0.5));
        float _743 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_703.x + (-0.5));
        float _745 = _743 * (_703.y + (-0.5));
        float _746 = _743 * (_703.z + (-0.5));
        float _753 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_710.x + (-0.5));
        float _755 = _753 * (_710.y + (-0.5));
        float _756 = _753 * (_710.z + (-0.5));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _760 = _724 * 0.5;
        float _761 = _734 * 0.5;
        float _762 = _744 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _777 = (dot(vec3(_306, _307, _308), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _787 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3500 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_789 + 1.0))) + _794) * _757;
        float _804 = _725 * 0.5;
        float _805 = _735 * 0.5;
        float _806 = _745 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_306, _307, _308), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3533 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_831 + 1.0))) + _836) * _758;
        float _846 = _726 * 0.5;
        float _847 = _736 * 0.5;
        float _848 = _746 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_306, _307, _308), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_759 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3566 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_873 + 1.0))) + _878) * _759;
        _895 = _726;
        _897 = _725;
        _898 = _724;
        _899 = _736;
        _900 = _735;
        _901 = _734;
        _902 = _746;
        _903 = _745;
        _904 = _744;
        _905 = _759;
        _906 = _758;
        _907 = _757;
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _910 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
    }
    else
    {
        _895 = _896;
        _897 = _896;
        _898 = _896;
        _899 = _896;
        _900 = _896;
        _901 = _896;
        _902 = _896;
        _903 = _896;
        _904 = _896;
        _905 = _896;
        _906 = _896;
        _907 = _896;
        _908 = 0.0;
        _909 = 0.0;
        _910 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_564, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _556));
        float _942 = fma(_564, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _556));
        float _946 = fma(_564, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _556));
        float _969 = _556 + _306;
        float _970 = _560 + _307;
        float _971 = _564 + _308;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_306, _307, _308), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3629 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_306, _307, _308), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3662 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_306, _307, _308), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3695 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _896;
        _1208 = _896;
        _1209 = _896;
        _1210 = _896;
        _1211 = _896;
        _1212 = _896;
        _1213 = _896;
        _1214 = _896;
        _1215 = _896;
        _1216 = _896;
        _1217 = _896;
        _1218 = _896;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _908)) + _908;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _909)) + _909;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _910)) + _910;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _500 * 0.5;
    float _1276 = _501 * 0.5;
    float _1277 = _502 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_895, _899, _902, _905));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _900, _903, _906));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_898, _901, _904, _907));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_564, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_564, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_564, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1407 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1410 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1438 = frontier_phi_17_15_ladder;
        }
        float _1665;
        if (_1407 > 0.0)
        {
            _1665 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1665 = frontier_phi_26_22_ladder;
        }
        float _1922;
        if (_1410 > 0.0)
        {
            _1922 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1922 = frontier_phi_38_33_ladder;
        }
        float _1924 = isnan(_1665) ? _1438 : (isnan(_1438) ? _1665 : min(_1438, _1665));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1404) + _1393;
        float _1930 = (_1925 * _1407) + _1397;
        float _1931 = (_1925 * _1410) + _1401;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1934 = (-1.0) - _1932;
        float _1936 = _1932 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1931 > _1936) || ((_1931 < _1934) || ((_1930 > _1936) || ((_1930 < _1934) || ((_1929 < _1934) || (_1929 > _1936))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1931, cbModelParam._m0[9u].z, fma(_1930, cbModelParam._m0[9u].y, _1929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1931, cbModelParam._m0[10u].z, fma(_1930, cbModelParam._m0[10u].y, _1929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1931, cbModelParam._m0[11u].z, fma(_1930, cbModelParam._m0[11u].y, _1929 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_16_38_ladder = _2059.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2059.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_16_38_ladder_2;
        _1428 = frontier_phi_16_38_ladder_1;
        _1430 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1491 = fma(_564, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556)) + cbModelParam._m0[21u].w;
        float _1495 = fma(_564, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556)) + cbModelParam._m0[22u].w;
        float _1499 = fma(_564, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556)) + cbModelParam._m0[23u].w;
        float _1502 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1505 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1508 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1670;
        if (_1502 > 0.0)
        {
            _1670 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1670 = frontier_phi_28_24_ladder;
        }
        float _1949;
        if (_1505 > 0.0)
        {
            _1949 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1949 = frontier_phi_40_35_ladder;
        }
        float _2162;
        if (_1508 > 0.0)
        {
            _2162 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2162 = frontier_phi_49_46_ladder;
        }
        float _2164 = isnan(_1949) ? _1670 : (isnan(_1670) ? _1949 : min(_1670, _1949));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1502) + _1491;
        float _2170 = (_2165 * _1505) + _1495;
        float _2171 = (_2165 * _1508) + _1499;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2172;
        float _2175 = _2172 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2171 > _2175) || ((_2171 < _2173) || ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 < _2173) || (_2169 > _2175))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2171, cbModelParam._m0[17u].z, fma(_2170, cbModelParam._m0[17u].y, _2169 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2171, cbModelParam._m0[18u].z, fma(_2170, cbModelParam._m0[18u].y, _2169 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2171, cbModelParam._m0[19u].z, fma(_2170, cbModelParam._m0[19u].y, _2169 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_25_49_ladder = _2370.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2370.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2370.x * cbModelParam._m0[1u].z;
        }
        _1527 = frontier_phi_25_49_ladder_2;
        _1529 = frontier_phi_25_49_ladder_1;
        _1531 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1435);
        _1527 = _1511.x * cbModelParam._m0[1u].z;
        _1529 = _1511.y * cbModelParam._m0[1u].z;
        _1531 = _1511.z * cbModelParam._m0[1u].z;
    }
    float _1544 = (((_527 * _476) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1527 - _1426)) + _1426);
    float _1546 = (((_527 * _478) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1529 - _1428)) + _1428);
    float _1548 = (((_527 * _479) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1531 - _1430)) + _1430);
    float _1551 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1544 * cbSceneParam._m0[89u].x));
    float _1554 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1544 * cbSceneParam._m0[90u].x));
    float _1557 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, _1544 * cbSceneParam._m0[91u].x));
    vec4 _1565 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_410, _411));
    float _1567 = _1565.w;
    float _1579 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1567);
    float _1580 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1567);
    float _1581 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1567);
    uvec4 _1585 = floatBitsToUint(cbInstanceData._m0[_450 + 5u]);
    uint _1587 = _1585.x * 14u;
    uint _1588 = _1587 + 13u;
    float _1595 = _492 + (-1.0);
    float _1600 = (cbLight._m0[_1588].x * _1595) + 1.0;
    float _1601 = (cbLight._m0[_1588].y * _1595) + 1.0;
    float _1602 = (cbLight._m0[_1588].z * _1595) + 1.0;
    float _1603 = (cbLight._m0[_1588].w * _1595) + 1.0;
    uint _1604 = _1587 + 5u;
    float _1610 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1614 = _1587 + 4u;
    float _1624 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
    uint _1628 = _1587 | 1u;
    float _1639 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_306, _307, _308));
    float _1642 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_306, _307, _308));
    float _3831 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _3842 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1647 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1649 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.3183098733425140380859375;
    float _1656 = ((cbLight._m0[_1604].x * _1610) * _1649) + (((cbLight._m0[_1614].x * _1579) * _1624) * _1647);
    float _1657 = ((_1610 * cbLight._m0[_1604].y) * _1649) + (((cbLight._m0[_1614].y * _1580) * _1624) * _1647);
    float _1658 = ((_1610 * cbLight._m0[_1604].z) * _1649) + (((cbLight._m0[_1614].z * _1581) * _1624) * _1647);
    uvec4 _1662 = floatBitsToUint(cbLight._m0[_1587 + 12u]);
    bool _1664 = _1662.x == 0u;
    float _1675;
    float _1677;
    float _1679;
    if (_1664)
    {
        _1675 = _1656;
        _1677 = _1657;
        _1679 = _1658;
    }
    else
    {
        uint _1683 = _1587 + 6u;
        float _1699 = (dot(vec3(cbLight._m0[_1587 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3853 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1702 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1675 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1656;
        _1677 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1657;
        _1679 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1658;
    }
    bool _1682 = _1662.y == 0u;
    float _1720;
    float _1722;
    float _1724;
    if (_1682)
    {
        _1720 = _1675;
        _1722 = _1677;
        _1724 = _1679;
    }
    else
    {
        uint _1893 = _1587 + 7u;
        float _1909 = (dot(vec3(cbLight._m0[_1587 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _3869 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1912 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1720 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1675;
        _1722 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1677;
        _1724 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1679;
    }
    uint _1727 = _1587 + 8u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1587].w)) * _309) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1587].x + _389;
    float _1743 = cbLight._m0[_1587].y + _390;
    float _1744 = cbLight._m0[_1587].z + _391;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1587].xyz));
    float _3885 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _1756 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1757 = dot(vec3(_306, _307, _308), vec3(_1749, _1750, _1751));
    float _3907 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_1749, _1750, _1751));
    float _3918 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1741 * _1741;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1777 = exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0);
    float _1778 = 0.959999978542327880859375 - _473;
    float _1780 = 0.959999978542327880859375 - _474;
    float _1781 = 0.959999978542327880859375 - _475;
    float _1788 = 1.0 - _1741;
    float _1799 = (0.5 / (((_1756 * ((_1755 * _1788) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1788) + _1741) * _1755))) * _1755;
    float _3929 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1801 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    uint _1815 = _1587 + 9u;
    float _1826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1628].w)) * _309) * 0.949999988079071044921875);
    float _1827 = _1826 * _1826;
    float _1828 = cbLight._m0[_1628].x + _389;
    float _1829 = cbLight._m0[_1628].y + _390;
    float _1830 = cbLight._m0[_1628].z + _391;
    float _1834 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
    float _1835 = _1834 * _1828;
    float _1836 = _1834 * _1829;
    float _1837 = _1834 * _1830;
    float _1838 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1628].xyz));
    float _3940 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1842 = dot(vec3(_306, _307, _308), vec3(_1835, _1836, _1837));
    float _3951 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1846 = dot(vec3(cbLight._m0[_1628].xyz), vec3(_1835, _1836, _1837));
    float _3962 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1850 = _1827 * _1827;
    float _1854 = ((_1845 * _1845) * (_1850 + (-1.0))) + 1.0;
    float _1861 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
    float _1868 = 1.0 - _1827;
    float _1878 = (0.5 / (((_1756 * ((_1841 * _1868) + _1827)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1868) + _1827) * _1841))) * _1841;
    float _3973 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1880 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1850 / ((_1854 * _1854) * 3.141590118408203125));
    float _1890 = (((((_1861 * _1778) + _476) * cbLight._m0[_1815].x) * _1880) * _1610) + ((((cbLight._m0[_1727].x * _1579) * ((_1777 * _1778) + _476)) * _1801) * _1624);
    float _1891 = (((((_1861 * _1780) + _478) * cbLight._m0[_1815].y) * _1880) * _1610) + ((((cbLight._m0[_1727].y * _1580) * ((_1777 * _1780) + _478)) * _1801) * _1624);
    float _1892 = (((((_1861 * _1781) + _479) * cbLight._m0[_1815].z) * _1880) * _1610) + ((((cbLight._m0[_1727].z * _1581) * ((_1777 * _1781) + _479)) * _1801) * _1624);
    float _1954;
    float _1956;
    float _1958;
    if (_1664)
    {
        _1954 = _1890;
        _1956 = _1891;
        _1958 = _1892;
    }
    else
    {
        uint _1960 = _1587 + 2u;
        uint _1964 = _1587 + 10u;
        float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _309) * 0.949999988079071044921875);
        float _1979 = _1978 * _1978;
        float _1980 = cbLight._m0[_1960].x + _389;
        float _1981 = cbLight._m0[_1960].y + _390;
        float _1982 = cbLight._m0[_1960].z + _391;
        float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
        float _1987 = _1986 * _1980;
        float _1988 = _1986 * _1981;
        float _1989 = _1986 * _1982;
        float _1990 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1960].xyz));
        float _3984 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1993 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1994 = dot(vec3(_306, _307, _308), vec3(_1987, _1988, _1989));
        float _3995 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1997 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1998 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_1987, _1988, _1989));
        float _4006 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2002 = _1979 * _1979;
        float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
        float _2013 = exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0);
        float _2020 = 1.0 - _1979;
        float _2030 = (0.5 / (((_1756 * ((_1993 * _2020) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2020) + _1979) * _1993))) * _1993;
        float _4017 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2032 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
        float _2033 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
        _1954 = (((((_2013 * _1778) + _476) * cbLight._m0[_1964].x) * _2032) * _2033) + _1890;
        _1956 = (((((_2013 * _1780) + _478) * cbLight._m0[_1964].y) * _2032) * _2033) + _1891;
        _1958 = (((((_2013 * _1781) + _479) * cbLight._m0[_1964].z) * _2032) * _2033) + _1892;
    }
    float _2068;
    float _2070;
    float _2072;
    if (_1682)
    {
        _2068 = _1954;
        _2070 = _1956;
        _2072 = _1958;
    }
    else
    {
        uint _2079 = _1587 + 3u;
        uint _2083 = _1587 + 11u;
        float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _309) * 0.949999988079071044921875);
        float _2098 = _2097 * _2097;
        float _2099 = cbLight._m0[_2079].x + _389;
        float _2100 = cbLight._m0[_2079].y + _390;
        float _2101 = cbLight._m0[_2079].z + _391;
        float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
        float _2106 = _2105 * _2099;
        float _2107 = _2105 * _2100;
        float _2108 = _2105 * _2101;
        float _2109 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2079].xyz));
        float _4033 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2113 = dot(vec3(_306, _307, _308), vec3(_2106, _2107, _2108));
        float _4044 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2117 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2106, _2107, _2108));
        float _4055 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2121 = _2098 * _2098;
        float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
        float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0);
        float _2139 = 1.0 - _2098;
        float _2149 = (0.5 / (((_1756 * ((_2112 * _2139) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _2139) + _2098) * _2112))) * _2112;
        float _4066 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2151 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
        float _2152 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _2068 = (((((_2132 * _1778) + _476) * cbLight._m0[_2083].x) * _2151) * _2152) + _1954;
        _2070 = (((((_2132 * _1780) + _478) * cbLight._m0[_2083].y) * _2151) * _2152) + _1956;
        _2072 = (((((_2132 * _1781) + _479) * cbLight._m0[_2083].z) * _2151) * _2152) + _1958;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1585.y == 0u)
    {
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2227;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2227;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2227;
        uvec4 _2242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2243 = _2242.x;
        uint _2254 = uint((float(_2242.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2243))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2243)));
        float _2264 = (log2(_2230 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2265 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        uint _2268 = uint(isnan(14.0) ? _2265 : (isnan(_2265) ? 14.0 : min(_2265, 14.0)));
        uvec4 _2273 = texelFetch(g_lightClusterGridBuffer, int(((_2268 << 2u) + (_2254 << 6u)) >> 2u));
        uint _2274 = _2273.x;
        uint _2275 = _2242.z;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        if (((((1u << ((_2275 >> 4u) & 15u)) + 4294967295u) & _2274) == 0u) || ((_2275 & 240u) == 0u))
        {
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
        }
        else
        {
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            uint _2534 = 0u;
            uint _2543;
            bool _2544;
            for (;;)
            {
                _2543 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                _2544 = _2543 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2544)
                {
                    frontier_phi_66_pred = _2528;
                    frontier_phi_66_pred_1 = _2533;
                    frontier_phi_66_pred_2 = _2532;
                    frontier_phi_66_pred_3 = _2531;
                    frontier_phi_66_pred_4 = _2530;
                    frontier_phi_66_pred_5 = _2529;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2543;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2534 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2228;
                        float _2740 = _2699.y - _2229;
                        float _2741 = _2699.z - _2230;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_431, _434, _437), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4092 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2228;
                        float _2775 = (-0.0) - _2229;
                        float _2776 = (-0.0) - _2230;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _508;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_431, _434, _437), vec3(_2781, _2782, _2783));
                        float _4108 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2816 = dot(vec3(_431, _434, _437), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4119 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4130 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4141 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2603 = (_2770 * _2718.x) + _2676;
                        _2604 = (_2770 * _2718.y) + _2677;
                        _2605 = (_2770 * _2718.z) + _2678;
                        _2600 = (_2851 * _2735.x) + _2673;
                        _2601 = (_2851 * _2735.y) + _2674;
                        _2602 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_66_pred = _2600;
                    frontier_phi_66_pred_1 = _2605;
                    frontier_phi_66_pred_2 = _2604;
                    frontier_phi_66_pred_3 = _2603;
                    frontier_phi_66_pred_4 = _2602;
                    frontier_phi_66_pred_5 = _2601;
                }
                _2376 = frontier_phi_66_pred;
                _2386 = frontier_phi_66_pred_1;
                _2384 = frontier_phi_66_pred_2;
                _2382 = frontier_phi_66_pred_3;
                _2380 = frontier_phi_66_pred_4;
                _2378 = frontier_phi_66_pred_5;
                uint _2535 = _2534 + 1u;
                if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2528 = _2376;
                    _2529 = _2378;
                    _2530 = _2380;
                    _2531 = _2382;
                    _2532 = _2384;
                    _2533 = _2386;
                    _2534 = _2535;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
        }
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.z;
        uint _2392 = (_2390 >> 8u) & 15u;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((4294967295u << _2392) & _2274) == 0u)
        {
            _2496 = _2375;
            _2498 = _2377;
            _2500 = _2379;
            _2502 = _2381;
            _2504 = _2383;
            _2506 = _2385;
        }
        else
        {
            float _2521 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
            float _2522 = _2521 * _2228;
            float _2523 = _2521 * _2229;
            float _2524 = _2521 * _2230;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2392 < ((_2390 >> 12u) & 15u))
            {
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2656 = _2375;
                float _2657 = _2377;
                float _2658 = _2379;
                float _2659 = _2381;
                float _2660 = _2383;
                float _2661 = _2385;
                uint _2662 = _2392;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2672)
                    {
                        frontier_phi_77_pred = _2661;
                        frontier_phi_77_pred_1 = _2660;
                        frontier_phi_77_pred_2 = _2659;
                        frontier_phi_77_pred_3 = _2658;
                        frontier_phi_77_pred_4 = _2657;
                        frontier_phi_77_pred_5 = _2656;
                    }
                    else
                    {
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        uint _2884 = _2671;
                        uint _2885;
                        vec4 _2910;
                        float _2911;
                        vec4 _2926;
                        vec3 _2938;
                        vec4 _2954;
                        vec4 _2970;
                        float _3017;
                        bool _3018;
                        for (;;)
                        {
                            uint _2895 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2884));
                            _2885 = (_2884 + 4294967295u) & _2884;
                            uint _2897 = _2895 * 40u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2911 = _2910.w;
                            uint _2913 = (_2895 * 40u) + 4u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2928 = (_2895 * 40u) + 8u;
                            _2938 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x));
                            uint _2941 = (_2895 * 40u) + 16u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2895 * 40u) + 20u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2895 * 40u) + 24u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2992 = (_2895 * 40u) + 28u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3017 = fma(_2230, _3005.z, fma(_2229, _3005.y, _3005.x * _2228)) + _3005.w;
                            _3018 = !((fma(_2230, _2986.z, fma(_2229, _2986.y, _2986.x * _2228)) + _2986.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3018)
                            {
                                float _3045 = _2910.x - _2228;
                                float _3046 = _2910.y - _2229;
                                float _3047 = _2910.z - _2230;
                                float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                                float _3051 = inversesqrt(_3048);
                                float _3052 = _3051 * _3045;
                                float _3053 = _3051 * _3046;
                                float _3054 = _3051 * _3047;
                                float _3058 = 1.0 - (_3048 / (_2911 * _2911));
                                float _4152 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3063 = sqrt(_3048) * _2926.w;
                                float _3065 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                                float _3066 = _3065 * _3065;
                                float _3069 = ((1.0 - _3066) * dot(vec3(_3052, _3053, _3054), vec3(_431, _434, _437))) + _3066;
                                float _3072 = _3063 * _3063;
                                float _3076 = (fma(_2230, _2954.z, fma(_2229, _2954.y, _2954.x * _2228)) + _2954.w) / _3017;
                                float _3077 = (fma(_2230, _2970.z, fma(_2229, _2970.y, _2970.x * _2228)) + _2970.w) / _3017;
                                float _3081 = 1.0 - dot(vec2(_3076, _3077), vec2(_3076, _3077));
                                float _4168 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3083 = _3082 * (((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3059) / ((_3072 * 0.699999988079071044921875) + 1.0));
                                float _3095 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                                float _3096 = 1.0 - _508;
                                float _3103 = sqrt(1.0 - ((1.0 - (_3096 * _3096)) * (1.0 - (_3095 * _3095))));
                                float _3104 = _3103 * _3103;
                                float _3105 = _3104 * _3104;
                                float _3106 = _3052 - _2522;
                                float _3107 = _3053 - _2523;
                                float _3108 = _3054 - _2524;
                                float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                                float _3116 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2522, (-0.0) - _2523, (-0.0) - _2524));
                                float _4179 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3119 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3120 = dot(vec3(_431, _434, _437), vec3(_3112 * _3106, _3112 * _3107, _3112 * _3108));
                                float _4190 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3127 = ((_3123 * _3123) * (_3105 + (-1.0))) + 1.0;
                                float _3128 = _3065 * _3104;
                                float _3129 = _3128 * _3128;
                                float _3135 = ((1.0 - _3129) * dot(vec3(_431, _434, _437), vec3(_3052, _3053, _3054))) + _3129;
                                float _4201 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3137 = 1.0 - _3104;
                                float _3147 = (0.5 / (((_3136 * ((_3119 * _3137) + _3104)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3104) * _3119))) * _3136;
                                float _4212 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3157 = (_3082 * _3059) * (((_3105 * 3.1415927410125732421875) * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) / ((_3127 * _3127) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3083 * _2926.y;
                                frontier_phi_83_pred_1 = _3083 * _2926.x;
                                frontier_phi_83_pred_2 = _3157 * _2938.z;
                                frontier_phi_83_pred_3 = _3157 * _2938.y;
                                frontier_phi_83_pred_4 = _3157 * _2938.x;
                                frontier_phi_83_pred_5 = _3083 * _2926.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3165 = frontier_phi_83_pred;
                            _3164 = frontier_phi_83_pred_1;
                            _3163 = frontier_phi_83_pred_2;
                            _3162 = frontier_phi_83_pred_3;
                            _3161 = frontier_phi_83_pred_4;
                            _3166 = frontier_phi_83_pred_5;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            if (_2885 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2885;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2870;
                        frontier_phi_77_pred_1 = _2869;
                        frontier_phi_77_pred_2 = _2868;
                        frontier_phi_77_pred_3 = _2867;
                        frontier_phi_77_pred_4 = _2866;
                        frontier_phi_77_pred_5 = _2865;
                    }
                    _2507 = frontier_phi_77_pred;
                    _2505 = frontier_phi_77_pred_1;
                    _2503 = frontier_phi_77_pred_2;
                    _2501 = frontier_phi_77_pred_3;
                    _2499 = frontier_phi_77_pred_4;
                    _2497 = frontier_phi_77_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2497;
                        _2657 = _2499;
                        _2658 = _2501;
                        _2659 = _2503;
                        _2660 = _2505;
                        _2661 = _2507;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2501;
                frontier_phi_58_59_ladder_1 = _2507;
                frontier_phi_58_59_ladder_2 = _2505;
                frontier_phi_58_59_ladder_3 = _2503;
                frontier_phi_58_59_ladder_4 = _2499;
                frontier_phi_58_59_ladder_5 = _2497;
            }
            else
            {
                frontier_phi_58_59_ladder = _2379;
                frontier_phi_58_59_ladder_1 = _2385;
                frontier_phi_58_59_ladder_2 = _2383;
                frontier_phi_58_59_ladder_3 = _2381;
                frontier_phi_58_59_ladder_4 = _2377;
                frontier_phi_58_59_ladder_5 = _2375;
            }
            _2496 = frontier_phi_58_59_ladder_5;
            _2498 = frontier_phi_58_59_ladder_4;
            _2500 = frontier_phi_58_59_ladder;
            _2502 = frontier_phi_58_59_ladder_3;
            _2504 = frontier_phi_58_59_ladder_2;
            _2506 = frontier_phi_58_59_ladder_1;
        }
        float _2511 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2287 = (_2511 * _2502) + _1720;
        _2289 = (_2511 * _2504) + _1722;
        _2291 = (_2511 * _2506) + _1724;
        _2293 = ((_2496 * _476) * _2511) + _2068;
        _2295 = ((_2498 * _478) * _2511) + _2070;
        _2297 = ((_2500 * _479) * _2511) + _2072;
    }
    else
    {
        _2287 = _1720;
        _2289 = _1722;
        _2291 = _1724;
        _2293 = _2068;
        _2295 = _2070;
        _2297 = _2072;
    }
    float _4228 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4239 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4250 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _2314 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2287 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _492))) + ((_2293 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2289 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _492))) + ((_2295 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    float _2316 = ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2291 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _492))) + ((_2297 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1333)) * cbPerFrame._m0[3u].x);
    uint _2317 = _450 + 6u;
    float _2325 = _410 / cbSceneParam._m0[86u].x;
    float _2326 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2342 = _2340.x;
    float _2343 = _2340.y;
    float _2344 = _2340.z;
    float _2345 = _2340.w;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2400 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2401 = _2400 / _330;
        float _2412 = _2401 * _382;
        float _2413 = _383 * _2401;
        float _2414 = (-0.0) - _2413;
        float _2416 = _2401 * _384;
        float _2418 = (cbSceneParam._m0[77u].w * _2414) / _2400;
        float _2419 = _2418 + cbSceneParam._m0[79u].w;
        float _2420 = cbSceneParam._m0[79u].w - _2413;
        float _2426 = sqrt(((_2412 * _2412) + (_2413 * _2413)) + (_2416 * _2416));
        float _2429 = (1.0 - (cbSceneParam._m0[77u].w / _2400)) * _2426;
        float _2434 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2436 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2414 - _2418) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2419 > 0.0) ? exp2(_2434 * _2419) : (2.0 - exp2(_2436 * _2419))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2429;
        }
        else
        {
            float _2557 = 1.0 / cbSceneParam._m0[80u].x;
            float _2558 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : max(_2419, _2420));
            float _2559 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : min(_2419, _2420));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            _2613 = ((abs(_2426 / _2414) * cbSceneParam._m0[80u].y) * ((((_2568 - _2569) * 2.0) - ((exp2(_2434 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)))) - exp2(_2434 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))))) * _2557)) - ((exp2(_2436 * _2568) - exp2(_2436 * _2569)) * _2557))) + (_2429 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2325, _2326, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2345);
        _2438 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2342;
        _2440 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2343;
        _2442 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2344;
        _2444 = _2624 * _2345;
    }
    else
    {
        _2438 = _2342;
        _2440 = _2343;
        _2442 = _2344;
        _2444 = _2345;
    }
    bool _2651;
    vec4 _2454;
    vec4 _2476;
    float _2478;
    float _2482;
    float _2483;
    float _2484;
    float _2485;
    bool _2495;
    for (;;)
    {
        _2454 = cbMatDynParam._m0[0u];
        float _2456 = roundEven(_2454.y);
        bool _2457 = _2456 == 3.0;
        float _2458 = log2(_2444);
        float _2465 = exp2(_2458 * cbSceneParam._m0[78u].x) * _2314;
        float _2466 = exp2(_2458 * cbSceneParam._m0[78u].y) * _2315;
        float _2467 = exp2(_2458 * cbSceneParam._m0[78u].z) * _2316;
        float _2474 = _398 + (-0.5);
        _2476 = cbMtdParam._m0[1u];
        _2478 = _2476.y * _2474;
        float _2481 = (_2456 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2482 = _2481 * (_2457 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2438)));
        _2483 = _2481 * (_2457 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2440)));
        _2484 = _2481 * (_2457 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2442)));
        _2485 = _2474 * 0.999000012874603271484375;
        _2495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2495)
        {
            if ((cbInstanceData._m0[_450 + 7u].x + _2485) < 0.5)
            {
                _2651 = true;
                break;
            }
        }
        uint _2592 = _452 + uint(_2454.w);
        if ((cbInstanceData._m0[_2592].w < 1.0) && ((cbInstanceData._m0[_2592].w + _2485) < 0.5))
        {
            _2651 = true;
            break;
        }
        if ((_2478 + 1.0) < _2476.x)
        {
            _2651 = true;
            break;
        }
        _2651 = false;
        break;
    }
    float _2856;
    if (_2651)
    {
        discard_state = true;
        _2856 = 0.0;
    }
    else
    {
        _2856 = cbInstanceData._m0[_2317].w;
    }
    SV_Target.x = _2482;
    SV_Target.y = _2483;
    SV_Target.z = _2484;
    SV_Target.w = _2856;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2317].w;
    discard_exit();
}


