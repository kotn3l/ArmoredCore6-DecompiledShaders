#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1385;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3733 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _396) + _492;
    float _504 = ((((_471.x - _490) * _396) + _490) * 2.0) + (-1.0);
    float _505 = ((((_471.y - _491) * _396) + _491) * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3744 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _514 = _504 + ((((_444.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _515 = _505 + ((((_444.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _518 = fma(_511, _247, fma(_515, _254, _514 * _240));
    float _521 = fma(_511, _248, fma(_515, _255, _514 * _241));
    float _524 = fma(_511, _249, fma(_515, _256, _514 * _242));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _577 = ((_572 - _573) * cbMtdParam._m0[24u].z) + _573;
    float _579 = (cbMtdParam._m0[19u].x + dot(vec4(_528 * _518, _528 * _521, _528 * _524, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_577 * cbMtdParam._m0[21u].z);
    float _3755 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _582 = (-0.0) - cbMtdParam._m0[24u].x;
    float _584 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
    float _592 = _580 - ((_580 * TEXCOORD_8.x) * _585);
    float _593 = _580 - ((_580 * TEXCOORD_8.y) * _585);
    float _594 = _580 - ((_580 * TEXCOORD_8.z) * _585);
    float _601 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _605 = ((isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : min(_601, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _613 = (_605 - (((_577 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _605))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3786 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _618 = ((_592 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) * _614) + _403;
    float _619 = ((_593 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) * _614) + _404;
    float _620 = ((_594 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) * _614) + _405;
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _662 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_634 - _635) * cbMtdParam._m0[24u].w) + _635) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3797 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _671 = ((((cbMtdParam._m0[10u].x - _618) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _663) + _618;
    float _672 = ((((cbMtdParam._m0[10u].y - _619) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _663) + _619;
    float _673 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _620)) * _663) + _620;
    vec4 _699 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _701 = _699.x;
    float _719 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _701) * _396) + _701;
    float _723 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _719) * cbMtdParam._m0[19u].z) + _719;
    float _726 = _723 - ((_614 * _592) * _723);
    float _728 = _726 - (_726 * _663);
    float _733 = (((_444.z - _501) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _501;
    vec4 _747 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _754 = (_747.x * 2.0) + (-1.0);
    float _755 = (_747.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3808 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _765 = (((_747.z - _733) * _592) * _614) + _733;
    float _768 = ((cbMtdParam._m0[23u].y - _765) * _663) + _765;
    vec4 _787 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _793 = (_787.x * 2.0) + (-1.0);
    float _794 = (_787.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _3819 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _815 = (((cbMtdParam._m0[21u].x * _514) + ((_754 - _514) * _592)) * _614) + _514;
    float _816 = (((cbMtdParam._m0[21u].x * _515) + ((_755 - _515) * _593)) * _614) + _515;
    float _817 = (((sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) - _511) * _594) * _614) + _511;
    float _828 = (((_793 - _815) + (_815 * cbMtdParam._m0[22u].z)) * _663) + _815;
    float _829 = (((_794 - _816) + (_816 * cbMtdParam._m0[22u].z)) * _663) + _816;
    float _830 = ((sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) - _817) * _663) + _817;
    float _832 = cbMtdParam._m0[22u].x + _544.w;
    float _835 = fma(_830, _247, fma(_829, _254, _828 * _240));
    float _838 = fma(_830, _248, fma(_829, _255, _828 * _241));
    float _841 = fma(_830, _249, fma(_829, _256, _828 * _242));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _3830 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _849 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _3852 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3863 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3874 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3885 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _854 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _868 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _908);
    float _919 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _952 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _955 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _958 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _972 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_972].z;
    float _3896 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _984 = 1.0 - _854;
    float _985 = _981 * _984;
    float _986 = _982 * _984;
    float _987 = _983 * _984;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _854;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _854;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _854;
    float _995 = _992 + 0.039999999105930328369140625;
    float _997 = _993 + 0.039999999105930328369140625;
    float _998 = _994 + 0.039999999105930328369140625;
    vec4 _1007 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _1011 = ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * TEXCOORD_5.w) * _1007.x;
    float _1012 = dot(vec3(_846, _847, _848), vec3(_925, _926, _927));
    float _1015 = _1012 * 2.0;
    float _1019 = (_1015 * _846) - _925;
    float _1020 = (_1015 * _847) - _926;
    float _1021 = (_1015 * _848) - _927;
    float _1025 = abs(dot(vec3(_925, _926, _927), vec3(_846, _847, _848)));
    float _3929 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1027 = sqrt(_849);
    float _1040 = exp2((_1027 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1027 * 3.0));
    float _1046 = (1.0 - _1040) * ((_1027 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1047 = _1040 * _1027;
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1384;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1109 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1113 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1117 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1142 = _1075 + _846;
        float _1143 = _1079 + _847;
        float _1144 = _1083 + _848;
        float _1154 = fma(_1144, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142)) - _1109;
        float _1155 = fma(_1144, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142)) - _1113;
        float _1156 = fma(_1144, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142)) - _1117;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1109 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1113 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[34u].z) + ((((((_1117 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1212 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1178.x + (-0.5));
        float _1214 = _1212 * (_1178.y + (-0.5));
        float _1215 = _1212 * (_1178.z + (-0.5));
        float _1222 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1185.x + (-0.5));
        float _1224 = _1222 * (_1185.y + (-0.5));
        float _1225 = _1222 * (_1185.z + (-0.5));
        float _1232 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1192.x + (-0.5));
        float _1234 = _1232 * (_1192.y + (-0.5));
        float _1235 = _1232 * (_1192.z + (-0.5));
        float _1242 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1199.x + (-0.5));
        float _1244 = _1242 * (_1199.y + (-0.5));
        float _1245 = _1242 * (_1199.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1266 = (dot(vec3(_846, _847, _848), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1276 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3977 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1278 + 1.0))) + _1283) * _1246;
        float _1293 = _1214 * 0.5;
        float _1294 = _1224 * 0.5;
        float _1295 = _1234 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_846, _847, _848), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4010 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1320 + 1.0))) + _1325) * _1247;
        float _1335 = _1215 * 0.5;
        float _1336 = _1225 * 0.5;
        float _1337 = _1235 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_846, _847, _848), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4043 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1362 + 1.0))) + _1367) * _1248;
        _1384 = _1215;
        _1386 = _1214;
        _1387 = _1213;
        _1388 = _1225;
        _1389 = _1224;
        _1390 = _1223;
        _1391 = _1235;
        _1392 = _1234;
        _1393 = _1233;
        _1394 = _1248;
        _1395 = _1247;
        _1396 = _1246;
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1385;
        _1386 = _1385;
        _1387 = _1385;
        _1388 = _1385;
        _1389 = _1385;
        _1390 = _1385;
        _1391 = _1385;
        _1392 = _1385;
        _1393 = _1385;
        _1394 = _1385;
        _1395 = _1385;
        _1396 = _1385;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1424 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1428 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1432 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1455 = _1075 + _846;
        float _1456 = _1079 + _847;
        float _1457 = _1083 + _848;
        float _1467 = fma(_1457, cbModelParam._m0[30u].z, fma(_1456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1455)) - _1424;
        float _1468 = fma(_1457, cbModelParam._m0[31u].z, fma(_1456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1455)) - _1428;
        float _1469 = fma(_1457, cbModelParam._m0[32u].z, fma(_1456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1455)) - _1432;
        float _1473 = inversesqrt(dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469)));
        float _1486 = ((_1473 * _1467) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1424 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1473 * _1468) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1428 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1473 * _1469) / cbModelParam._m0[35u].z) + ((((((_1432 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        float _1523 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1490.x + (-0.5));
        float _1525 = _1523 * (_1490.y + (-0.5));
        float _1526 = _1523 * (_1490.z + (-0.5));
        float _1533 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1497.x + (-0.5));
        float _1535 = _1533 * (_1497.y + (-0.5));
        float _1536 = _1533 * (_1497.z + (-0.5));
        float _1543 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1504.x + (-0.5));
        float _1545 = _1543 * (_1504.y + (-0.5));
        float _1546 = _1543 * (_1504.z + (-0.5));
        float _1553 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1511.x + (-0.5));
        float _1555 = _1553 * (_1511.y + (-0.5));
        float _1556 = _1553 * (_1511.z + (-0.5));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = _1524 * 0.5;
        float _1561 = _1534 * 0.5;
        float _1562 = _1544 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_846, _847, _848), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4106 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1587 + 1.0))) + _1592) * _1557;
        float _1602 = _1525 * 0.5;
        float _1603 = _1535 * 0.5;
        float _1604 = _1545 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_846, _847, _848), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4139 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1629 + 1.0))) + _1634) * _1558;
        float _1644 = _1526 * 0.5;
        float _1645 = _1536 * 0.5;
        float _1646 = _1546 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_846, _847, _848), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4172 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1671 + 1.0))) + _1676) * _1559;
        _1693 = _1526;
        _1694 = _1525;
        _1695 = _1524;
        _1696 = _1536;
        _1697 = _1535;
        _1698 = _1534;
        _1699 = _1546;
        _1700 = _1545;
        _1701 = _1544;
        _1702 = _1559;
        _1703 = _1558;
        _1704 = _1557;
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
    }
    else
    {
        _1693 = _1385;
        _1694 = _1385;
        _1695 = _1385;
        _1696 = _1385;
        _1697 = _1385;
        _1698 = _1385;
        _1699 = _1385;
        _1700 = _1385;
        _1701 = _1385;
        _1702 = _1385;
        _1703 = _1385;
        _1704 = _1385;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1397)) + _1397;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1398)) + _1398;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1399)) + _1399;
    float _1740 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1717));
    float _1761 = _1019 * 0.5;
    float _1762 = _1020 * 0.5;
    float _1763 = _1021 * 0.5;
    float _1764 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1767 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1770 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1804;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1777 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1384, _1388, _1391, _1394));
        float _1781 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1785 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1792 = dot(vec4(cbModelParam._m0[39u]), vec4(_1761, _1762, _1763, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1815;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1806 = dot(vec4(cbModelParam._m0[40u]), vec4(_1761, _1762, _1763, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1819 = (_1815 * cbModelParam._m0[1u].x) + (_1804 * (1.0 - cbModelParam._m0[1u].x));
    float _1829 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1829 : min(cbModelParam._m0[25u].z, _1829));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_1021, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019));
        float _1891 = fma(_1021, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019));
        float _1894 = fma(_1021, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1922 = frontier_phi_14_12_ladder;
        }
        float _2145;
        if (_1891 > 0.0)
        {
            _2145 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2145 = frontier_phi_23_19_ladder;
        }
        float _2402;
        if (_1894 > 0.0)
        {
            _2402 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2402 = frontier_phi_35_30_ladder;
        }
        float _2404 = isnan(_2145) ? _1922 : (isnan(_1922) ? _2145 : min(_1922, _2145));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1888) + _1877;
        float _2410 = (_2405 * _1891) + _1881;
        float _2411 = (_2405 * _1894) + _1885;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2412;
        float _2416 = _2412 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 > _2416) || ((_2410 < _2414) || ((_2409 < _2414) || (_2409 > _2416))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2411, cbModelParam._m0[9u].z, fma(_2410, cbModelParam._m0[9u].y, _2409 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2411, cbModelParam._m0[10u].z, fma(_2410, cbModelParam._m0[10u].y, _2409 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2411, cbModelParam._m0[11u].z, fma(_2410, cbModelParam._m0[11u].y, _2409 * cbModelParam._m0[11u].x))), _1830);
            frontier_phi_13_35_ladder = _2539.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2539.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2539.x * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_13_35_ladder_2;
        _1912 = frontier_phi_13_35_ladder_1;
        _1914 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1019, _1020, _1021), _1830);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_1021, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019));
        float _1986 = fma(_1021, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019));
        float _1989 = fma(_1021, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019));
        float _2150;
        if (_1983 > 0.0)
        {
            _2150 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2150 = frontier_phi_25_21_ladder;
        }
        float _2429;
        if (_1986 > 0.0)
        {
            _2429 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2429 = frontier_phi_37_32_ladder;
        }
        float _2642;
        if (_1989 > 0.0)
        {
            _2642 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2642 = frontier_phi_46_43_ladder;
        }
        float _2644 = isnan(_2429) ? _2150 : (isnan(_2150) ? _2429 : min(_2150, _2429));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _1983) + _1972;
        float _2650 = (_2645 * _1986) + _1976;
        float _2651 = (_2645 * _1989) + _1980;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2652;
        float _2655 = _2652 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2651 > _2655) || ((_2651 < _2653) || ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 < _2653) || (_2649 > _2655))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2651, cbModelParam._m0[17u].z, fma(_2650, cbModelParam._m0[17u].y, _2649 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2651, cbModelParam._m0[18u].z, fma(_2650, cbModelParam._m0[18u].y, _2649 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2651, cbModelParam._m0[19u].z, fma(_2650, cbModelParam._m0[19u].y, _2649 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_22_46_ladder = _2850.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2850.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2850.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_22_46_ladder_2;
        _2010 = frontier_phi_22_46_ladder_1;
        _2012 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1019, _1020, _1021), _1919);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2025 = (((_1046 * _995) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2008 - _1910)) + _1910);
    float _2027 = (((_1046 * _997) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2029 = (((_1046 * _998) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2032 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2027, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2027, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2027, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    vec4 _2046 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_933, _934));
    float _2048 = _2046.w;
    float _2060 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2048);
    float _2061 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2048);
    float _2062 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2048);
    uvec4 _2066 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2068 = _2066.x * 14u;
    uint _2069 = _2068 + 13u;
    float _2076 = _1011 + (-1.0);
    float _2081 = (cbLight._m0[_2069].x * _2076) + 1.0;
    float _2082 = (cbLight._m0[_2069].y * _2076) + 1.0;
    float _2083 = (cbLight._m0[_2069].z * _2076) + 1.0;
    float _2084 = (cbLight._m0[_2069].w * _2076) + 1.0;
    uint _2085 = _2068 + 5u;
    float _2091 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2095 = _2068 + 4u;
    float _2104 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2108 = _2068 | 1u;
    float _2119 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_846, _847, _848));
    float _2122 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_846, _847, _848));
    float _4308 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _4319 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2127 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2129 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2136 = ((cbLight._m0[_2085].x * _2091) * _2129) + (((cbLight._m0[_2095].x * _2060) * _2104) * _2127);
    float _2137 = ((_2091 * cbLight._m0[_2085].y) * _2129) + (((cbLight._m0[_2095].y * _2061) * _2104) * _2127);
    float _2138 = ((_2091 * cbLight._m0[_2085].z) * _2129) + (((cbLight._m0[_2095].z * _2062) * _2104) * _2127);
    uvec4 _2142 = floatBitsToUint(cbLight._m0[_2068 + 12u]);
    bool _2144 = _2142.x == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2144)
    {
        _2155 = _2136;
        _2157 = _2137;
        _2159 = _2138;
    }
    else
    {
        uint _2163 = _2068 + 6u;
        float _2179 = (dot(vec3(cbLight._m0[_2068 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4330 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2182 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2155 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _2136;
        _2157 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _2137;
        _2159 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _2138;
    }
    bool _2162 = _2142.y == 0u;
    float _2200;
    float _2202;
    float _2204;
    if (_2162)
    {
        _2200 = _2155;
        _2202 = _2157;
        _2204 = _2159;
    }
    else
    {
        uint _2373 = _2068 + 7u;
        float _2389 = (dot(vec3(cbLight._m0[_2068 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2390 = _2389 * _2389;
        float _4346 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2391 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2392 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2200 = (((cbLight._m0[_2373].x * 0.3183098733425140380859375) * _2391) * _2392) + _2155;
        _2202 = (((cbLight._m0[_2373].y * 0.3183098733425140380859375) * _2391) * _2392) + _2157;
        _2204 = (((cbLight._m0[_2373].z * 0.3183098733425140380859375) * _2391) * _2392) + _2159;
    }
    uint _2207 = _2068 + 8u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _849) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2068].x + _925;
    float _2223 = cbLight._m0[_2068].y + _926;
    float _2224 = cbLight._m0[_2068].z + _927;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2068].xyz));
    float _4362 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2236 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2237 = dot(vec3(_846, _847, _848), vec3(_2229, _2230, _2231));
    float _4384 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2229, _2230, _2231));
    float _4395 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2221 * _2221;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2257 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
    float _2258 = 0.959999978542327880859375 - _992;
    float _2260 = 0.959999978542327880859375 - _993;
    float _2261 = 0.959999978542327880859375 - _994;
    float _2268 = 1.0 - _2221;
    float _2279 = (0.5 / (((_2236 * ((_2235 * _2268) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2268) + _2221) * _2235))) * _2235;
    float _4406 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2281 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    uint _2295 = _2068 + 9u;
    float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _849) * 0.949999988079071044921875);
    float _2307 = _2306 * _2306;
    float _2308 = cbLight._m0[_2108].x + _925;
    float _2309 = cbLight._m0[_2108].y + _926;
    float _2310 = cbLight._m0[_2108].z + _927;
    float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
    float _2315 = _2314 * _2308;
    float _2316 = _2314 * _2309;
    float _2317 = _2314 * _2310;
    float _2318 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2108].xyz));
    float _4417 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2322 = dot(vec3(_846, _847, _848), vec3(_2315, _2316, _2317));
    float _4428 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2315, _2316, _2317));
    float _4439 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2307 * _2307;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2348 = 1.0 - _2307;
    float _2358 = (0.5 / (((_2236 * ((_2321 * _2348) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2348) + _2307) * _2321))) * _2321;
    float _4450 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    float _2370 = (((((_2341 * _2258) + _995) * cbLight._m0[_2295].x) * _2360) * _2091) + ((((cbLight._m0[_2207].x * _2060) * ((_2257 * _2258) + _995)) * _2281) * _2104);
    float _2371 = (((((_2341 * _2260) + _997) * cbLight._m0[_2295].y) * _2360) * _2091) + ((((cbLight._m0[_2207].y * _2061) * ((_2257 * _2260) + _997)) * _2281) * _2104);
    float _2372 = (((((_2341 * _2261) + _998) * cbLight._m0[_2295].z) * _2360) * _2091) + ((((cbLight._m0[_2207].z * _2062) * ((_2257 * _2261) + _998)) * _2281) * _2104);
    float _2434;
    float _2436;
    float _2438;
    if (_2144)
    {
        _2434 = _2370;
        _2436 = _2371;
        _2438 = _2372;
    }
    else
    {
        uint _2440 = _2068 + 2u;
        uint _2444 = _2068 + 10u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _849) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _925;
        float _2461 = cbLight._m0[_2440].y + _926;
        float _2462 = cbLight._m0[_2440].z + _927;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2440].xyz));
        float _4461 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2474 = dot(vec3(_846, _847, _848), vec3(_2467, _2468, _2469));
        float _4472 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4483 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2493 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
        float _2500 = 1.0 - _2459;
        float _2510 = (0.5 / (((_2236 * ((_2473 * _2500) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2500) + _2459) * _2473))) * _2473;
        float _4494 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2512 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2513 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2434 = (((((_2493 * _2258) + _995) * cbLight._m0[_2444].x) * _2512) * _2513) + _2370;
        _2436 = (((((_2493 * _2260) + _997) * cbLight._m0[_2444].y) * _2512) * _2513) + _2371;
        _2438 = (((((_2493 * _2261) + _998) * cbLight._m0[_2444].z) * _2512) * _2513) + _2372;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2162)
    {
        _2548 = _2434;
        _2550 = _2436;
        _2552 = _2438;
    }
    else
    {
        uint _2559 = _2068 + 3u;
        uint _2563 = _2068 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _849) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _925;
        float _2580 = cbLight._m0[_2559].y + _926;
        float _2581 = cbLight._m0[_2559].z + _927;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2559].xyz));
        float _4510 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2593 = dot(vec3(_846, _847, _848), vec3(_2586, _2587, _2588));
        float _4521 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4532 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2236 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2619) + _2578) * _2592))) * _2592;
        float _4543 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2548 = (((((_2612 * _2258) + _995) * cbLight._m0[_2563].x) * _2631) * _2632) + _2434;
        _2550 = (((((_2612 * _2260) + _997) * cbLight._m0[_2563].y) * _2631) * _2632) + _2436;
        _2552 = (((((_2612 * _2261) + _998) * cbLight._m0[_2563].z) * _2631) * _2632) + _2438;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2066.y == 0u)
    {
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2707;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2707;
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2707;
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.x;
        uint _2734 = uint((float(_2722.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _2723))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _2723)));
        float _2744 = (log2(_2710 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2745 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        uint _2748 = uint(isnan(14.0) ? _2745 : (isnan(_2745) ? 14.0 : min(_2745, 14.0)));
        uvec4 _2753 = texelFetch(g_lightClusterGridBuffer, int(((_2748 << 2u) + (_2734 << 6u)) >> 2u));
        uint _2754 = _2753.x;
        uint _2755 = _2722.z;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((((1u << ((_2755 >> 4u) & 15u)) + 4294967295u) & _2754) == 0u) || ((_2755 & 240u) == 0u))
        {
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
        }
        else
        {
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3015)
                {
                    frontier_phi_61_pred = _2999;
                    frontier_phi_61_pred_1 = _3004;
                    frontier_phi_61_pred_2 = _3003;
                    frontier_phi_61_pred_3 = _3002;
                    frontier_phi_61_pred_4 = _3001;
                    frontier_phi_61_pred_5 = _3000;
                }
                else
                {
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    uint _3129;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3014;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    for (;;)
                    {
                        uint _3133 = uint(findLSB(_3129)) + (_3005 << 5u);
                        uint _3130 = (_3129 + 4294967295u) & _3129;
                        uint _3135 = _3133 * 48u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3155 = (_3133 * 48u) + 4u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3174 = (_3133 * 48u) + 8u;
                        vec3 _3185 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x));
                        float _3189 = _3149.x - _2708;
                        float _3190 = _3149.y - _2709;
                        float _3191 = _3149.z - _2710;
                        float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                        float _3195 = inversesqrt(_3192);
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3199 = dot(vec3(_952, _955, _958), vec3(_3196, _3197, _3198));
                        float _3204 = 1.0 - (_3192 * _3149.w);
                        float _4569 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3206 = sqrt(_3192) * _3168.w;
                        float _3209 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3199) + _3210;
                        float _3216 = _3206 * _3206;
                        float _3220 = ((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3205) / ((_3216 * 0.699999988079071044921875) + 1.0);
                        float _3224 = (-0.0) - _2708;
                        float _3225 = (-0.0) - _2709;
                        float _3226 = (-0.0) - _2710;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3241 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                        float _3242 = 1.0 - _1027;
                        float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                        float _3250 = _3249 * _3249;
                        float _3251 = _3250 * _3250;
                        float _3252 = _3231 + _3196;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3262 = dot(vec3(_952, _955, _958), vec3(_3231, _3232, _3233));
                        float _4585 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3265 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3266 = dot(vec3(_952, _955, _958), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                        float _4596 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                        float _3274 = _3209 * _3250;
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3199) + _3275;
                        float _4607 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3280 = 1.0 - _3250;
                        float _3290 = (0.5 / (((_3279 * ((_3265 * _3280) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3250) * _3265))) * _3279;
                        float _4618 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3301 = (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3273 * _3273) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125))) * _3205;
                        _3058 = (_3220 * _3168.x) + _3126;
                        _3059 = (_3220 * _3168.y) + _3127;
                        _3060 = (_3220 * _3168.z) + _3128;
                        _3055 = (_3301 * _3185.x) + _3123;
                        _3056 = (_3301 * _3185.y) + _3124;
                        _3057 = (_3301 * _3185.z) + _3125;
                        if (_3130 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3130;
                        }
                    }
                    frontier_phi_61_pred = _3055;
                    frontier_phi_61_pred_1 = _3060;
                    frontier_phi_61_pred_2 = _3059;
                    frontier_phi_61_pred_3 = _3058;
                    frontier_phi_61_pred_4 = _3057;
                    frontier_phi_61_pred_5 = _3056;
                }
                _2856 = frontier_phi_61_pred;
                _2866 = frontier_phi_61_pred_1;
                _2864 = frontier_phi_61_pred_2;
                _2862 = frontier_phi_61_pred_3;
                _2860 = frontier_phi_61_pred_4;
                _2858 = frontier_phi_61_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2856;
                    _3000 = _2858;
                    _3001 = _2860;
                    _3002 = _2862;
                    _3003 = _2864;
                    _3004 = _2866;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
        }
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.z;
        uint _2872 = (_2870 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2872) & _2754) == 0u)
        {
            _2967 = _2855;
            _2969 = _2857;
            _2971 = _2859;
            _2973 = _2861;
            _2975 = _2863;
            _2977 = _2865;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
            float _2993 = _2992 * _2708;
            float _2994 = _2992 * _2709;
            float _2995 = _2992 * _2710;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2872 < ((_2870 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3106 = _2855;
                float _3107 = _2857;
                float _3108 = _2859;
                float _3109 = _2861;
                float _3110 = _2863;
                float _3111 = _2865;
                uint _3112 = _2872;
                uint _3121;
                bool _3122;
                for (;;)
                {
                    _3121 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                    _3122 = _3121 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3122)
                    {
                        frontier_phi_67_pred = _3109;
                        frontier_phi_67_pred_1 = _3110;
                        frontier_phi_67_pred_2 = _3111;
                        frontier_phi_67_pred_3 = _3108;
                        frontier_phi_67_pred_4 = _3107;
                        frontier_phi_67_pred_5 = _3106;
                    }
                    else
                    {
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3319 = _3106;
                        float _3320 = _3107;
                        float _3321 = _3108;
                        float _3322 = _3109;
                        float _3323 = _3110;
                        float _3324 = _3111;
                        uint _3325 = _3121;
                        uint _3326;
                        vec4 _3351;
                        float _3352;
                        vec4 _3367;
                        vec3 _3379;
                        vec4 _3394;
                        vec4 _3409;
                        float _3455;
                        bool _3456;
                        for (;;)
                        {
                            uint _3336 = ((_3112 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3325));
                            _3326 = (_3325 + 4294967295u) & _3325;
                            uint _3338 = _3336 * 40u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3352 = _3351.w;
                            uint _3354 = (_3336 * 40u) + 4u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3336 * 40u) + 8u;
                            _3379 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x));
                            uint _3381 = (_3336 * 40u) + 16u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3336 * 40u) + 20u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3336 * 40u) + 24u;
                            vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3430 = (_3336 * 40u) + 28u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3455 = fma(_2710, _3443.z, fma(_2709, _3443.y, _3443.x * _2708)) + _3443.w;
                            _3456 = !((fma(_2710, _3424.z, fma(_2709, _3424.y, _3424.x * _2708)) + _3424.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3456)
                            {
                                float _3483 = _3351.x - _2708;
                                float _3484 = _3351.y - _2709;
                                float _3485 = _3351.z - _2710;
                                float _3486 = dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485));
                                float _3489 = inversesqrt(_3486);
                                float _3490 = _3489 * _3483;
                                float _3491 = _3489 * _3484;
                                float _3492 = _3489 * _3485;
                                float _3496 = 1.0 - (_3486 / (_3352 * _3352));
                                float _4629 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3501 = sqrt(_3486) * _3367.w;
                                float _3503 = 1.39999997615814208984375 / (_3501 + 1.39999997615814208984375);
                                float _3504 = _3503 * _3503;
                                float _3507 = ((1.0 - _3504) * dot(vec3(_3490, _3491, _3492), vec3(_952, _955, _958))) + _3504;
                                float _3510 = _3501 * _3501;
                                float _3514 = (fma(_2710, _3394.z, fma(_2709, _3394.y, _3394.x * _2708)) + _3394.w) / _3455;
                                float _3515 = (fma(_2710, _3409.z, fma(_2709, _3409.y, _3409.x * _2708)) + _3409.w) / _3455;
                                float _3519 = 1.0 - dot(vec2(_3514, _3515), vec2(_3514, _3515));
                                float _4645 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3521 = _3520 * (((isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0))) * _3497) / ((_3510 * 0.699999988079071044921875) + 1.0));
                                float _3533 = exp2(log2(1.0 / ((_3510 * 3.5) + 5.0)) * 0.25);
                                float _3534 = 1.0 - _1027;
                                float _3541 = sqrt(1.0 - ((1.0 - (_3534 * _3534)) * (1.0 - (_3533 * _3533))));
                                float _3542 = _3541 * _3541;
                                float _3543 = _3542 * _3542;
                                float _3544 = _3490 - _2993;
                                float _3545 = _3491 - _2994;
                                float _3546 = _3492 - _2995;
                                float _3550 = inversesqrt(dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546)));
                                float _3554 = dot(vec3(_952, _955, _958), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4656 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3558 = dot(vec3(_952, _955, _958), vec3(_3550 * _3544, _3550 * _3545, _3550 * _3546));
                                float _4667 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3561 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3565 = ((_3561 * _3561) * (_3543 + (-1.0))) + 1.0;
                                float _3566 = _3503 * _3542;
                                float _3567 = _3566 * _3566;
                                float _3573 = ((1.0 - _3567) * dot(vec3(_952, _955, _958), vec3(_3490, _3491, _3492))) + _3567;
                                float _4678 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3575 = 1.0 - _3542;
                                float _3585 = (0.5 / (((_3574 * ((_3557 * _3575) + _3542)) + 9.9999999392252902907785028219223e-09) + (((_3574 * _3575) + _3542) * _3557))) * _3574;
                                float _4689 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3595 = (_3520 * _3497) * (((_3543 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3565 * _3565) * ((_3510 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3595 * _3379.x;
                                frontier_phi_73_pred_1 = _3595 * _3379.y;
                                frontier_phi_73_pred_2 = _3521 * _3367.z;
                                frontier_phi_73_pred_3 = _3521 * _3367.y;
                                frontier_phi_73_pred_4 = _3521 * _3367.x;
                                frontier_phi_73_pred_5 = _3595 * _3379.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3599 = frontier_phi_73_pred;
                            _3600 = frontier_phi_73_pred_1;
                            _3604 = frontier_phi_73_pred_2;
                            _3603 = frontier_phi_73_pred_3;
                            _3602 = frontier_phi_73_pred_4;
                            _3601 = frontier_phi_73_pred_5;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            _3308 = _3601 + _3321;
                            if (_3326 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3326;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3309;
                        frontier_phi_67_pred_1 = _3310;
                        frontier_phi_67_pred_2 = _3311;
                        frontier_phi_67_pred_3 = _3308;
                        frontier_phi_67_pred_4 = _3307;
                        frontier_phi_67_pred_5 = _3306;
                    }
                    _2974 = frontier_phi_67_pred;
                    _2976 = frontier_phi_67_pred_1;
                    _2978 = frontier_phi_67_pred_2;
                    _2972 = frontier_phi_67_pred_3;
                    _2970 = frontier_phi_67_pred_4;
                    _2968 = frontier_phi_67_pred_5;
                    uint _3113 = _3112 + 1u;
                    if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3106 = _2968;
                        _3107 = _2970;
                        _3108 = _2972;
                        _3109 = _2974;
                        _3110 = _2976;
                        _3111 = _2978;
                        _3112 = _3113;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2976;
                frontier_phi_55_56_ladder_1 = _2978;
                frontier_phi_55_56_ladder_2 = _2974;
                frontier_phi_55_56_ladder_3 = _2972;
                frontier_phi_55_56_ladder_4 = _2970;
                frontier_phi_55_56_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_55_56_ladder = _2863;
                frontier_phi_55_56_ladder_1 = _2865;
                frontier_phi_55_56_ladder_2 = _2861;
                frontier_phi_55_56_ladder_3 = _2859;
                frontier_phi_55_56_ladder_4 = _2857;
                frontier_phi_55_56_ladder_5 = _2855;
            }
            _2967 = frontier_phi_55_56_ladder_5;
            _2969 = frontier_phi_55_56_ladder_4;
            _2971 = frontier_phi_55_56_ladder_3;
            _2973 = frontier_phi_55_56_ladder_2;
            _2975 = frontier_phi_55_56_ladder;
            _2977 = frontier_phi_55_56_ladder_1;
        }
        float _2982 = isnan(1.0) ? _1011 : (isnan(_1011) ? 1.0 : min(_1011, 1.0));
        _2767 = (_2982 * _2973) + _2200;
        _2769 = (_2982 * _2975) + _2202;
        _2771 = (_2982 * _2977) + _2204;
        _2773 = ((_2967 * _995) * _2982) + _2548;
        _2775 = ((_2969 * _997) * _2982) + _2550;
        _2777 = ((_2971 * _998) * _2982) + _2552;
    }
    else
    {
        _2767 = _2200;
        _2769 = _2202;
        _2771 = _2204;
        _2773 = _2548;
        _2775 = _2550;
        _2777 = _2552;
    }
    float _4705 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4716 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4727 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    uint _2797 = _259 + 6u;
    float _2805 = _933 / cbSceneParam._m0[86u].x;
    float _2806 = _934 / cbSceneParam._m0[86u].y;
    vec4 _2820 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, (log2((isnan(cbSceneParam._m0[77u].w) ? _868 : (isnan(_868) ? cbSceneParam._m0[77u].w : min(_868, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2822 = _2820.x;
    float _2823 = _2820.y;
    float _2824 = _2820.z;
    float _2825 = _2820.w;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_868 > cbSceneParam._m0[78u].w)
    {
        float _2880 = isnan(_868) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _868 : min(cbSceneParam._m0[80u].w, _868));
        float _2881 = _2880 / _868;
        float _2892 = _2881 * _918;
        float _2893 = _919 * _2881;
        float _2894 = (-0.0) - _2893;
        float _2895 = _2881 * _920;
        float _2897 = (cbSceneParam._m0[77u].w * _2894) / _2880;
        float _2898 = _2897 + cbSceneParam._m0[79u].w;
        float _2899 = cbSceneParam._m0[79u].w - _2893;
        float _2905 = sqrt(((_2892 * _2892) + (_2893 * _2893)) + (_2895 * _2895));
        float _2908 = (1.0 - (cbSceneParam._m0[77u].w / _2880)) * _2905;
        float _2913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3068;
        if (abs((_2894 - _2897) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3068 = ((((_2898 > 0.0) ? exp2(_2913 * _2898) : (2.0 - exp2(_2915 * _2898))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2908;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : max(_2898, _2899));
            float _3030 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : min(_2898, _2899));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3068 = ((abs(_2905 / _2894) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2913 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2913 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2915 * _3039) - exp2(_2915 * _3040)) * _3028))) + (_2908 * cbSceneParam._m0[80u].z);
        }
        vec4 _3070 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, 1.0), 0.0);
        float _3079 = exp2((_3068 * (-1.44269502162933349609375)) * (1.0 - _3070.w));
        float _3080 = log2(_3079);
        float _3096 = log2(_2825);
        _2917 = (exp2(_3096 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].x)) * _3070.x) / cbSceneParam._m0[78u].x)) + _2822;
        _2919 = (exp2(_3096 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].y)) * _3070.y) / cbSceneParam._m0[78u].y)) + _2823;
        _2921 = (exp2(_3096 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].z)) * _3070.z) / cbSceneParam._m0[78u].z)) + _2824;
        _2923 = _3079 * _2825;
    }
    else
    {
        _2917 = _2822;
        _2919 = _2823;
        _2921 = _2824;
        _2923 = _2825;
    }
    float _2935 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2936 = _2935 == 3.0;
    float _2937 = log2(_2923);
    float _2944 = exp2(_2937 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2767 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1011))) + ((_2773 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _2945 = exp2(_2937 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2769 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1011))) + ((_2775 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _2946 = exp2(_2937 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2771 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1011))) + ((_2777 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _2955 = (_2935 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2955 * (_2936 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2917)));
    SV_Target.y = _2955 * (_2936 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.z = _2955 * (_2936 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.w = cbInstanceData._m0[_2797].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2797].w;
}


