#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1341;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].y) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3948 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _400 = (_393 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _401 = (_393 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _402 = (_393 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].y) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3959 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _564 = ((_536.x - _555) * _393) + _555;
    float _565 = ((_536.y - _556) * _393) + _556;
    float _566 = ((_536.z - _557) * _393) + _557;
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _591 = ((_578.z - _566) * _466) + _566;
    float _594 = ((((_578.x - _564) * _466) + _564) * 2.0) + (-1.0);
    float _595 = ((((_578.y - _565) * _466) + _565) * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _3970 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))));
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _648 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_634 - _635) * cbMtdParam._m0[24u].z) + _635) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3981 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _656 = (_649 * ((_494.x * cbMtdParam._m0[18u].x) - _473)) + _473;
    float _657 = (_649 * ((_494.y * cbMtdParam._m0[18u].y) - _474)) + _474;
    float _658 = (_649 * ((_494.z * cbMtdParam._m0[18u].z) - _475)) + _475;
    vec4 _670 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _686 = _684.x;
    float _704 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _686) * _393) + _686;
    float _721 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _704) * _466) + _704;
    float _725 = ((_670.x - _721) * cbMtdParam._m0[19u].z) + _721;
    float _727 = _725 - (_725 * _649);
    float _732 = (((_513.z - _591) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _591;
    vec4 _745 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _752 = (_745.x * 2.0) + (-1.0);
    float _753 = (_745.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3992 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _762 = (_649 * (_745.z - _732)) + _732;
    float _767 = _594 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_513.x * 2.0) + (-1.0)));
    float _768 = _595 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_513.y * 2.0) + (-1.0)));
    float _780 = (((_752 - _767) + (cbMtdParam._m0[21u].x * _767)) * _649) + _767;
    float _781 = (((_753 - _768) + (cbMtdParam._m0[21u].x * _768)) * _649) + _768;
    float _782 = (_649 * (sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) - _601)) + _601;
    float _787 = cbMtdParam._m0[22u].x + _614.w;
    float _790 = fma(_782, _241 * NORMAL.x, fma(_781, _248 * TANGENT.x, (_234 * _226) * _780));
    float _793 = fma(_782, _241 * NORMAL.y, fma(_781, _248 * TANGENT.y, (_234 * _227) * _780));
    float _796 = fma(_782, _241 * NORMAL.z, fma(_781, _248 * TANGENT.z, (_234 * _228) * _780));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _4003 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _804 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4025 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4036 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4047 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4058 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _809 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _911 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _914 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _928 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _934 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_928].x;
    float _935 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_928].y;
    float _936 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_928].z;
    float _4069 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _940 = 1.0 - _809;
    float _941 = _937 * _940;
    float _942 = _938 * _940;
    float _943 = _939 * _940;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _809;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _809;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _809;
    float _951 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _967 = ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * TEXCOORD_5.w) * _963.x;
    float _968 = dot(vec3(_801, _802, _803), vec3(_881, _882, _883));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _801) - _881;
    float _976 = (_971 * _802) - _882;
    float _977 = (_971 * _803) - _883;
    float _981 = abs(dot(vec3(_881, _882, _883), vec3(_801, _802, _803)));
    float _4102 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_804);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1002 = (1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1003 = _996 * _983;
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1065 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1069 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1073 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1098 = _1031 + _801;
        float _1099 = _1035 + _802;
        float _1100 = _1039 + _803;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1065;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1069;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1073;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1065 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1069 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1073 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_801, _802, _803), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4150 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_801, _802, _803), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4183 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_801, _802, _803), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4216 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1383 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1387 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1410 = _1031 + _801;
        float _1411 = _1035 + _802;
        float _1412 = _1039 + _803;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_801, _802, _803), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4279 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_801, _802, _803), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4312 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_801, _802, _803), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4345 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1341;
        _1649 = _1341;
        _1650 = _1341;
        _1651 = _1341;
        _1652 = _1341;
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = _1341;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1353)) + _1353;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1354)) + _1354;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1355)) + _1355;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _975 * 0.5;
    float _1717 = _976 * 0.5;
    float _1718 = _977 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1759;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1770;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1761 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1774 = (_1770 * cbModelParam._m0[1u].x) + (_1759 * (1.0 - cbModelParam._m0[1u].x));
    float _1784 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1784 : min(cbModelParam._m0[25u].z, _1784));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1832 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1836 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1840 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1843 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1846 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1849 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1877;
        if (_1843 > 0.0)
        {
            _1877 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1877 = frontier_phi_14_12_ladder;
        }
        float _2048;
        if (_1846 > 0.0)
        {
            _2048 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2048 = frontier_phi_23_19_ladder;
        }
        float _2343;
        if (_1849 > 0.0)
        {
            _2343 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2343 = frontier_phi_35_30_ladder;
        }
        float _2345 = isnan(_2048) ? _1877 : (isnan(_1877) ? _2048 : min(_1877, _2048));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1843) + _1832;
        float _2351 = (_2346 * _1846) + _1836;
        float _2352 = (_2346 * _1849) + _1840;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1785);
            frontier_phi_13_35_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1865 = frontier_phi_13_35_ladder_2;
        _1867 = frontier_phi_13_35_ladder_1;
        _1869 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1785);
        _1865 = _1853.x * cbModelParam._m0[1u].y;
        _1867 = _1853.y * cbModelParam._m0[1u].y;
        _1869 = _1853.z * cbModelParam._m0[1u].y;
    }
    float _1873 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1873 : min(cbModelParam._m0[25u].w, _1873));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1927 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1931 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1935 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1938 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1941 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1944 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2053;
        if (_1938 > 0.0)
        {
            _2053 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2053 = frontier_phi_25_21_ladder;
        }
        float _2370;
        if (_1941 > 0.0)
        {
            _2370 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2370 = frontier_phi_37_32_ladder;
        }
        float _2708;
        if (_1944 > 0.0)
        {
            _2708 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2708 = frontier_phi_47_44_ladder;
        }
        float _2710 = isnan(_2370) ? _2053 : (isnan(_2053) ? _2370 : min(_2053, _2370));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _1938) + _1927;
        float _2716 = (_2711 * _1941) + _1931;
        float _2717 = (_2711 * _1944) + _1935;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2719 = (-1.0) - _2718;
        float _2721 = _2718 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2717 > _2721) || ((_2717 < _2719) || ((_2716 > _2721) || ((_2716 < _2719) || ((_2715 < _2719) || (_2715 > _2721))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2717, cbModelParam._m0[17u].z, fma(_2716, cbModelParam._m0[17u].y, _2715 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2717, cbModelParam._m0[18u].z, fma(_2716, cbModelParam._m0[18u].y, _2715 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2717, cbModelParam._m0[19u].z, fma(_2716, cbModelParam._m0[19u].y, _2715 * cbModelParam._m0[19u].x))), _1874);
            frontier_phi_22_47_ladder = _2839.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2839.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2839.x * cbModelParam._m0[1u].z;
        }
        _1963 = frontier_phi_22_47_ladder_2;
        _1965 = frontier_phi_22_47_ladder_1;
        _1967 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1874);
        _1963 = _1947.x * cbModelParam._m0[1u].z;
        _1965 = _1947.y * cbModelParam._m0[1u].z;
        _1967 = _1947.z * cbModelParam._m0[1u].z;
    }
    float _1980 = (((_1002 * _951) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1963 - _1865)) + _1865);
    float _1982 = (((_1002 * _953) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1965 - _1867)) + _1867);
    float _1984 = (((_1002 * _954) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1967 - _1869)) + _1869);
    float _1987 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1980 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1980 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, _1980 * cbSceneParam._m0[91u].x));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2040 = _2027 / _2039;
    float _2041 = _2031 / _2039;
    float _2042 = _2035 / _2039;
    float _2189;
    float _2190;
    float _2191;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2069 = ((uint(_2042 > cbSceneParam._m0[59u].y) + uint(_2042 > cbSceneParam._m0[59u].x)) + uint(_2042 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2070 = _2069 + 43u;
        uint _2078 = _2069 + 44u;
        uint _2086 = _2069 + 45u;
        uint _2094 = _2069 + 46u;
        float _2105 = fma(_2039, cbSceneParam._m0[_2070].w, fma(_2035, cbSceneParam._m0[_2070].z, fma(_2031, cbSceneParam._m0[_2070].y, _2027 * cbSceneParam._m0[_2070].x)));
        float _2109 = fma(_2039, cbSceneParam._m0[_2078].w, fma(_2035, cbSceneParam._m0[_2078].z, fma(_2031, cbSceneParam._m0[_2078].y, _2027 * cbSceneParam._m0[_2078].x)));
        float _2117 = fma(_2039, cbSceneParam._m0[_2094].w, fma(_2035, cbSceneParam._m0[_2094].z, fma(_2031, cbSceneParam._m0[_2094].y, _2027 * cbSceneParam._m0[_2094].x)));
        float _2122 = cbSceneParam._m0[33u].z * _2117;
        float _2124 = cbSceneParam._m0[33u].w * _2117;
        float _2127 = fma(_2039, cbSceneParam._m0[_2086].w, fma(_2035, cbSceneParam._m0[_2086].z, fma(_2031, cbSceneParam._m0[_2086].y, _2027 * cbSceneParam._m0[_2086].x))) / _2117;
        float _2175 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
        float _4471 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2182 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2105) / _2117, (_2124 + _2109) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 + _2105) / _2117, (_2109 - _2122) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2122) / _2117, (_2109 - _2124) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2124) / _2117, (_2122 + _2109) / _2117), _2127), 0.0)).x), vec4(0.25)));
        _2189 = 1.0 - (_2182 * cbSceneParam._m0[34u].x);
        _2190 = 1.0 - (_2182 * cbSceneParam._m0[34u].y);
        _2191 = 1.0 - (_2182 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2189 = 1.0;
        _2190 = 1.0;
        _2191 = 1.0;
    }
    float _2255;
    float _2257;
    float _2259;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2243 = fma(_2039, cbSceneParam._m0[63u].w, fma(_2035, cbSceneParam._m0[63u].z, fma(_2031, cbSceneParam._m0[63u].y, _2027 * cbSceneParam._m0[63u].x)));
        float _2244 = fma(_2039, cbSceneParam._m0[60u].w, fma(_2035, cbSceneParam._m0[60u].z, fma(_2031, cbSceneParam._m0[60u].y, _2027 * cbSceneParam._m0[60u].x))) / _2243;
        float _2245 = fma(_2039, cbSceneParam._m0[61u].w, fma(_2035, cbSceneParam._m0[61u].z, fma(_2031, cbSceneParam._m0[61u].y, _2027 * cbSceneParam._m0[61u].x))) / _2243;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2244 >= cbSceneParam._m0[64u].x) && (_2245 >= cbSceneParam._m0[64u].y)) && (_2244 <= cbSceneParam._m0[64u].z)) && (_2245 <= cbSceneParam._m0[64u].w))
        {
            float _2383 = fma(_2039, cbSceneParam._m0[62u].w, fma(_2035, cbSceneParam._m0[62u].z, fma(_2031, cbSceneParam._m0[62u].y, _2027 * cbSceneParam._m0[62u].x))) / _2243;
            float _2387 = isnan(cbSceneParam._m0[41u].w) ? _2383 : (isnan(_2383) ? cbSceneParam._m0[41u].w : max(_2383, cbSceneParam._m0[41u].w));
            float _2430 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
            float _4487 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
            float _2437 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2244, cbSceneParam._m0[33u].w + _2245), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2244, _2245 - cbSceneParam._m0[33u].z), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].z, _2245 - cbSceneParam._m0[33u].w), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2245), _2387), 0.0)).x), vec4(0.25)));
            float _2441 = 1.0 - (_2437 * cbSceneParam._m0[34u].x);
            float _2442 = 1.0 - (_2437 * cbSceneParam._m0[34u].y);
            float _2443 = 1.0 - (_2437 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
            frontier_phi_34_33_ladder_1 = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
            frontier_phi_34_33_ladder_2 = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
        }
        else
        {
            frontier_phi_34_33_ladder = _2191;
            frontier_phi_34_33_ladder_1 = _2190;
            frontier_phi_34_33_ladder_2 = _2189;
        }
        _2255 = frontier_phi_34_33_ladder_2;
        _2257 = frontier_phi_34_33_ladder_1;
        _2259 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2255 = _2189;
        _2257 = _2190;
        _2259 = _2191;
    }
    uvec4 _2264 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2266 = _2264.x * 14u;
    uint _2267 = _2266 + 13u;
    float _2274 = _967 + (-1.0);
    float _2279 = (cbLight._m0[_2267].x * _2274) + 1.0;
    float _2280 = (cbLight._m0[_2267].y * _2274) + 1.0;
    float _2281 = (cbLight._m0[_2267].z * _2274) + 1.0;
    float _2282 = (cbLight._m0[_2267].w * _2274) + 1.0;
    uint _2283 = _2266 + 5u;
    float _2289 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2293 = _2266 + 4u;
    float _2302 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2306 = _2266 | 1u;
    float _2317 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_801, _802, _803));
    float _2320 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_801, _802, _803));
    float _4523 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _4534 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2325 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2327 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2334 = ((cbLight._m0[_2283].x * _2289) * _2327) + (((cbLight._m0[_2293].x * _2255) * _2302) * _2325);
    float _2335 = ((_2289 * cbLight._m0[_2283].y) * _2327) + (((cbLight._m0[_2293].y * _2257) * _2302) * _2325);
    float _2336 = ((_2289 * cbLight._m0[_2283].z) * _2327) + (((cbLight._m0[_2293].z * _2259) * _2302) * _2325);
    uvec4 _2340 = floatBitsToUint(cbLight._m0[_2266 + 12u]);
    bool _2342 = _2340.x == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2342)
    {
        _2444 = _2334;
        _2446 = _2335;
        _2448 = _2336;
    }
    else
    {
        uint _2452 = _2266 + 6u;
        float _2468 = (dot(vec3(cbLight._m0[_2266 + 2u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4545 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2471 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2444 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2334;
        _2446 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2335;
        _2448 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2336;
    }
    bool _2451 = _2340.y == 0u;
    float _2506;
    float _2508;
    float _2510;
    if (_2451)
    {
        _2506 = _2444;
        _2508 = _2446;
        _2510 = _2448;
    }
    else
    {
        uint _2679 = _2266 + 7u;
        float _2695 = (dot(vec3(cbLight._m0[_2266 + 3u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2696 = _2695 * _2695;
        float _4561 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2697 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2698 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2506 = (((cbLight._m0[_2679].x * 0.3183098733425140380859375) * _2697) * _2698) + _2444;
        _2508 = (((cbLight._m0[_2679].y * 0.3183098733425140380859375) * _2697) * _2698) + _2446;
        _2510 = (((cbLight._m0[_2679].z * 0.3183098733425140380859375) * _2697) * _2698) + _2448;
    }
    uint _2513 = _2266 + 8u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _804) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2266].x + _881;
    float _2529 = cbLight._m0[_2266].y + _882;
    float _2530 = cbLight._m0[_2266].z + _883;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2266].xyz));
    float _4577 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2542 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2543 = dot(vec3(_801, _802, _803), vec3(_2535, _2536, _2537));
    float _4599 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2547 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2535, _2536, _2537));
    float _4610 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = _2527 * _2527;
    float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
    float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2564 = 0.959999978542327880859375 - _948;
    float _2566 = 0.959999978542327880859375 - _949;
    float _2567 = 0.959999978542327880859375 - _950;
    float _2574 = 1.0 - _2527;
    float _2585 = (0.5 / (((_2542 * ((_2541 * _2574) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2574) + _2527) * _2541))) * _2541;
    float _4621 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2587 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
    uint _2601 = _2266 + 9u;
    float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _804) * 0.949999988079071044921875);
    float _2613 = _2612 * _2612;
    float _2614 = cbLight._m0[_2306].x + _881;
    float _2615 = cbLight._m0[_2306].y + _882;
    float _2616 = cbLight._m0[_2306].z + _883;
    float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
    float _2621 = _2620 * _2614;
    float _2622 = _2620 * _2615;
    float _2623 = _2620 * _2616;
    float _2624 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2306].xyz));
    float _4632 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2628 = dot(vec3(_801, _802, _803), vec3(_2621, _2622, _2623));
    float _4643 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2632 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2621, _2622, _2623));
    float _4654 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2636 = _2613 * _2613;
    float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
    float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
    float _2654 = 1.0 - _2613;
    float _2664 = (0.5 / (((_2542 * ((_2627 * _2654) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2654) + _2613) * _2627))) * _2627;
    float _4665 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2666 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
    float _2676 = (((((_2647 * _2564) + _951) * cbLight._m0[_2601].x) * _2666) * _2289) + ((((cbLight._m0[_2513].x * _2255) * ((_2563 * _2564) + _951)) * _2587) * _2302);
    float _2677 = (((((_2647 * _2566) + _953) * cbLight._m0[_2601].y) * _2666) * _2289) + ((((cbLight._m0[_2513].y * _2257) * ((_2563 * _2566) + _953)) * _2587) * _2302);
    float _2678 = (((((_2647 * _2567) + _954) * cbLight._m0[_2601].z) * _2666) * _2289) + ((((cbLight._m0[_2513].z * _2259) * ((_2563 * _2567) + _954)) * _2587) * _2302);
    float _2734;
    float _2736;
    float _2738;
    if (_2342)
    {
        _2734 = _2676;
        _2736 = _2677;
        _2738 = _2678;
    }
    else
    {
        uint _2740 = _2266 + 2u;
        uint _2744 = _2266 + 10u;
        float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2740].w)) * _804) * 0.949999988079071044921875);
        float _2759 = _2758 * _2758;
        float _2760 = cbLight._m0[_2740].x + _881;
        float _2761 = cbLight._m0[_2740].y + _882;
        float _2762 = cbLight._m0[_2740].z + _883;
        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
        float _2767 = _2766 * _2760;
        float _2768 = _2766 * _2761;
        float _2769 = _2766 * _2762;
        float _2770 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2740].xyz));
        float _4676 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2774 = dot(vec3(_801, _802, _803), vec3(_2767, _2768, _2769));
        float _4687 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2778 = dot(vec3(cbLight._m0[_2740].xyz), vec3(_2767, _2768, _2769));
        float _4698 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2782 = _2759 * _2759;
        float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
        float _2793 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
        float _2800 = 1.0 - _2759;
        float _2810 = (0.5 / (((_2542 * ((_2773 * _2800) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2800) + _2759) * _2773))) * _2773;
        float _4709 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2812 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
        float _2813 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2734 = (((((_2793 * _2564) + _951) * cbLight._m0[_2744].x) * _2812) * _2813) + _2676;
        _2736 = (((((_2793 * _2566) + _953) * cbLight._m0[_2744].y) * _2812) * _2813) + _2677;
        _2738 = (((((_2793 * _2567) + _954) * cbLight._m0[_2744].z) * _2812) * _2813) + _2678;
    }
    float _2844;
    float _2846;
    float _2848;
    if (_2451)
    {
        _2844 = _2734;
        _2846 = _2736;
        _2848 = _2738;
    }
    else
    {
        uint _2855 = _2266 + 3u;
        uint _2859 = _2266 + 11u;
        float _2873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2855].w)) * _804) * 0.949999988079071044921875);
        float _2874 = _2873 * _2873;
        float _2875 = cbLight._m0[_2855].x + _881;
        float _2876 = cbLight._m0[_2855].y + _882;
        float _2877 = cbLight._m0[_2855].z + _883;
        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
        float _2882 = _2881 * _2875;
        float _2883 = _2881 * _2876;
        float _2884 = _2881 * _2877;
        float _2885 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2855].xyz));
        float _4725 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2889 = dot(vec3(_801, _802, _803), vec3(_2882, _2883, _2884));
        float _4736 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2892 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2893 = dot(vec3(cbLight._m0[_2855].xyz), vec3(_2882, _2883, _2884));
        float _4747 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2897 = _2874 * _2874;
        float _2901 = ((_2892 * _2892) * (_2897 + (-1.0))) + 1.0;
        float _2908 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
        float _2915 = 1.0 - _2874;
        float _2925 = (0.5 / (((_2542 * ((_2888 * _2915) + _2874)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2915) + _2874) * _2888))) * _2888;
        float _4758 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2927 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2897 / ((_2901 * _2901) * 3.141590118408203125));
        float _2928 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2844 = (((((_2908 * _2564) + _951) * cbLight._m0[_2859].x) * _2927) * _2928) + _2734;
        _2846 = (((((_2908 * _2566) + _953) * cbLight._m0[_2859].y) * _2927) * _2928) + _2736;
        _2848 = (((((_2908 * _2567) + _954) * cbLight._m0[_2859].z) * _2927) * _2928) + _2738;
    }
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_2264.y == 0u)
    {
        uvec4 _2949 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2950 = _2949.x;
        uint _2961 = uint((float(_2949.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2950))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2950)));
        float _2971 = (log2(_2042 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2972 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        uint _2975 = uint(isnan(14.0) ? _2972 : (isnan(_2972) ? 14.0 : min(_2972, 14.0)));
        uvec4 _2980 = texelFetch(g_lightClusterGridBuffer, int(((_2975 << 2u) + (_2961 << 6u)) >> 2u));
        uint _2981 = _2980.x;
        uint _2982 = _2949.z;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        if (((((1u << ((_2982 >> 4u) & 15u)) + 4294967295u) & _2981) == 0u) || ((_2982 & 240u) == 0u))
        {
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
        }
        else
        {
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            uint _3212 = 0u;
            uint _3221;
            bool _3222;
            for (;;)
            {
                _3221 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                _3222 = _3221 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3222)
                {
                    frontier_phi_66_pred = _3211;
                    frontier_phi_66_pred_1 = _3210;
                    frontier_phi_66_pred_2 = _3209;
                    frontier_phi_66_pred_3 = _3208;
                    frontier_phi_66_pred_4 = _3207;
                    frontier_phi_66_pred_5 = _3206;
                }
                else
                {
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    uint _3336;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3221;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    for (;;)
                    {
                        uint _3340 = uint(findLSB(_3336)) + (_3212 << 5u);
                        uint _3337 = (_3336 + 4294967295u) & _3336;
                        uint _3342 = _3340 * 48u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3362 = (_3340 * 48u) + 4u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3381 = (_3340 * 48u) + 8u;
                        vec3 _3392 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x));
                        float _3396 = _3356.x - _2040;
                        float _3397 = _3356.y - _2041;
                        float _3398 = _3356.z - _2042;
                        float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                        float _3402 = inversesqrt(_3399);
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3406 = dot(vec3(_908, _911, _914), vec3(_3403, _3404, _3405));
                        float _3411 = 1.0 - (_3399 * _3356.w);
                        float _4784 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3413 = sqrt(_3399) * _3375.w;
                        float _3416 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3406) + _3417;
                        float _3423 = _3413 * _3413;
                        float _3427 = ((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3412) / ((_3423 * 0.699999988079071044921875) + 1.0);
                        float _3431 = (-0.0) - _2040;
                        float _3432 = (-0.0) - _2041;
                        float _3433 = (-0.0) - _2042;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3447 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                        float _3448 = 1.0 - _983;
                        float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3438 + _3403;
                        float _3459 = _3439 + _3404;
                        float _3460 = _3440 + _3405;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_908, _911, _914), vec3(_3438, _3439, _3440));
                        float _4800 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3472 = dot(vec3(_908, _911, _914), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4811 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3416 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3406) + _3481;
                        float _4822 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4833 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3479 * _3479) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125))) * _3412;
                        _3265 = (_3427 * _3375.x) + _3333;
                        _3266 = (_3427 * _3375.y) + _3334;
                        _3267 = (_3427 * _3375.z) + _3335;
                        _3262 = (_3507 * _3392.x) + _3330;
                        _3263 = (_3507 * _3392.y) + _3331;
                        _3264 = (_3507 * _3392.z) + _3332;
                        if (_3337 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3337;
                        }
                    }
                    frontier_phi_66_pred = _3267;
                    frontier_phi_66_pred_1 = _3266;
                    frontier_phi_66_pred_2 = _3265;
                    frontier_phi_66_pred_3 = _3264;
                    frontier_phi_66_pred_4 = _3263;
                    frontier_phi_66_pred_5 = _3262;
                }
                _3072 = frontier_phi_66_pred;
                _3070 = frontier_phi_66_pred_1;
                _3068 = frontier_phi_66_pred_2;
                _3066 = frontier_phi_66_pred_3;
                _3064 = frontier_phi_66_pred_4;
                _3062 = frontier_phi_66_pred_5;
                uint _3213 = _3212 + 1u;
                if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3206 = _3062;
                    _3207 = _3064;
                    _3208 = _3066;
                    _3209 = _3068;
                    _3210 = _3070;
                    _3211 = _3072;
                    _3212 = _3213;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
        }
        uvec4 _3075 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3076 = _3075.z;
        uint _3078 = (_3076 >> 8u) & 15u;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        if (((4294967295u << _3078) & _2981) == 0u)
        {
            _3174 = _3061;
            _3176 = _3063;
            _3178 = _3065;
            _3180 = _3067;
            _3182 = _3069;
            _3184 = _3071;
        }
        else
        {
            float _3199 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
            float _3200 = _3199 * _2040;
            float _3201 = _3199 * _2041;
            float _3202 = _3199 * _2042;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3078 < ((_3076 >> 12u) & 15u))
            {
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3313 = _3061;
                float _3314 = _3063;
                float _3315 = _3065;
                float _3316 = _3067;
                float _3317 = _3069;
                float _3318 = _3071;
                uint _3319 = _3078;
                uint _3328;
                bool _3329;
                for (;;)
                {
                    _3328 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                    _3329 = _3328 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3329)
                    {
                        frontier_phi_72_pred = _3318;
                        frontier_phi_72_pred_1 = _3317;
                        frontier_phi_72_pred_2 = _3316;
                        frontier_phi_72_pred_3 = _3315;
                        frontier_phi_72_pred_4 = _3314;
                        frontier_phi_72_pred_5 = _3313;
                    }
                    else
                    {
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3525 = _3313;
                        float _3526 = _3314;
                        float _3527 = _3315;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        uint _3531 = _3328;
                        uint _3532;
                        vec4 _3557;
                        float _3558;
                        vec4 _3573;
                        vec3 _3585;
                        vec4 _3600;
                        vec4 _3615;
                        float _3661;
                        bool _3662;
                        for (;;)
                        {
                            uint _3542 = ((_3319 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3531));
                            _3532 = (_3531 + 4294967295u) & _3531;
                            uint _3544 = _3542 * 40u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3558 = _3557.w;
                            uint _3560 = (_3542 * 40u) + 4u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3542 * 40u) + 8u;
                            _3585 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x));
                            uint _3587 = (_3542 * 40u) + 16u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3542 * 40u) + 20u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3542 * 40u) + 24u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3636 = (_3542 * 40u) + 28u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            _3661 = fma(_2042, _3649.z, fma(_2041, _3649.y, _3649.x * _2040)) + _3649.w;
                            _3662 = !((fma(_2042, _3630.z, fma(_2041, _3630.y, _3630.x * _2040)) + _3630.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3662)
                            {
                                float _3689 = _3557.x - _2040;
                                float _3690 = _3557.y - _2041;
                                float _3691 = _3557.z - _2042;
                                float _3692 = dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691));
                                float _3695 = inversesqrt(_3692);
                                float _3696 = _3695 * _3689;
                                float _3697 = _3695 * _3690;
                                float _3698 = _3695 * _3691;
                                float _3702 = 1.0 - (_3692 / (_3558 * _3558));
                                float _4844 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3707 = sqrt(_3692) * _3573.w;
                                float _3709 = 1.39999997615814208984375 / (_3707 + 1.39999997615814208984375);
                                float _3710 = _3709 * _3709;
                                float _3713 = ((1.0 - _3710) * dot(vec3(_3696, _3697, _3698), vec3(_908, _911, _914))) + _3710;
                                float _3716 = _3707 * _3707;
                                float _3720 = (fma(_2042, _3600.z, fma(_2041, _3600.y, _3600.x * _2040)) + _3600.w) / _3661;
                                float _3721 = (fma(_2042, _3615.z, fma(_2041, _3615.y, _3615.x * _2040)) + _3615.w) / _3661;
                                float _3725 = 1.0 - dot(vec2(_3720, _3721), vec2(_3720, _3721));
                                float _4860 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3727 = _3726 * (((isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0))) * _3703) / ((_3716 * 0.699999988079071044921875) + 1.0));
                                float _3739 = exp2(log2(1.0 / ((_3716 * 3.5) + 5.0)) * 0.25);
                                float _3740 = 1.0 - _983;
                                float _3747 = sqrt(1.0 - ((1.0 - (_3740 * _3740)) * (1.0 - (_3739 * _3739))));
                                float _3748 = _3747 * _3747;
                                float _3749 = _3748 * _3748;
                                float _3750 = _3696 - _3200;
                                float _3751 = _3697 - _3201;
                                float _3752 = _3698 - _3202;
                                float _3756 = inversesqrt(dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752)));
                                float _3760 = dot(vec3(_908, _911, _914), vec3((-0.0) - _3200, (-0.0) - _3201, (-0.0) - _3202));
                                float _4871 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3764 = dot(vec3(_908, _911, _914), vec3(_3756 * _3750, _3756 * _3751, _3756 * _3752));
                                float _4882 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3767 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3771 = ((_3767 * _3767) * (_3749 + (-1.0))) + 1.0;
                                float _3772 = _3709 * _3748;
                                float _3773 = _3772 * _3772;
                                float _3779 = ((1.0 - _3773) * dot(vec3(_908, _911, _914), vec3(_3696, _3697, _3698))) + _3773;
                                float _4893 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3781 = 1.0 - _3748;
                                float _3791 = (0.5 / (((_3780 * ((_3763 * _3781) + _3748)) + 9.9999999392252902907785028219223e-09) + (((_3780 * _3781) + _3748) * _3763))) * _3780;
                                float _4904 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3801 = (_3726 * _3703) * (((_3749 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3771 * _3771) * ((_3716 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3727 * _3573.y;
                                frontier_phi_78_pred_1 = _3727 * _3573.x;
                                frontier_phi_78_pred_2 = _3801 * _3585.z;
                                frontier_phi_78_pred_3 = _3801 * _3585.y;
                                frontier_phi_78_pred_4 = _3801 * _3585.x;
                                frontier_phi_78_pred_5 = _3727 * _3573.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3809 = frontier_phi_78_pred;
                            _3808 = frontier_phi_78_pred_1;
                            _3807 = frontier_phi_78_pred_2;
                            _3806 = frontier_phi_78_pred_3;
                            _3805 = frontier_phi_78_pred_4;
                            _3810 = frontier_phi_78_pred_5;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            if (_3532 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3532;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3517;
                        frontier_phi_72_pred_1 = _3516;
                        frontier_phi_72_pred_2 = _3515;
                        frontier_phi_72_pred_3 = _3514;
                        frontier_phi_72_pred_4 = _3513;
                        frontier_phi_72_pred_5 = _3512;
                    }
                    _3185 = frontier_phi_72_pred;
                    _3183 = frontier_phi_72_pred_1;
                    _3181 = frontier_phi_72_pred_2;
                    _3179 = frontier_phi_72_pred_3;
                    _3177 = frontier_phi_72_pred_4;
                    _3175 = frontier_phi_72_pred_5;
                    uint _3320 = _3319 + 1u;
                    if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3313 = _3175;
                        _3314 = _3177;
                        _3315 = _3179;
                        _3316 = _3181;
                        _3317 = _3183;
                        _3318 = _3185;
                        _3319 = _3320;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3185;
                frontier_phi_60_61_ladder_1 = _3183;
                frontier_phi_60_61_ladder_2 = _3179;
                frontier_phi_60_61_ladder_3 = _3177;
                frontier_phi_60_61_ladder_4 = _3175;
                frontier_phi_60_61_ladder_5 = _3181;
            }
            else
            {
                frontier_phi_60_61_ladder = _3071;
                frontier_phi_60_61_ladder_1 = _3069;
                frontier_phi_60_61_ladder_2 = _3065;
                frontier_phi_60_61_ladder_3 = _3063;
                frontier_phi_60_61_ladder_4 = _3061;
                frontier_phi_60_61_ladder_5 = _3067;
            }
            _3174 = frontier_phi_60_61_ladder_4;
            _3176 = frontier_phi_60_61_ladder_3;
            _3178 = frontier_phi_60_61_ladder_2;
            _3180 = frontier_phi_60_61_ladder_5;
            _3182 = frontier_phi_60_61_ladder_1;
            _3184 = frontier_phi_60_61_ladder;
        }
        float _3189 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2994 = (_3189 * _3180) + _2506;
        _2996 = (_3189 * _3182) + _2508;
        _2998 = (_3189 * _3184) + _2510;
        _3000 = ((_3174 * _951) * _3189) + _2844;
        _3002 = ((_3176 * _953) * _3189) + _2846;
        _3004 = ((_3178 * _954) * _3189) + _2848;
    }
    else
    {
        _2994 = _2506;
        _2996 = _2508;
        _2998 = _2510;
        _3000 = _2844;
        _3002 = _2846;
        _3004 = _2848;
    }
    float _4920 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4931 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4942 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    uint _3024 = _254 + 6u;
    float _3032 = _889 / cbSceneParam._m0[86u].x;
    float _3033 = _890 / cbSceneParam._m0[86u].y;
    vec4 _3047 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3032, _3033, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3049 = _3047.x;
    float _3050 = _3047.y;
    float _3051 = _3047.z;
    float _3052 = _3047.w;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _3086 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _3087 = _3086 / _823;
        float _3098 = _3087 * _874;
        float _3099 = _875 * _3087;
        float _3100 = (-0.0) - _3099;
        float _3102 = _3087 * _876;
        float _3104 = (cbSceneParam._m0[77u].w * _3100) / _3086;
        float _3105 = _3104 + cbSceneParam._m0[79u].w;
        float _3106 = cbSceneParam._m0[79u].w - _3099;
        float _3112 = sqrt(((_3098 * _3098) + (_3099 * _3099)) + (_3102 * _3102));
        float _3115 = (1.0 - (cbSceneParam._m0[77u].w / _3086)) * _3112;
        float _3120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3275;
        if (abs((_3100 - _3104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3275 = ((((_3105 > 0.0) ? exp2(_3120 * _3105) : (2.0 - exp2(_3122 * _3105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3115;
        }
        else
        {
            float _3235 = 1.0 / cbSceneParam._m0[80u].x;
            float _3236 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : max(_3105, _3106));
            float _3237 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : min(_3105, _3106));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            float _3247 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : min(_3237, 0.0));
            _3275 = ((abs(_3112 / _3100) * cbSceneParam._m0[80u].y) * ((((_3246 - _3247) * 2.0) - ((exp2(_3120 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0)))) - exp2(_3120 * (isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))))) * _3235)) - ((exp2(_3122 * _3246) - exp2(_3122 * _3247)) * _3235))) + (_3115 * cbSceneParam._m0[80u].z);
        }
        vec4 _3277 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3032, _3033, 1.0), 0.0);
        float _3286 = exp2((_3275 * (-1.44269502162933349609375)) * (1.0 - _3277.w));
        float _3287 = log2(_3286);
        float _3303 = log2(_3052);
        _3124 = (exp2(_3303 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].x)) * _3277.x) / cbSceneParam._m0[78u].x)) + _3049;
        _3126 = (exp2(_3303 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].y)) * _3277.y) / cbSceneParam._m0[78u].y)) + _3050;
        _3128 = (exp2(_3303 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3287 * cbSceneParam._m0[78u].z)) * _3277.z) / cbSceneParam._m0[78u].z)) + _3051;
        _3130 = _3286 * _3052;
    }
    else
    {
        _3124 = _3049;
        _3126 = _3050;
        _3128 = _3051;
        _3130 = _3052;
    }
    float _3142 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3143 = _3142 == 3.0;
    float _3144 = log2(_3130);
    float _3151 = exp2(_3144 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2994 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _967))) + ((_3000 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3152 = exp2(_3144 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2996 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _967))) + ((_3002 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3153 = exp2(_3144 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2998 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _967))) + ((_3004 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1774)) * cbPerFrame._m0[3u].x));
    float _3162 = (_3142 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3162 * (_3143 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3124)));
    SV_Target.y = _3162 * (_3143 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3126)));
    SV_Target.z = _3162 * (_3143 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3128)));
    SV_Target.w = cbInstanceData._m0[_3024].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3024].w;
}


