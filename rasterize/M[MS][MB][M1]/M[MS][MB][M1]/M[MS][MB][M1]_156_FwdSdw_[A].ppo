#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1317;
float _3979;
float _3980;
float _3981;
float _3982;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3991 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    float _493 = ((_463.z - _484) * _388) + _484;
    float _496 = ((((_463.x - _482) * _388) + _482) * 2.0) + (-1.0);
    float _497 = ((((_463.y - _483) * _388) + _483) * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _4002 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _535 = (_496 + ((((_436.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_523.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _536 = (_497 + ((((_436.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_523.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _539 = fma(_503, _238, fma(_536, _245, _535 * _231));
    float _542 = fma(_503, _239, fma(_536, _246, _535 * _232));
    float _545 = fma(_503, _240, fma(_536, _247, _535 * _233));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _583 = ((_578 - _579) * cbMtdParam._m0[24u].z) + _579;
    float _585 = (cbMtdParam._m0[19u].x + dot(vec4(_549 * _539, _549 * _542, _549 * _545, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_583 * cbMtdParam._m0[21u].z);
    float _4013 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _601 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_583 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4024 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _606 = ((_586 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) * _602) + _395;
    float _607 = ((_586 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) * _602) + _396;
    float _608 = ((_586 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) * _602) + _397;
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _636 = _634.x;
    float _654 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _636) * _388) + _636;
    float _658 = ((_620.x - _654) * cbMtdParam._m0[19u].z) + _654;
    float _661 = _658 - ((_602 * _586) * _658);
    float _666 = (((_436.z - _493) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _493;
    float _670 = ((_523.z - _666) * cbMtdParam._m0[19u].w) + _666;
    vec4 _683 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _690 = (_683.x * 2.0) + (-1.0);
    float _691 = (_683.y * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _4035 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _701 = (((_683.z - _670) * _586) * _602) + _670;
    float _716 = (((cbMtdParam._m0[21u].x * _535) + ((_690 - _535) * _586)) * _602) + _535;
    float _717 = (((cbMtdParam._m0[21u].x * _536) + ((_691 - _536) * _586)) * _602) + _536;
    float _718 = (((sqrt(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) - _503) * _586) * _602) + _503;
    float _723 = cbMtdParam._m0[22u].x + _523.w;
    float _726 = fma(_718, _238, fma(_717, _245, _716 * _231));
    float _729 = fma(_718, _239, fma(_717, _246, _716 * _232));
    float _732 = fma(_718, _240, fma(_717, _247, _716 * _233));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    float _737 = _736 * _726;
    float _738 = _736 * _729;
    float _739 = _736 * _732;
    float _4046 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _740 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4068 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4079 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4090 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4101 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _745 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    vec4 _824 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _826 = _824.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _998 = sqrt(((_810 * _810) + (_811 * _811)) + (_812 * _812));
        float _1004 = (cbMatDynParam._m0[5u].x * _998) + cbMatDynParam._m0[5u].y;
        float _4112 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1009 = (cbMatDynParam._m0[5u].z * _998) + cbMatDynParam._m0[5u].w;
        float _4123 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) - _1005)) + _1005) < ((_826 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _837 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _838 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_739, cbSceneParam._m0[5u].z, fma(_738, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _737));
    float _859 = fma(_739, cbSceneParam._m0[6u].z, fma(_738, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _737));
    float _862 = fma(_739, cbSceneParam._m0[7u].z, fma(_738, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _737));
    uint _875 = _250 + 9u;
    uint _876 = _875 + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * cbInstanceData._m0[_876].z;
    float _4134 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _888 = 1.0 - _745;
    float _889 = _885 * _888;
    float _890 = _886 * _888;
    float _891 = _887 * _888;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _745;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _745;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _745;
    float _899 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _837, cbSceneParam._m0[86u].y * _838));
    float _915 = ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * TEXCOORD_5.w) * _911.x;
    float _916 = dot(vec3(_737, _738, _739), vec3(_817, _818, _819));
    float _919 = _916 * 2.0;
    float _923 = (_919 * _737) - _817;
    float _924 = (_919 * _738) - _818;
    float _925 = (_919 * _739) - _819;
    float _929 = abs(dot(vec3(_817, _818, _819), vec3(_737, _738, _739)));
    float _4167 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _931 = sqrt(_740);
    float _944 = exp2((_931 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_931 * 3.0));
    float _950 = (1.0 - _944) * ((_931 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _951 = _944 * _931;
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1045 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1049 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1074 = _979 + _737;
        float _1075 = _983 + _738;
        float _1076 = _987 + _739;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1041;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1045;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1049;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_737, _738, _739), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _4215 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_737, _738, _739), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4248 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_737, _738, _739), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4281 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1363 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1367 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1390 = _979 + _737;
        float _1391 = _983 + _738;
        float _1392 = _987 + _739;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_737, _738, _739), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4344 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_737, _738, _739), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4377 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_737, _738, _739), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4410 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1317;
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = _1317;
        _1637 = _1317;
        _1638 = _1317;
        _1639 = _1317;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1329)) + _1329;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1330)) + _1330;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1331)) + _1331;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _923 * 0.5;
    float _1697 = _924 * 0.5;
    float _1698 = _925 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1739;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1750;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1741 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1754 = (_1750 * cbModelParam._m0[1u].x) + (_1739 * (1.0 - cbModelParam._m0[1u].x));
    float _1764 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _740);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1764 : min(cbModelParam._m0[25u].z, _1764));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_925, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923));
        float _1826 = fma(_925, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923));
        float _1829 = fma(_925, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1857 = frontier_phi_17_15_ladder;
        }
        float _2028;
        if (_1826 > 0.0)
        {
            _2028 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2028 = frontier_phi_26_22_ladder;
        }
        float _2323;
        if (_1829 > 0.0)
        {
            _2323 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2323 = frontier_phi_38_33_ladder;
        }
        float _2325 = isnan(_2028) ? _1857 : (isnan(_1857) ? _2028 : min(_1857, _2028));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1823) + _1812;
        float _2331 = (_2326 * _1826) + _1816;
        float _2332 = (_2326 * _1829) + _1820;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2333;
        float _2337 = _2333 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 > _2337) || ((_2331 < _2335) || ((_2330 < _2335) || (_2330 > _2337))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2332, cbModelParam._m0[9u].z, fma(_2331, cbModelParam._m0[9u].y, _2330 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2332, cbModelParam._m0[10u].z, fma(_2331, cbModelParam._m0[10u].y, _2330 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2332, cbModelParam._m0[11u].z, fma(_2331, cbModelParam._m0[11u].y, _2330 * cbModelParam._m0[11u].x))), _1765);
            frontier_phi_16_38_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_16_38_ladder_2;
        _1847 = frontier_phi_16_38_ladder_1;
        _1849 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_923, _924, _925), _1765);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _740);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_925, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923));
        float _1921 = fma(_925, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923));
        float _1924 = fma(_925, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923));
        float _2033;
        if (_1918 > 0.0)
        {
            _2033 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2033 = frontier_phi_28_24_ladder;
        }
        float _2350;
        if (_1921 > 0.0)
        {
            _2350 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2350 = frontier_phi_40_35_ladder;
        }
        float _2688;
        if (_1924 > 0.0)
        {
            _2688 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2688 = frontier_phi_50_47_ladder;
        }
        float _2690 = isnan(_2350) ? _2033 : (isnan(_2033) ? _2350 : min(_2033, _2350));
        float _2691 = isnan(_2688) ? _2690 : (isnan(_2690) ? _2688 : min(_2690, _2688));
        float _2695 = (_2691 * _1918) + _1907;
        float _2696 = (_2691 * _1921) + _1911;
        float _2697 = (_2691 * _1924) + _1915;
        float _2698 = _2691 * 9.9999997473787516355514526367188e-05;
        float _2699 = (-1.0) - _2698;
        float _2701 = _2698 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2697 > _2701) || ((_2697 < _2699) || ((_2696 > _2701) || ((_2696 < _2699) || ((_2695 < _2699) || (_2695 > _2701))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2697, cbModelParam._m0[17u].z, fma(_2696, cbModelParam._m0[17u].y, _2695 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2697, cbModelParam._m0[18u].z, fma(_2696, cbModelParam._m0[18u].y, _2695 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2697, cbModelParam._m0[19u].z, fma(_2696, cbModelParam._m0[19u].y, _2695 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_25_50_ladder = _2819.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2819.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2819.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_25_50_ladder_2;
        _1945 = frontier_phi_25_50_ladder_1;
        _1947 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_923, _924, _925), _1854);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1960 = (((_950 * _899) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1943 - _1845)) + _1845);
    float _1962 = (((_950 * _901) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1964 = (((_950 * _902) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1947 - _1849)) + _1849);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2020 = _2007 / _2019;
    float _2021 = _2011 / _2019;
    float _2022 = _2015 / _2019;
    float _2169;
    float _2170;
    float _2171;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2049 = ((uint(_2022 > cbSceneParam._m0[59u].y) + uint(_2022 > cbSceneParam._m0[59u].x)) + uint(_2022 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2050 = _2049 + 43u;
        uint _2058 = _2049 + 44u;
        uint _2066 = _2049 + 45u;
        uint _2074 = _2049 + 46u;
        float _2085 = fma(_2019, cbSceneParam._m0[_2050].w, fma(_2015, cbSceneParam._m0[_2050].z, fma(_2011, cbSceneParam._m0[_2050].y, _2007 * cbSceneParam._m0[_2050].x)));
        float _2089 = fma(_2019, cbSceneParam._m0[_2058].w, fma(_2015, cbSceneParam._m0[_2058].z, fma(_2011, cbSceneParam._m0[_2058].y, _2007 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2019, cbSceneParam._m0[_2074].w, fma(_2015, cbSceneParam._m0[_2074].z, fma(_2011, cbSceneParam._m0[_2074].y, _2007 * cbSceneParam._m0[_2074].x)));
        float _2102 = cbSceneParam._m0[33u].z * _2097;
        float _2104 = cbSceneParam._m0[33u].w * _2097;
        float _2107 = fma(_2019, cbSceneParam._m0[_2066].w, fma(_2015, cbSceneParam._m0[_2066].z, fma(_2011, cbSceneParam._m0[_2066].y, _2007 * cbSceneParam._m0[_2066].x))) / _2097;
        float _2155 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
        float _4536 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2162 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2085) / _2097, (_2104 + _2089) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 + _2085) / _2097, (_2089 - _2102) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2102) / _2097, (_2089 - _2104) / _2097), _2107), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 - _2104) / _2097, (_2102 + _2089) / _2097), _2107), 0.0)).x), vec4(0.25)));
        _2169 = 1.0 - (_2162 * cbSceneParam._m0[34u].x);
        _2170 = 1.0 - (_2162 * cbSceneParam._m0[34u].y);
        _2171 = 1.0 - (_2162 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2169 = 1.0;
        _2170 = 1.0;
        _2171 = 1.0;
    }
    float _2235;
    float _2237;
    float _2239;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2223 = fma(_2019, cbSceneParam._m0[63u].w, fma(_2015, cbSceneParam._m0[63u].z, fma(_2011, cbSceneParam._m0[63u].y, _2007 * cbSceneParam._m0[63u].x)));
        float _2224 = fma(_2019, cbSceneParam._m0[60u].w, fma(_2015, cbSceneParam._m0[60u].z, fma(_2011, cbSceneParam._m0[60u].y, _2007 * cbSceneParam._m0[60u].x))) / _2223;
        float _2225 = fma(_2019, cbSceneParam._m0[61u].w, fma(_2015, cbSceneParam._m0[61u].z, fma(_2011, cbSceneParam._m0[61u].y, _2007 * cbSceneParam._m0[61u].x))) / _2223;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2224 >= cbSceneParam._m0[64u].x) && (_2225 >= cbSceneParam._m0[64u].y)) && (_2224 <= cbSceneParam._m0[64u].z)) && (_2225 <= cbSceneParam._m0[64u].w))
        {
            float _2363 = fma(_2019, cbSceneParam._m0[62u].w, fma(_2015, cbSceneParam._m0[62u].z, fma(_2011, cbSceneParam._m0[62u].y, _2007 * cbSceneParam._m0[62u].x))) / _2223;
            float _2367 = isnan(cbSceneParam._m0[41u].w) ? _2363 : (isnan(_2363) ? cbSceneParam._m0[41u].w : max(_2363, cbSceneParam._m0[41u].w));
            float _2410 = (cbSceneParam._m0[33u].x - sqrt(((_2021 * _2021) + (_2020 * _2020)) + (_2022 * _2022))) * cbSceneParam._m0[33u].y;
            float _4552 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
            float _2417 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2224, cbSceneParam._m0[33u].w + _2225), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2224, _2225 - cbSceneParam._m0[33u].z), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].z, _2225 - cbSceneParam._m0[33u].w), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2224 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2225), _2367), 0.0)).x), vec4(0.25)));
            float _2421 = 1.0 - (_2417 * cbSceneParam._m0[34u].x);
            float _2422 = 1.0 - (_2417 * cbSceneParam._m0[34u].y);
            float _2423 = 1.0 - (_2417 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2423) ? _2171 : (isnan(_2171) ? _2423 : min(_2171, _2423));
            frontier_phi_37_36_ladder_1 = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
            frontier_phi_37_36_ladder_2 = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
        }
        else
        {
            frontier_phi_37_36_ladder = _2171;
            frontier_phi_37_36_ladder_1 = _2170;
            frontier_phi_37_36_ladder_2 = _2169;
        }
        _2235 = frontier_phi_37_36_ladder_2;
        _2237 = frontier_phi_37_36_ladder_1;
        _2239 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2235 = _2169;
        _2237 = _2170;
        _2239 = _2171;
    }
    uvec4 _2244 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2246 = _2244.x * 14u;
    uint _2247 = _2246 + 13u;
    float _2254 = _915 + (-1.0);
    float _2259 = (cbLight._m0[_2247].x * _2254) + 1.0;
    float _2260 = (cbLight._m0[_2247].y * _2254) + 1.0;
    float _2261 = (cbLight._m0[_2247].z * _2254) + 1.0;
    float _2262 = (cbLight._m0[_2247].w * _2254) + 1.0;
    uint _2263 = _2246 + 5u;
    float _2269 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2273 = _2246 + 4u;
    float _2282 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2286 = _2246 | 1u;
    float _2297 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_737, _738, _739));
    float _2300 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_737, _738, _739));
    float _4588 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _4599 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2305 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * 0.3183098733425140380859375;
    float _2307 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * 0.3183098733425140380859375;
    float _2314 = ((cbLight._m0[_2263].x * _2269) * _2307) + (((cbLight._m0[_2273].x * _2235) * _2282) * _2305);
    float _2315 = ((_2269 * cbLight._m0[_2263].y) * _2307) + (((cbLight._m0[_2273].y * _2237) * _2282) * _2305);
    float _2316 = ((_2269 * cbLight._m0[_2263].z) * _2307) + (((cbLight._m0[_2273].z * _2239) * _2282) * _2305);
    uvec4 _2320 = floatBitsToUint(cbLight._m0[_2246 + 12u]);
    bool _2322 = _2320.x == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2322)
    {
        _2424 = _2314;
        _2426 = _2315;
        _2428 = _2316;
    }
    else
    {
        uint _2432 = _2246 + 6u;
        float _2448 = (dot(vec3(cbLight._m0[_2246 + 2u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4610 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2451 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2424 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2314;
        _2426 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2315;
        _2428 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2316;
    }
    bool _2431 = _2320.y == 0u;
    float _2486;
    float _2488;
    float _2490;
    if (_2431)
    {
        _2486 = _2424;
        _2488 = _2426;
        _2490 = _2428;
    }
    else
    {
        uint _2659 = _2246 + 7u;
        float _2675 = (dot(vec3(cbLight._m0[_2246 + 3u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2676 = _2675 * _2675;
        float _4626 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2677 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2678 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2486 = (((cbLight._m0[_2659].x * 0.3183098733425140380859375) * _2677) * _2678) + _2424;
        _2488 = (((cbLight._m0[_2659].y * 0.3183098733425140380859375) * _2677) * _2678) + _2426;
        _2490 = (((cbLight._m0[_2659].z * 0.3183098733425140380859375) * _2677) * _2678) + _2428;
    }
    uint _2493 = _2246 + 8u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _740) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2246].x + _817;
    float _2509 = cbLight._m0[_2246].y + _818;
    float _2510 = cbLight._m0[_2246].z + _819;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2246].xyz));
    float _4642 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _4653 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2522 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2523 = dot(vec3(_737, _738, _739), vec3(_2515, _2516, _2517));
    float _4664 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2515, _2516, _2517));
    float _4675 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2507 * _2507;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
    float _2544 = 0.959999978542327880859375 - _896;
    float _2546 = 0.959999978542327880859375 - _897;
    float _2547 = 0.959999978542327880859375 - _898;
    float _2554 = 1.0 - _2507;
    float _2565 = (0.5 / (((_2522 * ((_2521 * _2554) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2554) + _2507) * _2521))) * _2521;
    float _4686 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    uint _2581 = _2246 + 9u;
    float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _740) * 0.949999988079071044921875);
    float _2593 = _2592 * _2592;
    float _2594 = cbLight._m0[_2286].x + _817;
    float _2595 = cbLight._m0[_2286].y + _818;
    float _2596 = cbLight._m0[_2286].z + _819;
    float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
    float _2601 = _2600 * _2594;
    float _2602 = _2600 * _2595;
    float _2603 = _2600 * _2596;
    float _2604 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2286].xyz));
    float _4697 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2608 = dot(vec3(_737, _738, _739), vec3(_2601, _2602, _2603));
    float _4708 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2612 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2601, _2602, _2603));
    float _4719 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2616 = _2593 * _2593;
    float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
    float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
    float _2634 = 1.0 - _2593;
    float _2644 = (0.5 / (((_2522 * ((_2607 * _2634) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2634) + _2593) * _2607))) * _2607;
    float _4730 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2646 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
    float _2656 = (((((_2627 * _2544) + _899) * cbLight._m0[_2581].x) * _2646) * _2269) + ((((cbLight._m0[_2493].x * _2235) * ((_2543 * _2544) + _899)) * _2567) * _2282);
    float _2657 = (((((_2627 * _2546) + _901) * cbLight._m0[_2581].y) * _2646) * _2269) + ((((cbLight._m0[_2493].y * _2237) * ((_2543 * _2546) + _901)) * _2567) * _2282);
    float _2658 = (((((_2627 * _2547) + _902) * cbLight._m0[_2581].z) * _2646) * _2269) + ((((cbLight._m0[_2493].z * _2239) * ((_2543 * _2547) + _902)) * _2567) * _2282);
    float _2714;
    float _2716;
    float _2718;
    if (_2322)
    {
        _2714 = _2656;
        _2716 = _2657;
        _2718 = _2658;
    }
    else
    {
        uint _2720 = _2246 + 2u;
        uint _2724 = _2246 + 10u;
        float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2720].w)) * _740) * 0.949999988079071044921875);
        float _2739 = _2738 * _2738;
        float _2740 = cbLight._m0[_2720].x + _817;
        float _2741 = cbLight._m0[_2720].y + _818;
        float _2742 = cbLight._m0[_2720].z + _819;
        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
        float _2747 = _2746 * _2740;
        float _2748 = _2746 * _2741;
        float _2749 = _2746 * _2742;
        float _2750 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2720].xyz));
        float _4741 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2754 = dot(vec3(_737, _738, _739), vec3(_2747, _2748, _2749));
        float _4752 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2758 = dot(vec3(cbLight._m0[_2720].xyz), vec3(_2747, _2748, _2749));
        float _4763 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2762 = _2739 * _2739;
        float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
        float _2773 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2780 = 1.0 - _2739;
        float _2790 = (0.5 / (((_2522 * ((_2753 * _2780) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2780) + _2739) * _2753))) * _2753;
        float _4774 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2792 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
        float _2793 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2714 = (((((_2773 * _2544) + _899) * cbLight._m0[_2724].x) * _2792) * _2793) + _2656;
        _2716 = (((((_2773 * _2546) + _901) * cbLight._m0[_2724].y) * _2792) * _2793) + _2657;
        _2718 = (((((_2773 * _2547) + _902) * cbLight._m0[_2724].z) * _2792) * _2793) + _2658;
    }
    float _2824;
    float _2826;
    float _2828;
    if (_2431)
    {
        _2824 = _2714;
        _2826 = _2716;
        _2828 = _2718;
    }
    else
    {
        uint _2835 = _2246 + 3u;
        uint _2839 = _2246 + 11u;
        float _2853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2835].w)) * _740) * 0.949999988079071044921875);
        float _2854 = _2853 * _2853;
        float _2855 = cbLight._m0[_2835].x + _817;
        float _2856 = cbLight._m0[_2835].y + _818;
        float _2857 = cbLight._m0[_2835].z + _819;
        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
        float _2862 = _2861 * _2855;
        float _2863 = _2861 * _2856;
        float _2864 = _2861 * _2857;
        float _2865 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2835].xyz));
        float _4790 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2869 = dot(vec3(_737, _738, _739), vec3(_2862, _2863, _2864));
        float _4801 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2872 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2873 = dot(vec3(cbLight._m0[_2835].xyz), vec3(_2862, _2863, _2864));
        float _4812 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2877 = _2854 * _2854;
        float _2881 = ((_2872 * _2872) * (_2877 + (-1.0))) + 1.0;
        float _2888 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
        float _2895 = 1.0 - _2854;
        float _2905 = (0.5 / (((_2522 * ((_2868 * _2895) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2895) + _2854) * _2868))) * _2868;
        float _4823 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2907 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2877 / ((_2881 * _2881) * 3.141590118408203125));
        float _2908 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2824 = (((((_2888 * _2544) + _899) * cbLight._m0[_2839].x) * _2907) * _2908) + _2714;
        _2826 = (((((_2888 * _2546) + _901) * cbLight._m0[_2839].y) * _2907) * _2908) + _2716;
        _2828 = (((((_2888 * _2547) + _902) * cbLight._m0[_2839].z) * _2907) * _2908) + _2718;
    }
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_2244.y == 0u)
    {
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.x;
        uint _2941 = uint((float(_2929.y) * floor(float(uint(cbSceneParam._m0[85u].y * _838) / _2930))) + floor(float(uint(cbSceneParam._m0[85u].x * _837) / _2930)));
        float _2951 = (log2(_2022 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2952 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        uint _2955 = uint(isnan(14.0) ? _2952 : (isnan(_2952) ? 14.0 : min(_2952, 14.0)));
        uvec4 _2960 = texelFetch(g_lightClusterGridBuffer, int(((_2955 << 2u) + (_2941 << 6u)) >> 2u));
        uint _2961 = _2960.x;
        uint _2962 = _2929.z;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        if (((((1u << ((_2962 >> 4u) & 15u)) + 4294967295u) & _2961) == 0u) || ((_2962 & 240u) == 0u))
        {
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
        }
        else
        {
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            uint _3200 = 0u;
            uint _3209;
            bool _3210;
            for (;;)
            {
                _3209 = texelFetch(g_lightClassification, int((((_2955 << 5u) + (_2941 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                _3210 = _3209 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3210)
                {
                    frontier_phi_71_pred = _3199;
                    frontier_phi_71_pred_1 = _3198;
                    frontier_phi_71_pred_2 = _3197;
                    frontier_phi_71_pred_3 = _3196;
                    frontier_phi_71_pred_4 = _3195;
                    frontier_phi_71_pred_5 = _3194;
                }
                else
                {
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    uint _3345;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3209;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    for (;;)
                    {
                        uint _3349 = uint(findLSB(_3345)) + (_3200 << 5u);
                        uint _3346 = (_3345 + 4294967295u) & _3345;
                        uint _3351 = _3349 * 48u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3371 = (_3349 * 48u) + 4u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3390 = (_3349 * 48u) + 8u;
                        vec3 _3401 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x));
                        float _3405 = _3365.x - _2020;
                        float _3406 = _3365.y - _2021;
                        float _3407 = _3365.z - _2022;
                        float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                        float _3411 = inversesqrt(_3408);
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3415 = dot(vec3(_856, _859, _862), vec3(_3412, _3413, _3414));
                        float _3420 = 1.0 - (_3408 * _3365.w);
                        float _4849 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3422 = sqrt(_3408) * _3384.w;
                        float _3425 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3415) + _3426;
                        float _3432 = _3422 * _3422;
                        float _3436 = ((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3421) / ((_3432 * 0.699999988079071044921875) + 1.0);
                        float _3440 = (-0.0) - _2020;
                        float _3441 = (-0.0) - _2021;
                        float _3442 = (-0.0) - _2022;
                        float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3456 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                        float _3457 = 1.0 - _931;
                        float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                        float _3465 = _3464 * _3464;
                        float _3466 = _3465 * _3465;
                        float _3467 = _3447 + _3412;
                        float _3468 = _3448 + _3413;
                        float _3469 = _3449 + _3414;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3477 = dot(vec3(_856, _859, _862), vec3(_3447, _3448, _3449));
                        float _4865 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                        float _3481 = dot(vec3(_856, _859, _862), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                        float _4876 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                        float _3489 = _3425 * _3465;
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3415) + _3490;
                        float _4887 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3495 = 1.0 - _3465;
                        float _3505 = (0.5 / (((_3494 * ((_3480 * _3495) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3465) * _3480))) * _3494;
                        float _4898 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3516 = (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) / ((_3488 * _3488) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125))) * _3421;
                        _3269 = (_3436 * _3384.x) + _3342;
                        _3270 = (_3436 * _3384.y) + _3343;
                        _3271 = (_3436 * _3384.z) + _3344;
                        _3266 = (_3516 * _3401.x) + _3339;
                        _3267 = (_3516 * _3401.y) + _3340;
                        _3268 = (_3516 * _3401.z) + _3341;
                        if (_3346 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3346;
                        }
                    }
                    frontier_phi_71_pred = _3271;
                    frontier_phi_71_pred_1 = _3270;
                    frontier_phi_71_pred_2 = _3269;
                    frontier_phi_71_pred_3 = _3268;
                    frontier_phi_71_pred_4 = _3267;
                    frontier_phi_71_pred_5 = _3266;
                }
                _3052 = frontier_phi_71_pred;
                _3050 = frontier_phi_71_pred_1;
                _3048 = frontier_phi_71_pred_2;
                _3046 = frontier_phi_71_pred_3;
                _3044 = frontier_phi_71_pred_4;
                _3042 = frontier_phi_71_pred_5;
                uint _3201 = _3200 + 1u;
                if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3194 = _3042;
                    _3195 = _3044;
                    _3196 = _3046;
                    _3197 = _3048;
                    _3198 = _3050;
                    _3199 = _3052;
                    _3200 = _3201;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
        }
        uvec4 _3055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3056 = _3055.z;
        uint _3058 = (_3056 >> 8u) & 15u;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        if (((4294967295u << _3058) & _2961) == 0u)
        {
            _3162 = _3041;
            _3164 = _3043;
            _3166 = _3045;
            _3168 = _3047;
            _3170 = _3049;
            _3172 = _3051;
        }
        else
        {
            float _3187 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
            float _3188 = _3187 * _2020;
            float _3189 = _3187 * _2021;
            float _3190 = _3187 * _2022;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3058 < ((_3056 >> 12u) & 15u))
            {
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3322 = _3041;
                float _3323 = _3043;
                float _3324 = _3045;
                float _3325 = _3047;
                float _3326 = _3049;
                float _3327 = _3051;
                uint _3328 = _3058;
                uint _3337;
                bool _3338;
                for (;;)
                {
                    _3337 = texelFetch(g_lightClassification, int((((_2955 << 5u) + (_2941 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                    _3338 = _3337 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3338)
                    {
                        frontier_phi_82_pred = _3327;
                        frontier_phi_82_pred_1 = _3326;
                        frontier_phi_82_pred_2 = _3325;
                        frontier_phi_82_pred_3 = _3324;
                        frontier_phi_82_pred_4 = _3323;
                        frontier_phi_82_pred_5 = _3322;
                    }
                    else
                    {
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        uint _3549 = _3337;
                        uint _3550;
                        vec4 _3575;
                        float _3576;
                        vec4 _3591;
                        vec3 _3603;
                        vec4 _3618;
                        vec4 _3633;
                        float _3679;
                        bool _3680;
                        for (;;)
                        {
                            uint _3560 = ((_3328 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3549));
                            _3550 = (_3549 + 4294967295u) & _3549;
                            uint _3562 = _3560 * 40u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3576 = _3575.w;
                            uint _3578 = (_3560 * 40u) + 4u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3560 * 40u) + 8u;
                            _3603 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x));
                            uint _3605 = (_3560 * 40u) + 16u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3560 * 40u) + 20u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3560 * 40u) + 24u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3654 = (_3560 * 40u) + 28u;
                            vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            _3679 = fma(_2022, _3667.z, fma(_2021, _3667.y, _3667.x * _2020)) + _3667.w;
                            _3680 = !((fma(_2022, _3648.z, fma(_2021, _3648.y, _3648.x * _2020)) + _3648.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3680)
                            {
                                float _3707 = _3575.x - _2020;
                                float _3708 = _3575.y - _2021;
                                float _3709 = _3575.z - _2022;
                                float _3710 = dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709));
                                float _3713 = inversesqrt(_3710);
                                float _3714 = _3713 * _3707;
                                float _3715 = _3713 * _3708;
                                float _3716 = _3713 * _3709;
                                float _3720 = 1.0 - (_3710 / (_3576 * _3576));
                                float _4909 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3725 = sqrt(_3710) * _3591.w;
                                float _3727 = 1.39999997615814208984375 / (_3725 + 1.39999997615814208984375);
                                float _3728 = _3727 * _3727;
                                float _3731 = ((1.0 - _3728) * dot(vec3(_3714, _3715, _3716), vec3(_856, _859, _862))) + _3728;
                                float _3734 = _3725 * _3725;
                                float _3738 = (fma(_2022, _3618.z, fma(_2021, _3618.y, _3618.x * _2020)) + _3618.w) / _3679;
                                float _3739 = (fma(_2022, _3633.z, fma(_2021, _3633.y, _3633.x * _2020)) + _3633.w) / _3679;
                                float _3743 = 1.0 - dot(vec2(_3738, _3739), vec2(_3738, _3739));
                                float _4925 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3745 = _3744 * (((isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0))) * _3721) / ((_3734 * 0.699999988079071044921875) + 1.0));
                                float _3757 = exp2(log2(1.0 / ((_3734 * 3.5) + 5.0)) * 0.25);
                                float _3758 = 1.0 - _931;
                                float _3765 = sqrt(1.0 - ((1.0 - (_3758 * _3758)) * (1.0 - (_3757 * _3757))));
                                float _3766 = _3765 * _3765;
                                float _3767 = _3766 * _3766;
                                float _3768 = _3714 - _3188;
                                float _3769 = _3715 - _3189;
                                float _3770 = _3716 - _3190;
                                float _3774 = inversesqrt(dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770)));
                                float _3778 = dot(vec3(_856, _859, _862), vec3((-0.0) - _3188, (-0.0) - _3189, (-0.0) - _3190));
                                float _4936 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3781 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3782 = dot(vec3(_856, _859, _862), vec3(_3774 * _3768, _3774 * _3769, _3774 * _3770));
                                float _4947 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3785 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3789 = ((_3785 * _3785) * (_3767 + (-1.0))) + 1.0;
                                float _3790 = _3727 * _3766;
                                float _3791 = _3790 * _3790;
                                float _3797 = ((1.0 - _3791) * dot(vec3(_856, _859, _862), vec3(_3714, _3715, _3716))) + _3791;
                                float _4958 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3799 = 1.0 - _3766;
                                float _3809 = (0.5 / (((_3798 * ((_3781 * _3799) + _3766)) + 9.9999999392252902907785028219223e-09) + (((_3798 * _3799) + _3766) * _3781))) * _3798;
                                float _4969 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3819 = (_3744 * _3721) * (((_3767 * 3.1415927410125732421875) * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) / ((_3789 * _3789) * ((_3734 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3745 * _3591.z;
                                frontier_phi_88_pred_1 = _3745 * _3591.y;
                                frontier_phi_88_pred_2 = _3745 * _3591.x;
                                frontier_phi_88_pred_3 = _3819 * _3603.z;
                                frontier_phi_88_pred_4 = _3819 * _3603.y;
                                frontier_phi_88_pred_5 = _3819 * _3603.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3828 = frontier_phi_88_pred;
                            _3827 = frontier_phi_88_pred_1;
                            _3826 = frontier_phi_88_pred_2;
                            _3825 = frontier_phi_88_pred_3;
                            _3824 = frontier_phi_88_pred_4;
                            _3823 = frontier_phi_88_pred_5;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            if (_3550 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3550;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3535;
                        frontier_phi_82_pred_1 = _3534;
                        frontier_phi_82_pred_2 = _3533;
                        frontier_phi_82_pred_3 = _3532;
                        frontier_phi_82_pred_4 = _3531;
                        frontier_phi_82_pred_5 = _3530;
                    }
                    _3173 = frontier_phi_82_pred;
                    _3171 = frontier_phi_82_pred_1;
                    _3169 = frontier_phi_82_pred_2;
                    _3167 = frontier_phi_82_pred_3;
                    _3165 = frontier_phi_82_pred_4;
                    _3163 = frontier_phi_82_pred_5;
                    uint _3329 = _3328 + 1u;
                    if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3322 = _3163;
                        _3323 = _3165;
                        _3324 = _3167;
                        _3325 = _3169;
                        _3326 = _3171;
                        _3327 = _3173;
                        _3328 = _3329;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3169;
                frontier_phi_63_64_ladder_1 = _3173;
                frontier_phi_63_64_ladder_2 = _3171;
                frontier_phi_63_64_ladder_3 = _3167;
                frontier_phi_63_64_ladder_4 = _3165;
                frontier_phi_63_64_ladder_5 = _3163;
            }
            else
            {
                frontier_phi_63_64_ladder = _3047;
                frontier_phi_63_64_ladder_1 = _3051;
                frontier_phi_63_64_ladder_2 = _3049;
                frontier_phi_63_64_ladder_3 = _3045;
                frontier_phi_63_64_ladder_4 = _3043;
                frontier_phi_63_64_ladder_5 = _3041;
            }
            _3162 = frontier_phi_63_64_ladder_5;
            _3164 = frontier_phi_63_64_ladder_4;
            _3166 = frontier_phi_63_64_ladder_3;
            _3168 = frontier_phi_63_64_ladder;
            _3170 = frontier_phi_63_64_ladder_2;
            _3172 = frontier_phi_63_64_ladder_1;
        }
        float _3177 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
        _2974 = (_3177 * _3168) + _2486;
        _2976 = (_3177 * _3170) + _2488;
        _2978 = (_3177 * _3172) + _2490;
        _2980 = ((_3162 * _899) * _3177) + _2824;
        _2982 = ((_3164 * _901) * _3177) + _2826;
        _2984 = ((_3166 * _902) * _3177) + _2828;
    }
    else
    {
        _2974 = _2486;
        _2976 = _2488;
        _2978 = _2490;
        _2980 = _2824;
        _2982 = _2826;
        _2984 = _2828;
    }
    float _4985 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4996 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _5007 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _3001 = ((isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2974 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _915))) + ((_2980 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _3002 = ((isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_2976 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _915))) + ((_2982 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _3003 = ((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_2978 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _915))) + ((_2984 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    uint _3004 = _250 + 6u;
    float _3012 = _837 / cbSceneParam._m0[86u].x;
    float _3013 = _838 / cbSceneParam._m0[86u].y;
    vec4 _3027 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3029 = _3027.x;
    float _3030 = _3027.y;
    float _3031 = _3027.z;
    float _3032 = _3027.w;
    float _3104;
    float _3106;
    float _3108;
    float _3110;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _3066 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _3067 = _3066 / _759;
        float _3078 = _3067 * _810;
        float _3079 = _811 * _3067;
        float _3080 = (-0.0) - _3079;
        float _3082 = _3067 * _812;
        float _3084 = (cbSceneParam._m0[77u].w * _3080) / _3066;
        float _3085 = _3084 + cbSceneParam._m0[79u].w;
        float _3086 = cbSceneParam._m0[79u].w - _3079;
        float _3092 = sqrt(((_3078 * _3078) + (_3079 * _3079)) + (_3082 * _3082));
        float _3095 = (1.0 - (cbSceneParam._m0[77u].w / _3066)) * _3092;
        float _3100 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3102 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3279;
        if (abs((_3080 - _3084) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3279 = ((((_3085 > 0.0) ? exp2(_3100 * _3085) : (2.0 - exp2(_3102 * _3085))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3095;
        }
        else
        {
            float _3223 = 1.0 / cbSceneParam._m0[80u].x;
            float _3224 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : max(_3085, _3086));
            float _3225 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : min(_3085, _3086));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            _3279 = ((abs(_3092 / _3080) * cbSceneParam._m0[80u].y) * ((((_3234 - _3235) * 2.0) - ((exp2(_3100 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0)))) - exp2(_3100 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))))) * _3223)) - ((exp2(_3102 * _3234) - exp2(_3102 * _3235)) * _3223))) + (_3095 * cbSceneParam._m0[80u].z);
        }
        vec4 _3281 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, 1.0), 0.0);
        float _3290 = exp2((_3279 * (-1.44269502162933349609375)) * (1.0 - _3281.w));
        float _3291 = log2(_3290);
        float _3307 = log2(_3032);
        _3104 = (exp2(_3307 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].x)) * _3281.x) / cbSceneParam._m0[78u].x)) + _3029;
        _3106 = (exp2(_3307 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].y)) * _3281.y) / cbSceneParam._m0[78u].y)) + _3030;
        _3108 = (exp2(_3307 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3291 * cbSceneParam._m0[78u].z)) * _3281.z) / cbSceneParam._m0[78u].z)) + _3031;
        _3110 = _3290 * _3032;
    }
    else
    {
        _3104 = _3029;
        _3106 = _3030;
        _3108 = _3031;
        _3110 = _3032;
    }
    bool _3317;
    vec4 _3120;
    vec4 _3142;
    float _3144;
    float _3148;
    float _3149;
    float _3150;
    float _3151;
    bool _3161;
    for (;;)
    {
        _3120 = cbMatDynParam._m0[0u];
        float _3122 = roundEven(_3120.y);
        bool _3123 = _3122 == 3.0;
        float _3124 = log2(_3110);
        float _3131 = exp2(_3124 * cbSceneParam._m0[78u].x) * _3001;
        float _3132 = exp2(_3124 * cbSceneParam._m0[78u].y) * _3002;
        float _3133 = exp2(_3124 * cbSceneParam._m0[78u].z) * _3003;
        float _3140 = _826 + (-0.5);
        _3142 = cbMtdParam._m0[1u];
        _3144 = _3142.y * _3140;
        float _3147 = (_3122 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3148 = _3147 * (_3123 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3104)));
        _3149 = _3147 * (_3123 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3106)));
        _3150 = _3147 * (_3123 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3108)));
        _3151 = _3140 * 0.999000012874603271484375;
        _3161 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3161)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3151) < 0.5)
            {
                _3317 = true;
                break;
            }
        }
        uint _3258 = _875 + uint(_3120.w);
        if ((cbInstanceData._m0[_3258].w < 1.0) && ((cbInstanceData._m0[_3258].w + _3151) < 0.5))
        {
            _3317 = true;
            break;
        }
        if ((_3144 + 1.0) < _3142.x)
        {
            _3317 = true;
            break;
        }
        _3317 = false;
        break;
    }
    float _3521;
    if (_3317)
    {
        discard_state = true;
        _3521 = 0.0;
    }
    else
    {
        _3521 = cbInstanceData._m0[_3004].w;
    }
    SV_Target.x = _3148;
    SV_Target.y = _3149;
    SV_Target.z = _3150;
    SV_Target.w = _3521;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3004].w;
    discard_exit();
}


