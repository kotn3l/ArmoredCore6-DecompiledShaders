#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1479;
float _3857;
float _3858;
float _3859;
float _3860;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3869 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3880 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3891 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3902 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _434) + _549;
    float _561 = ((((_528.x - _547) * _434) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _434) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3913 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _600 = (_561 + ((((_501.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _601 = (_562 + ((((_501.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _604 = fma(_568, _252, fma(_601, _259, _600 * _245));
    float _607 = fma(_568, _253, fma(_601, _260, _600 * _246));
    float _610 = fma(_568, _254, fma(_601, _261, _600 * _247));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _650 = (cbMtdParam._m0[19u].x + dot(vec4(_614 * _604, _614 * _607, _614 * _610, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_643 - _644) * cbMtdParam._m0[24u].z) + _644) * cbMtdParam._m0[21u].z);
    float _3924 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _653 = (-0.0) - cbMtdParam._m0[24u].x;
    float _655 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
    float _663 = _651 - ((_651 * TEXCOORD_8.x) * _656);
    float _664 = _651 - ((_651 * TEXCOORD_8.y) * _656);
    float _665 = _651 - ((_651 * TEXCOORD_8.z) * _656);
    float _672 = (_663 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) + _460;
    float _673 = (_664 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) + _461;
    float _674 = (_665 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) + _462;
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _688 = _686.x;
    float _689 = 1.0 - _688;
    float _715 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_688 - _689) * cbMtdParam._m0[24u].w) + _689) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3945 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _724 = ((((cbMtdParam._m0[10u].x - _672) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _716) + _672;
    float _725 = ((((cbMtdParam._m0[10u].y - _673) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _716) + _673;
    float _726 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _674)) * _716) + _674;
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _754 = _752.x;
    float _772 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _754) * _434) + _754;
    float _776 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _772) * cbMtdParam._m0[19u].z) + _772;
    float _778 = _776 - (_776 * _663);
    float _780 = _778 - (_778 * _716);
    float _785 = (((_501.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _789 = ((_588.z - _785) * cbMtdParam._m0[19u].w) + _785;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _3956 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _820 = ((_803.z - _789) * _663) + _789;
    float _823 = ((cbMtdParam._m0[23u].y - _820) * _716) + _820;
    vec4 _842 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _848 = (_842.x * 2.0) + (-1.0);
    float _849 = (_842.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _3967 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _865 = ((sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) - _568) * _665) + _568;
    float _868 = (((_810 - _600) * _663) + _600) + (cbMtdParam._m0[21u].x * _600);
    float _869 = (((_811 - _601) * _664) + _601) + (cbMtdParam._m0[21u].x * _601);
    float _880 = (((_848 - _868) + (_868 * cbMtdParam._m0[22u].z)) * _716) + _868;
    float _881 = (((_849 - _869) + (_869 * cbMtdParam._m0[22u].z)) * _716) + _869;
    float _882 = (_716 * (sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) - _865)) + _865;
    float _886 = cbMtdParam._m0[22u].x + _588.w;
    float _889 = fma(_882, _252, fma(_881, _259, _880 * _245));
    float _892 = fma(_882, _253, fma(_881, _260, _880 * _246));
    float _895 = fma(_882, _254, fma(_881, _261, _880 * _247));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _3978 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _903 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4000 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4011 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4022 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4033 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _908 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _922 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _972 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _962);
    float _973 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _962);
    float _974 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _962);
    float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
    float _979 = _972 * _978;
    float _980 = _973 * _978;
    float _981 = _974 * _978;
    vec4 _986 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _988 = _986.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1160 = sqrt(((_972 * _972) + (_973 * _973)) + (_974 * _974));
        float _1166 = (cbMatDynParam._m0[5u].x * _1160) + cbMatDynParam._m0[5u].y;
        float _4044 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1171 = (cbMatDynParam._m0[5u].z * _1160) + cbMatDynParam._m0[5u].w;
        float _4055 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) - _1167)) + _1167) < ((_988 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _999 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1000 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1018 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1021 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1024 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1037 = _283 + 9u;
    uint _1038 = _1037 + uint(cbMatDynParam._m0[0u].w);
    float _1044 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_1038].x;
    float _1045 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1038].y;
    float _1046 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1038].z;
    float _4066 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1050 = 1.0 - _908;
    float _1051 = _1047 * _1050;
    float _1052 = _1048 * _1050;
    float _1053 = _1049 * _1050;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _908;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _908;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _908;
    float _1061 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _999, cbSceneParam._m0[86u].y * _1000));
    float _1077 = ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * TEXCOORD_5.w) * _1073.x;
    float _1078 = dot(vec3(_900, _901, _902), vec3(_979, _980, _981));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _900) - _979;
    float _1086 = (_1081 * _901) - _980;
    float _1087 = (_1081 * _902) - _981;
    float _1091 = abs(dot(vec3(_979, _980, _981), vec3(_900, _901, _902)));
    float _4099 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_903);
    float _1106 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1112 = (1.0 - _1106) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1113 = _1106 * _1093;
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1478;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1203 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1207 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1211 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1236 = _1141 + _900;
        float _1237 = _1145 + _901;
        float _1238 = _1149 + _902;
        float _1248 = fma(_1238, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1236)) - _1203;
        float _1249 = fma(_1238, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1236)) - _1207;
        float _1250 = fma(_1238, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1236)) - _1211;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1203 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1207 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[34u].z) + ((((((_1211 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1306 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1272.x + (-0.5));
        float _1308 = _1306 * (_1272.y + (-0.5));
        float _1309 = _1306 * (_1272.z + (-0.5));
        float _1316 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1279.x + (-0.5));
        float _1318 = _1316 * (_1279.y + (-0.5));
        float _1319 = _1316 * (_1279.z + (-0.5));
        float _1326 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1286.x + (-0.5));
        float _1328 = _1326 * (_1286.y + (-0.5));
        float _1329 = _1326 * (_1286.z + (-0.5));
        float _1336 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1293.x + (-0.5));
        float _1338 = _1336 * (_1293.y + (-0.5));
        float _1339 = _1336 * (_1293.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1360 = (dot(vec3(_900, _901, _902), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1370 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4147 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1372 + 1.0))) + _1377) * _1340;
        float _1387 = _1308 * 0.5;
        float _1388 = _1318 * 0.5;
        float _1389 = _1328 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_900, _901, _902), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4180 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1414 + 1.0))) + _1419) * _1341;
        float _1429 = _1309 * 0.5;
        float _1430 = _1319 * 0.5;
        float _1431 = _1329 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_900, _901, _902), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4213 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1456 + 1.0))) + _1461) * _1342;
        _1478 = _1309;
        _1480 = _1308;
        _1481 = _1307;
        _1482 = _1319;
        _1483 = _1318;
        _1484 = _1317;
        _1485 = _1329;
        _1486 = _1328;
        _1487 = _1327;
        _1488 = _1342;
        _1489 = _1341;
        _1490 = _1340;
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1479;
        _1480 = _1479;
        _1481 = _1479;
        _1482 = _1479;
        _1483 = _1479;
        _1484 = _1479;
        _1485 = _1479;
        _1486 = _1479;
        _1487 = _1479;
        _1488 = _1479;
        _1489 = _1479;
        _1490 = _1479;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1521 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1525 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1529 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1552 = _1141 + _900;
        float _1553 = _1145 + _901;
        float _1554 = _1149 + _902;
        float _1564 = fma(_1554, cbModelParam._m0[30u].z, fma(_1553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1552)) - _1521;
        float _1565 = fma(_1554, cbModelParam._m0[31u].z, fma(_1553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1552)) - _1525;
        float _1566 = fma(_1554, cbModelParam._m0[32u].z, fma(_1553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1552)) - _1529;
        float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
        float _1583 = ((_1570 * _1564) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1521 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1570 * _1565) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1525 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1570 * _1566) / cbModelParam._m0[35u].z) + ((((((_1529 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        float _1620 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1587.x + (-0.5));
        float _1622 = _1620 * (_1587.y + (-0.5));
        float _1623 = _1620 * (_1587.z + (-0.5));
        float _1630 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1594.x + (-0.5));
        float _1632 = _1630 * (_1594.y + (-0.5));
        float _1633 = _1630 * (_1594.z + (-0.5));
        float _1640 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1601.x + (-0.5));
        float _1642 = _1640 * (_1601.y + (-0.5));
        float _1643 = _1640 * (_1601.z + (-0.5));
        float _1650 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1608.x + (-0.5));
        float _1652 = _1650 * (_1608.y + (-0.5));
        float _1653 = _1650 * (_1608.z + (-0.5));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = _1621 * 0.5;
        float _1658 = _1631 * 0.5;
        float _1659 = _1641 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_900, _901, _902), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4276 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1684 + 1.0))) + _1689) * _1654;
        float _1699 = _1622 * 0.5;
        float _1700 = _1632 * 0.5;
        float _1701 = _1642 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_900, _901, _902), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4309 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1726 + 1.0))) + _1731) * _1655;
        float _1741 = _1623 * 0.5;
        float _1742 = _1633 * 0.5;
        float _1743 = _1643 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_900, _901, _902), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4342 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1768 + 1.0))) + _1773) * _1656;
        _1790 = _1623;
        _1791 = _1622;
        _1792 = _1621;
        _1793 = _1633;
        _1794 = _1632;
        _1795 = _1631;
        _1796 = _1643;
        _1797 = _1642;
        _1798 = _1641;
        _1799 = _1656;
        _1800 = _1655;
        _1801 = _1654;
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
    }
    else
    {
        _1790 = _1479;
        _1791 = _1479;
        _1792 = _1479;
        _1793 = _1479;
        _1794 = _1479;
        _1795 = _1479;
        _1796 = _1479;
        _1797 = _1479;
        _1798 = _1479;
        _1799 = _1479;
        _1800 = _1479;
        _1801 = _1479;
        _1802 = 0.0;
        _1803 = 0.0;
        _1804 = 0.0;
    }
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1491)) + _1491;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1492)) + _1492;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1493)) + _1493;
    float _1837 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1814));
    float _1858 = _1085 * 0.5;
    float _1859 = _1086 * 0.5;
    float _1860 = _1087 * 0.5;
    float _1861 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1864 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1867 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1901;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1874 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1478, _1482, _1485, _1488));
        float _1878 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1882 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1889 = dot(vec4(cbModelParam._m0[39u]), vec4(_1858, _1859, _1860, 1.0));
        _1901 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1901 = 1.0;
    }
    float _1912;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1903 = dot(vec4(cbModelParam._m0[40u]), vec4(_1858, _1859, _1860, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1916 = (_1912 * cbModelParam._m0[1u].x) + (_1901 * (1.0 - cbModelParam._m0[1u].x));
    float _1926 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1926 : min(cbModelParam._m0[25u].z, _1926));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1974 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1978 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1982 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1985 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1988 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1991 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _2019;
        if (_1985 > 0.0)
        {
            _2019 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2019 = frontier_phi_17_15_ladder;
        }
        float _2221;
        if (_1988 > 0.0)
        {
            _2221 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2221 = frontier_phi_26_22_ladder;
        }
        float _2475;
        if (_1991 > 0.0)
        {
            _2475 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2475 = frontier_phi_38_33_ladder;
        }
        float _2477 = isnan(_2221) ? _2019 : (isnan(_2019) ? _2221 : min(_2019, _2221));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1985) + _1974;
        float _2483 = (_2478 * _1988) + _1978;
        float _2484 = (_2478 * _1991) + _1982;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2485;
        float _2489 = _2485 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 > _2489) || ((_2483 < _2487) || ((_2482 < _2487) || (_2482 > _2489))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2484, cbModelParam._m0[9u].z, fma(_2483, cbModelParam._m0[9u].y, _2482 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2484, cbModelParam._m0[10u].z, fma(_2483, cbModelParam._m0[10u].y, _2482 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2484, cbModelParam._m0[11u].z, fma(_2483, cbModelParam._m0[11u].y, _2482 * cbModelParam._m0[11u].x))), _1927);
            frontier_phi_16_38_ladder = _2612.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2612.x * cbModelParam._m0[1u].y;
        }
        _2007 = frontier_phi_16_38_ladder_2;
        _2009 = frontier_phi_16_38_ladder_1;
        _2011 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1927);
        _2007 = _1995.x * cbModelParam._m0[1u].y;
        _2009 = _1995.y * cbModelParam._m0[1u].y;
        _2011 = _1995.z * cbModelParam._m0[1u].y;
    }
    float _2015 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _2016 = isnan(_2015) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2015 : min(cbModelParam._m0[25u].w, _2015));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2083 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2086 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2226;
        if (_2080 > 0.0)
        {
            _2226 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2226 = frontier_phi_28_24_ladder;
        }
        float _2502;
        if (_2083 > 0.0)
        {
            _2502 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2502 = frontier_phi_40_35_ladder;
        }
        float _2715;
        if (_2086 > 0.0)
        {
            _2715 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2715 = frontier_phi_49_46_ladder;
        }
        float _2717 = isnan(_2502) ? _2226 : (isnan(_2226) ? _2502 : min(_2226, _2502));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _2080) + _2069;
        float _2723 = (_2718 * _2083) + _2073;
        float _2724 = (_2718 * _2086) + _2077;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _2016);
            frontier_phi_25_49_ladder = _2923.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2923.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2923.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_25_49_ladder_2;
        _2107 = frontier_phi_25_49_ladder_1;
        _2109 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _2016);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2122 = (((_1112 * _1061) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2105 - _2007)) + _2007);
    float _2124 = (((_1112 * _1063) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2107 - _2009)) + _2009);
    float _2126 = (((_1112 * _1064) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2109 - _2011)) + _2011);
    float _2129 = fma(_2126, cbSceneParam._m0[89u].z, fma(_2124, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2126, cbSceneParam._m0[90u].z, fma(_2124, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2126, cbSceneParam._m0[91u].z, fma(_2124, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    uvec4 _2145 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2147 = _2145.x * 14u;
    uint _2148 = _2147 + 13u;
    float _2155 = _1077 + (-1.0);
    float _2160 = (cbLight._m0[_2148].x * _2155) + 1.0;
    float _2161 = (cbLight._m0[_2148].y * _2155) + 1.0;
    float _2162 = (cbLight._m0[_2148].z * _2155) + 1.0;
    float _2163 = (cbLight._m0[_2148].w * _2155) + 1.0;
    uint _2164 = _2147 + 5u;
    float _2170 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2174 = _2147 + 4u;
    float _2180 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2184 = _2147 | 1u;
    float _2195 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_900, _901, _902));
    float _2198 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_900, _901, _902));
    float _4478 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _4489 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2203 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2205 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2212 = ((cbLight._m0[_2164].x * _2170) * _2205) + ((cbLight._m0[_2174].x * _2180) * _2203);
    float _2213 = ((_2170 * cbLight._m0[_2164].y) * _2205) + ((_2180 * cbLight._m0[_2174].y) * _2203);
    float _2214 = ((_2170 * cbLight._m0[_2164].z) * _2205) + ((_2180 * cbLight._m0[_2174].z) * _2203);
    uvec4 _2218 = floatBitsToUint(cbLight._m0[_2147 + 12u]);
    bool _2220 = _2218.x == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2220)
    {
        _2231 = _2212;
        _2233 = _2213;
        _2235 = _2214;
    }
    else
    {
        uint _2239 = _2147 + 6u;
        float _2255 = (dot(vec3(cbLight._m0[_2147 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4500 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2258 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2231 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2212;
        _2233 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2213;
        _2235 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2214;
    }
    bool _2238 = _2218.y == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2238)
    {
        _2276 = _2231;
        _2278 = _2233;
        _2280 = _2235;
    }
    else
    {
        uint _2446 = _2147 + 7u;
        float _2462 = (dot(vec3(cbLight._m0[_2147 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2463 = _2462 * _2462;
        float _4516 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2464 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2465 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2276 = (((cbLight._m0[_2446].x * 0.3183098733425140380859375) * _2464) * _2465) + _2231;
        _2278 = (((cbLight._m0[_2446].y * 0.3183098733425140380859375) * _2464) * _2465) + _2233;
        _2280 = (((cbLight._m0[_2446].z * 0.3183098733425140380859375) * _2464) * _2465) + _2235;
    }
    uint _2283 = _2147 + 8u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _903) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2147].x + _979;
    float _2299 = cbLight._m0[_2147].y + _980;
    float _2300 = cbLight._m0[_2147].z + _981;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2147].xyz));
    float _4532 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2312 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2313 = dot(vec3(_900, _901, _902), vec3(_2305, _2306, _2307));
    float _4554 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2305, _2306, _2307));
    float _4565 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2297 * _2297;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
    float _2334 = 0.959999978542327880859375 - _1058;
    float _2336 = 0.959999978542327880859375 - _1059;
    float _2337 = 0.959999978542327880859375 - _1060;
    float _2344 = 1.0 - _2297;
    float _2355 = (0.5 / (((_2312 * ((_2311 * _2344) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2344) + _2297) * _2311))) * _2311;
    float _4576 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    uint _2368 = _2147 + 9u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _903) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2184].x + _979;
    float _2382 = cbLight._m0[_2184].y + _980;
    float _2383 = cbLight._m0[_2184].z + _981;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2184].xyz));
    float _4587 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2395 = dot(vec3(_900, _901, _902), vec3(_2388, _2389, _2390));
    float _4598 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2388, _2389, _2390));
    float _4609 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2380 * _2380;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
    float _2421 = 1.0 - _2380;
    float _2431 = (0.5 / (((_2312 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2421) + _2380) * _2394))) * _2394;
    float _4620 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    float _2443 = (((((_2414 * _2334) + _1061) * cbLight._m0[_2368].x) * _2433) * _2170) + (((((_2333 * _2334) + _1061) * cbLight._m0[_2283].x) * _2357) * _2180);
    float _2444 = (((((_2414 * _2336) + _1063) * cbLight._m0[_2368].y) * _2433) * _2170) + (((((_2333 * _2336) + _1063) * cbLight._m0[_2283].y) * _2357) * _2180);
    float _2445 = (((((_2414 * _2337) + _1064) * cbLight._m0[_2368].z) * _2433) * _2170) + (((((_2333 * _2337) + _1064) * cbLight._m0[_2283].z) * _2357) * _2180);
    float _2507;
    float _2509;
    float _2511;
    if (_2220)
    {
        _2507 = _2443;
        _2509 = _2444;
        _2511 = _2445;
    }
    else
    {
        uint _2513 = _2147 + 2u;
        uint _2517 = _2147 + 10u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _903) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _979;
        float _2534 = cbLight._m0[_2513].y + _980;
        float _2535 = cbLight._m0[_2513].z + _981;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2513].xyz));
        float _4631 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2547 = dot(vec3(_900, _901, _902), vec3(_2540, _2541, _2542));
        float _4642 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4653 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
        float _2573 = 1.0 - _2532;
        float _2583 = (0.5 / (((_2312 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2573) + _2532) * _2546))) * _2546;
        float _4664 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2507 = (((((_2566 * _2334) + _1061) * cbLight._m0[_2517].x) * _2585) * _2586) + _2443;
        _2509 = (((((_2566 * _2336) + _1063) * cbLight._m0[_2517].y) * _2585) * _2586) + _2444;
        _2511 = (((((_2566 * _2337) + _1064) * cbLight._m0[_2517].z) * _2585) * _2586) + _2445;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2238)
    {
        _2621 = _2507;
        _2623 = _2509;
        _2625 = _2511;
    }
    else
    {
        uint _2632 = _2147 + 3u;
        uint _2636 = _2147 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _903) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _979;
        float _2653 = cbLight._m0[_2632].y + _980;
        float _2654 = cbLight._m0[_2632].z + _981;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2632].xyz));
        float _4680 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2666 = dot(vec3(_900, _901, _902), vec3(_2659, _2660, _2661));
        float _4691 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4702 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2312 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2692) + _2651) * _2665))) * _2665;
        float _4713 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2621 = (((((_2685 * _2334) + _1061) * cbLight._m0[_2636].x) * _2704) * _2705) + _2507;
        _2623 = (((((_2685 * _2336) + _1063) * cbLight._m0[_2636].y) * _2704) * _2705) + _2509;
        _2625 = (((((_2685 * _2337) + _1064) * cbLight._m0[_2636].z) * _2704) * _2705) + _2511;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2145.y == 0u)
    {
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2780;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2780;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2780;
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1000) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _999) / _2796)));
        float _2817 = (log2(_2783 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            uint _3086 = 0u;
            uint _3095;
            bool _3096;
            for (;;)
            {
                _3095 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                _3096 = _3095 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3096)
                {
                    frontier_phi_66_pred = _3080;
                    frontier_phi_66_pred_1 = _3085;
                    frontier_phi_66_pred_2 = _3084;
                    frontier_phi_66_pred_3 = _3083;
                    frontier_phi_66_pred_4 = _3082;
                    frontier_phi_66_pred_5 = _3081;
                }
                else
                {
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    uint _3231;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3095;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    for (;;)
                    {
                        uint _3235 = uint(findLSB(_3231)) + (_3086 << 5u);
                        uint _3232 = (_3231 + 4294967295u) & _3231;
                        uint _3237 = _3235 * 48u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3257 = (_3235 * 48u) + 4u;
                        vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3276 = (_3235 * 48u) + 8u;
                        vec3 _3287 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x));
                        float _3291 = _3251.x - _2781;
                        float _3292 = _3251.y - _2782;
                        float _3293 = _3251.z - _2783;
                        float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                        float _3297 = inversesqrt(_3294);
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3301 = dot(vec3(_1018, _1021, _1024), vec3(_3298, _3299, _3300));
                        float _3306 = 1.0 - (_3294 * _3251.w);
                        float _4739 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3308 = sqrt(_3294) * _3270.w;
                        float _3311 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3301) + _3312;
                        float _3318 = _3308 * _3308;
                        float _3322 = ((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3307) / ((_3318 * 0.699999988079071044921875) + 1.0);
                        float _3326 = (-0.0) - _2781;
                        float _3327 = (-0.0) - _2782;
                        float _3328 = (-0.0) - _2783;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3343 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                        float _3344 = 1.0 - _1093;
                        float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                        float _3352 = _3351 * _3351;
                        float _3353 = _3352 * _3352;
                        float _3354 = _3333 + _3298;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3364 = dot(vec3(_1018, _1021, _1024), vec3(_3333, _3334, _3335));
                        float _4755 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3368 = dot(vec3(_1018, _1021, _1024), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                        float _4766 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                        float _3376 = _3311 * _3352;
                        float _3377 = _3376 * _3376;
                        float _3380 = ((1.0 - _3377) * _3301) + _3377;
                        float _4777 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3382 = 1.0 - _3352;
                        float _3392 = (0.5 / (((_3381 * ((_3367 * _3382) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3352) * _3367))) * _3381;
                        float _4788 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3403 = (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3375 * _3375) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125))) * _3307;
                        _3155 = (_3322 * _3270.x) + _3228;
                        _3156 = (_3322 * _3270.y) + _3229;
                        _3157 = (_3322 * _3270.z) + _3230;
                        _3152 = (_3403 * _3287.x) + _3225;
                        _3153 = (_3403 * _3287.y) + _3226;
                        _3154 = (_3403 * _3287.z) + _3227;
                        if (_3232 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3232;
                        }
                    }
                    frontier_phi_66_pred = _3152;
                    frontier_phi_66_pred_1 = _3157;
                    frontier_phi_66_pred_2 = _3156;
                    frontier_phi_66_pred_3 = _3155;
                    frontier_phi_66_pred_4 = _3154;
                    frontier_phi_66_pred_5 = _3153;
                }
                _2929 = frontier_phi_66_pred;
                _2939 = frontier_phi_66_pred_1;
                _2937 = frontier_phi_66_pred_2;
                _2935 = frontier_phi_66_pred_3;
                _2933 = frontier_phi_66_pred_4;
                _2931 = frontier_phi_66_pred_5;
                uint _3087 = _3086 + 1u;
                if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3080 = _2929;
                    _3081 = _2931;
                    _3082 = _2933;
                    _3083 = _2935;
                    _3084 = _2937;
                    _3085 = _2939;
                    _3086 = _3087;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
        }
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.z;
        uint _2945 = (_2943 >> 8u) & 15u;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((4294967295u << _2945) & _2827) == 0u)
        {
            _3048 = _2928;
            _3050 = _2930;
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
            _3058 = _2938;
        }
        else
        {
            float _3073 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
            float _3074 = _3073 * _2781;
            float _3075 = _3073 * _2782;
            float _3076 = _3073 * _2783;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2945 < ((_2943 >> 12u) & 15u))
            {
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3208 = _2928;
                float _3209 = _2930;
                float _3210 = _2932;
                float _3211 = _2934;
                float _3212 = _2936;
                float _3213 = _2938;
                uint _3214 = _2945;
                uint _3223;
                bool _3224;
                for (;;)
                {
                    _3223 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                    _3224 = _3223 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3224)
                    {
                        frontier_phi_77_pred = _3213;
                        frontier_phi_77_pred_1 = _3212;
                        frontier_phi_77_pred_2 = _3211;
                        frontier_phi_77_pred_3 = _3210;
                        frontier_phi_77_pred_4 = _3209;
                        frontier_phi_77_pred_5 = _3208;
                    }
                    else
                    {
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        uint _3436 = _3223;
                        uint _3437;
                        vec4 _3462;
                        float _3463;
                        vec4 _3478;
                        vec3 _3490;
                        vec4 _3505;
                        vec4 _3520;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3447 = ((_3214 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3436));
                            _3437 = (_3436 + 4294967295u) & _3436;
                            uint _3449 = _3447 * 40u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3463 = _3462.w;
                            uint _3465 = (_3447 * 40u) + 4u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3447 * 40u) + 8u;
                            _3490 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x));
                            uint _3492 = (_3447 * 40u) + 16u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3447 * 40u) + 20u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3447 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3447 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_2783, _3554.z, fma(_2782, _3554.y, _3554.x * _2781)) + _3554.w;
                            _3567 = !((fma(_2783, _3535.z, fma(_2782, _3535.y, _3535.x * _2781)) + _3535.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3462.x - _2781;
                                float _3595 = _3462.y - _2782;
                                float _3596 = _3462.z - _2783;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3463 * _3463));
                                float _4799 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3612 = sqrt(_3597) * _3478.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_1018, _1021, _1024))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_2783, _3505.z, fma(_2782, _3505.y, _3505.x * _2781)) + _3505.w) / _3566;
                                float _3626 = (fma(_2783, _3520.z, fma(_2782, _3520.y, _3520.x * _2781)) + _3520.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4815 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _1093;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3074;
                                float _3656 = _3602 - _3075;
                                float _3657 = _3603 - _3076;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_1018, _1021, _1024), vec3((-0.0) - _3074, (-0.0) - _3075, (-0.0) - _3076));
                                float _4826 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3669 = dot(vec3(_1018, _1021, _1024), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4837 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_1018, _1021, _1024), vec3(_3601, _3602, _3603))) + _3678;
                                float _4848 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4859 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3632 * _3478.y;
                                frontier_phi_83_pred_1 = _3632 * _3478.x;
                                frontier_phi_83_pred_2 = _3706 * _3490.z;
                                frontier_phi_83_pred_3 = _3706 * _3490.y;
                                frontier_phi_83_pred_4 = _3706 * _3490.x;
                                frontier_phi_83_pred_5 = _3632 * _3478.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_83_pred;
                            _3713 = frontier_phi_83_pred_1;
                            _3712 = frontier_phi_83_pred_2;
                            _3711 = frontier_phi_83_pred_3;
                            _3710 = frontier_phi_83_pred_4;
                            _3715 = frontier_phi_83_pred_5;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            if (_3437 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3437;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3422;
                        frontier_phi_77_pred_1 = _3421;
                        frontier_phi_77_pred_2 = _3420;
                        frontier_phi_77_pred_3 = _3419;
                        frontier_phi_77_pred_4 = _3418;
                        frontier_phi_77_pred_5 = _3417;
                    }
                    _3059 = frontier_phi_77_pred;
                    _3057 = frontier_phi_77_pred_1;
                    _3055 = frontier_phi_77_pred_2;
                    _3053 = frontier_phi_77_pred_3;
                    _3051 = frontier_phi_77_pred_4;
                    _3049 = frontier_phi_77_pred_5;
                    uint _3215 = _3214 + 1u;
                    if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3208 = _3049;
                        _3209 = _3051;
                        _3210 = _3053;
                        _3211 = _3055;
                        _3212 = _3057;
                        _3213 = _3059;
                        _3214 = _3215;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3053;
                frontier_phi_58_59_ladder_1 = _3059;
                frontier_phi_58_59_ladder_2 = _3057;
                frontier_phi_58_59_ladder_3 = _3055;
                frontier_phi_58_59_ladder_4 = _3051;
                frontier_phi_58_59_ladder_5 = _3049;
            }
            else
            {
                frontier_phi_58_59_ladder = _2932;
                frontier_phi_58_59_ladder_1 = _2938;
                frontier_phi_58_59_ladder_2 = _2936;
                frontier_phi_58_59_ladder_3 = _2934;
                frontier_phi_58_59_ladder_4 = _2930;
                frontier_phi_58_59_ladder_5 = _2928;
            }
            _3048 = frontier_phi_58_59_ladder_5;
            _3050 = frontier_phi_58_59_ladder_4;
            _3052 = frontier_phi_58_59_ladder;
            _3054 = frontier_phi_58_59_ladder_3;
            _3056 = frontier_phi_58_59_ladder_2;
            _3058 = frontier_phi_58_59_ladder_1;
        }
        float _3063 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2840 = (_3063 * _3054) + _2276;
        _2842 = (_3063 * _3056) + _2278;
        _2844 = (_3063 * _3058) + _2280;
        _2846 = ((_3048 * _1061) * _3063) + _2621;
        _2848 = ((_3050 * _1063) * _3063) + _2623;
        _2850 = ((_3052 * _1064) * _3063) + _2625;
    }
    else
    {
        _2840 = _2276;
        _2842 = _2278;
        _2844 = _2280;
        _2846 = _2621;
        _2848 = _2623;
        _2850 = _2625;
    }
    float _4875 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4886 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4897 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2867 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2840 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1077))) + ((_2846 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    float _2868 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2842 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1077))) + ((_2848 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2844 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1077))) + ((_2850 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    uint _2870 = _283 + 6u;
    float _2878 = _999 / cbSceneParam._m0[86u].x;
    float _2879 = _1000 / cbSceneParam._m0[86u].y;
    vec4 _2893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, (log2((isnan(cbSceneParam._m0[77u].w) ? _922 : (isnan(_922) ? cbSceneParam._m0[77u].w : min(_922, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2895 = _2893.x;
    float _2896 = _2893.y;
    float _2897 = _2893.z;
    float _2898 = _2893.w;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_922 > cbSceneParam._m0[78u].w)
    {
        float _2953 = isnan(_922) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _922 : min(cbSceneParam._m0[80u].w, _922));
        float _2954 = _2953 / _922;
        float _2965 = _2954 * _972;
        float _2966 = _973 * _2954;
        float _2967 = (-0.0) - _2966;
        float _2968 = _2954 * _974;
        float _2970 = (cbSceneParam._m0[77u].w * _2967) / _2953;
        float _2971 = _2970 + cbSceneParam._m0[79u].w;
        float _2972 = cbSceneParam._m0[79u].w - _2966;
        float _2978 = sqrt(((_2965 * _2965) + (_2966 * _2966)) + (_2968 * _2968));
        float _2981 = (1.0 - (cbSceneParam._m0[77u].w / _2953)) * _2978;
        float _2986 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2988 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3165;
        if (abs((_2967 - _2970) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3165 = ((((_2971 > 0.0) ? exp2(_2986 * _2971) : (2.0 - exp2(_2988 * _2971))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2981;
        }
        else
        {
            float _3109 = 1.0 / cbSceneParam._m0[80u].x;
            float _3110 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : max(_2971, _2972));
            float _3111 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : min(_2971, _2972));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            _3165 = ((abs(_2978 / _2967) * cbSceneParam._m0[80u].y) * ((((_3120 - _3121) * 2.0) - ((exp2(_2986 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)))) - exp2(_2986 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))))) * _3109)) - ((exp2(_2988 * _3120) - exp2(_2988 * _3121)) * _3109))) + (_2981 * cbSceneParam._m0[80u].z);
        }
        vec4 _3167 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, 1.0), 0.0);
        float _3176 = exp2((_3165 * (-1.44269502162933349609375)) * (1.0 - _3167.w));
        float _3177 = log2(_3176);
        float _3193 = log2(_2898);
        _2990 = (exp2(_3193 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].x)) * _3167.x) / cbSceneParam._m0[78u].x)) + _2895;
        _2992 = (exp2(_3193 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].y)) * _3167.y) / cbSceneParam._m0[78u].y)) + _2896;
        _2994 = (exp2(_3193 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3177 * cbSceneParam._m0[78u].z)) * _3167.z) / cbSceneParam._m0[78u].z)) + _2897;
        _2996 = _3176 * _2898;
    }
    else
    {
        _2990 = _2895;
        _2992 = _2896;
        _2994 = _2897;
        _2996 = _2898;
    }
    bool _3203;
    vec4 _3006;
    vec4 _3028;
    float _3030;
    float _3034;
    float _3035;
    float _3036;
    float _3037;
    bool _3047;
    for (;;)
    {
        _3006 = cbMatDynParam._m0[0u];
        float _3008 = roundEven(_3006.y);
        bool _3009 = _3008 == 3.0;
        float _3010 = log2(_2996);
        float _3017 = exp2(_3010 * cbSceneParam._m0[78u].x) * _2867;
        float _3018 = exp2(_3010 * cbSceneParam._m0[78u].y) * _2868;
        float _3019 = exp2(_3010 * cbSceneParam._m0[78u].z) * _2869;
        float _3026 = _988 + (-0.5);
        _3028 = cbMtdParam._m0[1u];
        _3030 = _3028.y * _3026;
        float _3033 = (_3008 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3034 = _3033 * (_3009 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2990)));
        _3035 = _3033 * (_3009 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2992)));
        _3036 = _3033 * (_3009 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2994)));
        _3037 = _3026 * 0.999000012874603271484375;
        _3047 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3047)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3037) < 0.5)
            {
                _3203 = true;
                break;
            }
        }
        uint _3144 = _1037 + uint(_3006.w);
        if ((cbInstanceData._m0[_3144].w < 1.0) && ((cbInstanceData._m0[_3144].w + _3037) < 0.5))
        {
            _3203 = true;
            break;
        }
        if ((_3030 + 1.0) < _3028.x)
        {
            _3203 = true;
            break;
        }
        _3203 = false;
        break;
    }
    float _3408;
    if (_3203)
    {
        discard_state = true;
        _3408 = 0.0;
    }
    else
    {
        _3408 = cbInstanceData._m0[_2870].w;
    }
    SV_Target.x = _3034;
    SV_Target.y = _3035;
    SV_Target.z = _3036;
    SV_Target.w = _3408;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2870].w;
    discard_exit();
}


