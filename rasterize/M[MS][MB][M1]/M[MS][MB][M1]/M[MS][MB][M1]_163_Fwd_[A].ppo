#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1445;
float _3823;
float _3824;
float _3825;
float _3826;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3835 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _494 = _490.z;
    float _503 = ((_473.z - _494) * _398) + _494;
    float _506 = ((((_473.x - _492) * _398) + _492) * 2.0) + (-1.0);
    float _507 = ((((_473.y - _493) * _398) + _493) * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _3846 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _545 = (_506 + ((((_446.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_533.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _546 = (_507 + ((((_446.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_533.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _549 = fma(_513, _249, fma(_546, _256, _545 * _242));
    float _552 = fma(_513, _250, fma(_546, _257, _545 * _243));
    float _555 = fma(_513, _251, fma(_546, _258, _545 * _244));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _593 = ((_588 - _589) * cbMtdParam._m0[24u].z) + _589;
    float _595 = (cbMtdParam._m0[19u].x + dot(vec4(_559 * _549, _559 * _552, _559 * _555, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_593 * cbMtdParam._m0[21u].z);
    float _3857 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _598 = (-0.0) - cbMtdParam._m0[24u].x;
    float _600 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _600 : (isnan(_600) ? 1.0 : min(_600, 1.0));
    float _608 = _596 - ((_596 * TEXCOORD_8.x) * _601);
    float _609 = _596 - ((_596 * TEXCOORD_8.y) * _601);
    float _610 = _596 - ((_596 * TEXCOORD_8.z) * _601);
    float _617 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _621 = ((isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : min(_617, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _629 = (_621 - (((_593 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _621))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3888 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _634 = ((_608 * ((_426.x * cbMtdParam._m0[18u].x) - _405)) * _630) + _405;
    float _635 = ((_609 * ((_426.y * cbMtdParam._m0[18u].y) - _406)) * _630) + _406;
    float _636 = ((_610 * ((_426.z * cbMtdParam._m0[18u].z) - _407)) * _630) + _407;
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _650 = _648.x;
    float _651 = 1.0 - _650;
    float _678 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_650 - _651) * cbMtdParam._m0[24u].w) + _651) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3899 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _687 = ((((cbMtdParam._m0[10u].x - _634) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _679) + _634;
    float _688 = ((((cbMtdParam._m0[10u].y - _635) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _679) + _635;
    float _689 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _636)) * _679) + _636;
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _717 = _715.x;
    float _735 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _717) * _398) + _717;
    float _739 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _735) * cbMtdParam._m0[19u].z) + _735;
    float _742 = _739 - ((_630 * _608) * _739);
    float _744 = _742 - (_742 * _679);
    float _749 = (((_446.z - _503) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _503;
    float _753 = ((_533.z - _749) * cbMtdParam._m0[19u].w) + _749;
    vec4 _767 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _774 = (_767.x * 2.0) + (-1.0);
    float _775 = (_767.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3910 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _785 = (((_767.z - _753) * _608) * _630) + _753;
    float _788 = ((cbMtdParam._m0[23u].y - _785) * _679) + _785;
    vec4 _807 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _813 = (_807.x * 2.0) + (-1.0);
    float _814 = (_807.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _3921 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _835 = (((cbMtdParam._m0[21u].x * _545) + ((_774 - _545) * _608)) * _630) + _545;
    float _836 = (((cbMtdParam._m0[21u].x * _546) + ((_775 - _546) * _609)) * _630) + _546;
    float _837 = (((sqrt(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) - _513) * _610) * _630) + _513;
    float _848 = (((_813 - _835) + (_835 * cbMtdParam._m0[22u].z)) * _679) + _835;
    float _849 = (((_814 - _836) + (_836 * cbMtdParam._m0[22u].z)) * _679) + _836;
    float _850 = ((sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) - _837) * _679) + _837;
    float _852 = cbMtdParam._m0[22u].x + _533.w;
    float _855 = fma(_850, _249, fma(_849, _256, _848 * _242));
    float _858 = fma(_850, _250, fma(_849, _257, _848 * _243));
    float _861 = fma(_850, _251, fma(_849, _258, _848 * _244));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _3932 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _869 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _3954 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3965 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3976 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3987 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _874 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _938 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _928);
    float _939 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _928);
    float _940 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _928);
    float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
    float _945 = _938 * _944;
    float _946 = _939 * _944;
    float _947 = _940 * _944;
    vec4 _952 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _954 = _952.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1126 = sqrt(((_938 * _938) + (_939 * _939)) + (_940 * _940));
        float _1132 = (cbMatDynParam._m0[5u].x * _1126) + cbMatDynParam._m0[5u].y;
        float _3998 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1137 = (cbMatDynParam._m0[5u].z * _1126) + cbMatDynParam._m0[5u].w;
        float _4009 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) - _1133)) + _1133) < ((_954 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _965 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _966 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _984 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _987 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _990 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _1003 = _261 + 9u;
    uint _1004 = _1003 + uint(cbMatDynParam._m0[0u].w);
    float _1010 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_1004].x;
    float _1011 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_1004].y;
    float _1012 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_1004].z;
    float _4020 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1016 = 1.0 - _874;
    float _1017 = _1013 * _1016;
    float _1018 = _1014 * _1016;
    float _1019 = _1015 * _1016;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _874;
    float _1025 = (_1014 + (-0.039999999105930328369140625)) * _874;
    float _1026 = (_1015 + (-0.039999999105930328369140625)) * _874;
    float _1027 = _1024 + 0.039999999105930328369140625;
    float _1029 = _1025 + 0.039999999105930328369140625;
    float _1030 = _1026 + 0.039999999105930328369140625;
    vec4 _1039 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _965, cbSceneParam._m0[86u].y * _966));
    float _1043 = ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * TEXCOORD_5.w) * _1039.x;
    float _1044 = dot(vec3(_866, _867, _868), vec3(_945, _946, _947));
    float _1047 = _1044 * 2.0;
    float _1051 = (_1047 * _866) - _945;
    float _1052 = (_1047 * _867) - _946;
    float _1053 = (_1047 * _868) - _947;
    float _1057 = abs(dot(vec3(_945, _946, _947), vec3(_866, _867, _868)));
    float _4053 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1059 = sqrt(_869);
    float _1072 = exp2((_1059 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1059 * 3.0));
    float _1078 = (1.0 - _1072) * ((_1059 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1079 = _1072 * _1059;
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1115 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1444;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1169 = fma(_1115, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1107));
        float _1173 = fma(_1115, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1107));
        float _1177 = fma(_1115, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1107));
        float _1202 = _1107 + _866;
        float _1203 = _1111 + _867;
        float _1204 = _1115 + _868;
        float _1214 = fma(_1204, cbModelParam._m0[26u].z, fma(_1203, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1202)) - _1169;
        float _1215 = fma(_1204, cbModelParam._m0[27u].z, fma(_1203, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1202)) - _1173;
        float _1216 = fma(_1204, cbModelParam._m0[28u].z, fma(_1203, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1202)) - _1177;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1169 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1173 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[34u].z) + ((((((_1177 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1272 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1238.x + (-0.5));
        float _1274 = _1272 * (_1238.y + (-0.5));
        float _1275 = _1272 * (_1238.z + (-0.5));
        float _1282 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1245.x + (-0.5));
        float _1284 = _1282 * (_1245.y + (-0.5));
        float _1285 = _1282 * (_1245.z + (-0.5));
        float _1292 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1252.x + (-0.5));
        float _1294 = _1292 * (_1252.y + (-0.5));
        float _1295 = _1292 * (_1252.z + (-0.5));
        float _1302 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1259.x + (-0.5));
        float _1304 = _1302 * (_1259.y + (-0.5));
        float _1305 = _1302 * (_1259.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1326 = (dot(vec3(_866, _867, _868), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1336 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4101 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1338 + 1.0))) + _1343) * _1306;
        float _1353 = _1274 * 0.5;
        float _1354 = _1284 * 0.5;
        float _1355 = _1294 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_866, _867, _868), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4134 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1380 + 1.0))) + _1385) * _1307;
        float _1395 = _1275 * 0.5;
        float _1396 = _1285 * 0.5;
        float _1397 = _1295 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_866, _867, _868), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4167 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1422 + 1.0))) + _1427) * _1308;
        _1444 = _1275;
        _1446 = _1274;
        _1447 = _1273;
        _1448 = _1285;
        _1449 = _1284;
        _1450 = _1283;
        _1451 = _1295;
        _1452 = _1294;
        _1453 = _1293;
        _1454 = _1308;
        _1455 = _1307;
        _1456 = _1306;
        _1457 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1445;
        _1446 = _1445;
        _1447 = _1445;
        _1448 = _1445;
        _1449 = _1445;
        _1450 = _1445;
        _1451 = _1445;
        _1452 = _1445;
        _1453 = _1445;
        _1454 = _1445;
        _1455 = _1445;
        _1456 = _1445;
        _1457 = 0.0;
        _1458 = 0.0;
        _1459 = 0.0;
    }
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1487 = fma(_1115, cbModelParam._m0[30u].z, fma(_1111, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107));
        float _1491 = fma(_1115, cbModelParam._m0[31u].z, fma(_1111, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107));
        float _1495 = fma(_1115, cbModelParam._m0[32u].z, fma(_1111, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107));
        float _1518 = _1107 + _866;
        float _1519 = _1111 + _867;
        float _1520 = _1115 + _868;
        float _1530 = fma(_1520, cbModelParam._m0[30u].z, fma(_1519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1518)) - _1487;
        float _1531 = fma(_1520, cbModelParam._m0[31u].z, fma(_1519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1518)) - _1491;
        float _1532 = fma(_1520, cbModelParam._m0[32u].z, fma(_1519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1518)) - _1495;
        float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
        float _1549 = ((_1536 * _1530) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1487 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1536 * _1531) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1491 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1536 * _1532) / cbModelParam._m0[35u].z) + ((((((_1495 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        float _1586 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1553.x + (-0.5));
        float _1588 = _1586 * (_1553.y + (-0.5));
        float _1589 = _1586 * (_1553.z + (-0.5));
        float _1596 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1560.x + (-0.5));
        float _1598 = _1596 * (_1560.y + (-0.5));
        float _1599 = _1596 * (_1560.z + (-0.5));
        float _1606 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1567.x + (-0.5));
        float _1608 = _1606 * (_1567.y + (-0.5));
        float _1609 = _1606 * (_1567.z + (-0.5));
        float _1616 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1574.x + (-0.5));
        float _1618 = _1616 * (_1574.y + (-0.5));
        float _1619 = _1616 * (_1574.z + (-0.5));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = _1587 * 0.5;
        float _1624 = _1597 * 0.5;
        float _1625 = _1607 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_866, _867, _868), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4230 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1650 + 1.0))) + _1655) * _1620;
        float _1665 = _1588 * 0.5;
        float _1666 = _1598 * 0.5;
        float _1667 = _1608 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_866, _867, _868), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4263 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1692 + 1.0))) + _1697) * _1621;
        float _1707 = _1589 * 0.5;
        float _1708 = _1599 * 0.5;
        float _1709 = _1609 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_866, _867, _868), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4296 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1734 + 1.0))) + _1739) * _1622;
        _1756 = _1589;
        _1757 = _1588;
        _1758 = _1587;
        _1759 = _1599;
        _1760 = _1598;
        _1761 = _1597;
        _1762 = _1609;
        _1763 = _1608;
        _1764 = _1607;
        _1765 = _1622;
        _1766 = _1621;
        _1767 = _1620;
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
    }
    else
    {
        _1756 = _1445;
        _1757 = _1445;
        _1758 = _1445;
        _1759 = _1445;
        _1760 = _1445;
        _1761 = _1445;
        _1762 = _1445;
        _1763 = _1445;
        _1764 = _1445;
        _1765 = _1445;
        _1766 = _1445;
        _1767 = _1445;
        _1768 = 0.0;
        _1769 = 0.0;
        _1770 = 0.0;
    }
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1457)) + _1457;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1458)) + _1458;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1459)) + _1459;
    float _1803 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1780));
    float _1824 = _1051 * 0.5;
    float _1825 = _1052 * 0.5;
    float _1826 = _1053 * 0.5;
    float _1827 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1830 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1833 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1867;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1840 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1444, _1448, _1451, _1454));
        float _1844 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1446, _1449, _1452, _1455));
        float _1848 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1447, _1450, _1453, _1456));
        float _1855 = dot(vec4(cbModelParam._m0[39u]), vec4(_1824, _1825, _1826, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1878;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1869 = dot(vec4(cbModelParam._m0[40u]), vec4(_1824, _1825, _1826, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1882 = (_1878 * cbModelParam._m0[1u].x) + (_1867 * (1.0 - cbModelParam._m0[1u].x));
    float _1892 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1892 : min(cbModelParam._m0[25u].z, _1892));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1940 = fma(_1115, cbModelParam._m0[13u].z, fma(_1111, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107)) + cbModelParam._m0[13u].w;
        float _1944 = fma(_1115, cbModelParam._m0[14u].z, fma(_1111, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107)) + cbModelParam._m0[14u].w;
        float _1948 = fma(_1115, cbModelParam._m0[15u].z, fma(_1111, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107)) + cbModelParam._m0[15u].w;
        float _1951 = fma(_1053, cbModelParam._m0[13u].z, fma(_1052, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1051));
        float _1954 = fma(_1053, cbModelParam._m0[14u].z, fma(_1052, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1051));
        float _1957 = fma(_1053, cbModelParam._m0[15u].z, fma(_1052, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1051));
        float _1985;
        if (_1951 > 0.0)
        {
            _1985 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1985 = frontier_phi_17_15_ladder;
        }
        float _2187;
        if (_1954 > 0.0)
        {
            _2187 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2187 = frontier_phi_26_22_ladder;
        }
        float _2441;
        if (_1957 > 0.0)
        {
            _2441 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2441 = frontier_phi_38_33_ladder;
        }
        float _2443 = isnan(_2187) ? _1985 : (isnan(_1985) ? _2187 : min(_1985, _2187));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1951) + _1940;
        float _2449 = (_2444 * _1954) + _1944;
        float _2450 = (_2444 * _1957) + _1948;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2451;
        float _2455 = _2451 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 > _2455) || ((_2449 < _2453) || ((_2448 < _2453) || (_2448 > _2455))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1893);
            frontier_phi_16_38_ladder = _2578.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2578.x * cbModelParam._m0[1u].y;
        }
        _1973 = frontier_phi_16_38_ladder_2;
        _1975 = frontier_phi_16_38_ladder_1;
        _1977 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1051, _1052, _1053), _1893);
        _1973 = _1961.x * cbModelParam._m0[1u].y;
        _1975 = _1961.y * cbModelParam._m0[1u].y;
        _1977 = _1961.z * cbModelParam._m0[1u].y;
    }
    float _1981 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1982 = isnan(_1981) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1981 : min(cbModelParam._m0[25u].w, _1981));
    float _2071;
    float _2073;
    float _2075;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2035 = fma(_1115, cbModelParam._m0[21u].z, fma(_1111, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107)) + cbModelParam._m0[21u].w;
        float _2039 = fma(_1115, cbModelParam._m0[22u].z, fma(_1111, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107)) + cbModelParam._m0[22u].w;
        float _2043 = fma(_1115, cbModelParam._m0[23u].z, fma(_1111, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107)) + cbModelParam._m0[23u].w;
        float _2046 = fma(_1053, cbModelParam._m0[21u].z, fma(_1052, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1051));
        float _2049 = fma(_1053, cbModelParam._m0[22u].z, fma(_1052, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1051));
        float _2052 = fma(_1053, cbModelParam._m0[23u].z, fma(_1052, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1051));
        float _2192;
        if (_2046 > 0.0)
        {
            _2192 = abs((1.0 - _2035) / _2046);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2035 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2192 = frontier_phi_28_24_ladder;
        }
        float _2468;
        if (_2049 > 0.0)
        {
            _2468 = abs((1.0 - _2039) / _2049);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2039 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2468 = frontier_phi_40_35_ladder;
        }
        float _2681;
        if (_2052 > 0.0)
        {
            _2681 = abs((1.0 - _2043) / _2052);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2043 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2681 = frontier_phi_49_46_ladder;
        }
        float _2683 = isnan(_2468) ? _2192 : (isnan(_2192) ? _2468 : min(_2192, _2468));
        float _2684 = isnan(_2681) ? _2683 : (isnan(_2683) ? _2681 : min(_2683, _2681));
        float _2688 = (_2684 * _2046) + _2035;
        float _2689 = (_2684 * _2049) + _2039;
        float _2690 = (_2684 * _2052) + _2043;
        float _2691 = _2684 * 9.9999997473787516355514526367188e-05;
        float _2692 = (-1.0) - _2691;
        float _2694 = _2691 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2690 > _2694) || ((_2690 < _2692) || ((_2689 > _2694) || ((_2689 < _2692) || ((_2688 < _2692) || (_2688 > _2694))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2889 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2690, cbModelParam._m0[17u].z, fma(_2689, cbModelParam._m0[17u].y, _2688 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2690, cbModelParam._m0[18u].z, fma(_2689, cbModelParam._m0[18u].y, _2688 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2690, cbModelParam._m0[19u].z, fma(_2689, cbModelParam._m0[19u].y, _2688 * cbModelParam._m0[19u].x))), _1982);
            frontier_phi_25_49_ladder = _2889.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2889.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2889.x * cbModelParam._m0[1u].z;
        }
        _2071 = frontier_phi_25_49_ladder_2;
        _2073 = frontier_phi_25_49_ladder_1;
        _2075 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2055 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1051, _1052, _1053), _1982);
        _2071 = _2055.x * cbModelParam._m0[1u].z;
        _2073 = _2055.y * cbModelParam._m0[1u].z;
        _2075 = _2055.z * cbModelParam._m0[1u].z;
    }
    float _2088 = (((_1078 * _1027) + _1079) * _1043) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2090 = (((_1078 * _1029) + _1079) * _1043) * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2092 = (((_1078 * _1030) + _1079) * _1043) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2095 = fma(_2092, cbSceneParam._m0[89u].z, fma(_2090, cbSceneParam._m0[89u].y, _2088 * cbSceneParam._m0[89u].x));
    float _2098 = fma(_2092, cbSceneParam._m0[90u].z, fma(_2090, cbSceneParam._m0[90u].y, _2088 * cbSceneParam._m0[90u].x));
    float _2101 = fma(_2092, cbSceneParam._m0[91u].z, fma(_2090, cbSceneParam._m0[91u].y, _2088 * cbSceneParam._m0[91u].x));
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _1043 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2146 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2150 = _2113 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_866, _867, _868));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_866, _867, _868));
    float _4432 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4443 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2130].x * _2136) * _2171) + ((cbLight._m0[_2140].x * _2146) * _2169);
    float _2179 = ((_2136 * cbLight._m0[_2130].y) * _2171) + ((_2146 * cbLight._m0[_2140].y) * _2169);
    float _2180 = ((_2136 * cbLight._m0[_2130].z) * _2171) + ((_2146 * cbLight._m0[_2140].z) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2186)
    {
        _2197 = _2178;
        _2199 = _2179;
        _2201 = _2180;
    }
    else
    {
        uint _2205 = _2113 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4454 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2224 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2178;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2179;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2180;
    }
    bool _2204 = _2184.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2204)
    {
        _2242 = _2197;
        _2244 = _2199;
        _2246 = _2201;
    }
    else
    {
        uint _2412 = _2113 + 7u;
        float _2428 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4470 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2431 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2242 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2197;
        _2244 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2199;
        _2246 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2201;
    }
    uint _2249 = _2113 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _869) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2113].x + _945;
    float _2265 = cbLight._m0[_2113].y + _946;
    float _2266 = cbLight._m0[_2113].z + _947;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2113].xyz));
    float _4486 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _4497 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _2278 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2279 = dot(vec3(_866, _867, _868), vec3(_2271, _2272, _2273));
    float _4508 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2271, _2272, _2273));
    float _4519 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
    float _2300 = 0.959999978542327880859375 - _1024;
    float _2302 = 0.959999978542327880859375 - _1025;
    float _2303 = 0.959999978542327880859375 - _1026;
    float _2310 = 1.0 - _2263;
    float _2321 = (0.5 / (((_2278 * ((_2277 * _2310) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2310) + _2263) * _2277))) * _2277;
    float _4530 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2334 = _2113 + 9u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _869) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2150].x + _945;
    float _2348 = cbLight._m0[_2150].y + _946;
    float _2349 = cbLight._m0[_2150].z + _947;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2150].xyz));
    float _4541 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2361 = dot(vec3(_866, _867, _868), vec3(_2354, _2355, _2356));
    float _4552 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2354, _2355, _2356));
    float _4563 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2346 * _2346;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
    float _2387 = 1.0 - _2346;
    float _2397 = (0.5 / (((_2278 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2387) + _2346) * _2360))) * _2360;
    float _4574 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    float _2409 = (((((_2380 * _2300) + _1027) * cbLight._m0[_2334].x) * _2399) * _2136) + (((((_2299 * _2300) + _1027) * cbLight._m0[_2249].x) * _2323) * _2146);
    float _2410 = (((((_2380 * _2302) + _1029) * cbLight._m0[_2334].y) * _2399) * _2136) + (((((_2299 * _2302) + _1029) * cbLight._m0[_2249].y) * _2323) * _2146);
    float _2411 = (((((_2380 * _2303) + _1030) * cbLight._m0[_2334].z) * _2399) * _2136) + (((((_2299 * _2303) + _1030) * cbLight._m0[_2249].z) * _2323) * _2146);
    float _2473;
    float _2475;
    float _2477;
    if (_2186)
    {
        _2473 = _2409;
        _2475 = _2410;
        _2477 = _2411;
    }
    else
    {
        uint _2479 = _2113 + 2u;
        uint _2483 = _2113 + 10u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _869) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _945;
        float _2500 = cbLight._m0[_2479].y + _946;
        float _2501 = cbLight._m0[_2479].z + _947;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2479].xyz));
        float _4585 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2513 = dot(vec3(_866, _867, _868), vec3(_2506, _2507, _2508));
        float _4596 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4607 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2278 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2539) + _2498) * _2512))) * _2512;
        float _4618 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2473 = (((((_2532 * _2300) + _1027) * cbLight._m0[_2483].x) * _2551) * _2552) + _2409;
        _2475 = (((((_2532 * _2302) + _1029) * cbLight._m0[_2483].y) * _2551) * _2552) + _2410;
        _2477 = (((((_2532 * _2303) + _1030) * cbLight._m0[_2483].z) * _2551) * _2552) + _2411;
    }
    float _2587;
    float _2589;
    float _2591;
    if (_2204)
    {
        _2587 = _2473;
        _2589 = _2475;
        _2591 = _2477;
    }
    else
    {
        uint _2598 = _2113 + 3u;
        uint _2602 = _2113 + 11u;
        float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2598].w)) * _869) * 0.949999988079071044921875);
        float _2617 = _2616 * _2616;
        float _2618 = cbLight._m0[_2598].x + _945;
        float _2619 = cbLight._m0[_2598].y + _946;
        float _2620 = cbLight._m0[_2598].z + _947;
        float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
        float _2625 = _2624 * _2618;
        float _2626 = _2624 * _2619;
        float _2627 = _2624 * _2620;
        float _2628 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2598].xyz));
        float _4634 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2632 = dot(vec3(_866, _867, _868), vec3(_2625, _2626, _2627));
        float _4645 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2636 = dot(vec3(cbLight._m0[_2598].xyz), vec3(_2625, _2626, _2627));
        float _4656 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2640 = _2617 * _2617;
        float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
        float _2651 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2658 = 1.0 - _2617;
        float _2668 = (0.5 / (((_2278 * ((_2631 * _2658) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2658) + _2617) * _2631))) * _2631;
        float _4667 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2670 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
        float _2671 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2587 = (((((_2651 * _2300) + _1027) * cbLight._m0[_2602].x) * _2670) * _2671) + _2473;
        _2589 = (((((_2651 * _2302) + _1029) * cbLight._m0[_2602].y) * _2670) * _2671) + _2475;
        _2591 = (((((_2651 * _2303) + _1030) * cbLight._m0[_2602].z) * _2670) * _2671) + _2477;
    }
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_2111.y == 0u)
    {
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2746;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2746;
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2746;
        uvec4 _2761 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2762 = _2761.x;
        uint _2773 = uint((float(_2761.y) * floor(float(uint(cbSceneParam._m0[85u].y * _966) / _2762))) + floor(float(uint(cbSceneParam._m0[85u].x * _965) / _2762)));
        float _2783 = (log2(_2749 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2784 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        uint _2787 = uint(isnan(14.0) ? _2784 : (isnan(_2784) ? 14.0 : min(_2784, 14.0)));
        uvec4 _2792 = texelFetch(g_lightClusterGridBuffer, int(((_2787 << 2u) + (_2773 << 6u)) >> 2u));
        uint _2793 = _2792.x;
        uint _2794 = _2761.z;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((((1u << ((_2794 >> 4u) & 15u)) + 4294967295u) & _2793) == 0u) || ((_2794 & 240u) == 0u))
        {
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
        }
        else
        {
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            uint _3052 = 0u;
            uint _3061;
            bool _3062;
            for (;;)
            {
                _3061 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                _3062 = _3061 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3062)
                {
                    frontier_phi_66_pred = _3046;
                    frontier_phi_66_pred_1 = _3051;
                    frontier_phi_66_pred_2 = _3050;
                    frontier_phi_66_pred_3 = _3049;
                    frontier_phi_66_pred_4 = _3048;
                    frontier_phi_66_pred_5 = _3047;
                }
                else
                {
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    uint _3197;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3061;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    for (;;)
                    {
                        uint _3201 = uint(findLSB(_3197)) + (_3052 << 5u);
                        uint _3198 = (_3197 + 4294967295u) & _3197;
                        uint _3203 = _3201 * 48u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3223 = (_3201 * 48u) + 4u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3242 = (_3201 * 48u) + 8u;
                        vec3 _3253 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x));
                        float _3257 = _3217.x - _2747;
                        float _3258 = _3217.y - _2748;
                        float _3259 = _3217.z - _2749;
                        float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                        float _3263 = inversesqrt(_3260);
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3267 = dot(vec3(_984, _987, _990), vec3(_3264, _3265, _3266));
                        float _3272 = 1.0 - (_3260 * _3217.w);
                        float _4693 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3274 = sqrt(_3260) * _3236.w;
                        float _3277 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3267) + _3278;
                        float _3284 = _3274 * _3274;
                        float _3288 = ((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3273) / ((_3284 * 0.699999988079071044921875) + 1.0);
                        float _3292 = (-0.0) - _2747;
                        float _3293 = (-0.0) - _2748;
                        float _3294 = (-0.0) - _2749;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3309 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                        float _3310 = 1.0 - _1059;
                        float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                        float _3318 = _3317 * _3317;
                        float _3319 = _3318 * _3318;
                        float _3320 = _3299 + _3264;
                        float _3321 = _3300 + _3265;
                        float _3322 = _3301 + _3266;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3330 = dot(vec3(_984, _987, _990), vec3(_3299, _3300, _3301));
                        float _4709 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3334 = dot(vec3(_984, _987, _990), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                        float _4720 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                        float _3342 = _3277 * _3318;
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3267) + _3343;
                        float _4731 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3348 = 1.0 - _3318;
                        float _3358 = (0.5 / (((_3347 * ((_3333 * _3348) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3318) * _3333))) * _3347;
                        float _4742 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3369 = (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3341 * _3341) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125))) * _3273;
                        _3121 = (_3288 * _3236.x) + _3194;
                        _3122 = (_3288 * _3236.y) + _3195;
                        _3123 = (_3288 * _3236.z) + _3196;
                        _3118 = (_3369 * _3253.x) + _3191;
                        _3119 = (_3369 * _3253.y) + _3192;
                        _3120 = (_3369 * _3253.z) + _3193;
                        if (_3198 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3198;
                        }
                    }
                    frontier_phi_66_pred = _3118;
                    frontier_phi_66_pred_1 = _3123;
                    frontier_phi_66_pred_2 = _3122;
                    frontier_phi_66_pred_3 = _3121;
                    frontier_phi_66_pred_4 = _3120;
                    frontier_phi_66_pred_5 = _3119;
                }
                _2895 = frontier_phi_66_pred;
                _2905 = frontier_phi_66_pred_1;
                _2903 = frontier_phi_66_pred_2;
                _2901 = frontier_phi_66_pred_3;
                _2899 = frontier_phi_66_pred_4;
                _2897 = frontier_phi_66_pred_5;
                uint _3053 = _3052 + 1u;
                if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3046 = _2895;
                    _3047 = _2897;
                    _3048 = _2899;
                    _3049 = _2901;
                    _3050 = _2903;
                    _3051 = _2905;
                    _3052 = _3053;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
        }
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.z;
        uint _2911 = (_2909 >> 8u) & 15u;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((4294967295u << _2911) & _2793) == 0u)
        {
            _3014 = _2894;
            _3016 = _2896;
            _3018 = _2898;
            _3020 = _2900;
            _3022 = _2902;
            _3024 = _2904;
        }
        else
        {
            float _3039 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
            float _3040 = _3039 * _2747;
            float _3041 = _3039 * _2748;
            float _3042 = _3039 * _2749;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2911 < ((_2909 >> 12u) & 15u))
            {
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3174 = _2894;
                float _3175 = _2896;
                float _3176 = _2898;
                float _3177 = _2900;
                float _3178 = _2902;
                float _3179 = _2904;
                uint _3180 = _2911;
                uint _3189;
                bool _3190;
                for (;;)
                {
                    _3189 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                    _3190 = _3189 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3190)
                    {
                        frontier_phi_77_pred = _3179;
                        frontier_phi_77_pred_1 = _3178;
                        frontier_phi_77_pred_2 = _3177;
                        frontier_phi_77_pred_3 = _3176;
                        frontier_phi_77_pred_4 = _3175;
                        frontier_phi_77_pred_5 = _3174;
                    }
                    else
                    {
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        float _3399 = _3177;
                        float _3400 = _3178;
                        float _3401 = _3179;
                        uint _3402 = _3189;
                        uint _3403;
                        vec4 _3428;
                        float _3429;
                        vec4 _3444;
                        vec3 _3456;
                        vec4 _3471;
                        vec4 _3486;
                        float _3532;
                        bool _3533;
                        for (;;)
                        {
                            uint _3413 = ((_3180 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3402));
                            _3403 = (_3402 + 4294967295u) & _3402;
                            uint _3415 = _3413 * 40u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3429 = _3428.w;
                            uint _3431 = (_3413 * 40u) + 4u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3413 * 40u) + 8u;
                            _3456 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x));
                            uint _3458 = (_3413 * 40u) + 16u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3413 * 40u) + 20u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3413 * 40u) + 24u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3507 = (_3413 * 40u) + 28u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3532 = fma(_2749, _3520.z, fma(_2748, _3520.y, _3520.x * _2747)) + _3520.w;
                            _3533 = !((fma(_2749, _3501.z, fma(_2748, _3501.y, _3501.x * _2747)) + _3501.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3533)
                            {
                                float _3560 = _3428.x - _2747;
                                float _3561 = _3428.y - _2748;
                                float _3562 = _3428.z - _2749;
                                float _3563 = dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562));
                                float _3566 = inversesqrt(_3563);
                                float _3567 = _3566 * _3560;
                                float _3568 = _3566 * _3561;
                                float _3569 = _3566 * _3562;
                                float _3573 = 1.0 - (_3563 / (_3429 * _3429));
                                float _4753 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3578 = sqrt(_3563) * _3444.w;
                                float _3580 = 1.39999997615814208984375 / (_3578 + 1.39999997615814208984375);
                                float _3581 = _3580 * _3580;
                                float _3584 = ((1.0 - _3581) * dot(vec3(_3567, _3568, _3569), vec3(_984, _987, _990))) + _3581;
                                float _3587 = _3578 * _3578;
                                float _3591 = (fma(_2749, _3471.z, fma(_2748, _3471.y, _3471.x * _2747)) + _3471.w) / _3532;
                                float _3592 = (fma(_2749, _3486.z, fma(_2748, _3486.y, _3486.x * _2747)) + _3486.w) / _3532;
                                float _3596 = 1.0 - dot(vec2(_3591, _3592), vec2(_3591, _3592));
                                float _4769 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3598 = _3597 * (((isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0))) * _3574) / ((_3587 * 0.699999988079071044921875) + 1.0));
                                float _3610 = exp2(log2(1.0 / ((_3587 * 3.5) + 5.0)) * 0.25);
                                float _3611 = 1.0 - _1059;
                                float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                                float _3619 = _3618 * _3618;
                                float _3620 = _3619 * _3619;
                                float _3621 = _3567 - _3040;
                                float _3622 = _3568 - _3041;
                                float _3623 = _3569 - _3042;
                                float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                                float _3631 = dot(vec3(_984, _987, _990), vec3((-0.0) - _3040, (-0.0) - _3041, (-0.0) - _3042));
                                float _4780 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3635 = dot(vec3(_984, _987, _990), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                                float _4791 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                                float _3643 = _3580 * _3619;
                                float _3644 = _3643 * _3643;
                                float _3650 = ((1.0 - _3644) * dot(vec3(_984, _987, _990), vec3(_3567, _3568, _3569))) + _3644;
                                float _4802 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3652 = 1.0 - _3619;
                                float _3662 = (0.5 / (((_3651 * ((_3634 * _3652) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3651 * _3652) + _3619) * _3634))) * _3651;
                                float _4813 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3672 = (_3597 * _3574) * (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3642 * _3642) * ((_3587 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3598 * _3444.y;
                                frontier_phi_83_pred_1 = _3598 * _3444.x;
                                frontier_phi_83_pred_2 = _3672 * _3456.z;
                                frontier_phi_83_pred_3 = _3672 * _3456.y;
                                frontier_phi_83_pred_4 = _3672 * _3456.x;
                                frontier_phi_83_pred_5 = _3598 * _3444.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3680 = frontier_phi_83_pred;
                            _3679 = frontier_phi_83_pred_1;
                            _3678 = frontier_phi_83_pred_2;
                            _3677 = frontier_phi_83_pred_3;
                            _3676 = frontier_phi_83_pred_4;
                            _3681 = frontier_phi_83_pred_5;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3385 = _3678 + _3398;
                            if (_3403 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3403;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3388;
                        frontier_phi_77_pred_1 = _3387;
                        frontier_phi_77_pred_2 = _3386;
                        frontier_phi_77_pred_3 = _3385;
                        frontier_phi_77_pred_4 = _3384;
                        frontier_phi_77_pred_5 = _3383;
                    }
                    _3025 = frontier_phi_77_pred;
                    _3023 = frontier_phi_77_pred_1;
                    _3021 = frontier_phi_77_pred_2;
                    _3019 = frontier_phi_77_pred_3;
                    _3017 = frontier_phi_77_pred_4;
                    _3015 = frontier_phi_77_pred_5;
                    uint _3181 = _3180 + 1u;
                    if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3174 = _3015;
                        _3175 = _3017;
                        _3176 = _3019;
                        _3177 = _3021;
                        _3178 = _3023;
                        _3179 = _3025;
                        _3180 = _3181;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3019;
                frontier_phi_58_59_ladder_1 = _3025;
                frontier_phi_58_59_ladder_2 = _3023;
                frontier_phi_58_59_ladder_3 = _3021;
                frontier_phi_58_59_ladder_4 = _3017;
                frontier_phi_58_59_ladder_5 = _3015;
            }
            else
            {
                frontier_phi_58_59_ladder = _2898;
                frontier_phi_58_59_ladder_1 = _2904;
                frontier_phi_58_59_ladder_2 = _2902;
                frontier_phi_58_59_ladder_3 = _2900;
                frontier_phi_58_59_ladder_4 = _2896;
                frontier_phi_58_59_ladder_5 = _2894;
            }
            _3014 = frontier_phi_58_59_ladder_5;
            _3016 = frontier_phi_58_59_ladder_4;
            _3018 = frontier_phi_58_59_ladder;
            _3020 = frontier_phi_58_59_ladder_3;
            _3022 = frontier_phi_58_59_ladder_2;
            _3024 = frontier_phi_58_59_ladder_1;
        }
        float _3029 = isnan(1.0) ? _1043 : (isnan(_1043) ? 1.0 : min(_1043, 1.0));
        _2806 = (_3029 * _3020) + _2242;
        _2808 = (_3029 * _3022) + _2244;
        _2810 = (_3029 * _3024) + _2246;
        _2812 = ((_3014 * _1027) * _3029) + _2587;
        _2814 = ((_3016 * _1029) * _3029) + _2589;
        _2816 = ((_3018 * _1030) * _3029) + _2591;
    }
    else
    {
        _2806 = _2242;
        _2808 = _2244;
        _2810 = _2246;
        _2812 = _2587;
        _2814 = _2589;
        _2816 = _2591;
    }
    float _4829 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _4840 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _4851 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2833 = ((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2806 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1043))) + ((_2812 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1882)) * cbPerFrame._m0[3u].x);
    float _2834 = ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2808 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1043))) + ((_2814 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1882)) * cbPerFrame._m0[3u].x);
    float _2835 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2810 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1043))) + ((_2816 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1882)) * cbPerFrame._m0[3u].x);
    uint _2836 = _261 + 6u;
    float _2844 = _965 / cbSceneParam._m0[86u].x;
    float _2845 = _966 / cbSceneParam._m0[86u].y;
    vec4 _2859 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2861 = _2859.x;
    float _2862 = _2859.y;
    float _2863 = _2859.z;
    float _2864 = _2859.w;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _2919 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _2920 = _2919 / _888;
        float _2931 = _2920 * _938;
        float _2932 = _939 * _2920;
        float _2933 = (-0.0) - _2932;
        float _2934 = _2920 * _940;
        float _2936 = (cbSceneParam._m0[77u].w * _2933) / _2919;
        float _2937 = _2936 + cbSceneParam._m0[79u].w;
        float _2938 = cbSceneParam._m0[79u].w - _2932;
        float _2944 = sqrt(((_2931 * _2931) + (_2932 * _2932)) + (_2934 * _2934));
        float _2947 = (1.0 - (cbSceneParam._m0[77u].w / _2919)) * _2944;
        float _2952 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2954 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3131;
        if (abs((_2933 - _2936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3131 = ((((_2937 > 0.0) ? exp2(_2952 * _2937) : (2.0 - exp2(_2954 * _2937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2947;
        }
        else
        {
            float _3075 = 1.0 / cbSceneParam._m0[80u].x;
            float _3076 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : max(_2937, _2938));
            float _3077 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : min(_2937, _2938));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            _3131 = ((abs(_2944 / _2933) * cbSceneParam._m0[80u].y) * ((((_3086 - _3087) * 2.0) - ((exp2(_2952 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0)))) - exp2(_2952 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))))) * _3075)) - ((exp2(_2954 * _3086) - exp2(_2954 * _3087)) * _3075))) + (_2947 * cbSceneParam._m0[80u].z);
        }
        vec4 _3133 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, 1.0), 0.0);
        float _3142 = exp2((_3131 * (-1.44269502162933349609375)) * (1.0 - _3133.w));
        float _3143 = log2(_3142);
        float _3159 = log2(_2864);
        _2956 = (exp2(_3159 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].x)) * _3133.x) / cbSceneParam._m0[78u].x)) + _2861;
        _2958 = (exp2(_3159 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].y)) * _3133.y) / cbSceneParam._m0[78u].y)) + _2862;
        _2960 = (exp2(_3159 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3143 * cbSceneParam._m0[78u].z)) * _3133.z) / cbSceneParam._m0[78u].z)) + _2863;
        _2962 = _3142 * _2864;
    }
    else
    {
        _2956 = _2861;
        _2958 = _2862;
        _2960 = _2863;
        _2962 = _2864;
    }
    bool _3169;
    vec4 _2972;
    vec4 _2994;
    float _2996;
    float _3000;
    float _3001;
    float _3002;
    float _3003;
    bool _3013;
    for (;;)
    {
        _2972 = cbMatDynParam._m0[0u];
        float _2974 = roundEven(_2972.y);
        bool _2975 = _2974 == 3.0;
        float _2976 = log2(_2962);
        float _2983 = exp2(_2976 * cbSceneParam._m0[78u].x) * _2833;
        float _2984 = exp2(_2976 * cbSceneParam._m0[78u].y) * _2834;
        float _2985 = exp2(_2976 * cbSceneParam._m0[78u].z) * _2835;
        float _2992 = _954 + (-0.5);
        _2994 = cbMtdParam._m0[1u];
        _2996 = _2994.y * _2992;
        float _2999 = (_2974 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3000 = _2999 * (_2975 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2956)));
        _3001 = _2999 * (_2975 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2958)));
        _3002 = _2999 * (_2975 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2960)));
        _3003 = _2992 * 0.999000012874603271484375;
        _3013 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3013)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3003) < 0.5)
            {
                _3169 = true;
                break;
            }
        }
        uint _3110 = _1003 + uint(_2972.w);
        if ((cbInstanceData._m0[_3110].w < 1.0) && ((cbInstanceData._m0[_3110].w + _3003) < 0.5))
        {
            _3169 = true;
            break;
        }
        if ((_2996 + 1.0) < _2994.x)
        {
            _3169 = true;
            break;
        }
        _3169 = false;
        break;
    }
    float _3374;
    if (_3169)
    {
        discard_state = true;
        _3374 = 0.0;
    }
    else
    {
        _3374 = cbInstanceData._m0[_2836].w;
    }
    SV_Target.x = _3000;
    SV_Target.y = _3001;
    SV_Target.z = _3002;
    SV_Target.w = _3374;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2836].w;
    discard_exit();
}


