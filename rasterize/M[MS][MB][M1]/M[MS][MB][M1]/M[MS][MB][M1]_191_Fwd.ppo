#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1449;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].y) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3775 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _408 = (_401 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _409 = (_401 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _410 = (_401 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _459 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _473 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_449 - _459) * cbMtdParam._m0[24u].y) + _459) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3786 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _481 = (_474 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _482 = (_474 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _483 = (_474 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    float _551 = ((_523.x - _542) * _401) + _542;
    float _552 = ((_523.y - _543) * _401) + _543;
    float _553 = ((_523.z - _544) * _401) + _544;
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _578 = ((_565.z - _553) * _474) + _553;
    float _581 = ((((_565.x - _551) * _474) + _551) * 2.0) + (-1.0);
    float _582 = ((((_565.y - _552) * _474) + _552) * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3797 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))));
    vec4 _602 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _627 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _636 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _639 = ((isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : min(_636, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _648 = (_639 - ((((((_629 - _630) * cbMtdParam._m0[24u].z) + _630) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _639))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3818 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _656 = (_649 * (cbMtdParam._m0[17u].x - _481)) + _481;
    float _657 = (_649 * (cbMtdParam._m0[17u].y - _482)) + _482;
    float _658 = (_649 * (cbMtdParam._m0[17u].z - _483)) + _483;
    vec4 _670 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _700 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_672 - _673) * cbMtdParam._m0[24u].w) + _673) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3829 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _709 = ((((cbMtdParam._m0[10u].x - _656) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _701) + _656;
    float _710 = ((((cbMtdParam._m0[10u].y - _657) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _701) + _657;
    float _711 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _658)) * _701) + _658;
    vec4 _737 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _739 = _737.x;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _739) * _401) + _739;
    float _774 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _757) * _474) + _757;
    float _778 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _774) * cbMtdParam._m0[19u].z) + _774;
    float _780 = _778 - (_778 * _649);
    float _782 = _780 - (_780 * _701);
    float _787 = (((_500.z - _578) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _578;
    float _791 = ((_602.z - _787) * cbMtdParam._m0[19u].w) + _787;
    vec4 _805 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _812 = (_805.x * 2.0) + (-1.0);
    float _813 = (_805.y * 2.0) + (-1.0);
    float _814 = dot(vec2(_812, _813), vec2(_812, _813));
    float _3840 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _822 = (_649 * (_805.z - _791)) + _791;
    float _825 = ((cbMtdParam._m0[23u].y - _822) * _701) + _822;
    vec4 _844 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _850 = (_844.x * 2.0) + (-1.0);
    float _851 = (_844.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _3851 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _866 = (_581 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_500.x * 2.0) + (-1.0)))) + (((_602.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _867 = (_582 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_500.y * 2.0) + (-1.0)))) + (((_602.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _879 = (((_812 - _866) + (cbMtdParam._m0[21u].x * _866)) * _649) + _866;
    float _880 = (((_813 - _867) + (cbMtdParam._m0[21u].x * _867)) * _649) + _867;
    float _881 = (_649 * (sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) - _588)) + _588;
    float _892 = (((_850 - _879) + (_879 * cbMtdParam._m0[22u].z)) * _701) + _879;
    float _893 = (((_851 - _880) + (_880 * cbMtdParam._m0[22u].z)) * _701) + _880;
    float _894 = ((sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) - _881) * _701) + _881;
    float _896 = cbMtdParam._m0[22u].x + _602.w;
    float _899 = fma(_894, _250 * NORMAL.x, fma(_893, _257 * TANGENT.x, (_243 * _235) * _892));
    float _902 = fma(_894, _250 * NORMAL.y, fma(_893, _257 * TANGENT.y, (_243 * _236) * _892));
    float _905 = fma(_894, _250 * NORMAL.z, fma(_893, _257 * TANGENT.z, (_243 * _237) * _892));
    float _909 = inversesqrt(dot(vec3(_899, _902, _905), vec3(_899, _902, _905)));
    float _910 = _909 * _899;
    float _911 = _909 * _902;
    float _912 = _909 * _905;
    float _3862 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _913 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _3884 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3895 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _3906 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3917 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _918 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _932 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _982 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _972);
    float _983 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _972);
    float _984 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _972);
    float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
    float _989 = _982 * _988;
    float _990 = _983 * _988;
    float _991 = _984 * _988;
    float _997 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _998 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1016 = fma(_912, cbSceneParam._m0[5u].z, fma(_911, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _910));
    float _1019 = fma(_912, cbSceneParam._m0[6u].z, fma(_911, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _910));
    float _1022 = fma(_912, cbSceneParam._m0[7u].z, fma(_911, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _910));
    uint _1036 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1042 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_1036].x;
    float _1043 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_1036].y;
    float _1044 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_1036].z;
    float _3928 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1048 = 1.0 - _918;
    float _1049 = _1045 * _1048;
    float _1050 = _1046 * _1048;
    float _1051 = _1047 * _1048;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _918;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _918;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _918;
    float _1059 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    vec4 _1071 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _997, cbSceneParam._m0[86u].y * _998));
    float _1075 = ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * TEXCOORD_5.w) * _1071.x;
    float _1076 = dot(vec3(_910, _911, _912), vec3(_989, _990, _991));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _910) - _989;
    float _1084 = (_1079 * _911) - _990;
    float _1085 = (_1079 * _912) - _991;
    float _1089 = abs(dot(vec3(_989, _990, _991), vec3(_910, _911, _912)));
    float _3961 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_913);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1110 = (1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1111 = _1104 * _1091;
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1448;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1173 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1177 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1181 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1206 = _1139 + _910;
        float _1207 = _1143 + _911;
        float _1208 = _1147 + _912;
        float _1218 = fma(_1208, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1206)) - _1173;
        float _1219 = fma(_1208, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1206)) - _1177;
        float _1220 = fma(_1208, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1206)) - _1181;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1173 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1177 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[34u].z) + ((((((_1181 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1276 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1242.x + (-0.5));
        float _1278 = _1276 * (_1242.y + (-0.5));
        float _1279 = _1276 * (_1242.z + (-0.5));
        float _1286 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1249.x + (-0.5));
        float _1288 = _1286 * (_1249.y + (-0.5));
        float _1289 = _1286 * (_1249.z + (-0.5));
        float _1296 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1256.x + (-0.5));
        float _1298 = _1296 * (_1256.y + (-0.5));
        float _1299 = _1296 * (_1256.z + (-0.5));
        float _1306 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1263.x + (-0.5));
        float _1308 = _1306 * (_1263.y + (-0.5));
        float _1309 = _1306 * (_1263.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1330 = (dot(vec3(_910, _911, _912), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1340 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4009 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1342 + 1.0))) + _1347) * _1310;
        float _1357 = _1278 * 0.5;
        float _1358 = _1288 * 0.5;
        float _1359 = _1298 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_910, _911, _912), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4042 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1384 + 1.0))) + _1389) * _1311;
        float _1399 = _1279 * 0.5;
        float _1400 = _1289 * 0.5;
        float _1401 = _1299 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_910, _911, _912), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4075 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1426 + 1.0))) + _1431) * _1312;
        _1448 = _1279;
        _1450 = _1278;
        _1451 = _1277;
        _1452 = _1289;
        _1453 = _1288;
        _1454 = _1287;
        _1455 = _1299;
        _1456 = _1298;
        _1457 = _1297;
        _1458 = _1312;
        _1459 = _1311;
        _1460 = _1310;
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1449;
        _1450 = _1449;
        _1451 = _1449;
        _1452 = _1449;
        _1453 = _1449;
        _1454 = _1449;
        _1455 = _1449;
        _1456 = _1449;
        _1457 = _1449;
        _1458 = _1449;
        _1459 = _1449;
        _1460 = _1449;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1487 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1491 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1495 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1518 = _1139 + _910;
        float _1519 = _1143 + _911;
        float _1520 = _1147 + _912;
        float _1530 = fma(_1520, cbModelParam._m0[30u].z, fma(_1519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1518)) - _1487;
        float _1531 = fma(_1520, cbModelParam._m0[31u].z, fma(_1519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1518)) - _1491;
        float _1532 = fma(_1520, cbModelParam._m0[32u].z, fma(_1519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1518)) - _1495;
        float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
        float _1549 = ((_1536 * _1530) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1487 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1536 * _1531) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1491 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1536 * _1532) / cbModelParam._m0[35u].z) + ((((((_1495 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        float _1586 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1553.x + (-0.5));
        float _1588 = _1586 * (_1553.y + (-0.5));
        float _1589 = _1586 * (_1553.z + (-0.5));
        float _1596 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1560.x + (-0.5));
        float _1598 = _1596 * (_1560.y + (-0.5));
        float _1599 = _1596 * (_1560.z + (-0.5));
        float _1606 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1567.x + (-0.5));
        float _1608 = _1606 * (_1567.y + (-0.5));
        float _1609 = _1606 * (_1567.z + (-0.5));
        float _1616 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1574.x + (-0.5));
        float _1618 = _1616 * (_1574.y + (-0.5));
        float _1619 = _1616 * (_1574.z + (-0.5));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = _1587 * 0.5;
        float _1624 = _1597 * 0.5;
        float _1625 = _1607 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_910, _911, _912), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4138 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1650 + 1.0))) + _1655) * _1620;
        float _1665 = _1588 * 0.5;
        float _1666 = _1598 * 0.5;
        float _1667 = _1608 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_910, _911, _912), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4171 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1692 + 1.0))) + _1697) * _1621;
        float _1707 = _1589 * 0.5;
        float _1708 = _1599 * 0.5;
        float _1709 = _1609 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_910, _911, _912), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4204 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1734 + 1.0))) + _1739) * _1622;
        _1756 = _1589;
        _1757 = _1588;
        _1758 = _1587;
        _1759 = _1599;
        _1760 = _1598;
        _1761 = _1597;
        _1762 = _1609;
        _1763 = _1608;
        _1764 = _1607;
        _1765 = _1622;
        _1766 = _1621;
        _1767 = _1620;
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
    }
    else
    {
        _1756 = _1449;
        _1757 = _1449;
        _1758 = _1449;
        _1759 = _1449;
        _1760 = _1449;
        _1761 = _1449;
        _1762 = _1449;
        _1763 = _1449;
        _1764 = _1449;
        _1765 = _1449;
        _1766 = _1449;
        _1767 = _1449;
        _1768 = 0.0;
        _1769 = 0.0;
        _1770 = 0.0;
    }
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1461)) + _1461;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1462)) + _1462;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1463)) + _1463;
    float _1803 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1780));
    float _1824 = _1083 * 0.5;
    float _1825 = _1084 * 0.5;
    float _1826 = _1085 * 0.5;
    float _1827 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1830 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1833 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1867;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1840 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1448, _1452, _1455, _1458));
        float _1844 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1848 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1855 = dot(vec4(cbModelParam._m0[39u]), vec4(_1824, _1825, _1826, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1878;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1869 = dot(vec4(cbModelParam._m0[40u]), vec4(_1824, _1825, _1826, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1882 = (_1878 * cbModelParam._m0[1u].x) + (_1867 * (1.0 - cbModelParam._m0[1u].x));
    float _1892 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _913);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1892 : min(cbModelParam._m0[25u].z, _1892));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1941 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1945 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1949 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1952 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1955 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1958 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _1986;
        if (_1952 > 0.0)
        {
            _1986 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1986 = frontier_phi_14_12_ladder;
        }
        float _2189;
        if (_1955 > 0.0)
        {
            _2189 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2189 = frontier_phi_23_19_ladder;
        }
        float _2443;
        if (_1958 > 0.0)
        {
            _2443 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2443 = frontier_phi_35_30_ladder;
        }
        float _2445 = isnan(_2189) ? _1986 : (isnan(_1986) ? _2189 : min(_1986, _2189));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1952) + _1941;
        float _2451 = (_2446 * _1955) + _1945;
        float _2452 = (_2446 * _1958) + _1949;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2453;
        float _2457 = _2453 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 > _2457) || ((_2451 < _2455) || ((_2450 < _2455) || (_2450 > _2457))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2452, cbModelParam._m0[9u].z, fma(_2451, cbModelParam._m0[9u].y, _2450 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2452, cbModelParam._m0[10u].z, fma(_2451, cbModelParam._m0[10u].y, _2450 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2452, cbModelParam._m0[11u].z, fma(_2451, cbModelParam._m0[11u].y, _2450 * cbModelParam._m0[11u].x))), _1893);
            frontier_phi_13_35_ladder = _2580.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2580.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2580.x * cbModelParam._m0[1u].y;
        }
        _1974 = frontier_phi_13_35_ladder_2;
        _1976 = frontier_phi_13_35_ladder_1;
        _1978 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1893);
        _1974 = _1962.x * cbModelParam._m0[1u].y;
        _1976 = _1962.y * cbModelParam._m0[1u].y;
        _1978 = _1962.z * cbModelParam._m0[1u].y;
    }
    float _1982 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _913);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1982 : min(cbModelParam._m0[25u].w, _1982));
    float _2073;
    float _2075;
    float _2077;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2037 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2041 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2045 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2048 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2051 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2054 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2194;
        if (_2048 > 0.0)
        {
            _2194 = abs((1.0 - _2037) / _2048);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2037 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2194 = frontier_phi_25_21_ladder;
        }
        float _2470;
        if (_2051 > 0.0)
        {
            _2470 = abs((1.0 - _2041) / _2051);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2041 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2470 = frontier_phi_37_32_ladder;
        }
        float _2683;
        if (_2054 > 0.0)
        {
            _2683 = abs((1.0 - _2045) / _2054);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2045 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2683 = frontier_phi_46_43_ladder;
        }
        float _2685 = isnan(_2470) ? _2194 : (isnan(_2194) ? _2470 : min(_2194, _2470));
        float _2686 = isnan(_2683) ? _2685 : (isnan(_2685) ? _2683 : min(_2685, _2683));
        float _2690 = (_2686 * _2048) + _2037;
        float _2691 = (_2686 * _2051) + _2041;
        float _2692 = (_2686 * _2054) + _2045;
        float _2693 = _2686 * 9.9999997473787516355514526367188e-05;
        float _2694 = (-1.0) - _2693;
        float _2696 = _2693 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2692 > _2696) || ((_2692 < _2694) || ((_2691 > _2696) || ((_2691 < _2694) || ((_2690 < _2694) || (_2690 > _2696))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2692, cbModelParam._m0[17u].z, fma(_2691, cbModelParam._m0[17u].y, _2690 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2692, cbModelParam._m0[18u].z, fma(_2691, cbModelParam._m0[18u].y, _2690 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2692, cbModelParam._m0[19u].z, fma(_2691, cbModelParam._m0[19u].y, _2690 * cbModelParam._m0[19u].x))), _1983);
            frontier_phi_22_46_ladder = _2891.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2891.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2891.x * cbModelParam._m0[1u].z;
        }
        _2073 = frontier_phi_22_46_ladder_2;
        _2075 = frontier_phi_22_46_ladder_1;
        _2077 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _1983);
        _2073 = _2057.x * cbModelParam._m0[1u].z;
        _2075 = _2057.y * cbModelParam._m0[1u].z;
        _2077 = _2057.z * cbModelParam._m0[1u].z;
    }
    float _2090 = (((_1110 * _1059) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2073 - _1974)) + _1974);
    float _2092 = (((_1110 * _1061) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2075 - _1976)) + _1976);
    float _2094 = (((_1110 * _1062) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2077 - _1978)) + _1978);
    float _2097 = fma(_2094, cbSceneParam._m0[89u].z, fma(_2092, cbSceneParam._m0[89u].y, _2090 * cbSceneParam._m0[89u].x));
    float _2100 = fma(_2094, cbSceneParam._m0[90u].z, fma(_2092, cbSceneParam._m0[90u].y, _2090 * cbSceneParam._m0[90u].x));
    float _2103 = fma(_2094, cbSceneParam._m0[91u].z, fma(_2092, cbSceneParam._m0[91u].y, _2090 * cbSceneParam._m0[91u].x));
    uvec4 _2113 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2115 = _2113.x * 14u;
    uint _2116 = _2115 + 13u;
    float _2123 = _1075 + (-1.0);
    float _2128 = (cbLight._m0[_2116].x * _2123) + 1.0;
    float _2129 = (cbLight._m0[_2116].y * _2123) + 1.0;
    float _2130 = (cbLight._m0[_2116].z * _2123) + 1.0;
    float _2131 = (cbLight._m0[_2116].w * _2123) + 1.0;
    uint _2132 = _2115 + 5u;
    float _2138 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2142 = _2115 + 4u;
    float _2148 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2152 = _2115 | 1u;
    float _2163 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_910, _911, _912));
    float _2166 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_910, _911, _912));
    float _4340 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _4351 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2171 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2173 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2180 = ((cbLight._m0[_2132].x * _2138) * _2173) + ((cbLight._m0[_2142].x * _2148) * _2171);
    float _2181 = ((_2138 * cbLight._m0[_2132].y) * _2173) + ((_2148 * cbLight._m0[_2142].y) * _2171);
    float _2182 = ((_2138 * cbLight._m0[_2132].z) * _2173) + ((_2148 * cbLight._m0[_2142].z) * _2171);
    uvec4 _2186 = floatBitsToUint(cbLight._m0[_2115 + 12u]);
    bool _2188 = _2186.x == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2188)
    {
        _2199 = _2180;
        _2201 = _2181;
        _2203 = _2182;
    }
    else
    {
        uint _2207 = _2115 + 6u;
        float _2223 = (dot(vec3(cbLight._m0[_2115 + 2u].xyz), vec3(_910, _911, _912)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4362 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2226 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2199 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2180;
        _2201 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2181;
        _2203 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2182;
    }
    bool _2206 = _2186.y == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2206)
    {
        _2244 = _2199;
        _2246 = _2201;
        _2248 = _2203;
    }
    else
    {
        uint _2414 = _2115 + 7u;
        float _2430 = (dot(vec3(cbLight._m0[_2115 + 3u].xyz), vec3(_910, _911, _912)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4378 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2433 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2244 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2199;
        _2246 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2201;
        _2248 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2203;
    }
    uint _2251 = _2115 + 8u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _913) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2115].x + _989;
    float _2267 = cbLight._m0[_2115].y + _990;
    float _2268 = cbLight._m0[_2115].z + _991;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2115].xyz));
    float _4394 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2280 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2281 = dot(vec3(_910, _911, _912), vec3(_2273, _2274, _2275));
    float _4416 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2273, _2274, _2275));
    float _4427 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2265 * _2265;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
    float _2302 = 0.959999978542327880859375 - _1056;
    float _2304 = 0.959999978542327880859375 - _1057;
    float _2305 = 0.959999978542327880859375 - _1058;
    float _2312 = 1.0 - _2265;
    float _2323 = (0.5 / (((_2280 * ((_2279 * _2312) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2312) + _2265) * _2279))) * _2279;
    float _4438 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    uint _2336 = _2115 + 9u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _913) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2152].x + _989;
    float _2350 = cbLight._m0[_2152].y + _990;
    float _2351 = cbLight._m0[_2152].z + _991;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2152].xyz));
    float _4449 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2363 = dot(vec3(_910, _911, _912), vec3(_2356, _2357, _2358));
    float _4460 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2367 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2356, _2357, _2358));
    float _4471 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = _2348 * _2348;
    float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
    float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
    float _2389 = 1.0 - _2348;
    float _2399 = (0.5 / (((_2280 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2389) + _2348) * _2362))) * _2362;
    float _4482 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
    float _2411 = (((((_2382 * _2302) + _1059) * cbLight._m0[_2336].x) * _2401) * _2138) + (((((_2301 * _2302) + _1059) * cbLight._m0[_2251].x) * _2325) * _2148);
    float _2412 = (((((_2382 * _2304) + _1061) * cbLight._m0[_2336].y) * _2401) * _2138) + (((((_2301 * _2304) + _1061) * cbLight._m0[_2251].y) * _2325) * _2148);
    float _2413 = (((((_2382 * _2305) + _1062) * cbLight._m0[_2336].z) * _2401) * _2138) + (((((_2301 * _2305) + _1062) * cbLight._m0[_2251].z) * _2325) * _2148);
    float _2475;
    float _2477;
    float _2479;
    if (_2188)
    {
        _2475 = _2411;
        _2477 = _2412;
        _2479 = _2413;
    }
    else
    {
        uint _2481 = _2115 + 2u;
        uint _2485 = _2115 + 10u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _913) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _989;
        float _2502 = cbLight._m0[_2481].y + _990;
        float _2503 = cbLight._m0[_2481].z + _991;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2481].xyz));
        float _4493 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2515 = dot(vec3(_910, _911, _912), vec3(_2508, _2509, _2510));
        float _4504 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4515 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0);
        float _2541 = 1.0 - _2500;
        float _2551 = (0.5 / (((_2280 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2541) + _2500) * _2514))) * _2514;
        float _4526 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2475 = (((((_2534 * _2302) + _1059) * cbLight._m0[_2485].x) * _2553) * _2554) + _2411;
        _2477 = (((((_2534 * _2304) + _1061) * cbLight._m0[_2485].y) * _2553) * _2554) + _2412;
        _2479 = (((((_2534 * _2305) + _1062) * cbLight._m0[_2485].z) * _2553) * _2554) + _2413;
    }
    float _2589;
    float _2591;
    float _2593;
    if (_2206)
    {
        _2589 = _2475;
        _2591 = _2477;
        _2593 = _2479;
    }
    else
    {
        uint _2600 = _2115 + 3u;
        uint _2604 = _2115 + 11u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _913) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _989;
        float _2621 = cbLight._m0[_2600].y + _990;
        float _2622 = cbLight._m0[_2600].z + _991;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2600].xyz));
        float _4542 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2634 = dot(vec3(_910, _911, _912), vec3(_2627, _2628, _2629));
        float _4553 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4564 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2280 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2660) + _2619) * _2633))) * _2633;
        float _4575 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2589 = (((((_2653 * _2302) + _1059) * cbLight._m0[_2604].x) * _2672) * _2673) + _2475;
        _2591 = (((((_2653 * _2304) + _1061) * cbLight._m0[_2604].y) * _2672) * _2673) + _2477;
        _2593 = (((((_2653 * _2305) + _1062) * cbLight._m0[_2604].z) * _2672) * _2673) + _2479;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2113.y == 0u)
    {
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2748;
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2748;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2748;
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _998) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _997) / _2764)));
        float _2785 = (log2(_2751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            uint _3047 = 0u;
            uint _3056;
            bool _3057;
            for (;;)
            {
                _3056 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                _3057 = _3056 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3057)
                {
                    frontier_phi_61_pred = _3041;
                    frontier_phi_61_pred_1 = _3046;
                    frontier_phi_61_pred_2 = _3045;
                    frontier_phi_61_pred_3 = _3044;
                    frontier_phi_61_pred_4 = _3043;
                    frontier_phi_61_pred_5 = _3042;
                }
                else
                {
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    uint _3171;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3056;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3175 = uint(findLSB(_3171)) + (_3047 << 5u);
                        uint _3172 = (_3171 + 4294967295u) & _3171;
                        uint _3177 = _3175 * 48u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3197 = (_3175 * 48u) + 4u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3216 = (_3175 * 48u) + 8u;
                        vec3 _3227 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x));
                        float _3231 = _3191.x - _2749;
                        float _3232 = _3191.y - _2750;
                        float _3233 = _3191.z - _2751;
                        float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                        float _3237 = inversesqrt(_3234);
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3241 = dot(vec3(_1016, _1019, _1022), vec3(_3238, _3239, _3240));
                        float _3246 = 1.0 - (_3234 * _3191.w);
                        float _4601 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3248 = sqrt(_3234) * _3210.w;
                        float _3251 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3241) + _3252;
                        float _3258 = _3248 * _3248;
                        float _3262 = ((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3247) / ((_3258 * 0.699999988079071044921875) + 1.0);
                        float _3266 = (-0.0) - _2749;
                        float _3267 = (-0.0) - _2750;
                        float _3268 = (-0.0) - _2751;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3283 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                        float _3284 = 1.0 - _1091;
                        float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                        float _3292 = _3291 * _3291;
                        float _3293 = _3292 * _3292;
                        float _3294 = _3273 + _3238;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3304 = dot(vec3(_1016, _1019, _1022), vec3(_3273, _3274, _3275));
                        float _4617 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3308 = dot(vec3(_1016, _1019, _1022), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                        float _4628 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                        float _3316 = _3251 * _3292;
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3241) + _3317;
                        float _4639 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3322 = 1.0 - _3292;
                        float _3332 = (0.5 / (((_3321 * ((_3307 * _3322) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3292) * _3307))) * _3321;
                        float _4650 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3343 = (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3315 * _3315) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125))) * _3247;
                        _3100 = (_3262 * _3210.x) + _3168;
                        _3101 = (_3262 * _3210.y) + _3169;
                        _3102 = (_3262 * _3210.z) + _3170;
                        _3097 = (_3343 * _3227.x) + _3165;
                        _3098 = (_3343 * _3227.y) + _3166;
                        _3099 = (_3343 * _3227.z) + _3167;
                        if (_3172 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3172;
                        }
                    }
                    frontier_phi_61_pred = _3097;
                    frontier_phi_61_pred_1 = _3102;
                    frontier_phi_61_pred_2 = _3101;
                    frontier_phi_61_pred_3 = _3100;
                    frontier_phi_61_pred_4 = _3099;
                    frontier_phi_61_pred_5 = _3098;
                }
                _2897 = frontier_phi_61_pred;
                _2907 = frontier_phi_61_pred_1;
                _2905 = frontier_phi_61_pred_2;
                _2903 = frontier_phi_61_pred_3;
                _2901 = frontier_phi_61_pred_4;
                _2899 = frontier_phi_61_pred_5;
                uint _3048 = _3047 + 1u;
                if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3041 = _2897;
                    _3042 = _2899;
                    _3043 = _2901;
                    _3044 = _2903;
                    _3045 = _2905;
                    _3046 = _2907;
                    _3047 = _3048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((4294967295u << _2913) & _2795) == 0u)
        {
            _3009 = _2896;
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
        }
        else
        {
            float _3034 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
            float _3035 = _3034 * _2749;
            float _3036 = _3034 * _2750;
            float _3037 = _3034 * _2751;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3148 = _2896;
                float _3149 = _2898;
                float _3150 = _2900;
                float _3151 = _2902;
                float _3152 = _2904;
                float _3153 = _2906;
                uint _3154 = _2913;
                uint _3163;
                bool _3164;
                for (;;)
                {
                    _3163 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                    _3164 = _3163 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3164)
                    {
                        frontier_phi_67_pred = _3151;
                        frontier_phi_67_pred_1 = _3152;
                        frontier_phi_67_pred_2 = _3153;
                        frontier_phi_67_pred_3 = _3150;
                        frontier_phi_67_pred_4 = _3149;
                        frontier_phi_67_pred_5 = _3148;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3361 = _3148;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        uint _3367 = _3163;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3436;
                        vec4 _3451;
                        float _3497;
                        bool _3498;
                        for (;;)
                        {
                            uint _3378 = ((_3154 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3423 = (_3378 * 40u) + 16u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3378 * 40u) + 20u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3378 * 40u) + 24u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3472 = (_3378 * 40u) + 28u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3497 = fma(_2751, _3485.z, fma(_2750, _3485.y, _3485.x * _2749)) + _3485.w;
                            _3498 = !((fma(_2751, _3466.z, fma(_2750, _3466.y, _3466.x * _2749)) + _3466.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3498)
                            {
                                float _3525 = _3393.x - _2749;
                                float _3526 = _3393.y - _2750;
                                float _3527 = _3393.z - _2751;
                                float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                                float _3531 = inversesqrt(_3528);
                                float _3532 = _3531 * _3525;
                                float _3533 = _3531 * _3526;
                                float _3534 = _3531 * _3527;
                                float _3538 = 1.0 - (_3528 / (_3394 * _3394));
                                float _4661 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3543 = sqrt(_3528) * _3409.w;
                                float _3545 = 1.39999997615814208984375 / (_3543 + 1.39999997615814208984375);
                                float _3546 = _3545 * _3545;
                                float _3549 = ((1.0 - _3546) * dot(vec3(_3532, _3533, _3534), vec3(_1016, _1019, _1022))) + _3546;
                                float _3552 = _3543 * _3543;
                                float _3556 = (fma(_2751, _3436.z, fma(_2750, _3436.y, _3436.x * _2749)) + _3436.w) / _3497;
                                float _3557 = (fma(_2751, _3451.z, fma(_2750, _3451.y, _3451.x * _2749)) + _3451.w) / _3497;
                                float _3561 = 1.0 - dot(vec2(_3556, _3557), vec2(_3556, _3557));
                                float _4677 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3563 = _3562 * (((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3539) / ((_3552 * 0.699999988079071044921875) + 1.0));
                                float _3575 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                                float _3576 = 1.0 - _1091;
                                float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                                float _3584 = _3583 * _3583;
                                float _3585 = _3584 * _3584;
                                float _3586 = _3532 - _3035;
                                float _3587 = _3533 - _3036;
                                float _3588 = _3534 - _3037;
                                float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                                float _3596 = dot(vec3(_1016, _1019, _1022), vec3((-0.0) - _3035, (-0.0) - _3036, (-0.0) - _3037));
                                float _4688 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3600 = dot(vec3(_1016, _1019, _1022), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                                float _4699 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                                float _3608 = _3545 * _3584;
                                float _3609 = _3608 * _3608;
                                float _3615 = ((1.0 - _3609) * dot(vec3(_1016, _1019, _1022), vec3(_3532, _3533, _3534))) + _3609;
                                float _4710 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3617 = 1.0 - _3584;
                                float _3627 = (0.5 / (((_3616 * ((_3599 * _3617) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3584) * _3599))) * _3616;
                                float _4721 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3637 = (_3562 * _3539) * (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3607 * _3607) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3637 * _3421.x;
                                frontier_phi_73_pred_1 = _3637 * _3421.y;
                                frontier_phi_73_pred_2 = _3563 * _3409.z;
                                frontier_phi_73_pred_3 = _3563 * _3409.y;
                                frontier_phi_73_pred_4 = _3563 * _3409.x;
                                frontier_phi_73_pred_5 = _3637 * _3421.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3641 = frontier_phi_73_pred;
                            _3642 = frontier_phi_73_pred_1;
                            _3646 = frontier_phi_73_pred_2;
                            _3645 = frontier_phi_73_pred_3;
                            _3644 = frontier_phi_73_pred_4;
                            _3643 = frontier_phi_73_pred_5;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3351;
                        frontier_phi_67_pred_1 = _3352;
                        frontier_phi_67_pred_2 = _3353;
                        frontier_phi_67_pred_3 = _3350;
                        frontier_phi_67_pred_4 = _3349;
                        frontier_phi_67_pred_5 = _3348;
                    }
                    _3016 = frontier_phi_67_pred;
                    _3018 = frontier_phi_67_pred_1;
                    _3020 = frontier_phi_67_pred_2;
                    _3014 = frontier_phi_67_pred_3;
                    _3012 = frontier_phi_67_pred_4;
                    _3010 = frontier_phi_67_pred_5;
                    uint _3155 = _3154 + 1u;
                    if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3148 = _3010;
                        _3149 = _3012;
                        _3150 = _3014;
                        _3151 = _3016;
                        _3152 = _3018;
                        _3153 = _3020;
                        _3154 = _3155;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3018;
                frontier_phi_55_56_ladder_1 = _3020;
                frontier_phi_55_56_ladder_2 = _3016;
                frontier_phi_55_56_ladder_3 = _3014;
                frontier_phi_55_56_ladder_4 = _3012;
                frontier_phi_55_56_ladder_5 = _3010;
            }
            else
            {
                frontier_phi_55_56_ladder = _2904;
                frontier_phi_55_56_ladder_1 = _2906;
                frontier_phi_55_56_ladder_2 = _2902;
                frontier_phi_55_56_ladder_3 = _2900;
                frontier_phi_55_56_ladder_4 = _2898;
                frontier_phi_55_56_ladder_5 = _2896;
            }
            _3009 = frontier_phi_55_56_ladder_5;
            _3011 = frontier_phi_55_56_ladder_4;
            _3013 = frontier_phi_55_56_ladder_3;
            _3015 = frontier_phi_55_56_ladder_2;
            _3017 = frontier_phi_55_56_ladder;
            _3019 = frontier_phi_55_56_ladder_1;
        }
        float _3024 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _2808 = (_3024 * _3015) + _2244;
        _2810 = (_3024 * _3017) + _2246;
        _2812 = (_3024 * _3019) + _2248;
        _2814 = ((_3009 * _1059) * _3024) + _2589;
        _2816 = ((_3011 * _1061) * _3024) + _2591;
        _2818 = ((_3013 * _1062) * _3024) + _2593;
    }
    else
    {
        _2808 = _2244;
        _2810 = _2246;
        _2812 = _2248;
        _2814 = _2589;
        _2816 = _2591;
        _2818 = _2593;
    }
    float _4737 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _4748 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _4759 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    uint _2838 = _263 + 6u;
    float _2846 = _997 / cbSceneParam._m0[86u].x;
    float _2847 = _998 / cbSceneParam._m0[86u].y;
    vec4 _2861 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, (log2((isnan(cbSceneParam._m0[77u].w) ? _932 : (isnan(_932) ? cbSceneParam._m0[77u].w : min(_932, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2863 = _2861.x;
    float _2864 = _2861.y;
    float _2865 = _2861.z;
    float _2866 = _2861.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_932 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_932) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _932 : min(cbSceneParam._m0[80u].w, _932));
        float _2922 = _2921 / _932;
        float _2933 = _2922 * _982;
        float _2934 = _983 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2937 = _2922 * _984;
        float _2939 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2934;
        float _2947 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2935 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3070 = 1.0 / cbSceneParam._m0[80u].x;
            float _3071 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3072 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            _3110 = ((abs(_2947 / _2935) * cbSceneParam._m0[80u].y) * ((((_3081 - _3082) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))))) * _3070)) - ((exp2(_2957 * _3081) - exp2(_2957 * _3082)) * _3070))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2866);
        _2959 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2863;
        _2961 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2864;
        _2963 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2865;
        _2965 = _3121 * _2866;
    }
    else
    {
        _2959 = _2863;
        _2961 = _2864;
        _2963 = _2865;
        _2965 = _2866;
    }
    float _2977 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2978 = _2977 == 3.0;
    float _2979 = log2(_2965);
    float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2808 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1075))) + ((_2814 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2810 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1075))) + ((_2816 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2812 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1075))) + ((_2818 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _2997 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2997 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.y = _2997 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.z = _2997 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.w = cbInstanceData._m0[_2838].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2838].w;
}


