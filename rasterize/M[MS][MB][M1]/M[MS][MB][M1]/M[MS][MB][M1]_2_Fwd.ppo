#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _913;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    vec4 _260 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2(((_239 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_239 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _311 = _307.z;
    float _315 = (_307.x * 2.0) + (-1.0);
    float _316 = (_307.y * 2.0) + (-1.0);
    float _317 = dot(vec2(_315, _316), vec2(_315, _316));
    float _3246 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _323 = sqrt(1.0 - (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))));
    float _328 = _315 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_281.x * 2.0) + (-1.0)));
    float _329 = _316 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_281.y * 2.0) + (-1.0)));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _344 = _342.x;
    float _349 = (((_281.z - _311) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _311;
    float _354 = cbMtdParam._m0[22u].x + _307.w;
    float _357 = fma(_323, _207 * NORMAL.x, fma(_329, _214 * TANGENT.x, (_200 * _192) * _328));
    float _360 = fma(_323, _207 * NORMAL.y, fma(_329, _214 * TANGENT.y, (_200 * _193) * _328));
    float _363 = fma(_323, _207 * NORMAL.z, fma(_329, _214 * TANGENT.z, (_200 * _194) * _328));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    float _368 = _367 * _357;
    float _369 = _367 * _360;
    float _370 = _367 * _363;
    float _3257 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _371 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3279 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3290 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3301 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3312 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _376 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _390 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _442 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _432);
    float _443 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _432);
    float _444 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _432);
    float _448 = inversesqrt(dot(vec3(_442, _443, _444), vec3(_442, _443, _444)));
    float _449 = _442 * _448;
    float _450 = _443 * _448;
    float _451 = _444 * _448;
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _479 = fma(_370, cbSceneParam._m0[5u].z, fma(_369, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _368));
    float _482 = fma(_370, cbSceneParam._m0[6u].z, fma(_369, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _368));
    float _485 = fma(_370, cbSceneParam._m0[7u].z, fma(_369, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _368));
    uint _499 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _505 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_499].x;
    float _506 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_499].y;
    float _507 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_499].z;
    float _3323 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _511 = 1.0 - _376;
    float _512 = _508 * _511;
    float _513 = _509 * _511;
    float _514 = _510 * _511;
    float _519 = (_508 + (-0.039999999105930328369140625)) * _376;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _376;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _376;
    float _522 = _519 + 0.039999999105930328369140625;
    float _524 = _520 + 0.039999999105930328369140625;
    float _525 = _521 + 0.039999999105930328369140625;
    vec4 _534 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _538 = ((isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * TEXCOORD_5.w) * _534.x;
    float _539 = dot(vec3(_368, _369, _370), vec3(_449, _450, _451));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _368) - _449;
    float _547 = (_542 * _369) - _450;
    float _548 = (_542 * _370) - _451;
    float _552 = abs(dot(vec3(_449, _450, _451), vec3(_368, _369, _370)));
    float _3356 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_371);
    float _567 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _573 = (1.0 - _567) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _574 = _567 * _554;
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _912;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = fma(_610, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602));
        float _641 = fma(_610, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602));
        float _645 = fma(_610, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602));
        float _670 = _602 + _368;
        float _671 = _606 + _369;
        float _672 = _610 + _370;
        float _682 = fma(_672, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670)) - _637;
        float _683 = fma(_672, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670)) - _641;
        float _684 = fma(_672, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670)) - _645;
        float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
        float _701 = ((_688 * _682) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_637 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_688 * _683) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_641 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_688 * _684) / cbModelParam._m0[34u].z) + ((((((_645 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _740 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_706.x + (-0.5));
        float _742 = _740 * (_706.y + (-0.5));
        float _743 = _740 * (_706.z + (-0.5));
        float _750 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_713.x + (-0.5));
        float _752 = _750 * (_713.y + (-0.5));
        float _753 = _750 * (_713.z + (-0.5));
        float _760 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_720.x + (-0.5));
        float _762 = _760 * (_720.y + (-0.5));
        float _763 = _760 * (_720.z + (-0.5));
        float _770 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_727.x + (-0.5));
        float _772 = _770 * (_727.y + (-0.5));
        float _773 = _770 * (_727.z + (-0.5));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = _741 * 0.5;
        float _778 = _751 * 0.5;
        float _779 = _761 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _794 = (dot(vec3(_368, _369, _370), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _804 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3404 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_806 + 1.0))) + _811) * _774;
        float _821 = _742 * 0.5;
        float _822 = _752 * 0.5;
        float _823 = _762 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_368, _369, _370), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3437 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_848 + 1.0))) + _853) * _775;
        float _863 = _743 * 0.5;
        float _864 = _753 * 0.5;
        float _865 = _763 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_368, _369, _370), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3470 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_890 + 1.0))) + _895) * _776;
        _912 = _743;
        _914 = _742;
        _915 = _741;
        _916 = _753;
        _917 = _752;
        _918 = _751;
        _919 = _763;
        _920 = _762;
        _921 = _761;
        _922 = _776;
        _923 = _775;
        _924 = _774;
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
    }
    else
    {
        _912 = _913;
        _914 = _913;
        _915 = _913;
        _916 = _913;
        _917 = _913;
        _918 = _913;
        _919 = _913;
        _920 = _913;
        _921 = _913;
        _922 = _913;
        _923 = _913;
        _924 = _913;
        _925 = 0.0;
        _926 = 0.0;
        _927 = 0.0;
    }
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _952 = fma(_610, cbModelParam._m0[30u].z, fma(_606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _602));
        float _956 = fma(_610, cbModelParam._m0[31u].z, fma(_606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _602));
        float _960 = fma(_610, cbModelParam._m0[32u].z, fma(_606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _602));
        float _983 = _602 + _368;
        float _984 = _606 + _369;
        float _985 = _610 + _370;
        float _995 = fma(_985, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983)) - _952;
        float _996 = fma(_985, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983)) - _956;
        float _997 = fma(_985, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983)) - _960;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_952 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_956 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[35u].z) + ((((((_960 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1051 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1018.x + (-0.5));
        float _1053 = _1051 * (_1018.y + (-0.5));
        float _1054 = _1051 * (_1018.z + (-0.5));
        float _1061 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1025.x + (-0.5));
        float _1063 = _1061 * (_1025.y + (-0.5));
        float _1064 = _1061 * (_1025.z + (-0.5));
        float _1071 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1032.x + (-0.5));
        float _1073 = _1071 * (_1032.y + (-0.5));
        float _1074 = _1071 * (_1032.z + (-0.5));
        float _1081 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1039.x + (-0.5));
        float _1083 = _1081 * (_1039.y + (-0.5));
        float _1084 = _1081 * (_1039.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_368, _369, _370), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3533 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1115 + 1.0))) + _1120) * _1085;
        float _1130 = _1053 * 0.5;
        float _1131 = _1063 * 0.5;
        float _1132 = _1073 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_368, _369, _370), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3566 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1157 + 1.0))) + _1162) * _1086;
        float _1172 = _1054 * 0.5;
        float _1173 = _1064 * 0.5;
        float _1174 = _1074 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_368, _369, _370), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3599 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1199 + 1.0))) + _1204) * _1087;
        _1221 = _1054;
        _1222 = _1053;
        _1223 = _1052;
        _1224 = _1064;
        _1225 = _1063;
        _1226 = _1062;
        _1227 = _1074;
        _1228 = _1073;
        _1229 = _1072;
        _1230 = _1087;
        _1231 = _1086;
        _1232 = _1085;
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _913;
        _1222 = _913;
        _1223 = _913;
        _1224 = _913;
        _1225 = _913;
        _1226 = _913;
        _1227 = _913;
        _1228 = _913;
        _1229 = _913;
        _1230 = _913;
        _1231 = _913;
        _1232 = _913;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _925)) + _925;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _926)) + _926;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _927)) + _927;
    float _1268 = fma(_1247, cbSceneParam._m0[89u].z, fma(_1246, cbSceneParam._m0[89u].y, _1245 * cbSceneParam._m0[89u].x));
    float _1271 = fma(_1247, cbSceneParam._m0[90u].z, fma(_1246, cbSceneParam._m0[90u].y, _1245 * cbSceneParam._m0[90u].x));
    float _1274 = fma(_1247, cbSceneParam._m0[91u].z, fma(_1246, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1245));
    float _1289 = _546 * 0.5;
    float _1290 = _547 * 0.5;
    float _1291 = _548 * 0.5;
    float _1292 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1295 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1298 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1332;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1305 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_912, _916, _919, _922));
        float _1309 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_914, _917, _920, _923));
        float _1313 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_915, _918, _921, _924));
        float _1320 = dot(vec4(cbModelParam._m0[39u]), vec4(_1289, _1290, _1291, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1343;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1334 = dot(vec4(cbModelParam._m0[40u]), vec4(_1289, _1290, _1291, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1334) ? 0.0 : (isnan(0.0) ? _1334 : max(0.0, _1334))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1347 = (_1343 * cbModelParam._m0[1u].x) + (_1332 * (1.0 - cbModelParam._m0[1u].x));
    float _1357 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _371);
    float _1358 = isnan(_1357) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1357 : min(cbModelParam._m0[25u].z, _1357));
    float _1440;
    float _1442;
    float _1444;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1407 = fma(_610, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602)) + cbModelParam._m0[13u].w;
        float _1411 = fma(_610, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602)) + cbModelParam._m0[14u].w;
        float _1415 = fma(_610, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602)) + cbModelParam._m0[15u].w;
        float _1418 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1421 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1424 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1452;
        if (_1418 > 0.0)
        {
            _1452 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1452 = frontier_phi_14_12_ladder;
        }
        float _1658;
        if (_1421 > 0.0)
        {
            _1658 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1658 = frontier_phi_23_19_ladder;
        }
        float _1912;
        if (_1424 > 0.0)
        {
            _1912 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1912 = frontier_phi_35_30_ladder;
        }
        float _1914 = isnan(_1658) ? _1452 : (isnan(_1452) ? _1658 : min(_1452, _1658));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1418) + _1407;
        float _1920 = (_1915 * _1421) + _1411;
        float _1921 = (_1915 * _1424) + _1415;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1358);
            frontier_phi_13_35_ladder = _2049.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2049.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2049.x * cbModelParam._m0[1u].y;
        }
        _1440 = frontier_phi_13_35_ladder_2;
        _1442 = frontier_phi_13_35_ladder_1;
        _1444 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1358);
        _1440 = _1428.x * cbModelParam._m0[1u].y;
        _1442 = _1428.y * cbModelParam._m0[1u].y;
        _1444 = _1428.z * cbModelParam._m0[1u].y;
    }
    float _1448 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _371);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1448 : min(cbModelParam._m0[25u].w, _1448));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_610, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_610, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_610, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1519 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1522 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1663;
        if (_1516 > 0.0)
        {
            _1663 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1663 = frontier_phi_25_21_ladder;
        }
        float _1939;
        if (_1519 > 0.0)
        {
            _1939 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1939 = frontier_phi_37_32_ladder;
        }
        float _2152;
        if (_1522 > 0.0)
        {
            _2152 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2152 = frontier_phi_46_43_ladder;
        }
        float _2154 = isnan(_1939) ? _1663 : (isnan(_1663) ? _1939 : min(_1663, _1939));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1516) + _1505;
        float _2160 = (_2155 * _1519) + _1509;
        float _2161 = (_2155 * _1522) + _1513;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2162;
        float _2165 = _2162 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2161 > _2165) || ((_2161 < _2163) || ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 < _2163) || (_2159 > _2165))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2161, cbModelParam._m0[17u].z, fma(_2160, cbModelParam._m0[17u].y, _2159 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2161, cbModelParam._m0[18u].z, fma(_2160, cbModelParam._m0[18u].y, _2159 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2161, cbModelParam._m0[19u].z, fma(_2160, cbModelParam._m0[19u].y, _2159 * cbModelParam._m0[19u].x))), _1449);
            frontier_phi_22_46_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_22_46_ladder_2;
        _1543 = frontier_phi_22_46_ladder_1;
        _1545 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1449);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1558 = (((_573 * _522) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1541 - _1440)) + _1440);
    float _1560 = (((_573 * _524) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1543 - _1442)) + _1442);
    float _1562 = (((_573 * _525) + _574) * _538) * ((cbModelParam._m0[1u].w * (_1545 - _1444)) + _1444);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    uvec4 _1581 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1583 = _1581.x * 14u;
    uint _1584 = _1583 + 13u;
    float _1591 = _538 + (-1.0);
    float _1596 = (cbLight._m0[_1584].x * _1591) + 1.0;
    float _1597 = (cbLight._m0[_1584].y * _1591) + 1.0;
    float _1598 = (cbLight._m0[_1584].z * _1591) + 1.0;
    float _1599 = (cbLight._m0[_1584].w * _1591) + 1.0;
    uint _1600 = _1583 + 5u;
    float _1606 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1610 = _1583 + 4u;
    float _1617 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1621 = _1583 | 1u;
    float _1632 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_368, _369, _370));
    float _1635 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_368, _369, _370));
    float _3735 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _3746 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1640 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.3183098733425140380859375;
    float _1642 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.3183098733425140380859375;
    float _1649 = ((cbLight._m0[_1600].x * _1606) * _1642) + ((cbLight._m0[_1610].x * _1617) * _1640);
    float _1650 = ((_1606 * cbLight._m0[_1600].y) * _1642) + ((_1617 * cbLight._m0[_1610].y) * _1640);
    float _1651 = ((_1606 * cbLight._m0[_1600].z) * _1642) + ((_1617 * cbLight._m0[_1610].z) * _1640);
    uvec4 _1655 = floatBitsToUint(cbLight._m0[_1583 + 12u]);
    bool _1657 = _1655.x == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1657)
    {
        _1668 = _1649;
        _1670 = _1650;
        _1672 = _1651;
    }
    else
    {
        uint _1676 = _1583 + 6u;
        float _1692 = (dot(vec3(cbLight._m0[_1583 + 2u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _1693 = _1692 * _1692;
        float _3757 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1695 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1668 = (((cbLight._m0[_1676].x * 0.3183098733425140380859375) * _1694) * _1695) + _1649;
        _1670 = (((cbLight._m0[_1676].y * 0.3183098733425140380859375) * _1694) * _1695) + _1650;
        _1672 = (((cbLight._m0[_1676].z * 0.3183098733425140380859375) * _1694) * _1695) + _1651;
    }
    bool _1675 = _1655.y == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1675)
    {
        _1713 = _1668;
        _1715 = _1670;
        _1717 = _1672;
    }
    else
    {
        uint _1883 = _1583 + 7u;
        float _1899 = (dot(vec3(cbLight._m0[_1583 + 3u].xyz), vec3(_368, _369, _370)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3773 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1902 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1713 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1668;
        _1715 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1670;
        _1717 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1672;
    }
    uint _1720 = _1583 + 8u;
    float _1733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _371) * 0.949999988079071044921875);
    float _1734 = _1733 * _1733;
    float _1735 = cbLight._m0[_1583].x + _449;
    float _1736 = cbLight._m0[_1583].y + _450;
    float _1737 = cbLight._m0[_1583].z + _451;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1742 = _1741 * _1735;
    float _1743 = _1741 * _1736;
    float _1744 = _1741 * _1737;
    float _1745 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1583].xyz));
    float _3789 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _1749 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1750 = dot(vec3(_368, _369, _370), vec3(_1742, _1743, _1744));
    float _3811 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1742, _1743, _1744));
    float _3822 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1734 * _1734;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1770 = exp2(log2(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * 5.0);
    float _1771 = 0.959999978542327880859375 - _519;
    float _1773 = 0.959999978542327880859375 - _520;
    float _1774 = 0.959999978542327880859375 - _521;
    float _1781 = 1.0 - _1734;
    float _1792 = (0.5 / (((_1749 * ((_1748 * _1781) + _1734)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1781) + _1734) * _1748))) * _1748;
    float _3833 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    uint _1805 = _1583 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1621].w)) * _371) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1621].x + _449;
    float _1819 = cbLight._m0[_1621].y + _450;
    float _1820 = cbLight._m0[_1621].z + _451;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1621].xyz));
    float _3844 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1832 = dot(vec3(_368, _369, _370), vec3(_1825, _1826, _1827));
    float _3855 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_1825, _1826, _1827));
    float _3866 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1851 = exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0);
    float _1858 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1749 * ((_1831 * _1858) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1858) + _1817) * _1831))) * _1831;
    float _3877 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1880 = (((((_1851 * _1771) + _522) * cbLight._m0[_1805].x) * _1870) * _1606) + (((((_1770 * _1771) + _522) * cbLight._m0[_1720].x) * _1794) * _1617);
    float _1881 = (((((_1851 * _1773) + _524) * cbLight._m0[_1805].y) * _1870) * _1606) + (((((_1770 * _1773) + _524) * cbLight._m0[_1720].y) * _1794) * _1617);
    float _1882 = (((((_1851 * _1774) + _525) * cbLight._m0[_1805].z) * _1870) * _1606) + (((((_1770 * _1774) + _525) * cbLight._m0[_1720].z) * _1794) * _1617);
    float _1944;
    float _1946;
    float _1948;
    if (_1657)
    {
        _1944 = _1880;
        _1946 = _1881;
        _1948 = _1882;
    }
    else
    {
        uint _1950 = _1583 + 2u;
        uint _1954 = _1583 + 10u;
        float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _371) * 0.949999988079071044921875);
        float _1969 = _1968 * _1968;
        float _1970 = cbLight._m0[_1950].x + _449;
        float _1971 = cbLight._m0[_1950].y + _450;
        float _1972 = cbLight._m0[_1950].z + _451;
        float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
        float _1977 = _1976 * _1970;
        float _1978 = _1976 * _1971;
        float _1979 = _1976 * _1972;
        float _1980 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_1950].xyz));
        float _3888 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1984 = dot(vec3(_368, _369, _370), vec3(_1977, _1978, _1979));
        float _3899 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1988 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_1977, _1978, _1979));
        float _3910 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1992 = _1969 * _1969;
        float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
        float _2003 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
        float _2010 = 1.0 - _1969;
        float _2020 = (0.5 / (((_1749 * ((_1983 * _2010) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _2010) + _1969) * _1983))) * _1983;
        float _3921 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2022 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
        float _2023 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1944 = (((((_2003 * _1771) + _522) * cbLight._m0[_1954].x) * _2022) * _2023) + _1880;
        _1946 = (((((_2003 * _1773) + _524) * cbLight._m0[_1954].y) * _2022) * _2023) + _1881;
        _1948 = (((((_2003 * _1774) + _525) * cbLight._m0[_1954].z) * _2022) * _2023) + _1882;
    }
    float _2058;
    float _2060;
    float _2062;
    if (_1675)
    {
        _2058 = _1944;
        _2060 = _1946;
        _2062 = _1948;
    }
    else
    {
        uint _2069 = _1583 + 3u;
        uint _2073 = _1583 + 11u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _371) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _449;
        float _2090 = cbLight._m0[_2069].y + _450;
        float _2091 = cbLight._m0[_2069].z + _451;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_368, _369, _370), vec3(cbLight._m0[_2069].xyz));
        float _3937 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2103 = dot(vec3(_368, _369, _370), vec3(_2096, _2097, _2098));
        float _3948 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _3959 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0);
        float _2129 = 1.0 - _2088;
        float _2139 = (0.5 / (((_1749 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _2129) + _2088) * _2102))) * _2102;
        float _3970 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _2058 = (((((_2122 * _1771) + _522) * cbLight._m0[_2073].x) * _2141) * _2142) + _1944;
        _2060 = (((((_2122 * _1773) + _524) * cbLight._m0[_2073].y) * _2141) * _2142) + _1946;
        _2062 = (((((_2122 * _1774) + _525) * cbLight._m0[_2073].z) * _2141) * _2142) + _1948;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1581.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2526)
                {
                    frontier_phi_61_pred = _2510;
                    frontier_phi_61_pred_1 = _2515;
                    frontier_phi_61_pred_2 = _2514;
                    frontier_phi_61_pred_3 = _2513;
                    frontier_phi_61_pred_4 = _2512;
                    frontier_phi_61_pred_5 = _2511;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2525;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2516 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _2218;
                        float _2701 = _2660.y - _2219;
                        float _2702 = _2660.z - _2220;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2710 = dot(vec3(_479, _482, _485), vec3(_2707, _2708, _2709));
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _3996 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2710) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _2218;
                        float _2736 = (-0.0) - _2219;
                        float _2737 = (-0.0) - _2220;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2752 = exp2(log2(1.0 / ((_2727 * 3.5) + 5.0)) * 0.25);
                        float _2753 = 1.0 - _554;
                        float _2760 = sqrt(1.0 - ((1.0 - (_2753 * _2753)) * (1.0 - (_2752 * _2752))));
                        float _2761 = _2760 * _2760;
                        float _2762 = _2761 * _2761;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_479, _482, _485), vec3(_2742, _2743, _2744));
                        float _4012 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2777 = dot(vec3(_479, _482, _485), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _4023 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2784 = ((_2780 * _2780) * (_2762 + (-1.0))) + 1.0;
                        float _2785 = _2720 * _2761;
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2710) + _2786;
                        float _4034 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2791 = 1.0 - _2761;
                        float _2801 = (0.5 / (((_2790 * ((_2776 * _2791) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2790 * _2791) + _2761) * _2776))) * _2790;
                        float _4045 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2812 = (((_2762 * 3.1415927410125732421875) * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) / ((_2784 * _2784) * ((_2727 * 2.1991131305694580078125) + 3.141590118408203125))) * _2716;
                        _2569 = (_2731 * _2679.x) + _2637;
                        _2570 = (_2731 * _2679.y) + _2638;
                        _2571 = (_2731 * _2679.z) + _2639;
                        _2566 = (_2812 * _2696.x) + _2634;
                        _2567 = (_2812 * _2696.y) + _2635;
                        _2568 = (_2812 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_61_pred = _2566;
                    frontier_phi_61_pred_1 = _2571;
                    frontier_phi_61_pred_2 = _2570;
                    frontier_phi_61_pred_3 = _2569;
                    frontier_phi_61_pred_4 = _2568;
                    frontier_phi_61_pred_5 = _2567;
                }
                _2366 = frontier_phi_61_pred;
                _2376 = frontier_phi_61_pred_1;
                _2374 = frontier_phi_61_pred_2;
                _2372 = frontier_phi_61_pred_3;
                _2370 = frontier_phi_61_pred_4;
                _2368 = frontier_phi_61_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2366;
                    _2511 = _2368;
                    _2512 = _2370;
                    _2513 = _2372;
                    _2514 = _2374;
                    _2515 = _2376;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2382) & _2264) == 0u)
        {
            _2478 = _2365;
            _2480 = _2367;
            _2482 = _2369;
            _2484 = _2371;
            _2486 = _2373;
            _2488 = _2375;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2504 = _2503 * _2218;
            float _2505 = _2503 * _2219;
            float _2506 = _2503 * _2220;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2617 = _2365;
                float _2618 = _2367;
                float _2619 = _2369;
                float _2620 = _2371;
                float _2621 = _2373;
                float _2622 = _2375;
                uint _2623 = _2382;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2633)
                    {
                        frontier_phi_67_pred = _2620;
                        frontier_phi_67_pred_1 = _2621;
                        frontier_phi_67_pred_2 = _2622;
                        frontier_phi_67_pred_3 = _2619;
                        frontier_phi_67_pred_4 = _2618;
                        frontier_phi_67_pred_5 = _2617;
                    }
                    else
                    {
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        uint _2836 = _2632;
                        uint _2837;
                        vec4 _2862;
                        float _2863;
                        vec4 _2878;
                        vec3 _2890;
                        vec4 _2906;
                        vec4 _2921;
                        float _2968;
                        bool _2969;
                        for (;;)
                        {
                            uint _2847 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2836));
                            _2837 = (_2836 + 4294967295u) & _2836;
                            uint _2849 = _2847 * 40u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            _2863 = _2862.w;
                            uint _2865 = (_2847 * 40u) + 4u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2880 = (_2847 * 40u) + 8u;
                            _2890 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x));
                            uint _2893 = (_2847 * 40u) + 16u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2847 * 40u) + 20u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2847 * 40u) + 24u;
                            vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2943 = (_2847 * 40u) + 28u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2968 = fma(_2220, _2956.z, fma(_2219, _2956.y, _2956.x * _2218)) + _2956.w;
                            _2969 = !((fma(_2220, _2937.z, fma(_2219, _2937.y, _2937.x * _2218)) + _2937.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2969)
                            {
                                float _2996 = _2862.x - _2218;
                                float _2997 = _2862.y - _2219;
                                float _2998 = _2862.z - _2220;
                                float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                                float _3002 = inversesqrt(_2999);
                                float _3003 = _3002 * _2996;
                                float _3004 = _3002 * _2997;
                                float _3005 = _3002 * _2998;
                                float _3009 = 1.0 - (_2999 / (_2863 * _2863));
                                float _4056 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3014 = sqrt(_2999) * _2878.w;
                                float _3016 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                                float _3017 = _3016 * _3016;
                                float _3020 = ((1.0 - _3017) * dot(vec3(_3003, _3004, _3005), vec3(_479, _482, _485))) + _3017;
                                float _3023 = _3014 * _3014;
                                float _3027 = (fma(_2220, _2906.z, fma(_2219, _2906.y, _2906.x * _2218)) + _2906.w) / _2968;
                                float _3028 = (fma(_2220, _2921.z, fma(_2219, _2921.y, _2921.x * _2218)) + _2921.w) / _2968;
                                float _3032 = 1.0 - dot(vec2(_3027, _3028), vec2(_3027, _3028));
                                float _4072 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3034 = _3033 * (((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3010) / ((_3023 * 0.699999988079071044921875) + 1.0));
                                float _3046 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                                float _3047 = 1.0 - _554;
                                float _3054 = sqrt(1.0 - ((1.0 - (_3047 * _3047)) * (1.0 - (_3046 * _3046))));
                                float _3055 = _3054 * _3054;
                                float _3056 = _3055 * _3055;
                                float _3057 = _3003 - _2504;
                                float _3058 = _3004 - _2505;
                                float _3059 = _3005 - _2506;
                                float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                                float _3067 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4083 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3070 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3071 = dot(vec3(_479, _482, _485), vec3(_3063 * _3057, _3063 * _3058, _3063 * _3059));
                                float _4094 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3074 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3078 = ((_3074 * _3074) * (_3056 + (-1.0))) + 1.0;
                                float _3079 = _3016 * _3055;
                                float _3080 = _3079 * _3079;
                                float _3086 = ((1.0 - _3080) * dot(vec3(_479, _482, _485), vec3(_3003, _3004, _3005))) + _3080;
                                float _4105 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3088 = 1.0 - _3055;
                                float _3098 = (0.5 / (((_3087 * ((_3070 * _3088) + _3055)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3088) + _3055) * _3070))) * _3087;
                                float _4116 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3108 = (_3033 * _3010) * (((_3056 * 3.1415927410125732421875) * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) / ((_3078 * _3078) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3108 * _2890.x;
                                frontier_phi_73_pred_1 = _3108 * _2890.y;
                                frontier_phi_73_pred_2 = _3034 * _2878.z;
                                frontier_phi_73_pred_3 = _3034 * _2878.y;
                                frontier_phi_73_pred_4 = _3034 * _2878.x;
                                frontier_phi_73_pred_5 = _3108 * _2890.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3112 = frontier_phi_73_pred;
                            _3113 = frontier_phi_73_pred_1;
                            _3117 = frontier_phi_73_pred_2;
                            _3116 = frontier_phi_73_pred_3;
                            _3115 = frontier_phi_73_pred_4;
                            _3114 = frontier_phi_73_pred_5;
                            _2820 = _3115 + _2833;
                            _2821 = _3116 + _2834;
                            _2822 = _3117 + _2835;
                            _2817 = _3112 + _2830;
                            _2818 = _3113 + _2831;
                            _2819 = _3114 + _2832;
                            if (_2837 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2837;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2820;
                        frontier_phi_67_pred_1 = _2821;
                        frontier_phi_67_pred_2 = _2822;
                        frontier_phi_67_pred_3 = _2819;
                        frontier_phi_67_pred_4 = _2818;
                        frontier_phi_67_pred_5 = _2817;
                    }
                    _2485 = frontier_phi_67_pred;
                    _2487 = frontier_phi_67_pred_1;
                    _2489 = frontier_phi_67_pred_2;
                    _2483 = frontier_phi_67_pred_3;
                    _2481 = frontier_phi_67_pred_4;
                    _2479 = frontier_phi_67_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2479;
                        _2618 = _2481;
                        _2619 = _2483;
                        _2620 = _2485;
                        _2621 = _2487;
                        _2622 = _2489;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2487;
                frontier_phi_55_56_ladder_1 = _2489;
                frontier_phi_55_56_ladder_2 = _2485;
                frontier_phi_55_56_ladder_3 = _2483;
                frontier_phi_55_56_ladder_4 = _2481;
                frontier_phi_55_56_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_55_56_ladder = _2373;
                frontier_phi_55_56_ladder_1 = _2375;
                frontier_phi_55_56_ladder_2 = _2371;
                frontier_phi_55_56_ladder_3 = _2369;
                frontier_phi_55_56_ladder_4 = _2367;
                frontier_phi_55_56_ladder_5 = _2365;
            }
            _2478 = frontier_phi_55_56_ladder_5;
            _2480 = frontier_phi_55_56_ladder_4;
            _2482 = frontier_phi_55_56_ladder_3;
            _2484 = frontier_phi_55_56_ladder_2;
            _2486 = frontier_phi_55_56_ladder;
            _2488 = frontier_phi_55_56_ladder_1;
        }
        float _2493 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2277 = (_2493 * _2484) + _1713;
        _2279 = (_2493 * _2486) + _1715;
        _2281 = (_2493 * _2488) + _1717;
        _2283 = ((_2478 * _522) * _2493) + _2058;
        _2285 = ((_2480 * _524) * _2493) + _2060;
        _2287 = ((_2482 * _525) * _2493) + _2062;
    }
    else
    {
        _2277 = _1713;
        _2279 = _1715;
        _2281 = _1717;
        _2283 = _2058;
        _2285 = _2060;
        _2287 = _2062;
    }
    float _4132 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4143 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4154 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    uint _2307 = _220 + 6u;
    float _2315 = _457 / cbSceneParam._m0[86u].x;
    float _2316 = _458 / cbSceneParam._m0[86u].y;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, (log2((isnan(cbSceneParam._m0[77u].w) ? _390 : (isnan(_390) ? cbSceneParam._m0[77u].w : min(_390, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_390 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_390) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _390 : min(cbSceneParam._m0[80u].w, _390));
        float _2391 = _2390 / _390;
        float _2402 = _2391 * _442;
        float _2403 = _443 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _444;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2579;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2579 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2541 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2579 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2426 * _2550) - exp2(_2426 * _2551)) * _2539))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2315, _2316, 1.0), 0.0);
        float _2590 = exp2((_2579 * (-1.44269502162933349609375)) * (1.0 - _2581.w));
        float _2591 = log2(_2590);
        float _2607 = log2(_2335);
        _2428 = (exp2(_2607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].x)) * _2581.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2430 = (exp2(_2607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].y)) * _2581.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2432 = (exp2(_2607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].z)) * _2581.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2434 = _2590 * _2335;
    }
    else
    {
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
        _2434 = _2335;
    }
    float _2446 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2447 = _2446 == 3.0;
    float _2448 = log2(_2434);
    float _2455 = exp2(_2448 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2277 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _538))) + ((_2283 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1347)) * cbPerFrame._m0[3u].x));
    float _2456 = exp2(_2448 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2279 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _538))) + ((_2285 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1347)) * cbPerFrame._m0[3u].x));
    float _2457 = exp2(_2448 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2281 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _538))) + ((_2287 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1347)) * cbPerFrame._m0[3u].x));
    float _2466 = (_2446 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2466 * (_2447 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.y = _2466 * (_2447 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.z = _2466 * (_2447 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.w = cbInstanceData._m0[_2307].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2307].w;
}


