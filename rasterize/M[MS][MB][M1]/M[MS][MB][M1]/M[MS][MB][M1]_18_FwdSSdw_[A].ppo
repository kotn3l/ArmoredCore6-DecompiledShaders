#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1185;
float _3592;
float _3593;
float _3594;
float _3595;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _342 = _338.z;
    float _346 = (_338.x * 2.0) + (-1.0);
    float _347 = (_338.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_346, _347), vec2(_346, _347));
    float _3604 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))));
    float _359 = _346 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_312.x * 2.0) + (-1.0)));
    float _360 = _347 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_312.y * 2.0) + (-1.0)));
    vec4 _377 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _379 = _377.x;
    float _380 = 1.0 - _379;
    float _389 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _392 = ((isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : min(_389, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _401 = (_392 - ((((((_379 - _380) * cbMtdParam._m0[24u].z) + _380) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _392))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3625 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _409 = (_402 * (cbMtdParam._m0[17u].x - _292)) + _292;
    float _410 = (_402 * (cbMtdParam._m0[17u].y - _293)) + _293;
    float _411 = (_402 * (cbMtdParam._m0[17u].z - _294)) + _294;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _426 = _424.x;
    float _427 = 1.0 - _426;
    float _456 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_426 - _427) * cbMtdParam._m0[24u].w) + _427) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3636 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _465 = ((((cbMtdParam._m0[10u].x - _409) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _457) + _409;
    float _466 = ((((cbMtdParam._m0[10u].y - _410) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _457) + _410;
    float _467 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _411)) * _457) + _411;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _482 = _480.x;
    float _484 = _482 - (_482 * _402);
    float _486 = _484 - (_484 * _457);
    float _491 = (((_312.z - _342) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _342;
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _512 = (_505.x * 2.0) + (-1.0);
    float _513 = (_505.y * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3647 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _522 = (_402 * (_505.z - _491)) + _491;
    float _525 = ((cbMtdParam._m0[23u].y - _522) * _457) + _522;
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _553 = (_547.x * 2.0) + (-1.0);
    float _554 = (_547.y * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3658 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _572 = (((_512 - _359) + (cbMtdParam._m0[21u].x * _359)) * _402) + _359;
    float _573 = (((_513 - _360) + (cbMtdParam._m0[21u].x * _360)) * _402) + _360;
    float _574 = (_402 * (sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) - _354)) + _354;
    float _585 = (((_553 - _572) + (_572 * cbMtdParam._m0[22u].z)) * _457) + _572;
    float _586 = (((_554 - _573) + (_573 * cbMtdParam._m0[22u].z)) * _457) + _573;
    float _587 = ((sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) - _574) * _457) + _574;
    float _589 = cbMtdParam._m0[22u].x + _338.w;
    float _592 = fma(_587, _234 * NORMAL.x, fma(_586, _241 * TANGENT.x, (_227 * _219) * _585));
    float _595 = fma(_587, _234 * NORMAL.y, fma(_586, _241 * TANGENT.y, (_227 * _220) * _585));
    float _598 = fma(_587, _234 * NORMAL.z, fma(_586, _241 * TANGENT.z, (_227 * _221) * _585));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    float _603 = _602 * _592;
    float _604 = _602 * _595;
    float _605 = _602 * _598;
    float _3669 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _606 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3691 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3702 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3713 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3724 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _611 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _625 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _675 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _665);
    float _676 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _665);
    float _677 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _665);
    float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
    float _682 = _675 * _681;
    float _683 = _676 * _681;
    float _684 = _677 * _681;
    vec4 _689 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _691 = _689.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _866 = sqrt(((_675 * _675) + (_676 * _676)) + (_677 * _677));
        float _872 = (cbMatDynParam._m0[5u].x * _866) + cbMatDynParam._m0[5u].y;
        float _3735 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _877 = (cbMatDynParam._m0[5u].z * _866) + cbMatDynParam._m0[5u].w;
        float _3746 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) - _873)) + _873) < ((_691 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _724 = fma(_605, cbSceneParam._m0[5u].z, fma(_604, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _603));
    float _727 = fma(_605, cbSceneParam._m0[6u].z, fma(_604, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _603));
    float _730 = fma(_605, cbSceneParam._m0[7u].z, fma(_604, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _603));
    uint _743 = _247 + 9u;
    uint _744 = _743 + uint(cbMatDynParam._m0[0u].w);
    float _750 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_744].x;
    float _751 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_744].y;
    float _752 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_744].z;
    float _3757 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _756 = 1.0 - _611;
    float _757 = _753 * _756;
    float _758 = _754 * _756;
    float _759 = _755 * _756;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _611;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _611;
    float _766 = (_755 + (-0.039999999105930328369140625)) * _611;
    float _767 = _764 + 0.039999999105930328369140625;
    float _769 = _765 + 0.039999999105930328369140625;
    float _770 = _766 + 0.039999999105930328369140625;
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _783 = ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * TEXCOORD_5.w) * _779.x;
    float _784 = dot(vec3(_603, _604, _605), vec3(_682, _683, _684));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _603) - _682;
    float _792 = (_787 * _604) - _683;
    float _793 = (_787 * _605) - _684;
    float _797 = abs(dot(vec3(_682, _683, _684), vec3(_603, _604, _605)));
    float _3790 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_606);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _818 = (1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _819 = _812 * _799;
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1184;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_855, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847));
        float _913 = fma(_855, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847));
        float _917 = fma(_855, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847));
        float _942 = _847 + _603;
        float _943 = _851 + _604;
        float _944 = _855 + _605;
        float _954 = fma(_944, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942)) - _909;
        float _955 = fma(_944, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942)) - _913;
        float _956 = fma(_944, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942)) - _917;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1012 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_978.x + (-0.5));
        float _1014 = _1012 * (_978.y + (-0.5));
        float _1015 = _1012 * (_978.z + (-0.5));
        float _1022 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_985.x + (-0.5));
        float _1024 = _1022 * (_985.y + (-0.5));
        float _1025 = _1022 * (_985.z + (-0.5));
        float _1032 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_992.x + (-0.5));
        float _1034 = _1032 * (_992.y + (-0.5));
        float _1035 = _1032 * (_992.z + (-0.5));
        float _1042 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_999.x + (-0.5));
        float _1044 = _1042 * (_999.y + (-0.5));
        float _1045 = _1042 * (_999.z + (-0.5));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = _1013 * 0.5;
        float _1050 = _1023 * 0.5;
        float _1051 = _1033 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1066 = (dot(vec3(_603, _604, _605), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1076 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3838 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1078 + 1.0))) + _1083) * _1046;
        float _1093 = _1014 * 0.5;
        float _1094 = _1024 * 0.5;
        float _1095 = _1034 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_603, _604, _605), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3871 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1120 + 1.0))) + _1125) * _1047;
        float _1135 = _1015 * 0.5;
        float _1136 = _1025 * 0.5;
        float _1137 = _1035 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_603, _604, _605), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3904 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1162 + 1.0))) + _1167) * _1048;
        _1184 = _1015;
        _1186 = _1014;
        _1187 = _1013;
        _1188 = _1025;
        _1189 = _1024;
        _1190 = _1023;
        _1191 = _1035;
        _1192 = _1034;
        _1193 = _1033;
        _1194 = _1048;
        _1195 = _1047;
        _1196 = _1046;
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
    }
    else
    {
        _1184 = _1185;
        _1186 = _1185;
        _1187 = _1185;
        _1188 = _1185;
        _1189 = _1185;
        _1190 = _1185;
        _1191 = _1185;
        _1192 = _1185;
        _1193 = _1185;
        _1194 = _1185;
        _1195 = _1185;
        _1196 = _1185;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_855, cbModelParam._m0[30u].z, fma(_851, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847));
        float _1231 = fma(_855, cbModelParam._m0[31u].z, fma(_851, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847));
        float _1235 = fma(_855, cbModelParam._m0[32u].z, fma(_851, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847));
        float _1258 = _847 + _603;
        float _1259 = _851 + _604;
        float _1260 = _855 + _605;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_603, _604, _605), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3967 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_603, _604, _605), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4000 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_603, _604, _605), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4033 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1185;
        _1497 = _1185;
        _1498 = _1185;
        _1499 = _1185;
        _1500 = _1185;
        _1501 = _1185;
        _1502 = _1185;
        _1503 = _1185;
        _1504 = _1185;
        _1505 = _1185;
        _1506 = _1185;
        _1507 = _1185;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1197)) + _1197;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1198)) + _1198;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1199)) + _1199;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _791 * 0.5;
    float _1565 = _792 * 0.5;
    float _1566 = _793 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1184, _1188, _1191, _1194));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1681 = fma(_855, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847)) + cbModelParam._m0[13u].w;
        float _1685 = fma(_855, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847)) + cbModelParam._m0[14u].w;
        float _1689 = fma(_855, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847)) + cbModelParam._m0[15u].w;
        float _1692 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1695 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1698 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1726;
        if (_1692 > 0.0)
        {
            _1726 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1726 = frontier_phi_17_15_ladder;
        }
        float _1951;
        if (_1695 > 0.0)
        {
            _1951 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1951 = frontier_phi_26_22_ladder;
        }
        float _2208;
        if (_1698 > 0.0)
        {
            _2208 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2208 = frontier_phi_38_33_ladder;
        }
        float _2210 = isnan(_1951) ? _1726 : (isnan(_1726) ? _1951 : min(_1726, _1951));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1692) + _1681;
        float _2216 = (_2211 * _1695) + _1685;
        float _2217 = (_2211 * _1698) + _1689;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_16_38_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1714 = frontier_phi_16_38_ladder_2;
        _1716 = frontier_phi_16_38_ladder_1;
        _1718 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1633);
        _1714 = _1702.x * cbModelParam._m0[1u].y;
        _1716 = _1702.y * cbModelParam._m0[1u].y;
        _1718 = _1702.z * cbModelParam._m0[1u].y;
    }
    float _1722 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1722 : min(cbModelParam._m0[25u].w, _1722));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1777 = fma(_855, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847)) + cbModelParam._m0[21u].w;
        float _1781 = fma(_855, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847)) + cbModelParam._m0[22u].w;
        float _1785 = fma(_855, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847)) + cbModelParam._m0[23u].w;
        float _1788 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1791 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1794 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1956;
        if (_1788 > 0.0)
        {
            _1956 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1956 = frontier_phi_28_24_ladder;
        }
        float _2235;
        if (_1791 > 0.0)
        {
            _2235 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2235 = frontier_phi_40_35_ladder;
        }
        float _2448;
        if (_1794 > 0.0)
        {
            _2448 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2448 = frontier_phi_49_46_ladder;
        }
        float _2450 = isnan(_2235) ? _1956 : (isnan(_1956) ? _2235 : min(_1956, _2235));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1788) + _1777;
        float _2456 = (_2451 * _1791) + _1781;
        float _2457 = (_2451 * _1794) + _1785;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2458;
        float _2461 = _2458 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2457 > _2461) || ((_2457 < _2459) || ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 < _2459) || (_2455 > _2461))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2457, cbModelParam._m0[17u].z, fma(_2456, cbModelParam._m0[17u].y, _2455 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2457, cbModelParam._m0[18u].z, fma(_2456, cbModelParam._m0[18u].y, _2455 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2457, cbModelParam._m0[19u].z, fma(_2456, cbModelParam._m0[19u].y, _2455 * cbModelParam._m0[19u].x))), _1723);
            frontier_phi_25_49_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1813 = frontier_phi_25_49_ladder_2;
        _1815 = frontier_phi_25_49_ladder_1;
        _1817 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1723);
        _1813 = _1797.x * cbModelParam._m0[1u].z;
        _1815 = _1797.y * cbModelParam._m0[1u].z;
        _1817 = _1797.z * cbModelParam._m0[1u].z;
    }
    float _1830 = (((_818 * _767) + _819) * _783) * ((cbModelParam._m0[1u].w * (_1813 - _1714)) + _1714);
    float _1832 = (((_818 * _769) + _819) * _783) * ((cbModelParam._m0[1u].w * (_1815 - _1716)) + _1716);
    float _1834 = (((_818 * _770) + _819) * _783) * ((cbModelParam._m0[1u].w * (_1817 - _1718)) + _1718);
    float _1837 = fma(_1834, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1830 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1834, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1830 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1834, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, _1830 * cbSceneParam._m0[91u].x));
    vec4 _1851 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_703, _704));
    float _1853 = _1851.w;
    float _1865 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1853);
    float _1866 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1853);
    float _1867 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1853);
    uvec4 _1871 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1873 = _1871.x * 14u;
    uint _1874 = _1873 + 13u;
    float _1881 = _783 + (-1.0);
    float _1886 = (cbLight._m0[_1874].x * _1881) + 1.0;
    float _1887 = (cbLight._m0[_1874].y * _1881) + 1.0;
    float _1888 = (cbLight._m0[_1874].z * _1881) + 1.0;
    float _1889 = (cbLight._m0[_1874].w * _1881) + 1.0;
    uint _1890 = _1873 + 5u;
    float _1896 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1900 = _1873 + 4u;
    float _1910 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1914 = _1873 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_603, _604, _605));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_603, _604, _605));
    float _4169 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _4180 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1890].x * _1896) * _1935) + (((cbLight._m0[_1900].x * _1865) * _1910) * _1933);
    float _1943 = ((_1896 * cbLight._m0[_1890].y) * _1935) + (((cbLight._m0[_1900].y * _1866) * _1910) * _1933);
    float _1944 = ((_1896 * cbLight._m0[_1890].z) * _1935) + (((cbLight._m0[_1900].z * _1867) * _1910) * _1933);
    uvec4 _1948 = floatBitsToUint(cbLight._m0[_1873 + 12u]);
    bool _1950 = _1948.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1950)
    {
        _1961 = _1942;
        _1963 = _1943;
        _1965 = _1944;
    }
    else
    {
        uint _1969 = _1873 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1873 + 2u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4191 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1988 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1942;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1943;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1944;
    }
    bool _1968 = _1948.y == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1968)
    {
        _2006 = _1961;
        _2008 = _1963;
        _2010 = _1965;
    }
    else
    {
        uint _2179 = _1873 + 7u;
        float _2195 = (dot(vec3(cbLight._m0[_1873 + 3u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4207 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2198 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2006 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _1961;
        _2008 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _1963;
        _2010 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _1965;
    }
    uint _2013 = _1873 + 8u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _606) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1873].x + _682;
    float _2029 = cbLight._m0[_1873].y + _683;
    float _2030 = cbLight._m0[_1873].z + _684;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1873].xyz));
    float _4223 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2042 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2043 = dot(vec3(_603, _604, _605), vec3(_2035, _2036, _2037));
    float _4245 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2035, _2036, _2037));
    float _4256 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2027 * _2027;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
    float _2064 = 0.959999978542327880859375 - _764;
    float _2066 = 0.959999978542327880859375 - _765;
    float _2067 = 0.959999978542327880859375 - _766;
    float _2074 = 1.0 - _2027;
    float _2085 = (0.5 / (((_2042 * ((_2041 * _2074) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2074) + _2027) * _2041))) * _2041;
    float _4267 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    uint _2101 = _1873 + 9u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _606) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1914].x + _682;
    float _2115 = cbLight._m0[_1914].y + _683;
    float _2116 = cbLight._m0[_1914].z + _684;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1914].xyz));
    float _4278 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2128 = dot(vec3(_603, _604, _605), vec3(_2121, _2122, _2123));
    float _4289 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2121, _2122, _2123));
    float _4300 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2113 * _2113;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
    float _2154 = 1.0 - _2113;
    float _2164 = (0.5 / (((_2042 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2154) + _2113) * _2127))) * _2127;
    float _4311 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    float _2176 = (((((_2147 * _2064) + _767) * cbLight._m0[_2101].x) * _2166) * _1896) + ((((cbLight._m0[_2013].x * _1865) * ((_2063 * _2064) + _767)) * _2087) * _1910);
    float _2177 = (((((_2147 * _2066) + _769) * cbLight._m0[_2101].y) * _2166) * _1896) + ((((cbLight._m0[_2013].y * _1866) * ((_2063 * _2066) + _769)) * _2087) * _1910);
    float _2178 = (((((_2147 * _2067) + _770) * cbLight._m0[_2101].z) * _2166) * _1896) + ((((cbLight._m0[_2013].z * _1867) * ((_2063 * _2067) + _770)) * _2087) * _1910);
    float _2240;
    float _2242;
    float _2244;
    if (_1950)
    {
        _2240 = _2176;
        _2242 = _2177;
        _2244 = _2178;
    }
    else
    {
        uint _2246 = _1873 + 2u;
        uint _2250 = _1873 + 10u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _606) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _682;
        float _2267 = cbLight._m0[_2246].y + _683;
        float _2268 = cbLight._m0[_2246].z + _684;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2246].xyz));
        float _4322 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2280 = dot(vec3(_603, _604, _605), vec3(_2273, _2274, _2275));
        float _4333 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4344 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
        float _2306 = 1.0 - _2265;
        float _2316 = (0.5 / (((_2042 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2306) + _2265) * _2279))) * _2279;
        float _4355 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2240 = (((((_2299 * _2064) + _767) * cbLight._m0[_2250].x) * _2318) * _2319) + _2176;
        _2242 = (((((_2299 * _2066) + _769) * cbLight._m0[_2250].y) * _2318) * _2319) + _2177;
        _2244 = (((((_2299 * _2067) + _770) * cbLight._m0[_2250].z) * _2318) * _2319) + _2178;
    }
    float _2354;
    float _2356;
    float _2358;
    if (_1968)
    {
        _2354 = _2240;
        _2356 = _2242;
        _2358 = _2244;
    }
    else
    {
        uint _2365 = _1873 + 3u;
        uint _2369 = _1873 + 11u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _606) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _682;
        float _2386 = cbLight._m0[_2365].y + _683;
        float _2387 = cbLight._m0[_2365].z + _684;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2365].xyz));
        float _4371 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2399 = dot(vec3(_603, _604, _605), vec3(_2392, _2393, _2394));
        float _4382 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4393 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2418 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2425 = 1.0 - _2384;
        float _2435 = (0.5 / (((_2042 * ((_2398 * _2425) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2425) + _2384) * _2398))) * _2398;
        float _4404 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2437 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2438 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2354 = (((((_2418 * _2064) + _767) * cbLight._m0[_2369].x) * _2437) * _2438) + _2240;
        _2356 = (((((_2418 * _2066) + _769) * cbLight._m0[_2369].y) * _2437) * _2438) + _2242;
        _2358 = (((((_2418 * _2067) + _770) * cbLight._m0[_2369].z) * _2437) * _2438) + _2244;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1871.y == 0u)
    {
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2513;
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2513;
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2513;
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.x;
        uint _2540 = uint((float(_2528.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2529))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2529)));
        float _2550 = (log2(_2516 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2551 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        uint _2554 = uint(isnan(14.0) ? _2551 : (isnan(_2551) ? 14.0 : min(_2551, 14.0)));
        uvec4 _2559 = texelFetch(g_lightClusterGridBuffer, int(((_2554 << 2u) + (_2540 << 6u)) >> 2u));
        uint _2560 = _2559.x;
        uint _2561 = _2528.z;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((((1u << ((_2561 >> 4u) & 15u)) + 4294967295u) & _2560) == 0u) || ((_2561 & 240u) == 0u))
        {
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
        }
        else
        {
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            uint _2820 = 0u;
            uint _2829;
            bool _2830;
            for (;;)
            {
                _2829 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                _2830 = _2829 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2830)
                {
                    frontier_phi_66_pred = _2814;
                    frontier_phi_66_pred_1 = _2819;
                    frontier_phi_66_pred_2 = _2818;
                    frontier_phi_66_pred_3 = _2817;
                    frontier_phi_66_pred_4 = _2816;
                    frontier_phi_66_pred_5 = _2815;
                }
                else
                {
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    uint _2965;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2829;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    for (;;)
                    {
                        uint _2969 = uint(findLSB(_2965)) + (_2820 << 5u);
                        uint _2966 = (_2965 + 4294967295u) & _2965;
                        uint _2971 = _2969 * 48u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 3u)).x));
                        uint _2991 = (_2969 * 48u) + 4u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3010 = (_2969 * 48u) + 8u;
                        vec3 _3021 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x));
                        float _3025 = _2985.x - _2514;
                        float _3026 = _2985.y - _2515;
                        float _3027 = _2985.z - _2516;
                        float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                        float _3031 = inversesqrt(_3028);
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3035 = dot(vec3(_724, _727, _730), vec3(_3032, _3033, _3034));
                        float _3040 = 1.0 - (_3028 * _2985.w);
                        float _4430 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3042 = sqrt(_3028) * _3004.w;
                        float _3045 = 1.39999997615814208984375 / (_3042 + 1.39999997615814208984375);
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _3035) + _3046;
                        float _3052 = _3042 * _3042;
                        float _3056 = ((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3041) / ((_3052 * 0.699999988079071044921875) + 1.0);
                        float _3060 = (-0.0) - _2514;
                        float _3061 = (-0.0) - _2515;
                        float _3062 = (-0.0) - _2516;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3077 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                        float _3078 = 1.0 - _799;
                        float _3085 = sqrt(1.0 - ((1.0 - (_3078 * _3078)) * (1.0 - (_3077 * _3077))));
                        float _3086 = _3085 * _3085;
                        float _3087 = _3086 * _3086;
                        float _3088 = _3067 + _3032;
                        float _3089 = _3068 + _3033;
                        float _3090 = _3069 + _3034;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3098 = dot(vec3(_724, _727, _730), vec3(_3067, _3068, _3069));
                        float _4446 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3102 = dot(vec3(_724, _727, _730), vec3(_3094 * _3088, _3094 * _3089, _3094 * _3090));
                        float _4457 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3109 = ((_3105 * _3105) * (_3087 + (-1.0))) + 1.0;
                        float _3110 = _3045 * _3086;
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3035) + _3111;
                        float _4468 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3116 = 1.0 - _3086;
                        float _3126 = (0.5 / (((_3115 * ((_3101 * _3116) + _3086)) + 9.9999999392252902907785028219223e-09) + (((_3115 * _3116) + _3086) * _3101))) * _3115;
                        float _4479 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3137 = (((_3087 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3109 * _3109) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125))) * _3041;
                        _2889 = (_3056 * _3004.x) + _2962;
                        _2890 = (_3056 * _3004.y) + _2963;
                        _2891 = (_3056 * _3004.z) + _2964;
                        _2886 = (_3137 * _3021.x) + _2959;
                        _2887 = (_3137 * _3021.y) + _2960;
                        _2888 = (_3137 * _3021.z) + _2961;
                        if (_2966 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2966;
                        }
                    }
                    frontier_phi_66_pred = _2886;
                    frontier_phi_66_pred_1 = _2891;
                    frontier_phi_66_pred_2 = _2890;
                    frontier_phi_66_pred_3 = _2889;
                    frontier_phi_66_pred_4 = _2888;
                    frontier_phi_66_pred_5 = _2887;
                }
                _2662 = frontier_phi_66_pred;
                _2672 = frontier_phi_66_pred_1;
                _2670 = frontier_phi_66_pred_2;
                _2668 = frontier_phi_66_pred_3;
                _2666 = frontier_phi_66_pred_4;
                _2664 = frontier_phi_66_pred_5;
                uint _2821 = _2820 + 1u;
                if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2814 = _2662;
                    _2815 = _2664;
                    _2816 = _2666;
                    _2817 = _2668;
                    _2818 = _2670;
                    _2819 = _2672;
                    _2820 = _2821;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
        }
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.z;
        uint _2678 = (_2676 >> 8u) & 15u;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((4294967295u << _2678) & _2560) == 0u)
        {
            _2782 = _2661;
            _2784 = _2663;
            _2786 = _2665;
            _2788 = _2667;
            _2790 = _2669;
            _2792 = _2671;
        }
        else
        {
            float _2807 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
            float _2808 = _2807 * _2514;
            float _2809 = _2807 * _2515;
            float _2810 = _2807 * _2516;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2678 < ((_2676 >> 12u) & 15u))
            {
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2942 = _2661;
                float _2943 = _2663;
                float _2944 = _2665;
                float _2945 = _2667;
                float _2946 = _2669;
                float _2947 = _2671;
                uint _2948 = _2678;
                uint _2957;
                bool _2958;
                for (;;)
                {
                    _2957 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                    _2958 = _2957 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2958)
                    {
                        frontier_phi_77_pred = _2947;
                        frontier_phi_77_pred_1 = _2946;
                        frontier_phi_77_pred_2 = _2945;
                        frontier_phi_77_pred_3 = _2944;
                        frontier_phi_77_pred_4 = _2943;
                        frontier_phi_77_pred_5 = _2942;
                    }
                    else
                    {
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3164 = _2942;
                        float _3165 = _2943;
                        float _3166 = _2944;
                        float _3167 = _2945;
                        float _3168 = _2946;
                        float _3169 = _2947;
                        uint _3170 = _2957;
                        uint _3171;
                        vec4 _3196;
                        float _3197;
                        vec4 _3212;
                        vec3 _3224;
                        vec4 _3240;
                        vec4 _3255;
                        float _3301;
                        bool _3302;
                        for (;;)
                        {
                            uint _3181 = ((_2948 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3170));
                            _3171 = (_3170 + 4294967295u) & _3170;
                            uint _3183 = _3181 * 40u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            _3197 = _3196.w;
                            uint _3199 = (_3181 * 40u) + 4u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3181 * 40u) + 8u;
                            _3224 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x));
                            uint _3227 = (_3181 * 40u) + 16u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3181 * 40u) + 20u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3181 * 40u) + 24u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3276 = (_3181 * 40u) + 28u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3301 = fma(_2516, _3289.z, fma(_2515, _3289.y, _3289.x * _2514)) + _3289.w;
                            _3302 = !((fma(_2516, _3270.z, fma(_2515, _3270.y, _3270.x * _2514)) + _3270.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3302)
                            {
                                float _3329 = _3196.x - _2514;
                                float _3330 = _3196.y - _2515;
                                float _3331 = _3196.z - _2516;
                                float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                                float _3335 = inversesqrt(_3332);
                                float _3336 = _3335 * _3329;
                                float _3337 = _3335 * _3330;
                                float _3338 = _3335 * _3331;
                                float _3342 = 1.0 - (_3332 / (_3197 * _3197));
                                float _4490 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3347 = sqrt(_3332) * _3212.w;
                                float _3349 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                                float _3350 = _3349 * _3349;
                                float _3353 = ((1.0 - _3350) * dot(vec3(_3336, _3337, _3338), vec3(_724, _727, _730))) + _3350;
                                float _3356 = _3347 * _3347;
                                float _3360 = (fma(_2516, _3240.z, fma(_2515, _3240.y, _3240.x * _2514)) + _3240.w) / _3301;
                                float _3361 = (fma(_2516, _3255.z, fma(_2515, _3255.y, _3255.x * _2514)) + _3255.w) / _3301;
                                float _3365 = 1.0 - dot(vec2(_3360, _3361), vec2(_3360, _3361));
                                float _4506 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3367 = _3366 * (((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3343) / ((_3356 * 0.699999988079071044921875) + 1.0));
                                float _3379 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                                float _3380 = 1.0 - _799;
                                float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                                float _3388 = _3387 * _3387;
                                float _3389 = _3388 * _3388;
                                float _3390 = _3336 - _2808;
                                float _3391 = _3337 - _2809;
                                float _3392 = _3338 - _2810;
                                float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                                float _3400 = dot(vec3(_724, _727, _730), vec3((-0.0) - _2808, (-0.0) - _2809, (-0.0) - _2810));
                                float _4517 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3404 = dot(vec3(_724, _727, _730), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                                float _4528 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                                float _3412 = _3349 * _3388;
                                float _3413 = _3412 * _3412;
                                float _3419 = ((1.0 - _3413) * dot(vec3(_724, _727, _730), vec3(_3336, _3337, _3338))) + _3413;
                                float _4539 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3421 = 1.0 - _3388;
                                float _3431 = (0.5 / (((_3420 * ((_3403 * _3421) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3388) * _3403))) * _3420;
                                float _4550 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3441 = (_3366 * _3343) * (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3411 * _3411) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3367 * _3212.y;
                                frontier_phi_83_pred_1 = _3367 * _3212.x;
                                frontier_phi_83_pred_2 = _3441 * _3224.z;
                                frontier_phi_83_pred_3 = _3441 * _3224.y;
                                frontier_phi_83_pred_4 = _3441 * _3224.x;
                                frontier_phi_83_pred_5 = _3367 * _3212.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3449 = frontier_phi_83_pred;
                            _3448 = frontier_phi_83_pred_1;
                            _3447 = frontier_phi_83_pred_2;
                            _3446 = frontier_phi_83_pred_3;
                            _3445 = frontier_phi_83_pred_4;
                            _3450 = frontier_phi_83_pred_5;
                            _3154 = _3448 + _3167;
                            _3155 = _3449 + _3168;
                            _3156 = _3450 + _3169;
                            _3151 = _3445 + _3164;
                            _3152 = _3446 + _3165;
                            _3153 = _3447 + _3166;
                            if (_3171 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3171;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3156;
                        frontier_phi_77_pred_1 = _3155;
                        frontier_phi_77_pred_2 = _3154;
                        frontier_phi_77_pred_3 = _3153;
                        frontier_phi_77_pred_4 = _3152;
                        frontier_phi_77_pred_5 = _3151;
                    }
                    _2793 = frontier_phi_77_pred;
                    _2791 = frontier_phi_77_pred_1;
                    _2789 = frontier_phi_77_pred_2;
                    _2787 = frontier_phi_77_pred_3;
                    _2785 = frontier_phi_77_pred_4;
                    _2783 = frontier_phi_77_pred_5;
                    uint _2949 = _2948 + 1u;
                    if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2942 = _2783;
                        _2943 = _2785;
                        _2944 = _2787;
                        _2945 = _2789;
                        _2946 = _2791;
                        _2947 = _2793;
                        _2948 = _2949;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2787;
                frontier_phi_58_59_ladder_1 = _2793;
                frontier_phi_58_59_ladder_2 = _2791;
                frontier_phi_58_59_ladder_3 = _2789;
                frontier_phi_58_59_ladder_4 = _2785;
                frontier_phi_58_59_ladder_5 = _2783;
            }
            else
            {
                frontier_phi_58_59_ladder = _2665;
                frontier_phi_58_59_ladder_1 = _2671;
                frontier_phi_58_59_ladder_2 = _2669;
                frontier_phi_58_59_ladder_3 = _2667;
                frontier_phi_58_59_ladder_4 = _2663;
                frontier_phi_58_59_ladder_5 = _2661;
            }
            _2782 = frontier_phi_58_59_ladder_5;
            _2784 = frontier_phi_58_59_ladder_4;
            _2786 = frontier_phi_58_59_ladder;
            _2788 = frontier_phi_58_59_ladder_3;
            _2790 = frontier_phi_58_59_ladder_2;
            _2792 = frontier_phi_58_59_ladder_1;
        }
        float _2797 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2573 = (_2797 * _2788) + _2006;
        _2575 = (_2797 * _2790) + _2008;
        _2577 = (_2797 * _2792) + _2010;
        _2579 = ((_2782 * _767) * _2797) + _2354;
        _2581 = ((_2784 * _769) * _2797) + _2356;
        _2583 = ((_2786 * _770) * _2797) + _2358;
    }
    else
    {
        _2573 = _2006;
        _2575 = _2008;
        _2577 = _2010;
        _2579 = _2354;
        _2581 = _2356;
        _2583 = _2358;
    }
    float _4566 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4577 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4588 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2600 = ((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2573 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _783))) + ((_2579 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    float _2601 = ((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2575 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _783))) + ((_2581 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    float _2602 = ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2577 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _783))) + ((_2583 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    uint _2603 = _247 + 6u;
    float _2611 = _703 / cbSceneParam._m0[86u].x;
    float _2612 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2626 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, (log2((isnan(cbSceneParam._m0[77u].w) ? _625 : (isnan(_625) ? cbSceneParam._m0[77u].w : min(_625, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2628 = _2626.x;
    float _2629 = _2626.y;
    float _2630 = _2626.z;
    float _2631 = _2626.w;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_625 > cbSceneParam._m0[78u].w)
    {
        float _2686 = isnan(_625) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _625 : min(cbSceneParam._m0[80u].w, _625));
        float _2687 = _2686 / _625;
        float _2698 = _2687 * _675;
        float _2699 = _676 * _2687;
        float _2700 = (-0.0) - _2699;
        float _2702 = _2687 * _677;
        float _2704 = (cbSceneParam._m0[77u].w * _2700) / _2686;
        float _2705 = _2704 + cbSceneParam._m0[79u].w;
        float _2706 = cbSceneParam._m0[79u].w - _2699;
        float _2712 = sqrt(((_2698 * _2698) + (_2699 * _2699)) + (_2702 * _2702));
        float _2715 = (1.0 - (cbSceneParam._m0[77u].w / _2686)) * _2712;
        float _2720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2899;
        if (abs((_2700 - _2704) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2899 = ((((_2705 > 0.0) ? exp2(_2720 * _2705) : (2.0 - exp2(_2722 * _2705))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2715;
        }
        else
        {
            float _2843 = 1.0 / cbSceneParam._m0[80u].x;
            float _2844 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : max(_2705, _2706));
            float _2845 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : min(_2705, _2706));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            float _2855 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : min(_2845, 0.0));
            _2899 = ((abs(_2712 / _2700) * cbSceneParam._m0[80u].y) * ((((_2854 - _2855) * 2.0) - ((exp2(_2720 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0)))) - exp2(_2720 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))))) * _2843)) - ((exp2(_2722 * _2854) - exp2(_2722 * _2855)) * _2843))) + (_2715 * cbSceneParam._m0[80u].z);
        }
        vec4 _2901 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, 1.0), 0.0);
        float _2910 = exp2((_2899 * (-1.44269502162933349609375)) * (1.0 - _2901.w));
        float _2911 = log2(_2910);
        float _2927 = log2(_2631);
        _2724 = (exp2(_2927 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].x)) * _2901.x) / cbSceneParam._m0[78u].x)) + _2628;
        _2726 = (exp2(_2927 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].y)) * _2901.y) / cbSceneParam._m0[78u].y)) + _2629;
        _2728 = (exp2(_2927 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].z)) * _2901.z) / cbSceneParam._m0[78u].z)) + _2630;
        _2730 = _2910 * _2631;
    }
    else
    {
        _2724 = _2628;
        _2726 = _2629;
        _2728 = _2630;
        _2730 = _2631;
    }
    bool _2937;
    vec4 _2740;
    vec4 _2762;
    float _2764;
    float _2768;
    float _2769;
    float _2770;
    float _2771;
    bool _2781;
    for (;;)
    {
        _2740 = cbMatDynParam._m0[0u];
        float _2742 = roundEven(_2740.y);
        bool _2743 = _2742 == 3.0;
        float _2744 = log2(_2730);
        float _2751 = exp2(_2744 * cbSceneParam._m0[78u].x) * _2600;
        float _2752 = exp2(_2744 * cbSceneParam._m0[78u].y) * _2601;
        float _2753 = exp2(_2744 * cbSceneParam._m0[78u].z) * _2602;
        float _2760 = _691 + (-0.5);
        _2762 = cbMtdParam._m0[1u];
        _2764 = _2762.y * _2760;
        float _2767 = (_2742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2768 = _2767 * (_2743 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2724)));
        _2769 = _2767 * (_2743 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2726)));
        _2770 = _2767 * (_2743 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2728)));
        _2771 = _2760 * 0.999000012874603271484375;
        _2781 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2781)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2771) < 0.5)
            {
                _2937 = true;
                break;
            }
        }
        uint _2878 = _743 + uint(_2740.w);
        if ((cbInstanceData._m0[_2878].w < 1.0) && ((cbInstanceData._m0[_2878].w + _2771) < 0.5))
        {
            _2937 = true;
            break;
        }
        if ((_2764 + 1.0) < _2762.x)
        {
            _2937 = true;
            break;
        }
        _2937 = false;
        break;
    }
    float _3142;
    if (_2937)
    {
        discard_state = true;
        _3142 = 0.0;
    }
    else
    {
        _3142 = cbInstanceData._m0[_2603].w;
    }
    SV_Target.x = _2768;
    SV_Target.y = _2769;
    SV_Target.z = _2770;
    SV_Target.w = _3142;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2603].w;
    discard_exit();
}


