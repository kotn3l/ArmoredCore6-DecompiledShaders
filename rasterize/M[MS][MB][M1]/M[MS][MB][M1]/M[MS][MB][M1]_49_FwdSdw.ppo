#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _334 = (_325.x * 2.0) + (-1.0);
    float _336 = (_325.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3764 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    float _346 = fma(_343, _227, fma(_336, _234, _334 * _220));
    float _349 = fma(_343, _228, fma(_336, _235, _334 * _221));
    float _352 = fma(_343, _229, fma(_336, _236, _334 * _222));
    float _356 = inversesqrt(dot(vec3(_346, _349, _352), vec3(_346, _349, _352)));
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _394 = _392.x;
    float _395 = 1.0 - _394;
    float _404 = (cbMtdParam._m0[19u].x + dot(vec4(_356 * _346, _356 * _349, _356 * _352, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_394 - _395) * cbMtdParam._m0[24u].z) + _395) * cbMtdParam._m0[21u].z);
    float _3775 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _407 = (-0.0) - cbMtdParam._m0[24u].x;
    float _409 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
    float _417 = _405 - ((_405 * TEXCOORD_8.x) * _410);
    float _418 = _405 - ((_405 * TEXCOORD_8.y) * _410);
    float _419 = _405 - ((_405 * TEXCOORD_8.z) * _410);
    float _426 = (_417 * ((_305.x * cbMtdParam._m0[18u].x) - _284)) + _284;
    float _427 = (_418 * ((_305.y * cbMtdParam._m0[18u].y) - _285)) + _285;
    float _428 = (_419 * ((_305.z * cbMtdParam._m0[18u].z) - _286)) + _286;
    vec4 _440 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _442 = _440.x;
    float _443 = 1.0 - _442;
    float _473 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_442 - _443) * cbMtdParam._m0[24u].w) + _443) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3796 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _482 = ((((cbMtdParam._m0[10u].x - _426) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _474) + _426;
    float _483 = ((((cbMtdParam._m0[10u].y - _427) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _474) + _427;
    float _484 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _428)) * _474) + _428;
    vec4 _497 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _499 = _497.x;
    float _501 = _499 - (_499 * _417);
    float _503 = _501 - (_501 * _474);
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _524 = (_517.x * 2.0) + (-1.0);
    float _525 = (_517.y * 2.0) + (-1.0);
    float _526 = dot(vec2(_524, _525), vec2(_524, _525));
    float _3807 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _534 = ((_517.z - _329) * _417) + _329;
    float _537 = ((cbMtdParam._m0[23u].y - _534) * _474) + _534;
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _562 = (_556.x * 2.0) + (-1.0);
    float _563 = (_556.y * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3818 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _579 = ((sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) - _343) * _419) + _343;
    float _582 = (((_524 - _334) * _417) + _334) + (cbMtdParam._m0[21u].x * _334);
    float _583 = (((_525 - _336) * _418) + _336) + (cbMtdParam._m0[21u].x * _336);
    float _594 = (((_562 - _582) + (_582 * cbMtdParam._m0[22u].z)) * _474) + _582;
    float _595 = (((_563 - _583) + (_583 * cbMtdParam._m0[22u].z)) * _474) + _583;
    float _596 = (_474 * (sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) - _579)) + _579;
    float _598 = cbMtdParam._m0[22u].x + _325.w;
    float _601 = fma(_596, _227, fma(_595, _234, _594 * _220));
    float _604 = fma(_596, _228, fma(_595, _235, _594 * _221));
    float _607 = fma(_596, _229, fma(_595, _236, _594 * _222));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3829 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _615 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3851 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3862 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3873 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3884 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _620 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _724 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _727 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _741 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3895 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _753 = 1.0 - _620;
    float _754 = _750 * _753;
    float _755 = _751 * _753;
    float _756 = _752 * _753;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _620;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _620;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _620;
    float _764 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    float _767 = _763 + 0.039999999105930328369140625;
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _780 = ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * TEXCOORD_5.w) * _776.x;
    float _781 = dot(vec3(_612, _613, _614), vec3(_691, _692, _693));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _612) - _691;
    float _789 = (_784 * _613) - _692;
    float _790 = (_784 * _614) - _693;
    float _794 = abs(dot(vec3(_691, _692, _693), vec3(_612, _613, _614)));
    float _3928 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_615);
    float _809 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _815 = (1.0 - _809) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _816 = _809 * _796;
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _882 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _886 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _911 = _844 + _612;
        float _912 = _848 + _613;
        float _913 = _852 + _614;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_612, _613, _614), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3976 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_612, _613, _614), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _4009 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_612, _613, _614), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4042 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1197 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1201 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1224 = _844 + _612;
        float _1225 = _848 + _613;
        float _1226 = _852 + _614;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_612, _613, _614), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4105 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_612, _613, _614), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4138 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_612, _613, _614), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4171 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1154;
        _1463 = _1154;
        _1464 = _1154;
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _788 * 0.5;
    float _1531 = _789 * 0.5;
    float _1532 = _790 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1646 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1650 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1654 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1657 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1660 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1663 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1691;
        if (_1657 > 0.0)
        {
            _1691 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1691 = frontier_phi_14_12_ladder;
        }
        float _1862;
        if (_1660 > 0.0)
        {
            _1862 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1862 = frontier_phi_23_19_ladder;
        }
        float _2158;
        if (_1663 > 0.0)
        {
            _2158 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2158 = frontier_phi_35_30_ladder;
        }
        float _2160 = isnan(_1862) ? _1691 : (isnan(_1691) ? _1862 : min(_1691, _1862));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1657) + _1646;
        float _2166 = (_2161 * _1660) + _1650;
        float _2167 = (_2161 * _1663) + _1654;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2168;
        float _2172 = _2168 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 > _2172) || ((_2166 < _2170) || ((_2165 < _2170) || (_2165 > _2172))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_13_35_ladder = _2312.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2312.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2312.x * cbModelParam._m0[1u].y;
        }
        _1679 = frontier_phi_13_35_ladder_2;
        _1681 = frontier_phi_13_35_ladder_1;
        _1683 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1599);
        _1679 = _1667.x * cbModelParam._m0[1u].y;
        _1681 = _1667.y * cbModelParam._m0[1u].y;
        _1683 = _1667.z * cbModelParam._m0[1u].y;
    }
    float _1687 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1687 : min(cbModelParam._m0[25u].w, _1687));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1741 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1745 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1749 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1752 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1755 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1758 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1867;
        if (_1752 > 0.0)
        {
            _1867 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1867 = frontier_phi_25_21_ladder;
        }
        float _2185;
        if (_1755 > 0.0)
        {
            _2185 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2185 = frontier_phi_37_32_ladder;
        }
        float _2523;
        if (_1758 > 0.0)
        {
            _2523 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2523 = frontier_phi_47_44_ladder;
        }
        float _2525 = isnan(_2185) ? _1867 : (isnan(_1867) ? _2185 : min(_1867, _2185));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1752) + _1741;
        float _2531 = (_2526 * _1755) + _1745;
        float _2532 = (_2526 * _1758) + _1749;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2532, cbModelParam._m0[17u].z, fma(_2531, cbModelParam._m0[17u].y, _2530 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2532, cbModelParam._m0[18u].z, fma(_2531, cbModelParam._m0[18u].y, _2530 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2532, cbModelParam._m0[19u].z, fma(_2531, cbModelParam._m0[19u].y, _2530 * cbModelParam._m0[19u].x))), _1688);
            frontier_phi_22_47_ladder = _2654.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2654.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2654.x * cbModelParam._m0[1u].z;
        }
        _1777 = frontier_phi_22_47_ladder_2;
        _1779 = frontier_phi_22_47_ladder_1;
        _1781 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1688);
        _1777 = _1761.x * cbModelParam._m0[1u].z;
        _1779 = _1761.y * cbModelParam._m0[1u].z;
        _1781 = _1761.z * cbModelParam._m0[1u].z;
    }
    float _1794 = (((_815 * _764) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1777 - _1679)) + _1679);
    float _1796 = (((_815 * _766) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1779 - _1681)) + _1681);
    float _1798 = (((_815 * _767) + _816) * _780) * ((cbModelParam._m0[1u].w * (_1781 - _1683)) + _1683);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1794 * cbSceneParam._m0[91u].x));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1854 = _1841 / _1853;
    float _1855 = _1845 / _1853;
    float _1856 = _1849 / _1853;
    float _2003;
    float _2004;
    float _2005;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1883 = ((uint(_1856 > cbSceneParam._m0[59u].y) + uint(_1856 > cbSceneParam._m0[59u].x)) + uint(_1856 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1884 = _1883 + 43u;
        uint _1892 = _1883 + 44u;
        uint _1900 = _1883 + 45u;
        uint _1908 = _1883 + 46u;
        float _1919 = fma(_1853, cbSceneParam._m0[_1884].w, fma(_1849, cbSceneParam._m0[_1884].z, fma(_1845, cbSceneParam._m0[_1884].y, _1841 * cbSceneParam._m0[_1884].x)));
        float _1923 = fma(_1853, cbSceneParam._m0[_1892].w, fma(_1849, cbSceneParam._m0[_1892].z, fma(_1845, cbSceneParam._m0[_1892].y, _1841 * cbSceneParam._m0[_1892].x)));
        float _1931 = fma(_1853, cbSceneParam._m0[_1908].w, fma(_1849, cbSceneParam._m0[_1908].z, fma(_1845, cbSceneParam._m0[_1908].y, _1841 * cbSceneParam._m0[_1908].x)));
        float _1936 = cbSceneParam._m0[33u].z * _1931;
        float _1938 = cbSceneParam._m0[33u].w * _1931;
        float _1941 = fma(_1853, cbSceneParam._m0[_1900].w, fma(_1849, cbSceneParam._m0[_1900].z, fma(_1845, cbSceneParam._m0[_1900].y, _1841 * cbSceneParam._m0[_1900].x))) / _1931;
        float _1989 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
        float _4297 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1996 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1936 + _1919) / _1931, (_1938 + _1923) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 + _1919) / _1931, (_1923 - _1936) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1936) / _1931, (_1923 - _1938) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1938) / _1931, (_1936 + _1923) / _1931), _1941), 0.0)).x), vec4(0.25)));
        _2003 = 1.0 - (_1996 * cbSceneParam._m0[34u].x);
        _2004 = 1.0 - (_1996 * cbSceneParam._m0[34u].y);
        _2005 = 1.0 - (_1996 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2003 = 1.0;
        _2004 = 1.0;
        _2005 = 1.0;
    }
    float _2069;
    float _2071;
    float _2073;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2057 = fma(_1853, cbSceneParam._m0[63u].w, fma(_1849, cbSceneParam._m0[63u].z, fma(_1845, cbSceneParam._m0[63u].y, _1841 * cbSceneParam._m0[63u].x)));
        float _2058 = fma(_1853, cbSceneParam._m0[60u].w, fma(_1849, cbSceneParam._m0[60u].z, fma(_1845, cbSceneParam._m0[60u].y, _1841 * cbSceneParam._m0[60u].x))) / _2057;
        float _2059 = fma(_1853, cbSceneParam._m0[61u].w, fma(_1849, cbSceneParam._m0[61u].z, fma(_1845, cbSceneParam._m0[61u].y, _1841 * cbSceneParam._m0[61u].x))) / _2057;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2058 >= cbSceneParam._m0[64u].x) && (_2059 >= cbSceneParam._m0[64u].y)) && (_2058 <= cbSceneParam._m0[64u].z)) && (_2059 <= cbSceneParam._m0[64u].w))
        {
            float _2198 = fma(_1853, cbSceneParam._m0[62u].w, fma(_1849, cbSceneParam._m0[62u].z, fma(_1845, cbSceneParam._m0[62u].y, _1841 * cbSceneParam._m0[62u].x))) / _2057;
            float _2202 = isnan(cbSceneParam._m0[41u].w) ? _2198 : (isnan(_2198) ? cbSceneParam._m0[41u].w : max(_2198, cbSceneParam._m0[41u].w));
            float _2245 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
            float _4313 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
            float _2252 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2058, cbSceneParam._m0[33u].w + _2059), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2058, _2059 - cbSceneParam._m0[33u].z), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].z, _2059 - cbSceneParam._m0[33u].w), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2059), _2202), 0.0)).x), vec4(0.25)));
            float _2256 = 1.0 - (_2252 * cbSceneParam._m0[34u].x);
            float _2257 = 1.0 - (_2252 * cbSceneParam._m0[34u].y);
            float _2258 = 1.0 - (_2252 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2258) ? _2005 : (isnan(_2005) ? _2258 : min(_2005, _2258));
            frontier_phi_34_33_ladder_1 = isnan(_2257) ? _2004 : (isnan(_2004) ? _2257 : min(_2004, _2257));
            frontier_phi_34_33_ladder_2 = isnan(_2256) ? _2003 : (isnan(_2003) ? _2256 : min(_2003, _2256));
        }
        else
        {
            frontier_phi_34_33_ladder = _2005;
            frontier_phi_34_33_ladder_1 = _2004;
            frontier_phi_34_33_ladder_2 = _2003;
        }
        _2069 = frontier_phi_34_33_ladder_2;
        _2071 = frontier_phi_34_33_ladder_1;
        _2073 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2069 = _2003;
        _2071 = _2004;
        _2073 = _2005;
    }
    uvec4 _2078 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _2080 = _2078.x * 14u;
    uint _2081 = _2080 + 13u;
    float _2088 = _780 + (-1.0);
    float _2093 = (cbLight._m0[_2081].x * _2088) + 1.0;
    float _2094 = (cbLight._m0[_2081].y * _2088) + 1.0;
    float _2095 = (cbLight._m0[_2081].z * _2088) + 1.0;
    float _2096 = (cbLight._m0[_2081].w * _2088) + 1.0;
    uint _2097 = _2080 + 5u;
    float _2103 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2107 = _2080 + 4u;
    float _2117 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2121 = _2080 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_612, _613, _614));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_612, _613, _614));
    float _4349 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4360 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2097].x * _2103) * _2142) + (((cbLight._m0[_2107].x * _2069) * _2117) * _2140);
    float _2150 = ((_2103 * cbLight._m0[_2097].y) * _2142) + (((cbLight._m0[_2107].y * _2071) * _2117) * _2140);
    float _2151 = ((_2103 * cbLight._m0[_2097].z) * _2142) + (((cbLight._m0[_2107].z * _2073) * _2117) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2080 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2157)
    {
        _2259 = _2149;
        _2261 = _2150;
        _2263 = _2151;
    }
    else
    {
        uint _2267 = _2080 + 6u;
        float _2283 = (dot(vec3(cbLight._m0[_2080 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4371 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2286 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2259 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2149;
        _2261 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2150;
        _2263 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2151;
    }
    bool _2266 = _2155.y == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2266)
    {
        _2321 = _2259;
        _2323 = _2261;
        _2325 = _2263;
    }
    else
    {
        uint _2494 = _2080 + 7u;
        float _2510 = (dot(vec3(cbLight._m0[_2080 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2511 = _2510 * _2510;
        float _4387 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2512 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2513 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2321 = (((cbLight._m0[_2494].x * 0.3183098733425140380859375) * _2512) * _2513) + _2259;
        _2323 = (((cbLight._m0[_2494].y * 0.3183098733425140380859375) * _2512) * _2513) + _2261;
        _2325 = (((cbLight._m0[_2494].z * 0.3183098733425140380859375) * _2512) * _2513) + _2263;
    }
    uint _2328 = _2080 + 8u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _615) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2080].x + _691;
    float _2344 = cbLight._m0[_2080].y + _692;
    float _2345 = cbLight._m0[_2080].z + _693;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2080].xyz));
    float _4403 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2357 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2358 = dot(vec3(_612, _613, _614), vec3(_2350, _2351, _2352));
    float _4425 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2350, _2351, _2352));
    float _4436 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2342 * _2342;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
    float _2379 = 0.959999978542327880859375 - _761;
    float _2381 = 0.959999978542327880859375 - _762;
    float _2382 = 0.959999978542327880859375 - _763;
    float _2389 = 1.0 - _2342;
    float _2400 = (0.5 / (((_2357 * ((_2356 * _2389) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2389) + _2342) * _2356))) * _2356;
    float _4447 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    uint _2416 = _2080 + 9u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _615) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2121].x + _691;
    float _2430 = cbLight._m0[_2121].y + _692;
    float _2431 = cbLight._m0[_2121].z + _693;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2121].xyz));
    float _4458 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2443 = dot(vec3(_612, _613, _614), vec3(_2436, _2437, _2438));
    float _4469 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2436, _2437, _2438));
    float _4480 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2428 * _2428;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
    float _2469 = 1.0 - _2428;
    float _2479 = (0.5 / (((_2357 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2469) + _2428) * _2442))) * _2442;
    float _4491 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    float _2491 = (((((_2462 * _2379) + _764) * cbLight._m0[_2416].x) * _2481) * _2103) + ((((cbLight._m0[_2328].x * _2069) * ((_2378 * _2379) + _764)) * _2402) * _2117);
    float _2492 = (((((_2462 * _2381) + _766) * cbLight._m0[_2416].y) * _2481) * _2103) + ((((cbLight._m0[_2328].y * _2071) * ((_2378 * _2381) + _766)) * _2402) * _2117);
    float _2493 = (((((_2462 * _2382) + _767) * cbLight._m0[_2416].z) * _2481) * _2103) + ((((cbLight._m0[_2328].z * _2073) * ((_2378 * _2382) + _767)) * _2402) * _2117);
    float _2549;
    float _2551;
    float _2553;
    if (_2157)
    {
        _2549 = _2491;
        _2551 = _2492;
        _2553 = _2493;
    }
    else
    {
        uint _2555 = _2080 + 2u;
        uint _2559 = _2080 + 10u;
        float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2555].w)) * _615) * 0.949999988079071044921875);
        float _2574 = _2573 * _2573;
        float _2575 = cbLight._m0[_2555].x + _691;
        float _2576 = cbLight._m0[_2555].y + _692;
        float _2577 = cbLight._m0[_2555].z + _693;
        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
        float _2582 = _2581 * _2575;
        float _2583 = _2581 * _2576;
        float _2584 = _2581 * _2577;
        float _2585 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2555].xyz));
        float _4502 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2589 = dot(vec3(_612, _613, _614), vec3(_2582, _2583, _2584));
        float _4513 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2593 = dot(vec3(cbLight._m0[_2555].xyz), vec3(_2582, _2583, _2584));
        float _4524 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2597 = _2574 * _2574;
        float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
        float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
        float _2615 = 1.0 - _2574;
        float _2625 = (0.5 / (((_2357 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2615) + _2574) * _2588))) * _2588;
        float _4535 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2627 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
        float _2628 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2549 = (((((_2608 * _2379) + _764) * cbLight._m0[_2559].x) * _2627) * _2628) + _2491;
        _2551 = (((((_2608 * _2381) + _766) * cbLight._m0[_2559].y) * _2627) * _2628) + _2492;
        _2553 = (((((_2608 * _2382) + _767) * cbLight._m0[_2559].z) * _2627) * _2628) + _2493;
    }
    float _2659;
    float _2661;
    float _2663;
    if (_2266)
    {
        _2659 = _2549;
        _2661 = _2551;
        _2663 = _2553;
    }
    else
    {
        uint _2670 = _2080 + 3u;
        uint _2674 = _2080 + 11u;
        float _2688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2670].w)) * _615) * 0.949999988079071044921875);
        float _2689 = _2688 * _2688;
        float _2690 = cbLight._m0[_2670].x + _691;
        float _2691 = cbLight._m0[_2670].y + _692;
        float _2692 = cbLight._m0[_2670].z + _693;
        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
        float _2697 = _2696 * _2690;
        float _2698 = _2696 * _2691;
        float _2699 = _2696 * _2692;
        float _2700 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2670].xyz));
        float _4551 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2704 = dot(vec3(_612, _613, _614), vec3(_2697, _2698, _2699));
        float _4562 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2708 = dot(vec3(cbLight._m0[_2670].xyz), vec3(_2697, _2698, _2699));
        float _4573 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2712 = _2689 * _2689;
        float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
        float _2723 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2730 = 1.0 - _2689;
        float _2740 = (0.5 / (((_2357 * ((_2703 * _2730) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2730) + _2689) * _2703))) * _2703;
        float _4584 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2742 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
        float _2743 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2659 = (((((_2723 * _2379) + _764) * cbLight._m0[_2674].x) * _2742) * _2743) + _2549;
        _2661 = (((((_2723 * _2381) + _766) * cbLight._m0[_2674].y) * _2742) * _2743) + _2551;
        _2663 = (((((_2723 * _2382) + _767) * cbLight._m0[_2674].z) * _2742) * _2743) + _2553;
    }
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_2078.y == 0u)
    {
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.x;
        uint _2776 = uint((float(_2764.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2765))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2765)));
        float _2786 = (log2(_1856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2787 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        uint _2790 = uint(isnan(14.0) ? _2787 : (isnan(_2787) ? 14.0 : min(_2787, 14.0)));
        uvec4 _2795 = texelFetch(g_lightClusterGridBuffer, int(((_2790 << 2u) + (_2776 << 6u)) >> 2u));
        uint _2796 = _2795.x;
        uint _2797 = _2764.z;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((((1u << ((_2797 >> 4u) & 15u)) + 4294967295u) & _2796) == 0u) || ((_2797 & 240u) == 0u))
        {
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
        }
        else
        {
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            uint _3026 = 0u;
            uint _3035;
            bool _3036;
            for (;;)
            {
                _3035 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                _3036 = _3035 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3036)
                {
                    frontier_phi_66_pred = _3025;
                    frontier_phi_66_pred_1 = _3024;
                    frontier_phi_66_pred_2 = _3023;
                    frontier_phi_66_pred_3 = _3022;
                    frontier_phi_66_pred_4 = _3021;
                    frontier_phi_66_pred_5 = _3020;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3035;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3026 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _1854;
                        float _3211 = _3170.y - _1855;
                        float _3212 = _3170.z - _1856;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_721, _724, _727), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4610 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _1854;
                        float _3246 = (-0.0) - _1855;
                        float _3247 = (-0.0) - _1856;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3261 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3262 = 1.0 - _796;
                        float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                        float _3270 = _3269 * _3269;
                        float _3271 = _3270 * _3270;
                        float _3272 = _3252 + _3217;
                        float _3273 = _3253 + _3218;
                        float _3274 = _3254 + _3219;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3282 = dot(vec3(_721, _724, _727), vec3(_3252, _3253, _3254));
                        float _4626 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3286 = dot(vec3(_721, _724, _727), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                        float _4637 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                        float _3294 = _3230 * _3270;
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3220) + _3295;
                        float _4648 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3300 = 1.0 - _3270;
                        float _3310 = (0.5 / (((_3299 * ((_3285 * _3300) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3270) * _3285))) * _3299;
                        float _4659 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3321 = (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3293 * _3293) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3079 = (_3241 * _3189.x) + _3147;
                        _3080 = (_3241 * _3189.y) + _3148;
                        _3081 = (_3241 * _3189.z) + _3149;
                        _3076 = (_3321 * _3206.x) + _3144;
                        _3077 = (_3321 * _3206.y) + _3145;
                        _3078 = (_3321 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_66_pred = _3081;
                    frontier_phi_66_pred_1 = _3080;
                    frontier_phi_66_pred_2 = _3079;
                    frontier_phi_66_pred_3 = _3078;
                    frontier_phi_66_pred_4 = _3077;
                    frontier_phi_66_pred_5 = _3076;
                }
                _2887 = frontier_phi_66_pred;
                _2885 = frontier_phi_66_pred_1;
                _2883 = frontier_phi_66_pred_2;
                _2881 = frontier_phi_66_pred_3;
                _2879 = frontier_phi_66_pred_4;
                _2877 = frontier_phi_66_pred_5;
                uint _3027 = _3026 + 1u;
                if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3020 = _2877;
                    _3021 = _2879;
                    _3022 = _2881;
                    _3023 = _2883;
                    _3024 = _2885;
                    _3025 = _2887;
                    _3026 = _3027;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
        }
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.z;
        uint _2893 = (_2891 >> 8u) & 15u;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((4294967295u << _2893) & _2796) == 0u)
        {
            _2988 = _2876;
            _2990 = _2878;
            _2992 = _2880;
            _2994 = _2882;
            _2996 = _2884;
            _2998 = _2886;
        }
        else
        {
            float _3013 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
            float _3014 = _3013 * _1854;
            float _3015 = _3013 * _1855;
            float _3016 = _3013 * _1856;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2893 < ((_2891 >> 12u) & 15u))
            {
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3127 = _2876;
                float _3128 = _2878;
                float _3129 = _2880;
                float _3130 = _2882;
                float _3131 = _2884;
                float _3132 = _2886;
                uint _3133 = _2893;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3143)
                    {
                        frontier_phi_72_pred = _3132;
                        frontier_phi_72_pred_1 = _3131;
                        frontier_phi_72_pred_2 = _3130;
                        frontier_phi_72_pred_3 = _3129;
                        frontier_phi_72_pred_4 = _3128;
                        frontier_phi_72_pred_5 = _3127;
                    }
                    else
                    {
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3339 = _3127;
                        float _3340 = _3128;
                        float _3341 = _3129;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        uint _3345 = _3142;
                        uint _3346;
                        vec4 _3371;
                        float _3372;
                        vec4 _3387;
                        vec3 _3399;
                        vec4 _3415;
                        vec4 _3431;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3356 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3345));
                            _3346 = (_3345 + 4294967295u) & _3345;
                            uint _3358 = _3356 * 40u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3372 = _3371.w;
                            uint _3374 = (_3356 * 40u) + 4u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3356 * 40u) + 8u;
                            _3399 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x));
                            uint _3402 = (_3356 * 40u) + 16u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3418 = (_3356 * 40u) + 20u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3356 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3356 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_1856, _3465.z, fma(_1855, _3465.y, _3465.x * _1854)) + _3465.w;
                            _3478 = !((fma(_1856, _3446.z, fma(_1855, _3446.y, _3446.x * _1854)) + _3446.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3371.x - _1854;
                                float _3506 = _3371.y - _1855;
                                float _3507 = _3371.z - _1856;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3372 * _3372));
                                float _4670 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3523 = sqrt(_3508) * _3387.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_721, _724, _727))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_1856, _3415.z, fma(_1855, _3415.y, _3415.x * _1854)) + _3415.w) / _3477;
                                float _3537 = (fma(_1856, _3431.z, fma(_1855, _3431.y, _3431.x * _1854)) + _3431.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4686 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _796;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _3014;
                                float _3567 = _3513 - _3015;
                                float _3568 = _3514 - _3016;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_721, _724, _727), vec3((-0.0) - _3014, (-0.0) - _3015, (-0.0) - _3016));
                                float _4697 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3580 = dot(vec3(_721, _724, _727), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4708 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_721, _724, _727), vec3(_3512, _3513, _3514))) + _3589;
                                float _4719 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4730 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3543 * _3387.y;
                                frontier_phi_78_pred_1 = _3543 * _3387.x;
                                frontier_phi_78_pred_2 = _3617 * _3399.z;
                                frontier_phi_78_pred_3 = _3617 * _3399.y;
                                frontier_phi_78_pred_4 = _3617 * _3399.x;
                                frontier_phi_78_pred_5 = _3543 * _3387.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3625 = frontier_phi_78_pred;
                            _3624 = frontier_phi_78_pred_1;
                            _3623 = frontier_phi_78_pred_2;
                            _3622 = frontier_phi_78_pred_3;
                            _3621 = frontier_phi_78_pred_4;
                            _3626 = frontier_phi_78_pred_5;
                            _3329 = _3624 + _3342;
                            _3330 = _3625 + _3343;
                            _3331 = _3626 + _3344;
                            _3326 = _3621 + _3339;
                            _3327 = _3622 + _3340;
                            _3328 = _3623 + _3341;
                            if (_3346 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3346;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3331;
                        frontier_phi_72_pred_1 = _3330;
                        frontier_phi_72_pred_2 = _3329;
                        frontier_phi_72_pred_3 = _3328;
                        frontier_phi_72_pred_4 = _3327;
                        frontier_phi_72_pred_5 = _3326;
                    }
                    _2999 = frontier_phi_72_pred;
                    _2997 = frontier_phi_72_pred_1;
                    _2995 = frontier_phi_72_pred_2;
                    _2993 = frontier_phi_72_pred_3;
                    _2991 = frontier_phi_72_pred_4;
                    _2989 = frontier_phi_72_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2989;
                        _3128 = _2991;
                        _3129 = _2993;
                        _3130 = _2995;
                        _3131 = _2997;
                        _3132 = _2999;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2999;
                frontier_phi_60_61_ladder_1 = _2997;
                frontier_phi_60_61_ladder_2 = _2993;
                frontier_phi_60_61_ladder_3 = _2991;
                frontier_phi_60_61_ladder_4 = _2989;
                frontier_phi_60_61_ladder_5 = _2995;
            }
            else
            {
                frontier_phi_60_61_ladder = _2886;
                frontier_phi_60_61_ladder_1 = _2884;
                frontier_phi_60_61_ladder_2 = _2880;
                frontier_phi_60_61_ladder_3 = _2878;
                frontier_phi_60_61_ladder_4 = _2876;
                frontier_phi_60_61_ladder_5 = _2882;
            }
            _2988 = frontier_phi_60_61_ladder_4;
            _2990 = frontier_phi_60_61_ladder_3;
            _2992 = frontier_phi_60_61_ladder_2;
            _2994 = frontier_phi_60_61_ladder_5;
            _2996 = frontier_phi_60_61_ladder_1;
            _2998 = frontier_phi_60_61_ladder;
        }
        float _3003 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2809 = (_3003 * _2994) + _2321;
        _2811 = (_3003 * _2996) + _2323;
        _2813 = (_3003 * _2998) + _2325;
        _2815 = ((_2988 * _764) * _3003) + _2659;
        _2817 = ((_2990 * _766) * _3003) + _2661;
        _2819 = ((_2992 * _767) * _3003) + _2663;
    }
    else
    {
        _2809 = _2321;
        _2811 = _2323;
        _2813 = _2325;
        _2815 = _2659;
        _2817 = _2661;
        _2819 = _2663;
    }
    float _4746 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4757 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4768 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    uint _2839 = _239 + 6u;
    float _2847 = _699 / cbSceneParam._m0[86u].x;
    float _2848 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2862 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2864 = _2862.x;
    float _2865 = _2862.y;
    float _2866 = _2862.z;
    float _2867 = _2862.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2901 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2902 = _2901 / _634;
        float _2913 = _2902 * _684;
        float _2914 = _685 * _2902;
        float _2915 = (-0.0) - _2914;
        float _2916 = _2902 * _686;
        float _2918 = (cbSceneParam._m0[77u].w * _2915) / _2901;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2914;
        float _2926 = sqrt(((_2913 * _2913) + (_2914 * _2914)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2901)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2915 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3049 = 1.0 / cbSceneParam._m0[80u].x;
            float _3050 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3051 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            _3089 = ((abs(_2926 / _2915) * cbSceneParam._m0[80u].y) * ((((_3060 - _3061) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))))) * _3049)) - ((exp2(_2936 * _3060) - exp2(_2936 * _3061)) * _3049))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2867);
        _2938 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2864;
        _2940 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2865;
        _2942 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2866;
        _2944 = _3100 * _2867;
    }
    else
    {
        _2938 = _2864;
        _2940 = _2865;
        _2942 = _2866;
        _2944 = _2867;
    }
    float _2956 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2957 = _2956 == 3.0;
    float _2958 = log2(_2944);
    float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2809 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _780))) + ((_2815 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2811 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _780))) + ((_2817 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2813 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _780))) + ((_2819 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2976 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2976 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.y = _2976 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.z = _2976 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.w = cbInstanceData._m0[_2839].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2839].w;
}


