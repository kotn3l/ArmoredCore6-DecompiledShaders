#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1230;
float _3612;
float _3613;
float _3614;
float _3615;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3624 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _431 = ((_401.z - _422) * _374) + _422;
    float _434 = ((((_401.x - _420) * _374) + _420) * 2.0) + (-1.0);
    float _436 = ((((_401.y - _421) * _374) + _421) * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3635 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))));
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _470 = (((_458.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _434;
    float _471 = (((_458.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _436;
    float _474 = fma(_442, _224, fma(_471, _231, _470 * _217));
    float _477 = fma(_442, _225, fma(_471, _232, _470 * _218));
    float _480 = fma(_442, _226, fma(_471, _233, _470 * _219));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _520 = (cbMtdParam._m0[19u].x + dot(vec4(_484 * _474, _484 * _477, _484 * _480, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_513 - _514) * cbMtdParam._m0[24u].z) + _514) * cbMtdParam._m0[21u].z);
    float _3646 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _528 = (_521 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _529 = (_521 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _530 = (_521 * (cbMtdParam._m0[17u].z - _383)) + _383;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _558 = _556.x;
    float _576 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _558) * _374) + _558;
    float _580 = ((_542.x - _576) * cbMtdParam._m0[19u].z) + _576;
    float _582 = _580 - (_580 * _521);
    float _586 = (cbMtdParam._m0[19u].w * (_458.z - _431)) + _431;
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _606 = (_599.x * 2.0) + (-1.0);
    float _607 = (_599.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3657 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _616 = ((_599.z - _586) * _521) + _586;
    float _626 = ((sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) - _442) * _521) + _442;
    float _629 = (((_606 - _470) * _521) + _470) + (cbMtdParam._m0[21u].x * _470);
    float _630 = (((_607 - _471) * _521) + _471) + (cbMtdParam._m0[21u].x * _471);
    float _635 = cbMtdParam._m0[22u].x + _458.w;
    float _638 = fma(_626, _224, fma(_630, _231, _629 * _217));
    float _641 = fma(_626, _225, fma(_630, _232, _629 * _218));
    float _644 = fma(_626, _226, fma(_630, _233, _629 * _219));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _649 = _648 * _638;
    float _650 = _648 * _641;
    float _651 = _648 * _644;
    float _3668 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _652 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3690 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3701 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3712 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3723 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _657 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    vec4 _736 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _738 = _736.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _910 = sqrt(((_722 * _722) + (_723 * _723)) + (_724 * _724));
        float _916 = (cbMatDynParam._m0[5u].x * _910) + cbMatDynParam._m0[5u].y;
        float _3734 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _921 = (cbMatDynParam._m0[5u].z * _910) + cbMatDynParam._m0[5u].w;
        float _3745 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) - _917)) + _917) < ((_738 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _749 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _750 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _768 = fma(_651, cbSceneParam._m0[5u].z, fma(_650, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _649));
    float _771 = fma(_651, cbSceneParam._m0[6u].z, fma(_650, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _649));
    float _774 = fma(_651, cbSceneParam._m0[7u].z, fma(_650, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _649));
    uint _787 = _236 + 9u;
    uint _788 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _794 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_788].x;
    float _795 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_788].y;
    float _796 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_788].z;
    float _3756 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _800 = 1.0 - _657;
    float _801 = _797 * _800;
    float _802 = _798 * _800;
    float _803 = _799 * _800;
    float _808 = (_797 + (-0.039999999105930328369140625)) * _657;
    float _809 = (_798 + (-0.039999999105930328369140625)) * _657;
    float _810 = (_799 + (-0.039999999105930328369140625)) * _657;
    float _811 = _808 + 0.039999999105930328369140625;
    float _813 = _809 + 0.039999999105930328369140625;
    float _814 = _810 + 0.039999999105930328369140625;
    vec4 _823 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _749, cbSceneParam._m0[86u].y * _750));
    float _827 = ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * TEXCOORD_5.w) * _823.x;
    float _828 = dot(vec3(_649, _650, _651), vec3(_729, _730, _731));
    float _831 = _828 * 2.0;
    float _835 = (_831 * _649) - _729;
    float _836 = (_831 * _650) - _730;
    float _837 = (_831 * _651) - _731;
    float _841 = abs(dot(vec3(_729, _730, _731), vec3(_649, _650, _651)));
    float _3789 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _843 = sqrt(_652);
    float _856 = exp2((_843 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_843 * 3.0));
    float _862 = (1.0 - _856) * ((_843 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _863 = _856 * _843;
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_899, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891));
        float _958 = fma(_899, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891));
        float _962 = fma(_899, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891));
        float _987 = _891 + _649;
        float _988 = _895 + _650;
        float _989 = _899 + _651;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_649, _650, _651), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3837 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_649, _650, _651), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3870 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_649, _650, _651), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3903 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1272 = fma(_899, cbModelParam._m0[30u].z, fma(_895, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _891));
        float _1276 = fma(_899, cbModelParam._m0[31u].z, fma(_895, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _891));
        float _1280 = fma(_899, cbModelParam._m0[32u].z, fma(_895, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _891));
        float _1303 = _891 + _649;
        float _1304 = _895 + _650;
        float _1305 = _899 + _651;
        float _1315 = fma(_1305, cbModelParam._m0[30u].z, fma(_1304, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1303)) - _1272;
        float _1316 = fma(_1305, cbModelParam._m0[31u].z, fma(_1304, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1303)) - _1276;
        float _1317 = fma(_1305, cbModelParam._m0[32u].z, fma(_1304, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1303)) - _1280;
        float _1321 = inversesqrt(dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317)));
        float _1334 = ((_1321 * _1315) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1272 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1321 * _1316) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1276 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1321 * _1317) / cbModelParam._m0[35u].z) + ((((((_1280 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        float _1371 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1338.x + (-0.5));
        float _1373 = _1371 * (_1338.y + (-0.5));
        float _1374 = _1371 * (_1338.z + (-0.5));
        float _1381 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1345.x + (-0.5));
        float _1383 = _1381 * (_1345.y + (-0.5));
        float _1384 = _1381 * (_1345.z + (-0.5));
        float _1391 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1352.x + (-0.5));
        float _1393 = _1391 * (_1352.y + (-0.5));
        float _1394 = _1391 * (_1352.z + (-0.5));
        float _1401 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1359.x + (-0.5));
        float _1403 = _1401 * (_1359.y + (-0.5));
        float _1404 = _1401 * (_1359.z + (-0.5));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = _1372 * 0.5;
        float _1409 = _1382 * 0.5;
        float _1410 = _1392 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_649, _650, _651), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3966 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1435 + 1.0))) + _1440) * _1405;
        float _1450 = _1373 * 0.5;
        float _1451 = _1383 * 0.5;
        float _1452 = _1393 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_649, _650, _651), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3999 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1477 + 1.0))) + _1482) * _1406;
        float _1492 = _1374 * 0.5;
        float _1493 = _1384 * 0.5;
        float _1494 = _1394 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_649, _650, _651), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4032 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1519 + 1.0))) + _1524) * _1407;
        _1541 = _1374;
        _1542 = _1373;
        _1543 = _1372;
        _1544 = _1384;
        _1545 = _1383;
        _1546 = _1382;
        _1547 = _1394;
        _1548 = _1393;
        _1549 = _1392;
        _1550 = _1407;
        _1551 = _1406;
        _1552 = _1405;
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
    }
    else
    {
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = _1230;
        _1551 = _1230;
        _1552 = _1230;
        _1553 = 0.0;
        _1554 = 0.0;
        _1555 = 0.0;
    }
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1242)) + _1242;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1243)) + _1243;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1244)) + _1244;
    float _1588 = fma(_1567, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1567, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1567, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1565));
    float _1609 = _835 * 0.5;
    float _1610 = _836 * 0.5;
    float _1611 = _837 * 0.5;
    float _1612 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1615 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1618 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1652;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1625 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1629 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1633 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1640 = dot(vec4(cbModelParam._m0[39u]), vec4(_1609, _1610, _1611, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1663;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1654 = dot(vec4(cbModelParam._m0[40u]), vec4(_1609, _1610, _1611, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1667 = (_1663 * cbModelParam._m0[1u].x) + (_1652 * (1.0 - cbModelParam._m0[1u].x));
    float _1677 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _652);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1677 : min(cbModelParam._m0[25u].z, _1677));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_899, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_899, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_899, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1740 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1743 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1771 = frontier_phi_17_15_ladder;
        }
        float _1974;
        if (_1740 > 0.0)
        {
            _1974 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1974 = frontier_phi_26_22_ladder;
        }
        float _2228;
        if (_1743 > 0.0)
        {
            _2228 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2228 = frontier_phi_38_33_ladder;
        }
        float _2230 = isnan(_1974) ? _1771 : (isnan(_1771) ? _1974 : min(_1771, _1974));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1737) + _1726;
        float _2236 = (_2231 * _1740) + _1730;
        float _2237 = (_2231 * _1743) + _1734;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2238;
        float _2242 = _2238 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 > _2242) || ((_2236 < _2240) || ((_2235 < _2240) || (_2235 > _2242))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2237, cbModelParam._m0[9u].z, fma(_2236, cbModelParam._m0[9u].y, _2235 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2237, cbModelParam._m0[10u].z, fma(_2236, cbModelParam._m0[10u].y, _2235 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2237, cbModelParam._m0[11u].z, fma(_2236, cbModelParam._m0[11u].y, _2235 * cbModelParam._m0[11u].x))), _1678);
            frontier_phi_16_38_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_16_38_ladder_2;
        _1761 = frontier_phi_16_38_ladder_1;
        _1763 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1678);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _652);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1822 = fma(_899, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891)) + cbModelParam._m0[21u].w;
        float _1826 = fma(_899, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891)) + cbModelParam._m0[22u].w;
        float _1830 = fma(_899, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891)) + cbModelParam._m0[23u].w;
        float _1833 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1836 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1839 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _1979;
        if (_1833 > 0.0)
        {
            _1979 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1979 = frontier_phi_28_24_ladder;
        }
        float _2255;
        if (_1836 > 0.0)
        {
            _2255 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2255 = frontier_phi_40_35_ladder;
        }
        float _2468;
        if (_1839 > 0.0)
        {
            _2468 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2468 = frontier_phi_49_46_ladder;
        }
        float _2470 = isnan(_2255) ? _1979 : (isnan(_1979) ? _2255 : min(_1979, _2255));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1833) + _1822;
        float _2476 = (_2471 * _1836) + _1826;
        float _2477 = (_2471 * _1839) + _1830;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_25_49_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1858 = frontier_phi_25_49_ladder_2;
        _1860 = frontier_phi_25_49_ladder_1;
        _1862 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1768);
        _1858 = _1842.x * cbModelParam._m0[1u].z;
        _1860 = _1842.y * cbModelParam._m0[1u].z;
        _1862 = _1842.z * cbModelParam._m0[1u].z;
    }
    float _1875 = (((_862 * _811) + _863) * _827) * ((cbModelParam._m0[1u].w * (_1858 - _1759)) + _1759);
    float _1877 = (((_862 * _813) + _863) * _827) * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1879 = (((_862 * _814) + _863) * _827) * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1882 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1877, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1877, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1877, cbSceneParam._m0[91u].y, _1875 * cbSceneParam._m0[91u].x));
    uvec4 _1898 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1900 = _1898.x * 14u;
    uint _1901 = _1900 + 13u;
    float _1908 = _827 + (-1.0);
    float _1913 = (cbLight._m0[_1901].x * _1908) + 1.0;
    float _1914 = (cbLight._m0[_1901].y * _1908) + 1.0;
    float _1915 = (cbLight._m0[_1901].z * _1908) + 1.0;
    float _1916 = (cbLight._m0[_1901].w * _1908) + 1.0;
    uint _1917 = _1900 + 5u;
    float _1923 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
    uint _1927 = _1900 + 4u;
    float _1933 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1937 = _1900 | 1u;
    float _1948 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_649, _650, _651));
    float _1951 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_649, _650, _651));
    float _4168 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _4179 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1956 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _1958 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * 0.3183098733425140380859375;
    float _1965 = ((cbLight._m0[_1917].x * _1923) * _1958) + ((cbLight._m0[_1927].x * _1933) * _1956);
    float _1966 = ((_1923 * cbLight._m0[_1917].y) * _1958) + ((_1933 * cbLight._m0[_1927].y) * _1956);
    float _1967 = ((_1923 * cbLight._m0[_1917].z) * _1958) + ((_1933 * cbLight._m0[_1927].z) * _1956);
    uvec4 _1971 = floatBitsToUint(cbLight._m0[_1900 + 12u]);
    bool _1973 = _1971.x == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1973)
    {
        _1984 = _1965;
        _1986 = _1966;
        _1988 = _1967;
    }
    else
    {
        uint _1992 = _1900 + 6u;
        float _2008 = (dot(vec3(cbLight._m0[_1900 + 2u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2009 = _2008 * _2008;
        float _4190 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2011 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _1984 = (((cbLight._m0[_1992].x * 0.3183098733425140380859375) * _2010) * _2011) + _1965;
        _1986 = (((cbLight._m0[_1992].y * 0.3183098733425140380859375) * _2010) * _2011) + _1966;
        _1988 = (((cbLight._m0[_1992].z * 0.3183098733425140380859375) * _2010) * _2011) + _1967;
    }
    bool _1991 = _1971.y == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_1991)
    {
        _2029 = _1984;
        _2031 = _1986;
        _2033 = _1988;
    }
    else
    {
        uint _2199 = _1900 + 7u;
        float _2215 = (dot(vec3(cbLight._m0[_1900 + 3u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4206 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2218 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2029 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _1984;
        _2031 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _1986;
        _2033 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _1988;
    }
    uint _2036 = _1900 + 8u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _652) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1900].x + _729;
    float _2052 = cbLight._m0[_1900].y + _730;
    float _2053 = cbLight._m0[_1900].z + _731;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1900].xyz));
    float _4222 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2065 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2066 = dot(vec3(_649, _650, _651), vec3(_2058, _2059, _2060));
    float _4244 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2058, _2059, _2060));
    float _4255 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2050 * _2050;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
    float _2087 = 0.959999978542327880859375 - _808;
    float _2089 = 0.959999978542327880859375 - _809;
    float _2090 = 0.959999978542327880859375 - _810;
    float _2097 = 1.0 - _2050;
    float _2108 = (0.5 / (((_2065 * ((_2064 * _2097) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2097) + _2050) * _2064))) * _2064;
    float _4266 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    uint _2121 = _1900 + 9u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _652) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1937].x + _729;
    float _2135 = cbLight._m0[_1937].y + _730;
    float _2136 = cbLight._m0[_1937].z + _731;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1937].xyz));
    float _4277 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2148 = dot(vec3(_649, _650, _651), vec3(_2141, _2142, _2143));
    float _4288 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2141, _2142, _2143));
    float _4299 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2133 * _2133;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2174 = 1.0 - _2133;
    float _2184 = (0.5 / (((_2065 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2174) + _2133) * _2147))) * _2147;
    float _4310 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    float _2196 = (((((_2167 * _2087) + _811) * cbLight._m0[_2121].x) * _2186) * _1923) + (((((_2086 * _2087) + _811) * cbLight._m0[_2036].x) * _2110) * _1933);
    float _2197 = (((((_2167 * _2089) + _813) * cbLight._m0[_2121].y) * _2186) * _1923) + (((((_2086 * _2089) + _813) * cbLight._m0[_2036].y) * _2110) * _1933);
    float _2198 = (((((_2167 * _2090) + _814) * cbLight._m0[_2121].z) * _2186) * _1923) + (((((_2086 * _2090) + _814) * cbLight._m0[_2036].z) * _2110) * _1933);
    float _2260;
    float _2262;
    float _2264;
    if (_1973)
    {
        _2260 = _2196;
        _2262 = _2197;
        _2264 = _2198;
    }
    else
    {
        uint _2266 = _1900 + 2u;
        uint _2270 = _1900 + 10u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _652) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _729;
        float _2287 = cbLight._m0[_2266].y + _730;
        float _2288 = cbLight._m0[_2266].z + _731;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2266].xyz));
        float _4321 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2300 = dot(vec3(_649, _650, _651), vec3(_2293, _2294, _2295));
        float _4332 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4343 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2319 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
        float _2326 = 1.0 - _2285;
        float _2336 = (0.5 / (((_2065 * ((_2299 * _2326) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2326) + _2285) * _2299))) * _2299;
        float _4354 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2260 = (((((_2319 * _2087) + _811) * cbLight._m0[_2270].x) * _2338) * _2339) + _2196;
        _2262 = (((((_2319 * _2089) + _813) * cbLight._m0[_2270].y) * _2338) * _2339) + _2197;
        _2264 = (((((_2319 * _2090) + _814) * cbLight._m0[_2270].z) * _2338) * _2339) + _2198;
    }
    float _2374;
    float _2376;
    float _2378;
    if (_1991)
    {
        _2374 = _2260;
        _2376 = _2262;
        _2378 = _2264;
    }
    else
    {
        uint _2385 = _1900 + 3u;
        uint _2389 = _1900 + 11u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _652) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _729;
        float _2406 = cbLight._m0[_2385].y + _730;
        float _2407 = cbLight._m0[_2385].z + _731;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2385].xyz));
        float _4370 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2419 = dot(vec3(_649, _650, _651), vec3(_2412, _2413, _2414));
        float _4381 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4392 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
        float _2445 = 1.0 - _2404;
        float _2455 = (0.5 / (((_2065 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2445) + _2404) * _2418))) * _2418;
        float _4403 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2374 = (((((_2438 * _2087) + _811) * cbLight._m0[_2389].x) * _2457) * _2458) + _2260;
        _2376 = (((((_2438 * _2089) + _813) * cbLight._m0[_2389].y) * _2457) * _2458) + _2262;
        _2378 = (((((_2438 * _2090) + _814) * cbLight._m0[_2389].z) * _2457) * _2458) + _2264;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1898.y == 0u)
    {
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2533;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2533;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2533;
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _750) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _749) / _2549)));
        float _2570 = (log2(_2536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
        }
        else
        {
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            uint _2840 = 0u;
            uint _2849;
            bool _2850;
            for (;;)
            {
                _2849 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                _2850 = _2849 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2850)
                {
                    frontier_phi_66_pred = _2834;
                    frontier_phi_66_pred_1 = _2839;
                    frontier_phi_66_pred_2 = _2838;
                    frontier_phi_66_pred_3 = _2837;
                    frontier_phi_66_pred_4 = _2836;
                    frontier_phi_66_pred_5 = _2835;
                }
                else
                {
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    uint _2985;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2849;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    for (;;)
                    {
                        uint _2989 = uint(findLSB(_2985)) + (_2840 << 5u);
                        uint _2986 = (_2985 + 4294967295u) & _2985;
                        uint _2991 = _2989 * 48u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3011 = (_2989 * 48u) + 4u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3030 = (_2989 * 48u) + 8u;
                        vec3 _3041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x));
                        float _3045 = _3005.x - _2534;
                        float _3046 = _3005.y - _2535;
                        float _3047 = _3005.z - _2536;
                        float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                        float _3051 = inversesqrt(_3048);
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3055 = dot(vec3(_768, _771, _774), vec3(_3052, _3053, _3054));
                        float _3060 = 1.0 - (_3048 * _3005.w);
                        float _4429 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3062 = sqrt(_3048) * _3024.w;
                        float _3065 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _3055) + _3066;
                        float _3072 = _3062 * _3062;
                        float _3076 = ((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3061) / ((_3072 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _2534;
                        float _3081 = (-0.0) - _2535;
                        float _3082 = (-0.0) - _2536;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3097 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _843;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3110 = _3089 + _3054;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_768, _771, _774), vec3(_3087, _3088, _3089));
                        float _4445 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3122 = dot(vec3(_768, _771, _774), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4456 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3065 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3055) + _3131;
                        float _4467 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4478 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) / ((_3129 * _3129) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3061;
                        _2909 = (_3076 * _3024.x) + _2982;
                        _2910 = (_3076 * _3024.y) + _2983;
                        _2911 = (_3076 * _3024.z) + _2984;
                        _2906 = (_3157 * _3041.x) + _2979;
                        _2907 = (_3157 * _3041.y) + _2980;
                        _2908 = (_3157 * _3041.z) + _2981;
                        if (_2986 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2986;
                        }
                    }
                    frontier_phi_66_pred = _2906;
                    frontier_phi_66_pred_1 = _2911;
                    frontier_phi_66_pred_2 = _2910;
                    frontier_phi_66_pred_3 = _2909;
                    frontier_phi_66_pred_4 = _2908;
                    frontier_phi_66_pred_5 = _2907;
                }
                _2682 = frontier_phi_66_pred;
                _2692 = frontier_phi_66_pred_1;
                _2690 = frontier_phi_66_pred_2;
                _2688 = frontier_phi_66_pred_3;
                _2686 = frontier_phi_66_pred_4;
                _2684 = frontier_phi_66_pred_5;
                uint _2841 = _2840 + 1u;
                if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2834 = _2682;
                    _2835 = _2684;
                    _2836 = _2686;
                    _2837 = _2688;
                    _2838 = _2690;
                    _2839 = _2692;
                    _2840 = _2841;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
        }
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.z;
        uint _2698 = (_2696 >> 8u) & 15u;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((4294967295u << _2698) & _2580) == 0u)
        {
            _2802 = _2681;
            _2804 = _2683;
            _2806 = _2685;
            _2808 = _2687;
            _2810 = _2689;
            _2812 = _2691;
        }
        else
        {
            float _2827 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
            float _2828 = _2827 * _2534;
            float _2829 = _2827 * _2535;
            float _2830 = _2827 * _2536;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2698 < ((_2696 >> 12u) & 15u))
            {
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2962 = _2681;
                float _2963 = _2683;
                float _2964 = _2685;
                float _2965 = _2687;
                float _2966 = _2689;
                float _2967 = _2691;
                uint _2968 = _2698;
                uint _2977;
                bool _2978;
                for (;;)
                {
                    _2977 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                    _2978 = _2977 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2978)
                    {
                        frontier_phi_77_pred = _2967;
                        frontier_phi_77_pred_1 = _2966;
                        frontier_phi_77_pred_2 = _2965;
                        frontier_phi_77_pred_3 = _2964;
                        frontier_phi_77_pred_4 = _2963;
                        frontier_phi_77_pred_5 = _2962;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        uint _3190 = _2977;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3275;
                        float _3321;
                        bool _3322;
                        for (;;)
                        {
                            uint _3201 = ((_2968 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3262 = (_3201 * 40u) + 20u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3277 = (_3201 * 40u) + 24u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3296 = (_3201 * 40u) + 28u;
                            vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3321 = fma(_2536, _3309.z, fma(_2535, _3309.y, _3309.x * _2534)) + _3309.w;
                            _3322 = !((fma(_2536, _3290.z, fma(_2535, _3290.y, _3290.x * _2534)) + _3290.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3322)
                            {
                                float _3349 = _3216.x - _2534;
                                float _3350 = _3216.y - _2535;
                                float _3351 = _3216.z - _2536;
                                float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                                float _3355 = inversesqrt(_3352);
                                float _3356 = _3355 * _3349;
                                float _3357 = _3355 * _3350;
                                float _3358 = _3355 * _3351;
                                float _3362 = 1.0 - (_3352 / (_3217 * _3217));
                                float _4489 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3367 = sqrt(_3352) * _3232.w;
                                float _3369 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                                float _3370 = _3369 * _3369;
                                float _3373 = ((1.0 - _3370) * dot(vec3(_3356, _3357, _3358), vec3(_768, _771, _774))) + _3370;
                                float _3376 = _3367 * _3367;
                                float _3380 = (fma(_2536, _3259.z, fma(_2535, _3259.y, _3259.x * _2534)) + _3259.w) / _3321;
                                float _3381 = (fma(_2536, _3275.z, fma(_2535, _3275.y, _3275.x * _2534)) + _3275.w) / _3321;
                                float _3385 = 1.0 - dot(vec2(_3380, _3381), vec2(_3380, _3381));
                                float _4505 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3387 = _3386 * (((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3363) / ((_3376 * 0.699999988079071044921875) + 1.0));
                                float _3399 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                                float _3400 = 1.0 - _843;
                                float _3407 = sqrt(1.0 - ((1.0 - (_3400 * _3400)) * (1.0 - (_3399 * _3399))));
                                float _3408 = _3407 * _3407;
                                float _3409 = _3408 * _3408;
                                float _3410 = _3356 - _2828;
                                float _3411 = _3357 - _2829;
                                float _3412 = _3358 - _2830;
                                float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                                float _3420 = dot(vec3(_768, _771, _774), vec3((-0.0) - _2828, (-0.0) - _2829, (-0.0) - _2830));
                                float _4516 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3424 = dot(vec3(_768, _771, _774), vec3(_3416 * _3410, _3416 * _3411, _3416 * _3412));
                                float _4527 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3431 = ((_3427 * _3427) * (_3409 + (-1.0))) + 1.0;
                                float _3432 = _3369 * _3408;
                                float _3433 = _3432 * _3432;
                                float _3439 = ((1.0 - _3433) * dot(vec3(_768, _771, _774), vec3(_3356, _3357, _3358))) + _3433;
                                float _4538 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3441 = 1.0 - _3408;
                                float _3451 = (0.5 / (((_3440 * ((_3423 * _3441) + _3408)) + 9.9999999392252902907785028219223e-09) + (((_3440 * _3441) + _3408) * _3423))) * _3440;
                                float _4549 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3461 = (_3386 * _3363) * (((_3409 * 3.1415927410125732421875) * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) / ((_3431 * _3431) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3387 * _3232.y;
                                frontier_phi_83_pred_1 = _3387 * _3232.x;
                                frontier_phi_83_pred_2 = _3461 * _3244.z;
                                frontier_phi_83_pred_3 = _3461 * _3244.y;
                                frontier_phi_83_pred_4 = _3461 * _3244.x;
                                frontier_phi_83_pred_5 = _3387 * _3232.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3469 = frontier_phi_83_pred;
                            _3468 = frontier_phi_83_pred_1;
                            _3467 = frontier_phi_83_pred_2;
                            _3466 = frontier_phi_83_pred_3;
                            _3465 = frontier_phi_83_pred_4;
                            _3470 = frontier_phi_83_pred_5;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            _3171 = _3465 + _3184;
                            _3172 = _3466 + _3185;
                            _3173 = _3467 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3176;
                        frontier_phi_77_pred_1 = _3175;
                        frontier_phi_77_pred_2 = _3174;
                        frontier_phi_77_pred_3 = _3173;
                        frontier_phi_77_pred_4 = _3172;
                        frontier_phi_77_pred_5 = _3171;
                    }
                    _2813 = frontier_phi_77_pred;
                    _2811 = frontier_phi_77_pred_1;
                    _2809 = frontier_phi_77_pred_2;
                    _2807 = frontier_phi_77_pred_3;
                    _2805 = frontier_phi_77_pred_4;
                    _2803 = frontier_phi_77_pred_5;
                    uint _2969 = _2968 + 1u;
                    if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2962 = _2803;
                        _2963 = _2805;
                        _2964 = _2807;
                        _2965 = _2809;
                        _2966 = _2811;
                        _2967 = _2813;
                        _2968 = _2969;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2807;
                frontier_phi_58_59_ladder_1 = _2813;
                frontier_phi_58_59_ladder_2 = _2811;
                frontier_phi_58_59_ladder_3 = _2809;
                frontier_phi_58_59_ladder_4 = _2805;
                frontier_phi_58_59_ladder_5 = _2803;
            }
            else
            {
                frontier_phi_58_59_ladder = _2685;
                frontier_phi_58_59_ladder_1 = _2691;
                frontier_phi_58_59_ladder_2 = _2689;
                frontier_phi_58_59_ladder_3 = _2687;
                frontier_phi_58_59_ladder_4 = _2683;
                frontier_phi_58_59_ladder_5 = _2681;
            }
            _2802 = frontier_phi_58_59_ladder_5;
            _2804 = frontier_phi_58_59_ladder_4;
            _2806 = frontier_phi_58_59_ladder;
            _2808 = frontier_phi_58_59_ladder_3;
            _2810 = frontier_phi_58_59_ladder_2;
            _2812 = frontier_phi_58_59_ladder_1;
        }
        float _2817 = isnan(1.0) ? _827 : (isnan(_827) ? 1.0 : min(_827, 1.0));
        _2593 = (_2817 * _2808) + _2029;
        _2595 = (_2817 * _2810) + _2031;
        _2597 = (_2817 * _2812) + _2033;
        _2599 = ((_2802 * _811) * _2817) + _2374;
        _2601 = ((_2804 * _813) * _2817) + _2376;
        _2603 = ((_2806 * _814) * _2817) + _2378;
    }
    else
    {
        _2593 = _2029;
        _2595 = _2031;
        _2597 = _2033;
        _2599 = _2374;
        _2601 = _2376;
        _2603 = _2378;
    }
    float _4565 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4576 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4587 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2620 = ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2593 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _827))) + ((_2599 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1667)) * cbPerFrame._m0[3u].x);
    float _2621 = ((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2595 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _827))) + ((_2601 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1667)) * cbPerFrame._m0[3u].x);
    float _2622 = ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2597 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _827))) + ((_2603 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1667)) * cbPerFrame._m0[3u].x);
    uint _2623 = _236 + 6u;
    float _2631 = _749 / cbSceneParam._m0[86u].x;
    float _2632 = _750 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2706 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2707 = _2706 / _671;
        float _2718 = _2707 * _722;
        float _2719 = _723 * _2707;
        float _2720 = (-0.0) - _2719;
        float _2722 = _2707 * _724;
        float _2724 = (cbSceneParam._m0[77u].w * _2720) / _2706;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2719;
        float _2732 = sqrt(((_2718 * _2718) + (_2719 * _2719)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2706)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2919;
        if (abs((_2720 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2919 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2863 = 1.0 / cbSceneParam._m0[80u].x;
            float _2864 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2865 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            _2919 = ((abs(_2732 / _2720) * cbSceneParam._m0[80u].y) * ((((_2874 - _2875) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))))) * _2863)) - ((exp2(_2742 * _2874) - exp2(_2742 * _2875)) * _2863))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2921 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2930 = exp2((_2919 * (-1.44269502162933349609375)) * (1.0 - _2921.w));
        float _2931 = log2(_2930);
        float _2947 = log2(_2651);
        _2744 = (exp2(_2947 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].x)) * _2921.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2746 = (exp2(_2947 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].y)) * _2921.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2748 = (exp2(_2947 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].z)) * _2921.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2750 = _2930 * _2651;
    }
    else
    {
        _2744 = _2648;
        _2746 = _2649;
        _2748 = _2650;
        _2750 = _2651;
    }
    bool _2957;
    vec4 _2760;
    vec4 _2782;
    float _2784;
    float _2788;
    float _2789;
    float _2790;
    float _2791;
    bool _2801;
    for (;;)
    {
        _2760 = cbMatDynParam._m0[0u];
        float _2762 = roundEven(_2760.y);
        bool _2763 = _2762 == 3.0;
        float _2764 = log2(_2750);
        float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * _2620;
        float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * _2621;
        float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * _2622;
        float _2780 = _738 + (-0.5);
        _2782 = cbMtdParam._m0[1u];
        _2784 = _2782.y * _2780;
        float _2787 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2788 = _2787 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
        _2789 = _2787 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
        _2790 = _2787 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
        _2791 = _2780 * 0.999000012874603271484375;
        _2801 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2801)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2791) < 0.5)
            {
                _2957 = true;
                break;
            }
        }
        uint _2898 = _787 + uint(_2760.w);
        if ((cbInstanceData._m0[_2898].w < 1.0) && ((cbInstanceData._m0[_2898].w + _2791) < 0.5))
        {
            _2957 = true;
            break;
        }
        if ((_2784 + 1.0) < _2782.x)
        {
            _2957 = true;
            break;
        }
        _2957 = false;
        break;
    }
    float _3162;
    if (_2957)
    {
        discard_state = true;
        _3162 = 0.0;
    }
    else
    {
        _3162 = cbInstanceData._m0[_2623].w;
    }
    SV_Target.x = _2788;
    SV_Target.y = _2789;
    SV_Target.z = _2790;
    SV_Target.w = _3162;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
    discard_exit();
}


