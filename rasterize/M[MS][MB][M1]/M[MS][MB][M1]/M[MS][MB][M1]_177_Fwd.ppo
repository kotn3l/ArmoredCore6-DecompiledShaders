#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1347;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].y) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3674 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _402 = (_395 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _403 = (_395 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _404 = (_395 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].y) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3685 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _533 = _529.z;
    float _540 = ((_512.x - _531) * _395) + _531;
    float _541 = ((_512.y - _532) * _395) + _532;
    float _542 = ((_512.z - _533) * _395) + _533;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _567 = ((_554.z - _542) * _468) + _542;
    float _570 = ((((_554.x - _540) * _468) + _540) * 2.0) + (-1.0);
    float _571 = ((((_554.y - _541) * _468) + _541) * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3696 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))));
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _609 = (_570 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_489.x * 2.0) + (-1.0)))) + (((_597.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _610 = (_571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_489.y * 2.0) + (-1.0)))) + (((_597.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _653 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_624 - _625) * cbMtdParam._m0[24u].w) + _625) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3707 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _662 = ((((cbMtdParam._m0[10u].x - _475) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _654) + _475;
    float _663 = ((((cbMtdParam._m0[10u].y - _476) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _654) + _476;
    float _664 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _477)) * _654) + _477;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _692 = _690.x;
    float _710 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _692) * _395) + _692;
    float _728 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _710) * _468) + _710;
    float _732 = ((_676.x - _728) * cbMtdParam._m0[19u].z) + _728;
    float _734 = _732 - (_732 * _654);
    float _739 = (((_489.z - _567) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _567;
    float _743 = ((_597.z - _739) * cbMtdParam._m0[19u].w) + _739;
    float _747 = ((cbMtdParam._m0[23u].y - _743) * _654) + _743;
    vec4 _766 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _772 = (_766.x * 2.0) + (-1.0);
    float _773 = (_766.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3718 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _790 = (_654 * (((cbMtdParam._m0[22u].z * _609) - _609) + _772)) + _609;
    float _791 = (_654 * (((cbMtdParam._m0[22u].z * _610) - _610) + _773)) + _610;
    float _792 = (_654 * (sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) - _577)) + _577;
    float _794 = cbMtdParam._m0[22u].x + _597.w;
    float _797 = fma(_792, _244 * NORMAL.x, fma(_791, _251 * TANGENT.x, (_237 * _229) * _790));
    float _800 = fma(_792, _244 * NORMAL.y, fma(_791, _251 * TANGENT.y, (_237 * _230) * _790));
    float _803 = fma(_792, _244 * NORMAL.z, fma(_791, _251 * TANGENT.z, (_237 * _231) * _790));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _3729 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _811 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _3751 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3762 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3773 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3784 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _816 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _880 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _870);
    float _881 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _870);
    float _882 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _870);
    float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
    float _887 = _880 * _886;
    float _888 = _881 * _886;
    float _889 = _882 * _886;
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _917 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _920 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _934 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3795 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _946 = 1.0 - _816;
    float _947 = _943 * _946;
    float _948 = _944 * _946;
    float _949 = _945 * _946;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _816;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _816;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _816;
    float _957 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _973 = ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * TEXCOORD_5.w) * _969.x;
    float _974 = dot(vec3(_808, _809, _810), vec3(_887, _888, _889));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _808) - _887;
    float _982 = (_977 * _809) - _888;
    float _983 = (_977 * _810) - _889;
    float _987 = abs(dot(vec3(_887, _888, _889), vec3(_808, _809, _810)));
    float _3828 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_811);
    float _1002 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1008 = (1.0 - _1002) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1009 = _1002 * _989;
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1075 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1079 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1104 = _1037 + _808;
        float _1105 = _1041 + _809;
        float _1106 = _1045 + _810;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_808, _809, _810), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3876 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_808, _809, _810), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3909 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_808, _809, _810), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3942 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1389 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1393 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1416 = _1037 + _808;
        float _1417 = _1041 + _809;
        float _1418 = _1045 + _810;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_808, _809, _810), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4005 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_808, _809, _810), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4038 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_808, _809, _810), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4071 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1347;
        _1655 = _1347;
        _1656 = _1347;
        _1657 = _1347;
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1359)) + _1359;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1360)) + _1360;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1361)) + _1361;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _981 * 0.5;
    float _1723 = _982 * 0.5;
    float _1724 = _983 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1854 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1857 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1885 = frontier_phi_14_12_ladder;
        }
        float _2088;
        if (_1854 > 0.0)
        {
            _2088 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2088 = frontier_phi_23_19_ladder;
        }
        float _2342;
        if (_1857 > 0.0)
        {
            _2342 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2342 = frontier_phi_35_30_ladder;
        }
        float _2344 = isnan(_2088) ? _1885 : (isnan(_1885) ? _2088 : min(_1885, _2088));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1851) + _1840;
        float _2350 = (_2345 * _1854) + _1844;
        float _2351 = (_2345 * _1857) + _1848;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_13_35_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_13_35_ladder_2;
        _1875 = frontier_phi_13_35_ladder_1;
        _1877 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1791);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1950 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1953 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2093;
        if (_1947 > 0.0)
        {
            _2093 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2093 = frontier_phi_25_21_ladder;
        }
        float _2369;
        if (_1950 > 0.0)
        {
            _2369 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2369 = frontier_phi_37_32_ladder;
        }
        float _2582;
        if (_1953 > 0.0)
        {
            _2582 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2582 = frontier_phi_46_43_ladder;
        }
        float _2584 = isnan(_2369) ? _2093 : (isnan(_2093) ? _2369 : min(_2093, _2369));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _1947) + _1936;
        float _2590 = (_2585 * _1950) + _1940;
        float _2591 = (_2585 * _1953) + _1944;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2592;
        float _2595 = _2592 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2591 > _2595) || ((_2591 < _2593) || ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 < _2593) || (_2589 > _2595))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2591, cbModelParam._m0[17u].z, fma(_2590, cbModelParam._m0[17u].y, _2589 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2591, cbModelParam._m0[18u].z, fma(_2590, cbModelParam._m0[18u].y, _2589 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2591, cbModelParam._m0[19u].z, fma(_2590, cbModelParam._m0[19u].y, _2589 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_22_46_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_22_46_ladder_2;
        _1974 = frontier_phi_22_46_ladder_1;
        _1976 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1882);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1989 = (((_1008 * _957) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1991 = (((_1008 * _959) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1993 = (((_1008 * _960) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    uvec4 _2012 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2014 = _2012.x * 14u;
    uint _2015 = _2014 + 13u;
    float _2022 = _973 + (-1.0);
    float _2027 = (cbLight._m0[_2015].x * _2022) + 1.0;
    float _2028 = (cbLight._m0[_2015].y * _2022) + 1.0;
    float _2029 = (cbLight._m0[_2015].z * _2022) + 1.0;
    float _2030 = (cbLight._m0[_2015].w * _2022) + 1.0;
    uint _2031 = _2014 + 5u;
    float _2037 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
    uint _2041 = _2014 + 4u;
    float _2047 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2051 = _2014 | 1u;
    float _2062 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_808, _809, _810));
    float _2065 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_808, _809, _810));
    float _4207 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _4218 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2070 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _2072 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2079 = ((cbLight._m0[_2031].x * _2037) * _2072) + ((cbLight._m0[_2041].x * _2047) * _2070);
    float _2080 = ((_2037 * cbLight._m0[_2031].y) * _2072) + ((_2047 * cbLight._m0[_2041].y) * _2070);
    float _2081 = ((_2037 * cbLight._m0[_2031].z) * _2072) + ((_2047 * cbLight._m0[_2041].z) * _2070);
    uvec4 _2085 = floatBitsToUint(cbLight._m0[_2014 + 12u]);
    bool _2087 = _2085.x == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2087)
    {
        _2098 = _2079;
        _2100 = _2080;
        _2102 = _2081;
    }
    else
    {
        uint _2106 = _2014 + 6u;
        float _2122 = (dot(vec3(cbLight._m0[_2014 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4229 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2125 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2098 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _2079;
        _2100 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _2080;
        _2102 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _2081;
    }
    bool _2105 = _2085.y == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2105)
    {
        _2143 = _2098;
        _2145 = _2100;
        _2147 = _2102;
    }
    else
    {
        uint _2313 = _2014 + 7u;
        float _2329 = (dot(vec3(cbLight._m0[_2014 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4245 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2332 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2143 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2098;
        _2145 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2100;
        _2147 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2102;
    }
    uint _2150 = _2014 + 8u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _811) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_2014].x + _887;
    float _2166 = cbLight._m0[_2014].y + _888;
    float _2167 = cbLight._m0[_2014].z + _889;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2014].xyz));
    float _4261 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2179 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2180 = dot(vec3(_808, _809, _810), vec3(_2172, _2173, _2174));
    float _4283 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2172, _2173, _2174));
    float _4294 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2164 * _2164;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0);
    float _2201 = 0.959999978542327880859375 - _954;
    float _2203 = 0.959999978542327880859375 - _955;
    float _2204 = 0.959999978542327880859375 - _956;
    float _2211 = 1.0 - _2164;
    float _2222 = (0.5 / (((_2179 * ((_2178 * _2211) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2211) + _2164) * _2178))) * _2178;
    float _4305 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    uint _2235 = _2014 + 9u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _811) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2051].x + _887;
    float _2249 = cbLight._m0[_2051].y + _888;
    float _2250 = cbLight._m0[_2051].z + _889;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2051].xyz));
    float _4316 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2262 = dot(vec3(_808, _809, _810), vec3(_2255, _2256, _2257));
    float _4327 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2255, _2256, _2257));
    float _4338 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2247 * _2247;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0);
    float _2288 = 1.0 - _2247;
    float _2298 = (0.5 / (((_2179 * ((_2261 * _2288) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2288) + _2247) * _2261))) * _2261;
    float _4349 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    float _2310 = (((((_2281 * _2201) + _957) * cbLight._m0[_2235].x) * _2300) * _2037) + (((((_2200 * _2201) + _957) * cbLight._m0[_2150].x) * _2224) * _2047);
    float _2311 = (((((_2281 * _2203) + _959) * cbLight._m0[_2235].y) * _2300) * _2037) + (((((_2200 * _2203) + _959) * cbLight._m0[_2150].y) * _2224) * _2047);
    float _2312 = (((((_2281 * _2204) + _960) * cbLight._m0[_2235].z) * _2300) * _2037) + (((((_2200 * _2204) + _960) * cbLight._m0[_2150].z) * _2224) * _2047);
    float _2374;
    float _2376;
    float _2378;
    if (_2087)
    {
        _2374 = _2310;
        _2376 = _2311;
        _2378 = _2312;
    }
    else
    {
        uint _2380 = _2014 + 2u;
        uint _2384 = _2014 + 10u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _811) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _887;
        float _2401 = cbLight._m0[_2380].y + _888;
        float _2402 = cbLight._m0[_2380].z + _889;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2380].xyz));
        float _4360 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2414 = dot(vec3(_808, _809, _810), vec3(_2407, _2408, _2409));
        float _4371 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4382 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
        float _2440 = 1.0 - _2399;
        float _2450 = (0.5 / (((_2179 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2440) + _2399) * _2413))) * _2413;
        float _4393 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2452 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2453 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2374 = (((((_2433 * _2201) + _957) * cbLight._m0[_2384].x) * _2452) * _2453) + _2310;
        _2376 = (((((_2433 * _2203) + _959) * cbLight._m0[_2384].y) * _2452) * _2453) + _2311;
        _2378 = (((((_2433 * _2204) + _960) * cbLight._m0[_2384].z) * _2452) * _2453) + _2312;
    }
    float _2488;
    float _2490;
    float _2492;
    if (_2105)
    {
        _2488 = _2374;
        _2490 = _2376;
        _2492 = _2378;
    }
    else
    {
        uint _2499 = _2014 + 3u;
        uint _2503 = _2014 + 11u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _811) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _887;
        float _2520 = cbLight._m0[_2499].y + _888;
        float _2521 = cbLight._m0[_2499].z + _889;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2499].xyz));
        float _4409 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2533 = dot(vec3(_808, _809, _810), vec3(_2526, _2527, _2528));
        float _4420 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4431 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0);
        float _2559 = 1.0 - _2518;
        float _2569 = (0.5 / (((_2179 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2559) + _2518) * _2532))) * _2532;
        float _4442 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2488 = (((((_2552 * _2201) + _957) * cbLight._m0[_2503].x) * _2571) * _2572) + _2374;
        _2490 = (((((_2552 * _2203) + _959) * cbLight._m0[_2503].y) * _2571) * _2572) + _2376;
        _2492 = (((((_2552 * _2204) + _960) * cbLight._m0[_2503].z) * _2571) * _2572) + _2378;
    }
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_2012.y == 0u)
    {
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2647;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2647;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2647;
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.x;
        uint _2674 = uint((float(_2662.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2663))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2663)));
        float _2684 = (log2(_2650 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2685 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        uint _2688 = uint(isnan(14.0) ? _2685 : (isnan(_2685) ? 14.0 : min(_2685, 14.0)));
        uvec4 _2693 = texelFetch(g_lightClusterGridBuffer, int(((_2688 << 2u) + (_2674 << 6u)) >> 2u));
        uint _2694 = _2693.x;
        uint _2695 = _2662.z;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((((1u << ((_2695 >> 4u) & 15u)) + 4294967295u) & _2694) == 0u) || ((_2695 & 240u) == 0u))
        {
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
        }
        else
        {
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            uint _2946 = 0u;
            uint _2955;
            bool _2956;
            for (;;)
            {
                _2955 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                _2956 = _2955 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2956)
                {
                    frontier_phi_61_pred = _2940;
                    frontier_phi_61_pred_1 = _2945;
                    frontier_phi_61_pred_2 = _2944;
                    frontier_phi_61_pred_3 = _2943;
                    frontier_phi_61_pred_4 = _2942;
                    frontier_phi_61_pred_5 = _2941;
                }
                else
                {
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    uint _3070;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2955;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3074 = uint(findLSB(_3070)) + (_2946 << 5u);
                        uint _3071 = (_3070 + 4294967295u) & _3070;
                        uint _3076 = _3074 * 48u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3096 = (_3074 * 48u) + 4u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3115 = (_3074 * 48u) + 8u;
                        vec3 _3126 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x));
                        float _3130 = _3090.x - _2648;
                        float _3131 = _3090.y - _2649;
                        float _3132 = _3090.z - _2650;
                        float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                        float _3136 = inversesqrt(_3133);
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3140 = dot(vec3(_914, _917, _920), vec3(_3137, _3138, _3139));
                        float _3145 = 1.0 - (_3133 * _3090.w);
                        float _4468 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3147 = sqrt(_3133) * _3109.w;
                        float _3150 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3140) + _3151;
                        float _3157 = _3147 * _3147;
                        float _3161 = ((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3146) / ((_3157 * 0.699999988079071044921875) + 1.0);
                        float _3165 = (-0.0) - _2648;
                        float _3166 = (-0.0) - _2649;
                        float _3167 = (-0.0) - _2650;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3172 = _3171 * _3165;
                        float _3173 = _3171 * _3166;
                        float _3174 = _3171 * _3167;
                        float _3182 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                        float _3183 = 1.0 - _989;
                        float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                        float _3191 = _3190 * _3190;
                        float _3192 = _3191 * _3191;
                        float _3193 = _3172 + _3137;
                        float _3194 = _3173 + _3138;
                        float _3195 = _3174 + _3139;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3203 = dot(vec3(_914, _917, _920), vec3(_3172, _3173, _3174));
                        float _4484 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3207 = dot(vec3(_914, _917, _920), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                        float _4495 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                        float _3215 = _3150 * _3191;
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3140) + _3216;
                        float _4506 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3221 = 1.0 - _3191;
                        float _3231 = (0.5 / (((_3220 * ((_3206 * _3221) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3220 * _3221) + _3191) * _3206))) * _3220;
                        float _4517 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3242 = (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3214 * _3214) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125))) * _3146;
                        _2999 = (_3161 * _3109.x) + _3067;
                        _3000 = (_3161 * _3109.y) + _3068;
                        _3001 = (_3161 * _3109.z) + _3069;
                        _2996 = (_3242 * _3126.x) + _3064;
                        _2997 = (_3242 * _3126.y) + _3065;
                        _2998 = (_3242 * _3126.z) + _3066;
                        if (_3071 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3071;
                        }
                    }
                    frontier_phi_61_pred = _2996;
                    frontier_phi_61_pred_1 = _3001;
                    frontier_phi_61_pred_2 = _3000;
                    frontier_phi_61_pred_3 = _2999;
                    frontier_phi_61_pred_4 = _2998;
                    frontier_phi_61_pred_5 = _2997;
                }
                _2796 = frontier_phi_61_pred;
                _2806 = frontier_phi_61_pred_1;
                _2804 = frontier_phi_61_pred_2;
                _2802 = frontier_phi_61_pred_3;
                _2800 = frontier_phi_61_pred_4;
                _2798 = frontier_phi_61_pred_5;
                uint _2947 = _2946 + 1u;
                if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2940 = _2796;
                    _2941 = _2798;
                    _2942 = _2800;
                    _2943 = _2802;
                    _2944 = _2804;
                    _2945 = _2806;
                    _2946 = _2947;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
        }
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.z;
        uint _2812 = (_2810 >> 8u) & 15u;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((4294967295u << _2812) & _2694) == 0u)
        {
            _2908 = _2795;
            _2910 = _2797;
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
        }
        else
        {
            float _2933 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
            float _2934 = _2933 * _2648;
            float _2935 = _2933 * _2649;
            float _2936 = _2933 * _2650;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2812 < ((_2810 >> 12u) & 15u))
            {
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _3047 = _2795;
                float _3048 = _2797;
                float _3049 = _2799;
                float _3050 = _2801;
                float _3051 = _2803;
                float _3052 = _2805;
                uint _3053 = _2812;
                uint _3062;
                bool _3063;
                for (;;)
                {
                    _3062 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                    _3063 = _3062 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3063)
                    {
                        frontier_phi_67_pred = _3050;
                        frontier_phi_67_pred_1 = _3051;
                        frontier_phi_67_pred_2 = _3052;
                        frontier_phi_67_pred_3 = _3049;
                        frontier_phi_67_pred_4 = _3048;
                        frontier_phi_67_pred_5 = _3047;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        uint _3266 = _3062;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        vec3 _3320;
                        vec4 _3335;
                        vec4 _3350;
                        float _3396;
                        bool _3397;
                        for (;;)
                        {
                            uint _3277 = ((_3053 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3277 * 40u) + 8u;
                            _3320 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x));
                            uint _3322 = (_3277 * 40u) + 16u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3277 * 40u) + 20u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3277 * 40u) + 24u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3371 = (_3277 * 40u) + 28u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3396 = fma(_2650, _3384.z, fma(_2649, _3384.y, _3384.x * _2648)) + _3384.w;
                            _3397 = !((fma(_2650, _3365.z, fma(_2649, _3365.y, _3365.x * _2648)) + _3365.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3397)
                            {
                                float _3424 = _3292.x - _2648;
                                float _3425 = _3292.y - _2649;
                                float _3426 = _3292.z - _2650;
                                float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                                float _3430 = inversesqrt(_3427);
                                float _3431 = _3430 * _3424;
                                float _3432 = _3430 * _3425;
                                float _3433 = _3430 * _3426;
                                float _3437 = 1.0 - (_3427 / (_3293 * _3293));
                                float _4528 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3442 = sqrt(_3427) * _3308.w;
                                float _3444 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                                float _3445 = _3444 * _3444;
                                float _3448 = ((1.0 - _3445) * dot(vec3(_3431, _3432, _3433), vec3(_914, _917, _920))) + _3445;
                                float _3451 = _3442 * _3442;
                                float _3455 = (fma(_2650, _3335.z, fma(_2649, _3335.y, _3335.x * _2648)) + _3335.w) / _3396;
                                float _3456 = (fma(_2650, _3350.z, fma(_2649, _3350.y, _3350.x * _2648)) + _3350.w) / _3396;
                                float _3460 = 1.0 - dot(vec2(_3455, _3456), vec2(_3455, _3456));
                                float _4544 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3462 = _3461 * (((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3438) / ((_3451 * 0.699999988079071044921875) + 1.0));
                                float _3474 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                                float _3475 = 1.0 - _989;
                                float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                                float _3483 = _3482 * _3482;
                                float _3484 = _3483 * _3483;
                                float _3485 = _3431 - _2934;
                                float _3486 = _3432 - _2935;
                                float _3487 = _3433 - _2936;
                                float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                                float _3495 = dot(vec3(_914, _917, _920), vec3((-0.0) - _2934, (-0.0) - _2935, (-0.0) - _2936));
                                float _4555 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3499 = dot(vec3(_914, _917, _920), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                                float _4566 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                                float _3507 = _3444 * _3483;
                                float _3508 = _3507 * _3507;
                                float _3514 = ((1.0 - _3508) * dot(vec3(_914, _917, _920), vec3(_3431, _3432, _3433))) + _3508;
                                float _4577 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3516 = 1.0 - _3483;
                                float _3526 = (0.5 / (((_3515 * ((_3498 * _3516) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3483) * _3498))) * _3515;
                                float _4588 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3536 = (_3461 * _3438) * (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3506 * _3506) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3536 * _3320.x;
                                frontier_phi_73_pred_1 = _3536 * _3320.y;
                                frontier_phi_73_pred_2 = _3462 * _3308.z;
                                frontier_phi_73_pred_3 = _3462 * _3308.y;
                                frontier_phi_73_pred_4 = _3462 * _3308.x;
                                frontier_phi_73_pred_5 = _3536 * _3320.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3540 = frontier_phi_73_pred;
                            _3541 = frontier_phi_73_pred_1;
                            _3545 = frontier_phi_73_pred_2;
                            _3544 = frontier_phi_73_pred_3;
                            _3543 = frontier_phi_73_pred_4;
                            _3542 = frontier_phi_73_pred_5;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3250;
                        frontier_phi_67_pred_1 = _3251;
                        frontier_phi_67_pred_2 = _3252;
                        frontier_phi_67_pred_3 = _3249;
                        frontier_phi_67_pred_4 = _3248;
                        frontier_phi_67_pred_5 = _3247;
                    }
                    _2915 = frontier_phi_67_pred;
                    _2917 = frontier_phi_67_pred_1;
                    _2919 = frontier_phi_67_pred_2;
                    _2913 = frontier_phi_67_pred_3;
                    _2911 = frontier_phi_67_pred_4;
                    _2909 = frontier_phi_67_pred_5;
                    uint _3054 = _3053 + 1u;
                    if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3047 = _2909;
                        _3048 = _2911;
                        _3049 = _2913;
                        _3050 = _2915;
                        _3051 = _2917;
                        _3052 = _2919;
                        _3053 = _3054;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2917;
                frontier_phi_55_56_ladder_1 = _2919;
                frontier_phi_55_56_ladder_2 = _2915;
                frontier_phi_55_56_ladder_3 = _2913;
                frontier_phi_55_56_ladder_4 = _2911;
                frontier_phi_55_56_ladder_5 = _2909;
            }
            else
            {
                frontier_phi_55_56_ladder = _2803;
                frontier_phi_55_56_ladder_1 = _2805;
                frontier_phi_55_56_ladder_2 = _2801;
                frontier_phi_55_56_ladder_3 = _2799;
                frontier_phi_55_56_ladder_4 = _2797;
                frontier_phi_55_56_ladder_5 = _2795;
            }
            _2908 = frontier_phi_55_56_ladder_5;
            _2910 = frontier_phi_55_56_ladder_4;
            _2912 = frontier_phi_55_56_ladder_3;
            _2914 = frontier_phi_55_56_ladder_2;
            _2916 = frontier_phi_55_56_ladder;
            _2918 = frontier_phi_55_56_ladder_1;
        }
        float _2923 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _2707 = (_2923 * _2914) + _2143;
        _2709 = (_2923 * _2916) + _2145;
        _2711 = (_2923 * _2918) + _2147;
        _2713 = ((_2908 * _957) * _2923) + _2488;
        _2715 = ((_2910 * _959) * _2923) + _2490;
        _2717 = ((_2912 * _960) * _2923) + _2492;
    }
    else
    {
        _2707 = _2143;
        _2709 = _2145;
        _2711 = _2147;
        _2713 = _2488;
        _2715 = _2490;
        _2717 = _2492;
    }
    float _4604 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4615 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4626 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    uint _2737 = _257 + 6u;
    float _2745 = _895 / cbSceneParam._m0[86u].x;
    float _2746 = _896 / cbSceneParam._m0[86u].y;
    vec4 _2760 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2762 = _2760.x;
    float _2763 = _2760.y;
    float _2764 = _2760.z;
    float _2765 = _2760.w;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _2820 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _2821 = _2820 / _830;
        float _2832 = _2821 * _880;
        float _2833 = _881 * _2821;
        float _2834 = (-0.0) - _2833;
        float _2836 = _2821 * _882;
        float _2838 = (cbSceneParam._m0[77u].w * _2834) / _2820;
        float _2839 = _2838 + cbSceneParam._m0[79u].w;
        float _2840 = cbSceneParam._m0[79u].w - _2833;
        float _2846 = sqrt(((_2832 * _2832) + (_2833 * _2833)) + (_2836 * _2836));
        float _2849 = (1.0 - (cbSceneParam._m0[77u].w / _2820)) * _2846;
        float _2854 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2856 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2834 - _2838) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2839 > 0.0) ? exp2(_2854 * _2839) : (2.0 - exp2(_2856 * _2839))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2849;
        }
        else
        {
            float _2969 = 1.0 / cbSceneParam._m0[80u].x;
            float _2970 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : max(_2839, _2840));
            float _2971 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : min(_2839, _2840));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            _3009 = ((abs(_2846 / _2834) * cbSceneParam._m0[80u].y) * ((((_2980 - _2981) * 2.0) - ((exp2(_2854 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0)))) - exp2(_2854 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))))) * _2969)) - ((exp2(_2856 * _2980) - exp2(_2856 * _2981)) * _2969))) + (_2849 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2765);
        _2858 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2762;
        _2860 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2763;
        _2862 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2764;
        _2864 = _3020 * _2765;
    }
    else
    {
        _2858 = _2762;
        _2860 = _2763;
        _2862 = _2764;
        _2864 = _2765;
    }
    float _2876 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2877 = _2876 == 3.0;
    float _2878 = log2(_2864);
    float _2885 = exp2(_2878 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2707 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _973))) + ((_2713 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2886 = exp2(_2878 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2709 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _973))) + ((_2715 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2887 = exp2(_2878 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2711 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _973))) + ((_2717 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _2896 = (_2876 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2896 * (_2877 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.y = _2896 * (_2877 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.z = _2896 * (_2877 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.w = cbInstanceData._m0[_2737].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2737].w;
}


