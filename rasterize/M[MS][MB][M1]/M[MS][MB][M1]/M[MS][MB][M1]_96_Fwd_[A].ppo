#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1212;
float _3594;
float _3595;
float _3596;
float _3597;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3606 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _431 = ((_401.z - _422) * _374) + _422;
    float _434 = ((((_401.x - _420) * _374) + _420) * 2.0) + (-1.0);
    float _436 = ((((_401.y - _421) * _374) + _421) * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3617 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))));
    float _445 = fma(_442, _224, fma(_436, _231, _434 * _217));
    float _448 = fma(_442, _225, fma(_436, _232, _434 * _218));
    float _451 = fma(_442, _226, fma(_436, _233, _434 * _219));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _499 = _497.x;
    float _500 = 1.0 - _499;
    float _506 = (cbMtdParam._m0[19u].x + dot(vec4(_455 * _445, _455 * _448, _455 * _451, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_499 - _500) * cbMtdParam._m0[24u].z) + _500) * cbMtdParam._m0[21u].z);
    float _3628 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _514 = (_507 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _515 = (_507 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _516 = (_507 * (cbMtdParam._m0[17u].z - _383)) + _383;
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _544 = _542.x;
    float _562 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _544) * _374) + _544;
    float _566 = ((_528.x - _562) * cbMtdParam._m0[19u].z) + _562;
    float _568 = _566 - (_566 * _507);
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _588 = (_581.x * 2.0) + (-1.0);
    float _589 = (_581.y * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _3639 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _598 = ((_581.z - _431) * _507) + _431;
    float _608 = ((sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) - _442) * _507) + _442;
    float _611 = (((_588 - _434) * _507) + _434) + (cbMtdParam._m0[21u].x * _434);
    float _612 = (((_589 - _436) * _507) + _436) + (cbMtdParam._m0[21u].x * _436);
    float _617 = cbMtdParam._m0[22u].x + _471.w;
    float _620 = fma(_608, _224, fma(_612, _231, _611 * _217));
    float _623 = fma(_608, _225, fma(_612, _232, _611 * _218));
    float _626 = fma(_608, _226, fma(_612, _233, _611 * _219));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3650 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _634 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3672 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3683 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3694 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3705 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _639 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _704 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _694);
    float _705 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _694);
    float _706 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _694);
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _704 * _710;
    float _712 = _705 * _710;
    float _713 = _706 * _710;
    vec4 _718 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _720 = _718.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _892 = sqrt(((_704 * _704) + (_705 * _705)) + (_706 * _706));
        float _898 = (cbMatDynParam._m0[5u].x * _892) + cbMatDynParam._m0[5u].y;
        float _3716 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _903 = (cbMatDynParam._m0[5u].z * _892) + cbMatDynParam._m0[5u].w;
        float _3727 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) - _899)) + _899) < ((_720 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _731 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _732 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _750 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _753 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _756 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _769 = _236 + 9u;
    uint _770 = _769 + uint(cbMatDynParam._m0[0u].w);
    float _776 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_770].x;
    float _777 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_770].y;
    float _778 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_770].z;
    float _3738 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _782 = 1.0 - _639;
    float _783 = _779 * _782;
    float _784 = _780 * _782;
    float _785 = _781 * _782;
    float _790 = (_779 + (-0.039999999105930328369140625)) * _639;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _639;
    float _792 = (_781 + (-0.039999999105930328369140625)) * _639;
    float _793 = _790 + 0.039999999105930328369140625;
    float _795 = _791 + 0.039999999105930328369140625;
    float _796 = _792 + 0.039999999105930328369140625;
    vec4 _805 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _731, cbSceneParam._m0[86u].y * _732));
    float _809 = ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * TEXCOORD_5.w) * _805.x;
    float _810 = dot(vec3(_631, _632, _633), vec3(_711, _712, _713));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _631) - _711;
    float _818 = (_813 * _632) - _712;
    float _819 = (_813 * _633) - _713;
    float _823 = abs(dot(vec3(_711, _712, _713), vec3(_631, _632, _633)));
    float _3771 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_634);
    float _838 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _844 = (1.0 - _838) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _845 = _838 * _825;
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1211;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _936 = fma(_881, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873));
        float _940 = fma(_881, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873));
        float _944 = fma(_881, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873));
        float _969 = _873 + _631;
        float _970 = _877 + _632;
        float _971 = _881 + _633;
        float _981 = fma(_971, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969)) - _936;
        float _982 = fma(_971, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969)) - _940;
        float _983 = fma(_971, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969)) - _944;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_936 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_940 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[34u].z) + ((((((_944 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1039 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1005.x + (-0.5));
        float _1041 = _1039 * (_1005.y + (-0.5));
        float _1042 = _1039 * (_1005.z + (-0.5));
        float _1049 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1012.x + (-0.5));
        float _1051 = _1049 * (_1012.y + (-0.5));
        float _1052 = _1049 * (_1012.z + (-0.5));
        float _1059 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1019.x + (-0.5));
        float _1061 = _1059 * (_1019.y + (-0.5));
        float _1062 = _1059 * (_1019.z + (-0.5));
        float _1069 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1026.x + (-0.5));
        float _1071 = _1069 * (_1026.y + (-0.5));
        float _1072 = _1069 * (_1026.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1093 = (dot(vec3(_631, _632, _633), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1103 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3819 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1105 + 1.0))) + _1110) * _1073;
        float _1120 = _1041 * 0.5;
        float _1121 = _1051 * 0.5;
        float _1122 = _1061 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_631, _632, _633), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3852 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1147 + 1.0))) + _1152) * _1074;
        float _1162 = _1042 * 0.5;
        float _1163 = _1052 * 0.5;
        float _1164 = _1062 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_631, _632, _633), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3885 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1189 + 1.0))) + _1194) * _1075;
        _1211 = _1042;
        _1213 = _1041;
        _1214 = _1040;
        _1215 = _1052;
        _1216 = _1051;
        _1217 = _1050;
        _1218 = _1062;
        _1219 = _1061;
        _1220 = _1060;
        _1221 = _1075;
        _1222 = _1074;
        _1223 = _1073;
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _1212;
        _1213 = _1212;
        _1214 = _1212;
        _1215 = _1212;
        _1216 = _1212;
        _1217 = _1212;
        _1218 = _1212;
        _1219 = _1212;
        _1220 = _1212;
        _1221 = _1212;
        _1222 = _1212;
        _1223 = _1212;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1254 = fma(_881, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873));
        float _1258 = fma(_881, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873));
        float _1262 = fma(_881, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873));
        float _1285 = _873 + _631;
        float _1286 = _877 + _632;
        float _1287 = _881 + _633;
        float _1297 = fma(_1287, cbModelParam._m0[30u].z, fma(_1286, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285)) - _1254;
        float _1298 = fma(_1287, cbModelParam._m0[31u].z, fma(_1286, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285)) - _1258;
        float _1299 = fma(_1287, cbModelParam._m0[32u].z, fma(_1286, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285)) - _1262;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1254 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1258 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[35u].z) + ((((((_1262 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1353 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1320.x + (-0.5));
        float _1355 = _1353 * (_1320.y + (-0.5));
        float _1356 = _1353 * (_1320.z + (-0.5));
        float _1363 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1327.x + (-0.5));
        float _1365 = _1363 * (_1327.y + (-0.5));
        float _1366 = _1363 * (_1327.z + (-0.5));
        float _1373 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1334.x + (-0.5));
        float _1375 = _1373 * (_1334.y + (-0.5));
        float _1376 = _1373 * (_1334.z + (-0.5));
        float _1383 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1341.x + (-0.5));
        float _1385 = _1383 * (_1341.y + (-0.5));
        float _1386 = _1383 * (_1341.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_631, _632, _633), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3948 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1417 + 1.0))) + _1422) * _1387;
        float _1432 = _1355 * 0.5;
        float _1433 = _1365 * 0.5;
        float _1434 = _1375 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_631, _632, _633), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3981 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1459 + 1.0))) + _1464) * _1388;
        float _1474 = _1356 * 0.5;
        float _1475 = _1366 * 0.5;
        float _1476 = _1376 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_631, _632, _633), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4014 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1501 + 1.0))) + _1506) * _1389;
        _1523 = _1356;
        _1524 = _1355;
        _1525 = _1354;
        _1526 = _1366;
        _1527 = _1365;
        _1528 = _1364;
        _1529 = _1376;
        _1530 = _1375;
        _1531 = _1374;
        _1532 = _1389;
        _1533 = _1388;
        _1534 = _1387;
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1212;
        _1524 = _1212;
        _1525 = _1212;
        _1526 = _1212;
        _1527 = _1212;
        _1528 = _1212;
        _1529 = _1212;
        _1530 = _1212;
        _1531 = _1212;
        _1532 = _1212;
        _1533 = _1212;
        _1534 = _1212;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1224)) + _1224;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1225)) + _1225;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1226)) + _1226;
    float _1570 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1547));
    float _1591 = _817 * 0.5;
    float _1592 = _818 * 0.5;
    float _1593 = _819 * 0.5;
    float _1594 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1597 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1600 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1634;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1607 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1211, _1215, _1218, _1221));
        float _1611 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1615 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1622 = dot(vec4(cbModelParam._m0[39u]), vec4(_1591, _1592, _1593, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1645;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1636 = dot(vec4(cbModelParam._m0[40u]), vec4(_1591, _1592, _1593, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1649 = (_1645 * cbModelParam._m0[1u].x) + (_1634 * (1.0 - cbModelParam._m0[1u].x));
    float _1659 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1659 : min(cbModelParam._m0[25u].z, _1659));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1708 = fma(_881, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873)) + cbModelParam._m0[13u].w;
        float _1712 = fma(_881, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873)) + cbModelParam._m0[14u].w;
        float _1716 = fma(_881, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873)) + cbModelParam._m0[15u].w;
        float _1719 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1722 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1725 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1753;
        if (_1719 > 0.0)
        {
            _1753 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1753 = frontier_phi_17_15_ladder;
        }
        float _1956;
        if (_1722 > 0.0)
        {
            _1956 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1956 = frontier_phi_26_22_ladder;
        }
        float _2210;
        if (_1725 > 0.0)
        {
            _2210 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2210 = frontier_phi_38_33_ladder;
        }
        float _2212 = isnan(_1956) ? _1753 : (isnan(_1753) ? _1956 : min(_1753, _1956));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1719) + _1708;
        float _2218 = (_2213 * _1722) + _1712;
        float _2219 = (_2213 * _1725) + _1716;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2220;
        float _2224 = _2220 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 > _2224) || ((_2218 < _2222) || ((_2217 < _2222) || (_2217 > _2224))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2219, cbModelParam._m0[9u].z, fma(_2218, cbModelParam._m0[9u].y, _2217 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2219, cbModelParam._m0[10u].z, fma(_2218, cbModelParam._m0[10u].y, _2217 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2219, cbModelParam._m0[11u].z, fma(_2218, cbModelParam._m0[11u].y, _2217 * cbModelParam._m0[11u].x))), _1660);
            frontier_phi_16_38_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1741 = frontier_phi_16_38_ladder_2;
        _1743 = frontier_phi_16_38_ladder_1;
        _1745 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1660);
        _1741 = _1729.x * cbModelParam._m0[1u].y;
        _1743 = _1729.y * cbModelParam._m0[1u].y;
        _1745 = _1729.z * cbModelParam._m0[1u].y;
    }
    float _1749 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1749 : min(cbModelParam._m0[25u].w, _1749));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1804 = fma(_881, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873)) + cbModelParam._m0[21u].w;
        float _1808 = fma(_881, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873)) + cbModelParam._m0[22u].w;
        float _1812 = fma(_881, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873)) + cbModelParam._m0[23u].w;
        float _1815 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1818 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1821 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1961;
        if (_1815 > 0.0)
        {
            _1961 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1961 = frontier_phi_28_24_ladder;
        }
        float _2237;
        if (_1818 > 0.0)
        {
            _2237 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2237 = frontier_phi_40_35_ladder;
        }
        float _2450;
        if (_1821 > 0.0)
        {
            _2450 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2450 = frontier_phi_49_46_ladder;
        }
        float _2452 = isnan(_2237) ? _1961 : (isnan(_1961) ? _2237 : min(_1961, _2237));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1815) + _1804;
        float _2458 = (_2453 * _1818) + _1808;
        float _2459 = (_2453 * _1821) + _1812;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2460;
        float _2463 = _2460 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2459 > _2463) || ((_2459 < _2461) || ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 < _2461) || (_2457 > _2463))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2459, cbModelParam._m0[17u].z, fma(_2458, cbModelParam._m0[17u].y, _2457 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2459, cbModelParam._m0[18u].z, fma(_2458, cbModelParam._m0[18u].y, _2457 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2459, cbModelParam._m0[19u].z, fma(_2458, cbModelParam._m0[19u].y, _2457 * cbModelParam._m0[19u].x))), _1750);
            frontier_phi_25_49_ladder = _2658.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2658.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2658.x * cbModelParam._m0[1u].z;
        }
        _1840 = frontier_phi_25_49_ladder_2;
        _1842 = frontier_phi_25_49_ladder_1;
        _1844 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1750);
        _1840 = _1824.x * cbModelParam._m0[1u].z;
        _1842 = _1824.y * cbModelParam._m0[1u].z;
        _1844 = _1824.z * cbModelParam._m0[1u].z;
    }
    float _1857 = (((_844 * _793) + _845) * _809) * ((cbModelParam._m0[1u].w * (_1840 - _1741)) + _1741);
    float _1859 = (((_844 * _795) + _845) * _809) * ((cbModelParam._m0[1u].w * (_1842 - _1743)) + _1743);
    float _1861 = (((_844 * _796) + _845) * _809) * ((cbModelParam._m0[1u].w * (_1844 - _1745)) + _1745);
    float _1864 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1857 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1857 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, _1857 * cbSceneParam._m0[91u].x));
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1890 = _809 + (-1.0);
    float _1895 = (cbLight._m0[_1883].x * _1890) + 1.0;
    float _1896 = (cbLight._m0[_1883].y * _1890) + 1.0;
    float _1897 = (cbLight._m0[_1883].z * _1890) + 1.0;
    float _1898 = (cbLight._m0[_1883].w * _1890) + 1.0;
    uint _1899 = _1882 + 5u;
    float _1905 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1909 = _1882 + 4u;
    float _1915 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1919 = _1882 | 1u;
    float _1930 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_631, _632, _633));
    float _1933 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_631, _632, _633));
    float _4150 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _4161 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1938 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1940 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _1947 = ((cbLight._m0[_1899].x * _1905) * _1940) + ((cbLight._m0[_1909].x * _1915) * _1938);
    float _1948 = ((_1905 * cbLight._m0[_1899].y) * _1940) + ((_1915 * cbLight._m0[_1909].y) * _1938);
    float _1949 = ((_1905 * cbLight._m0[_1899].z) * _1940) + ((_1915 * cbLight._m0[_1909].z) * _1938);
    uvec4 _1953 = floatBitsToUint(cbLight._m0[_1882 + 12u]);
    bool _1955 = _1953.x == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1955)
    {
        _1966 = _1947;
        _1968 = _1948;
        _1970 = _1949;
    }
    else
    {
        uint _1974 = _1882 + 6u;
        float _1990 = (dot(vec3(cbLight._m0[_1882 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _1991 = _1990 * _1990;
        float _4172 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1993 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _1966 = (((cbLight._m0[_1974].x * 0.3183098733425140380859375) * _1992) * _1993) + _1947;
        _1968 = (((cbLight._m0[_1974].y * 0.3183098733425140380859375) * _1992) * _1993) + _1948;
        _1970 = (((cbLight._m0[_1974].z * 0.3183098733425140380859375) * _1992) * _1993) + _1949;
    }
    bool _1973 = _1953.y == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_1973)
    {
        _2011 = _1966;
        _2013 = _1968;
        _2015 = _1970;
    }
    else
    {
        uint _2181 = _1882 + 7u;
        float _2197 = (dot(vec3(cbLight._m0[_1882 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4188 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2200 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2011 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _1966;
        _2013 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _1968;
        _2015 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _1970;
    }
    uint _2018 = _1882 + 8u;
    float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _634) * 0.949999988079071044921875);
    float _2032 = _2031 * _2031;
    float _2033 = cbLight._m0[_1882].x + _711;
    float _2034 = cbLight._m0[_1882].y + _712;
    float _2035 = cbLight._m0[_1882].z + _713;
    float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
    float _2040 = _2039 * _2033;
    float _2041 = _2039 * _2034;
    float _2042 = _2039 * _2035;
    float _2043 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1882].xyz));
    float _4204 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2047 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2048 = dot(vec3(_631, _632, _633), vec3(_2040, _2041, _2042));
    float _4226 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2040, _2041, _2042));
    float _4237 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2032 * _2032;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
    float _2069 = 0.959999978542327880859375 - _790;
    float _2071 = 0.959999978542327880859375 - _791;
    float _2072 = 0.959999978542327880859375 - _792;
    float _2079 = 1.0 - _2032;
    float _2090 = (0.5 / (((_2047 * ((_2046 * _2079) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2079) + _2032) * _2046))) * _2046;
    float _4248 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    uint _2103 = _1882 + 9u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _634) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1919].x + _711;
    float _2117 = cbLight._m0[_1919].y + _712;
    float _2118 = cbLight._m0[_1919].z + _713;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1919].xyz));
    float _4259 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2130 = dot(vec3(_631, _632, _633), vec3(_2123, _2124, _2125));
    float _4270 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2123, _2124, _2125));
    float _4281 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2115 * _2115;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
    float _2156 = 1.0 - _2115;
    float _2166 = (0.5 / (((_2047 * ((_2129 * _2156) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2156) + _2115) * _2129))) * _2129;
    float _4292 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    float _2178 = (((((_2149 * _2069) + _793) * cbLight._m0[_2103].x) * _2168) * _1905) + (((((_2068 * _2069) + _793) * cbLight._m0[_2018].x) * _2092) * _1915);
    float _2179 = (((((_2149 * _2071) + _795) * cbLight._m0[_2103].y) * _2168) * _1905) + (((((_2068 * _2071) + _795) * cbLight._m0[_2018].y) * _2092) * _1915);
    float _2180 = (((((_2149 * _2072) + _796) * cbLight._m0[_2103].z) * _2168) * _1905) + (((((_2068 * _2072) + _796) * cbLight._m0[_2018].z) * _2092) * _1915);
    float _2242;
    float _2244;
    float _2246;
    if (_1955)
    {
        _2242 = _2178;
        _2244 = _2179;
        _2246 = _2180;
    }
    else
    {
        uint _2248 = _1882 + 2u;
        uint _2252 = _1882 + 10u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _634) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _711;
        float _2269 = cbLight._m0[_2248].y + _712;
        float _2270 = cbLight._m0[_2248].z + _713;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2248].xyz));
        float _4303 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2282 = dot(vec3(_631, _632, _633), vec3(_2275, _2276, _2277));
        float _4314 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4325 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0);
        float _2308 = 1.0 - _2267;
        float _2318 = (0.5 / (((_2047 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2308) + _2267) * _2281))) * _2281;
        float _4336 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2242 = (((((_2301 * _2069) + _793) * cbLight._m0[_2252].x) * _2320) * _2321) + _2178;
        _2244 = (((((_2301 * _2071) + _795) * cbLight._m0[_2252].y) * _2320) * _2321) + _2179;
        _2246 = (((((_2301 * _2072) + _796) * cbLight._m0[_2252].z) * _2320) * _2321) + _2180;
    }
    float _2356;
    float _2358;
    float _2360;
    if (_1973)
    {
        _2356 = _2242;
        _2358 = _2244;
        _2360 = _2246;
    }
    else
    {
        uint _2367 = _1882 + 3u;
        uint _2371 = _1882 + 11u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _634) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _711;
        float _2388 = cbLight._m0[_2367].y + _712;
        float _2389 = cbLight._m0[_2367].z + _713;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2367].xyz));
        float _4352 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2401 = dot(vec3(_631, _632, _633), vec3(_2394, _2395, _2396));
        float _4363 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4374 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
        float _2427 = 1.0 - _2386;
        float _2437 = (0.5 / (((_2047 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2427) + _2386) * _2400))) * _2400;
        float _4385 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2356 = (((((_2420 * _2069) + _793) * cbLight._m0[_2371].x) * _2439) * _2440) + _2242;
        _2358 = (((((_2420 * _2071) + _795) * cbLight._m0[_2371].y) * _2439) * _2440) + _2244;
        _2360 = (((((_2420 * _2072) + _796) * cbLight._m0[_2371].z) * _2439) * _2440) + _2246;
    }
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    if (_1880.y == 0u)
    {
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2515;
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2515;
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2515;
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.x;
        uint _2542 = uint((float(_2530.y) * floor(float(uint(cbSceneParam._m0[85u].y * _732) / _2531))) + floor(float(uint(cbSceneParam._m0[85u].x * _731) / _2531)));
        float _2552 = (log2(_2518 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2553 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        uint _2556 = uint(isnan(14.0) ? _2553 : (isnan(_2553) ? 14.0 : min(_2553, 14.0)));
        uvec4 _2561 = texelFetch(g_lightClusterGridBuffer, int(((_2556 << 2u) + (_2542 << 6u)) >> 2u));
        uint _2562 = _2561.x;
        uint _2563 = _2530.z;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        if (((((1u << ((_2563 >> 4u) & 15u)) + 4294967295u) & _2562) == 0u) || ((_2563 & 240u) == 0u))
        {
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
        }
        else
        {
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            uint _2822 = 0u;
            uint _2831;
            bool _2832;
            for (;;)
            {
                _2831 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2822 << 2u)) >> 2u)).x;
                _2832 = _2831 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2832)
                {
                    frontier_phi_66_pred = _2816;
                    frontier_phi_66_pred_1 = _2821;
                    frontier_phi_66_pred_2 = _2820;
                    frontier_phi_66_pred_3 = _2819;
                    frontier_phi_66_pred_4 = _2818;
                    frontier_phi_66_pred_5 = _2817;
                }
                else
                {
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    uint _2967;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2831;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    for (;;)
                    {
                        uint _2971 = uint(findLSB(_2967)) + (_2822 << 5u);
                        uint _2968 = (_2967 + 4294967295u) & _2967;
                        uint _2973 = _2971 * 48u;
                        vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2993 = (_2971 * 48u) + 4u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3012 = (_2971 * 48u) + 8u;
                        vec3 _3023 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x));
                        float _3027 = _2987.x - _2516;
                        float _3028 = _2987.y - _2517;
                        float _3029 = _2987.z - _2518;
                        float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                        float _3033 = inversesqrt(_3030);
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3037 = dot(vec3(_750, _753, _756), vec3(_3034, _3035, _3036));
                        float _3042 = 1.0 - (_3030 * _2987.w);
                        float _4411 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3043 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3044 = sqrt(_3030) * _3006.w;
                        float _3047 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                        float _3048 = _3047 * _3047;
                        float _3051 = ((1.0 - _3048) * _3037) + _3048;
                        float _3054 = _3044 * _3044;
                        float _3058 = ((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3043) / ((_3054 * 0.699999988079071044921875) + 1.0);
                        float _3062 = (-0.0) - _2516;
                        float _3063 = (-0.0) - _2517;
                        float _3064 = (-0.0) - _2518;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3069 = _3068 * _3062;
                        float _3070 = _3068 * _3063;
                        float _3071 = _3068 * _3064;
                        float _3079 = exp2(log2(1.0 / ((_3054 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _825;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3069 + _3034;
                        float _3091 = _3070 + _3035;
                        float _3092 = _3071 + _3036;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_750, _753, _756), vec3(_3069, _3070, _3071));
                        float _4427 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3104 = dot(vec3(_750, _753, _756), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4438 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3047 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3037) + _3113;
                        float _4449 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4460 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3111 * _3111) * ((_3054 * 2.1991131305694580078125) + 3.141590118408203125))) * _3043;
                        _2891 = (_3058 * _3006.x) + _2964;
                        _2892 = (_3058 * _3006.y) + _2965;
                        _2893 = (_3058 * _3006.z) + _2966;
                        _2888 = (_3139 * _3023.x) + _2961;
                        _2889 = (_3139 * _3023.y) + _2962;
                        _2890 = (_3139 * _3023.z) + _2963;
                        if (_2968 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2968;
                        }
                    }
                    frontier_phi_66_pred = _2888;
                    frontier_phi_66_pred_1 = _2893;
                    frontier_phi_66_pred_2 = _2892;
                    frontier_phi_66_pred_3 = _2891;
                    frontier_phi_66_pred_4 = _2890;
                    frontier_phi_66_pred_5 = _2889;
                }
                _2664 = frontier_phi_66_pred;
                _2674 = frontier_phi_66_pred_1;
                _2672 = frontier_phi_66_pred_2;
                _2670 = frontier_phi_66_pred_3;
                _2668 = frontier_phi_66_pred_4;
                _2666 = frontier_phi_66_pred_5;
                uint _2823 = _2822 + 1u;
                if (_2823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2816 = _2664;
                    _2817 = _2666;
                    _2818 = _2668;
                    _2819 = _2670;
                    _2820 = _2672;
                    _2821 = _2674;
                    _2822 = _2823;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
        }
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.z;
        uint _2680 = (_2678 >> 8u) & 15u;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((4294967295u << _2680) & _2562) == 0u)
        {
            _2784 = _2663;
            _2786 = _2665;
            _2788 = _2667;
            _2790 = _2669;
            _2792 = _2671;
            _2794 = _2673;
        }
        else
        {
            float _2809 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
            float _2810 = _2809 * _2516;
            float _2811 = _2809 * _2517;
            float _2812 = _2809 * _2518;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2680 < ((_2678 >> 12u) & 15u))
            {
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2944 = _2663;
                float _2945 = _2665;
                float _2946 = _2667;
                float _2947 = _2669;
                float _2948 = _2671;
                float _2949 = _2673;
                uint _2950 = _2680;
                uint _2959;
                bool _2960;
                for (;;)
                {
                    _2959 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                    _2960 = _2959 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2960)
                    {
                        frontier_phi_77_pred = _2949;
                        frontier_phi_77_pred_1 = _2948;
                        frontier_phi_77_pred_2 = _2947;
                        frontier_phi_77_pred_3 = _2946;
                        frontier_phi_77_pred_4 = _2945;
                        frontier_phi_77_pred_5 = _2944;
                    }
                    else
                    {
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3166 = _2944;
                        float _3167 = _2945;
                        float _3168 = _2946;
                        float _3169 = _2947;
                        float _3170 = _2948;
                        float _3171 = _2949;
                        uint _3172 = _2959;
                        uint _3173;
                        vec4 _3198;
                        float _3199;
                        vec4 _3214;
                        vec3 _3226;
                        vec4 _3241;
                        vec4 _3257;
                        float _3303;
                        bool _3304;
                        for (;;)
                        {
                            uint _3183 = ((_2950 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3172));
                            _3173 = (_3172 + 4294967295u) & _3172;
                            uint _3185 = _3183 * 40u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3199 = _3198.w;
                            uint _3201 = (_3183 * 40u) + 4u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3183 * 40u) + 8u;
                            _3226 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x));
                            uint _3228 = (_3183 * 40u) + 16u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3244 = (_3183 * 40u) + 20u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3183 * 40u) + 24u;
                            vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3278 = (_3183 * 40u) + 28u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3303 = fma(_2518, _3291.z, fma(_2517, _3291.y, _3291.x * _2516)) + _3291.w;
                            _3304 = !((fma(_2518, _3272.z, fma(_2517, _3272.y, _3272.x * _2516)) + _3272.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3304)
                            {
                                float _3331 = _3198.x - _2516;
                                float _3332 = _3198.y - _2517;
                                float _3333 = _3198.z - _2518;
                                float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                                float _3337 = inversesqrt(_3334);
                                float _3338 = _3337 * _3331;
                                float _3339 = _3337 * _3332;
                                float _3340 = _3337 * _3333;
                                float _3344 = 1.0 - (_3334 / (_3199 * _3199));
                                float _4471 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3345 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3349 = sqrt(_3334) * _3214.w;
                                float _3351 = 1.39999997615814208984375 / (_3349 + 1.39999997615814208984375);
                                float _3352 = _3351 * _3351;
                                float _3355 = ((1.0 - _3352) * dot(vec3(_3338, _3339, _3340), vec3(_750, _753, _756))) + _3352;
                                float _3358 = _3349 * _3349;
                                float _3362 = (fma(_2518, _3241.z, fma(_2517, _3241.y, _3241.x * _2516)) + _3241.w) / _3303;
                                float _3363 = (fma(_2518, _3257.z, fma(_2517, _3257.y, _3257.x * _2516)) + _3257.w) / _3303;
                                float _3367 = 1.0 - dot(vec2(_3362, _3363), vec2(_3362, _3363));
                                float _4487 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3369 = _3368 * (((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3345) / ((_3358 * 0.699999988079071044921875) + 1.0));
                                float _3381 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                                float _3382 = 1.0 - _825;
                                float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                                float _3390 = _3389 * _3389;
                                float _3391 = _3390 * _3390;
                                float _3392 = _3338 - _2810;
                                float _3393 = _3339 - _2811;
                                float _3394 = _3340 - _2812;
                                float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                                float _3402 = dot(vec3(_750, _753, _756), vec3((-0.0) - _2810, (-0.0) - _2811, (-0.0) - _2812));
                                float _4498 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3406 = dot(vec3(_750, _753, _756), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                                float _4509 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                                float _3414 = _3351 * _3390;
                                float _3415 = _3414 * _3414;
                                float _3421 = ((1.0 - _3415) * dot(vec3(_750, _753, _756), vec3(_3338, _3339, _3340))) + _3415;
                                float _4520 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3423 = 1.0 - _3390;
                                float _3433 = (0.5 / (((_3422 * ((_3405 * _3423) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3390) * _3405))) * _3422;
                                float _4531 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3443 = (_3368 * _3345) * (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3413 * _3413) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3369 * _3214.y;
                                frontier_phi_83_pred_1 = _3369 * _3214.x;
                                frontier_phi_83_pred_2 = _3443 * _3226.z;
                                frontier_phi_83_pred_3 = _3443 * _3226.y;
                                frontier_phi_83_pred_4 = _3443 * _3226.x;
                                frontier_phi_83_pred_5 = _3369 * _3214.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3451 = frontier_phi_83_pred;
                            _3450 = frontier_phi_83_pred_1;
                            _3449 = frontier_phi_83_pred_2;
                            _3448 = frontier_phi_83_pred_3;
                            _3447 = frontier_phi_83_pred_4;
                            _3452 = frontier_phi_83_pred_5;
                            _3156 = _3450 + _3169;
                            _3157 = _3451 + _3170;
                            _3158 = _3452 + _3171;
                            _3153 = _3447 + _3166;
                            _3154 = _3448 + _3167;
                            _3155 = _3449 + _3168;
                            if (_3173 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3173;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3158;
                        frontier_phi_77_pred_1 = _3157;
                        frontier_phi_77_pred_2 = _3156;
                        frontier_phi_77_pred_3 = _3155;
                        frontier_phi_77_pred_4 = _3154;
                        frontier_phi_77_pred_5 = _3153;
                    }
                    _2795 = frontier_phi_77_pred;
                    _2793 = frontier_phi_77_pred_1;
                    _2791 = frontier_phi_77_pred_2;
                    _2789 = frontier_phi_77_pred_3;
                    _2787 = frontier_phi_77_pred_4;
                    _2785 = frontier_phi_77_pred_5;
                    uint _2951 = _2950 + 1u;
                    if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2944 = _2785;
                        _2945 = _2787;
                        _2946 = _2789;
                        _2947 = _2791;
                        _2948 = _2793;
                        _2949 = _2795;
                        _2950 = _2951;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2789;
                frontier_phi_58_59_ladder_1 = _2795;
                frontier_phi_58_59_ladder_2 = _2793;
                frontier_phi_58_59_ladder_3 = _2791;
                frontier_phi_58_59_ladder_4 = _2787;
                frontier_phi_58_59_ladder_5 = _2785;
            }
            else
            {
                frontier_phi_58_59_ladder = _2667;
                frontier_phi_58_59_ladder_1 = _2673;
                frontier_phi_58_59_ladder_2 = _2671;
                frontier_phi_58_59_ladder_3 = _2669;
                frontier_phi_58_59_ladder_4 = _2665;
                frontier_phi_58_59_ladder_5 = _2663;
            }
            _2784 = frontier_phi_58_59_ladder_5;
            _2786 = frontier_phi_58_59_ladder_4;
            _2788 = frontier_phi_58_59_ladder;
            _2790 = frontier_phi_58_59_ladder_3;
            _2792 = frontier_phi_58_59_ladder_2;
            _2794 = frontier_phi_58_59_ladder_1;
        }
        float _2799 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2575 = (_2799 * _2790) + _2011;
        _2577 = (_2799 * _2792) + _2013;
        _2579 = (_2799 * _2794) + _2015;
        _2581 = ((_2784 * _793) * _2799) + _2356;
        _2583 = ((_2786 * _795) * _2799) + _2358;
        _2585 = ((_2788 * _796) * _2799) + _2360;
    }
    else
    {
        _2575 = _2011;
        _2577 = _2013;
        _2579 = _2015;
        _2581 = _2356;
        _2583 = _2358;
        _2585 = _2360;
    }
    float _4547 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4558 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4569 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2602 = ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2575 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _809))) + ((_2581 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1649)) * cbPerFrame._m0[3u].x);
    float _2603 = ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2577 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _809))) + ((_2583 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1649)) * cbPerFrame._m0[3u].x);
    float _2604 = ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2579 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _809))) + ((_2585 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1649)) * cbPerFrame._m0[3u].x);
    uint _2605 = _236 + 6u;
    float _2613 = _731 / cbSceneParam._m0[86u].x;
    float _2614 = _732 / cbSceneParam._m0[86u].y;
    vec4 _2628 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2630 = _2628.x;
    float _2631 = _2628.y;
    float _2632 = _2628.z;
    float _2633 = _2628.w;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2688 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2689 = _2688 / _653;
        float _2700 = _2689 * _704;
        float _2701 = _705 * _2689;
        float _2702 = (-0.0) - _2701;
        float _2704 = _2689 * _706;
        float _2706 = (cbSceneParam._m0[77u].w * _2702) / _2688;
        float _2707 = _2706 + cbSceneParam._m0[79u].w;
        float _2708 = cbSceneParam._m0[79u].w - _2701;
        float _2714 = sqrt(((_2700 * _2700) + (_2701 * _2701)) + (_2704 * _2704));
        float _2717 = (1.0 - (cbSceneParam._m0[77u].w / _2688)) * _2714;
        float _2722 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2724 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2901;
        if (abs((_2702 - _2706) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2901 = ((((_2707 > 0.0) ? exp2(_2722 * _2707) : (2.0 - exp2(_2724 * _2707))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2717;
        }
        else
        {
            float _2845 = 1.0 / cbSceneParam._m0[80u].x;
            float _2846 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : max(_2707, _2708));
            float _2847 = isnan(_2708) ? _2707 : (isnan(_2707) ? _2708 : min(_2707, _2708));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            _2901 = ((abs(_2714 / _2702) * cbSceneParam._m0[80u].y) * ((((_2856 - _2857) * 2.0) - ((exp2(_2722 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0)))) - exp2(_2722 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))))) * _2845)) - ((exp2(_2724 * _2856) - exp2(_2724 * _2857)) * _2845))) + (_2717 * cbSceneParam._m0[80u].z);
        }
        vec4 _2903 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2613, _2614, 1.0), 0.0);
        float _2912 = exp2((_2901 * (-1.44269502162933349609375)) * (1.0 - _2903.w));
        float _2913 = log2(_2912);
        float _2929 = log2(_2633);
        _2726 = (exp2(_2929 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].x)) * _2903.x) / cbSceneParam._m0[78u].x)) + _2630;
        _2728 = (exp2(_2929 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].y)) * _2903.y) / cbSceneParam._m0[78u].y)) + _2631;
        _2730 = (exp2(_2929 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].z)) * _2903.z) / cbSceneParam._m0[78u].z)) + _2632;
        _2732 = _2912 * _2633;
    }
    else
    {
        _2726 = _2630;
        _2728 = _2631;
        _2730 = _2632;
        _2732 = _2633;
    }
    bool _2939;
    vec4 _2742;
    vec4 _2764;
    float _2766;
    float _2770;
    float _2771;
    float _2772;
    float _2773;
    bool _2783;
    for (;;)
    {
        _2742 = cbMatDynParam._m0[0u];
        float _2744 = roundEven(_2742.y);
        bool _2745 = _2744 == 3.0;
        float _2746 = log2(_2732);
        float _2753 = exp2(_2746 * cbSceneParam._m0[78u].x) * _2602;
        float _2754 = exp2(_2746 * cbSceneParam._m0[78u].y) * _2603;
        float _2755 = exp2(_2746 * cbSceneParam._m0[78u].z) * _2604;
        float _2762 = _720 + (-0.5);
        _2764 = cbMtdParam._m0[1u];
        _2766 = _2764.y * _2762;
        float _2769 = (_2744 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2770 = _2769 * (_2745 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2726)));
        _2771 = _2769 * (_2745 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2728)));
        _2772 = _2769 * (_2745 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2730)));
        _2773 = _2762 * 0.999000012874603271484375;
        _2783 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2783)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2773) < 0.5)
            {
                _2939 = true;
                break;
            }
        }
        uint _2880 = _769 + uint(_2742.w);
        if ((cbInstanceData._m0[_2880].w < 1.0) && ((cbInstanceData._m0[_2880].w + _2773) < 0.5))
        {
            _2939 = true;
            break;
        }
        if ((_2766 + 1.0) < _2764.x)
        {
            _2939 = true;
            break;
        }
        _2939 = false;
        break;
    }
    float _3144;
    if (_2939)
    {
        discard_state = true;
        _3144 = 0.0;
    }
    else
    {
        _3144 = cbInstanceData._m0[_2605].w;
    }
    SV_Target.x = _2770;
    SV_Target.y = _2771;
    SV_Target.z = _2772;
    SV_Target.w = _3144;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2605].w;
    discard_exit();
}


