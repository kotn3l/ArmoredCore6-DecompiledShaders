#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1317;
float _3720;
float _3721;
float _3722;
float _3723;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3732 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3743 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3754 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].y) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3765 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _432 = (_425 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _433 = (_425 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _434 = (_425 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _438 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _432;
    float _441 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _433;
    float _444 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _434;
    float _451 = ((_432 - _438) * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) + _438;
    float _452 = ((_433 - _441) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _441;
    float _453 = ((_434 - _444) * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) + _444;
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _547 = ((_517.z - _538) * _425) + _538;
    float _550 = ((((_517.x - _536) * _425) + _536) * 2.0) + (-1.0);
    float _551 = ((((_517.y - _537) * _425) + _537) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3776 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _604 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_590 - _591) * cbMtdParam._m0[24u].z) + _591) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3787 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _612 = (_605 * ((_472.x * cbMtdParam._m0[18u].x) - _451)) + _451;
    float _613 = (_605 * ((_472.y * cbMtdParam._m0[18u].y) - _452)) + _452;
    float _614 = (_605 * ((_472.z * cbMtdParam._m0[18u].z) - _453)) + _453;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _642 = _640.x;
    float _660 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _642) * _425) + _642;
    float _664 = ((_626.x - _660) * cbMtdParam._m0[19u].z) + _660;
    float _666 = _664 - (_664 * _605);
    float _671 = (((_492.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _691 = (_684.x * 2.0) + (-1.0);
    float _692 = (_684.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3798 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _701 = (_605 * (_684.z - _671)) + _671;
    float _706 = _550 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_492.x * 2.0) + (-1.0)));
    float _707 = _551 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_492.y * 2.0) + (-1.0)));
    float _719 = (((_691 - _706) + (cbMtdParam._m0[21u].x * _706)) * _605) + _706;
    float _720 = (((_692 - _707) + (cbMtdParam._m0[21u].x * _707)) * _605) + _707;
    float _721 = (_605 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _557)) + _557;
    float _723 = cbMtdParam._m0[22u].x + _570.w;
    float _726 = fma(_721, _240 * NORMAL.x, fma(_720, _247 * TANGENT.x, (_233 * _225) * _719));
    float _729 = fma(_721, _240 * NORMAL.y, fma(_720, _247 * TANGENT.y, (_233 * _226) * _719));
    float _732 = fma(_721, _240 * NORMAL.z, fma(_720, _247 * TANGENT.z, (_233 * _227) * _719));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    float _737 = _736 * _726;
    float _738 = _736 * _729;
    float _739 = _736 * _732;
    float _3809 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _740 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3831 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3842 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3853 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3864 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _745 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    vec4 _824 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _826 = _824.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _998 = sqrt(((_810 * _810) + (_811 * _811)) + (_812 * _812));
        float _1004 = (cbMatDynParam._m0[5u].x * _998) + cbMatDynParam._m0[5u].y;
        float _3875 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1009 = (cbMatDynParam._m0[5u].z * _998) + cbMatDynParam._m0[5u].w;
        float _3886 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) - _1005)) + _1005) < ((_826 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _837 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _838 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_739, cbSceneParam._m0[5u].z, fma(_738, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _737));
    float _859 = fma(_739, cbSceneParam._m0[6u].z, fma(_738, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _737));
    float _862 = fma(_739, cbSceneParam._m0[7u].z, fma(_738, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _737));
    uint _875 = _274 + 9u;
    uint _876 = _875 + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3897 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _888 = 1.0 - _745;
    float _889 = _885 * _888;
    float _890 = _886 * _888;
    float _891 = _887 * _888;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _745;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _745;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _745;
    float _899 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _837, cbSceneParam._m0[86u].y * _838));
    float _915 = ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * TEXCOORD_5.w) * _911.x;
    float _916 = dot(vec3(_737, _738, _739), vec3(_817, _818, _819));
    float _919 = _916 * 2.0;
    float _923 = (_919 * _737) - _817;
    float _924 = (_919 * _738) - _818;
    float _925 = (_919 * _739) - _819;
    float _929 = abs(dot(vec3(_817, _818, _819), vec3(_737, _738, _739)));
    float _3930 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _931 = sqrt(_740);
    float _944 = exp2((_931 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_931 * 3.0));
    float _950 = (1.0 - _944) * ((_931 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _951 = _944 * _931;
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1045 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1049 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1074 = _979 + _737;
        float _1075 = _983 + _738;
        float _1076 = _987 + _739;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1041;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1045;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1049;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_737, _738, _739), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3978 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_737, _738, _739), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4011 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_737, _738, _739), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4044 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1363 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1367 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1390 = _979 + _737;
        float _1391 = _983 + _738;
        float _1392 = _987 + _739;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_737, _738, _739), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4107 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_737, _738, _739), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4140 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_737, _738, _739), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4173 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1317;
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = _1317;
        _1637 = _1317;
        _1638 = _1317;
        _1639 = _1317;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1329)) + _1329;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1330)) + _1330;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1331)) + _1331;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _923 * 0.5;
    float _1697 = _924 * 0.5;
    float _1698 = _925 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1739;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1750;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1741 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1754 = (_1750 * cbModelParam._m0[1u].x) + (_1739 * (1.0 - cbModelParam._m0[1u].x));
    float _1764 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _740);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1764 : min(cbModelParam._m0[25u].z, _1764));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_925, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923));
        float _1826 = fma(_925, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923));
        float _1829 = fma(_925, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1857 = frontier_phi_17_15_ladder;
        }
        float _2080;
        if (_1826 > 0.0)
        {
            _2080 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2080 = frontier_phi_26_22_ladder;
        }
        float _2337;
        if (_1829 > 0.0)
        {
            _2337 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2337 = frontier_phi_38_33_ladder;
        }
        float _2339 = isnan(_2080) ? _1857 : (isnan(_1857) ? _2080 : min(_1857, _2080));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1823) + _1812;
        float _2345 = (_2340 * _1826) + _1816;
        float _2346 = (_2340 * _1829) + _1820;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2347;
        float _2351 = _2347 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 > _2351) || ((_2345 < _2349) || ((_2344 < _2349) || (_2344 > _2351))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2346, cbModelParam._m0[9u].z, fma(_2345, cbModelParam._m0[9u].y, _2344 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2346, cbModelParam._m0[10u].z, fma(_2345, cbModelParam._m0[10u].y, _2344 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2346, cbModelParam._m0[11u].z, fma(_2345, cbModelParam._m0[11u].y, _2344 * cbModelParam._m0[11u].x))), _1765);
            frontier_phi_16_38_ladder = _2474.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2474.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_16_38_ladder_2;
        _1847 = frontier_phi_16_38_ladder_1;
        _1849 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_923, _924, _925), _1765);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _740);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_925, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923));
        float _1921 = fma(_925, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923));
        float _1924 = fma(_925, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923));
        float _2085;
        if (_1918 > 0.0)
        {
            _2085 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2364;
        if (_1921 > 0.0)
        {
            _2364 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2364 = frontier_phi_40_35_ladder;
        }
        float _2577;
        if (_1924 > 0.0)
        {
            _2577 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2577 = frontier_phi_49_46_ladder;
        }
        float _2579 = isnan(_2364) ? _2085 : (isnan(_2085) ? _2364 : min(_2085, _2364));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _1918) + _1907;
        float _2585 = (_2580 * _1921) + _1911;
        float _2586 = (_2580 * _1924) + _1915;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2587;
        float _2590 = _2587 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2586 > _2590) || ((_2586 < _2588) || ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 < _2588) || (_2584 > _2590))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2586, cbModelParam._m0[17u].z, fma(_2585, cbModelParam._m0[17u].y, _2584 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2586, cbModelParam._m0[18u].z, fma(_2585, cbModelParam._m0[18u].y, _2584 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2586, cbModelParam._m0[19u].z, fma(_2585, cbModelParam._m0[19u].y, _2584 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_25_49_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_25_49_ladder_2;
        _1945 = frontier_phi_25_49_ladder_1;
        _1947 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_923, _924, _925), _1854);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1960 = (((_950 * _899) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1943 - _1845)) + _1845);
    float _1962 = (((_950 * _901) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1964 = (((_950 * _902) + _951) * _915) * ((cbModelParam._m0[1u].w * (_1947 - _1849)) + _1849);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    vec4 _1981 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_837, _838));
    float _1983 = _1981.w;
    float _1995 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1983);
    float _1996 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1983);
    float _1997 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1983);
    uvec4 _2001 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2003 = _2001.x * 14u;
    uint _2004 = _2003 + 13u;
    float _2011 = _915 + (-1.0);
    float _2016 = (cbLight._m0[_2004].x * _2011) + 1.0;
    float _2017 = (cbLight._m0[_2004].y * _2011) + 1.0;
    float _2018 = (cbLight._m0[_2004].z * _2011) + 1.0;
    float _2019 = (cbLight._m0[_2004].w * _2011) + 1.0;
    uint _2020 = _2003 + 5u;
    float _2026 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2030 = _2003 + 4u;
    float _2039 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2043 = _2003 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_737, _738, _739));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_737, _738, _739));
    float _4309 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4320 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2020].x * _2026) * _2064) + (((cbLight._m0[_2030].x * _1995) * _2039) * _2062);
    float _2072 = ((_2026 * cbLight._m0[_2020].y) * _2064) + (((cbLight._m0[_2030].y * _1996) * _2039) * _2062);
    float _2073 = ((_2026 * cbLight._m0[_2020].z) * _2064) + (((cbLight._m0[_2030].z * _1997) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2003 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2079)
    {
        _2090 = _2071;
        _2092 = _2072;
        _2094 = _2073;
    }
    else
    {
        uint _2098 = _2003 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_2003 + 2u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4331 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2117 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _2071;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _2072;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _2073;
    }
    bool _2097 = _2077.y == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2097)
    {
        _2135 = _2090;
        _2137 = _2092;
        _2139 = _2094;
    }
    else
    {
        uint _2308 = _2003 + 7u;
        float _2324 = (dot(vec3(cbLight._m0[_2003 + 3u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4347 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2327 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2135 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2090;
        _2137 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2092;
        _2139 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2094;
    }
    uint _2142 = _2003 + 8u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _740) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_2003].x + _817;
    float _2158 = cbLight._m0[_2003].y + _818;
    float _2159 = cbLight._m0[_2003].z + _819;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2003].xyz));
    float _4363 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _4374 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2171 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2172 = dot(vec3(_737, _738, _739), vec3(_2164, _2165, _2166));
    float _4385 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2164, _2165, _2166));
    float _4396 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2156 * _2156;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0);
    float _2193 = 0.959999978542327880859375 - _896;
    float _2195 = 0.959999978542327880859375 - _897;
    float _2196 = 0.959999978542327880859375 - _898;
    float _2203 = 1.0 - _2156;
    float _2214 = (0.5 / (((_2171 * ((_2170 * _2203) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2203) + _2156) * _2170))) * _2170;
    float _4407 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    uint _2230 = _2003 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _740) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2043].x + _817;
    float _2244 = cbLight._m0[_2043].y + _818;
    float _2245 = cbLight._m0[_2043].z + _819;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2043].xyz));
    float _4418 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2257 = dot(vec3(_737, _738, _739), vec3(_2250, _2251, _2252));
    float _4429 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2250, _2251, _2252));
    float _4440 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
    float _2283 = 1.0 - _2242;
    float _2293 = (0.5 / (((_2171 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2283) + _2242) * _2256))) * _2256;
    float _4451 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2305 = (((((_2276 * _2193) + _899) * cbLight._m0[_2230].x) * _2295) * _2026) + ((((cbLight._m0[_2142].x * _1995) * ((_2192 * _2193) + _899)) * _2216) * _2039);
    float _2306 = (((((_2276 * _2195) + _901) * cbLight._m0[_2230].y) * _2295) * _2026) + ((((cbLight._m0[_2142].y * _1996) * ((_2192 * _2195) + _901)) * _2216) * _2039);
    float _2307 = (((((_2276 * _2196) + _902) * cbLight._m0[_2230].z) * _2295) * _2026) + ((((cbLight._m0[_2142].z * _1997) * ((_2192 * _2196) + _902)) * _2216) * _2039);
    float _2369;
    float _2371;
    float _2373;
    if (_2079)
    {
        _2369 = _2305;
        _2371 = _2306;
        _2373 = _2307;
    }
    else
    {
        uint _2375 = _2003 + 2u;
        uint _2379 = _2003 + 10u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _740) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _817;
        float _2396 = cbLight._m0[_2375].y + _818;
        float _2397 = cbLight._m0[_2375].z + _819;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2375].xyz));
        float _4462 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2409 = dot(vec3(_737, _738, _739), vec3(_2402, _2403, _2404));
        float _4473 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4484 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
        float _2435 = 1.0 - _2394;
        float _2445 = (0.5 / (((_2171 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2435) + _2394) * _2408))) * _2408;
        float _4495 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2369 = (((((_2428 * _2193) + _899) * cbLight._m0[_2379].x) * _2447) * _2448) + _2305;
        _2371 = (((((_2428 * _2195) + _901) * cbLight._m0[_2379].y) * _2447) * _2448) + _2306;
        _2373 = (((((_2428 * _2196) + _902) * cbLight._m0[_2379].z) * _2447) * _2448) + _2307;
    }
    float _2483;
    float _2485;
    float _2487;
    if (_2097)
    {
        _2483 = _2369;
        _2485 = _2371;
        _2487 = _2373;
    }
    else
    {
        uint _2494 = _2003 + 3u;
        uint _2498 = _2003 + 11u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _740) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _817;
        float _2515 = cbLight._m0[_2494].y + _818;
        float _2516 = cbLight._m0[_2494].z + _819;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2494].xyz));
        float _4511 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2528 = dot(vec3(_737, _738, _739), vec3(_2521, _2522, _2523));
        float _4522 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4533 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2171 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2554) + _2513) * _2527))) * _2527;
        float _4544 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2483 = (((((_2547 * _2193) + _899) * cbLight._m0[_2498].x) * _2566) * _2567) + _2369;
        _2485 = (((((_2547 * _2195) + _901) * cbLight._m0[_2498].y) * _2566) * _2567) + _2371;
        _2487 = (((((_2547 * _2196) + _902) * cbLight._m0[_2498].z) * _2566) * _2567) + _2373;
    }
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_2001.y == 0u)
    {
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2642;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2642;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2642;
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.x;
        uint _2669 = uint((float(_2657.y) * floor(float(uint(cbSceneParam._m0[85u].y * _838) / _2658))) + floor(float(uint(cbSceneParam._m0[85u].x * _837) / _2658)));
        float _2679 = (log2(_2645 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2680 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        uint _2683 = uint(isnan(14.0) ? _2680 : (isnan(_2680) ? 14.0 : min(_2680, 14.0)));
        uvec4 _2688 = texelFetch(g_lightClusterGridBuffer, int(((_2683 << 2u) + (_2669 << 6u)) >> 2u));
        uint _2689 = _2688.x;
        uint _2690 = _2657.z;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((((1u << ((_2690 >> 4u) & 15u)) + 4294967295u) & _2689) == 0u) || ((_2690 & 240u) == 0u))
        {
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
        }
        else
        {
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            uint _2949 = 0u;
            uint _2958;
            bool _2959;
            for (;;)
            {
                _2958 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                _2959 = _2958 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2959)
                {
                    frontier_phi_66_pred = _2943;
                    frontier_phi_66_pred_1 = _2948;
                    frontier_phi_66_pred_2 = _2947;
                    frontier_phi_66_pred_3 = _2946;
                    frontier_phi_66_pred_4 = _2945;
                    frontier_phi_66_pred_5 = _2944;
                }
                else
                {
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    uint _3094;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2958;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    for (;;)
                    {
                        uint _3098 = uint(findLSB(_3094)) + (_2949 << 5u);
                        uint _3095 = (_3094 + 4294967295u) & _3094;
                        uint _3100 = _3098 * 48u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3120 = (_3098 * 48u) + 4u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 3u)).x));
                        uint _3139 = (_3098 * 48u) + 8u;
                        vec3 _3150 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x));
                        float _3154 = _3114.x - _2643;
                        float _3155 = _3114.y - _2644;
                        float _3156 = _3114.z - _2645;
                        float _3157 = dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156));
                        float _3160 = inversesqrt(_3157);
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3164 = dot(vec3(_856, _859, _862), vec3(_3161, _3162, _3163));
                        float _3169 = 1.0 - (_3157 * _3114.w);
                        float _4570 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3171 = sqrt(_3157) * _3133.w;
                        float _3174 = 1.39999997615814208984375 / (_3171 + 1.39999997615814208984375);
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3164) + _3175;
                        float _3181 = _3171 * _3171;
                        float _3185 = ((isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))) * _3170) / ((_3181 * 0.699999988079071044921875) + 1.0);
                        float _3189 = (-0.0) - _2643;
                        float _3190 = (-0.0) - _2644;
                        float _3191 = (-0.0) - _2645;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3206 = exp2(log2(1.0 / ((_3181 * 3.5) + 5.0)) * 0.25);
                        float _3207 = 1.0 - _931;
                        float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                        float _3215 = _3214 * _3214;
                        float _3216 = _3215 * _3215;
                        float _3217 = _3196 + _3161;
                        float _3218 = _3197 + _3162;
                        float _3219 = _3198 + _3163;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3227 = dot(vec3(_856, _859, _862), vec3(_3196, _3197, _3198));
                        float _4586 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3231 = dot(vec3(_856, _859, _862), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                        float _4597 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                        float _3239 = _3174 * _3215;
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3164) + _3240;
                        float _4608 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3245 = 1.0 - _3215;
                        float _3255 = (0.5 / (((_3244 * ((_3230 * _3245) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3244 * _3245) + _3215) * _3230))) * _3244;
                        float _4619 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3266 = (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) / ((_3238 * _3238) * ((_3181 * 2.1991131305694580078125) + 3.141590118408203125))) * _3170;
                        _3018 = (_3185 * _3133.x) + _3091;
                        _3019 = (_3185 * _3133.y) + _3092;
                        _3020 = (_3185 * _3133.z) + _3093;
                        _3015 = (_3266 * _3150.x) + _3088;
                        _3016 = (_3266 * _3150.y) + _3089;
                        _3017 = (_3266 * _3150.z) + _3090;
                        if (_3095 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3095;
                        }
                    }
                    frontier_phi_66_pred = _3015;
                    frontier_phi_66_pred_1 = _3020;
                    frontier_phi_66_pred_2 = _3019;
                    frontier_phi_66_pred_3 = _3018;
                    frontier_phi_66_pred_4 = _3017;
                    frontier_phi_66_pred_5 = _3016;
                }
                _2791 = frontier_phi_66_pred;
                _2801 = frontier_phi_66_pred_1;
                _2799 = frontier_phi_66_pred_2;
                _2797 = frontier_phi_66_pred_3;
                _2795 = frontier_phi_66_pred_4;
                _2793 = frontier_phi_66_pred_5;
                uint _2950 = _2949 + 1u;
                if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2943 = _2791;
                    _2944 = _2793;
                    _2945 = _2795;
                    _2946 = _2797;
                    _2947 = _2799;
                    _2948 = _2801;
                    _2949 = _2950;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
        }
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.z;
        uint _2807 = (_2805 >> 8u) & 15u;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((4294967295u << _2807) & _2689) == 0u)
        {
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
            _2919 = _2798;
            _2921 = _2800;
        }
        else
        {
            float _2936 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
            float _2937 = _2936 * _2643;
            float _2938 = _2936 * _2644;
            float _2939 = _2936 * _2645;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2807 < ((_2805 >> 12u) & 15u))
            {
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _3071 = _2790;
                float _3072 = _2792;
                float _3073 = _2794;
                float _3074 = _2796;
                float _3075 = _2798;
                float _3076 = _2800;
                uint _3077 = _2807;
                uint _3086;
                bool _3087;
                for (;;)
                {
                    _3086 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                    _3087 = _3086 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3087)
                    {
                        frontier_phi_77_pred = _3076;
                        frontier_phi_77_pred_1 = _3075;
                        frontier_phi_77_pred_2 = _3074;
                        frontier_phi_77_pred_3 = _3073;
                        frontier_phi_77_pred_4 = _3072;
                        frontier_phi_77_pred_5 = _3071;
                    }
                    else
                    {
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        float _3297 = _3075;
                        float _3298 = _3076;
                        uint _3299 = _3086;
                        uint _3300;
                        vec4 _3325;
                        float _3326;
                        vec4 _3341;
                        vec3 _3353;
                        vec4 _3368;
                        vec4 _3383;
                        float _3429;
                        bool _3430;
                        for (;;)
                        {
                            uint _3310 = ((_3077 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3299));
                            _3300 = (_3299 + 4294967295u) & _3299;
                            uint _3312 = _3310 * 40u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3326 = _3325.w;
                            uint _3328 = (_3310 * 40u) + 4u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3310 * 40u) + 8u;
                            _3353 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x));
                            uint _3355 = (_3310 * 40u) + 16u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3310 * 40u) + 20u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3310 * 40u) + 24u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3404 = (_3310 * 40u) + 28u;
                            vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3429 = fma(_2645, _3417.z, fma(_2644, _3417.y, _3417.x * _2643)) + _3417.w;
                            _3430 = !((fma(_2645, _3398.z, fma(_2644, _3398.y, _3398.x * _2643)) + _3398.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3430)
                            {
                                float _3457 = _3325.x - _2643;
                                float _3458 = _3325.y - _2644;
                                float _3459 = _3325.z - _2645;
                                float _3460 = dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459));
                                float _3463 = inversesqrt(_3460);
                                float _3464 = _3463 * _3457;
                                float _3465 = _3463 * _3458;
                                float _3466 = _3463 * _3459;
                                float _3470 = 1.0 - (_3460 / (_3326 * _3326));
                                float _4630 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3475 = sqrt(_3460) * _3341.w;
                                float _3477 = 1.39999997615814208984375 / (_3475 + 1.39999997615814208984375);
                                float _3478 = _3477 * _3477;
                                float _3481 = ((1.0 - _3478) * dot(vec3(_3464, _3465, _3466), vec3(_856, _859, _862))) + _3478;
                                float _3484 = _3475 * _3475;
                                float _3488 = (fma(_2645, _3368.z, fma(_2644, _3368.y, _3368.x * _2643)) + _3368.w) / _3429;
                                float _3489 = (fma(_2645, _3383.z, fma(_2644, _3383.y, _3383.x * _2643)) + _3383.w) / _3429;
                                float _3493 = 1.0 - dot(vec2(_3488, _3489), vec2(_3488, _3489));
                                float _4646 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3495 = _3494 * (((isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0))) * _3471) / ((_3484 * 0.699999988079071044921875) + 1.0));
                                float _3507 = exp2(log2(1.0 / ((_3484 * 3.5) + 5.0)) * 0.25);
                                float _3508 = 1.0 - _931;
                                float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                                float _3516 = _3515 * _3515;
                                float _3517 = _3516 * _3516;
                                float _3518 = _3464 - _2937;
                                float _3519 = _3465 - _2938;
                                float _3520 = _3466 - _2939;
                                float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                                float _3528 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2937, (-0.0) - _2938, (-0.0) - _2939));
                                float _4657 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3532 = dot(vec3(_856, _859, _862), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                                float _4668 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                                float _3540 = _3477 * _3516;
                                float _3541 = _3540 * _3540;
                                float _3547 = ((1.0 - _3541) * dot(vec3(_856, _859, _862), vec3(_3464, _3465, _3466))) + _3541;
                                float _4679 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3549 = 1.0 - _3516;
                                float _3559 = (0.5 / (((_3548 * ((_3531 * _3549) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3516) * _3531))) * _3548;
                                float _4690 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3569 = (_3494 * _3471) * (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3539 * _3539) * ((_3484 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3495 * _3341.y;
                                frontier_phi_83_pred_1 = _3495 * _3341.x;
                                frontier_phi_83_pred_2 = _3569 * _3353.z;
                                frontier_phi_83_pred_3 = _3569 * _3353.y;
                                frontier_phi_83_pred_4 = _3569 * _3353.x;
                                frontier_phi_83_pred_5 = _3495 * _3341.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3577 = frontier_phi_83_pred;
                            _3576 = frontier_phi_83_pred_1;
                            _3575 = frontier_phi_83_pred_2;
                            _3574 = frontier_phi_83_pred_3;
                            _3573 = frontier_phi_83_pred_4;
                            _3578 = frontier_phi_83_pred_5;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            if (_3300 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3300;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3285;
                        frontier_phi_77_pred_1 = _3284;
                        frontier_phi_77_pred_2 = _3283;
                        frontier_phi_77_pred_3 = _3282;
                        frontier_phi_77_pred_4 = _3281;
                        frontier_phi_77_pred_5 = _3280;
                    }
                    _2922 = frontier_phi_77_pred;
                    _2920 = frontier_phi_77_pred_1;
                    _2918 = frontier_phi_77_pred_2;
                    _2916 = frontier_phi_77_pred_3;
                    _2914 = frontier_phi_77_pred_4;
                    _2912 = frontier_phi_77_pred_5;
                    uint _3078 = _3077 + 1u;
                    if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3071 = _2912;
                        _3072 = _2914;
                        _3073 = _2916;
                        _3074 = _2918;
                        _3075 = _2920;
                        _3076 = _2922;
                        _3077 = _3078;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2916;
                frontier_phi_58_59_ladder_1 = _2922;
                frontier_phi_58_59_ladder_2 = _2920;
                frontier_phi_58_59_ladder_3 = _2918;
                frontier_phi_58_59_ladder_4 = _2914;
                frontier_phi_58_59_ladder_5 = _2912;
            }
            else
            {
                frontier_phi_58_59_ladder = _2794;
                frontier_phi_58_59_ladder_1 = _2800;
                frontier_phi_58_59_ladder_2 = _2798;
                frontier_phi_58_59_ladder_3 = _2796;
                frontier_phi_58_59_ladder_4 = _2792;
                frontier_phi_58_59_ladder_5 = _2790;
            }
            _2911 = frontier_phi_58_59_ladder_5;
            _2913 = frontier_phi_58_59_ladder_4;
            _2915 = frontier_phi_58_59_ladder;
            _2917 = frontier_phi_58_59_ladder_3;
            _2919 = frontier_phi_58_59_ladder_2;
            _2921 = frontier_phi_58_59_ladder_1;
        }
        float _2926 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
        _2702 = (_2926 * _2917) + _2135;
        _2704 = (_2926 * _2919) + _2137;
        _2706 = (_2926 * _2921) + _2139;
        _2708 = ((_2911 * _899) * _2926) + _2483;
        _2710 = ((_2913 * _901) * _2926) + _2485;
        _2712 = ((_2915 * _902) * _2926) + _2487;
    }
    else
    {
        _2702 = _2135;
        _2704 = _2137;
        _2706 = _2139;
        _2708 = _2483;
        _2710 = _2485;
        _2712 = _2487;
    }
    float _4706 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4717 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4728 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2729 = ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2702 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _915))) + ((_2708 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _2730 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2704 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _915))) + ((_2710 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _2731 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2706 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _915))) + ((_2712 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    uint _2732 = _274 + 6u;
    float _2740 = _837 / cbSceneParam._m0[86u].x;
    float _2741 = _838 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _2815 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _2816 = _2815 / _759;
        float _2827 = _2816 * _810;
        float _2828 = _811 * _2816;
        float _2829 = (-0.0) - _2828;
        float _2831 = _2816 * _812;
        float _2833 = (cbSceneParam._m0[77u].w * _2829) / _2815;
        float _2834 = _2833 + cbSceneParam._m0[79u].w;
        float _2835 = cbSceneParam._m0[79u].w - _2828;
        float _2841 = sqrt(((_2827 * _2827) + (_2828 * _2828)) + (_2831 * _2831));
        float _2844 = (1.0 - (cbSceneParam._m0[77u].w / _2815)) * _2841;
        float _2849 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2851 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3028;
        if (abs((_2829 - _2833) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3028 = ((((_2834 > 0.0) ? exp2(_2849 * _2834) : (2.0 - exp2(_2851 * _2834))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2844;
        }
        else
        {
            float _2972 = 1.0 / cbSceneParam._m0[80u].x;
            float _2973 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : max(_2834, _2835));
            float _2974 = isnan(_2835) ? _2834 : (isnan(_2834) ? _2835 : min(_2834, _2835));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            _3028 = ((abs(_2841 / _2829) * cbSceneParam._m0[80u].y) * ((((_2983 - _2984) * 2.0) - ((exp2(_2849 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0)))) - exp2(_2849 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))))) * _2972)) - ((exp2(_2851 * _2983) - exp2(_2851 * _2984)) * _2972))) + (_2844 * cbSceneParam._m0[80u].z);
        }
        vec4 _3030 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3039 = exp2((_3028 * (-1.44269502162933349609375)) * (1.0 - _3030.w));
        float _3040 = log2(_3039);
        float _3056 = log2(_2760);
        _2853 = (exp2(_3056 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].x)) * _3030.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2855 = (exp2(_3056 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].y)) * _3030.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2857 = (exp2(_3056 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].z)) * _3030.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2859 = _3039 * _2760;
    }
    else
    {
        _2853 = _2757;
        _2855 = _2758;
        _2857 = _2759;
        _2859 = _2760;
    }
    bool _3066;
    vec4 _2869;
    vec4 _2891;
    float _2893;
    float _2897;
    float _2898;
    float _2899;
    float _2900;
    bool _2910;
    for (;;)
    {
        _2869 = cbMatDynParam._m0[0u];
        float _2871 = roundEven(_2869.y);
        bool _2872 = _2871 == 3.0;
        float _2873 = log2(_2859);
        float _2880 = exp2(_2873 * cbSceneParam._m0[78u].x) * _2729;
        float _2881 = exp2(_2873 * cbSceneParam._m0[78u].y) * _2730;
        float _2882 = exp2(_2873 * cbSceneParam._m0[78u].z) * _2731;
        float _2889 = _826 + (-0.5);
        _2891 = cbMtdParam._m0[1u];
        _2893 = _2891.y * _2889;
        float _2896 = (_2871 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2897 = _2896 * (_2872 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2853)));
        _2898 = _2896 * (_2872 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2855)));
        _2899 = _2896 * (_2872 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2857)));
        _2900 = _2889 * 0.999000012874603271484375;
        _2910 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2910)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _2900) < 0.5)
            {
                _3066 = true;
                break;
            }
        }
        uint _3007 = _875 + uint(_2869.w);
        if ((cbInstanceData._m0[_3007].w < 1.0) && ((cbInstanceData._m0[_3007].w + _2900) < 0.5))
        {
            _3066 = true;
            break;
        }
        if ((_2893 + 1.0) < _2891.x)
        {
            _3066 = true;
            break;
        }
        _3066 = false;
        break;
    }
    float _3271;
    if (_3066)
    {
        discard_state = true;
        _3271 = 0.0;
    }
    else
    {
        _3271 = cbInstanceData._m0[_2732].w;
    }
    SV_Target.x = _2897;
    SV_Target.y = _2898;
    SV_Target.z = _2899;
    SV_Target.w = _3271;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2732].w;
    discard_exit();
}


