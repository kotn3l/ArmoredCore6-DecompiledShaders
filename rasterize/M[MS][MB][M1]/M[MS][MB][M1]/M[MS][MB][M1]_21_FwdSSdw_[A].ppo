#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1043;
float _3451;
float _3452;
float _3453;
float _3454;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _294 = _290.z;
    float _299 = (_290.x * 2.0) + (-1.0);
    float _301 = (_290.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3463 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))));
    float _311 = fma(_308, _212, fma(_301, _219, _299 * _205));
    float _314 = fma(_308, _213, fma(_301, _220, _299 * _206));
    float _317 = fma(_308, _214, fma(_301, _221, _299 * _207));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _359 = _357.x;
    float _360 = 1.0 - _359;
    float _369 = (cbMtdParam._m0[19u].x + dot(vec4(_321 * _311, _321 * _314, _321 * _317, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_359 - _360) * cbMtdParam._m0[24u].z) + _360) * cbMtdParam._m0[21u].z);
    float _3474 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _377 = (_370 * (cbMtdParam._m0[17u].x - _270)) + _270;
    float _378 = (_370 * (cbMtdParam._m0[17u].y - _271)) + _271;
    float _379 = (_370 * (cbMtdParam._m0[17u].z - _272)) + _272;
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _394 = _392.x;
    float _396 = _394 - (_394 * _370);
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3485 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _426 = ((_409.z - _294) * _370) + _294;
    float _436 = ((sqrt(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) - _308) * _370) + _308;
    float _439 = (((_416 - _299) * _370) + _299) + (cbMtdParam._m0[21u].x * _299);
    float _440 = (((_417 - _301) * _370) + _301) + (cbMtdParam._m0[21u].x * _301);
    float _445 = cbMtdParam._m0[22u].x + _290.w;
    float _448 = fma(_436, _212, fma(_440, _219, _439 * _205));
    float _451 = fma(_436, _213, fma(_440, _220, _439 * _206));
    float _454 = fma(_436, _214, fma(_440, _221, _439 * _207));
    float _458 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _459 = _458 * _448;
    float _460 = _458 * _451;
    float _461 = _458 * _454;
    float _3496 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _462 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3518 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3529 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3540 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3551 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _467 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _481 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _522);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _522);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _522);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    vec4 _546 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _548 = _546.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _723 = sqrt(((_532 * _532) + (_533 * _533)) + (_534 * _534));
        float _729 = (cbMatDynParam._m0[5u].x * _723) + cbMatDynParam._m0[5u].y;
        float _3562 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _734 = (cbMatDynParam._m0[5u].z * _723) + cbMatDynParam._m0[5u].w;
        float _3573 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) - _730)) + _730) < ((_548 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _581 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _584 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _587 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _600 = _224 + 9u;
    uint _601 = _600 + uint(cbMatDynParam._m0[0u].w);
    float _607 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_601].x;
    float _608 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_601].y;
    float _609 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_601].z;
    float _3584 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _613 = 1.0 - _467;
    float _614 = _610 * _613;
    float _615 = _611 * _613;
    float _616 = _612 * _613;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _467;
    float _622 = (_611 + (-0.039999999105930328369140625)) * _467;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _467;
    float _624 = _621 + 0.039999999105930328369140625;
    float _626 = _622 + 0.039999999105930328369140625;
    float _627 = _623 + 0.039999999105930328369140625;
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _640 = ((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * TEXCOORD_5.w) * _636.x;
    float _641 = dot(vec3(_459, _460, _461), vec3(_539, _540, _541));
    float _644 = _641 * 2.0;
    float _648 = (_644 * _459) - _539;
    float _649 = (_644 * _460) - _540;
    float _650 = (_644 * _461) - _541;
    float _654 = abs(dot(vec3(_539, _540, _541), vec3(_459, _460, _461)));
    float _3617 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _656 = sqrt(_462);
    float _669 = exp2((_656 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_656 * 3.0));
    float _675 = (1.0 - _669) * ((_656 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _676 = _669 * _656;
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_712, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704));
        float _771 = fma(_712, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704));
        float _775 = fma(_712, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704));
        float _800 = _704 + _459;
        float _801 = _708 + _460;
        float _802 = _712 + _461;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_459, _460, _461), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3665 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_459, _460, _461), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3698 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_459, _460, _461), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3731 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_712, cbModelParam._m0[30u].z, fma(_708, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _704));
        float _1089 = fma(_712, cbModelParam._m0[31u].z, fma(_708, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _704));
        float _1093 = fma(_712, cbModelParam._m0[32u].z, fma(_708, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _704));
        float _1116 = _704 + _459;
        float _1117 = _708 + _460;
        float _1118 = _712 + _461;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_459, _460, _461), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3794 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_459, _460, _461), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3827 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_459, _460, _461), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3860 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = _1043;
        _1365 = _1043;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1055)) + _1055;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1056)) + _1056;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1057)) + _1057;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _648 * 0.5;
    float _1423 = _649 * 0.5;
    float _1424 = _650 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1539 = fma(_712, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704)) + cbModelParam._m0[13u].w;
        float _1543 = fma(_712, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704)) + cbModelParam._m0[14u].w;
        float _1547 = fma(_712, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704)) + cbModelParam._m0[15u].w;
        float _1550 = fma(_650, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648));
        float _1553 = fma(_650, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648));
        float _1556 = fma(_650, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648));
        float _1584;
        if (_1550 > 0.0)
        {
            _1584 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1584 = frontier_phi_17_15_ladder;
        }
        float _1809;
        if (_1553 > 0.0)
        {
            _1809 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1809 = frontier_phi_26_22_ladder;
        }
        float _2066;
        if (_1556 > 0.0)
        {
            _2066 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2066 = frontier_phi_38_33_ladder;
        }
        float _2068 = isnan(_1809) ? _1584 : (isnan(_1584) ? _1809 : min(_1584, _1809));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1550) + _1539;
        float _2074 = (_2069 * _1553) + _1543;
        float _2075 = (_2069 * _1556) + _1547;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2076;
        float _2080 = _2076 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 > _2080) || ((_2074 < _2078) || ((_2073 < _2078) || (_2073 > _2080))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2203 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2075, cbModelParam._m0[9u].z, fma(_2074, cbModelParam._m0[9u].y, _2073 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2075, cbModelParam._m0[10u].z, fma(_2074, cbModelParam._m0[10u].y, _2073 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2075, cbModelParam._m0[11u].z, fma(_2074, cbModelParam._m0[11u].y, _2073 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_16_38_ladder = _2203.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2203.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2203.x * cbModelParam._m0[1u].y;
        }
        _1572 = frontier_phi_16_38_ladder_2;
        _1574 = frontier_phi_16_38_ladder_1;
        _1576 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_648, _649, _650), _1491);
        _1572 = _1560.x * cbModelParam._m0[1u].y;
        _1574 = _1560.y * cbModelParam._m0[1u].y;
        _1576 = _1560.z * cbModelParam._m0[1u].y;
    }
    float _1580 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1580 : min(cbModelParam._m0[25u].w, _1580));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1635 = fma(_712, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704)) + cbModelParam._m0[21u].w;
        float _1639 = fma(_712, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704)) + cbModelParam._m0[22u].w;
        float _1643 = fma(_712, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704)) + cbModelParam._m0[23u].w;
        float _1646 = fma(_650, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648));
        float _1649 = fma(_650, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648));
        float _1652 = fma(_650, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648));
        float _1814;
        if (_1646 > 0.0)
        {
            _1814 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1814 = frontier_phi_28_24_ladder;
        }
        float _2093;
        if (_1649 > 0.0)
        {
            _2093 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2093 = frontier_phi_40_35_ladder;
        }
        float _2306;
        if (_1652 > 0.0)
        {
            _2306 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2306 = frontier_phi_49_46_ladder;
        }
        float _2308 = isnan(_2093) ? _1814 : (isnan(_1814) ? _2093 : min(_1814, _2093));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1646) + _1635;
        float _2314 = (_2309 * _1649) + _1639;
        float _2315 = (_2309 * _1652) + _1643;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1581);
            frontier_phi_25_49_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1671 = frontier_phi_25_49_ladder_2;
        _1673 = frontier_phi_25_49_ladder_1;
        _1675 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_648, _649, _650), _1581);
        _1671 = _1655.x * cbModelParam._m0[1u].z;
        _1673 = _1655.y * cbModelParam._m0[1u].z;
        _1675 = _1655.z * cbModelParam._m0[1u].z;
    }
    float _1688 = (((_675 * _624) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1671 - _1572)) + _1572);
    float _1690 = (((_675 * _626) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1673 - _1574)) + _1574);
    float _1692 = (((_675 * _627) + _676) * _640) * ((cbModelParam._m0[1u].w * (_1675 - _1576)) + _1576);
    float _1695 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1688 * cbSceneParam._m0[91u].x));
    vec4 _1709 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_560, _561));
    float _1711 = _1709.w;
    float _1723 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1711);
    float _1724 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1711);
    float _1725 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1711);
    uvec4 _1729 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1731 = _1729.x * 14u;
    uint _1732 = _1731 + 13u;
    float _1739 = _640 + (-1.0);
    float _1744 = (cbLight._m0[_1732].x * _1739) + 1.0;
    float _1745 = (cbLight._m0[_1732].y * _1739) + 1.0;
    float _1746 = (cbLight._m0[_1732].z * _1739) + 1.0;
    float _1747 = (cbLight._m0[_1732].w * _1739) + 1.0;
    uint _1748 = _1731 + 5u;
    float _1754 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1758 = _1731 + 4u;
    float _1768 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1772 = _1731 | 1u;
    float _1783 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_459, _460, _461));
    float _1786 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_459, _460, _461));
    float _3996 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _4007 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1791 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.3183098733425140380859375;
    float _1793 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.3183098733425140380859375;
    float _1800 = ((cbLight._m0[_1748].x * _1754) * _1793) + (((cbLight._m0[_1758].x * _1723) * _1768) * _1791);
    float _1801 = ((_1754 * cbLight._m0[_1748].y) * _1793) + (((cbLight._m0[_1758].y * _1724) * _1768) * _1791);
    float _1802 = ((_1754 * cbLight._m0[_1748].z) * _1793) + (((cbLight._m0[_1758].z * _1725) * _1768) * _1791);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1731 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1800;
        _1821 = _1801;
        _1823 = _1802;
    }
    else
    {
        uint _1827 = _1731 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1731 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _4018 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1846 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1802;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2037 = _1731 + 7u;
        float _2053 = (dot(vec3(cbLight._m0[_1731 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _4034 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2056 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1864 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _1819;
        _1866 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _1821;
        _1868 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _1823;
    }
    uint _1871 = _1731 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1731].w)) * _462) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1731].x + _539;
    float _1887 = cbLight._m0[_1731].y + _540;
    float _1888 = cbLight._m0[_1731].z + _541;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1731].xyz));
    float _4050 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _1900 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1901 = dot(vec3(_459, _460, _461), vec3(_1893, _1894, _1895));
    float _4072 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_1893, _1894, _1895));
    float _4083 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1921 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
    float _1922 = 0.959999978542327880859375 - _621;
    float _1924 = 0.959999978542327880859375 - _622;
    float _1925 = 0.959999978542327880859375 - _623;
    float _1932 = 1.0 - _1885;
    float _1943 = (0.5 / (((_1900 * ((_1899 * _1932) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1932) + _1885) * _1899))) * _1899;
    float _4094 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1959 = _1731 + 9u;
    float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _462) * 0.949999988079071044921875);
    float _1971 = _1970 * _1970;
    float _1972 = cbLight._m0[_1772].x + _539;
    float _1973 = cbLight._m0[_1772].y + _540;
    float _1974 = cbLight._m0[_1772].z + _541;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1979 = _1978 * _1972;
    float _1980 = _1978 * _1973;
    float _1981 = _1978 * _1974;
    float _1982 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1772].xyz));
    float _4105 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1986 = dot(vec3(_459, _460, _461), vec3(_1979, _1980, _1981));
    float _4116 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1979, _1980, _1981));
    float _4127 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1971 * _1971;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
    float _2012 = 1.0 - _1971;
    float _2022 = (0.5 / (((_1900 * ((_1985 * _2012) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2012) + _1971) * _1985))) * _1985;
    float _4138 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2024 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    float _2034 = (((((_2005 * _1922) + _624) * cbLight._m0[_1959].x) * _2024) * _1754) + ((((cbLight._m0[_1871].x * _1723) * ((_1921 * _1922) + _624)) * _1945) * _1768);
    float _2035 = (((((_2005 * _1924) + _626) * cbLight._m0[_1959].y) * _2024) * _1754) + ((((cbLight._m0[_1871].y * _1724) * ((_1921 * _1924) + _626)) * _1945) * _1768);
    float _2036 = (((((_2005 * _1925) + _627) * cbLight._m0[_1959].z) * _2024) * _1754) + ((((cbLight._m0[_1871].z * _1725) * ((_1921 * _1925) + _627)) * _1945) * _1768);
    float _2098;
    float _2100;
    float _2102;
    if (_1808)
    {
        _2098 = _2034;
        _2100 = _2035;
        _2102 = _2036;
    }
    else
    {
        uint _2104 = _1731 + 2u;
        uint _2108 = _1731 + 10u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _462) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _539;
        float _2125 = cbLight._m0[_2104].y + _540;
        float _2126 = cbLight._m0[_2104].z + _541;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2104].xyz));
        float _4149 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2138 = dot(vec3(_459, _460, _461), vec3(_2131, _2132, _2133));
        float _4160 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4171 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
        float _2164 = 1.0 - _2123;
        float _2174 = (0.5 / (((_1900 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2164) + _2123) * _2137))) * _2137;
        float _4182 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2098 = (((((_2157 * _1922) + _624) * cbLight._m0[_2108].x) * _2176) * _2177) + _2034;
        _2100 = (((((_2157 * _1924) + _626) * cbLight._m0[_2108].y) * _2176) * _2177) + _2035;
        _2102 = (((((_2157 * _1925) + _627) * cbLight._m0[_2108].z) * _2176) * _2177) + _2036;
    }
    float _2212;
    float _2214;
    float _2216;
    if (_1826)
    {
        _2212 = _2098;
        _2214 = _2100;
        _2216 = _2102;
    }
    else
    {
        uint _2223 = _1731 + 3u;
        uint _2227 = _1731 + 11u;
        float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _462) * 0.949999988079071044921875);
        float _2242 = _2241 * _2241;
        float _2243 = cbLight._m0[_2223].x + _539;
        float _2244 = cbLight._m0[_2223].y + _540;
        float _2245 = cbLight._m0[_2223].z + _541;
        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
        float _2250 = _2249 * _2243;
        float _2251 = _2249 * _2244;
        float _2252 = _2249 * _2245;
        float _2253 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2223].xyz));
        float _4198 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2257 = dot(vec3(_459, _460, _461), vec3(_2250, _2251, _2252));
        float _4209 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2261 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2250, _2251, _2252));
        float _4220 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2265 = _2242 * _2242;
        float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
        float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0);
        float _2283 = 1.0 - _2242;
        float _2293 = (0.5 / (((_1900 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2283) + _2242) * _2256))) * _2256;
        float _4231 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2212 = (((((_2276 * _1922) + _624) * cbLight._m0[_2227].x) * _2295) * _2296) + _2098;
        _2214 = (((((_2276 * _1924) + _626) * cbLight._m0[_2227].y) * _2295) * _2296) + _2100;
        _2216 = (((((_2276 * _1925) + _627) * cbLight._m0[_2227].z) * _2295) * _2296) + _2102;
    }
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_1729.y == 0u)
    {
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2371;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2371;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2371;
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.x;
        uint _2398 = uint((float(_2386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2387))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2387)));
        float _2408 = (log2(_2374 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2409 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        uint _2412 = uint(isnan(14.0) ? _2409 : (isnan(_2409) ? 14.0 : min(_2409, 14.0)));
        uvec4 _2417 = texelFetch(g_lightClusterGridBuffer, int(((_2412 << 2u) + (_2398 << 6u)) >> 2u));
        uint _2418 = _2417.x;
        uint _2419 = _2386.z;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((((1u << ((_2419 >> 4u) & 15u)) + 4294967295u) & _2418) == 0u) || ((_2419 & 240u) == 0u))
        {
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
        }
        else
        {
            float _2520;
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            uint _2678 = 0u;
            uint _2687;
            bool _2688;
            for (;;)
            {
                _2687 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                _2688 = _2687 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2688)
                {
                    frontier_phi_66_pred = _2672;
                    frontier_phi_66_pred_1 = _2677;
                    frontier_phi_66_pred_2 = _2676;
                    frontier_phi_66_pred_3 = _2675;
                    frontier_phi_66_pred_4 = _2674;
                    frontier_phi_66_pred_5 = _2673;
                }
                else
                {
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    uint _2823;
                    _2817 = _2672;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2687;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    for (;;)
                    {
                        uint _2827 = uint(findLSB(_2823)) + (_2678 << 5u);
                        uint _2824 = (_2823 + 4294967295u) & _2823;
                        uint _2829 = _2827 * 48u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2849 = (_2827 * 48u) + 4u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2868 = (_2827 * 48u) + 8u;
                        vec3 _2879 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x));
                        float _2883 = _2843.x - _2372;
                        float _2884 = _2843.y - _2373;
                        float _2885 = _2843.z - _2374;
                        float _2886 = dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885));
                        float _2889 = inversesqrt(_2886);
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2893 = dot(vec3(_581, _584, _587), vec3(_2890, _2891, _2892));
                        float _2898 = 1.0 - (_2886 * _2843.w);
                        float _4257 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2899 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2900 = sqrt(_2886) * _2862.w;
                        float _2903 = 1.39999997615814208984375 / (_2900 + 1.39999997615814208984375);
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2893) + _2904;
                        float _2910 = _2900 * _2900;
                        float _2914 = ((isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))) * _2899) / ((_2910 * 0.699999988079071044921875) + 1.0);
                        float _2918 = (-0.0) - _2372;
                        float _2919 = (-0.0) - _2373;
                        float _2920 = (-0.0) - _2374;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2935 = exp2(log2(1.0 / ((_2910 * 3.5) + 5.0)) * 0.25);
                        float _2936 = 1.0 - _656;
                        float _2943 = sqrt(1.0 - ((1.0 - (_2936 * _2936)) * (1.0 - (_2935 * _2935))));
                        float _2944 = _2943 * _2943;
                        float _2945 = _2944 * _2944;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2956 = dot(vec3(_581, _584, _587), vec3(_2925, _2926, _2927));
                        float _4273 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2960 = dot(vec3(_581, _584, _587), vec3(_2952 * _2946, _2952 * _2947, _2952 * _2948));
                        float _4284 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2967 = ((_2963 * _2963) * (_2945 + (-1.0))) + 1.0;
                        float _2968 = _2903 * _2944;
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2893) + _2969;
                        float _4295 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2974 = 1.0 - _2944;
                        float _2984 = (0.5 / (((_2973 * ((_2959 * _2974) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2973 * _2974) + _2944) * _2959))) * _2973;
                        float _4306 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2995 = (((_2945 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_2967 * _2967) * ((_2910 * 2.1991131305694580078125) + 3.141590118408203125))) * _2899;
                        _2747 = (_2914 * _2862.x) + _2820;
                        _2748 = (_2914 * _2862.y) + _2821;
                        _2749 = (_2914 * _2862.z) + _2822;
                        _2744 = (_2995 * _2879.x) + _2817;
                        _2745 = (_2995 * _2879.y) + _2818;
                        _2746 = (_2995 * _2879.z) + _2819;
                        if (_2824 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2817 = _2744;
                            _2818 = _2745;
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2824;
                        }
                    }
                    frontier_phi_66_pred = _2744;
                    frontier_phi_66_pred_1 = _2749;
                    frontier_phi_66_pred_2 = _2748;
                    frontier_phi_66_pred_3 = _2747;
                    frontier_phi_66_pred_4 = _2746;
                    frontier_phi_66_pred_5 = _2745;
                }
                _2520 = frontier_phi_66_pred;
                _2530 = frontier_phi_66_pred_1;
                _2528 = frontier_phi_66_pred_2;
                _2526 = frontier_phi_66_pred_3;
                _2524 = frontier_phi_66_pred_4;
                _2522 = frontier_phi_66_pred_5;
                uint _2679 = _2678 + 1u;
                if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2672 = _2520;
                    _2673 = _2522;
                    _2674 = _2524;
                    _2675 = _2526;
                    _2676 = _2528;
                    _2677 = _2530;
                    _2678 = _2679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
        }
        uvec4 _2533 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2534 = _2533.z;
        uint _2536 = (_2534 >> 8u) & 15u;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((4294967295u << _2536) & _2418) == 0u)
        {
            _2640 = _2519;
            _2642 = _2521;
            _2644 = _2523;
            _2646 = _2525;
            _2648 = _2527;
            _2650 = _2529;
        }
        else
        {
            float _2665 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
            float _2666 = _2665 * _2372;
            float _2667 = _2665 * _2373;
            float _2668 = _2665 * _2374;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2536 < ((_2534 >> 12u) & 15u))
            {
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2800 = _2519;
                float _2801 = _2521;
                float _2802 = _2523;
                float _2803 = _2525;
                float _2804 = _2527;
                float _2805 = _2529;
                uint _2806 = _2536;
                uint _2815;
                bool _2816;
                for (;;)
                {
                    _2815 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                    _2816 = _2815 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2816)
                    {
                        frontier_phi_77_pred = _2805;
                        frontier_phi_77_pred_1 = _2804;
                        frontier_phi_77_pred_2 = _2803;
                        frontier_phi_77_pred_3 = _2802;
                        frontier_phi_77_pred_4 = _2801;
                        frontier_phi_77_pred_5 = _2800;
                    }
                    else
                    {
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3022 = _2800;
                        float _3023 = _2801;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        uint _3028 = _2815;
                        uint _3029;
                        vec4 _3054;
                        float _3055;
                        vec4 _3070;
                        vec3 _3082;
                        vec4 _3098;
                        vec4 _3114;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3039 = ((_2806 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3028));
                            _3029 = (_3028 + 4294967295u) & _3028;
                            uint _3041 = _3039 * 40u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3055 = _3054.w;
                            uint _3057 = (_3039 * 40u) + 4u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_3039 * 40u) + 8u;
                            _3082 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x));
                            uint _3085 = (_3039 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3101 = (_3039 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3039 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3039 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_2374, _3148.z, fma(_2373, _3148.y, _3148.x * _2372)) + _3148.w;
                            _3161 = !((fma(_2374, _3129.z, fma(_2373, _3129.y, _3129.x * _2372)) + _3129.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3161)
                            {
                                float _3188 = _3054.x - _2372;
                                float _3189 = _3054.y - _2373;
                                float _3190 = _3054.z - _2374;
                                float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                                float _3194 = inversesqrt(_3191);
                                float _3195 = _3194 * _3188;
                                float _3196 = _3194 * _3189;
                                float _3197 = _3194 * _3190;
                                float _3201 = 1.0 - (_3191 / (_3055 * _3055));
                                float _4317 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3206 = sqrt(_3191) * _3070.w;
                                float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                                float _3209 = _3208 * _3208;
                                float _3212 = ((1.0 - _3209) * dot(vec3(_3195, _3196, _3197), vec3(_581, _584, _587))) + _3209;
                                float _3215 = _3206 * _3206;
                                float _3219 = (fma(_2374, _3098.z, fma(_2373, _3098.y, _3098.x * _2372)) + _3098.w) / _3160;
                                float _3220 = (fma(_2374, _3114.z, fma(_2373, _3114.y, _3114.x * _2372)) + _3114.w) / _3160;
                                float _3224 = 1.0 - dot(vec2(_3219, _3220), vec2(_3219, _3220));
                                float _4333 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3226 = _3225 * (((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3202) / ((_3215 * 0.699999988079071044921875) + 1.0));
                                float _3238 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3239 = 1.0 - _656;
                                float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                                float _3247 = _3246 * _3246;
                                float _3248 = _3247 * _3247;
                                float _3249 = _3195 - _2666;
                                float _3250 = _3196 - _2667;
                                float _3251 = _3197 - _2668;
                                float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                                float _3259 = dot(vec3(_581, _584, _587), vec3((-0.0) - _2666, (-0.0) - _2667, (-0.0) - _2668));
                                float _4344 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3263 = dot(vec3(_581, _584, _587), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                                float _4355 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                                float _3271 = _3208 * _3247;
                                float _3272 = _3271 * _3271;
                                float _3278 = ((1.0 - _3272) * dot(vec3(_581, _584, _587), vec3(_3195, _3196, _3197))) + _3272;
                                float _4366 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3280 = 1.0 - _3247;
                                float _3290 = (0.5 / (((_3279 * ((_3262 * _3280) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3247) * _3262))) * _3279;
                                float _4377 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3300 = (_3225 * _3202) * (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3270 * _3270) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3226 * _3070.y;
                                frontier_phi_83_pred_1 = _3226 * _3070.x;
                                frontier_phi_83_pred_2 = _3300 * _3082.z;
                                frontier_phi_83_pred_3 = _3300 * _3082.y;
                                frontier_phi_83_pred_4 = _3300 * _3082.x;
                                frontier_phi_83_pred_5 = _3226 * _3070.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3308 = frontier_phi_83_pred;
                            _3307 = frontier_phi_83_pred_1;
                            _3306 = frontier_phi_83_pred_2;
                            _3305 = frontier_phi_83_pred_3;
                            _3304 = frontier_phi_83_pred_4;
                            _3309 = frontier_phi_83_pred_5;
                            _3012 = _3307 + _3025;
                            _3013 = _3308 + _3026;
                            _3014 = _3309 + _3027;
                            _3009 = _3304 + _3022;
                            _3010 = _3305 + _3023;
                            _3011 = _3306 + _3024;
                            if (_3029 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3029;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3014;
                        frontier_phi_77_pred_1 = _3013;
                        frontier_phi_77_pred_2 = _3012;
                        frontier_phi_77_pred_3 = _3011;
                        frontier_phi_77_pred_4 = _3010;
                        frontier_phi_77_pred_5 = _3009;
                    }
                    _2651 = frontier_phi_77_pred;
                    _2649 = frontier_phi_77_pred_1;
                    _2647 = frontier_phi_77_pred_2;
                    _2645 = frontier_phi_77_pred_3;
                    _2643 = frontier_phi_77_pred_4;
                    _2641 = frontier_phi_77_pred_5;
                    uint _2807 = _2806 + 1u;
                    if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2800 = _2641;
                        _2801 = _2643;
                        _2802 = _2645;
                        _2803 = _2647;
                        _2804 = _2649;
                        _2805 = _2651;
                        _2806 = _2807;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2645;
                frontier_phi_58_59_ladder_1 = _2651;
                frontier_phi_58_59_ladder_2 = _2649;
                frontier_phi_58_59_ladder_3 = _2647;
                frontier_phi_58_59_ladder_4 = _2643;
                frontier_phi_58_59_ladder_5 = _2641;
            }
            else
            {
                frontier_phi_58_59_ladder = _2523;
                frontier_phi_58_59_ladder_1 = _2529;
                frontier_phi_58_59_ladder_2 = _2527;
                frontier_phi_58_59_ladder_3 = _2525;
                frontier_phi_58_59_ladder_4 = _2521;
                frontier_phi_58_59_ladder_5 = _2519;
            }
            _2640 = frontier_phi_58_59_ladder_5;
            _2642 = frontier_phi_58_59_ladder_4;
            _2644 = frontier_phi_58_59_ladder;
            _2646 = frontier_phi_58_59_ladder_3;
            _2648 = frontier_phi_58_59_ladder_2;
            _2650 = frontier_phi_58_59_ladder_1;
        }
        float _2655 = isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0));
        _2431 = (_2655 * _2646) + _1864;
        _2433 = (_2655 * _2648) + _1866;
        _2435 = (_2655 * _2650) + _1868;
        _2437 = ((_2640 * _624) * _2655) + _2212;
        _2439 = ((_2642 * _626) * _2655) + _2214;
        _2441 = ((_2644 * _627) * _2655) + _2216;
    }
    else
    {
        _2431 = _1864;
        _2433 = _1866;
        _2435 = _1868;
        _2437 = _2212;
        _2439 = _2214;
        _2441 = _2216;
    }
    float _4393 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4404 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4415 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2458 = ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2431 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _640))) + ((_2437 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2459 = ((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2433 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _640))) + ((_2439 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2460 = ((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2435 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _640))) + ((_2441 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    uint _2461 = _224 + 6u;
    float _2469 = _560 / cbSceneParam._m0[86u].x;
    float _2470 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2484 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2469, _2470, (log2((isnan(cbSceneParam._m0[77u].w) ? _481 : (isnan(_481) ? cbSceneParam._m0[77u].w : min(_481, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2486 = _2484.x;
    float _2487 = _2484.y;
    float _2488 = _2484.z;
    float _2489 = _2484.w;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_481 > cbSceneParam._m0[78u].w)
    {
        float _2544 = isnan(_481) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _481 : min(cbSceneParam._m0[80u].w, _481));
        float _2545 = _2544 / _481;
        float _2556 = _2545 * _532;
        float _2557 = _533 * _2545;
        float _2558 = (-0.0) - _2557;
        float _2560 = _2545 * _534;
        float _2562 = (cbSceneParam._m0[77u].w * _2558) / _2544;
        float _2563 = _2562 + cbSceneParam._m0[79u].w;
        float _2564 = cbSceneParam._m0[79u].w - _2557;
        float _2570 = sqrt(((_2556 * _2556) + (_2557 * _2557)) + (_2560 * _2560));
        float _2573 = (1.0 - (cbSceneParam._m0[77u].w / _2544)) * _2570;
        float _2578 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2580 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2757;
        if (abs((_2558 - _2562) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2757 = ((((_2563 > 0.0) ? exp2(_2578 * _2563) : (2.0 - exp2(_2580 * _2563))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2573;
        }
        else
        {
            float _2701 = 1.0 / cbSceneParam._m0[80u].x;
            float _2702 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : max(_2563, _2564));
            float _2703 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : min(_2563, _2564));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            _2757 = ((abs(_2570 / _2558) * cbSceneParam._m0[80u].y) * ((((_2712 - _2713) * 2.0) - ((exp2(_2578 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)))) - exp2(_2578 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))))) * _2701)) - ((exp2(_2580 * _2712) - exp2(_2580 * _2713)) * _2701))) + (_2573 * cbSceneParam._m0[80u].z);
        }
        vec4 _2759 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2469, _2470, 1.0), 0.0);
        float _2768 = exp2((_2757 * (-1.44269502162933349609375)) * (1.0 - _2759.w));
        float _2769 = log2(_2768);
        float _2785 = log2(_2489);
        _2582 = (exp2(_2785 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].x)) * _2759.x) / cbSceneParam._m0[78u].x)) + _2486;
        _2584 = (exp2(_2785 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].y)) * _2759.y) / cbSceneParam._m0[78u].y)) + _2487;
        _2586 = (exp2(_2785 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].z)) * _2759.z) / cbSceneParam._m0[78u].z)) + _2488;
        _2588 = _2768 * _2489;
    }
    else
    {
        _2582 = _2486;
        _2584 = _2487;
        _2586 = _2488;
        _2588 = _2489;
    }
    bool _2795;
    vec4 _2598;
    vec4 _2620;
    float _2622;
    float _2626;
    float _2627;
    float _2628;
    float _2629;
    bool _2639;
    for (;;)
    {
        _2598 = cbMatDynParam._m0[0u];
        float _2600 = roundEven(_2598.y);
        bool _2601 = _2600 == 3.0;
        float _2602 = log2(_2588);
        float _2609 = exp2(_2602 * cbSceneParam._m0[78u].x) * _2458;
        float _2610 = exp2(_2602 * cbSceneParam._m0[78u].y) * _2459;
        float _2611 = exp2(_2602 * cbSceneParam._m0[78u].z) * _2460;
        float _2618 = _548 + (-0.5);
        _2620 = cbMtdParam._m0[1u];
        _2622 = _2620.y * _2618;
        float _2625 = (_2600 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2626 = _2625 * (_2601 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2582)));
        _2627 = _2625 * (_2601 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2584)));
        _2628 = _2625 * (_2601 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2586)));
        _2629 = _2618 * 0.999000012874603271484375;
        _2639 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2639)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2629) < 0.5)
            {
                _2795 = true;
                break;
            }
        }
        uint _2736 = _600 + uint(_2598.w);
        if ((cbInstanceData._m0[_2736].w < 1.0) && ((cbInstanceData._m0[_2736].w + _2629) < 0.5))
        {
            _2795 = true;
            break;
        }
        if ((_2622 + 1.0) < _2620.x)
        {
            _2795 = true;
            break;
        }
        _2795 = false;
        break;
    }
    float _3000;
    if (_2795)
    {
        discard_state = true;
        _3000 = 0.0;
    }
    else
    {
        _3000 = cbInstanceData._m0[_2461].w;
    }
    SV_Target.x = _2626;
    SV_Target.y = _2627;
    SV_Target.z = _2628;
    SV_Target.w = _3000;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2461].w;
    discard_exit();
}


