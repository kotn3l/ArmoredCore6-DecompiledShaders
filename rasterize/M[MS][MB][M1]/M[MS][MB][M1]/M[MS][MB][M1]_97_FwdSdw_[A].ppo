#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1257;
float _3921;
float _3922;
float _3923;
float _3924;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3933 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _384) + _459;
    float _471 = ((((_438.x - _457) * _384) + _457) * 2.0) + (-1.0);
    float _472 = ((((_438.y - _458) * _384) + _458) * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3944 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))));
    float _481 = _471 + ((((_411.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _482 = _472 + ((((_411.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _485 = fma(_478, _234, fma(_482, _241, _481 * _227));
    float _488 = fma(_478, _235, fma(_482, _242, _481 * _228));
    float _491 = fma(_478, _236, fma(_482, _243, _481 * _229));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _539 = _537.x;
    float _540 = 1.0 - _539;
    float _546 = (cbMtdParam._m0[19u].x + dot(vec4(_495 * _485, _495 * _488, _495 * _491, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_539 - _540) * cbMtdParam._m0[24u].z) + _540) * cbMtdParam._m0[21u].z);
    float _3955 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _554 = (_547 * (cbMtdParam._m0[17u].x - _391)) + _391;
    float _555 = (_547 * (cbMtdParam._m0[17u].y - _392)) + _392;
    float _556 = (_547 * (cbMtdParam._m0[17u].z - _393)) + _393;
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _584 = _582.x;
    float _602 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _584) * _384) + _584;
    float _606 = ((_568.x - _602) * cbMtdParam._m0[19u].z) + _602;
    float _608 = _606 - (_606 * _547);
    float _613 = (((_411.z - _468) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _468;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _633 = (_626.x * 2.0) + (-1.0);
    float _634 = (_626.y * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3966 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _643 = ((_626.z - _613) * _547) + _613;
    float _653 = ((sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) - _478) * _547) + _478;
    float _656 = (((_633 - _481) * _547) + _481) + (cbMtdParam._m0[21u].x * _481);
    float _657 = (((_634 - _482) * _547) + _482) + (cbMtdParam._m0[21u].x * _482);
    float _662 = cbMtdParam._m0[22u].x + _511.w;
    float _665 = fma(_653, _234, fma(_657, _241, _656 * _227));
    float _668 = fma(_653, _235, fma(_657, _242, _656 * _228));
    float _671 = fma(_653, _236, fma(_657, _243, _656 * _229));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3977 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _679 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3999 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4010 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4021 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4032 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _684 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _749 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _739);
    float _750 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _739);
    float _751 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _739);
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _756 = _749 * _755;
    float _757 = _750 * _755;
    float _758 = _751 * _755;
    vec4 _763 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _765 = _763.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _937 = sqrt(((_749 * _749) + (_750 * _750)) + (_751 * _751));
        float _943 = (cbMatDynParam._m0[5u].x * _937) + cbMatDynParam._m0[5u].y;
        float _4043 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _948 = (cbMatDynParam._m0[5u].z * _937) + cbMatDynParam._m0[5u].w;
        float _4054 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) - _944)) + _944) < ((_765 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _798 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _801 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _814 = _246 + 9u;
    uint _815 = _814 + uint(cbMatDynParam._m0[0u].w);
    float _821 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_815].x;
    float _822 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_815].y;
    float _823 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_815].z;
    float _4065 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _827 = 1.0 - _684;
    float _828 = _824 * _827;
    float _829 = _825 * _827;
    float _830 = _826 * _827;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _684;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _684;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _684;
    float _838 = _835 + 0.039999999105930328369140625;
    float _840 = _836 + 0.039999999105930328369140625;
    float _841 = _837 + 0.039999999105930328369140625;
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _854 = ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_676, _677, _678), vec3(_756, _757, _758));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _676) - _756;
    float _863 = (_858 * _677) - _757;
    float _864 = (_858 * _678) - _758;
    float _868 = abs(dot(vec3(_756, _757, _758), vec3(_676, _677, _678)));
    float _4098 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_679);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _889 = (1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _890 = _883 * _870;
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_926, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918));
        float _985 = fma(_926, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918));
        float _989 = fma(_926, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918));
        float _1014 = _918 + _676;
        float _1015 = _922 + _677;
        float _1016 = _926 + _678;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _981;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _985;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _989;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_676, _677, _678), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _4146 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_676, _677, _678), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4179 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_676, _677, _678), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4212 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_926, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918));
        float _1303 = fma(_926, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918));
        float _1307 = fma(_926, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918));
        float _1330 = _918 + _676;
        float _1331 = _922 + _677;
        float _1332 = _926 + _678;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_676, _677, _678), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4275 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_676, _677, _678), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4308 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_676, _677, _678), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4341 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1257;
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = _1257;
        _1579 = _1257;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1269)) + _1269;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1270)) + _1270;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1271)) + _1271;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _862 * 0.5;
    float _1637 = _863 * 0.5;
    float _1638 = _864 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_926, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_926, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_926, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1767 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1770 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1798 = frontier_phi_17_15_ladder;
        }
        float _1970;
        if (_1767 > 0.0)
        {
            _1970 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1970 = frontier_phi_26_22_ladder;
        }
        float _2265;
        if (_1770 > 0.0)
        {
            _2265 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2265 = frontier_phi_38_33_ladder;
        }
        float _2267 = isnan(_1970) ? _1798 : (isnan(_1798) ? _1970 : min(_1798, _1970));
        float _2268 = isnan(_2265) ? _2267 : (isnan(_2267) ? _2265 : min(_2267, _2265));
        float _2272 = (_2268 * _1764) + _1753;
        float _2273 = (_2268 * _1767) + _1757;
        float _2274 = (_2268 * _1770) + _1761;
        float _2275 = _2268 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2275;
        float _2279 = _2275 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 > _2279) || ((_2273 < _2277) || ((_2272 < _2277) || (_2272 > _2279))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2274, cbModelParam._m0[9u].z, fma(_2273, cbModelParam._m0[9u].y, _2272 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2274, cbModelParam._m0[10u].z, fma(_2273, cbModelParam._m0[10u].y, _2272 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2274, cbModelParam._m0[11u].z, fma(_2273, cbModelParam._m0[11u].y, _2272 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_16_38_ladder = _2419.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2419.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2419.x * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_16_38_ladder_2;
        _1788 = frontier_phi_16_38_ladder_1;
        _1790 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1705);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1849 = fma(_926, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918)) + cbModelParam._m0[21u].w;
        float _1853 = fma(_926, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918)) + cbModelParam._m0[22u].w;
        float _1857 = fma(_926, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918)) + cbModelParam._m0[23u].w;
        float _1860 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1863 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1866 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1975;
        if (_1860 > 0.0)
        {
            _1975 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1975 = frontier_phi_28_24_ladder;
        }
        float _2292;
        if (_1863 > 0.0)
        {
            _2292 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2292 = frontier_phi_40_35_ladder;
        }
        float _2630;
        if (_1866 > 0.0)
        {
            _2630 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2630 = frontier_phi_50_47_ladder;
        }
        float _2632 = isnan(_2292) ? _1975 : (isnan(_1975) ? _2292 : min(_1975, _2292));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _1860) + _1849;
        float _2638 = (_2633 * _1863) + _1853;
        float _2639 = (_2633 * _1866) + _1857;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2640;
        float _2643 = _2640 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2639 > _2643) || ((_2639 < _2641) || ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 < _2641) || (_2637 > _2643))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2639, cbModelParam._m0[17u].z, fma(_2638, cbModelParam._m0[17u].y, _2637 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2639, cbModelParam._m0[18u].z, fma(_2638, cbModelParam._m0[18u].y, _2637 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2639, cbModelParam._m0[19u].z, fma(_2638, cbModelParam._m0[19u].y, _2637 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_25_50_ladder = _2761.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2761.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2761.x * cbModelParam._m0[1u].z;
        }
        _1885 = frontier_phi_25_50_ladder_2;
        _1887 = frontier_phi_25_50_ladder_1;
        _1889 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1795);
        _1885 = _1869.x * cbModelParam._m0[1u].z;
        _1887 = _1869.y * cbModelParam._m0[1u].z;
        _1889 = _1869.z * cbModelParam._m0[1u].z;
    }
    float _1902 = (((_889 * _838) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1885 - _1786)) + _1786);
    float _1904 = (((_889 * _840) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1887 - _1788)) + _1788);
    float _1906 = (((_889 * _841) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1889 - _1790)) + _1790);
    float _1909 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1902 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1902 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1902 * cbSceneParam._m0[91u].x));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1962 = _1949 / _1961;
    float _1963 = _1953 / _1961;
    float _1964 = _1957 / _1961;
    float _2111;
    float _2112;
    float _2113;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1991 = ((uint(_1964 > cbSceneParam._m0[59u].y) + uint(_1964 > cbSceneParam._m0[59u].x)) + uint(_1964 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1992 = _1991 + 43u;
        uint _2000 = _1991 + 44u;
        uint _2008 = _1991 + 45u;
        uint _2016 = _1991 + 46u;
        float _2027 = fma(_1961, cbSceneParam._m0[_1992].w, fma(_1957, cbSceneParam._m0[_1992].z, fma(_1953, cbSceneParam._m0[_1992].y, _1949 * cbSceneParam._m0[_1992].x)));
        float _2031 = fma(_1961, cbSceneParam._m0[_2000].w, fma(_1957, cbSceneParam._m0[_2000].z, fma(_1953, cbSceneParam._m0[_2000].y, _1949 * cbSceneParam._m0[_2000].x)));
        float _2039 = fma(_1961, cbSceneParam._m0[_2016].w, fma(_1957, cbSceneParam._m0[_2016].z, fma(_1953, cbSceneParam._m0[_2016].y, _1949 * cbSceneParam._m0[_2016].x)));
        float _2044 = cbSceneParam._m0[33u].z * _2039;
        float _2046 = cbSceneParam._m0[33u].w * _2039;
        float _2049 = fma(_1961, cbSceneParam._m0[_2008].w, fma(_1957, cbSceneParam._m0[_2008].z, fma(_1953, cbSceneParam._m0[_2008].y, _1949 * cbSceneParam._m0[_2008].x))) / _2039;
        float _2097 = (cbSceneParam._m0[33u].x - sqrt(((_1963 * _1963) + (_1962 * _1962)) + (_1964 * _1964))) * cbSceneParam._m0[33u].y;
        float _4467 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2104 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 + _2027) / _2039, (_2046 + _2031) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 + _2027) / _2039, (_2031 - _2044) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 - _2044) / _2039, (_2031 - _2046) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 - _2046) / _2039, (_2044 + _2031) / _2039), _2049), 0.0)).x), vec4(0.25)));
        _2111 = 1.0 - (_2104 * cbSceneParam._m0[34u].x);
        _2112 = 1.0 - (_2104 * cbSceneParam._m0[34u].y);
        _2113 = 1.0 - (_2104 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2111 = 1.0;
        _2112 = 1.0;
        _2113 = 1.0;
    }
    float _2177;
    float _2179;
    float _2181;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2165 = fma(_1961, cbSceneParam._m0[63u].w, fma(_1957, cbSceneParam._m0[63u].z, fma(_1953, cbSceneParam._m0[63u].y, _1949 * cbSceneParam._m0[63u].x)));
        float _2166 = fma(_1961, cbSceneParam._m0[60u].w, fma(_1957, cbSceneParam._m0[60u].z, fma(_1953, cbSceneParam._m0[60u].y, _1949 * cbSceneParam._m0[60u].x))) / _2165;
        float _2167 = fma(_1961, cbSceneParam._m0[61u].w, fma(_1957, cbSceneParam._m0[61u].z, fma(_1953, cbSceneParam._m0[61u].y, _1949 * cbSceneParam._m0[61u].x))) / _2165;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2166 >= cbSceneParam._m0[64u].x) && (_2167 >= cbSceneParam._m0[64u].y)) && (_2166 <= cbSceneParam._m0[64u].z)) && (_2167 <= cbSceneParam._m0[64u].w))
        {
            float _2305 = fma(_1961, cbSceneParam._m0[62u].w, fma(_1957, cbSceneParam._m0[62u].z, fma(_1953, cbSceneParam._m0[62u].y, _1949 * cbSceneParam._m0[62u].x))) / _2165;
            float _2309 = isnan(cbSceneParam._m0[41u].w) ? _2305 : (isnan(_2305) ? cbSceneParam._m0[41u].w : max(_2305, cbSceneParam._m0[41u].w));
            float _2352 = (cbSceneParam._m0[33u].x - sqrt(((_1963 * _1963) + (_1962 * _1962)) + (_1964 * _1964))) * cbSceneParam._m0[33u].y;
            float _4483 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
            float _2359 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2166, cbSceneParam._m0[33u].w + _2167), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2166, _2167 - cbSceneParam._m0[33u].z), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2166 - cbSceneParam._m0[33u].z, _2167 - cbSceneParam._m0[33u].w), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2166 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2167), _2309), 0.0)).x), vec4(0.25)));
            float _2363 = 1.0 - (_2359 * cbSceneParam._m0[34u].x);
            float _2364 = 1.0 - (_2359 * cbSceneParam._m0[34u].y);
            float _2365 = 1.0 - (_2359 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
            frontier_phi_37_36_ladder_1 = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
            frontier_phi_37_36_ladder_2 = isnan(_2363) ? _2111 : (isnan(_2111) ? _2363 : min(_2111, _2363));
        }
        else
        {
            frontier_phi_37_36_ladder = _2113;
            frontier_phi_37_36_ladder_1 = _2112;
            frontier_phi_37_36_ladder_2 = _2111;
        }
        _2177 = frontier_phi_37_36_ladder_2;
        _2179 = frontier_phi_37_36_ladder_1;
        _2181 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2177 = _2111;
        _2179 = _2112;
        _2181 = _2113;
    }
    uvec4 _2186 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2188 = _2186.x * 14u;
    uint _2189 = _2188 + 13u;
    float _2196 = _854 + (-1.0);
    float _2201 = (cbLight._m0[_2189].x * _2196) + 1.0;
    float _2202 = (cbLight._m0[_2189].y * _2196) + 1.0;
    float _2203 = (cbLight._m0[_2189].z * _2196) + 1.0;
    float _2204 = (cbLight._m0[_2189].w * _2196) + 1.0;
    uint _2205 = _2188 + 5u;
    float _2211 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2215 = _2188 + 4u;
    float _2224 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2228 = _2188 | 1u;
    float _2239 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_676, _677, _678));
    float _2242 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_676, _677, _678));
    float _4519 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _4530 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2247 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2249 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2256 = ((cbLight._m0[_2205].x * _2211) * _2249) + (((cbLight._m0[_2215].x * _2177) * _2224) * _2247);
    float _2257 = ((_2211 * cbLight._m0[_2205].y) * _2249) + (((cbLight._m0[_2215].y * _2179) * _2224) * _2247);
    float _2258 = ((_2211 * cbLight._m0[_2205].z) * _2249) + (((cbLight._m0[_2215].z * _2181) * _2224) * _2247);
    uvec4 _2262 = floatBitsToUint(cbLight._m0[_2188 + 12u]);
    bool _2264 = _2262.x == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2264)
    {
        _2366 = _2256;
        _2368 = _2257;
        _2370 = _2258;
    }
    else
    {
        uint _2374 = _2188 + 6u;
        float _2390 = (dot(vec3(cbLight._m0[_2188 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2391 = _2390 * _2390;
        float _4541 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2392 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2393 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2366 = (((cbLight._m0[_2374].x * 0.3183098733425140380859375) * _2392) * _2393) + _2256;
        _2368 = (((cbLight._m0[_2374].y * 0.3183098733425140380859375) * _2392) * _2393) + _2257;
        _2370 = (((cbLight._m0[_2374].z * 0.3183098733425140380859375) * _2392) * _2393) + _2258;
    }
    bool _2373 = _2262.y == 0u;
    float _2428;
    float _2430;
    float _2432;
    if (_2373)
    {
        _2428 = _2366;
        _2430 = _2368;
        _2432 = _2370;
    }
    else
    {
        uint _2601 = _2188 + 7u;
        float _2617 = (dot(vec3(cbLight._m0[_2188 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2618 = _2617 * _2617;
        float _4557 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2619 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2620 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2428 = (((cbLight._m0[_2601].x * 0.3183098733425140380859375) * _2619) * _2620) + _2366;
        _2430 = (((cbLight._m0[_2601].y * 0.3183098733425140380859375) * _2619) * _2620) + _2368;
        _2432 = (((cbLight._m0[_2601].z * 0.3183098733425140380859375) * _2619) * _2620) + _2370;
    }
    uint _2435 = _2188 + 8u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _679) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2188].x + _756;
    float _2451 = cbLight._m0[_2188].y + _757;
    float _2452 = cbLight._m0[_2188].z + _758;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2188].xyz));
    float _4573 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _4584 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2464 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2465 = dot(vec3(_676, _677, _678), vec3(_2457, _2458, _2459));
    float _4595 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2457, _2458, _2459));
    float _4606 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2449 * _2449;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
    float _2486 = 0.959999978542327880859375 - _835;
    float _2488 = 0.959999978542327880859375 - _836;
    float _2489 = 0.959999978542327880859375 - _837;
    float _2496 = 1.0 - _2449;
    float _2507 = (0.5 / (((_2464 * ((_2463 * _2496) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2496) + _2449) * _2463))) * _2463;
    float _4617 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    uint _2523 = _2188 + 9u;
    float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _679) * 0.949999988079071044921875);
    float _2535 = _2534 * _2534;
    float _2536 = cbLight._m0[_2228].x + _756;
    float _2537 = cbLight._m0[_2228].y + _757;
    float _2538 = cbLight._m0[_2228].z + _758;
    float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
    float _2543 = _2542 * _2536;
    float _2544 = _2542 * _2537;
    float _2545 = _2542 * _2538;
    float _2546 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2228].xyz));
    float _4628 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2550 = dot(vec3(_676, _677, _678), vec3(_2543, _2544, _2545));
    float _4639 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2554 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2543, _2544, _2545));
    float _4650 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2558 = _2535 * _2535;
    float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
    float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0);
    float _2576 = 1.0 - _2535;
    float _2586 = (0.5 / (((_2464 * ((_2549 * _2576) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2576) + _2535) * _2549))) * _2549;
    float _4661 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
    float _2598 = (((((_2569 * _2486) + _838) * cbLight._m0[_2523].x) * _2588) * _2211) + ((((cbLight._m0[_2435].x * _2177) * ((_2485 * _2486) + _838)) * _2509) * _2224);
    float _2599 = (((((_2569 * _2488) + _840) * cbLight._m0[_2523].y) * _2588) * _2211) + ((((cbLight._m0[_2435].y * _2179) * ((_2485 * _2488) + _840)) * _2509) * _2224);
    float _2600 = (((((_2569 * _2489) + _841) * cbLight._m0[_2523].z) * _2588) * _2211) + ((((cbLight._m0[_2435].z * _2181) * ((_2485 * _2489) + _841)) * _2509) * _2224);
    float _2656;
    float _2658;
    float _2660;
    if (_2264)
    {
        _2656 = _2598;
        _2658 = _2599;
        _2660 = _2600;
    }
    else
    {
        uint _2662 = _2188 + 2u;
        uint _2666 = _2188 + 10u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _679) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _756;
        float _2683 = cbLight._m0[_2662].y + _757;
        float _2684 = cbLight._m0[_2662].z + _758;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2662].xyz));
        float _4672 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2696 = dot(vec3(_676, _677, _678), vec3(_2689, _2690, _2691));
        float _4683 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4694 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2715 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
        float _2722 = 1.0 - _2681;
        float _2732 = (0.5 / (((_2464 * ((_2695 * _2722) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2722) + _2681) * _2695))) * _2695;
        float _4705 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2656 = (((((_2715 * _2486) + _838) * cbLight._m0[_2666].x) * _2734) * _2735) + _2598;
        _2658 = (((((_2715 * _2488) + _840) * cbLight._m0[_2666].y) * _2734) * _2735) + _2599;
        _2660 = (((((_2715 * _2489) + _841) * cbLight._m0[_2666].z) * _2734) * _2735) + _2600;
    }
    float _2766;
    float _2768;
    float _2770;
    if (_2373)
    {
        _2766 = _2656;
        _2768 = _2658;
        _2770 = _2660;
    }
    else
    {
        uint _2777 = _2188 + 3u;
        uint _2781 = _2188 + 11u;
        float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2777].w)) * _679) * 0.949999988079071044921875);
        float _2796 = _2795 * _2795;
        float _2797 = cbLight._m0[_2777].x + _756;
        float _2798 = cbLight._m0[_2777].y + _757;
        float _2799 = cbLight._m0[_2777].z + _758;
        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
        float _2804 = _2803 * _2797;
        float _2805 = _2803 * _2798;
        float _2806 = _2803 * _2799;
        float _2807 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2777].xyz));
        float _4721 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2811 = dot(vec3(_676, _677, _678), vec3(_2804, _2805, _2806));
        float _4732 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2815 = dot(vec3(cbLight._m0[_2777].xyz), vec3(_2804, _2805, _2806));
        float _4743 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2819 = _2796 * _2796;
        float _2823 = ((_2814 * _2814) * (_2819 + (-1.0))) + 1.0;
        float _2830 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
        float _2837 = 1.0 - _2796;
        float _2847 = (0.5 / (((_2464 * ((_2810 * _2837) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2837) + _2796) * _2810))) * _2810;
        float _4754 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2849 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2819 / ((_2823 * _2823) * 3.141590118408203125));
        float _2850 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2766 = (((((_2830 * _2486) + _838) * cbLight._m0[_2781].x) * _2849) * _2850) + _2656;
        _2768 = (((((_2830 * _2488) + _840) * cbLight._m0[_2781].y) * _2849) * _2850) + _2658;
        _2770 = (((((_2830 * _2489) + _841) * cbLight._m0[_2781].z) * _2849) * _2850) + _2660;
    }
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_2186.y == 0u)
    {
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.x;
        uint _2883 = uint((float(_2871.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2872))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2872)));
        float _2893 = (log2(_1964 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2894 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        uint _2897 = uint(isnan(14.0) ? _2894 : (isnan(_2894) ? 14.0 : min(_2894, 14.0)));
        uvec4 _2902 = texelFetch(g_lightClusterGridBuffer, int(((_2897 << 2u) + (_2883 << 6u)) >> 2u));
        uint _2903 = _2902.x;
        uint _2904 = _2871.z;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        if (((((1u << ((_2904 >> 4u) & 15u)) + 4294967295u) & _2903) == 0u) || ((_2904 & 240u) == 0u))
        {
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
        }
        else
        {
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            uint _3142 = 0u;
            uint _3151;
            bool _3152;
            for (;;)
            {
                _3151 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                _3152 = _3151 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3152)
                {
                    frontier_phi_71_pred = _3141;
                    frontier_phi_71_pred_1 = _3140;
                    frontier_phi_71_pred_2 = _3139;
                    frontier_phi_71_pred_3 = _3138;
                    frontier_phi_71_pred_4 = _3137;
                    frontier_phi_71_pred_5 = _3136;
                }
                else
                {
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    uint _3287;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3151;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    for (;;)
                    {
                        uint _3291 = uint(findLSB(_3287)) + (_3142 << 5u);
                        uint _3288 = (_3287 + 4294967295u) & _3287;
                        uint _3293 = _3291 * 48u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3313 = (_3291 * 48u) + 4u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3332 = (_3291 * 48u) + 8u;
                        vec3 _3343 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x));
                        float _3347 = _3307.x - _1962;
                        float _3348 = _3307.y - _1963;
                        float _3349 = _3307.z - _1964;
                        float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                        float _3353 = inversesqrt(_3350);
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3357 = dot(vec3(_795, _798, _801), vec3(_3354, _3355, _3356));
                        float _3362 = 1.0 - (_3350 * _3307.w);
                        float _4780 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3364 = sqrt(_3350) * _3326.w;
                        float _3367 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3357) + _3368;
                        float _3374 = _3364 * _3364;
                        float _3378 = ((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3363) / ((_3374 * 0.699999988079071044921875) + 1.0);
                        float _3382 = (-0.0) - _1962;
                        float _3383 = (-0.0) - _1963;
                        float _3384 = (-0.0) - _1964;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3398 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                        float _3399 = 1.0 - _870;
                        float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                        float _3407 = _3406 * _3406;
                        float _3408 = _3407 * _3407;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3411 = _3391 + _3356;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3419 = dot(vec3(_795, _798, _801), vec3(_3389, _3390, _3391));
                        float _4796 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3423 = dot(vec3(_795, _798, _801), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                        float _4807 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                        float _3431 = _3367 * _3407;
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3357) + _3432;
                        float _4818 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3437 = 1.0 - _3407;
                        float _3447 = (0.5 / (((_3436 * ((_3422 * _3437) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3407) * _3422))) * _3436;
                        float _4829 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3458 = (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) / ((_3430 * _3430) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125))) * _3363;
                        _3211 = (_3378 * _3326.x) + _3284;
                        _3212 = (_3378 * _3326.y) + _3285;
                        _3213 = (_3378 * _3326.z) + _3286;
                        _3208 = (_3458 * _3343.x) + _3281;
                        _3209 = (_3458 * _3343.y) + _3282;
                        _3210 = (_3458 * _3343.z) + _3283;
                        if (_3288 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3288;
                        }
                    }
                    frontier_phi_71_pred = _3213;
                    frontier_phi_71_pred_1 = _3212;
                    frontier_phi_71_pred_2 = _3211;
                    frontier_phi_71_pred_3 = _3210;
                    frontier_phi_71_pred_4 = _3209;
                    frontier_phi_71_pred_5 = _3208;
                }
                _2994 = frontier_phi_71_pred;
                _2992 = frontier_phi_71_pred_1;
                _2990 = frontier_phi_71_pred_2;
                _2988 = frontier_phi_71_pred_3;
                _2986 = frontier_phi_71_pred_4;
                _2984 = frontier_phi_71_pred_5;
                uint _3143 = _3142 + 1u;
                if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2984;
                    _3137 = _2986;
                    _3138 = _2988;
                    _3139 = _2990;
                    _3140 = _2992;
                    _3141 = _2994;
                    _3142 = _3143;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
        }
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.z;
        uint _3000 = (_2998 >> 8u) & 15u;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((4294967295u << _3000) & _2903) == 0u)
        {
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
            float _3130 = _3129 * _1962;
            float _3131 = _3129 * _1963;
            float _3132 = _3129 * _1964;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3000 < ((_2998 >> 12u) & 15u))
            {
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3264 = _2983;
                float _3265 = _2985;
                float _3266 = _2987;
                float _3267 = _2989;
                float _3268 = _2991;
                float _3269 = _2993;
                uint _3270 = _3000;
                uint _3279;
                bool _3280;
                for (;;)
                {
                    _3279 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                    _3280 = _3279 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3280)
                    {
                        frontier_phi_82_pred = _3269;
                        frontier_phi_82_pred_1 = _3268;
                        frontier_phi_82_pred_2 = _3267;
                        frontier_phi_82_pred_3 = _3266;
                        frontier_phi_82_pred_4 = _3265;
                        frontier_phi_82_pred_5 = _3264;
                    }
                    else
                    {
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        uint _3491 = _3279;
                        uint _3492;
                        vec4 _3517;
                        float _3518;
                        vec4 _3533;
                        vec3 _3545;
                        vec4 _3560;
                        vec4 _3575;
                        float _3621;
                        bool _3622;
                        for (;;)
                        {
                            uint _3502 = ((_3270 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3491));
                            _3492 = (_3491 + 4294967295u) & _3491;
                            uint _3504 = _3502 * 40u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3518 = _3517.w;
                            uint _3520 = (_3502 * 40u) + 4u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3502 * 40u) + 8u;
                            _3545 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x));
                            uint _3547 = (_3502 * 40u) + 16u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3502 * 40u) + 20u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3502 * 40u) + 24u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3596 = (_3502 * 40u) + 28u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3621 = fma(_1964, _3609.z, fma(_1963, _3609.y, _3609.x * _1962)) + _3609.w;
                            _3622 = !((fma(_1964, _3590.z, fma(_1963, _3590.y, _3590.x * _1962)) + _3590.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3622)
                            {
                                float _3649 = _3517.x - _1962;
                                float _3650 = _3517.y - _1963;
                                float _3651 = _3517.z - _1964;
                                float _3652 = dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651));
                                float _3655 = inversesqrt(_3652);
                                float _3656 = _3655 * _3649;
                                float _3657 = _3655 * _3650;
                                float _3658 = _3655 * _3651;
                                float _3662 = 1.0 - (_3652 / (_3518 * _3518));
                                float _4840 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3667 = sqrt(_3652) * _3533.w;
                                float _3669 = 1.39999997615814208984375 / (_3667 + 1.39999997615814208984375);
                                float _3670 = _3669 * _3669;
                                float _3673 = ((1.0 - _3670) * dot(vec3(_3656, _3657, _3658), vec3(_795, _798, _801))) + _3670;
                                float _3676 = _3667 * _3667;
                                float _3680 = (fma(_1964, _3560.z, fma(_1963, _3560.y, _3560.x * _1962)) + _3560.w) / _3621;
                                float _3681 = (fma(_1964, _3575.z, fma(_1963, _3575.y, _3575.x * _1962)) + _3575.w) / _3621;
                                float _3685 = 1.0 - dot(vec2(_3680, _3681), vec2(_3680, _3681));
                                float _4856 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3687 = _3686 * (((isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0))) * _3663) / ((_3676 * 0.699999988079071044921875) + 1.0));
                                float _3699 = exp2(log2(1.0 / ((_3676 * 3.5) + 5.0)) * 0.25);
                                float _3700 = 1.0 - _870;
                                float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                                float _3708 = _3707 * _3707;
                                float _3709 = _3708 * _3708;
                                float _3710 = _3656 - _3130;
                                float _3711 = _3657 - _3131;
                                float _3712 = _3658 - _3132;
                                float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                                float _3720 = dot(vec3(_795, _798, _801), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4867 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3724 = dot(vec3(_795, _798, _801), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                                float _4878 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                                float _3732 = _3669 * _3708;
                                float _3733 = _3732 * _3732;
                                float _3739 = ((1.0 - _3733) * dot(vec3(_795, _798, _801), vec3(_3656, _3657, _3658))) + _3733;
                                float _4889 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3741 = 1.0 - _3708;
                                float _3751 = (0.5 / (((_3740 * ((_3723 * _3741) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3740 * _3741) + _3708) * _3723))) * _3740;
                                float _4900 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3761 = (_3686 * _3663) * (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3731 * _3731) * ((_3676 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3687 * _3533.z;
                                frontier_phi_88_pred_1 = _3687 * _3533.y;
                                frontier_phi_88_pred_2 = _3687 * _3533.x;
                                frontier_phi_88_pred_3 = _3761 * _3545.z;
                                frontier_phi_88_pred_4 = _3761 * _3545.y;
                                frontier_phi_88_pred_5 = _3761 * _3545.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3770 = frontier_phi_88_pred;
                            _3769 = frontier_phi_88_pred_1;
                            _3768 = frontier_phi_88_pred_2;
                            _3767 = frontier_phi_88_pred_3;
                            _3766 = frontier_phi_88_pred_4;
                            _3765 = frontier_phi_88_pred_5;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            if (_3492 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3492;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3477;
                        frontier_phi_82_pred_1 = _3476;
                        frontier_phi_82_pred_2 = _3475;
                        frontier_phi_82_pred_3 = _3474;
                        frontier_phi_82_pred_4 = _3473;
                        frontier_phi_82_pred_5 = _3472;
                    }
                    _3115 = frontier_phi_82_pred;
                    _3113 = frontier_phi_82_pred_1;
                    _3111 = frontier_phi_82_pred_2;
                    _3109 = frontier_phi_82_pred_3;
                    _3107 = frontier_phi_82_pred_4;
                    _3105 = frontier_phi_82_pred_5;
                    uint _3271 = _3270 + 1u;
                    if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3264 = _3105;
                        _3265 = _3107;
                        _3266 = _3109;
                        _3267 = _3111;
                        _3268 = _3113;
                        _3269 = _3115;
                        _3270 = _3271;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3111;
                frontier_phi_63_64_ladder_1 = _3115;
                frontier_phi_63_64_ladder_2 = _3113;
                frontier_phi_63_64_ladder_3 = _3109;
                frontier_phi_63_64_ladder_4 = _3107;
                frontier_phi_63_64_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_63_64_ladder = _2989;
                frontier_phi_63_64_ladder_1 = _2993;
                frontier_phi_63_64_ladder_2 = _2991;
                frontier_phi_63_64_ladder_3 = _2987;
                frontier_phi_63_64_ladder_4 = _2985;
                frontier_phi_63_64_ladder_5 = _2983;
            }
            _3104 = frontier_phi_63_64_ladder_5;
            _3106 = frontier_phi_63_64_ladder_4;
            _3108 = frontier_phi_63_64_ladder_3;
            _3110 = frontier_phi_63_64_ladder;
            _3112 = frontier_phi_63_64_ladder_2;
            _3114 = frontier_phi_63_64_ladder_1;
        }
        float _3119 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2916 = (_3119 * _3110) + _2428;
        _2918 = (_3119 * _3112) + _2430;
        _2920 = (_3119 * _3114) + _2432;
        _2922 = ((_3104 * _838) * _3119) + _2766;
        _2924 = ((_3106 * _840) * _3119) + _2768;
        _2926 = ((_3108 * _841) * _3119) + _2770;
    }
    else
    {
        _2916 = _2428;
        _2918 = _2430;
        _2920 = _2432;
        _2922 = _2766;
        _2924 = _2768;
        _2926 = _2770;
    }
    float _4916 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4927 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4938 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2943 = ((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2916 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _854))) + ((_2922 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    float _2944 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2918 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _854))) + ((_2924 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2920 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _854))) + ((_2926 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    uint _2946 = _246 + 6u;
    float _2954 = _776 / cbSceneParam._m0[86u].x;
    float _2955 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2969 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2971 = _2969.x;
    float _2972 = _2969.y;
    float _2973 = _2969.z;
    float _2974 = _2969.w;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _3008 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _3009 = _3008 / _698;
        float _3020 = _3009 * _749;
        float _3021 = _750 * _3009;
        float _3022 = (-0.0) - _3021;
        float _3024 = _3009 * _751;
        float _3026 = (cbSceneParam._m0[77u].w * _3022) / _3008;
        float _3027 = _3026 + cbSceneParam._m0[79u].w;
        float _3028 = cbSceneParam._m0[79u].w - _3021;
        float _3034 = sqrt(((_3020 * _3020) + (_3021 * _3021)) + (_3024 * _3024));
        float _3037 = (1.0 - (cbSceneParam._m0[77u].w / _3008)) * _3034;
        float _3042 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3044 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3221;
        if (abs((_3022 - _3026) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3221 = ((((_3027 > 0.0) ? exp2(_3042 * _3027) : (2.0 - exp2(_3044 * _3027))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3037;
        }
        else
        {
            float _3165 = 1.0 / cbSceneParam._m0[80u].x;
            float _3166 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : max(_3027, _3028));
            float _3167 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : min(_3027, _3028));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            _3221 = ((abs(_3034 / _3022) * cbSceneParam._m0[80u].y) * ((((_3176 - _3177) * 2.0) - ((exp2(_3042 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0)))) - exp2(_3042 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))))) * _3165)) - ((exp2(_3044 * _3176) - exp2(_3044 * _3177)) * _3165))) + (_3037 * cbSceneParam._m0[80u].z);
        }
        vec4 _3223 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, 1.0), 0.0);
        float _3232 = exp2((_3221 * (-1.44269502162933349609375)) * (1.0 - _3223.w));
        float _3233 = log2(_3232);
        float _3249 = log2(_2974);
        _3046 = (exp2(_3249 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].x)) * _3223.x) / cbSceneParam._m0[78u].x)) + _2971;
        _3048 = (exp2(_3249 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].y)) * _3223.y) / cbSceneParam._m0[78u].y)) + _2972;
        _3050 = (exp2(_3249 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].z)) * _3223.z) / cbSceneParam._m0[78u].z)) + _2973;
        _3052 = _3232 * _2974;
    }
    else
    {
        _3046 = _2971;
        _3048 = _2972;
        _3050 = _2973;
        _3052 = _2974;
    }
    bool _3259;
    vec4 _3062;
    vec4 _3084;
    float _3086;
    float _3090;
    float _3091;
    float _3092;
    float _3093;
    bool _3103;
    for (;;)
    {
        _3062 = cbMatDynParam._m0[0u];
        float _3064 = roundEven(_3062.y);
        bool _3065 = _3064 == 3.0;
        float _3066 = log2(_3052);
        float _3073 = exp2(_3066 * cbSceneParam._m0[78u].x) * _2943;
        float _3074 = exp2(_3066 * cbSceneParam._m0[78u].y) * _2944;
        float _3075 = exp2(_3066 * cbSceneParam._m0[78u].z) * _2945;
        float _3082 = _765 + (-0.5);
        _3084 = cbMtdParam._m0[1u];
        _3086 = _3084.y * _3082;
        float _3089 = (_3064 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3090 = _3089 * (_3065 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3046)));
        _3091 = _3089 * (_3065 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3048)));
        _3092 = _3089 * (_3065 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3050)));
        _3093 = _3082 * 0.999000012874603271484375;
        _3103 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3103)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _3093) < 0.5)
            {
                _3259 = true;
                break;
            }
        }
        uint _3200 = _814 + uint(_3062.w);
        if ((cbInstanceData._m0[_3200].w < 1.0) && ((cbInstanceData._m0[_3200].w + _3093) < 0.5))
        {
            _3259 = true;
            break;
        }
        if ((_3086 + 1.0) < _3084.x)
        {
            _3259 = true;
            break;
        }
        _3259 = false;
        break;
    }
    float _3463;
    if (_3259)
    {
        discard_state = true;
        _3463 = 0.0;
    }
    else
    {
        _3463 = cbInstanceData._m0[_2946].w;
    }
    SV_Target.x = _3090;
    SV_Target.y = _3091;
    SV_Target.z = _3092;
    SV_Target.w = _3463;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2946].w;
    discard_exit();
}


