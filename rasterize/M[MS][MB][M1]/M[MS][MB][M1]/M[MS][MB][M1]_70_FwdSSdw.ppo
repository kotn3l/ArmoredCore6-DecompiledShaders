#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1188;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3542 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _434 = ((_404.z - _425) * _382) + _425;
    float _437 = ((((_404.x - _423) * _382) + _423) * 2.0) + (-1.0);
    float _439 = ((((_404.y - _424) * _382) + _424) * 2.0) + (-1.0);
    float _440 = dot(vec2(_437, _439), vec2(_437, _439));
    float _3553 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _445 = sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _473 = (((_461.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    float _474 = (((_461.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _439;
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _488 = _486.x;
    float _489 = 1.0 - _488;
    float _517 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_488 - _489) * cbMtdParam._m0[24u].w) + _489) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3564 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _526 = ((((cbMtdParam._m0[10u].x - _389) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _518) + _389;
    float _527 = ((((cbMtdParam._m0[10u].y - _390) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _518) + _390;
    float _528 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _391)) * _518) + _391;
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _556 = _554.x;
    float _574 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _556) * _382) + _556;
    float _578 = ((_540.x - _574) * cbMtdParam._m0[19u].z) + _574;
    float _580 = _578 - (_578 * _518);
    float _584 = (cbMtdParam._m0[19u].w * (_461.z - _434)) + _434;
    float _588 = ((cbMtdParam._m0[23u].y - _584) * _518) + _584;
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _613 = (_607.x * 2.0) + (-1.0);
    float _614 = (_607.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3575 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _631 = (_518 * (((cbMtdParam._m0[22u].z * _473) - _473) + _613)) + _473;
    float _632 = (_518 * (((cbMtdParam._m0[22u].z * _474) - _474) + _614)) + _474;
    float _633 = (_518 * (sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) - _445)) + _445;
    float _635 = cbMtdParam._m0[22u].x + _461.w;
    float _638 = fma(_633, _232 * NORMAL.x, fma(_632, _239 * TANGENT.x, (_225 * _217) * _631));
    float _641 = fma(_633, _232 * NORMAL.y, fma(_632, _239 * TANGENT.y, (_225 * _218) * _631));
    float _644 = fma(_633, _232 * NORMAL.z, fma(_632, _239 * TANGENT.z, (_225 * _219) * _631));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _649 = _648 * _638;
    float _650 = _648 * _641;
    float _651 = _648 * _644;
    float _3586 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _652 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3608 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3619 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3630 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3641 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _657 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _711);
    float _722 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _711);
    float _723 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_651, cbSceneParam._m0[5u].z, fma(_650, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _649));
    float _758 = fma(_651, cbSceneParam._m0[6u].z, fma(_650, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _649));
    float _761 = fma(_651, cbSceneParam._m0[7u].z, fma(_650, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _649));
    uint _775 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _781 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_775].x;
    float _782 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_775].y;
    float _783 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_775].z;
    float _3652 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _787 = 1.0 - _657;
    float _788 = _784 * _787;
    float _789 = _785 * _787;
    float _790 = _786 * _787;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _657;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _657;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _657;
    float _798 = _795 + 0.039999999105930328369140625;
    float _800 = _796 + 0.039999999105930328369140625;
    float _801 = _797 + 0.039999999105930328369140625;
    vec4 _810 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _814 = ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * TEXCOORD_5.w) * _810.x;
    float _815 = dot(vec3(_649, _650, _651), vec3(_728, _729, _730));
    float _818 = _815 * 2.0;
    float _822 = (_818 * _649) - _728;
    float _823 = (_818 * _650) - _729;
    float _824 = (_818 * _651) - _730;
    float _828 = abs(dot(vec3(_728, _729, _730), vec3(_649, _650, _651)));
    float _3685 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _830 = sqrt(_652);
    float _843 = exp2((_830 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_830 * 3.0));
    float _849 = (1.0 - _843) * ((_830 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _850 = _843 * _830;
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1187;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _912 = fma(_886, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878));
        float _916 = fma(_886, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878));
        float _920 = fma(_886, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878));
        float _945 = _878 + _649;
        float _946 = _882 + _650;
        float _947 = _886 + _651;
        float _957 = fma(_947, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945)) - _912;
        float _958 = fma(_947, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945)) - _916;
        float _959 = fma(_947, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945)) - _920;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_912 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_916 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[34u].z) + ((((((_920 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1015 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_981.x + (-0.5));
        float _1017 = _1015 * (_981.y + (-0.5));
        float _1018 = _1015 * (_981.z + (-0.5));
        float _1025 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_988.x + (-0.5));
        float _1027 = _1025 * (_988.y + (-0.5));
        float _1028 = _1025 * (_988.z + (-0.5));
        float _1035 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_995.x + (-0.5));
        float _1037 = _1035 * (_995.y + (-0.5));
        float _1038 = _1035 * (_995.z + (-0.5));
        float _1045 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1002.x + (-0.5));
        float _1047 = _1045 * (_1002.y + (-0.5));
        float _1048 = _1045 * (_1002.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1069 = (dot(vec3(_649, _650, _651), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1079 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3733 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1081 + 1.0))) + _1086) * _1049;
        float _1096 = _1017 * 0.5;
        float _1097 = _1027 * 0.5;
        float _1098 = _1037 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_649, _650, _651), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3766 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1123 + 1.0))) + _1128) * _1050;
        float _1138 = _1018 * 0.5;
        float _1139 = _1028 * 0.5;
        float _1140 = _1038 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_649, _650, _651), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3799 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1165 + 1.0))) + _1170) * _1051;
        _1187 = _1018;
        _1189 = _1017;
        _1190 = _1016;
        _1191 = _1028;
        _1192 = _1027;
        _1193 = _1026;
        _1194 = _1038;
        _1195 = _1037;
        _1196 = _1036;
        _1197 = _1051;
        _1198 = _1050;
        _1199 = _1049;
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _1188;
        _1189 = _1188;
        _1190 = _1188;
        _1191 = _1188;
        _1192 = _1188;
        _1193 = _1188;
        _1194 = _1188;
        _1195 = _1188;
        _1196 = _1188;
        _1197 = _1188;
        _1198 = _1188;
        _1199 = _1188;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_886, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878));
        float _1231 = fma(_886, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878));
        float _1235 = fma(_886, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878));
        float _1258 = _878 + _649;
        float _1259 = _882 + _650;
        float _1260 = _886 + _651;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_649, _650, _651), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3862 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_649, _650, _651), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3895 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_649, _650, _651), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3928 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1188;
        _1497 = _1188;
        _1498 = _1188;
        _1499 = _1188;
        _1500 = _1188;
        _1501 = _1188;
        _1502 = _1188;
        _1503 = _1188;
        _1504 = _1188;
        _1505 = _1188;
        _1506 = _1188;
        _1507 = _1188;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1200)) + _1200;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1201)) + _1201;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1202)) + _1202;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _822 * 0.5;
    float _1565 = _823 * 0.5;
    float _1566 = _824 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1187, _1191, _1194, _1197));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _652);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1682 = fma(_886, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878)) + cbModelParam._m0[13u].w;
        float _1686 = fma(_886, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878)) + cbModelParam._m0[14u].w;
        float _1690 = fma(_886, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878)) + cbModelParam._m0[15u].w;
        float _1693 = fma(_824, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822));
        float _1696 = fma(_824, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822));
        float _1699 = fma(_824, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822));
        float _1727;
        if (_1693 > 0.0)
        {
            _1727 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1727 = frontier_phi_14_12_ladder;
        }
        float _1952;
        if (_1696 > 0.0)
        {
            _1952 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1952 = frontier_phi_23_19_ladder;
        }
        float _2209;
        if (_1699 > 0.0)
        {
            _2209 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2209 = frontier_phi_35_30_ladder;
        }
        float _2211 = isnan(_1952) ? _1727 : (isnan(_1727) ? _1952 : min(_1727, _1952));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1693) + _1682;
        float _2217 = (_2212 * _1696) + _1686;
        float _2218 = (_2212 * _1699) + _1690;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2219;
        float _2223 = _2219 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 > _2223) || ((_2217 < _2221) || ((_2216 < _2221) || (_2216 > _2223))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2218, cbModelParam._m0[9u].z, fma(_2217, cbModelParam._m0[9u].y, _2216 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2218, cbModelParam._m0[10u].z, fma(_2217, cbModelParam._m0[10u].y, _2216 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2218, cbModelParam._m0[11u].z, fma(_2217, cbModelParam._m0[11u].y, _2216 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_13_35_ladder = _2346.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2346.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2346.x * cbModelParam._m0[1u].y;
        }
        _1715 = frontier_phi_13_35_ladder_2;
        _1717 = frontier_phi_13_35_ladder_1;
        _1719 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_822, _823, _824), _1633);
        _1715 = _1703.x * cbModelParam._m0[1u].y;
        _1717 = _1703.y * cbModelParam._m0[1u].y;
        _1719 = _1703.z * cbModelParam._m0[1u].y;
    }
    float _1723 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _652);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1723 : min(cbModelParam._m0[25u].w, _1723));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1779 = fma(_886, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878)) + cbModelParam._m0[21u].w;
        float _1783 = fma(_886, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878)) + cbModelParam._m0[22u].w;
        float _1787 = fma(_886, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878)) + cbModelParam._m0[23u].w;
        float _1790 = fma(_824, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822));
        float _1793 = fma(_824, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822));
        float _1796 = fma(_824, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822));
        float _1957;
        if (_1790 > 0.0)
        {
            _1957 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1957 = frontier_phi_25_21_ladder;
        }
        float _2236;
        if (_1793 > 0.0)
        {
            _2236 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2236 = frontier_phi_37_32_ladder;
        }
        float _2449;
        if (_1796 > 0.0)
        {
            _2449 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2449 = frontier_phi_46_43_ladder;
        }
        float _2451 = isnan(_2236) ? _1957 : (isnan(_1957) ? _2236 : min(_1957, _2236));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1790) + _1779;
        float _2457 = (_2452 * _1793) + _1783;
        float _2458 = (_2452 * _1796) + _1787;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2459;
        float _2462 = _2459 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2458 > _2462) || ((_2458 < _2460) || ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 < _2460) || (_2456 > _2462))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2458, cbModelParam._m0[17u].z, fma(_2457, cbModelParam._m0[17u].y, _2456 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2458, cbModelParam._m0[18u].z, fma(_2457, cbModelParam._m0[18u].y, _2456 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2458, cbModelParam._m0[19u].z, fma(_2457, cbModelParam._m0[19u].y, _2456 * cbModelParam._m0[19u].x))), _1724);
            frontier_phi_22_46_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1815 = frontier_phi_22_46_ladder_2;
        _1817 = frontier_phi_22_46_ladder_1;
        _1819 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_822, _823, _824), _1724);
        _1815 = _1799.x * cbModelParam._m0[1u].z;
        _1817 = _1799.y * cbModelParam._m0[1u].z;
        _1819 = _1799.z * cbModelParam._m0[1u].z;
    }
    float _1832 = (((_849 * _798) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1815 - _1715)) + _1715);
    float _1834 = (((_849 * _800) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1836 = (((_849 * _801) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1839 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1832 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1832 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, _1832 * cbSceneParam._m0[91u].x));
    vec4 _1853 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_736, _737));
    float _1855 = _1853.w;
    float _1867 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1855);
    float _1868 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1855);
    float _1869 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1855);
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _814 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1911 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1915 = _1875 | 1u;
    float _1926 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_649, _650, _651));
    float _1929 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_649, _650, _651));
    float _4064 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _4075 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1934 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1936 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1943 = ((cbLight._m0[_1892].x * _1898) * _1936) + (((cbLight._m0[_1902].x * _1867) * _1911) * _1934);
    float _1944 = ((_1898 * cbLight._m0[_1892].y) * _1936) + (((cbLight._m0[_1902].y * _1868) * _1911) * _1934);
    float _1945 = ((_1898 * cbLight._m0[_1892].z) * _1936) + (((cbLight._m0[_1902].z * _1869) * _1911) * _1934);
    uvec4 _1949 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1951 = _1949.x == 0u;
    float _1962;
    float _1964;
    float _1966;
    if (_1951)
    {
        _1962 = _1943;
        _1964 = _1944;
        _1966 = _1945;
    }
    else
    {
        uint _1970 = _1875 + 6u;
        float _1986 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _1987 = _1986 * _1986;
        float _4086 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1988 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1989 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _1962 = (((cbLight._m0[_1970].x * 0.3183098733425140380859375) * _1988) * _1989) + _1943;
        _1964 = (((cbLight._m0[_1970].y * 0.3183098733425140380859375) * _1988) * _1989) + _1944;
        _1966 = (((cbLight._m0[_1970].z * 0.3183098733425140380859375) * _1988) * _1989) + _1945;
    }
    bool _1969 = _1949.y == 0u;
    float _2007;
    float _2009;
    float _2011;
    if (_1969)
    {
        _2007 = _1962;
        _2009 = _1964;
        _2011 = _1966;
    }
    else
    {
        uint _2180 = _1875 + 7u;
        float _2196 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4102 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2199 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2007 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _1962;
        _2009 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _1964;
        _2011 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _1966;
    }
    uint _2014 = _1875 + 8u;
    float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _652) * 0.949999988079071044921875);
    float _2028 = _2027 * _2027;
    float _2029 = cbLight._m0[_1875].x + _728;
    float _2030 = cbLight._m0[_1875].y + _729;
    float _2031 = cbLight._m0[_1875].z + _730;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2036 = _2035 * _2029;
    float _2037 = _2035 * _2030;
    float _2038 = _2035 * _2031;
    float _2039 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1875].xyz));
    float _4118 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _2043 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2044 = dot(vec3(_649, _650, _651), vec3(_2036, _2037, _2038));
    float _4140 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2036, _2037, _2038));
    float _4151 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2028 * _2028;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2064 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
    float _2065 = 0.959999978542327880859375 - _795;
    float _2067 = 0.959999978542327880859375 - _796;
    float _2068 = 0.959999978542327880859375 - _797;
    float _2075 = 1.0 - _2028;
    float _2086 = (0.5 / (((_2043 * ((_2042 * _2075) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2075) + _2028) * _2042))) * _2042;
    float _4162 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2088 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    uint _2102 = _1875 + 9u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _652) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1915].x + _728;
    float _2116 = cbLight._m0[_1915].y + _729;
    float _2117 = cbLight._m0[_1915].z + _730;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1915].xyz));
    float _4173 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2129 = dot(vec3(_649, _650, _651), vec3(_2122, _2123, _2124));
    float _4184 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2122, _2123, _2124));
    float _4195 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2114 * _2114;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _2155 = 1.0 - _2114;
    float _2165 = (0.5 / (((_2043 * ((_2128 * _2155) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2155) + _2114) * _2128))) * _2128;
    float _4206 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    float _2177 = (((((_2148 * _2065) + _798) * cbLight._m0[_2102].x) * _2167) * _1898) + ((((cbLight._m0[_2014].x * _1867) * ((_2064 * _2065) + _798)) * _2088) * _1911);
    float _2178 = (((((_2148 * _2067) + _800) * cbLight._m0[_2102].y) * _2167) * _1898) + ((((cbLight._m0[_2014].y * _1868) * ((_2064 * _2067) + _800)) * _2088) * _1911);
    float _2179 = (((((_2148 * _2068) + _801) * cbLight._m0[_2102].z) * _2167) * _1898) + ((((cbLight._m0[_2014].z * _1869) * ((_2064 * _2068) + _801)) * _2088) * _1911);
    float _2241;
    float _2243;
    float _2245;
    if (_1951)
    {
        _2241 = _2177;
        _2243 = _2178;
        _2245 = _2179;
    }
    else
    {
        uint _2247 = _1875 + 2u;
        uint _2251 = _1875 + 10u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _652) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _728;
        float _2268 = cbLight._m0[_2247].y + _729;
        float _2269 = cbLight._m0[_2247].z + _730;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2247].xyz));
        float _4217 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2281 = dot(vec3(_649, _650, _651), vec3(_2274, _2275, _2276));
        float _4228 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4239 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
        float _2307 = 1.0 - _2266;
        float _2317 = (0.5 / (((_2043 * ((_2280 * _2307) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2307) + _2266) * _2280))) * _2280;
        float _4250 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2319 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2320 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2241 = (((((_2300 * _2065) + _798) * cbLight._m0[_2251].x) * _2319) * _2320) + _2177;
        _2243 = (((((_2300 * _2067) + _800) * cbLight._m0[_2251].y) * _2319) * _2320) + _2178;
        _2245 = (((((_2300 * _2068) + _801) * cbLight._m0[_2251].z) * _2319) * _2320) + _2179;
    }
    float _2355;
    float _2357;
    float _2359;
    if (_1969)
    {
        _2355 = _2241;
        _2357 = _2243;
        _2359 = _2245;
    }
    else
    {
        uint _2366 = _1875 + 3u;
        uint _2370 = _1875 + 11u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _652) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _728;
        float _2387 = cbLight._m0[_2366].y + _729;
        float _2388 = cbLight._m0[_2366].z + _730;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2366].xyz));
        float _4266 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2400 = dot(vec3(_649, _650, _651), vec3(_2393, _2394, _2395));
        float _4277 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4288 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
        float _2426 = 1.0 - _2385;
        float _2436 = (0.5 / (((_2043 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2043 * _2426) + _2385) * _2399))) * _2399;
        float _4299 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2438 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2439 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2355 = (((((_2419 * _2065) + _798) * cbLight._m0[_2370].x) * _2438) * _2439) + _2241;
        _2357 = (((((_2419 * _2067) + _800) * cbLight._m0[_2370].y) * _2438) * _2439) + _2243;
        _2359 = (((((_2419 * _2068) + _801) * cbLight._m0[_2370].z) * _2438) * _2439) + _2245;
    }
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    if (_1873.y == 0u)
    {
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2514;
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2514;
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2514;
        uvec4 _2529 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2530 = _2529.x;
        uint _2541 = uint((float(_2529.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2530))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2530)));
        float _2551 = (log2(_2517 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2552 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        uint _2555 = uint(isnan(14.0) ? _2552 : (isnan(_2552) ? 14.0 : min(_2552, 14.0)));
        uvec4 _2560 = texelFetch(g_lightClusterGridBuffer, int(((_2555 << 2u) + (_2541 << 6u)) >> 2u));
        uint _2561 = _2560.x;
        uint _2562 = _2529.z;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((((1u << ((_2562 >> 4u) & 15u)) + 4294967295u) & _2561) == 0u) || ((_2562 & 240u) == 0u))
        {
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
        }
        else
        {
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2555 << 5u) + (_2541 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2823)
                {
                    frontier_phi_61_pred = _2807;
                    frontier_phi_61_pred_1 = _2812;
                    frontier_phi_61_pred_2 = _2811;
                    frontier_phi_61_pred_3 = _2810;
                    frontier_phi_61_pred_4 = _2809;
                    frontier_phi_61_pred_5 = _2808;
                }
                else
                {
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    uint _2937;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2822;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    for (;;)
                    {
                        uint _2941 = uint(findLSB(_2937)) + (_2813 << 5u);
                        uint _2938 = (_2937 + 4294967295u) & _2937;
                        uint _2943 = _2941 * 48u;
                        vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2963 = (_2941 * 48u) + 4u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2963)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 3u)).x));
                        uint _2982 = (_2941 * 48u) + 8u;
                        vec3 _2993 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x));
                        float _2997 = _2957.x - _2515;
                        float _2998 = _2957.y - _2516;
                        float _2999 = _2957.z - _2517;
                        float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                        float _3003 = inversesqrt(_3000);
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3007 = dot(vec3(_755, _758, _761), vec3(_3004, _3005, _3006));
                        float _3012 = 1.0 - (_3000 * _2957.w);
                        float _4325 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3014 = sqrt(_3000) * _2976.w;
                        float _3017 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _3007) + _3018;
                        float _3024 = _3014 * _3014;
                        float _3028 = ((isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))) * _3013) / ((_3024 * 0.699999988079071044921875) + 1.0);
                        float _3032 = (-0.0) - _2515;
                        float _3033 = (-0.0) - _2516;
                        float _3034 = (-0.0) - _2517;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3049 = exp2(log2(1.0 / ((_3024 * 3.5) + 5.0)) * 0.25);
                        float _3050 = 1.0 - _830;
                        float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                        float _3058 = _3057 * _3057;
                        float _3059 = _3058 * _3058;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3062 = _3041 + _3006;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3070 = dot(vec3(_755, _758, _761), vec3(_3039, _3040, _3041));
                        float _4341 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3074 = dot(vec3(_755, _758, _761), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                        float _4352 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                        float _3082 = _3017 * _3058;
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3007) + _3083;
                        float _4363 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3088 = 1.0 - _3058;
                        float _3098 = (0.5 / (((_3087 * ((_3073 * _3088) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3088) + _3058) * _3073))) * _3087;
                        float _4374 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3109 = (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) / ((_3081 * _3081) * ((_3024 * 2.1991131305694580078125) + 3.141590118408203125))) * _3013;
                        _2866 = (_3028 * _2976.x) + _2934;
                        _2867 = (_3028 * _2976.y) + _2935;
                        _2868 = (_3028 * _2976.z) + _2936;
                        _2863 = (_3109 * _2993.x) + _2931;
                        _2864 = (_3109 * _2993.y) + _2932;
                        _2865 = (_3109 * _2993.z) + _2933;
                        if (_2938 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2938;
                        }
                    }
                    frontier_phi_61_pred = _2863;
                    frontier_phi_61_pred_1 = _2868;
                    frontier_phi_61_pred_2 = _2867;
                    frontier_phi_61_pred_3 = _2866;
                    frontier_phi_61_pred_4 = _2865;
                    frontier_phi_61_pred_5 = _2864;
                }
                _2663 = frontier_phi_61_pred;
                _2673 = frontier_phi_61_pred_1;
                _2671 = frontier_phi_61_pred_2;
                _2669 = frontier_phi_61_pred_3;
                _2667 = frontier_phi_61_pred_4;
                _2665 = frontier_phi_61_pred_5;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2807 = _2663;
                    _2808 = _2665;
                    _2809 = _2667;
                    _2810 = _2669;
                    _2811 = _2671;
                    _2812 = _2673;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
        }
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.z;
        uint _2679 = (_2677 >> 8u) & 15u;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((4294967295u << _2679) & _2561) == 0u)
        {
            _2775 = _2662;
            _2777 = _2664;
            _2779 = _2666;
            _2781 = _2668;
            _2783 = _2670;
            _2785 = _2672;
        }
        else
        {
            float _2800 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
            float _2801 = _2800 * _2515;
            float _2802 = _2800 * _2516;
            float _2803 = _2800 * _2517;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2679 < ((_2677 >> 12u) & 15u))
            {
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2914 = _2662;
                float _2915 = _2664;
                float _2916 = _2666;
                float _2917 = _2668;
                float _2918 = _2670;
                float _2919 = _2672;
                uint _2920 = _2679;
                uint _2929;
                bool _2930;
                for (;;)
                {
                    _2929 = texelFetch(g_lightClassification, int((((_2555 << 5u) + (_2541 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                    _2930 = _2929 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2930)
                    {
                        frontier_phi_67_pred = _2917;
                        frontier_phi_67_pred_1 = _2918;
                        frontier_phi_67_pred_2 = _2919;
                        frontier_phi_67_pred_3 = _2916;
                        frontier_phi_67_pred_4 = _2915;
                        frontier_phi_67_pred_5 = _2914;
                    }
                    else
                    {
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        uint _3133 = _2929;
                        uint _3134;
                        vec4 _3159;
                        float _3160;
                        vec4 _3175;
                        vec3 _3187;
                        vec4 _3202;
                        vec4 _3218;
                        float _3264;
                        bool _3265;
                        for (;;)
                        {
                            uint _3144 = ((_2920 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3133));
                            _3134 = (_3133 + 4294967295u) & _3133;
                            uint _3146 = _3144 * 40u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            _3160 = _3159.w;
                            uint _3162 = (_3144 * 40u) + 4u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3177 = (_3144 * 40u) + 8u;
                            _3187 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x));
                            uint _3189 = (_3144 * 40u) + 16u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3205 = (_3144 * 40u) + 20u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3144 * 40u) + 24u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3239 = (_3144 * 40u) + 28u;
                            vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            _3264 = fma(_2517, _3252.z, fma(_2516, _3252.y, _3252.x * _2515)) + _3252.w;
                            _3265 = !((fma(_2517, _3233.z, fma(_2516, _3233.y, _3233.x * _2515)) + _3233.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3265)
                            {
                                float _3292 = _3159.x - _2515;
                                float _3293 = _3159.y - _2516;
                                float _3294 = _3159.z - _2517;
                                float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                                float _3298 = inversesqrt(_3295);
                                float _3299 = _3298 * _3292;
                                float _3300 = _3298 * _3293;
                                float _3301 = _3298 * _3294;
                                float _3305 = 1.0 - (_3295 / (_3160 * _3160));
                                float _4385 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3310 = sqrt(_3295) * _3175.w;
                                float _3312 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                                float _3313 = _3312 * _3312;
                                float _3316 = ((1.0 - _3313) * dot(vec3(_3299, _3300, _3301), vec3(_755, _758, _761))) + _3313;
                                float _3319 = _3310 * _3310;
                                float _3323 = (fma(_2517, _3202.z, fma(_2516, _3202.y, _3202.x * _2515)) + _3202.w) / _3264;
                                float _3324 = (fma(_2517, _3218.z, fma(_2516, _3218.y, _3218.x * _2515)) + _3218.w) / _3264;
                                float _3328 = 1.0 - dot(vec2(_3323, _3324), vec2(_3323, _3324));
                                float _4401 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3330 = _3329 * (((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3306) / ((_3319 * 0.699999988079071044921875) + 1.0));
                                float _3342 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                                float _3343 = 1.0 - _830;
                                float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                                float _3351 = _3350 * _3350;
                                float _3352 = _3351 * _3351;
                                float _3353 = _3299 - _2801;
                                float _3354 = _3300 - _2802;
                                float _3355 = _3301 - _2803;
                                float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                                float _3363 = dot(vec3(_755, _758, _761), vec3((-0.0) - _2801, (-0.0) - _2802, (-0.0) - _2803));
                                float _4412 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3367 = dot(vec3(_755, _758, _761), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                                float _4423 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                                float _3375 = _3312 * _3351;
                                float _3376 = _3375 * _3375;
                                float _3382 = ((1.0 - _3376) * dot(vec3(_755, _758, _761), vec3(_3299, _3300, _3301))) + _3376;
                                float _4434 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3384 = 1.0 - _3351;
                                float _3394 = (0.5 / (((_3383 * ((_3366 * _3384) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3351) * _3366))) * _3383;
                                float _4445 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3404 = (_3329 * _3306) * (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3374 * _3374) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3404 * _3187.x;
                                frontier_phi_73_pred_1 = _3404 * _3187.y;
                                frontier_phi_73_pred_2 = _3330 * _3175.z;
                                frontier_phi_73_pred_3 = _3330 * _3175.y;
                                frontier_phi_73_pred_4 = _3330 * _3175.x;
                                frontier_phi_73_pred_5 = _3404 * _3187.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_73_pred;
                            _3409 = frontier_phi_73_pred_1;
                            _3413 = frontier_phi_73_pred_2;
                            _3412 = frontier_phi_73_pred_3;
                            _3411 = frontier_phi_73_pred_4;
                            _3410 = frontier_phi_73_pred_5;
                            _3117 = _3411 + _3130;
                            _3118 = _3412 + _3131;
                            _3119 = _3413 + _3132;
                            _3114 = _3408 + _3127;
                            _3115 = _3409 + _3128;
                            _3116 = _3410 + _3129;
                            if (_3134 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3134;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3117;
                        frontier_phi_67_pred_1 = _3118;
                        frontier_phi_67_pred_2 = _3119;
                        frontier_phi_67_pred_3 = _3116;
                        frontier_phi_67_pred_4 = _3115;
                        frontier_phi_67_pred_5 = _3114;
                    }
                    _2782 = frontier_phi_67_pred;
                    _2784 = frontier_phi_67_pred_1;
                    _2786 = frontier_phi_67_pred_2;
                    _2780 = frontier_phi_67_pred_3;
                    _2778 = frontier_phi_67_pred_4;
                    _2776 = frontier_phi_67_pred_5;
                    uint _2921 = _2920 + 1u;
                    if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2914 = _2776;
                        _2915 = _2778;
                        _2916 = _2780;
                        _2917 = _2782;
                        _2918 = _2784;
                        _2919 = _2786;
                        _2920 = _2921;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2784;
                frontier_phi_55_56_ladder_1 = _2786;
                frontier_phi_55_56_ladder_2 = _2782;
                frontier_phi_55_56_ladder_3 = _2780;
                frontier_phi_55_56_ladder_4 = _2778;
                frontier_phi_55_56_ladder_5 = _2776;
            }
            else
            {
                frontier_phi_55_56_ladder = _2670;
                frontier_phi_55_56_ladder_1 = _2672;
                frontier_phi_55_56_ladder_2 = _2668;
                frontier_phi_55_56_ladder_3 = _2666;
                frontier_phi_55_56_ladder_4 = _2664;
                frontier_phi_55_56_ladder_5 = _2662;
            }
            _2775 = frontier_phi_55_56_ladder_5;
            _2777 = frontier_phi_55_56_ladder_4;
            _2779 = frontier_phi_55_56_ladder_3;
            _2781 = frontier_phi_55_56_ladder_2;
            _2783 = frontier_phi_55_56_ladder;
            _2785 = frontier_phi_55_56_ladder_1;
        }
        float _2790 = isnan(1.0) ? _814 : (isnan(_814) ? 1.0 : min(_814, 1.0));
        _2574 = (_2790 * _2781) + _2007;
        _2576 = (_2790 * _2783) + _2009;
        _2578 = (_2790 * _2785) + _2011;
        _2580 = ((_2775 * _798) * _2790) + _2355;
        _2582 = ((_2777 * _800) * _2790) + _2357;
        _2584 = ((_2779 * _801) * _2790) + _2359;
    }
    else
    {
        _2574 = _2007;
        _2576 = _2009;
        _2578 = _2011;
        _2580 = _2355;
        _2582 = _2357;
        _2584 = _2359;
    }
    float _4461 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4472 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4483 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    uint _2604 = _245 + 6u;
    float _2612 = _736 / cbSceneParam._m0[86u].x;
    float _2613 = _737 / cbSceneParam._m0[86u].y;
    vec4 _2627 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2612, _2613, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2629 = _2627.x;
    float _2630 = _2627.y;
    float _2631 = _2627.z;
    float _2632 = _2627.w;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2687 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2688 = _2687 / _671;
        float _2699 = _2688 * _721;
        float _2700 = _722 * _2688;
        float _2701 = (-0.0) - _2700;
        float _2703 = _2688 * _723;
        float _2705 = (cbSceneParam._m0[77u].w * _2701) / _2687;
        float _2706 = _2705 + cbSceneParam._m0[79u].w;
        float _2707 = cbSceneParam._m0[79u].w - _2700;
        float _2713 = sqrt(((_2699 * _2699) + (_2700 * _2700)) + (_2703 * _2703));
        float _2716 = (1.0 - (cbSceneParam._m0[77u].w / _2687)) * _2713;
        float _2721 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2723 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2876;
        if (abs((_2701 - _2705) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2876 = ((((_2706 > 0.0) ? exp2(_2721 * _2706) : (2.0 - exp2(_2723 * _2706))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2716;
        }
        else
        {
            float _2836 = 1.0 / cbSceneParam._m0[80u].x;
            float _2837 = isnan(_2707) ? _2706 : (isnan(_2706) ? _2707 : max(_2706, _2707));
            float _2838 = isnan(_2707) ? _2706 : (isnan(_2706) ? _2707 : min(_2706, _2707));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            _2876 = ((abs(_2713 / _2701) * cbSceneParam._m0[80u].y) * ((((_2847 - _2848) * 2.0) - ((exp2(_2721 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0)))) - exp2(_2721 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))))) * _2836)) - ((exp2(_2723 * _2847) - exp2(_2723 * _2848)) * _2836))) + (_2716 * cbSceneParam._m0[80u].z);
        }
        vec4 _2878 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2612, _2613, 1.0), 0.0);
        float _2887 = exp2((_2876 * (-1.44269502162933349609375)) * (1.0 - _2878.w));
        float _2888 = log2(_2887);
        float _2904 = log2(_2632);
        _2725 = (exp2(_2904 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].x)) * _2878.x) / cbSceneParam._m0[78u].x)) + _2629;
        _2727 = (exp2(_2904 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].y)) * _2878.y) / cbSceneParam._m0[78u].y)) + _2630;
        _2729 = (exp2(_2904 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].z)) * _2878.z) / cbSceneParam._m0[78u].z)) + _2631;
        _2731 = _2887 * _2632;
    }
    else
    {
        _2725 = _2629;
        _2727 = _2630;
        _2729 = _2631;
        _2731 = _2632;
    }
    float _2743 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2744 = _2743 == 3.0;
    float _2745 = log2(_2731);
    float _2752 = exp2(_2745 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2574 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _814))) + ((_2580 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1622)) * cbPerFrame._m0[3u].x));
    float _2753 = exp2(_2745 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2576 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _814))) + ((_2582 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1622)) * cbPerFrame._m0[3u].x));
    float _2754 = exp2(_2745 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2578 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _814))) + ((_2584 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1622)) * cbPerFrame._m0[3u].x));
    float _2763 = (_2743 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2763 * (_2744 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2725)));
    SV_Target.y = _2763 * (_2744 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2727)));
    SV_Target.z = _2763 * (_2744 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.w = cbInstanceData._m0[_2604].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2604].w;
}


