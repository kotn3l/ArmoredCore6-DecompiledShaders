#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1318;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].y) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3927 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _398 = (_391 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _399 = (_391 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _400 = (_391 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].y) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3938 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _541 = ((_513.x - _532) * _391) + _532;
    float _542 = ((_513.y - _533) * _391) + _533;
    float _543 = ((_513.z - _534) * _391) + _534;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _568 = ((_555.z - _543) * _464) + _543;
    float _571 = ((((_555.x - _541) * _464) + _541) * 2.0) + (-1.0);
    float _572 = ((((_555.y - _542) * _464) + _542) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3949 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _625 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3960 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _633 = (_626 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _634 = (_626 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _473)) + _473;
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _663 = _661.x;
    float _681 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _663) * _391) + _663;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _681) * _464) + _681;
    float _702 = ((_647.x - _698) * cbMtdParam._m0[19u].z) + _698;
    float _704 = _702 - (_702 * _626);
    float _709 = (((_490.z - _568) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _568;
    vec4 _722 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _729 = (_722.x * 2.0) + (-1.0);
    float _730 = (_722.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3971 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _739 = (_626 * (_722.z - _709)) + _709;
    float _744 = _571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)));
    float _745 = _572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)));
    float _757 = (((_729 - _744) + (cbMtdParam._m0[21u].x * _744)) * _626) + _744;
    float _758 = (((_730 - _745) + (cbMtdParam._m0[21u].x * _745)) * _626) + _745;
    float _759 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) - _578)) + _578;
    float _764 = cbMtdParam._m0[22u].x + _591.w;
    float _767 = fma(_759, _239 * NORMAL.x, fma(_758, _246 * TANGENT.x, (_232 * _224) * _757));
    float _770 = fma(_759, _239 * NORMAL.y, fma(_758, _246 * TANGENT.y, (_232 * _225) * _757));
    float _773 = fma(_759, _239 * NORMAL.z, fma(_758, _246 * TANGENT.z, (_232 * _226) * _757));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _3982 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _781 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4004 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4015 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4026 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4037 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _786 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _800 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    float _866 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _867 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _888 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _891 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _905 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_905].z;
    float _4048 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _917 = 1.0 - _786;
    float _918 = _914 * _917;
    float _919 = _915 * _917;
    float _920 = _916 * _917;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _786;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _786;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _786;
    float _928 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    vec4 _940 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _866, cbSceneParam._m0[86u].y * _867));
    float _944 = ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * TEXCOORD_5.w) * _940.x;
    float _945 = dot(vec3(_778, _779, _780), vec3(_858, _859, _860));
    float _948 = _945 * 2.0;
    float _952 = (_948 * _778) - _858;
    float _953 = (_948 * _779) - _859;
    float _954 = (_948 * _780) - _860;
    float _958 = abs(dot(vec3(_858, _859, _860), vec3(_778, _779, _780)));
    float _4081 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _960 = sqrt(_781);
    float _973 = exp2((_960 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_960 * 3.0));
    float _979 = (1.0 - _973) * ((_960 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _980 = _973 * _960;
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1317;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1042 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1046 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1050 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1075 = _1008 + _778;
        float _1076 = _1012 + _779;
        float _1077 = _1016 + _780;
        float _1087 = fma(_1077, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075)) - _1042;
        float _1088 = fma(_1077, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075)) - _1046;
        float _1089 = fma(_1077, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075)) - _1050;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1042 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1046 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[34u].z) + ((((((_1050 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1145 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1111.x + (-0.5));
        float _1147 = _1145 * (_1111.y + (-0.5));
        float _1148 = _1145 * (_1111.z + (-0.5));
        float _1155 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1118.x + (-0.5));
        float _1157 = _1155 * (_1118.y + (-0.5));
        float _1158 = _1155 * (_1118.z + (-0.5));
        float _1165 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1125.x + (-0.5));
        float _1167 = _1165 * (_1125.y + (-0.5));
        float _1168 = _1165 * (_1125.z + (-0.5));
        float _1175 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1132.x + (-0.5));
        float _1177 = _1175 * (_1132.y + (-0.5));
        float _1178 = _1175 * (_1132.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1199 = (dot(vec3(_778, _779, _780), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1209 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4129 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1211 + 1.0))) + _1216) * _1179;
        float _1226 = _1147 * 0.5;
        float _1227 = _1157 * 0.5;
        float _1228 = _1167 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_778, _779, _780), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4162 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1253 + 1.0))) + _1258) * _1180;
        float _1268 = _1148 * 0.5;
        float _1269 = _1158 * 0.5;
        float _1270 = _1168 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_778, _779, _780), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4195 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1295 + 1.0))) + _1300) * _1181;
        _1317 = _1148;
        _1319 = _1147;
        _1320 = _1146;
        _1321 = _1158;
        _1322 = _1157;
        _1323 = _1156;
        _1324 = _1168;
        _1325 = _1167;
        _1326 = _1166;
        _1327 = _1181;
        _1328 = _1180;
        _1329 = _1179;
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1318;
        _1319 = _1318;
        _1320 = _1318;
        _1321 = _1318;
        _1322 = _1318;
        _1323 = _1318;
        _1324 = _1318;
        _1325 = _1318;
        _1326 = _1318;
        _1327 = _1318;
        _1328 = _1318;
        _1329 = _1318;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1360 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1364 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1387 = _1008 + _778;
        float _1388 = _1012 + _779;
        float _1389 = _1016 + _780;
        float _1399 = fma(_1389, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387)) - _1356;
        float _1400 = fma(_1389, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387)) - _1360;
        float _1401 = fma(_1389, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387)) - _1364;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1356 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1360 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[35u].z) + ((((((_1364 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1455 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1422.x + (-0.5));
        float _1457 = _1455 * (_1422.y + (-0.5));
        float _1458 = _1455 * (_1422.z + (-0.5));
        float _1465 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1429.x + (-0.5));
        float _1467 = _1465 * (_1429.y + (-0.5));
        float _1468 = _1465 * (_1429.z + (-0.5));
        float _1475 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1436.x + (-0.5));
        float _1477 = _1475 * (_1436.y + (-0.5));
        float _1478 = _1475 * (_1436.z + (-0.5));
        float _1485 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1443.x + (-0.5));
        float _1487 = _1485 * (_1443.y + (-0.5));
        float _1488 = _1485 * (_1443.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_778, _779, _780), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4258 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1519 + 1.0))) + _1524) * _1489;
        float _1534 = _1457 * 0.5;
        float _1535 = _1467 * 0.5;
        float _1536 = _1477 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_778, _779, _780), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4291 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1561 + 1.0))) + _1566) * _1490;
        float _1576 = _1458 * 0.5;
        float _1577 = _1468 * 0.5;
        float _1578 = _1478 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_778, _779, _780), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4324 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1603 + 1.0))) + _1608) * _1491;
        _1625 = _1458;
        _1626 = _1457;
        _1627 = _1456;
        _1628 = _1468;
        _1629 = _1467;
        _1630 = _1466;
        _1631 = _1478;
        _1632 = _1477;
        _1633 = _1476;
        _1634 = _1491;
        _1635 = _1490;
        _1636 = _1489;
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1318;
        _1626 = _1318;
        _1627 = _1318;
        _1628 = _1318;
        _1629 = _1318;
        _1630 = _1318;
        _1631 = _1318;
        _1632 = _1318;
        _1633 = _1318;
        _1634 = _1318;
        _1635 = _1318;
        _1636 = _1318;
        _1637 = 0.0;
        _1638 = 0.0;
        _1639 = 0.0;
    }
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1330)) + _1330;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1331)) + _1331;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1332)) + _1332;
    float _1672 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1649));
    float _1693 = _952 * 0.5;
    float _1694 = _953 * 0.5;
    float _1695 = _954 * 0.5;
    float _1696 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1699 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1702 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1709 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1317, _1321, _1324, _1327));
        float _1713 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1717 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1724 = dot(vec4(cbModelParam._m0[39u]), vec4(_1693, _1694, _1695, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1693, _1694, _1695, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_954, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952));
        float _1824 = fma(_954, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952));
        float _1827 = fma(_954, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1855 = frontier_phi_14_12_ladder;
        }
        float _2027;
        if (_1824 > 0.0)
        {
            _2027 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2027 = frontier_phi_23_19_ladder;
        }
        float _2322;
        if (_1827 > 0.0)
        {
            _2322 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2322 = frontier_phi_35_30_ladder;
        }
        float _2324 = isnan(_2027) ? _1855 : (isnan(_1855) ? _2027 : min(_1855, _2027));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1821) + _1810;
        float _2330 = (_2325 * _1824) + _1814;
        float _2331 = (_2325 * _1827) + _1818;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2332;
        float _2336 = _2332 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 > _2336) || ((_2330 < _2334) || ((_2329 < _2334) || (_2329 > _2336))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_13_35_ladder = _2476.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2476.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2476.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_13_35_ladder_2;
        _1845 = frontier_phi_13_35_ladder_1;
        _1847 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_952, _953, _954), _1762);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_954, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952));
        float _1920 = fma(_954, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952));
        float _1923 = fma(_954, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952));
        float _2032;
        if (_1917 > 0.0)
        {
            _2032 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2032 = frontier_phi_25_21_ladder;
        }
        float _2349;
        if (_1920 > 0.0)
        {
            _2349 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2349 = frontier_phi_37_32_ladder;
        }
        float _2687;
        if (_1923 > 0.0)
        {
            _2687 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2687 = frontier_phi_47_44_ladder;
        }
        float _2689 = isnan(_2349) ? _2032 : (isnan(_2032) ? _2349 : min(_2032, _2349));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _1917) + _1906;
        float _2695 = (_2690 * _1920) + _1910;
        float _2696 = (_2690 * _1923) + _1914;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_22_47_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_22_47_ladder_2;
        _1944 = frontier_phi_22_47_ladder_1;
        _1946 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_952, _953, _954), _1852);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1959 = (((_979 * _928) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1961 = (((_979 * _930) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1963 = (((_979 * _931) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1946 - _1847)) + _1847);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2018 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2019 = _2006 / _2018;
    float _2020 = _2010 / _2018;
    float _2021 = _2014 / _2018;
    float _2168;
    float _2169;
    float _2170;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2048 = ((uint(_2021 > cbSceneParam._m0[59u].y) + uint(_2021 > cbSceneParam._m0[59u].x)) + uint(_2021 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2049 = _2048 + 43u;
        uint _2057 = _2048 + 44u;
        uint _2065 = _2048 + 45u;
        uint _2073 = _2048 + 46u;
        float _2084 = fma(_2018, cbSceneParam._m0[_2049].w, fma(_2014, cbSceneParam._m0[_2049].z, fma(_2010, cbSceneParam._m0[_2049].y, _2006 * cbSceneParam._m0[_2049].x)));
        float _2088 = fma(_2018, cbSceneParam._m0[_2057].w, fma(_2014, cbSceneParam._m0[_2057].z, fma(_2010, cbSceneParam._m0[_2057].y, _2006 * cbSceneParam._m0[_2057].x)));
        float _2096 = fma(_2018, cbSceneParam._m0[_2073].w, fma(_2014, cbSceneParam._m0[_2073].z, fma(_2010, cbSceneParam._m0[_2073].y, _2006 * cbSceneParam._m0[_2073].x)));
        float _2101 = cbSceneParam._m0[33u].z * _2096;
        float _2103 = cbSceneParam._m0[33u].w * _2096;
        float _2106 = fma(_2018, cbSceneParam._m0[_2065].w, fma(_2014, cbSceneParam._m0[_2065].z, fma(_2010, cbSceneParam._m0[_2065].y, _2006 * cbSceneParam._m0[_2065].x))) / _2096;
        float _2154 = (cbSceneParam._m0[33u].x - sqrt(((_2020 * _2020) + (_2019 * _2019)) + (_2021 * _2021))) * cbSceneParam._m0[33u].y;
        float _4450 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2161 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 + _2084) / _2096, (_2103 + _2088) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2084) / _2096, (_2088 - _2101) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 - _2101) / _2096, (_2088 - _2103) / _2096), _2106), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 - _2103) / _2096, (_2101 + _2088) / _2096), _2106), 0.0)).x), vec4(0.25)));
        _2168 = 1.0 - (_2161 * cbSceneParam._m0[34u].x);
        _2169 = 1.0 - (_2161 * cbSceneParam._m0[34u].y);
        _2170 = 1.0 - (_2161 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2168 = 1.0;
        _2169 = 1.0;
        _2170 = 1.0;
    }
    float _2234;
    float _2236;
    float _2238;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2222 = fma(_2018, cbSceneParam._m0[63u].w, fma(_2014, cbSceneParam._m0[63u].z, fma(_2010, cbSceneParam._m0[63u].y, _2006 * cbSceneParam._m0[63u].x)));
        float _2223 = fma(_2018, cbSceneParam._m0[60u].w, fma(_2014, cbSceneParam._m0[60u].z, fma(_2010, cbSceneParam._m0[60u].y, _2006 * cbSceneParam._m0[60u].x))) / _2222;
        float _2224 = fma(_2018, cbSceneParam._m0[61u].w, fma(_2014, cbSceneParam._m0[61u].z, fma(_2010, cbSceneParam._m0[61u].y, _2006 * cbSceneParam._m0[61u].x))) / _2222;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2223 >= cbSceneParam._m0[64u].x) && (_2224 >= cbSceneParam._m0[64u].y)) && (_2223 <= cbSceneParam._m0[64u].z)) && (_2224 <= cbSceneParam._m0[64u].w))
        {
            float _2362 = fma(_2018, cbSceneParam._m0[62u].w, fma(_2014, cbSceneParam._m0[62u].z, fma(_2010, cbSceneParam._m0[62u].y, _2006 * cbSceneParam._m0[62u].x))) / _2222;
            float _2366 = isnan(cbSceneParam._m0[41u].w) ? _2362 : (isnan(_2362) ? cbSceneParam._m0[41u].w : max(_2362, cbSceneParam._m0[41u].w));
            float _2409 = (cbSceneParam._m0[33u].x - sqrt(((_2020 * _2020) + (_2019 * _2019)) + (_2021 * _2021))) * cbSceneParam._m0[33u].y;
            float _4466 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
            float _2416 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2223, cbSceneParam._m0[33u].w + _2224), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2223, _2224 - cbSceneParam._m0[33u].z), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2223 - cbSceneParam._m0[33u].z, _2224 - cbSceneParam._m0[33u].w), _2366), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2223 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2224), _2366), 0.0)).x), vec4(0.25)));
            float _2420 = 1.0 - (_2416 * cbSceneParam._m0[34u].x);
            float _2421 = 1.0 - (_2416 * cbSceneParam._m0[34u].y);
            float _2422 = 1.0 - (_2416 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
            frontier_phi_34_33_ladder_1 = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
            frontier_phi_34_33_ladder_2 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
        }
        else
        {
            frontier_phi_34_33_ladder = _2170;
            frontier_phi_34_33_ladder_1 = _2169;
            frontier_phi_34_33_ladder_2 = _2168;
        }
        _2234 = frontier_phi_34_33_ladder_2;
        _2236 = frontier_phi_34_33_ladder_1;
        _2238 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2234 = _2168;
        _2236 = _2169;
        _2238 = _2170;
    }
    uvec4 _2243 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2245 = _2243.x * 14u;
    uint _2246 = _2245 + 13u;
    float _2253 = _944 + (-1.0);
    float _2258 = (cbLight._m0[_2246].x * _2253) + 1.0;
    float _2259 = (cbLight._m0[_2246].y * _2253) + 1.0;
    float _2260 = (cbLight._m0[_2246].z * _2253) + 1.0;
    float _2261 = (cbLight._m0[_2246].w * _2253) + 1.0;
    uint _2262 = _2245 + 5u;
    float _2268 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2272 = _2245 + 4u;
    float _2281 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2285 = _2245 | 1u;
    float _2296 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_778, _779, _780));
    float _2299 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_778, _779, _780));
    float _4502 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _4513 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2304 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2306 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2313 = ((cbLight._m0[_2262].x * _2268) * _2306) + (((cbLight._m0[_2272].x * _2234) * _2281) * _2304);
    float _2314 = ((_2268 * cbLight._m0[_2262].y) * _2306) + (((cbLight._m0[_2272].y * _2236) * _2281) * _2304);
    float _2315 = ((_2268 * cbLight._m0[_2262].z) * _2306) + (((cbLight._m0[_2272].z * _2238) * _2281) * _2304);
    uvec4 _2319 = floatBitsToUint(cbLight._m0[_2245 + 12u]);
    bool _2321 = _2319.x == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2321)
    {
        _2423 = _2313;
        _2425 = _2314;
        _2427 = _2315;
    }
    else
    {
        uint _2431 = _2245 + 6u;
        float _2447 = (dot(vec3(cbLight._m0[_2245 + 2u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4524 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2450 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2423 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2313;
        _2425 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2314;
        _2427 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2315;
    }
    bool _2430 = _2319.y == 0u;
    float _2485;
    float _2487;
    float _2489;
    if (_2430)
    {
        _2485 = _2423;
        _2487 = _2425;
        _2489 = _2427;
    }
    else
    {
        uint _2658 = _2245 + 7u;
        float _2674 = (dot(vec3(cbLight._m0[_2245 + 3u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2675 = _2674 * _2674;
        float _4540 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2676 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2677 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2485 = (((cbLight._m0[_2658].x * 0.3183098733425140380859375) * _2676) * _2677) + _2423;
        _2487 = (((cbLight._m0[_2658].y * 0.3183098733425140380859375) * _2676) * _2677) + _2425;
        _2489 = (((cbLight._m0[_2658].z * 0.3183098733425140380859375) * _2676) * _2677) + _2427;
    }
    uint _2492 = _2245 + 8u;
    float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _781) * 0.949999988079071044921875);
    float _2506 = _2505 * _2505;
    float _2507 = cbLight._m0[_2245].x + _858;
    float _2508 = cbLight._m0[_2245].y + _859;
    float _2509 = cbLight._m0[_2245].z + _860;
    float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
    float _2514 = _2513 * _2507;
    float _2515 = _2513 * _2508;
    float _2516 = _2513 * _2509;
    float _2517 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2245].xyz));
    float _4556 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _4567 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2521 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2522 = dot(vec3(_778, _779, _780), vec3(_2514, _2515, _2516));
    float _4578 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2526 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2514, _2515, _2516));
    float _4589 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = _2506 * _2506;
    float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
    float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2543 = 0.959999978542327880859375 - _925;
    float _2545 = 0.959999978542327880859375 - _926;
    float _2546 = 0.959999978542327880859375 - _927;
    float _2553 = 1.0 - _2506;
    float _2564 = (0.5 / (((_2521 * ((_2520 * _2553) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2553) + _2506) * _2520))) * _2520;
    float _4600 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2566 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
    uint _2580 = _2245 + 9u;
    float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _781) * 0.949999988079071044921875);
    float _2592 = _2591 * _2591;
    float _2593 = cbLight._m0[_2285].x + _858;
    float _2594 = cbLight._m0[_2285].y + _859;
    float _2595 = cbLight._m0[_2285].z + _860;
    float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
    float _2600 = _2599 * _2593;
    float _2601 = _2599 * _2594;
    float _2602 = _2599 * _2595;
    float _2603 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2285].xyz));
    float _4611 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2607 = dot(vec3(_778, _779, _780), vec3(_2600, _2601, _2602));
    float _4622 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2611 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2600, _2601, _2602));
    float _4633 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2615 = _2592 * _2592;
    float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
    float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2633 = 1.0 - _2592;
    float _2643 = (0.5 / (((_2521 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2633) + _2592) * _2606))) * _2606;
    float _4644 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2645 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
    float _2655 = (((((_2626 * _2543) + _928) * cbLight._m0[_2580].x) * _2645) * _2268) + ((((cbLight._m0[_2492].x * _2234) * ((_2542 * _2543) + _928)) * _2566) * _2281);
    float _2656 = (((((_2626 * _2545) + _930) * cbLight._m0[_2580].y) * _2645) * _2268) + ((((cbLight._m0[_2492].y * _2236) * ((_2542 * _2545) + _930)) * _2566) * _2281);
    float _2657 = (((((_2626 * _2546) + _931) * cbLight._m0[_2580].z) * _2645) * _2268) + ((((cbLight._m0[_2492].z * _2238) * ((_2542 * _2546) + _931)) * _2566) * _2281);
    float _2713;
    float _2715;
    float _2717;
    if (_2321)
    {
        _2713 = _2655;
        _2715 = _2656;
        _2717 = _2657;
    }
    else
    {
        uint _2719 = _2245 + 2u;
        uint _2723 = _2245 + 10u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _781) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _858;
        float _2740 = cbLight._m0[_2719].y + _859;
        float _2741 = cbLight._m0[_2719].z + _860;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2719].xyz));
        float _4655 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2753 = dot(vec3(_778, _779, _780), vec3(_2746, _2747, _2748));
        float _4666 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4677 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2772 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2779 = 1.0 - _2738;
        float _2789 = (0.5 / (((_2521 * ((_2752 * _2779) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2779) + _2738) * _2752))) * _2752;
        float _4688 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2791 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2792 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2713 = (((((_2772 * _2543) + _928) * cbLight._m0[_2723].x) * _2791) * _2792) + _2655;
        _2715 = (((((_2772 * _2545) + _930) * cbLight._m0[_2723].y) * _2791) * _2792) + _2656;
        _2717 = (((((_2772 * _2546) + _931) * cbLight._m0[_2723].z) * _2791) * _2792) + _2657;
    }
    float _2823;
    float _2825;
    float _2827;
    if (_2430)
    {
        _2823 = _2713;
        _2825 = _2715;
        _2827 = _2717;
    }
    else
    {
        uint _2834 = _2245 + 3u;
        uint _2838 = _2245 + 11u;
        float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2834].w)) * _781) * 0.949999988079071044921875);
        float _2853 = _2852 * _2852;
        float _2854 = cbLight._m0[_2834].x + _858;
        float _2855 = cbLight._m0[_2834].y + _859;
        float _2856 = cbLight._m0[_2834].z + _860;
        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
        float _2861 = _2860 * _2854;
        float _2862 = _2860 * _2855;
        float _2863 = _2860 * _2856;
        float _2864 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2834].xyz));
        float _4704 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2868 = dot(vec3(_778, _779, _780), vec3(_2861, _2862, _2863));
        float _4715 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2872 = dot(vec3(cbLight._m0[_2834].xyz), vec3(_2861, _2862, _2863));
        float _4726 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2876 = _2853 * _2853;
        float _2880 = ((_2871 * _2871) * (_2876 + (-1.0))) + 1.0;
        float _2887 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
        float _2894 = 1.0 - _2853;
        float _2904 = (0.5 / (((_2521 * ((_2867 * _2894) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2521 * _2894) + _2853) * _2867))) * _2867;
        float _4737 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2906 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2876 / ((_2880 * _2880) * 3.141590118408203125));
        float _2907 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2823 = (((((_2887 * _2543) + _928) * cbLight._m0[_2838].x) * _2906) * _2907) + _2713;
        _2825 = (((((_2887 * _2545) + _930) * cbLight._m0[_2838].y) * _2906) * _2907) + _2715;
        _2827 = (((((_2887 * _2546) + _931) * cbLight._m0[_2838].z) * _2906) * _2907) + _2717;
    }
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_2243.y == 0u)
    {
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.x;
        uint _2940 = uint((float(_2928.y) * floor(float(uint(cbSceneParam._m0[85u].y * _867) / _2929))) + floor(float(uint(cbSceneParam._m0[85u].x * _866) / _2929)));
        float _2950 = (log2(_2021 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2951 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        uint _2954 = uint(isnan(14.0) ? _2951 : (isnan(_2951) ? 14.0 : min(_2951, 14.0)));
        uvec4 _2959 = texelFetch(g_lightClusterGridBuffer, int(((_2954 << 2u) + (_2940 << 6u)) >> 2u));
        uint _2960 = _2959.x;
        uint _2961 = _2928.z;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((((1u << ((_2961 >> 4u) & 15u)) + 4294967295u) & _2960) == 0u) || ((_2961 & 240u) == 0u))
        {
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
        }
        else
        {
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            uint _3191 = 0u;
            uint _3200;
            bool _3201;
            for (;;)
            {
                _3200 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                _3201 = _3200 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3201)
                {
                    frontier_phi_66_pred = _3190;
                    frontier_phi_66_pred_1 = _3189;
                    frontier_phi_66_pred_2 = _3188;
                    frontier_phi_66_pred_3 = _3187;
                    frontier_phi_66_pred_4 = _3186;
                    frontier_phi_66_pred_5 = _3185;
                }
                else
                {
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    uint _3315;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3200;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    for (;;)
                    {
                        uint _3319 = uint(findLSB(_3315)) + (_3191 << 5u);
                        uint _3316 = (_3315 + 4294967295u) & _3315;
                        uint _3321 = _3319 * 48u;
                        vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 3u)).x));
                        uint _3341 = (_3319 * 48u) + 4u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3360 = (_3319 * 48u) + 8u;
                        vec3 _3371 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x));
                        float _3375 = _3335.x - _2019;
                        float _3376 = _3335.y - _2020;
                        float _3377 = _3335.z - _2021;
                        float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                        float _3381 = inversesqrt(_3378);
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3385 = dot(vec3(_885, _888, _891), vec3(_3382, _3383, _3384));
                        float _3390 = 1.0 - (_3378 * _3335.w);
                        float _4763 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3391 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3392 = sqrt(_3378) * _3354.w;
                        float _3395 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                        float _3396 = _3395 * _3395;
                        float _3399 = ((1.0 - _3396) * _3385) + _3396;
                        float _3402 = _3392 * _3392;
                        float _3406 = ((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3391) / ((_3402 * 0.699999988079071044921875) + 1.0);
                        float _3410 = (-0.0) - _2019;
                        float _3411 = (-0.0) - _2020;
                        float _3412 = (-0.0) - _2021;
                        float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                        float _3417 = _3416 * _3410;
                        float _3418 = _3416 * _3411;
                        float _3419 = _3416 * _3412;
                        float _3426 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                        float _3427 = 1.0 - _960;
                        float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                        float _3435 = _3434 * _3434;
                        float _3436 = _3435 * _3435;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3439 = _3419 + _3384;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3447 = dot(vec3(_885, _888, _891), vec3(_3417, _3418, _3419));
                        float _4779 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3450 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3451 = dot(vec3(_885, _888, _891), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                        float _4790 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3454 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                        float _3459 = _3395 * _3435;
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3385) + _3460;
                        float _4801 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3465 = 1.0 - _3435;
                        float _3475 = (0.5 / (((_3464 * ((_3450 * _3465) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3435) * _3450))) * _3464;
                        float _4812 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3486 = (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3458 * _3458) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125))) * _3391;
                        _3244 = (_3406 * _3354.x) + _3312;
                        _3245 = (_3406 * _3354.y) + _3313;
                        _3246 = (_3406 * _3354.z) + _3314;
                        _3241 = (_3486 * _3371.x) + _3309;
                        _3242 = (_3486 * _3371.y) + _3310;
                        _3243 = (_3486 * _3371.z) + _3311;
                        if (_3316 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3316;
                        }
                    }
                    frontier_phi_66_pred = _3246;
                    frontier_phi_66_pred_1 = _3245;
                    frontier_phi_66_pred_2 = _3244;
                    frontier_phi_66_pred_3 = _3243;
                    frontier_phi_66_pred_4 = _3242;
                    frontier_phi_66_pred_5 = _3241;
                }
                _3051 = frontier_phi_66_pred;
                _3049 = frontier_phi_66_pred_1;
                _3047 = frontier_phi_66_pred_2;
                _3045 = frontier_phi_66_pred_3;
                _3043 = frontier_phi_66_pred_4;
                _3041 = frontier_phi_66_pred_5;
                uint _3192 = _3191 + 1u;
                if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3185 = _3041;
                    _3186 = _3043;
                    _3187 = _3045;
                    _3188 = _3047;
                    _3189 = _3049;
                    _3190 = _3051;
                    _3191 = _3192;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
        }
        uvec4 _3054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3055 = _3054.z;
        uint _3057 = (_3055 >> 8u) & 15u;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((4294967295u << _3057) & _2960) == 0u)
        {
            _3153 = _3040;
            _3155 = _3042;
            _3157 = _3044;
            _3159 = _3046;
            _3161 = _3048;
            _3163 = _3050;
        }
        else
        {
            float _3178 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
            float _3179 = _3178 * _2019;
            float _3180 = _3178 * _2020;
            float _3181 = _3178 * _2021;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3057 < ((_3055 >> 12u) & 15u))
            {
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3292 = _3040;
                float _3293 = _3042;
                float _3294 = _3044;
                float _3295 = _3046;
                float _3296 = _3048;
                float _3297 = _3050;
                uint _3298 = _3057;
                uint _3307;
                bool _3308;
                for (;;)
                {
                    _3307 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                    _3308 = _3307 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3308)
                    {
                        frontier_phi_72_pred = _3297;
                        frontier_phi_72_pred_1 = _3296;
                        frontier_phi_72_pred_2 = _3295;
                        frontier_phi_72_pred_3 = _3294;
                        frontier_phi_72_pred_4 = _3293;
                        frontier_phi_72_pred_5 = _3292;
                    }
                    else
                    {
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        float _3509 = _3297;
                        uint _3510 = _3307;
                        uint _3511;
                        vec4 _3536;
                        float _3537;
                        vec4 _3552;
                        vec3 _3564;
                        vec4 _3579;
                        vec4 _3594;
                        float _3640;
                        bool _3641;
                        for (;;)
                        {
                            uint _3521 = ((_3298 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3510));
                            _3511 = (_3510 + 4294967295u) & _3510;
                            uint _3523 = _3521 * 40u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3537 = _3536.w;
                            uint _3539 = (_3521 * 40u) + 4u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3521 * 40u) + 8u;
                            _3564 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x));
                            uint _3566 = (_3521 * 40u) + 16u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3521 * 40u) + 20u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3521 * 40u) + 24u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3615 = (_3521 * 40u) + 28u;
                            vec4 _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            _3640 = fma(_2021, _3628.z, fma(_2020, _3628.y, _3628.x * _2019)) + _3628.w;
                            _3641 = !((fma(_2021, _3609.z, fma(_2020, _3609.y, _3609.x * _2019)) + _3609.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3641)
                            {
                                float _3668 = _3536.x - _2019;
                                float _3669 = _3536.y - _2020;
                                float _3670 = _3536.z - _2021;
                                float _3671 = dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670));
                                float _3674 = inversesqrt(_3671);
                                float _3675 = _3674 * _3668;
                                float _3676 = _3674 * _3669;
                                float _3677 = _3674 * _3670;
                                float _3681 = 1.0 - (_3671 / (_3537 * _3537));
                                float _4823 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3686 = sqrt(_3671) * _3552.w;
                                float _3688 = 1.39999997615814208984375 / (_3686 + 1.39999997615814208984375);
                                float _3689 = _3688 * _3688;
                                float _3692 = ((1.0 - _3689) * dot(vec3(_3675, _3676, _3677), vec3(_885, _888, _891))) + _3689;
                                float _3695 = _3686 * _3686;
                                float _3699 = (fma(_2021, _3579.z, fma(_2020, _3579.y, _3579.x * _2019)) + _3579.w) / _3640;
                                float _3700 = (fma(_2021, _3594.z, fma(_2020, _3594.y, _3594.x * _2019)) + _3594.w) / _3640;
                                float _3704 = 1.0 - dot(vec2(_3699, _3700), vec2(_3699, _3700));
                                float _4839 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3705 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3706 = _3705 * (((isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0))) * _3682) / ((_3695 * 0.699999988079071044921875) + 1.0));
                                float _3718 = exp2(log2(1.0 / ((_3695 * 3.5) + 5.0)) * 0.25);
                                float _3719 = 1.0 - _960;
                                float _3726 = sqrt(1.0 - ((1.0 - (_3719 * _3719)) * (1.0 - (_3718 * _3718))));
                                float _3727 = _3726 * _3726;
                                float _3728 = _3727 * _3727;
                                float _3729 = _3675 - _3179;
                                float _3730 = _3676 - _3180;
                                float _3731 = _3677 - _3181;
                                float _3735 = inversesqrt(dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731)));
                                float _3739 = dot(vec3(_885, _888, _891), vec3((-0.0) - _3179, (-0.0) - _3180, (-0.0) - _3181));
                                float _4850 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3743 = dot(vec3(_885, _888, _891), vec3(_3735 * _3729, _3735 * _3730, _3735 * _3731));
                                float _4861 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3750 = ((_3746 * _3746) * (_3728 + (-1.0))) + 1.0;
                                float _3751 = _3688 * _3727;
                                float _3752 = _3751 * _3751;
                                float _3758 = ((1.0 - _3752) * dot(vec3(_885, _888, _891), vec3(_3675, _3676, _3677))) + _3752;
                                float _4872 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3760 = 1.0 - _3727;
                                float _3770 = (0.5 / (((_3759 * ((_3742 * _3760) + _3727)) + 9.9999999392252902907785028219223e-09) + (((_3759 * _3760) + _3727) * _3742))) * _3759;
                                float _4883 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3780 = (_3705 * _3682) * (((_3728 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3750 * _3750) * ((_3695 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3706 * _3552.y;
                                frontier_phi_78_pred_1 = _3706 * _3552.x;
                                frontier_phi_78_pred_2 = _3780 * _3564.z;
                                frontier_phi_78_pred_3 = _3780 * _3564.y;
                                frontier_phi_78_pred_4 = _3780 * _3564.x;
                                frontier_phi_78_pred_5 = _3706 * _3552.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3788 = frontier_phi_78_pred;
                            _3787 = frontier_phi_78_pred_1;
                            _3786 = frontier_phi_78_pred_2;
                            _3785 = frontier_phi_78_pred_3;
                            _3784 = frontier_phi_78_pred_4;
                            _3789 = frontier_phi_78_pred_5;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            if (_3511 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3511;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3496;
                        frontier_phi_72_pred_1 = _3495;
                        frontier_phi_72_pred_2 = _3494;
                        frontier_phi_72_pred_3 = _3493;
                        frontier_phi_72_pred_4 = _3492;
                        frontier_phi_72_pred_5 = _3491;
                    }
                    _3164 = frontier_phi_72_pred;
                    _3162 = frontier_phi_72_pred_1;
                    _3160 = frontier_phi_72_pred_2;
                    _3158 = frontier_phi_72_pred_3;
                    _3156 = frontier_phi_72_pred_4;
                    _3154 = frontier_phi_72_pred_5;
                    uint _3299 = _3298 + 1u;
                    if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3292 = _3154;
                        _3293 = _3156;
                        _3294 = _3158;
                        _3295 = _3160;
                        _3296 = _3162;
                        _3297 = _3164;
                        _3298 = _3299;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3164;
                frontier_phi_60_61_ladder_1 = _3162;
                frontier_phi_60_61_ladder_2 = _3158;
                frontier_phi_60_61_ladder_3 = _3156;
                frontier_phi_60_61_ladder_4 = _3154;
                frontier_phi_60_61_ladder_5 = _3160;
            }
            else
            {
                frontier_phi_60_61_ladder = _3050;
                frontier_phi_60_61_ladder_1 = _3048;
                frontier_phi_60_61_ladder_2 = _3044;
                frontier_phi_60_61_ladder_3 = _3042;
                frontier_phi_60_61_ladder_4 = _3040;
                frontier_phi_60_61_ladder_5 = _3046;
            }
            _3153 = frontier_phi_60_61_ladder_4;
            _3155 = frontier_phi_60_61_ladder_3;
            _3157 = frontier_phi_60_61_ladder_2;
            _3159 = frontier_phi_60_61_ladder_5;
            _3161 = frontier_phi_60_61_ladder_1;
            _3163 = frontier_phi_60_61_ladder;
        }
        float _3168 = isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0));
        _2973 = (_3168 * _3159) + _2485;
        _2975 = (_3168 * _3161) + _2487;
        _2977 = (_3168 * _3163) + _2489;
        _2979 = ((_3153 * _928) * _3168) + _2823;
        _2981 = ((_3155 * _930) * _3168) + _2825;
        _2983 = ((_3157 * _931) * _3168) + _2827;
    }
    else
    {
        _2973 = _2485;
        _2975 = _2487;
        _2977 = _2489;
        _2979 = _2823;
        _2981 = _2825;
        _2983 = _2827;
    }
    float _4899 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4910 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4921 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    uint _3003 = _252 + 6u;
    float _3011 = _866 / cbSceneParam._m0[86u].x;
    float _3012 = _867 / cbSceneParam._m0[86u].y;
    vec4 _3026 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, (log2((isnan(cbSceneParam._m0[77u].w) ? _800 : (isnan(_800) ? cbSceneParam._m0[77u].w : min(_800, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3028 = _3026.x;
    float _3029 = _3026.y;
    float _3030 = _3026.z;
    float _3031 = _3026.w;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    if (_800 > cbSceneParam._m0[78u].w)
    {
        float _3065 = isnan(_800) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _800 : min(cbSceneParam._m0[80u].w, _800));
        float _3066 = _3065 / _800;
        float _3077 = _3066 * _851;
        float _3078 = _852 * _3066;
        float _3079 = (-0.0) - _3078;
        float _3081 = _3066 * _853;
        float _3083 = (cbSceneParam._m0[77u].w * _3079) / _3065;
        float _3084 = _3083 + cbSceneParam._m0[79u].w;
        float _3085 = cbSceneParam._m0[79u].w - _3078;
        float _3091 = sqrt(((_3077 * _3077) + (_3078 * _3078)) + (_3081 * _3081));
        float _3094 = (1.0 - (cbSceneParam._m0[77u].w / _3065)) * _3091;
        float _3099 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3101 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3254;
        if (abs((_3079 - _3083) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3254 = ((((_3084 > 0.0) ? exp2(_3099 * _3084) : (2.0 - exp2(_3101 * _3084))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3094;
        }
        else
        {
            float _3214 = 1.0 / cbSceneParam._m0[80u].x;
            float _3215 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : max(_3084, _3085));
            float _3216 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : min(_3084, _3085));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            _3254 = ((abs(_3091 / _3079) * cbSceneParam._m0[80u].y) * ((((_3225 - _3226) * 2.0) - ((exp2(_3099 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0)))) - exp2(_3099 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))))) * _3214)) - ((exp2(_3101 * _3225) - exp2(_3101 * _3226)) * _3214))) + (_3094 * cbSceneParam._m0[80u].z);
        }
        vec4 _3256 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, 1.0), 0.0);
        float _3265 = exp2((_3254 * (-1.44269502162933349609375)) * (1.0 - _3256.w));
        float _3266 = log2(_3265);
        float _3282 = log2(_3031);
        _3103 = (exp2(_3282 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].x)) * _3256.x) / cbSceneParam._m0[78u].x)) + _3028;
        _3105 = (exp2(_3282 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].y)) * _3256.y) / cbSceneParam._m0[78u].y)) + _3029;
        _3107 = (exp2(_3282 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].z)) * _3256.z) / cbSceneParam._m0[78u].z)) + _3030;
        _3109 = _3265 * _3031;
    }
    else
    {
        _3103 = _3028;
        _3105 = _3029;
        _3107 = _3030;
        _3109 = _3031;
    }
    float _3121 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3122 = _3121 == 3.0;
    float _3123 = log2(_3109);
    float _3130 = exp2(_3123 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2973 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _944))) + ((_2979 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _3131 = exp2(_3123 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2975 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _944))) + ((_2981 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _3132 = exp2(_3123 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2977 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _944))) + ((_2983 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _3141 = (_3121 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3141 * (_3122 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3103)));
    SV_Target.y = _3141 * (_3122 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3105)));
    SV_Target.z = _3141 * (_3122 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3107)));
    SV_Target.w = cbInstanceData._m0[_3003].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3003].w;
}


