#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1041;
float _3424;
float _3425;
float _3426;
float _3427;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3436 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _350 = _348.x;
    float _351 = 1.0 - _350;
    float _367 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_350 - _351) * cbMtdParam._m0[24u].z) + _351) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3447 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _375 = (_368 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) + _272;
    float _376 = (_368 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) + _273;
    float _377 = (_368 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) + _274;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _392 = _390.x;
    float _394 = _392 - (_392 * _368);
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3458 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _424 = (_368 * (_407.z - _317)) + _317;
    float _436 = (((_414 - _322) + (cbMtdParam._m0[21u].x * _322)) * _368) + _322;
    float _437 = (((_415 - _324) + (cbMtdParam._m0[21u].x * _324)) * _368) + _324;
    float _438 = (_368 * (sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) - _331)) + _331;
    float _443 = cbMtdParam._m0[22u].x + _313.w;
    float _446 = fma(_438, _213 * NORMAL.x, fma(_437, _220 * TANGENT.x, (_206 * _198) * _436));
    float _449 = fma(_438, _213 * NORMAL.y, fma(_437, _220 * TANGENT.y, (_206 * _199) * _436));
    float _452 = fma(_438, _213 * NORMAL.z, fma(_437, _220 * TANGENT.z, (_206 * _200) * _436));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3469 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _460 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3491 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3502 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3513 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3524 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _465 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    vec4 _544 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _546 = _544.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _721 = sqrt(((_530 * _530) + (_531 * _531)) + (_532 * _532));
        float _727 = (cbMatDynParam._m0[5u].x * _721) + cbMatDynParam._m0[5u].y;
        float _3535 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _732 = (cbMatDynParam._m0[5u].z * _721) + cbMatDynParam._m0[5u].w;
        float _3546 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) - _728)) + _728) < ((_546 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _579 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _582 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _585 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _598 = _226 + 9u;
    uint _599 = _598 + uint(cbMatDynParam._m0[0u].w);
    float _605 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_599].x;
    float _606 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_599].y;
    float _607 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_599].z;
    float _3557 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _611 = 1.0 - _465;
    float _612 = _608 * _611;
    float _613 = _609 * _611;
    float _614 = _610 * _611;
    float _619 = (_608 + (-0.039999999105930328369140625)) * _465;
    float _620 = (_609 + (-0.039999999105930328369140625)) * _465;
    float _621 = (_610 + (-0.039999999105930328369140625)) * _465;
    float _622 = _619 + 0.039999999105930328369140625;
    float _624 = _620 + 0.039999999105930328369140625;
    float _625 = _621 + 0.039999999105930328369140625;
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _638 = ((isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * TEXCOORD_5.w) * _634.x;
    float _639 = dot(vec3(_457, _458, _459), vec3(_537, _538, _539));
    float _642 = _639 * 2.0;
    float _646 = (_642 * _457) - _537;
    float _647 = (_642 * _458) - _538;
    float _648 = (_642 * _459) - _539;
    float _652 = abs(dot(vec3(_537, _538, _539), vec3(_457, _458, _459)));
    float _3590 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _654 = sqrt(_460);
    float _667 = exp2((_654 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_654 * 3.0));
    float _673 = (1.0 - _667) * ((_654 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _674 = _667 * _654;
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_710, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _702));
        float _769 = fma(_710, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _702));
        float _773 = fma(_710, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _702));
        float _798 = _702 + _457;
        float _799 = _706 + _458;
        float _800 = _710 + _459;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _765;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _769;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _773;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_457, _458, _459), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3638 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_457, _458, _459), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3671 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_457, _458, _459), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3704 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_710, cbModelParam._m0[30u].z, fma(_706, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _702));
        float _1087 = fma(_710, cbModelParam._m0[31u].z, fma(_706, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _702));
        float _1091 = fma(_710, cbModelParam._m0[32u].z, fma(_706, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _702));
        float _1114 = _702 + _457;
        float _1115 = _706 + _458;
        float _1116 = _710 + _459;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_457, _458, _459), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3767 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_457, _458, _459), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3800 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_457, _458, _459), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3833 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1041;
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = _1041;
        _1362 = _1041;
        _1363 = _1041;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1053)) + _1053;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1054)) + _1054;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1055)) + _1055;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _646 * 0.5;
    float _1421 = _647 * 0.5;
    float _1422 = _648 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1536 = fma(_710, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702)) + cbModelParam._m0[13u].w;
        float _1540 = fma(_710, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702)) + cbModelParam._m0[14u].w;
        float _1544 = fma(_710, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702)) + cbModelParam._m0[15u].w;
        float _1547 = fma(_648, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646));
        float _1550 = fma(_648, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646));
        float _1553 = fma(_648, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646));
        float _1581;
        if (_1547 > 0.0)
        {
            _1581 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1581 = frontier_phi_17_15_ladder;
        }
        float _1785;
        if (_1550 > 0.0)
        {
            _1785 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1785 = frontier_phi_26_22_ladder;
        }
        float _2039;
        if (_1553 > 0.0)
        {
            _2039 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2039 = frontier_phi_38_33_ladder;
        }
        float _2041 = isnan(_1785) ? _1581 : (isnan(_1581) ? _1785 : min(_1581, _1785));
        float _2042 = isnan(_2039) ? _2041 : (isnan(_2041) ? _2039 : min(_2041, _2039));
        float _2046 = (_2042 * _1547) + _1536;
        float _2047 = (_2042 * _1550) + _1540;
        float _2048 = (_2042 * _1553) + _1544;
        float _2049 = _2042 * 9.9999997473787516355514526367188e-05;
        float _2051 = (-1.0) - _2049;
        float _2053 = _2049 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2048 > _2053) || ((_2048 < _2051) || ((_2047 > _2053) || ((_2047 < _2051) || ((_2046 < _2051) || (_2046 > _2053))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2176 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2048, cbModelParam._m0[9u].z, fma(_2047, cbModelParam._m0[9u].y, _2046 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2048, cbModelParam._m0[10u].z, fma(_2047, cbModelParam._m0[10u].y, _2046 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2048, cbModelParam._m0[11u].z, fma(_2047, cbModelParam._m0[11u].y, _2046 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_16_38_ladder = _2176.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2176.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2176.x * cbModelParam._m0[1u].y;
        }
        _1569 = frontier_phi_16_38_ladder_2;
        _1571 = frontier_phi_16_38_ladder_1;
        _1573 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_646, _647, _648), _1489);
        _1569 = _1557.x * cbModelParam._m0[1u].y;
        _1571 = _1557.y * cbModelParam._m0[1u].y;
        _1573 = _1557.z * cbModelParam._m0[1u].y;
    }
    float _1577 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1577 : min(cbModelParam._m0[25u].w, _1577));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1632 = fma(_710, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702)) + cbModelParam._m0[21u].w;
        float _1636 = fma(_710, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702)) + cbModelParam._m0[22u].w;
        float _1640 = fma(_710, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702)) + cbModelParam._m0[23u].w;
        float _1643 = fma(_648, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646));
        float _1646 = fma(_648, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646));
        float _1649 = fma(_648, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646));
        float _1790;
        if (_1643 > 0.0)
        {
            _1790 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1790 = frontier_phi_28_24_ladder;
        }
        float _2066;
        if (_1646 > 0.0)
        {
            _2066 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2066 = frontier_phi_40_35_ladder;
        }
        float _2279;
        if (_1649 > 0.0)
        {
            _2279 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2279 = frontier_phi_49_46_ladder;
        }
        float _2281 = isnan(_2066) ? _1790 : (isnan(_1790) ? _2066 : min(_1790, _2066));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1643) + _1632;
        float _2287 = (_2282 * _1646) + _1636;
        float _2288 = (_2282 * _1649) + _1640;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2289;
        float _2292 = _2289 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2288 > _2292) || ((_2288 < _2290) || ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 < _2290) || (_2286 > _2292))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2288, cbModelParam._m0[17u].z, fma(_2287, cbModelParam._m0[17u].y, _2286 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2288, cbModelParam._m0[18u].z, fma(_2287, cbModelParam._m0[18u].y, _2286 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2288, cbModelParam._m0[19u].z, fma(_2287, cbModelParam._m0[19u].y, _2286 * cbModelParam._m0[19u].x))), _1578);
            frontier_phi_25_49_ladder = _2487.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2487.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2487.x * cbModelParam._m0[1u].z;
        }
        _1668 = frontier_phi_25_49_ladder_2;
        _1670 = frontier_phi_25_49_ladder_1;
        _1672 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_646, _647, _648), _1578);
        _1668 = _1652.x * cbModelParam._m0[1u].z;
        _1670 = _1652.y * cbModelParam._m0[1u].z;
        _1672 = _1652.z * cbModelParam._m0[1u].z;
    }
    float _1685 = (((_673 * _622) + _674) * _638) * ((cbModelParam._m0[1u].w * (_1668 - _1569)) + _1569);
    float _1687 = (((_673 * _624) + _674) * _638) * ((cbModelParam._m0[1u].w * (_1670 - _1571)) + _1571);
    float _1689 = (((_673 * _625) + _674) * _638) * ((cbModelParam._m0[1u].w * (_1672 - _1573)) + _1573);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, _1685 * cbSceneParam._m0[91u].x));
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1718 = _638 + (-1.0);
    float _1723 = (cbLight._m0[_1711].x * _1718) + 1.0;
    float _1724 = (cbLight._m0[_1711].y * _1718) + 1.0;
    float _1725 = (cbLight._m0[_1711].z * _1718) + 1.0;
    float _1726 = (cbLight._m0[_1711].w * _1718) + 1.0;
    uint _1727 = _1710 + 5u;
    float _1733 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1737 = _1710 + 4u;
    float _1744 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1748 = _1710 | 1u;
    float _1759 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_457, _458, _459));
    float _1762 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_457, _458, _459));
    float _3969 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _3980 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1767 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.3183098733425140380859375;
    float _1769 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _1776 = ((cbLight._m0[_1727].x * _1733) * _1769) + ((cbLight._m0[_1737].x * _1744) * _1767);
    float _1777 = ((_1733 * cbLight._m0[_1727].y) * _1769) + ((_1744 * cbLight._m0[_1737].y) * _1767);
    float _1778 = ((_1733 * cbLight._m0[_1727].z) * _1769) + ((_1744 * cbLight._m0[_1737].z) * _1767);
    uvec4 _1782 = floatBitsToUint(cbLight._m0[_1710 + 12u]);
    bool _1784 = _1782.x == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1784)
    {
        _1795 = _1776;
        _1797 = _1777;
        _1799 = _1778;
    }
    else
    {
        uint _1803 = _1710 + 6u;
        float _1819 = (dot(vec3(cbLight._m0[_1710 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1820 = _1819 * _1819;
        float _3991 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1822 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1795 = (((cbLight._m0[_1803].x * 0.3183098733425140380859375) * _1821) * _1822) + _1776;
        _1797 = (((cbLight._m0[_1803].y * 0.3183098733425140380859375) * _1821) * _1822) + _1777;
        _1799 = (((cbLight._m0[_1803].z * 0.3183098733425140380859375) * _1821) * _1822) + _1778;
    }
    bool _1802 = _1782.y == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1802)
    {
        _1840 = _1795;
        _1842 = _1797;
        _1844 = _1799;
    }
    else
    {
        uint _2010 = _1710 + 7u;
        float _2026 = (dot(vec3(cbLight._m0[_1710 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _4007 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2029 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1840 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1795;
        _1842 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1797;
        _1844 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1799;
    }
    uint _1847 = _1710 + 8u;
    float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _460) * 0.949999988079071044921875);
    float _1861 = _1860 * _1860;
    float _1862 = cbLight._m0[_1710].x + _537;
    float _1863 = cbLight._m0[_1710].y + _538;
    float _1864 = cbLight._m0[_1710].z + _539;
    float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
    float _1869 = _1868 * _1862;
    float _1870 = _1868 * _1863;
    float _1871 = _1868 * _1864;
    float _1872 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1710].xyz));
    float _4023 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _1876 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1877 = dot(vec3(_457, _458, _459), vec3(_1869, _1870, _1871));
    float _4045 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1869, _1870, _1871));
    float _4056 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1861 * _1861;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1897 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
    float _1898 = 0.959999978542327880859375 - _619;
    float _1900 = 0.959999978542327880859375 - _620;
    float _1901 = 0.959999978542327880859375 - _621;
    float _1908 = 1.0 - _1861;
    float _1919 = (0.5 / (((_1876 * ((_1875 * _1908) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1908) + _1861) * _1875))) * _1875;
    float _4067 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    uint _1932 = _1710 + 9u;
    float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _460) * 0.949999988079071044921875);
    float _1944 = _1943 * _1943;
    float _1945 = cbLight._m0[_1748].x + _537;
    float _1946 = cbLight._m0[_1748].y + _538;
    float _1947 = cbLight._m0[_1748].z + _539;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1952 = _1951 * _1945;
    float _1953 = _1951 * _1946;
    float _1954 = _1951 * _1947;
    float _1955 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1748].xyz));
    float _4078 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _1959 = dot(vec3(_457, _458, _459), vec3(_1952, _1953, _1954));
    float _4089 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1952, _1953, _1954));
    float _4100 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1944 * _1944;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1978 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
    float _1985 = 1.0 - _1944;
    float _1995 = (0.5 / (((_1876 * ((_1958 * _1985) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1985) + _1944) * _1958))) * _1958;
    float _4111 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    float _2007 = (((((_1978 * _1898) + _622) * cbLight._m0[_1932].x) * _1997) * _1733) + (((((_1897 * _1898) + _622) * cbLight._m0[_1847].x) * _1921) * _1744);
    float _2008 = (((((_1978 * _1900) + _624) * cbLight._m0[_1932].y) * _1997) * _1733) + (((((_1897 * _1900) + _624) * cbLight._m0[_1847].y) * _1921) * _1744);
    float _2009 = (((((_1978 * _1901) + _625) * cbLight._m0[_1932].z) * _1997) * _1733) + (((((_1897 * _1901) + _625) * cbLight._m0[_1847].z) * _1921) * _1744);
    float _2071;
    float _2073;
    float _2075;
    if (_1784)
    {
        _2071 = _2007;
        _2073 = _2008;
        _2075 = _2009;
    }
    else
    {
        uint _2077 = _1710 + 2u;
        uint _2081 = _1710 + 10u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _460) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _537;
        float _2098 = cbLight._m0[_2077].y + _538;
        float _2099 = cbLight._m0[_2077].z + _539;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2077].xyz));
        float _4122 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2111 = dot(vec3(_457, _458, _459), vec3(_2104, _2105, _2106));
        float _4133 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4144 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2137 = 1.0 - _2096;
        float _2147 = (0.5 / (((_1876 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2137) + _2096) * _2110))) * _2110;
        float _4155 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2149 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2150 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2071 = (((((_2130 * _1898) + _622) * cbLight._m0[_2081].x) * _2149) * _2150) + _2007;
        _2073 = (((((_2130 * _1900) + _624) * cbLight._m0[_2081].y) * _2149) * _2150) + _2008;
        _2075 = (((((_2130 * _1901) + _625) * cbLight._m0[_2081].z) * _2149) * _2150) + _2009;
    }
    float _2185;
    float _2187;
    float _2189;
    if (_1802)
    {
        _2185 = _2071;
        _2187 = _2073;
        _2189 = _2075;
    }
    else
    {
        uint _2196 = _1710 + 3u;
        uint _2200 = _1710 + 11u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _460) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _537;
        float _2217 = cbLight._m0[_2196].y + _538;
        float _2218 = cbLight._m0[_2196].z + _539;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2196].xyz));
        float _4171 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2230 = dot(vec3(_457, _458, _459), vec3(_2223, _2224, _2225));
        float _4182 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4193 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
        float _2256 = 1.0 - _2215;
        float _2266 = (0.5 / (((_1876 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2256) + _2215) * _2229))) * _2229;
        float _4204 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2269 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2185 = (((((_2249 * _1898) + _622) * cbLight._m0[_2200].x) * _2268) * _2269) + _2071;
        _2187 = (((((_2249 * _1900) + _624) * cbLight._m0[_2200].y) * _2268) * _2269) + _2073;
        _2189 = (((((_2249 * _1901) + _625) * cbLight._m0[_2200].z) * _2268) * _2269) + _2075;
    }
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_1708.y == 0u)
    {
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2344;
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2344;
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2344;
        uvec4 _2359 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2360 = _2359.x;
        uint _2371 = uint((float(_2359.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2360))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2360)));
        float _2381 = (log2(_2347 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2382 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        uint _2385 = uint(isnan(14.0) ? _2382 : (isnan(_2382) ? 14.0 : min(_2382, 14.0)));
        uvec4 _2390 = texelFetch(g_lightClusterGridBuffer, int(((_2385 << 2u) + (_2371 << 6u)) >> 2u));
        uint _2391 = _2390.x;
        uint _2392 = _2359.z;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        if (((((1u << ((_2392 >> 4u) & 15u)) + 4294967295u) & _2391) == 0u) || ((_2392 & 240u) == 0u))
        {
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
        }
        else
        {
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            uint _2651 = 0u;
            uint _2660;
            bool _2661;
            for (;;)
            {
                _2660 = texelFetch(g_lightClassification, int((((_2385 << 5u) + (_2371 << 9u)) + (_2651 << 2u)) >> 2u)).x;
                _2661 = _2660 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2661)
                {
                    frontier_phi_66_pred = _2645;
                    frontier_phi_66_pred_1 = _2650;
                    frontier_phi_66_pred_2 = _2649;
                    frontier_phi_66_pred_3 = _2648;
                    frontier_phi_66_pred_4 = _2647;
                    frontier_phi_66_pred_5 = _2646;
                }
                else
                {
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    uint _2796;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2660;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    for (;;)
                    {
                        uint _2800 = uint(findLSB(_2796)) + (_2651 << 5u);
                        uint _2797 = (_2796 + 4294967295u) & _2796;
                        uint _2802 = _2800 * 48u;
                        vec4 _2816 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        uint _2822 = (_2800 * 48u) + 4u;
                        vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 3u)).x));
                        uint _2841 = (_2800 * 48u) + 8u;
                        vec3 _2852 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x));
                        float _2856 = _2816.x - _2345;
                        float _2857 = _2816.y - _2346;
                        float _2858 = _2816.z - _2347;
                        float _2859 = dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858));
                        float _2862 = inversesqrt(_2859);
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2866 = dot(vec3(_579, _582, _585), vec3(_2863, _2864, _2865));
                        float _2871 = 1.0 - (_2859 * _2816.w);
                        float _4230 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2873 = sqrt(_2859) * _2835.w;
                        float _2876 = 1.39999997615814208984375 / (_2873 + 1.39999997615814208984375);
                        float _2877 = _2876 * _2876;
                        float _2880 = ((1.0 - _2877) * _2866) + _2877;
                        float _2883 = _2873 * _2873;
                        float _2887 = ((isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))) * _2872) / ((_2883 * 0.699999988079071044921875) + 1.0);
                        float _2891 = (-0.0) - _2345;
                        float _2892 = (-0.0) - _2346;
                        float _2893 = (-0.0) - _2347;
                        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
                        float _2898 = _2897 * _2891;
                        float _2899 = _2897 * _2892;
                        float _2900 = _2897 * _2893;
                        float _2908 = exp2(log2(1.0 / ((_2883 * 3.5) + 5.0)) * 0.25);
                        float _2909 = 1.0 - _654;
                        float _2916 = sqrt(1.0 - ((1.0 - (_2909 * _2909)) * (1.0 - (_2908 * _2908))));
                        float _2917 = _2916 * _2916;
                        float _2918 = _2917 * _2917;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2921 = _2900 + _2865;
                        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
                        float _2929 = dot(vec3(_579, _582, _585), vec3(_2898, _2899, _2900));
                        float _4246 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2932 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2933 = dot(vec3(_579, _582, _585), vec3(_2925 * _2919, _2925 * _2920, _2925 * _2921));
                        float _4257 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2936 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2940 = ((_2936 * _2936) * (_2918 + (-1.0))) + 1.0;
                        float _2941 = _2876 * _2917;
                        float _2942 = _2941 * _2941;
                        float _2945 = ((1.0 - _2942) * _2866) + _2942;
                        float _4268 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2946 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2947 = 1.0 - _2917;
                        float _2957 = (0.5 / (((_2946 * ((_2932 * _2947) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2946 * _2947) + _2917) * _2932))) * _2946;
                        float _4279 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2968 = (((_2918 * 3.1415927410125732421875) * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) / ((_2940 * _2940) * ((_2883 * 2.1991131305694580078125) + 3.141590118408203125))) * _2872;
                        _2720 = (_2887 * _2835.x) + _2793;
                        _2721 = (_2887 * _2835.y) + _2794;
                        _2722 = (_2887 * _2835.z) + _2795;
                        _2717 = (_2968 * _2852.x) + _2790;
                        _2718 = (_2968 * _2852.y) + _2791;
                        _2719 = (_2968 * _2852.z) + _2792;
                        if (_2797 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2797;
                        }
                    }
                    frontier_phi_66_pred = _2717;
                    frontier_phi_66_pred_1 = _2722;
                    frontier_phi_66_pred_2 = _2721;
                    frontier_phi_66_pred_3 = _2720;
                    frontier_phi_66_pred_4 = _2719;
                    frontier_phi_66_pred_5 = _2718;
                }
                _2493 = frontier_phi_66_pred;
                _2503 = frontier_phi_66_pred_1;
                _2501 = frontier_phi_66_pred_2;
                _2499 = frontier_phi_66_pred_3;
                _2497 = frontier_phi_66_pred_4;
                _2495 = frontier_phi_66_pred_5;
                uint _2652 = _2651 + 1u;
                if (_2652 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2645 = _2493;
                    _2646 = _2495;
                    _2647 = _2497;
                    _2648 = _2499;
                    _2649 = _2501;
                    _2650 = _2503;
                    _2651 = _2652;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
        }
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.z;
        uint _2509 = (_2507 >> 8u) & 15u;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        if (((4294967295u << _2509) & _2391) == 0u)
        {
            _2613 = _2492;
            _2615 = _2494;
            _2617 = _2496;
            _2619 = _2498;
            _2621 = _2500;
            _2623 = _2502;
        }
        else
        {
            float _2638 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
            float _2639 = _2638 * _2345;
            float _2640 = _2638 * _2346;
            float _2641 = _2638 * _2347;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2509 < ((_2507 >> 12u) & 15u))
            {
                float _2614;
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2773 = _2492;
                float _2774 = _2494;
                float _2775 = _2496;
                float _2776 = _2498;
                float _2777 = _2500;
                float _2778 = _2502;
                uint _2779 = _2509;
                uint _2788;
                bool _2789;
                for (;;)
                {
                    _2788 = texelFetch(g_lightClassification, int((((_2385 << 5u) + (_2371 << 9u)) + (_2779 << 2u)) >> 2u)).x;
                    _2789 = _2788 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2789)
                    {
                        frontier_phi_77_pred = _2778;
                        frontier_phi_77_pred_1 = _2777;
                        frontier_phi_77_pred_2 = _2776;
                        frontier_phi_77_pred_3 = _2775;
                        frontier_phi_77_pred_4 = _2774;
                        frontier_phi_77_pred_5 = _2773;
                    }
                    else
                    {
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        uint _3001 = _2788;
                        uint _3002;
                        vec4 _3027;
                        float _3028;
                        vec4 _3043;
                        vec3 _3055;
                        vec4 _3071;
                        vec4 _3087;
                        float _3133;
                        bool _3134;
                        for (;;)
                        {
                            uint _3012 = ((_2779 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3001));
                            _3002 = (_3001 + 4294967295u) & _3001;
                            uint _3014 = _3012 * 40u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3028 = _3027.w;
                            uint _3030 = (_3012 * 40u) + 4u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_3012 * 40u) + 8u;
                            _3055 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x));
                            uint _3058 = (_3012 * 40u) + 16u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3074 = (_3012 * 40u) + 20u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3012 * 40u) + 24u;
                            vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3108 = (_3012 * 40u) + 28u;
                            vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3133 = fma(_2347, _3121.z, fma(_2346, _3121.y, _3121.x * _2345)) + _3121.w;
                            _3134 = !((fma(_2347, _3102.z, fma(_2346, _3102.y, _3102.x * _2345)) + _3102.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3134)
                            {
                                float _3161 = _3027.x - _2345;
                                float _3162 = _3027.y - _2346;
                                float _3163 = _3027.z - _2347;
                                float _3164 = dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163));
                                float _3167 = inversesqrt(_3164);
                                float _3168 = _3167 * _3161;
                                float _3169 = _3167 * _3162;
                                float _3170 = _3167 * _3163;
                                float _3174 = 1.0 - (_3164 / (_3028 * _3028));
                                float _4290 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3179 = sqrt(_3164) * _3043.w;
                                float _3181 = 1.39999997615814208984375 / (_3179 + 1.39999997615814208984375);
                                float _3182 = _3181 * _3181;
                                float _3185 = ((1.0 - _3182) * dot(vec3(_3168, _3169, _3170), vec3(_579, _582, _585))) + _3182;
                                float _3188 = _3179 * _3179;
                                float _3192 = (fma(_2347, _3071.z, fma(_2346, _3071.y, _3071.x * _2345)) + _3071.w) / _3133;
                                float _3193 = (fma(_2347, _3087.z, fma(_2346, _3087.y, _3087.x * _2345)) + _3087.w) / _3133;
                                float _3197 = 1.0 - dot(vec2(_3192, _3193), vec2(_3192, _3193));
                                float _4306 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3199 = _3198 * (((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) * _3175) / ((_3188 * 0.699999988079071044921875) + 1.0));
                                float _3211 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                                float _3212 = 1.0 - _654;
                                float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                                float _3220 = _3219 * _3219;
                                float _3221 = _3220 * _3220;
                                float _3222 = _3168 - _2639;
                                float _3223 = _3169 - _2640;
                                float _3224 = _3170 - _2641;
                                float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                                float _3232 = dot(vec3(_579, _582, _585), vec3((-0.0) - _2639, (-0.0) - _2640, (-0.0) - _2641));
                                float _4317 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3236 = dot(vec3(_579, _582, _585), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                                float _4328 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                                float _3244 = _3181 * _3220;
                                float _3245 = _3244 * _3244;
                                float _3251 = ((1.0 - _3245) * dot(vec3(_579, _582, _585), vec3(_3168, _3169, _3170))) + _3245;
                                float _4339 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3253 = 1.0 - _3220;
                                float _3263 = (0.5 / (((_3252 * ((_3235 * _3253) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3252 * _3253) + _3220) * _3235))) * _3252;
                                float _4350 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3273 = (_3198 * _3175) * (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3243 * _3243) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3199 * _3043.y;
                                frontier_phi_83_pred_1 = _3199 * _3043.x;
                                frontier_phi_83_pred_2 = _3273 * _3055.z;
                                frontier_phi_83_pred_3 = _3273 * _3055.y;
                                frontier_phi_83_pred_4 = _3273 * _3055.x;
                                frontier_phi_83_pred_5 = _3199 * _3043.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3281 = frontier_phi_83_pred;
                            _3280 = frontier_phi_83_pred_1;
                            _3279 = frontier_phi_83_pred_2;
                            _3278 = frontier_phi_83_pred_3;
                            _3277 = frontier_phi_83_pred_4;
                            _3282 = frontier_phi_83_pred_5;
                            _2985 = _3280 + _2998;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            _2982 = _3277 + _2995;
                            _2983 = _3278 + _2996;
                            _2984 = _3279 + _2997;
                            if (_3002 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _3002;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2987;
                        frontier_phi_77_pred_1 = _2986;
                        frontier_phi_77_pred_2 = _2985;
                        frontier_phi_77_pred_3 = _2984;
                        frontier_phi_77_pred_4 = _2983;
                        frontier_phi_77_pred_5 = _2982;
                    }
                    _2624 = frontier_phi_77_pred;
                    _2622 = frontier_phi_77_pred_1;
                    _2620 = frontier_phi_77_pred_2;
                    _2618 = frontier_phi_77_pred_3;
                    _2616 = frontier_phi_77_pred_4;
                    _2614 = frontier_phi_77_pred_5;
                    uint _2780 = _2779 + 1u;
                    if (_2780 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2773 = _2614;
                        _2774 = _2616;
                        _2775 = _2618;
                        _2776 = _2620;
                        _2777 = _2622;
                        _2778 = _2624;
                        _2779 = _2780;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2618;
                frontier_phi_58_59_ladder_1 = _2624;
                frontier_phi_58_59_ladder_2 = _2622;
                frontier_phi_58_59_ladder_3 = _2620;
                frontier_phi_58_59_ladder_4 = _2616;
                frontier_phi_58_59_ladder_5 = _2614;
            }
            else
            {
                frontier_phi_58_59_ladder = _2496;
                frontier_phi_58_59_ladder_1 = _2502;
                frontier_phi_58_59_ladder_2 = _2500;
                frontier_phi_58_59_ladder_3 = _2498;
                frontier_phi_58_59_ladder_4 = _2494;
                frontier_phi_58_59_ladder_5 = _2492;
            }
            _2613 = frontier_phi_58_59_ladder_5;
            _2615 = frontier_phi_58_59_ladder_4;
            _2617 = frontier_phi_58_59_ladder;
            _2619 = frontier_phi_58_59_ladder_3;
            _2621 = frontier_phi_58_59_ladder_2;
            _2623 = frontier_phi_58_59_ladder_1;
        }
        float _2628 = isnan(1.0) ? _638 : (isnan(_638) ? 1.0 : min(_638, 1.0));
        _2404 = (_2628 * _2619) + _1840;
        _2406 = (_2628 * _2621) + _1842;
        _2408 = (_2628 * _2623) + _1844;
        _2410 = ((_2613 * _622) * _2628) + _2185;
        _2412 = ((_2615 * _624) * _2628) + _2187;
        _2414 = ((_2617 * _625) * _2628) + _2189;
    }
    else
    {
        _2404 = _1840;
        _2406 = _1842;
        _2408 = _1844;
        _2410 = _2185;
        _2412 = _2187;
        _2414 = _2189;
    }
    float _4366 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4377 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4388 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2431 = ((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2404 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _638))) + ((_2410 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1478)) * cbPerFrame._m0[3u].x);
    float _2432 = ((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2406 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _638))) + ((_2412 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1478)) * cbPerFrame._m0[3u].x);
    float _2433 = ((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2408 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _638))) + ((_2414 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1478)) * cbPerFrame._m0[3u].x);
    uint _2434 = _226 + 6u;
    float _2442 = _558 / cbSceneParam._m0[86u].x;
    float _2443 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2457 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2459 = _2457.x;
    float _2460 = _2457.y;
    float _2461 = _2457.z;
    float _2462 = _2457.w;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2517 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2518 = _2517 / _479;
        float _2529 = _2518 * _530;
        float _2530 = _531 * _2518;
        float _2531 = (-0.0) - _2530;
        float _2533 = _2518 * _532;
        float _2535 = (cbSceneParam._m0[77u].w * _2531) / _2517;
        float _2536 = _2535 + cbSceneParam._m0[79u].w;
        float _2537 = cbSceneParam._m0[79u].w - _2530;
        float _2543 = sqrt(((_2529 * _2529) + (_2530 * _2530)) + (_2533 * _2533));
        float _2546 = (1.0 - (cbSceneParam._m0[77u].w / _2517)) * _2543;
        float _2551 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2553 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2730;
        if (abs((_2531 - _2535) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2730 = ((((_2536 > 0.0) ? exp2(_2551 * _2536) : (2.0 - exp2(_2553 * _2536))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2546;
        }
        else
        {
            float _2674 = 1.0 / cbSceneParam._m0[80u].x;
            float _2675 = isnan(_2537) ? _2536 : (isnan(_2536) ? _2537 : max(_2536, _2537));
            float _2676 = isnan(_2537) ? _2536 : (isnan(_2536) ? _2537 : min(_2536, _2537));
            float _2685 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : min(_2675, 0.0));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            _2730 = ((abs(_2543 / _2531) * cbSceneParam._m0[80u].y) * ((((_2685 - _2686) * 2.0) - ((exp2(_2551 * (isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0)))) - exp2(_2551 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0))))) * _2674)) - ((exp2(_2553 * _2685) - exp2(_2553 * _2686)) * _2674))) + (_2546 * cbSceneParam._m0[80u].z);
        }
        vec4 _2732 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, 1.0), 0.0);
        float _2741 = exp2((_2730 * (-1.44269502162933349609375)) * (1.0 - _2732.w));
        float _2742 = log2(_2741);
        float _2758 = log2(_2462);
        _2555 = (exp2(_2758 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2742 * cbSceneParam._m0[78u].x)) * _2732.x) / cbSceneParam._m0[78u].x)) + _2459;
        _2557 = (exp2(_2758 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2742 * cbSceneParam._m0[78u].y)) * _2732.y) / cbSceneParam._m0[78u].y)) + _2460;
        _2559 = (exp2(_2758 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2742 * cbSceneParam._m0[78u].z)) * _2732.z) / cbSceneParam._m0[78u].z)) + _2461;
        _2561 = _2741 * _2462;
    }
    else
    {
        _2555 = _2459;
        _2557 = _2460;
        _2559 = _2461;
        _2561 = _2462;
    }
    bool _2768;
    vec4 _2571;
    vec4 _2593;
    float _2595;
    float _2599;
    float _2600;
    float _2601;
    float _2602;
    bool _2612;
    for (;;)
    {
        _2571 = cbMatDynParam._m0[0u];
        float _2573 = roundEven(_2571.y);
        bool _2574 = _2573 == 3.0;
        float _2575 = log2(_2561);
        float _2582 = exp2(_2575 * cbSceneParam._m0[78u].x) * _2431;
        float _2583 = exp2(_2575 * cbSceneParam._m0[78u].y) * _2432;
        float _2584 = exp2(_2575 * cbSceneParam._m0[78u].z) * _2433;
        float _2591 = _546 + (-0.5);
        _2593 = cbMtdParam._m0[1u];
        _2595 = _2593.y * _2591;
        float _2598 = (_2573 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2599 = _2598 * (_2574 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2555)));
        _2600 = _2598 * (_2574 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2557)));
        _2601 = _2598 * (_2574 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2559)));
        _2602 = _2591 * 0.999000012874603271484375;
        _2612 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2612)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2602) < 0.5)
            {
                _2768 = true;
                break;
            }
        }
        uint _2709 = _598 + uint(_2571.w);
        if ((cbInstanceData._m0[_2709].w < 1.0) && ((cbInstanceData._m0[_2709].w + _2602) < 0.5))
        {
            _2768 = true;
            break;
        }
        if ((_2595 + 1.0) < _2593.x)
        {
            _2768 = true;
            break;
        }
        _2768 = false;
        break;
    }
    float _2973;
    if (_2768)
    {
        discard_state = true;
        _2973 = 0.0;
    }
    else
    {
        _2973 = cbInstanceData._m0[_2434].w;
    }
    SV_Target.x = _2599;
    SV_Target.y = _2600;
    SV_Target.z = _2601;
    SV_Target.w = _2973;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2434].w;
    discard_exit();
}


