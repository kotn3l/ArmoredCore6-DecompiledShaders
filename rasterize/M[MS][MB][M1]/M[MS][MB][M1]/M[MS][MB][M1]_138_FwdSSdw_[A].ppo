#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1237;
float _3641;
float _3642;
float _3643;
float _3644;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3653 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _378) + _447;
    float _459 = ((((_426.x - _445) * _378) + _445) * 2.0) + (-1.0);
    float _461 = ((((_426.y - _446) * _378) + _446) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3664 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))));
    float _470 = fma(_467, _228, fma(_461, _235, _459 * _221));
    float _473 = fma(_467, _229, fma(_461, _236, _459 * _222));
    float _476 = fma(_467, _230, fma(_461, _237, _459 * _223));
    float _480 = inversesqrt(dot(vec3(_470, _473, _476), vec3(_470, _473, _476)));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _524 = _522.x;
    float _525 = 1.0 - _524;
    float _531 = (cbMtdParam._m0[19u].x + dot(vec4(_480 * _470, _480 * _473, _480 * _476, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_524 - _525) * cbMtdParam._m0[24u].z) + _525) * cbMtdParam._m0[21u].z);
    float _3675 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _539 = (_532 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) + _385;
    float _540 = (_532 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) + _386;
    float _541 = (_532 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) + _387;
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _569 = _567.x;
    float _587 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _569) * _378) + _569;
    float _591 = ((_553.x - _587) * cbMtdParam._m0[19u].z) + _587;
    float _593 = _591 - (_591 * _532);
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _613 = (_606.x * 2.0) + (-1.0);
    float _614 = (_606.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3686 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _623 = ((_606.z - _456) * _532) + _456;
    float _633 = ((sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) - _467) * _532) + _467;
    float _636 = (((_613 - _459) * _532) + _459) + (cbMtdParam._m0[21u].x * _459);
    float _637 = (((_614 - _461) * _532) + _461) + (cbMtdParam._m0[21u].x * _461);
    float _642 = cbMtdParam._m0[22u].x + _496.w;
    float _645 = fma(_633, _228, fma(_637, _235, _636 * _221));
    float _648 = fma(_633, _229, fma(_637, _236, _636 * _222));
    float _651 = fma(_633, _230, fma(_637, _237, _636 * _223));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3697 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _659 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3719 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3730 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3741 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3752 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _664 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    vec4 _743 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _745 = _743.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _917 = sqrt(((_729 * _729) + (_730 * _730)) + (_731 * _731));
        float _923 = (cbMatDynParam._m0[5u].x * _917) + cbMatDynParam._m0[5u].y;
        float _3763 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _928 = (cbMatDynParam._m0[5u].z * _917) + cbMatDynParam._m0[5u].w;
        float _3774 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) - _924)) + _924) < ((_745 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _756 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _757 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _775 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _778 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _781 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    uint _794 = _240 + 9u;
    uint _795 = _794 + uint(cbMatDynParam._m0[0u].w);
    float _801 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_795].x;
    float _802 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_795].y;
    float _803 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_795].z;
    float _3785 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _807 = 1.0 - _664;
    float _808 = _804 * _807;
    float _809 = _805 * _807;
    float _810 = _806 * _807;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _664;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _664;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _664;
    float _818 = _815 + 0.039999999105930328369140625;
    float _820 = _816 + 0.039999999105930328369140625;
    float _821 = _817 + 0.039999999105930328369140625;
    vec4 _830 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _756, cbSceneParam._m0[86u].y * _757));
    float _834 = ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * TEXCOORD_5.w) * _830.x;
    float _835 = dot(vec3(_656, _657, _658), vec3(_736, _737, _738));
    float _838 = _835 * 2.0;
    float _842 = (_838 * _656) - _736;
    float _843 = (_838 * _657) - _737;
    float _844 = (_838 * _658) - _738;
    float _848 = abs(dot(vec3(_736, _737, _738), vec3(_656, _657, _658)));
    float _3818 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _850 = sqrt(_659);
    float _863 = exp2((_850 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_850 * 3.0));
    float _869 = (1.0 - _863) * ((_850 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _870 = _863 * _850;
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1236;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _961 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _965 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _969 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _994 = _898 + _656;
        float _995 = _902 + _657;
        float _996 = _906 + _658;
        float _1006 = fma(_996, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994)) - _961;
        float _1007 = fma(_996, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994)) - _965;
        float _1008 = fma(_996, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994)) - _969;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_961 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_965 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[34u].z) + ((((((_969 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1064 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1030.x + (-0.5));
        float _1066 = _1064 * (_1030.y + (-0.5));
        float _1067 = _1064 * (_1030.z + (-0.5));
        float _1074 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1037.x + (-0.5));
        float _1076 = _1074 * (_1037.y + (-0.5));
        float _1077 = _1074 * (_1037.z + (-0.5));
        float _1084 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1044.x + (-0.5));
        float _1086 = _1084 * (_1044.y + (-0.5));
        float _1087 = _1084 * (_1044.z + (-0.5));
        float _1094 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1051.x + (-0.5));
        float _1096 = _1094 * (_1051.y + (-0.5));
        float _1097 = _1094 * (_1051.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1118 = (dot(vec3(_656, _657, _658), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1128 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3866 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1130 + 1.0))) + _1135) * _1098;
        float _1145 = _1066 * 0.5;
        float _1146 = _1076 * 0.5;
        float _1147 = _1086 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_656, _657, _658), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3899 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1172 + 1.0))) + _1177) * _1099;
        float _1187 = _1067 * 0.5;
        float _1188 = _1077 * 0.5;
        float _1189 = _1087 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_656, _657, _658), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3932 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1214 + 1.0))) + _1219) * _1100;
        _1236 = _1067;
        _1238 = _1066;
        _1239 = _1065;
        _1240 = _1077;
        _1241 = _1076;
        _1242 = _1075;
        _1243 = _1087;
        _1244 = _1086;
        _1245 = _1085;
        _1246 = _1100;
        _1247 = _1099;
        _1248 = _1098;
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _1237;
        _1238 = _1237;
        _1239 = _1237;
        _1240 = _1237;
        _1241 = _1237;
        _1242 = _1237;
        _1243 = _1237;
        _1244 = _1237;
        _1245 = _1237;
        _1246 = _1237;
        _1247 = _1237;
        _1248 = _1237;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1283 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1287 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1310 = _898 + _656;
        float _1311 = _902 + _657;
        float _1312 = _906 + _658;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_656, _657, _658), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3995 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_656, _657, _658), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4028 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_656, _657, _658), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4061 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1237;
        _1549 = _1237;
        _1550 = _1237;
        _1551 = _1237;
        _1552 = _1237;
        _1553 = _1237;
        _1554 = _1237;
        _1555 = _1237;
        _1556 = _1237;
        _1557 = _1237;
        _1558 = _1237;
        _1559 = _1237;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1250)) + _1250;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _842 * 0.5;
    float _1617 = _843 * 0.5;
    float _1618 = _844 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1236, _1240, _1243, _1246));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _659);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_844, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842));
        float _1746 = fma(_844, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842));
        float _1749 = fma(_844, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1777 = frontier_phi_17_15_ladder;
        }
        float _2000;
        if (_1746 > 0.0)
        {
            _2000 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2000 = frontier_phi_26_22_ladder;
        }
        float _2257;
        if (_1749 > 0.0)
        {
            _2257 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2257 = frontier_phi_38_33_ladder;
        }
        float _2259 = isnan(_2000) ? _1777 : (isnan(_1777) ? _2000 : min(_1777, _2000));
        float _2260 = isnan(_2257) ? _2259 : (isnan(_2259) ? _2257 : min(_2259, _2257));
        float _2264 = (_2260 * _1743) + _1732;
        float _2265 = (_2260 * _1746) + _1736;
        float _2266 = (_2260 * _1749) + _1740;
        float _2267 = _2260 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2267;
        float _2271 = _2267 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 > _2271) || ((_2265 < _2269) || ((_2264 < _2269) || (_2264 > _2271))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2266, cbModelParam._m0[9u].z, fma(_2265, cbModelParam._m0[9u].y, _2264 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2266, cbModelParam._m0[10u].z, fma(_2265, cbModelParam._m0[10u].y, _2264 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2266, cbModelParam._m0[11u].z, fma(_2265, cbModelParam._m0[11u].y, _2264 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_16_38_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_16_38_ladder_2;
        _1767 = frontier_phi_16_38_ladder_1;
        _1769 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_842, _843, _844), _1685);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _659);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_844, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842));
        float _1841 = fma(_844, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842));
        float _1844 = fma(_844, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842));
        float _2005;
        if (_1838 > 0.0)
        {
            _2005 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2005 = frontier_phi_28_24_ladder;
        }
        float _2284;
        if (_1841 > 0.0)
        {
            _2284 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2284 = frontier_phi_40_35_ladder;
        }
        float _2497;
        if (_1844 > 0.0)
        {
            _2497 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2497 = frontier_phi_49_46_ladder;
        }
        float _2499 = isnan(_2284) ? _2005 : (isnan(_2005) ? _2284 : min(_2005, _2284));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1838) + _1827;
        float _2505 = (_2500 * _1841) + _1831;
        float _2506 = (_2500 * _1844) + _1835;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_25_49_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_25_49_ladder_2;
        _1865 = frontier_phi_25_49_ladder_1;
        _1867 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_842, _843, _844), _1774);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1880 = (((_869 * _818) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1882 = (((_869 * _820) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1884 = (((_869 * _821) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    vec4 _1901 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_756, _757));
    float _1903 = _1901.w;
    float _1915 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1903);
    float _1916 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1903);
    float _1917 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1903);
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1931 = _834 + (-1.0);
    float _1936 = (cbLight._m0[_1924].x * _1931) + 1.0;
    float _1937 = (cbLight._m0[_1924].y * _1931) + 1.0;
    float _1938 = (cbLight._m0[_1924].z * _1931) + 1.0;
    float _1939 = (cbLight._m0[_1924].w * _1931) + 1.0;
    uint _1940 = _1923 + 5u;
    float _1946 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1950 = _1923 + 4u;
    float _1959 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1963 = _1923 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_656, _657, _658));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_656, _657, _658));
    float _4197 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _4208 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1940].x * _1946) * _1984) + (((cbLight._m0[_1950].x * _1915) * _1959) * _1982);
    float _1992 = ((_1946 * cbLight._m0[_1940].y) * _1984) + (((cbLight._m0[_1950].y * _1916) * _1959) * _1982);
    float _1993 = ((_1946 * cbLight._m0[_1940].z) * _1984) + (((cbLight._m0[_1950].z * _1917) * _1959) * _1982);
    uvec4 _1997 = floatBitsToUint(cbLight._m0[_1923 + 12u]);
    bool _1999 = _1997.x == 0u;
    float _2010;
    float _2012;
    float _2014;
    if (_1999)
    {
        _2010 = _1991;
        _2012 = _1992;
        _2014 = _1993;
    }
    else
    {
        uint _2018 = _1923 + 6u;
        float _2034 = (dot(vec3(cbLight._m0[_1923 + 2u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2035 = _2034 * _2034;
        float _4219 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2037 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2010 = (((cbLight._m0[_2018].x * 0.3183098733425140380859375) * _2036) * _2037) + _1991;
        _2012 = (((cbLight._m0[_2018].y * 0.3183098733425140380859375) * _2036) * _2037) + _1992;
        _2014 = (((cbLight._m0[_2018].z * 0.3183098733425140380859375) * _2036) * _2037) + _1993;
    }
    bool _2017 = _1997.y == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2017)
    {
        _2055 = _2010;
        _2057 = _2012;
        _2059 = _2014;
    }
    else
    {
        uint _2228 = _1923 + 7u;
        float _2244 = (dot(vec3(cbLight._m0[_1923 + 3u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2245 = _2244 * _2244;
        float _4235 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2246 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2247 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2055 = (((cbLight._m0[_2228].x * 0.3183098733425140380859375) * _2246) * _2247) + _2010;
        _2057 = (((cbLight._m0[_2228].y * 0.3183098733425140380859375) * _2246) * _2247) + _2012;
        _2059 = (((cbLight._m0[_2228].z * 0.3183098733425140380859375) * _2246) * _2247) + _2014;
    }
    uint _2062 = _1923 + 8u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _659) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1923].x + _736;
    float _2078 = cbLight._m0[_1923].y + _737;
    float _2079 = cbLight._m0[_1923].z + _738;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1923].xyz));
    float _4251 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _2091 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2092 = dot(vec3(_656, _657, _658), vec3(_2084, _2085, _2086));
    float _4273 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2084, _2085, _2086));
    float _4284 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2076 * _2076;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2113 = 0.959999978542327880859375 - _815;
    float _2115 = 0.959999978542327880859375 - _816;
    float _2116 = 0.959999978542327880859375 - _817;
    float _2123 = 1.0 - _2076;
    float _2134 = (0.5 / (((_2091 * ((_2090 * _2123) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2123) + _2076) * _2090))) * _2090;
    float _4295 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    uint _2150 = _1923 + 9u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _659) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_1963].x + _736;
    float _2164 = cbLight._m0[_1963].y + _737;
    float _2165 = cbLight._m0[_1963].z + _738;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1963].xyz));
    float _4306 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2177 = dot(vec3(_656, _657, _658), vec3(_2170, _2171, _2172));
    float _4317 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2170, _2171, _2172));
    float _4328 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2162 * _2162;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2196 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2203 = 1.0 - _2162;
    float _2213 = (0.5 / (((_2091 * ((_2176 * _2203) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2203) + _2162) * _2176))) * _2176;
    float _4339 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    float _2225 = (((((_2196 * _2113) + _818) * cbLight._m0[_2150].x) * _2215) * _1946) + ((((cbLight._m0[_2062].x * _1915) * ((_2112 * _2113) + _818)) * _2136) * _1959);
    float _2226 = (((((_2196 * _2115) + _820) * cbLight._m0[_2150].y) * _2215) * _1946) + ((((cbLight._m0[_2062].y * _1916) * ((_2112 * _2115) + _820)) * _2136) * _1959);
    float _2227 = (((((_2196 * _2116) + _821) * cbLight._m0[_2150].z) * _2215) * _1946) + ((((cbLight._m0[_2062].z * _1917) * ((_2112 * _2116) + _821)) * _2136) * _1959);
    float _2289;
    float _2291;
    float _2293;
    if (_1999)
    {
        _2289 = _2225;
        _2291 = _2226;
        _2293 = _2227;
    }
    else
    {
        uint _2295 = _1923 + 2u;
        uint _2299 = _1923 + 10u;
        float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _659) * 0.949999988079071044921875);
        float _2314 = _2313 * _2313;
        float _2315 = cbLight._m0[_2295].x + _736;
        float _2316 = cbLight._m0[_2295].y + _737;
        float _2317 = cbLight._m0[_2295].z + _738;
        float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
        float _2322 = _2321 * _2315;
        float _2323 = _2321 * _2316;
        float _2324 = _2321 * _2317;
        float _2325 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2295].xyz));
        float _4350 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2329 = dot(vec3(_656, _657, _658), vec3(_2322, _2323, _2324));
        float _4361 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2333 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2322, _2323, _2324));
        float _4372 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2337 = _2314 * _2314;
        float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
        float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2355 = 1.0 - _2314;
        float _2365 = (0.5 / (((_2091 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2355) + _2314) * _2328))) * _2328;
        float _4383 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2367 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
        float _2368 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2289 = (((((_2348 * _2113) + _818) * cbLight._m0[_2299].x) * _2367) * _2368) + _2225;
        _2291 = (((((_2348 * _2115) + _820) * cbLight._m0[_2299].y) * _2367) * _2368) + _2226;
        _2293 = (((((_2348 * _2116) + _821) * cbLight._m0[_2299].z) * _2367) * _2368) + _2227;
    }
    float _2403;
    float _2405;
    float _2407;
    if (_2017)
    {
        _2403 = _2289;
        _2405 = _2291;
        _2407 = _2293;
    }
    else
    {
        uint _2414 = _1923 + 3u;
        uint _2418 = _1923 + 11u;
        float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _659) * 0.949999988079071044921875);
        float _2433 = _2432 * _2432;
        float _2434 = cbLight._m0[_2414].x + _736;
        float _2435 = cbLight._m0[_2414].y + _737;
        float _2436 = cbLight._m0[_2414].z + _738;
        float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
        float _2441 = _2440 * _2434;
        float _2442 = _2440 * _2435;
        float _2443 = _2440 * _2436;
        float _2444 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2414].xyz));
        float _4399 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2448 = dot(vec3(_656, _657, _658), vec3(_2441, _2442, _2443));
        float _4410 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2452 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2441, _2442, _2443));
        float _4421 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2456 = _2433 * _2433;
        float _2460 = ((_2451 * _2451) * (_2456 + (-1.0))) + 1.0;
        float _2467 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
        float _2474 = 1.0 - _2433;
        float _2484 = (0.5 / (((_2091 * ((_2447 * _2474) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2474) + _2433) * _2447))) * _2447;
        float _4432 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2486 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2456 / ((_2460 * _2460) * 3.141590118408203125));
        float _2487 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2403 = (((((_2467 * _2113) + _818) * cbLight._m0[_2418].x) * _2486) * _2487) + _2289;
        _2405 = (((((_2467 * _2115) + _820) * cbLight._m0[_2418].y) * _2486) * _2487) + _2291;
        _2407 = (((((_2467 * _2116) + _821) * cbLight._m0[_2418].z) * _2486) * _2487) + _2293;
    }
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_1921.y == 0u)
    {
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2562;
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2562;
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2562;
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.x;
        uint _2589 = uint((float(_2577.y) * floor(float(uint(cbSceneParam._m0[85u].y * _757) / _2578))) + floor(float(uint(cbSceneParam._m0[85u].x * _756) / _2578)));
        float _2599 = (log2(_2565 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2600 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        uint _2603 = uint(isnan(14.0) ? _2600 : (isnan(_2600) ? 14.0 : min(_2600, 14.0)));
        uvec4 _2608 = texelFetch(g_lightClusterGridBuffer, int(((_2603 << 2u) + (_2589 << 6u)) >> 2u));
        uint _2609 = _2608.x;
        uint _2610 = _2577.z;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((((1u << ((_2610 >> 4u) & 15u)) + 4294967295u) & _2609) == 0u) || ((_2610 & 240u) == 0u))
        {
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
        }
        else
        {
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            uint _2869 = 0u;
            uint _2878;
            bool _2879;
            for (;;)
            {
                _2878 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2869 << 2u)) >> 2u)).x;
                _2879 = _2878 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2879)
                {
                    frontier_phi_66_pred = _2863;
                    frontier_phi_66_pred_1 = _2868;
                    frontier_phi_66_pred_2 = _2867;
                    frontier_phi_66_pred_3 = _2866;
                    frontier_phi_66_pred_4 = _2865;
                    frontier_phi_66_pred_5 = _2864;
                }
                else
                {
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    uint _3014;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2878;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    for (;;)
                    {
                        uint _3018 = uint(findLSB(_3014)) + (_2869 << 5u);
                        uint _3015 = (_3014 + 4294967295u) & _3014;
                        uint _3020 = _3018 * 48u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3040 = (_3018 * 48u) + 4u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3059 = (_3018 * 48u) + 8u;
                        vec3 _3070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x));
                        float _3074 = _3034.x - _2563;
                        float _3075 = _3034.y - _2564;
                        float _3076 = _3034.z - _2565;
                        float _3077 = dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076));
                        float _3080 = inversesqrt(_3077);
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3084 = dot(vec3(_775, _778, _781), vec3(_3081, _3082, _3083));
                        float _3089 = 1.0 - (_3077 * _3034.w);
                        float _4458 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3091 = sqrt(_3077) * _3053.w;
                        float _3094 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3084) + _3095;
                        float _3101 = _3091 * _3091;
                        float _3105 = ((isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))) * _3090) / ((_3101 * 0.699999988079071044921875) + 1.0);
                        float _3109 = (-0.0) - _2563;
                        float _3110 = (-0.0) - _2564;
                        float _3111 = (-0.0) - _2565;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3126 = exp2(log2(1.0 / ((_3101 * 3.5) + 5.0)) * 0.25);
                        float _3127 = 1.0 - _850;
                        float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                        float _3135 = _3134 * _3134;
                        float _3136 = _3135 * _3135;
                        float _3137 = _3116 + _3081;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3147 = dot(vec3(_775, _778, _781), vec3(_3116, _3117, _3118));
                        float _4474 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3151 = dot(vec3(_775, _778, _781), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                        float _4485 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3154 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                        float _3159 = _3094 * _3135;
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3084) + _3160;
                        float _4496 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3165 = 1.0 - _3135;
                        float _3175 = (0.5 / (((_3164 * ((_3150 * _3165) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3135) * _3150))) * _3164;
                        float _4507 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3186 = (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3158 * _3158) * ((_3101 * 2.1991131305694580078125) + 3.141590118408203125))) * _3090;
                        _2938 = (_3105 * _3053.x) + _3011;
                        _2939 = (_3105 * _3053.y) + _3012;
                        _2940 = (_3105 * _3053.z) + _3013;
                        _2935 = (_3186 * _3070.x) + _3008;
                        _2936 = (_3186 * _3070.y) + _3009;
                        _2937 = (_3186 * _3070.z) + _3010;
                        if (_3015 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _3015;
                        }
                    }
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2940;
                    frontier_phi_66_pred_2 = _2939;
                    frontier_phi_66_pred_3 = _2938;
                    frontier_phi_66_pred_4 = _2937;
                    frontier_phi_66_pred_5 = _2936;
                }
                _2711 = frontier_phi_66_pred;
                _2721 = frontier_phi_66_pred_1;
                _2719 = frontier_phi_66_pred_2;
                _2717 = frontier_phi_66_pred_3;
                _2715 = frontier_phi_66_pred_4;
                _2713 = frontier_phi_66_pred_5;
                uint _2870 = _2869 + 1u;
                if (_2870 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2863 = _2711;
                    _2864 = _2713;
                    _2865 = _2715;
                    _2866 = _2717;
                    _2867 = _2719;
                    _2868 = _2721;
                    _2869 = _2870;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
        }
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.z;
        uint _2727 = (_2725 >> 8u) & 15u;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((4294967295u << _2727) & _2609) == 0u)
        {
            _2831 = _2710;
            _2833 = _2712;
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
        }
        else
        {
            float _2856 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
            float _2857 = _2856 * _2563;
            float _2858 = _2856 * _2564;
            float _2859 = _2856 * _2565;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2727 < ((_2725 >> 12u) & 15u))
            {
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2991 = _2710;
                float _2992 = _2712;
                float _2993 = _2714;
                float _2994 = _2716;
                float _2995 = _2718;
                float _2996 = _2720;
                uint _2997 = _2727;
                uint _3006;
                bool _3007;
                for (;;)
                {
                    _3006 = texelFetch(g_lightClassification, int((((_2603 << 5u) + (_2589 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                    _3007 = _3006 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3007)
                    {
                        frontier_phi_77_pred = _2996;
                        frontier_phi_77_pred_1 = _2995;
                        frontier_phi_77_pred_2 = _2994;
                        frontier_phi_77_pred_3 = _2993;
                        frontier_phi_77_pred_4 = _2992;
                        frontier_phi_77_pred_5 = _2991;
                    }
                    else
                    {
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        uint _3219 = _3006;
                        uint _3220;
                        vec4 _3245;
                        float _3246;
                        vec4 _3261;
                        vec3 _3273;
                        vec4 _3288;
                        vec4 _3304;
                        float _3350;
                        bool _3351;
                        for (;;)
                        {
                            uint _3230 = ((_2997 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3219));
                            _3220 = (_3219 + 4294967295u) & _3219;
                            uint _3232 = _3230 * 40u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            _3246 = _3245.w;
                            uint _3248 = (_3230 * 40u) + 4u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3230 * 40u) + 8u;
                            _3273 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x));
                            uint _3275 = (_3230 * 40u) + 16u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3291 = (_3230 * 40u) + 20u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3230 * 40u) + 24u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3325 = (_3230 * 40u) + 28u;
                            vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3350 = fma(_2565, _3338.z, fma(_2564, _3338.y, _3338.x * _2563)) + _3338.w;
                            _3351 = !((fma(_2565, _3319.z, fma(_2564, _3319.y, _3319.x * _2563)) + _3319.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3351)
                            {
                                float _3378 = _3245.x - _2563;
                                float _3379 = _3245.y - _2564;
                                float _3380 = _3245.z - _2565;
                                float _3381 = dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380));
                                float _3384 = inversesqrt(_3381);
                                float _3385 = _3384 * _3378;
                                float _3386 = _3384 * _3379;
                                float _3387 = _3384 * _3380;
                                float _3391 = 1.0 - (_3381 / (_3246 * _3246));
                                float _4518 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3396 = sqrt(_3381) * _3261.w;
                                float _3398 = 1.39999997615814208984375 / (_3396 + 1.39999997615814208984375);
                                float _3399 = _3398 * _3398;
                                float _3402 = ((1.0 - _3399) * dot(vec3(_3385, _3386, _3387), vec3(_775, _778, _781))) + _3399;
                                float _3405 = _3396 * _3396;
                                float _3409 = (fma(_2565, _3288.z, fma(_2564, _3288.y, _3288.x * _2563)) + _3288.w) / _3350;
                                float _3410 = (fma(_2565, _3304.z, fma(_2564, _3304.y, _3304.x * _2563)) + _3304.w) / _3350;
                                float _3414 = 1.0 - dot(vec2(_3409, _3410), vec2(_3409, _3410));
                                float _4534 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3416 = _3415 * (((isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0))) * _3392) / ((_3405 * 0.699999988079071044921875) + 1.0));
                                float _3428 = exp2(log2(1.0 / ((_3405 * 3.5) + 5.0)) * 0.25);
                                float _3429 = 1.0 - _850;
                                float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                                float _3437 = _3436 * _3436;
                                float _3438 = _3437 * _3437;
                                float _3439 = _3385 - _2857;
                                float _3440 = _3386 - _2858;
                                float _3441 = _3387 - _2859;
                                float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                                float _3449 = dot(vec3(_775, _778, _781), vec3((-0.0) - _2857, (-0.0) - _2858, (-0.0) - _2859));
                                float _4545 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3453 = dot(vec3(_775, _778, _781), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                                float _4556 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3456 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                                float _3461 = _3398 * _3437;
                                float _3462 = _3461 * _3461;
                                float _3468 = ((1.0 - _3462) * dot(vec3(_775, _778, _781), vec3(_3385, _3386, _3387))) + _3462;
                                float _4567 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3470 = 1.0 - _3437;
                                float _3480 = (0.5 / (((_3469 * ((_3452 * _3470) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3469 * _3470) + _3437) * _3452))) * _3469;
                                float _4578 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3490 = (_3415 * _3392) * (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3460 * _3460) * ((_3405 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3416 * _3261.y;
                                frontier_phi_83_pred_1 = _3416 * _3261.x;
                                frontier_phi_83_pred_2 = _3490 * _3273.z;
                                frontier_phi_83_pred_3 = _3490 * _3273.y;
                                frontier_phi_83_pred_4 = _3490 * _3273.x;
                                frontier_phi_83_pred_5 = _3416 * _3261.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3498 = frontier_phi_83_pred;
                            _3497 = frontier_phi_83_pred_1;
                            _3496 = frontier_phi_83_pred_2;
                            _3495 = frontier_phi_83_pred_3;
                            _3494 = frontier_phi_83_pred_4;
                            _3499 = frontier_phi_83_pred_5;
                            _3203 = _3497 + _3216;
                            _3204 = _3498 + _3217;
                            _3205 = _3499 + _3218;
                            _3200 = _3494 + _3213;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            if (_3220 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3220;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3205;
                        frontier_phi_77_pred_1 = _3204;
                        frontier_phi_77_pred_2 = _3203;
                        frontier_phi_77_pred_3 = _3202;
                        frontier_phi_77_pred_4 = _3201;
                        frontier_phi_77_pred_5 = _3200;
                    }
                    _2842 = frontier_phi_77_pred;
                    _2840 = frontier_phi_77_pred_1;
                    _2838 = frontier_phi_77_pred_2;
                    _2836 = frontier_phi_77_pred_3;
                    _2834 = frontier_phi_77_pred_4;
                    _2832 = frontier_phi_77_pred_5;
                    uint _2998 = _2997 + 1u;
                    if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2991 = _2832;
                        _2992 = _2834;
                        _2993 = _2836;
                        _2994 = _2838;
                        _2995 = _2840;
                        _2996 = _2842;
                        _2997 = _2998;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2836;
                frontier_phi_58_59_ladder_1 = _2842;
                frontier_phi_58_59_ladder_2 = _2840;
                frontier_phi_58_59_ladder_3 = _2838;
                frontier_phi_58_59_ladder_4 = _2834;
                frontier_phi_58_59_ladder_5 = _2832;
            }
            else
            {
                frontier_phi_58_59_ladder = _2714;
                frontier_phi_58_59_ladder_1 = _2720;
                frontier_phi_58_59_ladder_2 = _2718;
                frontier_phi_58_59_ladder_3 = _2716;
                frontier_phi_58_59_ladder_4 = _2712;
                frontier_phi_58_59_ladder_5 = _2710;
            }
            _2831 = frontier_phi_58_59_ladder_5;
            _2833 = frontier_phi_58_59_ladder_4;
            _2835 = frontier_phi_58_59_ladder;
            _2837 = frontier_phi_58_59_ladder_3;
            _2839 = frontier_phi_58_59_ladder_2;
            _2841 = frontier_phi_58_59_ladder_1;
        }
        float _2846 = isnan(1.0) ? _834 : (isnan(_834) ? 1.0 : min(_834, 1.0));
        _2622 = (_2846 * _2837) + _2055;
        _2624 = (_2846 * _2839) + _2057;
        _2626 = (_2846 * _2841) + _2059;
        _2628 = ((_2831 * _818) * _2846) + _2403;
        _2630 = ((_2833 * _820) * _2846) + _2405;
        _2632 = ((_2835 * _821) * _2846) + _2407;
    }
    else
    {
        _2622 = _2055;
        _2624 = _2057;
        _2626 = _2059;
        _2628 = _2403;
        _2630 = _2405;
        _2632 = _2407;
    }
    float _4594 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4605 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4616 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2649 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2622 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _834))) + ((_2628 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2650 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2624 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _834))) + ((_2630 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2651 = ((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2626 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _834))) + ((_2632 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    uint _2652 = _240 + 6u;
    float _2660 = _756 / cbSceneParam._m0[86u].x;
    float _2661 = _757 / cbSceneParam._m0[86u].y;
    vec4 _2675 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2677 = _2675.x;
    float _2678 = _2675.y;
    float _2679 = _2675.z;
    float _2680 = _2675.w;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2735 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2736 = _2735 / _678;
        float _2747 = _2736 * _729;
        float _2748 = _730 * _2736;
        float _2749 = (-0.0) - _2748;
        float _2751 = _2736 * _731;
        float _2753 = (cbSceneParam._m0[77u].w * _2749) / _2735;
        float _2754 = _2753 + cbSceneParam._m0[79u].w;
        float _2755 = cbSceneParam._m0[79u].w - _2748;
        float _2761 = sqrt(((_2747 * _2747) + (_2748 * _2748)) + (_2751 * _2751));
        float _2764 = (1.0 - (cbSceneParam._m0[77u].w / _2735)) * _2761;
        float _2769 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2771 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2948;
        if (abs((_2749 - _2753) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2948 = ((((_2754 > 0.0) ? exp2(_2769 * _2754) : (2.0 - exp2(_2771 * _2754))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2764;
        }
        else
        {
            float _2892 = 1.0 / cbSceneParam._m0[80u].x;
            float _2893 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : max(_2754, _2755));
            float _2894 = isnan(_2755) ? _2754 : (isnan(_2754) ? _2755 : min(_2754, _2755));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            _2948 = ((abs(_2761 / _2749) * cbSceneParam._m0[80u].y) * ((((_2903 - _2904) * 2.0) - ((exp2(_2769 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)))) - exp2(_2769 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))))) * _2892)) - ((exp2(_2771 * _2903) - exp2(_2771 * _2904)) * _2892))) + (_2764 * cbSceneParam._m0[80u].z);
        }
        vec4 _2950 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, 1.0), 0.0);
        float _2959 = exp2((_2948 * (-1.44269502162933349609375)) * (1.0 - _2950.w));
        float _2960 = log2(_2959);
        float _2976 = log2(_2680);
        _2773 = (exp2(_2976 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].x)) * _2950.x) / cbSceneParam._m0[78u].x)) + _2677;
        _2775 = (exp2(_2976 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].y)) * _2950.y) / cbSceneParam._m0[78u].y)) + _2678;
        _2777 = (exp2(_2976 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2960 * cbSceneParam._m0[78u].z)) * _2950.z) / cbSceneParam._m0[78u].z)) + _2679;
        _2779 = _2959 * _2680;
    }
    else
    {
        _2773 = _2677;
        _2775 = _2678;
        _2777 = _2679;
        _2779 = _2680;
    }
    bool _2986;
    vec4 _2789;
    vec4 _2811;
    float _2813;
    float _2817;
    float _2818;
    float _2819;
    float _2820;
    bool _2830;
    for (;;)
    {
        _2789 = cbMatDynParam._m0[0u];
        float _2791 = roundEven(_2789.y);
        bool _2792 = _2791 == 3.0;
        float _2793 = log2(_2779);
        float _2800 = exp2(_2793 * cbSceneParam._m0[78u].x) * _2649;
        float _2801 = exp2(_2793 * cbSceneParam._m0[78u].y) * _2650;
        float _2802 = exp2(_2793 * cbSceneParam._m0[78u].z) * _2651;
        float _2809 = _745 + (-0.5);
        _2811 = cbMtdParam._m0[1u];
        _2813 = _2811.y * _2809;
        float _2816 = (_2791 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2817 = _2816 * (_2792 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2773)));
        _2818 = _2816 * (_2792 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
        _2819 = _2816 * (_2792 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
        _2820 = _2809 * 0.999000012874603271484375;
        _2830 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2830)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2820) < 0.5)
            {
                _2986 = true;
                break;
            }
        }
        uint _2927 = _794 + uint(_2789.w);
        if ((cbInstanceData._m0[_2927].w < 1.0) && ((cbInstanceData._m0[_2927].w + _2820) < 0.5))
        {
            _2986 = true;
            break;
        }
        if ((_2813 + 1.0) < _2811.x)
        {
            _2986 = true;
            break;
        }
        _2986 = false;
        break;
    }
    float _3191;
    if (_2986)
    {
        discard_state = true;
        _3191 = 0.0;
    }
    else
    {
        _3191 = cbInstanceData._m0[_2652].w;
    }
    SV_Target.x = _2817;
    SV_Target.y = _2818;
    SV_Target.z = _2819;
    SV_Target.w = _3191;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2652].w;
    discard_exit();
}


