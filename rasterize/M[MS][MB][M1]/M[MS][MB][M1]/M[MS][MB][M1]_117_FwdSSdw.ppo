#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1321;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3672 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _445 = ((_415.z - _436) * _388) + _436;
    float _448 = ((((_415.x - _434) * _388) + _434) * 2.0) + (-1.0);
    float _450 = ((((_415.y - _435) * _388) + _435) * 2.0) + (-1.0);
    float _451 = dot(vec2(_448, _450), vec2(_448, _450));
    float _3683 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))));
    float _459 = fma(_456, _239, fma(_450, _246, _448 * _232));
    float _462 = fma(_456, _240, fma(_450, _247, _448 * _233));
    float _465 = fma(_456, _241, fma(_450, _248, _448 * _234));
    float _469 = inversesqrt(dot(vec3(_459, _462, _465), vec3(_459, _462, _465)));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _518 = ((_513 - _514) * cbMtdParam._m0[24u].z) + _514;
    float _520 = (cbMtdParam._m0[19u].x + dot(vec4(_469 * _459, _469 * _462, _469 * _465, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_518 * cbMtdParam._m0[21u].z);
    float _3694 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _523 = (-0.0) - cbMtdParam._m0[24u].x;
    float _525 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
    float _533 = _521 - ((_521 * TEXCOORD_8.x) * _526);
    float _534 = _521 - ((_521 * TEXCOORD_8.y) * _526);
    float _535 = _521 - ((_521 * TEXCOORD_8.z) * _526);
    float _542 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _546 = ((isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : min(_542, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _554 = (_546 - (((_518 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _546))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3725 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _559 = ((_533 * (cbMtdParam._m0[17u].x - _395)) * _555) + _395;
    float _560 = ((_534 * (cbMtdParam._m0[17u].y - _396)) * _555) + _396;
    float _561 = ((_535 * (cbMtdParam._m0[17u].z - _397)) * _555) + _397;
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _575 = _573.x;
    float _576 = 1.0 - _575;
    float _603 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_575 - _576) * cbMtdParam._m0[24u].w) + _576) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3736 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _612 = ((((cbMtdParam._m0[10u].x - _559) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _604) + _559;
    float _613 = ((((cbMtdParam._m0[10u].y - _560) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _604) + _560;
    float _614 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _561)) * _604) + _561;
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _642 = _640.x;
    float _660 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _642) * _388) + _642;
    float _664 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _660) * cbMtdParam._m0[19u].z) + _660;
    float _667 = _664 - ((_555 * _533) * _664);
    float _669 = _667 - (_667 * _604);
    vec4 _683 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _690 = (_683.x * 2.0) + (-1.0);
    float _691 = (_683.y * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _3747 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _701 = (((_683.z - _445) * _533) * _555) + _445;
    float _704 = ((cbMtdParam._m0[23u].y - _701) * _604) + _701;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _729 = (_723.x * 2.0) + (-1.0);
    float _730 = (_723.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3758 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _751 = (((cbMtdParam._m0[21u].x * _448) + ((_690 - _448) * _533)) * _555) + _448;
    float _752 = (((cbMtdParam._m0[21u].x * _450) + ((_691 - _450) * _534)) * _555) + _450;
    float _753 = (((sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _456) * _535) * _555) + _456;
    float _764 = (((_729 - _751) + (_751 * cbMtdParam._m0[22u].z)) * _604) + _751;
    float _765 = (((_730 - _752) + (_752 * cbMtdParam._m0[22u].z)) * _604) + _752;
    float _766 = ((sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _753) * _604) + _753;
    float _768 = cbMtdParam._m0[22u].x + _485.w;
    float _771 = fma(_766, _239, fma(_765, _246, _764 * _232));
    float _774 = fma(_766, _240, fma(_765, _247, _764 * _233));
    float _777 = fma(_766, _241, fma(_765, _248, _764 * _234));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _3769 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _785 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _3791 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3802 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3813 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3824 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _790 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _854 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _844);
    float _855 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _844);
    float _856 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _844);
    float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
    float _861 = _854 * _860;
    float _862 = _855 * _860;
    float _863 = _856 * _860;
    float _869 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _870 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _888 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _891 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _894 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _908 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _914 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_908].x;
    float _915 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_908].y;
    float _916 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_908].z;
    float _3835 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _920 = 1.0 - _790;
    float _921 = _917 * _920;
    float _922 = _918 * _920;
    float _923 = _919 * _920;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _790;
    float _929 = (_918 + (-0.039999999105930328369140625)) * _790;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _790;
    float _931 = _928 + 0.039999999105930328369140625;
    float _933 = _929 + 0.039999999105930328369140625;
    float _934 = _930 + 0.039999999105930328369140625;
    vec4 _943 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _869, cbSceneParam._m0[86u].y * _870));
    float _947 = ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * TEXCOORD_5.w) * _943.x;
    float _948 = dot(vec3(_782, _783, _784), vec3(_861, _862, _863));
    float _951 = _948 * 2.0;
    float _955 = (_951 * _782) - _861;
    float _956 = (_951 * _783) - _862;
    float _957 = (_951 * _784) - _863;
    float _961 = abs(dot(vec3(_861, _862, _863), vec3(_782, _783, _784)));
    float _3868 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _963 = sqrt(_785);
    float _976 = exp2((_963 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_963 * 3.0));
    float _982 = (1.0 - _976) * ((_963 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _983 = _976 * _963;
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1320;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_1019, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011));
        float _1049 = fma(_1019, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011));
        float _1053 = fma(_1019, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011));
        float _1078 = _1011 + _782;
        float _1079 = _1015 + _783;
        float _1080 = _1019 + _784;
        float _1090 = fma(_1080, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078)) - _1045;
        float _1091 = fma(_1080, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078)) - _1049;
        float _1092 = fma(_1080, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078)) - _1053;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1148 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1114.x + (-0.5));
        float _1150 = _1148 * (_1114.y + (-0.5));
        float _1151 = _1148 * (_1114.z + (-0.5));
        float _1158 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1121.x + (-0.5));
        float _1160 = _1158 * (_1121.y + (-0.5));
        float _1161 = _1158 * (_1121.z + (-0.5));
        float _1168 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1128.x + (-0.5));
        float _1170 = _1168 * (_1128.y + (-0.5));
        float _1171 = _1168 * (_1128.z + (-0.5));
        float _1178 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1135.x + (-0.5));
        float _1180 = _1178 * (_1135.y + (-0.5));
        float _1181 = _1178 * (_1135.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1202 = (dot(vec3(_782, _783, _784), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1212 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3916 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1214 + 1.0))) + _1219) * _1182;
        float _1229 = _1150 * 0.5;
        float _1230 = _1160 * 0.5;
        float _1231 = _1170 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_782, _783, _784), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3949 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1256 + 1.0))) + _1261) * _1183;
        float _1271 = _1151 * 0.5;
        float _1272 = _1161 * 0.5;
        float _1273 = _1171 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_782, _783, _784), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3982 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1298 + 1.0))) + _1303) * _1184;
        _1320 = _1151;
        _1322 = _1150;
        _1323 = _1149;
        _1324 = _1161;
        _1325 = _1160;
        _1326 = _1159;
        _1327 = _1171;
        _1328 = _1170;
        _1329 = _1169;
        _1330 = _1184;
        _1331 = _1183;
        _1332 = _1182;
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1321;
        _1322 = _1321;
        _1323 = _1321;
        _1324 = _1321;
        _1325 = _1321;
        _1326 = _1321;
        _1327 = _1321;
        _1328 = _1321;
        _1329 = _1321;
        _1330 = _1321;
        _1331 = _1321;
        _1332 = _1321;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1360 = fma(_1019, cbModelParam._m0[30u].z, fma(_1015, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011));
        float _1364 = fma(_1019, cbModelParam._m0[31u].z, fma(_1015, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011));
        float _1368 = fma(_1019, cbModelParam._m0[32u].z, fma(_1015, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011));
        float _1391 = _1011 + _782;
        float _1392 = _1015 + _783;
        float _1393 = _1019 + _784;
        float _1403 = fma(_1393, cbModelParam._m0[30u].z, fma(_1392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1391)) - _1360;
        float _1404 = fma(_1393, cbModelParam._m0[31u].z, fma(_1392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1391)) - _1364;
        float _1405 = fma(_1393, cbModelParam._m0[32u].z, fma(_1392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1391)) - _1368;
        float _1409 = inversesqrt(dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405)));
        float _1422 = ((_1409 * _1403) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1360 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1409 * _1404) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1364 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1409 * _1405) / cbModelParam._m0[35u].z) + ((((((_1368 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        float _1459 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1426.x + (-0.5));
        float _1461 = _1459 * (_1426.y + (-0.5));
        float _1462 = _1459 * (_1426.z + (-0.5));
        float _1469 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1433.x + (-0.5));
        float _1471 = _1469 * (_1433.y + (-0.5));
        float _1472 = _1469 * (_1433.z + (-0.5));
        float _1479 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1440.x + (-0.5));
        float _1481 = _1479 * (_1440.y + (-0.5));
        float _1482 = _1479 * (_1440.z + (-0.5));
        float _1489 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1447.x + (-0.5));
        float _1491 = _1489 * (_1447.y + (-0.5));
        float _1492 = _1489 * (_1447.z + (-0.5));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = _1460 * 0.5;
        float _1497 = _1470 * 0.5;
        float _1498 = _1480 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_782, _783, _784), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4045 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1523 + 1.0))) + _1528) * _1493;
        float _1538 = _1461 * 0.5;
        float _1539 = _1471 * 0.5;
        float _1540 = _1481 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_782, _783, _784), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4078 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1565 + 1.0))) + _1570) * _1494;
        float _1580 = _1462 * 0.5;
        float _1581 = _1472 * 0.5;
        float _1582 = _1482 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_782, _783, _784), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4111 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1607 + 1.0))) + _1612) * _1495;
        _1629 = _1462;
        _1630 = _1461;
        _1631 = _1460;
        _1632 = _1472;
        _1633 = _1471;
        _1634 = _1470;
        _1635 = _1482;
        _1636 = _1481;
        _1637 = _1480;
        _1638 = _1495;
        _1639 = _1494;
        _1640 = _1493;
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1321;
        _1630 = _1321;
        _1631 = _1321;
        _1632 = _1321;
        _1633 = _1321;
        _1634 = _1321;
        _1635 = _1321;
        _1636 = _1321;
        _1637 = _1321;
        _1638 = _1321;
        _1639 = _1321;
        _1640 = _1321;
        _1641 = 0.0;
        _1642 = 0.0;
        _1643 = 0.0;
    }
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1333)) + _1333;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1334)) + _1334;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1335)) + _1335;
    float _1676 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1653));
    float _1697 = _955 * 0.5;
    float _1698 = _956 * 0.5;
    float _1699 = _957 * 0.5;
    float _1700 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1703 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1706 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1740;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1713 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1320, _1324, _1327, _1330));
        float _1717 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1721 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1728 = dot(vec4(cbModelParam._m0[39u]), vec4(_1697, _1698, _1699, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1751;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1742 = dot(vec4(cbModelParam._m0[40u]), vec4(_1697, _1698, _1699, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1755 = (_1751 * cbModelParam._m0[1u].x) + (_1740 * (1.0 - cbModelParam._m0[1u].x));
    float _1765 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1765 : min(cbModelParam._m0[25u].z, _1765));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1814 = fma(_1019, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011)) + cbModelParam._m0[13u].w;
        float _1818 = fma(_1019, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011)) + cbModelParam._m0[14u].w;
        float _1822 = fma(_1019, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011)) + cbModelParam._m0[15u].w;
        float _1825 = fma(_957, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955));
        float _1828 = fma(_957, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955));
        float _1831 = fma(_957, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955));
        float _1859;
        if (_1825 > 0.0)
        {
            _1859 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1859 = frontier_phi_14_12_ladder;
        }
        float _2083;
        if (_1828 > 0.0)
        {
            _2083 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2083 = frontier_phi_23_19_ladder;
        }
        float _2340;
        if (_1831 > 0.0)
        {
            _2340 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2340 = frontier_phi_35_30_ladder;
        }
        float _2342 = isnan(_2083) ? _1859 : (isnan(_1859) ? _2083 : min(_1859, _2083));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1825) + _1814;
        float _2348 = (_2343 * _1828) + _1818;
        float _2349 = (_2343 * _1831) + _1822;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2477 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1766);
            frontier_phi_13_35_ladder = _2477.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2477.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2477.x * cbModelParam._m0[1u].y;
        }
        _1847 = frontier_phi_13_35_ladder_2;
        _1849 = frontier_phi_13_35_ladder_1;
        _1851 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_955, _956, _957), _1766);
        _1847 = _1835.x * cbModelParam._m0[1u].y;
        _1849 = _1835.y * cbModelParam._m0[1u].y;
        _1851 = _1835.z * cbModelParam._m0[1u].y;
    }
    float _1855 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1855 : min(cbModelParam._m0[25u].w, _1855));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1910 = fma(_1019, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011)) + cbModelParam._m0[21u].w;
        float _1914 = fma(_1019, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011)) + cbModelParam._m0[22u].w;
        float _1918 = fma(_1019, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011)) + cbModelParam._m0[23u].w;
        float _1921 = fma(_957, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955));
        float _1924 = fma(_957, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955));
        float _1927 = fma(_957, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955));
        float _2088;
        if (_1921 > 0.0)
        {
            _2088 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2088 = frontier_phi_25_21_ladder;
        }
        float _2367;
        if (_1924 > 0.0)
        {
            _2367 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2367 = frontier_phi_37_32_ladder;
        }
        float _2580;
        if (_1927 > 0.0)
        {
            _2580 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2580 = frontier_phi_46_43_ladder;
        }
        float _2582 = isnan(_2367) ? _2088 : (isnan(_2088) ? _2367 : min(_2088, _2367));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _1921) + _1910;
        float _2588 = (_2583 * _1924) + _1914;
        float _2589 = (_2583 * _1927) + _1918;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2590;
        float _2593 = _2590 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2589 > _2593) || ((_2589 < _2591) || ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 < _2591) || (_2587 > _2593))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2589, cbModelParam._m0[17u].z, fma(_2588, cbModelParam._m0[17u].y, _2587 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2589, cbModelParam._m0[18u].z, fma(_2588, cbModelParam._m0[18u].y, _2587 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2589, cbModelParam._m0[19u].z, fma(_2588, cbModelParam._m0[19u].y, _2587 * cbModelParam._m0[19u].x))), _1856);
            frontier_phi_22_46_ladder = _2788.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2788.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2788.x * cbModelParam._m0[1u].z;
        }
        _1946 = frontier_phi_22_46_ladder_2;
        _1948 = frontier_phi_22_46_ladder_1;
        _1950 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_955, _956, _957), _1856);
        _1946 = _1930.x * cbModelParam._m0[1u].z;
        _1948 = _1930.y * cbModelParam._m0[1u].z;
        _1950 = _1930.z * cbModelParam._m0[1u].z;
    }
    float _1963 = (((_982 * _931) + _983) * _947) * ((cbModelParam._m0[1u].w * (_1946 - _1847)) + _1847);
    float _1965 = (((_982 * _933) + _983) * _947) * ((cbModelParam._m0[1u].w * (_1948 - _1849)) + _1849);
    float _1967 = (((_982 * _934) + _983) * _947) * ((cbModelParam._m0[1u].w * (_1950 - _1851)) + _1851);
    float _1970 = fma(_1967, cbSceneParam._m0[89u].z, fma(_1965, cbSceneParam._m0[89u].y, _1963 * cbSceneParam._m0[89u].x));
    float _1973 = fma(_1967, cbSceneParam._m0[90u].z, fma(_1965, cbSceneParam._m0[90u].y, _1963 * cbSceneParam._m0[90u].x));
    float _1976 = fma(_1967, cbSceneParam._m0[91u].z, fma(_1965, cbSceneParam._m0[91u].y, _1963 * cbSceneParam._m0[91u].x));
    vec4 _1984 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_869, _870));
    float _1986 = _1984.w;
    float _1998 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1986);
    float _1999 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1986);
    float _2000 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1986);
    uvec4 _2004 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2006 = _2004.x * 14u;
    uint _2007 = _2006 + 13u;
    float _2014 = _947 + (-1.0);
    float _2019 = (cbLight._m0[_2007].x * _2014) + 1.0;
    float _2020 = (cbLight._m0[_2007].y * _2014) + 1.0;
    float _2021 = (cbLight._m0[_2007].z * _2014) + 1.0;
    float _2022 = (cbLight._m0[_2007].w * _2014) + 1.0;
    uint _2023 = _2006 + 5u;
    float _2029 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
    uint _2033 = _2006 + 4u;
    float _2042 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2046 = _2006 | 1u;
    float _2057 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_782, _783, _784));
    float _2060 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_782, _783, _784));
    float _4247 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _4258 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2065 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2067 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2074 = ((cbLight._m0[_2023].x * _2029) * _2067) + (((cbLight._m0[_2033].x * _1998) * _2042) * _2065);
    float _2075 = ((_2029 * cbLight._m0[_2023].y) * _2067) + (((cbLight._m0[_2033].y * _1999) * _2042) * _2065);
    float _2076 = ((_2029 * cbLight._m0[_2023].z) * _2067) + (((cbLight._m0[_2033].z * _2000) * _2042) * _2065);
    uvec4 _2080 = floatBitsToUint(cbLight._m0[_2006 + 12u]);
    bool _2082 = _2080.x == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2082)
    {
        _2093 = _2074;
        _2095 = _2075;
        _2097 = _2076;
    }
    else
    {
        uint _2101 = _2006 + 6u;
        float _2117 = (dot(vec3(cbLight._m0[_2006 + 2u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4269 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2120 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2093 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _2074;
        _2095 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _2075;
        _2097 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _2076;
    }
    bool _2100 = _2080.y == 0u;
    float _2138;
    float _2140;
    float _2142;
    if (_2100)
    {
        _2138 = _2093;
        _2140 = _2095;
        _2142 = _2097;
    }
    else
    {
        uint _2311 = _2006 + 7u;
        float _2327 = (dot(vec3(cbLight._m0[_2006 + 3u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4285 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2330 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2138 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2093;
        _2140 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2095;
        _2142 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2097;
    }
    uint _2145 = _2006 + 8u;
    float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _785) * 0.949999988079071044921875);
    float _2159 = _2158 * _2158;
    float _2160 = cbLight._m0[_2006].x + _861;
    float _2161 = cbLight._m0[_2006].y + _862;
    float _2162 = cbLight._m0[_2006].z + _863;
    float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
    float _2167 = _2166 * _2160;
    float _2168 = _2166 * _2161;
    float _2169 = _2166 * _2162;
    float _2170 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2006].xyz));
    float _4301 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _4312 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2174 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2175 = dot(vec3(_782, _783, _784), vec3(_2167, _2168, _2169));
    float _4323 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2167, _2168, _2169));
    float _4334 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2159 * _2159;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2195 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
    float _2196 = 0.959999978542327880859375 - _928;
    float _2198 = 0.959999978542327880859375 - _929;
    float _2199 = 0.959999978542327880859375 - _930;
    float _2206 = 1.0 - _2159;
    float _2217 = (0.5 / (((_2174 * ((_2173 * _2206) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2206) + _2159) * _2173))) * _2173;
    float _4345 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    uint _2233 = _2006 + 9u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _785) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_2046].x + _861;
    float _2247 = cbLight._m0[_2046].y + _862;
    float _2248 = cbLight._m0[_2046].z + _863;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2046].xyz));
    float _4356 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2260 = dot(vec3(_782, _783, _784), vec3(_2253, _2254, _2255));
    float _4367 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2253, _2254, _2255));
    float _4378 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2245 * _2245;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
    float _2286 = 1.0 - _2245;
    float _2296 = (0.5 / (((_2174 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2286) + _2245) * _2259))) * _2259;
    float _4389 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    float _2308 = (((((_2279 * _2196) + _931) * cbLight._m0[_2233].x) * _2298) * _2029) + ((((cbLight._m0[_2145].x * _1998) * ((_2195 * _2196) + _931)) * _2219) * _2042);
    float _2309 = (((((_2279 * _2198) + _933) * cbLight._m0[_2233].y) * _2298) * _2029) + ((((cbLight._m0[_2145].y * _1999) * ((_2195 * _2198) + _933)) * _2219) * _2042);
    float _2310 = (((((_2279 * _2199) + _934) * cbLight._m0[_2233].z) * _2298) * _2029) + ((((cbLight._m0[_2145].z * _2000) * ((_2195 * _2199) + _934)) * _2219) * _2042);
    float _2372;
    float _2374;
    float _2376;
    if (_2082)
    {
        _2372 = _2308;
        _2374 = _2309;
        _2376 = _2310;
    }
    else
    {
        uint _2378 = _2006 + 2u;
        uint _2382 = _2006 + 10u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _785) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _861;
        float _2399 = cbLight._m0[_2378].y + _862;
        float _2400 = cbLight._m0[_2378].z + _863;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2378].xyz));
        float _4400 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2412 = dot(vec3(_782, _783, _784), vec3(_2405, _2406, _2407));
        float _4411 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4422 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
        float _2438 = 1.0 - _2397;
        float _2448 = (0.5 / (((_2174 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2438) + _2397) * _2411))) * _2411;
        float _4433 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2372 = (((((_2431 * _2196) + _931) * cbLight._m0[_2382].x) * _2450) * _2451) + _2308;
        _2374 = (((((_2431 * _2198) + _933) * cbLight._m0[_2382].y) * _2450) * _2451) + _2309;
        _2376 = (((((_2431 * _2199) + _934) * cbLight._m0[_2382].z) * _2450) * _2451) + _2310;
    }
    float _2486;
    float _2488;
    float _2490;
    if (_2100)
    {
        _2486 = _2372;
        _2488 = _2374;
        _2490 = _2376;
    }
    else
    {
        uint _2497 = _2006 + 3u;
        uint _2501 = _2006 + 11u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _785) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _861;
        float _2518 = cbLight._m0[_2497].y + _862;
        float _2519 = cbLight._m0[_2497].z + _863;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2497].xyz));
        float _4449 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2531 = dot(vec3(_782, _783, _784), vec3(_2524, _2525, _2526));
        float _4460 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4471 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
        float _2557 = 1.0 - _2516;
        float _2567 = (0.5 / (((_2174 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2174 * _2557) + _2516) * _2530))) * _2530;
        float _4482 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2486 = (((((_2550 * _2196) + _931) * cbLight._m0[_2501].x) * _2569) * _2570) + _2372;
        _2488 = (((((_2550 * _2198) + _933) * cbLight._m0[_2501].y) * _2569) * _2570) + _2374;
        _2490 = (((((_2550 * _2199) + _934) * cbLight._m0[_2501].z) * _2569) * _2570) + _2376;
    }
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_2004.y == 0u)
    {
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2645;
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2645;
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2645;
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.x;
        uint _2672 = uint((float(_2660.y) * floor(float(uint(cbSceneParam._m0[85u].y * _870) / _2661))) + floor(float(uint(cbSceneParam._m0[85u].x * _869) / _2661)));
        float _2682 = (log2(_2648 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2683 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        uint _2686 = uint(isnan(14.0) ? _2683 : (isnan(_2683) ? 14.0 : min(_2683, 14.0)));
        uvec4 _2691 = texelFetch(g_lightClusterGridBuffer, int(((_2686 << 2u) + (_2672 << 6u)) >> 2u));
        uint _2692 = _2691.x;
        uint _2693 = _2660.z;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((((1u << ((_2693 >> 4u) & 15u)) + 4294967295u) & _2692) == 0u) || ((_2693 & 240u) == 0u))
        {
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
        }
        else
        {
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            uint _2943 = 0u;
            uint _2952;
            bool _2953;
            for (;;)
            {
                _2952 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                _2953 = _2952 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2953)
                {
                    frontier_phi_61_pred = _2937;
                    frontier_phi_61_pred_1 = _2942;
                    frontier_phi_61_pred_2 = _2941;
                    frontier_phi_61_pred_3 = _2940;
                    frontier_phi_61_pred_4 = _2939;
                    frontier_phi_61_pred_5 = _2938;
                }
                else
                {
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    uint _3067;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2952;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3071 = uint(findLSB(_3067)) + (_2943 << 5u);
                        uint _3068 = (_3067 + 4294967295u) & _3067;
                        uint _3073 = _3071 * 48u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3093 = (_3071 * 48u) + 4u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3112 = (_3071 * 48u) + 8u;
                        vec3 _3123 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x));
                        float _3127 = _3087.x - _2646;
                        float _3128 = _3087.y - _2647;
                        float _3129 = _3087.z - _2648;
                        float _3130 = dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129));
                        float _3133 = inversesqrt(_3130);
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3137 = dot(vec3(_888, _891, _894), vec3(_3134, _3135, _3136));
                        float _3142 = 1.0 - (_3130 * _3087.w);
                        float _4508 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3144 = sqrt(_3130) * _3106.w;
                        float _3147 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3137) + _3148;
                        float _3154 = _3144 * _3144;
                        float _3158 = ((isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))) * _3143) / ((_3154 * 0.699999988079071044921875) + 1.0);
                        float _3162 = (-0.0) - _2646;
                        float _3163 = (-0.0) - _2647;
                        float _3164 = (-0.0) - _2648;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3179 = exp2(log2(1.0 / ((_3154 * 3.5) + 5.0)) * 0.25);
                        float _3180 = 1.0 - _963;
                        float _3187 = sqrt(1.0 - ((1.0 - (_3180 * _3180)) * (1.0 - (_3179 * _3179))));
                        float _3188 = _3187 * _3187;
                        float _3189 = _3188 * _3188;
                        float _3190 = _3169 + _3134;
                        float _3191 = _3170 + _3135;
                        float _3192 = _3171 + _3136;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3200 = dot(vec3(_888, _891, _894), vec3(_3169, _3170, _3171));
                        float _4524 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3204 = dot(vec3(_888, _891, _894), vec3(_3196 * _3190, _3196 * _3191, _3196 * _3192));
                        float _4535 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3211 = ((_3207 * _3207) * (_3189 + (-1.0))) + 1.0;
                        float _3212 = _3147 * _3188;
                        float _3213 = _3212 * _3212;
                        float _3216 = ((1.0 - _3213) * _3137) + _3213;
                        float _4546 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3218 = 1.0 - _3188;
                        float _3228 = (0.5 / (((_3217 * ((_3203 * _3218) + _3188)) + 9.9999999392252902907785028219223e-09) + (((_3217 * _3218) + _3188) * _3203))) * _3217;
                        float _4557 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3239 = (((_3189 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3211 * _3211) * ((_3154 * 2.1991131305694580078125) + 3.141590118408203125))) * _3143;
                        _2996 = (_3158 * _3106.x) + _3064;
                        _2997 = (_3158 * _3106.y) + _3065;
                        _2998 = (_3158 * _3106.z) + _3066;
                        _2993 = (_3239 * _3123.x) + _3061;
                        _2994 = (_3239 * _3123.y) + _3062;
                        _2995 = (_3239 * _3123.z) + _3063;
                        if (_3068 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _3068;
                        }
                    }
                    frontier_phi_61_pred = _2993;
                    frontier_phi_61_pred_1 = _2998;
                    frontier_phi_61_pred_2 = _2997;
                    frontier_phi_61_pred_3 = _2996;
                    frontier_phi_61_pred_4 = _2995;
                    frontier_phi_61_pred_5 = _2994;
                }
                _2794 = frontier_phi_61_pred;
                _2804 = frontier_phi_61_pred_1;
                _2802 = frontier_phi_61_pred_2;
                _2800 = frontier_phi_61_pred_3;
                _2798 = frontier_phi_61_pred_4;
                _2796 = frontier_phi_61_pred_5;
                uint _2944 = _2943 + 1u;
                if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2937 = _2794;
                    _2938 = _2796;
                    _2939 = _2798;
                    _2940 = _2800;
                    _2941 = _2802;
                    _2942 = _2804;
                    _2943 = _2944;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
        }
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.z;
        uint _2810 = (_2808 >> 8u) & 15u;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((4294967295u << _2810) & _2692) == 0u)
        {
            _2905 = _2793;
            _2907 = _2795;
            _2909 = _2797;
            _2911 = _2799;
            _2913 = _2801;
            _2915 = _2803;
        }
        else
        {
            float _2930 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
            float _2931 = _2930 * _2646;
            float _2932 = _2930 * _2647;
            float _2933 = _2930 * _2648;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2810 < ((_2808 >> 12u) & 15u))
            {
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _3044 = _2793;
                float _3045 = _2795;
                float _3046 = _2797;
                float _3047 = _2799;
                float _3048 = _2801;
                float _3049 = _2803;
                uint _3050 = _2810;
                uint _3059;
                bool _3060;
                for (;;)
                {
                    _3059 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                    _3060 = _3059 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3060)
                    {
                        frontier_phi_67_pred = _3047;
                        frontier_phi_67_pred_1 = _3048;
                        frontier_phi_67_pred_2 = _3049;
                        frontier_phi_67_pred_3 = _3046;
                        frontier_phi_67_pred_4 = _3045;
                        frontier_phi_67_pred_5 = _3044;
                    }
                    else
                    {
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3257 = _3044;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        uint _3263 = _3059;
                        uint _3264;
                        vec4 _3289;
                        float _3290;
                        vec4 _3305;
                        vec3 _3317;
                        vec4 _3332;
                        vec4 _3348;
                        float _3394;
                        bool _3395;
                        for (;;)
                        {
                            uint _3274 = ((_3050 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3263));
                            _3264 = (_3263 + 4294967295u) & _3263;
                            uint _3276 = _3274 * 40u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3290 = _3289.w;
                            uint _3292 = (_3274 * 40u) + 4u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3274 * 40u) + 8u;
                            _3317 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x));
                            uint _3319 = (_3274 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3274 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3274 * 40u) + 24u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3369 = (_3274 * 40u) + 28u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3394 = fma(_2648, _3382.z, fma(_2647, _3382.y, _3382.x * _2646)) + _3382.w;
                            _3395 = !((fma(_2648, _3363.z, fma(_2647, _3363.y, _3363.x * _2646)) + _3363.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3395)
                            {
                                float _3422 = _3289.x - _2646;
                                float _3423 = _3289.y - _2647;
                                float _3424 = _3289.z - _2648;
                                float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                                float _3428 = inversesqrt(_3425);
                                float _3429 = _3428 * _3422;
                                float _3430 = _3428 * _3423;
                                float _3431 = _3428 * _3424;
                                float _3435 = 1.0 - (_3425 / (_3290 * _3290));
                                float _4568 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3440 = sqrt(_3425) * _3305.w;
                                float _3442 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                                float _3443 = _3442 * _3442;
                                float _3446 = ((1.0 - _3443) * dot(vec3(_3429, _3430, _3431), vec3(_888, _891, _894))) + _3443;
                                float _3449 = _3440 * _3440;
                                float _3453 = (fma(_2648, _3332.z, fma(_2647, _3332.y, _3332.x * _2646)) + _3332.w) / _3394;
                                float _3454 = (fma(_2648, _3348.z, fma(_2647, _3348.y, _3348.x * _2646)) + _3348.w) / _3394;
                                float _3458 = 1.0 - dot(vec2(_3453, _3454), vec2(_3453, _3454));
                                float _4584 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3460 = _3459 * (((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3436) / ((_3449 * 0.699999988079071044921875) + 1.0));
                                float _3472 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                                float _3473 = 1.0 - _963;
                                float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                                float _3481 = _3480 * _3480;
                                float _3482 = _3481 * _3481;
                                float _3483 = _3429 - _2931;
                                float _3484 = _3430 - _2932;
                                float _3485 = _3431 - _2933;
                                float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                                float _3493 = dot(vec3(_888, _891, _894), vec3((-0.0) - _2931, (-0.0) - _2932, (-0.0) - _2933));
                                float _4595 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3497 = dot(vec3(_888, _891, _894), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                                float _4606 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                                float _3505 = _3442 * _3481;
                                float _3506 = _3505 * _3505;
                                float _3512 = ((1.0 - _3506) * dot(vec3(_888, _891, _894), vec3(_3429, _3430, _3431))) + _3506;
                                float _4617 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3514 = 1.0 - _3481;
                                float _3524 = (0.5 / (((_3513 * ((_3496 * _3514) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3513 * _3514) + _3481) * _3496))) * _3513;
                                float _4628 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3534 = (_3459 * _3436) * (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3504 * _3504) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3534 * _3317.x;
                                frontier_phi_73_pred_1 = _3534 * _3317.y;
                                frontier_phi_73_pred_2 = _3460 * _3305.z;
                                frontier_phi_73_pred_3 = _3460 * _3305.y;
                                frontier_phi_73_pred_4 = _3460 * _3305.x;
                                frontier_phi_73_pred_5 = _3534 * _3317.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3538 = frontier_phi_73_pred;
                            _3539 = frontier_phi_73_pred_1;
                            _3543 = frontier_phi_73_pred_2;
                            _3542 = frontier_phi_73_pred_3;
                            _3541 = frontier_phi_73_pred_4;
                            _3540 = frontier_phi_73_pred_5;
                            _3247 = _3541 + _3260;
                            _3248 = _3542 + _3261;
                            _3249 = _3543 + _3262;
                            _3244 = _3538 + _3257;
                            _3245 = _3539 + _3258;
                            _3246 = _3540 + _3259;
                            if (_3264 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3264;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3247;
                        frontier_phi_67_pred_1 = _3248;
                        frontier_phi_67_pred_2 = _3249;
                        frontier_phi_67_pred_3 = _3246;
                        frontier_phi_67_pred_4 = _3245;
                        frontier_phi_67_pred_5 = _3244;
                    }
                    _2912 = frontier_phi_67_pred;
                    _2914 = frontier_phi_67_pred_1;
                    _2916 = frontier_phi_67_pred_2;
                    _2910 = frontier_phi_67_pred_3;
                    _2908 = frontier_phi_67_pred_4;
                    _2906 = frontier_phi_67_pred_5;
                    uint _3051 = _3050 + 1u;
                    if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3044 = _2906;
                        _3045 = _2908;
                        _3046 = _2910;
                        _3047 = _2912;
                        _3048 = _2914;
                        _3049 = _2916;
                        _3050 = _3051;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2914;
                frontier_phi_55_56_ladder_1 = _2916;
                frontier_phi_55_56_ladder_2 = _2912;
                frontier_phi_55_56_ladder_3 = _2910;
                frontier_phi_55_56_ladder_4 = _2908;
                frontier_phi_55_56_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_55_56_ladder = _2801;
                frontier_phi_55_56_ladder_1 = _2803;
                frontier_phi_55_56_ladder_2 = _2799;
                frontier_phi_55_56_ladder_3 = _2797;
                frontier_phi_55_56_ladder_4 = _2795;
                frontier_phi_55_56_ladder_5 = _2793;
            }
            _2905 = frontier_phi_55_56_ladder_5;
            _2907 = frontier_phi_55_56_ladder_4;
            _2909 = frontier_phi_55_56_ladder_3;
            _2911 = frontier_phi_55_56_ladder_2;
            _2913 = frontier_phi_55_56_ladder;
            _2915 = frontier_phi_55_56_ladder_1;
        }
        float _2920 = isnan(1.0) ? _947 : (isnan(_947) ? 1.0 : min(_947, 1.0));
        _2705 = (_2920 * _2911) + _2138;
        _2707 = (_2920 * _2913) + _2140;
        _2709 = (_2920 * _2915) + _2142;
        _2711 = ((_2905 * _931) * _2920) + _2486;
        _2713 = ((_2907 * _933) * _2920) + _2488;
        _2715 = ((_2909 * _934) * _2920) + _2490;
    }
    else
    {
        _2705 = _2138;
        _2707 = _2140;
        _2709 = _2142;
        _2711 = _2486;
        _2713 = _2488;
        _2715 = _2490;
    }
    float _4644 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4655 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4666 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    uint _2735 = _251 + 6u;
    float _2743 = _869 / cbSceneParam._m0[86u].x;
    float _2744 = _870 / cbSceneParam._m0[86u].y;
    vec4 _2758 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2760 = _2758.x;
    float _2761 = _2758.y;
    float _2762 = _2758.z;
    float _2763 = _2758.w;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _2818 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _2819 = _2818 / _804;
        float _2830 = _2819 * _854;
        float _2831 = _855 * _2819;
        float _2832 = (-0.0) - _2831;
        float _2833 = _2819 * _856;
        float _2835 = (cbSceneParam._m0[77u].w * _2832) / _2818;
        float _2836 = _2835 + cbSceneParam._m0[79u].w;
        float _2837 = cbSceneParam._m0[79u].w - _2831;
        float _2843 = sqrt(((_2830 * _2830) + (_2831 * _2831)) + (_2833 * _2833));
        float _2846 = (1.0 - (cbSceneParam._m0[77u].w / _2818)) * _2843;
        float _2851 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2853 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2832 - _2835) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2836 > 0.0) ? exp2(_2851 * _2836) : (2.0 - exp2(_2853 * _2836))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2846;
        }
        else
        {
            float _2966 = 1.0 / cbSceneParam._m0[80u].x;
            float _2967 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : max(_2836, _2837));
            float _2968 = isnan(_2837) ? _2836 : (isnan(_2836) ? _2837 : min(_2836, _2837));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            _3006 = ((abs(_2843 / _2832) * cbSceneParam._m0[80u].y) * ((((_2977 - _2978) * 2.0) - ((exp2(_2851 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)))) - exp2(_2851 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))))) * _2966)) - ((exp2(_2853 * _2977) - exp2(_2853 * _2978)) * _2966))) + (_2846 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2763);
        _2855 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2760;
        _2857 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2761;
        _2859 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2762;
        _2861 = _3017 * _2763;
    }
    else
    {
        _2855 = _2760;
        _2857 = _2761;
        _2859 = _2762;
        _2861 = _2763;
    }
    float _2873 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2874 = _2873 == 3.0;
    float _2875 = log2(_2861);
    float _2882 = exp2(_2875 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2705 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _947))) + ((_2711 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1755)) * cbPerFrame._m0[3u].x));
    float _2883 = exp2(_2875 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2707 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _947))) + ((_2713 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1755)) * cbPerFrame._m0[3u].x));
    float _2884 = exp2(_2875 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2709 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _947))) + ((_2715 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1755)) * cbPerFrame._m0[3u].x));
    float _2893 = (_2873 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2893 * (_2874 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2855)));
    SV_Target.y = _2893 * (_2874 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.z = _2893 * (_2874 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.w = cbInstanceData._m0[_2735].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2735].w;
}


