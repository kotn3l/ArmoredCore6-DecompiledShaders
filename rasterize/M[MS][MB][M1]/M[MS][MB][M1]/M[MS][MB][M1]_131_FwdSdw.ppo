#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1298;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3907 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _392) + _461;
    float _473 = ((((_440.x - _459) * _392) + _459) * 2.0) + (-1.0);
    float _475 = ((((_440.y - _460) * _392) + _460) * 2.0) + (-1.0);
    float _476 = dot(vec2(_473, _475), vec2(_473, _475));
    float _3918 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _514 = _512.x;
    float _515 = 1.0 - _514;
    float _521 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _524 = ((isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : min(_521, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _533 = (_524 - ((((((_514 - _515) * cbMtdParam._m0[24u].z) + _515) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _524))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3939 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _541 = (_534 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) + _399;
    float _542 = (_534 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) + _400;
    float _543 = (_534 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) + _401;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _585 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_557 - _558) * cbMtdParam._m0[24u].w) + _558) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3950 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _594 = ((((cbMtdParam._m0[10u].x - _541) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _586) + _541;
    float _595 = ((((cbMtdParam._m0[10u].y - _542) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _586) + _542;
    float _596 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _543)) * _586) + _543;
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _624 = _622.x;
    float _642 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _624) * _392) + _624;
    float _646 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _642) * cbMtdParam._m0[19u].z) + _642;
    float _648 = _646 - (_646 * _534);
    float _650 = _648 - (_648 * _586);
    vec4 _664 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _671 = (_664.x * 2.0) + (-1.0);
    float _672 = (_664.y * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3961 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _681 = (_534 * (_664.z - _470)) + _470;
    float _684 = ((cbMtdParam._m0[23u].y - _681) * _586) + _681;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _709 = (_703.x * 2.0) + (-1.0);
    float _710 = (_703.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3972 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _728 = (((_671 - _473) + (cbMtdParam._m0[21u].x * _473)) * _534) + _473;
    float _729 = (((_672 - _475) + (cbMtdParam._m0[21u].x * _475)) * _534) + _475;
    float _730 = (_534 * (sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _481)) + _481;
    float _741 = (((_709 - _728) + (_728 * cbMtdParam._m0[22u].z)) * _586) + _728;
    float _742 = (((_710 - _729) + (_729 * cbMtdParam._m0[22u].z)) * _586) + _729;
    float _743 = ((sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) - _730) * _586) + _730;
    float _745 = cbMtdParam._m0[22u].x + _494.w;
    float _748 = fma(_743, _242 * NORMAL.x, fma(_742, _249 * TANGENT.x, (_235 * _227) * _741));
    float _751 = fma(_743, _242 * NORMAL.y, fma(_742, _249 * TANGENT.y, (_235 * _228) * _741));
    float _754 = fma(_743, _242 * NORMAL.z, fma(_742, _249 * TANGENT.z, (_235 * _229) * _741));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _3983 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _762 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4005 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4016 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4027 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4038 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _767 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    float _846 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _847 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _865 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _868 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _871 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    uint _885 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_885].z;
    float _4049 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _897 = 1.0 - _767;
    float _898 = _894 * _897;
    float _899 = _895 * _897;
    float _900 = _896 * _897;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _767;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _767;
    float _907 = (_896 + (-0.039999999105930328369140625)) * _767;
    float _908 = _905 + 0.039999999105930328369140625;
    float _910 = _906 + 0.039999999105930328369140625;
    float _911 = _907 + 0.039999999105930328369140625;
    vec4 _920 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _846, cbSceneParam._m0[86u].y * _847));
    float _924 = ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * TEXCOORD_5.w) * _920.x;
    float _925 = dot(vec3(_759, _760, _761), vec3(_838, _839, _840));
    float _928 = _925 * 2.0;
    float _932 = (_928 * _759) - _838;
    float _933 = (_928 * _760) - _839;
    float _934 = (_928 * _761) - _840;
    float _938 = abs(dot(vec3(_838, _839, _840), vec3(_759, _760, _761)));
    float _4082 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _940 = sqrt(_762);
    float _953 = exp2((_940 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_940 * 3.0));
    float _959 = (1.0 - _953) * ((_940 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _960 = _953 * _940;
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1297;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1022 = fma(_996, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988));
        float _1026 = fma(_996, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988));
        float _1030 = fma(_996, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988));
        float _1055 = _988 + _759;
        float _1056 = _992 + _760;
        float _1057 = _996 + _761;
        float _1067 = fma(_1057, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055)) - _1022;
        float _1068 = fma(_1057, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055)) - _1026;
        float _1069 = fma(_1057, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055)) - _1030;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1022 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1026 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[34u].z) + ((((((_1030 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1125 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1091.x + (-0.5));
        float _1127 = _1125 * (_1091.y + (-0.5));
        float _1128 = _1125 * (_1091.z + (-0.5));
        float _1135 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1098.x + (-0.5));
        float _1137 = _1135 * (_1098.y + (-0.5));
        float _1138 = _1135 * (_1098.z + (-0.5));
        float _1145 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1105.x + (-0.5));
        float _1147 = _1145 * (_1105.y + (-0.5));
        float _1148 = _1145 * (_1105.z + (-0.5));
        float _1155 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1112.x + (-0.5));
        float _1157 = _1155 * (_1112.y + (-0.5));
        float _1158 = _1155 * (_1112.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1179 = (dot(vec3(_759, _760, _761), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1189 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4130 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1191 + 1.0))) + _1196) * _1159;
        float _1206 = _1127 * 0.5;
        float _1207 = _1137 * 0.5;
        float _1208 = _1147 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_759, _760, _761), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4163 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1233 + 1.0))) + _1238) * _1160;
        float _1248 = _1128 * 0.5;
        float _1249 = _1138 * 0.5;
        float _1250 = _1148 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_759, _760, _761), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4196 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1275 + 1.0))) + _1280) * _1161;
        _1297 = _1128;
        _1299 = _1127;
        _1300 = _1126;
        _1301 = _1138;
        _1302 = _1137;
        _1303 = _1136;
        _1304 = _1148;
        _1305 = _1147;
        _1306 = _1146;
        _1307 = _1161;
        _1308 = _1160;
        _1309 = _1159;
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _1298;
        _1299 = _1298;
        _1300 = _1298;
        _1301 = _1298;
        _1302 = _1298;
        _1303 = _1298;
        _1304 = _1298;
        _1305 = _1298;
        _1306 = _1298;
        _1307 = _1298;
        _1308 = _1298;
        _1309 = _1298;
        _1310 = 0.0;
        _1311 = 0.0;
        _1312 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_996, cbModelParam._m0[30u].z, fma(_992, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988));
        float _1341 = fma(_996, cbModelParam._m0[31u].z, fma(_992, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988));
        float _1345 = fma(_996, cbModelParam._m0[32u].z, fma(_992, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988));
        float _1368 = _988 + _759;
        float _1369 = _992 + _760;
        float _1370 = _996 + _761;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_759, _760, _761), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4259 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_759, _760, _761), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4292 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_759, _760, _761), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4325 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1298;
        _1607 = _1298;
        _1608 = _1298;
        _1609 = _1298;
        _1610 = _1298;
        _1611 = _1298;
        _1612 = _1298;
        _1613 = _1298;
        _1614 = _1298;
        _1615 = _1298;
        _1616 = _1298;
        _1617 = _1298;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1310)) + _1310;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1311)) + _1311;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1312)) + _1312;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _932 * 0.5;
    float _1675 = _933 * 0.5;
    float _1676 = _934 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1297, _1301, _1304, _1307));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_996, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_996, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_996, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_934, cbModelParam._m0[13u].z, fma(_933, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932));
        float _1804 = fma(_934, cbModelParam._m0[14u].z, fma(_933, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932));
        float _1807 = fma(_934, cbModelParam._m0[15u].z, fma(_933, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1835 = frontier_phi_14_12_ladder;
        }
        float _2006;
        if (_1804 > 0.0)
        {
            _2006 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2006 = frontier_phi_23_19_ladder;
        }
        float _2301;
        if (_1807 > 0.0)
        {
            _2301 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2301 = frontier_phi_35_30_ladder;
        }
        float _2303 = isnan(_2006) ? _1835 : (isnan(_1835) ? _2006 : min(_1835, _2006));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1801) + _1790;
        float _2309 = (_2304 * _1804) + _1794;
        float _2310 = (_2304 * _1807) + _1798;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2311;
        float _2315 = _2311 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 > _2315) || ((_2309 < _2313) || ((_2308 < _2313) || (_2308 > _2315))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2310, cbModelParam._m0[9u].z, fma(_2309, cbModelParam._m0[9u].y, _2308 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2310, cbModelParam._m0[10u].z, fma(_2309, cbModelParam._m0[10u].y, _2308 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2310, cbModelParam._m0[11u].z, fma(_2309, cbModelParam._m0[11u].y, _2308 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_13_35_ladder = _2455.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2455.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2455.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_13_35_ladder_2;
        _1825 = frontier_phi_13_35_ladder_1;
        _1827 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_932, _933, _934), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_996, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_996, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_996, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_934, cbModelParam._m0[21u].z, fma(_933, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932));
        float _1899 = fma(_934, cbModelParam._m0[22u].z, fma(_933, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932));
        float _1902 = fma(_934, cbModelParam._m0[23u].z, fma(_933, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932));
        float _2011;
        if (_1896 > 0.0)
        {
            _2011 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2011 = frontier_phi_25_21_ladder;
        }
        float _2328;
        if (_1899 > 0.0)
        {
            _2328 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2328 = frontier_phi_37_32_ladder;
        }
        float _2666;
        if (_1902 > 0.0)
        {
            _2666 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2666 = frontier_phi_47_44_ladder;
        }
        float _2668 = isnan(_2328) ? _2011 : (isnan(_2011) ? _2328 : min(_2011, _2328));
        float _2669 = isnan(_2666) ? _2668 : (isnan(_2668) ? _2666 : min(_2668, _2666));
        float _2673 = (_2669 * _1896) + _1885;
        float _2674 = (_2669 * _1899) + _1889;
        float _2675 = (_2669 * _1902) + _1893;
        float _2676 = _2669 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2676;
        float _2679 = _2676 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2675 > _2679) || ((_2675 < _2677) || ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 < _2677) || (_2673 > _2679))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2675, cbModelParam._m0[17u].z, fma(_2674, cbModelParam._m0[17u].y, _2673 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2675, cbModelParam._m0[18u].z, fma(_2674, cbModelParam._m0[18u].y, _2673 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2675, cbModelParam._m0[19u].z, fma(_2674, cbModelParam._m0[19u].y, _2673 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_22_47_ladder = _2797.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2797.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2797.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_22_47_ladder_2;
        _1923 = frontier_phi_22_47_ladder_1;
        _1925 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_932, _933, _934), _1832);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1938 = (((_959 * _908) + _960) * _924) * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1940 = (((_959 * _910) + _960) * _924) * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1942 = (((_959 * _911) + _960) * _924) * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1998 = _1985 / _1997;
    float _1999 = _1989 / _1997;
    float _2000 = _1993 / _1997;
    float _2147;
    float _2148;
    float _2149;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2027 = ((uint(_2000 > cbSceneParam._m0[59u].y) + uint(_2000 > cbSceneParam._m0[59u].x)) + uint(_2000 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2028 = _2027 + 43u;
        uint _2036 = _2027 + 44u;
        uint _2044 = _2027 + 45u;
        uint _2052 = _2027 + 46u;
        float _2063 = fma(_1997, cbSceneParam._m0[_2028].w, fma(_1993, cbSceneParam._m0[_2028].z, fma(_1989, cbSceneParam._m0[_2028].y, _1985 * cbSceneParam._m0[_2028].x)));
        float _2067 = fma(_1997, cbSceneParam._m0[_2036].w, fma(_1993, cbSceneParam._m0[_2036].z, fma(_1989, cbSceneParam._m0[_2036].y, _1985 * cbSceneParam._m0[_2036].x)));
        float _2075 = fma(_1997, cbSceneParam._m0[_2052].w, fma(_1993, cbSceneParam._m0[_2052].z, fma(_1989, cbSceneParam._m0[_2052].y, _1985 * cbSceneParam._m0[_2052].x)));
        float _2080 = cbSceneParam._m0[33u].z * _2075;
        float _2082 = cbSceneParam._m0[33u].w * _2075;
        float _2085 = fma(_1997, cbSceneParam._m0[_2044].w, fma(_1993, cbSceneParam._m0[_2044].z, fma(_1989, cbSceneParam._m0[_2044].y, _1985 * cbSceneParam._m0[_2044].x))) / _2075;
        float _2133 = (cbSceneParam._m0[33u].x - sqrt(((_1999 * _1999) + (_1998 * _1998)) + (_2000 * _2000))) * cbSceneParam._m0[33u].y;
        float _4451 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2140 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 + _2063) / _2075, (_2082 + _2067) / _2075), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 + _2063) / _2075, (_2067 - _2080) / _2075), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 - _2080) / _2075, (_2067 - _2082) / _2075), _2085), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 - _2082) / _2075, (_2080 + _2067) / _2075), _2085), 0.0)).x), vec4(0.25)));
        _2147 = 1.0 - (_2140 * cbSceneParam._m0[34u].x);
        _2148 = 1.0 - (_2140 * cbSceneParam._m0[34u].y);
        _2149 = 1.0 - (_2140 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2147 = 1.0;
        _2148 = 1.0;
        _2149 = 1.0;
    }
    float _2213;
    float _2215;
    float _2217;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2201 = fma(_1997, cbSceneParam._m0[63u].w, fma(_1993, cbSceneParam._m0[63u].z, fma(_1989, cbSceneParam._m0[63u].y, _1985 * cbSceneParam._m0[63u].x)));
        float _2202 = fma(_1997, cbSceneParam._m0[60u].w, fma(_1993, cbSceneParam._m0[60u].z, fma(_1989, cbSceneParam._m0[60u].y, _1985 * cbSceneParam._m0[60u].x))) / _2201;
        float _2203 = fma(_1997, cbSceneParam._m0[61u].w, fma(_1993, cbSceneParam._m0[61u].z, fma(_1989, cbSceneParam._m0[61u].y, _1985 * cbSceneParam._m0[61u].x))) / _2201;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2202 >= cbSceneParam._m0[64u].x) && (_2203 >= cbSceneParam._m0[64u].y)) && (_2202 <= cbSceneParam._m0[64u].z)) && (_2203 <= cbSceneParam._m0[64u].w))
        {
            float _2341 = fma(_1997, cbSceneParam._m0[62u].w, fma(_1993, cbSceneParam._m0[62u].z, fma(_1989, cbSceneParam._m0[62u].y, _1985 * cbSceneParam._m0[62u].x))) / _2201;
            float _2345 = isnan(cbSceneParam._m0[41u].w) ? _2341 : (isnan(_2341) ? cbSceneParam._m0[41u].w : max(_2341, cbSceneParam._m0[41u].w));
            float _2388 = (cbSceneParam._m0[33u].x - sqrt(((_1999 * _1999) + (_1998 * _1998)) + (_2000 * _2000))) * cbSceneParam._m0[33u].y;
            float _4467 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
            float _2395 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2202, cbSceneParam._m0[33u].w + _2203), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2202, _2203 - cbSceneParam._m0[33u].z), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2202 - cbSceneParam._m0[33u].z, _2203 - cbSceneParam._m0[33u].w), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2202 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2203), _2345), 0.0)).x), vec4(0.25)));
            float _2399 = 1.0 - (_2395 * cbSceneParam._m0[34u].x);
            float _2400 = 1.0 - (_2395 * cbSceneParam._m0[34u].y);
            float _2401 = 1.0 - (_2395 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2401) ? _2149 : (isnan(_2149) ? _2401 : min(_2149, _2401));
            frontier_phi_34_33_ladder_1 = isnan(_2400) ? _2148 : (isnan(_2148) ? _2400 : min(_2148, _2400));
            frontier_phi_34_33_ladder_2 = isnan(_2399) ? _2147 : (isnan(_2147) ? _2399 : min(_2147, _2399));
        }
        else
        {
            frontier_phi_34_33_ladder = _2149;
            frontier_phi_34_33_ladder_1 = _2148;
            frontier_phi_34_33_ladder_2 = _2147;
        }
        _2213 = frontier_phi_34_33_ladder_2;
        _2215 = frontier_phi_34_33_ladder_1;
        _2217 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2213 = _2147;
        _2215 = _2148;
        _2217 = _2149;
    }
    uvec4 _2222 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2224 = _2222.x * 14u;
    uint _2225 = _2224 + 13u;
    float _2232 = _924 + (-1.0);
    float _2237 = (cbLight._m0[_2225].x * _2232) + 1.0;
    float _2238 = (cbLight._m0[_2225].y * _2232) + 1.0;
    float _2239 = (cbLight._m0[_2225].z * _2232) + 1.0;
    float _2240 = (cbLight._m0[_2225].w * _2232) + 1.0;
    uint _2241 = _2224 + 5u;
    float _2247 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2251 = _2224 + 4u;
    float _2260 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2264 = _2224 | 1u;
    float _2275 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_759, _760, _761));
    float _2278 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_759, _760, _761));
    float _4503 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _4514 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2283 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2285 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2292 = ((cbLight._m0[_2241].x * _2247) * _2285) + (((cbLight._m0[_2251].x * _2213) * _2260) * _2283);
    float _2293 = ((_2247 * cbLight._m0[_2241].y) * _2285) + (((cbLight._m0[_2251].y * _2215) * _2260) * _2283);
    float _2294 = ((_2247 * cbLight._m0[_2241].z) * _2285) + (((cbLight._m0[_2251].z * _2217) * _2260) * _2283);
    uvec4 _2298 = floatBitsToUint(cbLight._m0[_2224 + 12u]);
    bool _2300 = _2298.x == 0u;
    float _2402;
    float _2404;
    float _2406;
    if (_2300)
    {
        _2402 = _2292;
        _2404 = _2293;
        _2406 = _2294;
    }
    else
    {
        uint _2410 = _2224 + 6u;
        float _2426 = (dot(vec3(cbLight._m0[_2224 + 2u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2427 = _2426 * _2426;
        float _4525 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2428 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2429 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2402 = (((cbLight._m0[_2410].x * 0.3183098733425140380859375) * _2428) * _2429) + _2292;
        _2404 = (((cbLight._m0[_2410].y * 0.3183098733425140380859375) * _2428) * _2429) + _2293;
        _2406 = (((cbLight._m0[_2410].z * 0.3183098733425140380859375) * _2428) * _2429) + _2294;
    }
    bool _2409 = _2298.y == 0u;
    float _2464;
    float _2466;
    float _2468;
    if (_2409)
    {
        _2464 = _2402;
        _2466 = _2404;
        _2468 = _2406;
    }
    else
    {
        uint _2637 = _2224 + 7u;
        float _2653 = (dot(vec3(cbLight._m0[_2224 + 3u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2654 = _2653 * _2653;
        float _4541 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2655 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2656 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2464 = (((cbLight._m0[_2637].x * 0.3183098733425140380859375) * _2655) * _2656) + _2402;
        _2466 = (((cbLight._m0[_2637].y * 0.3183098733425140380859375) * _2655) * _2656) + _2404;
        _2468 = (((cbLight._m0[_2637].z * 0.3183098733425140380859375) * _2655) * _2656) + _2406;
    }
    uint _2471 = _2224 + 8u;
    float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _762) * 0.949999988079071044921875);
    float _2485 = _2484 * _2484;
    float _2486 = cbLight._m0[_2224].x + _838;
    float _2487 = cbLight._m0[_2224].y + _839;
    float _2488 = cbLight._m0[_2224].z + _840;
    float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
    float _2493 = _2492 * _2486;
    float _2494 = _2492 * _2487;
    float _2495 = _2492 * _2488;
    float _2496 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2224].xyz));
    float _4557 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _4568 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _2500 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2501 = dot(vec3(_759, _760, _761), vec3(_2493, _2494, _2495));
    float _4579 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2505 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2493, _2494, _2495));
    float _4590 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2509 = _2485 * _2485;
    float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
    float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2522 = 0.959999978542327880859375 - _905;
    float _2524 = 0.959999978542327880859375 - _906;
    float _2525 = 0.959999978542327880859375 - _907;
    float _2532 = 1.0 - _2485;
    float _2543 = (0.5 / (((_2500 * ((_2499 * _2532) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2532) + _2485) * _2499))) * _2499;
    float _4601 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2545 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
    uint _2559 = _2224 + 9u;
    float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _762) * 0.949999988079071044921875);
    float _2571 = _2570 * _2570;
    float _2572 = cbLight._m0[_2264].x + _838;
    float _2573 = cbLight._m0[_2264].y + _839;
    float _2574 = cbLight._m0[_2264].z + _840;
    float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
    float _2579 = _2578 * _2572;
    float _2580 = _2578 * _2573;
    float _2581 = _2578 * _2574;
    float _2582 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2264].xyz));
    float _4612 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2586 = dot(vec3(_759, _760, _761), vec3(_2579, _2580, _2581));
    float _4623 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2590 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2579, _2580, _2581));
    float _4634 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2594 = _2571 * _2571;
    float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
    float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2612 = 1.0 - _2571;
    float _2622 = (0.5 / (((_2500 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2612) + _2571) * _2585))) * _2585;
    float _4645 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
    float _2634 = (((((_2605 * _2522) + _908) * cbLight._m0[_2559].x) * _2624) * _2247) + ((((cbLight._m0[_2471].x * _2213) * ((_2521 * _2522) + _908)) * _2545) * _2260);
    float _2635 = (((((_2605 * _2524) + _910) * cbLight._m0[_2559].y) * _2624) * _2247) + ((((cbLight._m0[_2471].y * _2215) * ((_2521 * _2524) + _910)) * _2545) * _2260);
    float _2636 = (((((_2605 * _2525) + _911) * cbLight._m0[_2559].z) * _2624) * _2247) + ((((cbLight._m0[_2471].z * _2217) * ((_2521 * _2525) + _911)) * _2545) * _2260);
    float _2692;
    float _2694;
    float _2696;
    if (_2300)
    {
        _2692 = _2634;
        _2694 = _2635;
        _2696 = _2636;
    }
    else
    {
        uint _2698 = _2224 + 2u;
        uint _2702 = _2224 + 10u;
        float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2698].w)) * _762) * 0.949999988079071044921875);
        float _2717 = _2716 * _2716;
        float _2718 = cbLight._m0[_2698].x + _838;
        float _2719 = cbLight._m0[_2698].y + _839;
        float _2720 = cbLight._m0[_2698].z + _840;
        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
        float _2725 = _2724 * _2718;
        float _2726 = _2724 * _2719;
        float _2727 = _2724 * _2720;
        float _2728 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2698].xyz));
        float _4656 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2732 = dot(vec3(_759, _760, _761), vec3(_2725, _2726, _2727));
        float _4667 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2736 = dot(vec3(cbLight._m0[_2698].xyz), vec3(_2725, _2726, _2727));
        float _4678 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2740 = _2717 * _2717;
        float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
        float _2751 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
        float _2758 = 1.0 - _2717;
        float _2768 = (0.5 / (((_2500 * ((_2731 * _2758) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2758) + _2717) * _2731))) * _2731;
        float _4689 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2770 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
        float _2771 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2692 = (((((_2751 * _2522) + _908) * cbLight._m0[_2702].x) * _2770) * _2771) + _2634;
        _2694 = (((((_2751 * _2524) + _910) * cbLight._m0[_2702].y) * _2770) * _2771) + _2635;
        _2696 = (((((_2751 * _2525) + _911) * cbLight._m0[_2702].z) * _2770) * _2771) + _2636;
    }
    float _2802;
    float _2804;
    float _2806;
    if (_2409)
    {
        _2802 = _2692;
        _2804 = _2694;
        _2806 = _2696;
    }
    else
    {
        uint _2813 = _2224 + 3u;
        uint _2817 = _2224 + 11u;
        float _2831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2813].w)) * _762) * 0.949999988079071044921875);
        float _2832 = _2831 * _2831;
        float _2833 = cbLight._m0[_2813].x + _838;
        float _2834 = cbLight._m0[_2813].y + _839;
        float _2835 = cbLight._m0[_2813].z + _840;
        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
        float _2840 = _2839 * _2833;
        float _2841 = _2839 * _2834;
        float _2842 = _2839 * _2835;
        float _2843 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2813].xyz));
        float _4705 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2847 = dot(vec3(_759, _760, _761), vec3(_2840, _2841, _2842));
        float _4716 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2851 = dot(vec3(cbLight._m0[_2813].xyz), vec3(_2840, _2841, _2842));
        float _4727 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2855 = _2832 * _2832;
        float _2859 = ((_2850 * _2850) * (_2855 + (-1.0))) + 1.0;
        float _2866 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
        float _2873 = 1.0 - _2832;
        float _2883 = (0.5 / (((_2500 * ((_2846 * _2873) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2500 * _2873) + _2832) * _2846))) * _2846;
        float _4738 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2885 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2855 / ((_2859 * _2859) * 3.141590118408203125));
        float _2886 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2802 = (((((_2866 * _2522) + _908) * cbLight._m0[_2817].x) * _2885) * _2886) + _2692;
        _2804 = (((((_2866 * _2524) + _910) * cbLight._m0[_2817].y) * _2885) * _2886) + _2694;
        _2806 = (((((_2866 * _2525) + _911) * cbLight._m0[_2817].z) * _2885) * _2886) + _2696;
    }
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_2222.y == 0u)
    {
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.x;
        uint _2919 = uint((float(_2907.y) * floor(float(uint(cbSceneParam._m0[85u].y * _847) / _2908))) + floor(float(uint(cbSceneParam._m0[85u].x * _846) / _2908)));
        float _2929 = (log2(_2000 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2930 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        uint _2933 = uint(isnan(14.0) ? _2930 : (isnan(_2930) ? 14.0 : min(_2930, 14.0)));
        uvec4 _2938 = texelFetch(g_lightClusterGridBuffer, int(((_2933 << 2u) + (_2919 << 6u)) >> 2u));
        uint _2939 = _2938.x;
        uint _2940 = _2907.z;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((((1u << ((_2940 >> 4u) & 15u)) + 4294967295u) & _2939) == 0u) || ((_2940 & 240u) == 0u))
        {
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
        }
        else
        {
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            uint _3170 = 0u;
            uint _3179;
            bool _3180;
            for (;;)
            {
                _3179 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                _3180 = _3179 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3180)
                {
                    frontier_phi_66_pred = _3169;
                    frontier_phi_66_pred_1 = _3168;
                    frontier_phi_66_pred_2 = _3167;
                    frontier_phi_66_pred_3 = _3166;
                    frontier_phi_66_pred_4 = _3165;
                    frontier_phi_66_pred_5 = _3164;
                }
                else
                {
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3179;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3170 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3320 = (_3298 * 48u) + 4u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3339 = (_3298 * 48u) + 8u;
                        vec3 _3350 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x));
                        float _3354 = _3314.x - _1998;
                        float _3355 = _3314.y - _1999;
                        float _3356 = _3314.z - _2000;
                        float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                        float _3360 = inversesqrt(_3357);
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3364 = dot(vec3(_865, _868, _871), vec3(_3361, _3362, _3363));
                        float _3369 = 1.0 - (_3357 * _3314.w);
                        float _4764 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3371 = sqrt(_3357) * _3333.w;
                        float _3374 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3364) + _3375;
                        float _3381 = _3371 * _3371;
                        float _3385 = ((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3370) / ((_3381 * 0.699999988079071044921875) + 1.0);
                        float _3389 = (-0.0) - _1998;
                        float _3390 = (-0.0) - _1999;
                        float _3391 = (-0.0) - _2000;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3405 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                        float _3406 = 1.0 - _940;
                        float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                        float _3414 = _3413 * _3413;
                        float _3415 = _3414 * _3414;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3418 = _3398 + _3363;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3426 = dot(vec3(_865, _868, _871), vec3(_3396, _3397, _3398));
                        float _4780 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3430 = dot(vec3(_865, _868, _871), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                        float _4791 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                        float _3438 = _3374 * _3414;
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3364) + _3439;
                        float _4802 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3443 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3444 = 1.0 - _3414;
                        float _3454 = (0.5 / (((_3443 * ((_3429 * _3444) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3414) * _3429))) * _3443;
                        float _4813 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3465 = (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3437 * _3437) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125))) * _3370;
                        _3223 = (_3385 * _3333.x) + _3291;
                        _3224 = (_3385 * _3333.y) + _3292;
                        _3225 = (_3385 * _3333.z) + _3293;
                        _3220 = (_3465 * _3350.x) + _3288;
                        _3221 = (_3465 * _3350.y) + _3289;
                        _3222 = (_3465 * _3350.z) + _3290;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_66_pred = _3225;
                    frontier_phi_66_pred_1 = _3224;
                    frontier_phi_66_pred_2 = _3223;
                    frontier_phi_66_pred_3 = _3222;
                    frontier_phi_66_pred_4 = _3221;
                    frontier_phi_66_pred_5 = _3220;
                }
                _3030 = frontier_phi_66_pred;
                _3028 = frontier_phi_66_pred_1;
                _3026 = frontier_phi_66_pred_2;
                _3024 = frontier_phi_66_pred_3;
                _3022 = frontier_phi_66_pred_4;
                _3020 = frontier_phi_66_pred_5;
                uint _3171 = _3170 + 1u;
                if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3164 = _3020;
                    _3165 = _3022;
                    _3166 = _3024;
                    _3167 = _3026;
                    _3168 = _3028;
                    _3169 = _3030;
                    _3170 = _3171;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
        }
        uvec4 _3033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3034 = _3033.z;
        uint _3036 = (_3034 >> 8u) & 15u;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((4294967295u << _3036) & _2939) == 0u)
        {
            _3132 = _3019;
            _3134 = _3021;
            _3136 = _3023;
            _3138 = _3025;
            _3140 = _3027;
            _3142 = _3029;
        }
        else
        {
            float _3157 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
            float _3158 = _3157 * _1998;
            float _3159 = _3157 * _1999;
            float _3160 = _3157 * _2000;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3036 < ((_3034 >> 12u) & 15u))
            {
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3271 = _3019;
                float _3272 = _3021;
                float _3273 = _3023;
                float _3274 = _3025;
                float _3275 = _3027;
                float _3276 = _3029;
                uint _3277 = _3036;
                uint _3286;
                bool _3287;
                for (;;)
                {
                    _3286 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                    _3287 = _3286 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3287)
                    {
                        frontier_phi_72_pred = _3276;
                        frontier_phi_72_pred_1 = _3275;
                        frontier_phi_72_pred_2 = _3274;
                        frontier_phi_72_pred_3 = _3273;
                        frontier_phi_72_pred_4 = _3272;
                        frontier_phi_72_pred_5 = _3271;
                    }
                    else
                    {
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3483 = _3271;
                        float _3484 = _3272;
                        float _3485 = _3273;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        float _3488 = _3276;
                        uint _3489 = _3286;
                        uint _3490;
                        vec4 _3515;
                        float _3516;
                        vec4 _3531;
                        vec3 _3543;
                        vec4 _3558;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3500 = ((_3277 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3489));
                            _3490 = (_3489 + 4294967295u) & _3489;
                            uint _3502 = _3500 * 40u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3516 = _3515.w;
                            uint _3518 = (_3500 * 40u) + 4u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3500 * 40u) + 8u;
                            _3543 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x));
                            uint _3545 = (_3500 * 40u) + 16u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3561 = (_3500 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3500 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3500 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_2000, _3608.z, fma(_1999, _3608.y, _3608.x * _1998)) + _3608.w;
                            _3621 = !((fma(_2000, _3589.z, fma(_1999, _3589.y, _3589.x * _1998)) + _3589.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3515.x - _1998;
                                float _3649 = _3515.y - _1999;
                                float _3650 = _3515.z - _2000;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3516 * _3516));
                                float _4824 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3666 = sqrt(_3651) * _3531.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_865, _868, _871))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_2000, _3558.z, fma(_1999, _3558.y, _3558.x * _1998)) + _3558.w) / _3620;
                                float _3680 = (fma(_2000, _3574.z, fma(_1999, _3574.y, _3574.x * _1998)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4840 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _940;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3158;
                                float _3710 = _3656 - _3159;
                                float _3711 = _3657 - _3160;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_865, _868, _871), vec3((-0.0) - _3158, (-0.0) - _3159, (-0.0) - _3160));
                                float _4851 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3723 = dot(vec3(_865, _868, _871), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4862 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_865, _868, _871), vec3(_3655, _3656, _3657))) + _3732;
                                float _4873 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4884 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3686 * _3531.y;
                                frontier_phi_78_pred_1 = _3686 * _3531.x;
                                frontier_phi_78_pred_2 = _3760 * _3543.z;
                                frontier_phi_78_pred_3 = _3760 * _3543.y;
                                frontier_phi_78_pred_4 = _3760 * _3543.x;
                                frontier_phi_78_pred_5 = _3686 * _3531.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_78_pred;
                            _3767 = frontier_phi_78_pred_1;
                            _3766 = frontier_phi_78_pred_2;
                            _3765 = frontier_phi_78_pred_3;
                            _3764 = frontier_phi_78_pred_4;
                            _3769 = frontier_phi_78_pred_5;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            _3475 = _3769 + _3488;
                            _3470 = _3764 + _3483;
                            _3471 = _3765 + _3484;
                            _3472 = _3766 + _3485;
                            if (_3490 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3490;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3475;
                        frontier_phi_72_pred_1 = _3474;
                        frontier_phi_72_pred_2 = _3473;
                        frontier_phi_72_pred_3 = _3472;
                        frontier_phi_72_pred_4 = _3471;
                        frontier_phi_72_pred_5 = _3470;
                    }
                    _3143 = frontier_phi_72_pred;
                    _3141 = frontier_phi_72_pred_1;
                    _3139 = frontier_phi_72_pred_2;
                    _3137 = frontier_phi_72_pred_3;
                    _3135 = frontier_phi_72_pred_4;
                    _3133 = frontier_phi_72_pred_5;
                    uint _3278 = _3277 + 1u;
                    if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3271 = _3133;
                        _3272 = _3135;
                        _3273 = _3137;
                        _3274 = _3139;
                        _3275 = _3141;
                        _3276 = _3143;
                        _3277 = _3278;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3143;
                frontier_phi_60_61_ladder_1 = _3141;
                frontier_phi_60_61_ladder_2 = _3137;
                frontier_phi_60_61_ladder_3 = _3135;
                frontier_phi_60_61_ladder_4 = _3133;
                frontier_phi_60_61_ladder_5 = _3139;
            }
            else
            {
                frontier_phi_60_61_ladder = _3029;
                frontier_phi_60_61_ladder_1 = _3027;
                frontier_phi_60_61_ladder_2 = _3023;
                frontier_phi_60_61_ladder_3 = _3021;
                frontier_phi_60_61_ladder_4 = _3019;
                frontier_phi_60_61_ladder_5 = _3025;
            }
            _3132 = frontier_phi_60_61_ladder_4;
            _3134 = frontier_phi_60_61_ladder_3;
            _3136 = frontier_phi_60_61_ladder_2;
            _3138 = frontier_phi_60_61_ladder_5;
            _3140 = frontier_phi_60_61_ladder_1;
            _3142 = frontier_phi_60_61_ladder;
        }
        float _3147 = isnan(1.0) ? _924 : (isnan(_924) ? 1.0 : min(_924, 1.0));
        _2952 = (_3147 * _3138) + _2464;
        _2954 = (_3147 * _3140) + _2466;
        _2956 = (_3147 * _3142) + _2468;
        _2958 = ((_3132 * _908) * _3147) + _2802;
        _2960 = ((_3134 * _910) * _3147) + _2804;
        _2962 = ((_3136 * _911) * _3147) + _2806;
    }
    else
    {
        _2952 = _2464;
        _2954 = _2466;
        _2956 = _2468;
        _2958 = _2802;
        _2960 = _2804;
        _2962 = _2806;
    }
    float _4900 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4911 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4922 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    uint _2982 = _255 + 6u;
    float _2990 = _846 / cbSceneParam._m0[86u].x;
    float _2991 = _847 / cbSceneParam._m0[86u].y;
    vec4 _3005 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2990, _2991, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3007 = _3005.x;
    float _3008 = _3005.y;
    float _3009 = _3005.z;
    float _3010 = _3005.w;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _3044 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _3045 = _3044 / _781;
        float _3056 = _3045 * _831;
        float _3057 = _832 * _3045;
        float _3058 = (-0.0) - _3057;
        float _3060 = _3045 * _833;
        float _3062 = (cbSceneParam._m0[77u].w * _3058) / _3044;
        float _3063 = _3062 + cbSceneParam._m0[79u].w;
        float _3064 = cbSceneParam._m0[79u].w - _3057;
        float _3070 = sqrt(((_3056 * _3056) + (_3057 * _3057)) + (_3060 * _3060));
        float _3073 = (1.0 - (cbSceneParam._m0[77u].w / _3044)) * _3070;
        float _3078 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3080 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3233;
        if (abs((_3058 - _3062) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3233 = ((((_3063 > 0.0) ? exp2(_3078 * _3063) : (2.0 - exp2(_3080 * _3063))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3073;
        }
        else
        {
            float _3193 = 1.0 / cbSceneParam._m0[80u].x;
            float _3194 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : max(_3063, _3064));
            float _3195 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : min(_3063, _3064));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            _3233 = ((abs(_3070 / _3058) * cbSceneParam._m0[80u].y) * ((((_3204 - _3205) * 2.0) - ((exp2(_3078 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0)))) - exp2(_3078 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))))) * _3193)) - ((exp2(_3080 * _3204) - exp2(_3080 * _3205)) * _3193))) + (_3073 * cbSceneParam._m0[80u].z);
        }
        vec4 _3235 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2990, _2991, 1.0), 0.0);
        float _3244 = exp2((_3233 * (-1.44269502162933349609375)) * (1.0 - _3235.w));
        float _3245 = log2(_3244);
        float _3261 = log2(_3010);
        _3082 = (exp2(_3261 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].x)) * _3235.x) / cbSceneParam._m0[78u].x)) + _3007;
        _3084 = (exp2(_3261 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].y)) * _3235.y) / cbSceneParam._m0[78u].y)) + _3008;
        _3086 = (exp2(_3261 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].z)) * _3235.z) / cbSceneParam._m0[78u].z)) + _3009;
        _3088 = _3244 * _3010;
    }
    else
    {
        _3082 = _3007;
        _3084 = _3008;
        _3086 = _3009;
        _3088 = _3010;
    }
    float _3100 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3101 = _3100 == 3.0;
    float _3102 = log2(_3088);
    float _3109 = exp2(_3102 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2952 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _924))) + ((_2958 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3110 = exp2(_3102 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2954 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _924))) + ((_2960 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3111 = exp2(_3102 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2956 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _924))) + ((_2962 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3120 = (_3100 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3120 * (_3101 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.y = _3120 * (_3101 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.z = _3120 * (_3101 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.w = cbInstanceData._m0[_2982].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2982].w;
}


