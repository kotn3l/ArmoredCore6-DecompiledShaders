#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1316;
float _3719;
float _3720;
float _3721;
float _3722;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3731 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3742 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3753 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMtdParam._m0[9u].x;
    float _335 = _329.y * cbMtdParam._m0[9u].y;
    float _336 = _329.z * cbMtdParam._m0[9u].z;
    float _340 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _334;
    float _343 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _335;
    float _346 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _336;
    float _353 = ((_334 - _340) * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) + _340;
    float _354 = ((_335 - _343) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) + _343;
    float _355 = ((_336 - _346) * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) + _346;
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _424 = _420.z;
    float _428 = (_420.x * 2.0) + (-1.0);
    float _429 = (_420.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3764 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    float _440 = _428 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_394.x * 2.0) + (-1.0)));
    float _441 = _429 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_394.y * 2.0) + (-1.0)));
    float _444 = fma(_435, _242, fma(_441, _249, _440 * _235));
    float _447 = fma(_435, _243, fma(_441, _250, _440 * _236));
    float _450 = fma(_435, _244, fma(_441, _251, _440 * _237));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _492 = _490.x;
    float _493 = 1.0 - _492;
    float _500 = ((_492 - _493) * cbMtdParam._m0[24u].z) + _493;
    float _502 = (cbMtdParam._m0[19u].x + dot(vec4(_454 * _444, _454 * _447, _454 * _450, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_500 * cbMtdParam._m0[21u].z);
    float _3775 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _505 = (-0.0) - cbMtdParam._m0[24u].x;
    float _507 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
    float _515 = _503 - ((_503 * TEXCOORD_8.x) * _508);
    float _516 = _503 - ((_503 * TEXCOORD_8.y) * _508);
    float _517 = _503 - ((_503 * TEXCOORD_8.z) * _508);
    float _524 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _528 = ((isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : min(_524, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _536 = (_528 - (((_500 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _528))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3806 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _541 = ((_515 * ((_374.x * cbMtdParam._m0[18u].x) - _353)) * _537) + _353;
    float _542 = ((_516 * ((_374.y * cbMtdParam._m0[18u].y) - _354)) * _537) + _354;
    float _543 = ((_517 * ((_374.z * cbMtdParam._m0[18u].z) - _355)) * _537) + _355;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _585 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_557 - _558) * cbMtdParam._m0[24u].w) + _558) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3817 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _594 = ((((cbMtdParam._m0[10u].x - _541) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _586) + _541;
    float _595 = ((((cbMtdParam._m0[10u].y - _542) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _586) + _542;
    float _596 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _543)) * _586) + _543;
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _611 = _609.x;
    float _614 = _611 - ((_611 * _515) * _537);
    float _616 = _614 - (_614 * _586);
    float _621 = (((_394.z - _424) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _424;
    vec4 _635 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _642 = (_635.x * 2.0) + (-1.0);
    float _643 = (_635.y * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3828 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _653 = (((_635.z - _621) * _515) * _537) + _621;
    float _656 = ((cbMtdParam._m0[23u].y - _653) * _586) + _653;
    vec4 _675 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _681 = (_675.x * 2.0) + (-1.0);
    float _682 = (_675.y * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _3839 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _703 = (((cbMtdParam._m0[21u].x * _440) + ((_642 - _440) * _515)) * _537) + _440;
    float _704 = (((cbMtdParam._m0[21u].x * _441) + ((_643 - _441) * _516)) * _537) + _441;
    float _705 = (((sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) - _435) * _517) * _537) + _435;
    float _716 = (((_681 - _703) + (_703 * cbMtdParam._m0[22u].z)) * _586) + _703;
    float _717 = (((_682 - _704) + (_704 * cbMtdParam._m0[22u].z)) * _586) + _704;
    float _718 = ((sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) - _705) * _586) + _705;
    float _720 = cbMtdParam._m0[22u].x + _420.w;
    float _723 = fma(_718, _242, fma(_717, _249, _716 * _235));
    float _726 = fma(_718, _243, fma(_717, _250, _716 * _236));
    float _729 = fma(_718, _244, fma(_717, _251, _716 * _237));
    float _733 = inversesqrt(dot(vec3(_723, _726, _729), vec3(_723, _726, _729)));
    float _734 = _733 * _723;
    float _735 = _733 * _726;
    float _736 = _733 * _729;
    float _3850 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _737 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3872 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3883 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3894 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3905 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _742 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _756 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _806 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _796);
    float _807 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _796);
    float _808 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _796);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _813 = _806 * _812;
    float _814 = _807 * _812;
    float _815 = _808 * _812;
    vec4 _820 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _822 = _820.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _997 = sqrt(((_806 * _806) + (_807 * _807)) + (_808 * _808));
        float _1003 = (cbMatDynParam._m0[5u].x * _997) + cbMatDynParam._m0[5u].y;
        float _3916 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1008 = (cbMatDynParam._m0[5u].z * _997) + cbMatDynParam._m0[5u].w;
        float _3927 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) - _1004)) + _1004) < ((_822 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _855 = fma(_736, cbSceneParam._m0[5u].z, fma(_735, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _734));
    float _858 = fma(_736, cbSceneParam._m0[6u].z, fma(_735, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _734));
    float _861 = fma(_736, cbSceneParam._m0[7u].z, fma(_735, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _734));
    uint _874 = _273 + 9u;
    uint _875 = _874 + uint(cbMatDynParam._m0[0u].w);
    float _881 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_875].x;
    float _882 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_875].y;
    float _883 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_875].z;
    float _3938 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _887 = 1.0 - _742;
    float _888 = _884 * _887;
    float _889 = _885 * _887;
    float _890 = _886 * _887;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _742;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _742;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _742;
    float _898 = _895 + 0.039999999105930328369140625;
    float _900 = _896 + 0.039999999105930328369140625;
    float _901 = _897 + 0.039999999105930328369140625;
    vec4 _910 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _834, cbSceneParam._m0[86u].y * _835));
    float _914 = ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * TEXCOORD_5.w) * _910.x;
    float _915 = dot(vec3(_734, _735, _736), vec3(_813, _814, _815));
    float _918 = _915 * 2.0;
    float _922 = (_918 * _734) - _813;
    float _923 = (_918 * _735) - _814;
    float _924 = (_918 * _736) - _815;
    float _928 = abs(dot(vec3(_813, _814, _815), vec3(_734, _735, _736)));
    float _3971 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _930 = sqrt(_737);
    float _943 = exp2((_930 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_930 * 3.0));
    float _949 = (1.0 - _943) * ((_930 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _950 = _943 * _930;
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1044 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1048 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1073 = _978 + _734;
        float _1074 = _982 + _735;
        float _1075 = _986 + _736;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_734, _735, _736), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4019 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_734, _735, _736), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4052 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_734, _735, _736), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4085 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1362 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1366 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1389 = _978 + _734;
        float _1390 = _982 + _735;
        float _1391 = _986 + _736;
        float _1401 = fma(_1391, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389)) - _1358;
        float _1402 = fma(_1391, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389)) - _1362;
        float _1403 = fma(_1391, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389)) - _1366;
        float _1407 = inversesqrt(dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403)));
        float _1420 = ((_1407 * _1401) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1358 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1407 * _1402) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1362 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1407 * _1403) / cbModelParam._m0[35u].z) + ((((((_1366 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        float _1457 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1424.x + (-0.5));
        float _1459 = _1457 * (_1424.y + (-0.5));
        float _1460 = _1457 * (_1424.z + (-0.5));
        float _1467 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1431.x + (-0.5));
        float _1469 = _1467 * (_1431.y + (-0.5));
        float _1470 = _1467 * (_1431.z + (-0.5));
        float _1477 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1438.x + (-0.5));
        float _1479 = _1477 * (_1438.y + (-0.5));
        float _1480 = _1477 * (_1438.z + (-0.5));
        float _1487 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1445.x + (-0.5));
        float _1489 = _1487 * (_1445.y + (-0.5));
        float _1490 = _1487 * (_1445.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_734, _735, _736), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4148 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1521 + 1.0))) + _1526) * _1491;
        float _1536 = _1459 * 0.5;
        float _1537 = _1469 * 0.5;
        float _1538 = _1479 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_734, _735, _736), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4181 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1563 + 1.0))) + _1568) * _1492;
        float _1578 = _1460 * 0.5;
        float _1579 = _1470 * 0.5;
        float _1580 = _1480 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_734, _735, _736), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4214 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1605 + 1.0))) + _1610) * _1493;
        _1627 = _1460;
        _1628 = _1459;
        _1629 = _1458;
        _1630 = _1470;
        _1631 = _1469;
        _1632 = _1468;
        _1633 = _1480;
        _1634 = _1479;
        _1635 = _1478;
        _1636 = _1493;
        _1637 = _1492;
        _1638 = _1491;
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1316;
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = _1316;
        _1636 = _1316;
        _1637 = _1316;
        _1638 = _1316;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1328)) + _1328;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1329)) + _1329;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1330)) + _1330;
    float _1674 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1651));
    float _1695 = _922 * 0.5;
    float _1696 = _923 * 0.5;
    float _1697 = _924 * 0.5;
    float _1698 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1701 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1704 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1711 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1715 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1719 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1726 = dot(vec4(cbModelParam._m0[39u]), vec4(_1695, _1696, _1697, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1695, _1696, _1697, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_924, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922));
        float _1825 = fma(_924, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922));
        float _1828 = fma(_924, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1856 = frontier_phi_17_15_ladder;
        }
        float _2080;
        if (_1825 > 0.0)
        {
            _2080 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2080 = frontier_phi_26_22_ladder;
        }
        float _2337;
        if (_1828 > 0.0)
        {
            _2337 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2337 = frontier_phi_38_33_ladder;
        }
        float _2339 = isnan(_2080) ? _1856 : (isnan(_1856) ? _2080 : min(_1856, _2080));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1822) + _1811;
        float _2345 = (_2340 * _1825) + _1815;
        float _2346 = (_2340 * _1828) + _1819;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2347;
        float _2351 = _2347 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 > _2351) || ((_2345 < _2349) || ((_2344 < _2349) || (_2344 > _2351))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2346, cbModelParam._m0[9u].z, fma(_2345, cbModelParam._m0[9u].y, _2344 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2346, cbModelParam._m0[10u].z, fma(_2345, cbModelParam._m0[10u].y, _2344 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2346, cbModelParam._m0[11u].z, fma(_2345, cbModelParam._m0[11u].y, _2344 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_16_38_ladder = _2474.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2474.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_16_38_ladder_2;
        _1846 = frontier_phi_16_38_ladder_1;
        _1848 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_922, _923, _924), _1764);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_924, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922));
        float _1920 = fma(_924, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922));
        float _1923 = fma(_924, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922));
        float _2085;
        if (_1917 > 0.0)
        {
            _2085 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2364;
        if (_1920 > 0.0)
        {
            _2364 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2364 = frontier_phi_40_35_ladder;
        }
        float _2577;
        if (_1923 > 0.0)
        {
            _2577 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2577 = frontier_phi_49_46_ladder;
        }
        float _2579 = isnan(_2364) ? _2085 : (isnan(_2085) ? _2364 : min(_2085, _2364));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _1917) + _1906;
        float _2585 = (_2580 * _1920) + _1910;
        float _2586 = (_2580 * _1923) + _1914;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2587;
        float _2590 = _2587 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2586 > _2590) || ((_2586 < _2588) || ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 < _2588) || (_2584 > _2590))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2586, cbModelParam._m0[17u].z, fma(_2585, cbModelParam._m0[17u].y, _2584 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2586, cbModelParam._m0[18u].z, fma(_2585, cbModelParam._m0[18u].y, _2584 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2586, cbModelParam._m0[19u].z, fma(_2585, cbModelParam._m0[19u].y, _2584 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_25_49_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_25_49_ladder_2;
        _1944 = frontier_phi_25_49_ladder_1;
        _1946 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_922, _923, _924), _1853);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1959 = (((_949 * _898) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1942 - _1844)) + _1844);
    float _1961 = (((_949 * _900) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1944 - _1846)) + _1846);
    float _1963 = (((_949 * _901) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1946 - _1848)) + _1848);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    vec4 _1980 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_834, _835));
    float _1982 = _1980.w;
    float _1994 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1982);
    float _1995 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1982);
    float _1996 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1982);
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _914 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2039 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2043 = _2002 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_734, _735, _736));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_734, _735, _736));
    float _4350 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4361 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2019].x * _2025) * _2064) + (((cbLight._m0[_2029].x * _1994) * _2039) * _2062);
    float _2072 = ((_2025 * cbLight._m0[_2019].y) * _2064) + (((cbLight._m0[_2029].y * _1995) * _2039) * _2062);
    float _2073 = ((_2025 * cbLight._m0[_2019].z) * _2064) + (((cbLight._m0[_2029].z * _1996) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2079)
    {
        _2090 = _2071;
        _2092 = _2072;
        _2094 = _2073;
    }
    else
    {
        uint _2098 = _2002 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4372 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2117 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _2071;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _2072;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _2073;
    }
    bool _2097 = _2077.y == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2097)
    {
        _2135 = _2090;
        _2137 = _2092;
        _2139 = _2094;
    }
    else
    {
        uint _2308 = _2002 + 7u;
        float _2324 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4388 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2327 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2135 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2090;
        _2137 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2092;
        _2139 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2094;
    }
    uint _2142 = _2002 + 8u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _737) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_2002].x + _813;
    float _2158 = cbLight._m0[_2002].y + _814;
    float _2159 = cbLight._m0[_2002].z + _815;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2002].xyz));
    float _4404 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _2171 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2172 = dot(vec3(_734, _735, _736), vec3(_2164, _2165, _2166));
    float _4426 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2164, _2165, _2166));
    float _4437 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2156 * _2156;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
    float _2193 = 0.959999978542327880859375 - _895;
    float _2195 = 0.959999978542327880859375 - _896;
    float _2196 = 0.959999978542327880859375 - _897;
    float _2203 = 1.0 - _2156;
    float _2214 = (0.5 / (((_2171 * ((_2170 * _2203) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2203) + _2156) * _2170))) * _2170;
    float _4448 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    uint _2230 = _2002 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _737) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2043].x + _813;
    float _2244 = cbLight._m0[_2043].y + _814;
    float _2245 = cbLight._m0[_2043].z + _815;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2043].xyz));
    float _4459 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2257 = dot(vec3(_734, _735, _736), vec3(_2250, _2251, _2252));
    float _4470 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2250, _2251, _2252));
    float _4481 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2283 = 1.0 - _2242;
    float _2293 = (0.5 / (((_2171 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2283) + _2242) * _2256))) * _2256;
    float _4492 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2305 = (((((_2276 * _2193) + _898) * cbLight._m0[_2230].x) * _2295) * _2025) + ((((cbLight._m0[_2142].x * _1994) * ((_2192 * _2193) + _898)) * _2216) * _2039);
    float _2306 = (((((_2276 * _2195) + _900) * cbLight._m0[_2230].y) * _2295) * _2025) + ((((cbLight._m0[_2142].y * _1995) * ((_2192 * _2195) + _900)) * _2216) * _2039);
    float _2307 = (((((_2276 * _2196) + _901) * cbLight._m0[_2230].z) * _2295) * _2025) + ((((cbLight._m0[_2142].z * _1996) * ((_2192 * _2196) + _901)) * _2216) * _2039);
    float _2369;
    float _2371;
    float _2373;
    if (_2079)
    {
        _2369 = _2305;
        _2371 = _2306;
        _2373 = _2307;
    }
    else
    {
        uint _2375 = _2002 + 2u;
        uint _2379 = _2002 + 10u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _737) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _813;
        float _2396 = cbLight._m0[_2375].y + _814;
        float _2397 = cbLight._m0[_2375].z + _815;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2375].xyz));
        float _4503 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2409 = dot(vec3(_734, _735, _736), vec3(_2402, _2403, _2404));
        float _4514 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4525 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2435 = 1.0 - _2394;
        float _2445 = (0.5 / (((_2171 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2435) + _2394) * _2408))) * _2408;
        float _4536 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2369 = (((((_2428 * _2193) + _898) * cbLight._m0[_2379].x) * _2447) * _2448) + _2305;
        _2371 = (((((_2428 * _2195) + _900) * cbLight._m0[_2379].y) * _2447) * _2448) + _2306;
        _2373 = (((((_2428 * _2196) + _901) * cbLight._m0[_2379].z) * _2447) * _2448) + _2307;
    }
    float _2483;
    float _2485;
    float _2487;
    if (_2097)
    {
        _2483 = _2369;
        _2485 = _2371;
        _2487 = _2373;
    }
    else
    {
        uint _2494 = _2002 + 3u;
        uint _2498 = _2002 + 11u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _737) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _813;
        float _2515 = cbLight._m0[_2494].y + _814;
        float _2516 = cbLight._m0[_2494].z + _815;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2494].xyz));
        float _4552 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2528 = dot(vec3(_734, _735, _736), vec3(_2521, _2522, _2523));
        float _4563 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4574 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2171 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2554) + _2513) * _2527))) * _2527;
        float _4585 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2483 = (((((_2547 * _2193) + _898) * cbLight._m0[_2498].x) * _2566) * _2567) + _2369;
        _2485 = (((((_2547 * _2195) + _900) * cbLight._m0[_2498].y) * _2566) * _2567) + _2371;
        _2487 = (((((_2547 * _2196) + _901) * cbLight._m0[_2498].z) * _2566) * _2567) + _2373;
    }
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_2000.y == 0u)
    {
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2642;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2642;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2642;
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.x;
        uint _2669 = uint((float(_2657.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2658))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2658)));
        float _2679 = (log2(_2645 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2680 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        uint _2683 = uint(isnan(14.0) ? _2680 : (isnan(_2680) ? 14.0 : min(_2680, 14.0)));
        uvec4 _2688 = texelFetch(g_lightClusterGridBuffer, int(((_2683 << 2u) + (_2669 << 6u)) >> 2u));
        uint _2689 = _2688.x;
        uint _2690 = _2657.z;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((((1u << ((_2690 >> 4u) & 15u)) + 4294967295u) & _2689) == 0u) || ((_2690 & 240u) == 0u))
        {
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
        }
        else
        {
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            uint _2948 = 0u;
            uint _2957;
            bool _2958;
            for (;;)
            {
                _2957 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                _2958 = _2957 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2958)
                {
                    frontier_phi_66_pred = _2942;
                    frontier_phi_66_pred_1 = _2947;
                    frontier_phi_66_pred_2 = _2946;
                    frontier_phi_66_pred_3 = _2945;
                    frontier_phi_66_pred_4 = _2944;
                    frontier_phi_66_pred_5 = _2943;
                }
                else
                {
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    uint _3093;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2957;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    for (;;)
                    {
                        uint _3097 = uint(findLSB(_3093)) + (_2948 << 5u);
                        uint _3094 = (_3093 + 4294967295u) & _3093;
                        uint _3099 = _3097 * 48u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3119 = (_3097 * 48u) + 4u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3138 = (_3097 * 48u) + 8u;
                        vec3 _3149 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x));
                        float _3153 = _3113.x - _2643;
                        float _3154 = _3113.y - _2644;
                        float _3155 = _3113.z - _2645;
                        float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                        float _3159 = inversesqrt(_3156);
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3163 = dot(vec3(_855, _858, _861), vec3(_3160, _3161, _3162));
                        float _3168 = 1.0 - (_3156 * _3113.w);
                        float _4611 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3170 = sqrt(_3156) * _3132.w;
                        float _3173 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3163) + _3174;
                        float _3180 = _3170 * _3170;
                        float _3184 = ((isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))) * _3169) / ((_3180 * 0.699999988079071044921875) + 1.0);
                        float _3188 = (-0.0) - _2643;
                        float _3189 = (-0.0) - _2644;
                        float _3190 = (-0.0) - _2645;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3205 = exp2(log2(1.0 / ((_3180 * 3.5) + 5.0)) * 0.25);
                        float _3206 = 1.0 - _930;
                        float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                        float _3214 = _3213 * _3213;
                        float _3215 = _3214 * _3214;
                        float _3216 = _3195 + _3160;
                        float _3217 = _3196 + _3161;
                        float _3218 = _3197 + _3162;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3226 = dot(vec3(_855, _858, _861), vec3(_3195, _3196, _3197));
                        float _4627 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3230 = dot(vec3(_855, _858, _861), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                        float _4638 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                        float _3238 = _3173 * _3214;
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3163) + _3239;
                        float _4649 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3244 = 1.0 - _3214;
                        float _3254 = (0.5 / (((_3243 * ((_3229 * _3244) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3214) * _3229))) * _3243;
                        float _4660 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3265 = (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3237 * _3237) * ((_3180 * 2.1991131305694580078125) + 3.141590118408203125))) * _3169;
                        _3017 = (_3184 * _3132.x) + _3090;
                        _3018 = (_3184 * _3132.y) + _3091;
                        _3019 = (_3184 * _3132.z) + _3092;
                        _3014 = (_3265 * _3149.x) + _3087;
                        _3015 = (_3265 * _3149.y) + _3088;
                        _3016 = (_3265 * _3149.z) + _3089;
                        if (_3094 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3094;
                        }
                    }
                    frontier_phi_66_pred = _3014;
                    frontier_phi_66_pred_1 = _3019;
                    frontier_phi_66_pred_2 = _3018;
                    frontier_phi_66_pred_3 = _3017;
                    frontier_phi_66_pred_4 = _3016;
                    frontier_phi_66_pred_5 = _3015;
                }
                _2791 = frontier_phi_66_pred;
                _2801 = frontier_phi_66_pred_1;
                _2799 = frontier_phi_66_pred_2;
                _2797 = frontier_phi_66_pred_3;
                _2795 = frontier_phi_66_pred_4;
                _2793 = frontier_phi_66_pred_5;
                uint _2949 = _2948 + 1u;
                if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2942 = _2791;
                    _2943 = _2793;
                    _2944 = _2795;
                    _2945 = _2797;
                    _2946 = _2799;
                    _2947 = _2801;
                    _2948 = _2949;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
        }
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.z;
        uint _2807 = (_2805 >> 8u) & 15u;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((4294967295u << _2807) & _2689) == 0u)
        {
            _2910 = _2790;
            _2912 = _2792;
            _2914 = _2794;
            _2916 = _2796;
            _2918 = _2798;
            _2920 = _2800;
        }
        else
        {
            float _2935 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
            float _2936 = _2935 * _2643;
            float _2937 = _2935 * _2644;
            float _2938 = _2935 * _2645;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2807 < ((_2805 >> 12u) & 15u))
            {
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _3070 = _2790;
                float _3071 = _2792;
                float _3072 = _2794;
                float _3073 = _2796;
                float _3074 = _2798;
                float _3075 = _2800;
                uint _3076 = _2807;
                uint _3085;
                bool _3086;
                for (;;)
                {
                    _3085 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_3076 << 2u)) >> 2u)).x;
                    _3086 = _3085 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3086)
                    {
                        frontier_phi_77_pred = _3075;
                        frontier_phi_77_pred_1 = _3074;
                        frontier_phi_77_pred_2 = _3073;
                        frontier_phi_77_pred_3 = _3072;
                        frontier_phi_77_pred_4 = _3071;
                        frontier_phi_77_pred_5 = _3070;
                    }
                    else
                    {
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        float _3297 = _3075;
                        uint _3298 = _3085;
                        uint _3299;
                        vec4 _3324;
                        float _3325;
                        vec4 _3340;
                        vec3 _3352;
                        vec4 _3367;
                        vec4 _3382;
                        float _3428;
                        bool _3429;
                        for (;;)
                        {
                            uint _3309 = ((_3076 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3298));
                            _3299 = (_3298 + 4294967295u) & _3298;
                            uint _3311 = _3309 * 40u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            _3325 = _3324.w;
                            uint _3327 = (_3309 * 40u) + 4u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3309 * 40u) + 8u;
                            _3352 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x));
                            uint _3354 = (_3309 * 40u) + 16u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3309 * 40u) + 20u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3309 * 40u) + 24u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3403 = (_3309 * 40u) + 28u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3428 = fma(_2645, _3416.z, fma(_2644, _3416.y, _3416.x * _2643)) + _3416.w;
                            _3429 = !((fma(_2645, _3397.z, fma(_2644, _3397.y, _3397.x * _2643)) + _3397.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3429)
                            {
                                float _3456 = _3324.x - _2643;
                                float _3457 = _3324.y - _2644;
                                float _3458 = _3324.z - _2645;
                                float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                                float _3462 = inversesqrt(_3459);
                                float _3463 = _3462 * _3456;
                                float _3464 = _3462 * _3457;
                                float _3465 = _3462 * _3458;
                                float _3469 = 1.0 - (_3459 / (_3325 * _3325));
                                float _4671 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3474 = sqrt(_3459) * _3340.w;
                                float _3476 = 1.39999997615814208984375 / (_3474 + 1.39999997615814208984375);
                                float _3477 = _3476 * _3476;
                                float _3480 = ((1.0 - _3477) * dot(vec3(_3463, _3464, _3465), vec3(_855, _858, _861))) + _3477;
                                float _3483 = _3474 * _3474;
                                float _3487 = (fma(_2645, _3367.z, fma(_2644, _3367.y, _3367.x * _2643)) + _3367.w) / _3428;
                                float _3488 = (fma(_2645, _3382.z, fma(_2644, _3382.y, _3382.x * _2643)) + _3382.w) / _3428;
                                float _3492 = 1.0 - dot(vec2(_3487, _3488), vec2(_3487, _3488));
                                float _4687 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3494 = _3493 * (((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3470) / ((_3483 * 0.699999988079071044921875) + 1.0));
                                float _3506 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                                float _3507 = 1.0 - _930;
                                float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                                float _3515 = _3514 * _3514;
                                float _3516 = _3515 * _3515;
                                float _3517 = _3463 - _2936;
                                float _3518 = _3464 - _2937;
                                float _3519 = _3465 - _2938;
                                float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                                float _3527 = dot(vec3(_855, _858, _861), vec3((-0.0) - _2936, (-0.0) - _2937, (-0.0) - _2938));
                                float _4698 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3531 = dot(vec3(_855, _858, _861), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                                float _4709 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                                float _3539 = _3476 * _3515;
                                float _3540 = _3539 * _3539;
                                float _3546 = ((1.0 - _3540) * dot(vec3(_855, _858, _861), vec3(_3463, _3464, _3465))) + _3540;
                                float _4720 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3548 = 1.0 - _3515;
                                float _3558 = (0.5 / (((_3547 * ((_3530 * _3548) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3547 * _3548) + _3515) * _3530))) * _3547;
                                float _4731 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3568 = (_3493 * _3470) * (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3538 * _3538) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3494 * _3340.y;
                                frontier_phi_83_pred_1 = _3494 * _3340.x;
                                frontier_phi_83_pred_2 = _3568 * _3352.z;
                                frontier_phi_83_pred_3 = _3568 * _3352.y;
                                frontier_phi_83_pred_4 = _3568 * _3352.x;
                                frontier_phi_83_pred_5 = _3494 * _3340.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3576 = frontier_phi_83_pred;
                            _3575 = frontier_phi_83_pred_1;
                            _3574 = frontier_phi_83_pred_2;
                            _3573 = frontier_phi_83_pred_3;
                            _3572 = frontier_phi_83_pred_4;
                            _3577 = frontier_phi_83_pred_5;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            if (_3299 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3299;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3284;
                        frontier_phi_77_pred_1 = _3283;
                        frontier_phi_77_pred_2 = _3282;
                        frontier_phi_77_pred_3 = _3281;
                        frontier_phi_77_pred_4 = _3280;
                        frontier_phi_77_pred_5 = _3279;
                    }
                    _2921 = frontier_phi_77_pred;
                    _2919 = frontier_phi_77_pred_1;
                    _2917 = frontier_phi_77_pred_2;
                    _2915 = frontier_phi_77_pred_3;
                    _2913 = frontier_phi_77_pred_4;
                    _2911 = frontier_phi_77_pred_5;
                    uint _3077 = _3076 + 1u;
                    if (_3077 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3070 = _2911;
                        _3071 = _2913;
                        _3072 = _2915;
                        _3073 = _2917;
                        _3074 = _2919;
                        _3075 = _2921;
                        _3076 = _3077;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2915;
                frontier_phi_58_59_ladder_1 = _2921;
                frontier_phi_58_59_ladder_2 = _2919;
                frontier_phi_58_59_ladder_3 = _2917;
                frontier_phi_58_59_ladder_4 = _2913;
                frontier_phi_58_59_ladder_5 = _2911;
            }
            else
            {
                frontier_phi_58_59_ladder = _2794;
                frontier_phi_58_59_ladder_1 = _2800;
                frontier_phi_58_59_ladder_2 = _2798;
                frontier_phi_58_59_ladder_3 = _2796;
                frontier_phi_58_59_ladder_4 = _2792;
                frontier_phi_58_59_ladder_5 = _2790;
            }
            _2910 = frontier_phi_58_59_ladder_5;
            _2912 = frontier_phi_58_59_ladder_4;
            _2914 = frontier_phi_58_59_ladder;
            _2916 = frontier_phi_58_59_ladder_3;
            _2918 = frontier_phi_58_59_ladder_2;
            _2920 = frontier_phi_58_59_ladder_1;
        }
        float _2925 = isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0));
        _2702 = (_2925 * _2916) + _2135;
        _2704 = (_2925 * _2918) + _2137;
        _2706 = (_2925 * _2920) + _2139;
        _2708 = ((_2910 * _898) * _2925) + _2483;
        _2710 = ((_2912 * _900) * _2925) + _2485;
        _2712 = ((_2914 * _901) * _2925) + _2487;
    }
    else
    {
        _2702 = _2135;
        _2704 = _2137;
        _2706 = _2139;
        _2708 = _2483;
        _2710 = _2485;
        _2712 = _2487;
    }
    float _4747 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4758 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4769 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2729 = ((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2702 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _914))) + ((_2708 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2730 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2704 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _914))) + ((_2710 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2731 = ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2706 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _914))) + ((_2712 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    uint _2732 = _273 + 6u;
    float _2740 = _834 / cbSceneParam._m0[86u].x;
    float _2741 = _835 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _756 : (isnan(_756) ? cbSceneParam._m0[77u].w : min(_756, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_756 > cbSceneParam._m0[78u].w)
    {
        float _2815 = isnan(_756) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _756 : min(cbSceneParam._m0[80u].w, _756));
        float _2816 = _2815 / _756;
        float _2827 = _2816 * _806;
        float _2828 = _807 * _2816;
        float _2829 = (-0.0) - _2828;
        float _2830 = _2816 * _808;
        float _2832 = (cbSceneParam._m0[77u].w * _2829) / _2815;
        float _2833 = _2832 + cbSceneParam._m0[79u].w;
        float _2834 = cbSceneParam._m0[79u].w - _2828;
        float _2840 = sqrt(((_2827 * _2827) + (_2828 * _2828)) + (_2830 * _2830));
        float _2843 = (1.0 - (cbSceneParam._m0[77u].w / _2815)) * _2840;
        float _2848 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2850 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3027;
        if (abs((_2829 - _2832) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3027 = ((((_2833 > 0.0) ? exp2(_2848 * _2833) : (2.0 - exp2(_2850 * _2833))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2843;
        }
        else
        {
            float _2971 = 1.0 / cbSceneParam._m0[80u].x;
            float _2972 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : max(_2833, _2834));
            float _2973 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : min(_2833, _2834));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            _3027 = ((abs(_2840 / _2829) * cbSceneParam._m0[80u].y) * ((((_2982 - _2983) * 2.0) - ((exp2(_2848 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0)))) - exp2(_2848 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))))) * _2971)) - ((exp2(_2850 * _2982) - exp2(_2850 * _2983)) * _2971))) + (_2843 * cbSceneParam._m0[80u].z);
        }
        vec4 _3029 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3038 = exp2((_3027 * (-1.44269502162933349609375)) * (1.0 - _3029.w));
        float _3039 = log2(_3038);
        float _3055 = log2(_2760);
        _2852 = (exp2(_3055 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].x)) * _3029.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2854 = (exp2(_3055 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].y)) * _3029.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2856 = (exp2(_3055 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].z)) * _3029.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2858 = _3038 * _2760;
    }
    else
    {
        _2852 = _2757;
        _2854 = _2758;
        _2856 = _2759;
        _2858 = _2760;
    }
    bool _3065;
    vec4 _2868;
    vec4 _2890;
    float _2892;
    float _2896;
    float _2897;
    float _2898;
    float _2899;
    bool _2909;
    for (;;)
    {
        _2868 = cbMatDynParam._m0[0u];
        float _2870 = roundEven(_2868.y);
        bool _2871 = _2870 == 3.0;
        float _2872 = log2(_2858);
        float _2879 = exp2(_2872 * cbSceneParam._m0[78u].x) * _2729;
        float _2880 = exp2(_2872 * cbSceneParam._m0[78u].y) * _2730;
        float _2881 = exp2(_2872 * cbSceneParam._m0[78u].z) * _2731;
        float _2888 = _822 + (-0.5);
        _2890 = cbMtdParam._m0[1u];
        _2892 = _2890.y * _2888;
        float _2895 = (_2870 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2896 = _2895 * (_2871 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2852)));
        _2897 = _2895 * (_2871 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2854)));
        _2898 = _2895 * (_2871 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2856)));
        _2899 = _2888 * 0.999000012874603271484375;
        _2909 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2909)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _2899) < 0.5)
            {
                _3065 = true;
                break;
            }
        }
        uint _3006 = _874 + uint(_2868.w);
        if ((cbInstanceData._m0[_3006].w < 1.0) && ((cbInstanceData._m0[_3006].w + _2899) < 0.5))
        {
            _3065 = true;
            break;
        }
        if ((_2892 + 1.0) < _2890.x)
        {
            _3065 = true;
            break;
        }
        _3065 = false;
        break;
    }
    float _3270;
    if (_3065)
    {
        discard_state = true;
        _3270 = 0.0;
    }
    else
    {
        _3270 = cbInstanceData._m0[_2732].w;
    }
    SV_Target.x = _2896;
    SV_Target.y = _2897;
    SV_Target.z = _2898;
    SV_Target.w = _3270;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2732].w;
    discard_exit();
}


