#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1101;
float _3484;
float _3485;
float _3486;
float _3487;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3496 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_296.x * 2.0) + (-1.0)));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_296.y * 2.0) + (-1.0)));
    float _347 = fma(_338, _218, fma(_344, _225, _343 * _211));
    float _350 = fma(_338, _219, fma(_344, _226, _343 * _212));
    float _353 = fma(_338, _220, fma(_344, _227, _343 * _213));
    float _357 = inversesqrt(dot(vec3(_347, _350, _353), vec3(_347, _350, _353)));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _395 = _393.x;
    float _396 = 1.0 - _395;
    float _403 = ((_395 - _396) * cbMtdParam._m0[24u].z) + _396;
    float _405 = (cbMtdParam._m0[19u].x + dot(vec4(_357 * _347, _357 * _350, _357 * _353, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_403 * cbMtdParam._m0[21u].z);
    float _3507 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _421 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_403 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3518 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _426 = ((_406 * (cbMtdParam._m0[17u].x - _276)) * _422) + _276;
    float _427 = ((_406 * (cbMtdParam._m0[17u].y - _277)) * _422) + _277;
    float _428 = ((_406 * (cbMtdParam._m0[17u].z - _278)) * _422) + _278;
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _443 = _441.x;
    float _446 = _443 - ((_443 * _406) * _422);
    float _451 = (((_296.z - _326) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _326;
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _471 = (_464.x * 2.0) + (-1.0);
    float _472 = (_464.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3529 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _482 = (((_464.z - _451) * _406) * _422) + _451;
    float _497 = (((cbMtdParam._m0[21u].x * _343) + ((_471 - _343) * _406)) * _422) + _343;
    float _498 = (((cbMtdParam._m0[21u].x * _344) + ((_472 - _344) * _406)) * _422) + _344;
    float _499 = (((sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) - _338) * _406) * _422) + _338;
    float _504 = cbMtdParam._m0[22u].x + _322.w;
    float _507 = fma(_499, _218, fma(_498, _225, _497 * _211));
    float _510 = fma(_499, _219, fma(_498, _226, _497 * _212));
    float _513 = fma(_499, _220, fma(_498, _227, _497 * _213));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3540 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _521 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3562 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3573 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3584 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3595 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _526 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _591 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _581);
    float _592 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _581);
    float _593 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _581);
    float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
    float _598 = _591 * _597;
    float _599 = _592 * _597;
    float _600 = _593 * _597;
    vec4 _605 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _607 = _605.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _782 = sqrt(((_591 * _591) + (_592 * _592)) + (_593 * _593));
        float _788 = (cbMatDynParam._m0[5u].x * _782) + cbMatDynParam._m0[5u].y;
        float _3606 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _793 = (cbMatDynParam._m0[5u].z * _782) + cbMatDynParam._m0[5u].w;
        float _3617 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) - _789)) + _789) < ((_607 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _640 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _643 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _646 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _659 = _230 + 9u;
    uint _660 = _659 + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3628 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _672 = 1.0 - _526;
    float _673 = _669 * _672;
    float _674 = _670 * _672;
    float _675 = _671 * _672;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _526;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _526;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _526;
    float _683 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    vec4 _695 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _699 = ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * TEXCOORD_5.w) * _695.x;
    float _700 = dot(vec3(_518, _519, _520), vec3(_598, _599, _600));
    float _703 = _700 * 2.0;
    float _707 = (_703 * _518) - _598;
    float _708 = (_703 * _519) - _599;
    float _709 = (_703 * _520) - _600;
    float _713 = abs(dot(vec3(_598, _599, _600), vec3(_518, _519, _520)));
    float _3661 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _715 = sqrt(_521);
    float _728 = exp2((_715 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _734 = (1.0 - _728) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _715;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1100;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _825 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _829 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _833 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _858 = _763 + _518;
        float _859 = _767 + _519;
        float _860 = _771 + _520;
        float _870 = fma(_860, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858)) - _825;
        float _871 = fma(_860, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858)) - _829;
        float _872 = fma(_860, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858)) - _833;
        float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
        float _889 = ((_876 * _870) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_825 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_876 * _871) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_829 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_876 * _872) / cbModelParam._m0[34u].z) + ((((((_833 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        float _928 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_894.x + (-0.5));
        float _930 = _928 * (_894.y + (-0.5));
        float _931 = _928 * (_894.z + (-0.5));
        float _938 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_901.x + (-0.5));
        float _940 = _938 * (_901.y + (-0.5));
        float _941 = _938 * (_901.z + (-0.5));
        float _948 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_908.x + (-0.5));
        float _950 = _948 * (_908.y + (-0.5));
        float _951 = _948 * (_908.z + (-0.5));
        float _958 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_915.x + (-0.5));
        float _960 = _958 * (_915.y + (-0.5));
        float _961 = _958 * (_915.z + (-0.5));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = _929 * 0.5;
        float _966 = _939 * 0.5;
        float _967 = _949 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _982 = (dot(vec3(_518, _519, _520), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _992 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3709 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_994 + 1.0))) + _999) * _962;
        float _1009 = _930 * 0.5;
        float _1010 = _940 * 0.5;
        float _1011 = _950 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_518, _519, _520), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3742 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1036 + 1.0))) + _1041) * _963;
        float _1051 = _931 * 0.5;
        float _1052 = _941 * 0.5;
        float _1053 = _951 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_518, _519, _520), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3775 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1078 + 1.0))) + _1083) * _964;
        _1100 = _931;
        _1102 = _930;
        _1103 = _929;
        _1104 = _941;
        _1105 = _940;
        _1106 = _939;
        _1107 = _951;
        _1108 = _950;
        _1109 = _949;
        _1110 = _964;
        _1111 = _963;
        _1112 = _962;
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
    }
    else
    {
        _1100 = _1101;
        _1102 = _1101;
        _1103 = _1101;
        _1104 = _1101;
        _1105 = _1101;
        _1106 = _1101;
        _1107 = _1101;
        _1108 = _1101;
        _1109 = _1101;
        _1110 = _1101;
        _1111 = _1101;
        _1112 = _1101;
        _1113 = 0.0;
        _1114 = 0.0;
        _1115 = 0.0;
    }
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1143 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1147 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1151 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1174 = _763 + _518;
        float _1175 = _767 + _519;
        float _1176 = _771 + _520;
        float _1186 = fma(_1176, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174)) - _1143;
        float _1187 = fma(_1176, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174)) - _1147;
        float _1188 = fma(_1176, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174)) - _1151;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1143 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1147 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[35u].z) + ((((((_1151 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1242 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1209.x + (-0.5));
        float _1244 = _1242 * (_1209.y + (-0.5));
        float _1245 = _1242 * (_1209.z + (-0.5));
        float _1252 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1216.x + (-0.5));
        float _1254 = _1252 * (_1216.y + (-0.5));
        float _1255 = _1252 * (_1216.z + (-0.5));
        float _1262 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1223.x + (-0.5));
        float _1264 = _1262 * (_1223.y + (-0.5));
        float _1265 = _1262 * (_1223.z + (-0.5));
        float _1272 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1230.x + (-0.5));
        float _1274 = _1272 * (_1230.y + (-0.5));
        float _1275 = _1272 * (_1230.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_518, _519, _520), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3838 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1306 + 1.0))) + _1311) * _1276;
        float _1321 = _1244 * 0.5;
        float _1322 = _1254 * 0.5;
        float _1323 = _1264 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_518, _519, _520), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3871 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1348 + 1.0))) + _1353) * _1277;
        float _1363 = _1245 * 0.5;
        float _1364 = _1255 * 0.5;
        float _1365 = _1265 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_518, _519, _520), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3904 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1390 + 1.0))) + _1395) * _1278;
        _1412 = _1245;
        _1413 = _1244;
        _1414 = _1243;
        _1415 = _1255;
        _1416 = _1254;
        _1417 = _1253;
        _1418 = _1265;
        _1419 = _1264;
        _1420 = _1263;
        _1421 = _1278;
        _1422 = _1277;
        _1423 = _1276;
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1101;
        _1413 = _1101;
        _1414 = _1101;
        _1415 = _1101;
        _1416 = _1101;
        _1417 = _1101;
        _1418 = _1101;
        _1419 = _1101;
        _1420 = _1101;
        _1421 = _1101;
        _1422 = _1101;
        _1423 = _1101;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1113)) + _1113;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1114)) + _1114;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1115)) + _1115;
    float _1459 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1462 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1465 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1436));
    float _1480 = _707 * 0.5;
    float _1481 = _708 * 0.5;
    float _1482 = _709 * 0.5;
    float _1483 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1486 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1489 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1523;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1496 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1100, _1104, _1107, _1110));
        float _1500 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1504 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1511 = dot(vec4(cbModelParam._m0[39u]), vec4(_1480, _1481, _1482, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1534;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1525 = dot(vec4(cbModelParam._m0[40u]), vec4(_1480, _1481, _1482, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1538 = (_1534 * cbModelParam._m0[1u].x) + (_1523 * (1.0 - cbModelParam._m0[1u].x));
    float _1548 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _521);
    float _1549 = isnan(_1548) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1548 : min(cbModelParam._m0[25u].z, _1548));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1597 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1601 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1605 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1608 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1611 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1614 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1642;
        if (_1608 > 0.0)
        {
            _1642 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1642 = frontier_phi_17_15_ladder;
        }
        float _1846;
        if (_1611 > 0.0)
        {
            _1846 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1846 = frontier_phi_26_22_ladder;
        }
        float _2100;
        if (_1614 > 0.0)
        {
            _2100 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2100 = frontier_phi_38_33_ladder;
        }
        float _2102 = isnan(_1846) ? _1642 : (isnan(_1642) ? _1846 : min(_1642, _1846));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1608) + _1597;
        float _2108 = (_2103 * _1611) + _1601;
        float _2109 = (_2103 * _1614) + _1605;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2110;
        float _2114 = _2110 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 > _2114) || ((_2108 < _2112) || ((_2107 < _2112) || (_2107 > _2114))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2109, cbModelParam._m0[9u].z, fma(_2108, cbModelParam._m0[9u].y, _2107 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2109, cbModelParam._m0[10u].z, fma(_2108, cbModelParam._m0[10u].y, _2107 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2109, cbModelParam._m0[11u].z, fma(_2108, cbModelParam._m0[11u].y, _2107 * cbModelParam._m0[11u].x))), _1549);
            frontier_phi_16_38_ladder = _2237.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2237.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2237.x * cbModelParam._m0[1u].y;
        }
        _1630 = frontier_phi_16_38_ladder_2;
        _1632 = frontier_phi_16_38_ladder_1;
        _1634 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1549);
        _1630 = _1618.x * cbModelParam._m0[1u].y;
        _1632 = _1618.y * cbModelParam._m0[1u].y;
        _1634 = _1618.z * cbModelParam._m0[1u].y;
    }
    float _1638 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _521);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1638 : min(cbModelParam._m0[25u].w, _1638));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1693 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1697 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1701 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1704 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1707 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1710 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1851;
        if (_1704 > 0.0)
        {
            _1851 = abs((1.0 - _1693) / _1704);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1693 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1851 = frontier_phi_28_24_ladder;
        }
        float _2127;
        if (_1707 > 0.0)
        {
            _2127 = abs((1.0 - _1697) / _1707);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1697 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2127 = frontier_phi_40_35_ladder;
        }
        float _2340;
        if (_1710 > 0.0)
        {
            _2340 = abs((1.0 - _1701) / _1710);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1701 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2340 = frontier_phi_49_46_ladder;
        }
        float _2342 = isnan(_2127) ? _1851 : (isnan(_1851) ? _2127 : min(_1851, _2127));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1704) + _1693;
        float _2348 = (_2343 * _1707) + _1697;
        float _2349 = (_2343 * _1710) + _1701;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1639);
            frontier_phi_25_49_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1729 = frontier_phi_25_49_ladder_2;
        _1731 = frontier_phi_25_49_ladder_1;
        _1733 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1639);
        _1729 = _1713.x * cbModelParam._m0[1u].z;
        _1731 = _1713.y * cbModelParam._m0[1u].z;
        _1733 = _1713.z * cbModelParam._m0[1u].z;
    }
    float _1746 = (((_734 * _683) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1729 - _1630)) + _1630);
    float _1748 = (((_734 * _685) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1731 - _1632)) + _1632);
    float _1750 = (((_734 * _686) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1733 - _1634)) + _1634);
    float _1753 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, _1746 * cbSceneParam._m0[91u].x));
    uvec4 _1769 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1771 = _1769.x * 14u;
    uint _1772 = _1771 + 13u;
    float _1779 = _699 + (-1.0);
    float _1784 = (cbLight._m0[_1772].x * _1779) + 1.0;
    float _1785 = (cbLight._m0[_1772].y * _1779) + 1.0;
    float _1786 = (cbLight._m0[_1772].z * _1779) + 1.0;
    float _1787 = (cbLight._m0[_1772].w * _1779) + 1.0;
    uint _1788 = _1771 + 5u;
    float _1794 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1798 = _1771 + 4u;
    float _1805 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1809 = _1771 | 1u;
    float _1820 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_518, _519, _520));
    float _1823 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_518, _519, _520));
    float _4040 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _4051 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1828 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1830 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _1837 = ((cbLight._m0[_1788].x * _1794) * _1830) + ((cbLight._m0[_1798].x * _1805) * _1828);
    float _1838 = ((_1794 * cbLight._m0[_1788].y) * _1830) + ((_1805 * cbLight._m0[_1798].y) * _1828);
    float _1839 = ((_1794 * cbLight._m0[_1788].z) * _1830) + ((_1805 * cbLight._m0[_1798].z) * _1828);
    uvec4 _1843 = floatBitsToUint(cbLight._m0[_1771 + 12u]);
    bool _1845 = _1843.x == 0u;
    float _1856;
    float _1858;
    float _1860;
    if (_1845)
    {
        _1856 = _1837;
        _1858 = _1838;
        _1860 = _1839;
    }
    else
    {
        uint _1864 = _1771 + 6u;
        float _1880 = (dot(vec3(cbLight._m0[_1771 + 2u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _1881 = _1880 * _1880;
        float _4062 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1883 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1856 = (((cbLight._m0[_1864].x * 0.3183098733425140380859375) * _1882) * _1883) + _1837;
        _1858 = (((cbLight._m0[_1864].y * 0.3183098733425140380859375) * _1882) * _1883) + _1838;
        _1860 = (((cbLight._m0[_1864].z * 0.3183098733425140380859375) * _1882) * _1883) + _1839;
    }
    bool _1863 = _1843.y == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1863)
    {
        _1901 = _1856;
        _1903 = _1858;
        _1905 = _1860;
    }
    else
    {
        uint _2071 = _1771 + 7u;
        float _2087 = (dot(vec3(cbLight._m0[_1771 + 3u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4078 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2090 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1901 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _1856;
        _1903 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _1858;
        _1905 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _1860;
    }
    uint _1908 = _1771 + 8u;
    float _1921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _521) * 0.949999988079071044921875);
    float _1922 = _1921 * _1921;
    float _1923 = cbLight._m0[_1771].x + _598;
    float _1924 = cbLight._m0[_1771].y + _599;
    float _1925 = cbLight._m0[_1771].z + _600;
    float _1929 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
    float _1930 = _1929 * _1923;
    float _1931 = _1929 * _1924;
    float _1932 = _1929 * _1925;
    float _1933 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1771].xyz));
    float _4094 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _1937 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1938 = dot(vec3(_518, _519, _520), vec3(_1930, _1931, _1932));
    float _4116 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1930, _1931, _1932));
    float _4127 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1946 = _1922 * _1922;
    float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
    float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
    float _1959 = 0.959999978542327880859375 - _680;
    float _1961 = 0.959999978542327880859375 - _681;
    float _1962 = 0.959999978542327880859375 - _682;
    float _1969 = 1.0 - _1922;
    float _1980 = (0.5 / (((_1937 * ((_1936 * _1969) + _1922)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _1969) + _1922) * _1936))) * _1936;
    float _4138 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
    uint _1993 = _1771 + 9u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _521) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1809].x + _598;
    float _2007 = cbLight._m0[_1809].y + _599;
    float _2008 = cbLight._m0[_1809].z + _600;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1809].xyz));
    float _4149 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2020 = dot(vec3(_518, _519, _520), vec3(_2013, _2014, _2015));
    float _4160 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_2013, _2014, _2015));
    float _4171 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2005 * _2005;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2039 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
    float _2046 = 1.0 - _2005;
    float _2056 = (0.5 / (((_1937 * ((_2019 * _2046) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2046) + _2005) * _2019))) * _2019;
    float _4182 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    float _2068 = (((((_2039 * _1959) + _683) * cbLight._m0[_1993].x) * _2058) * _1794) + (((((_1958 * _1959) + _683) * cbLight._m0[_1908].x) * _1982) * _1805);
    float _2069 = (((((_2039 * _1961) + _685) * cbLight._m0[_1993].y) * _2058) * _1794) + (((((_1958 * _1961) + _685) * cbLight._m0[_1908].y) * _1982) * _1805);
    float _2070 = (((((_2039 * _1962) + _686) * cbLight._m0[_1993].z) * _2058) * _1794) + (((((_1958 * _1962) + _686) * cbLight._m0[_1908].z) * _1982) * _1805);
    float _2132;
    float _2134;
    float _2136;
    if (_1845)
    {
        _2132 = _2068;
        _2134 = _2069;
        _2136 = _2070;
    }
    else
    {
        uint _2138 = _1771 + 2u;
        uint _2142 = _1771 + 10u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _521) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _598;
        float _2159 = cbLight._m0[_2138].y + _599;
        float _2160 = cbLight._m0[_2138].z + _600;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2138].xyz));
        float _4193 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2172 = dot(vec3(_518, _519, _520), vec3(_2165, _2166, _2167));
        float _4204 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4215 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2198 = 1.0 - _2157;
        float _2208 = (0.5 / (((_1937 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2198) + _2157) * _2171))) * _2171;
        float _4226 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2132 = (((((_2191 * _1959) + _683) * cbLight._m0[_2142].x) * _2210) * _2211) + _2068;
        _2134 = (((((_2191 * _1961) + _685) * cbLight._m0[_2142].y) * _2210) * _2211) + _2069;
        _2136 = (((((_2191 * _1962) + _686) * cbLight._m0[_2142].z) * _2210) * _2211) + _2070;
    }
    float _2246;
    float _2248;
    float _2250;
    if (_1863)
    {
        _2246 = _2132;
        _2248 = _2134;
        _2250 = _2136;
    }
    else
    {
        uint _2257 = _1771 + 3u;
        uint _2261 = _1771 + 11u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _521) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _598;
        float _2278 = cbLight._m0[_2257].y + _599;
        float _2279 = cbLight._m0[_2257].z + _600;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2257].xyz));
        float _4242 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2291 = dot(vec3(_518, _519, _520), vec3(_2284, _2285, _2286));
        float _4253 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4264 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0);
        float _2317 = 1.0 - _2276;
        float _2327 = (0.5 / (((_1937 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_1937 * _2317) + _2276) * _2290))) * _2290;
        float _4275 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2246 = (((((_2310 * _1959) + _683) * cbLight._m0[_2261].x) * _2329) * _2330) + _2132;
        _2248 = (((((_2310 * _1961) + _685) * cbLight._m0[_2261].y) * _2329) * _2330) + _2134;
        _2250 = (((((_2310 * _1962) + _686) * cbLight._m0[_2261].z) * _2329) * _2330) + _2136;
    }
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_1769.y == 0u)
    {
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2405;
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2405;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2405;
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.x;
        uint _2432 = uint((float(_2420.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2421))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2421)));
        float _2442 = (log2(_2408 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2443 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        uint _2446 = uint(isnan(14.0) ? _2443 : (isnan(_2443) ? 14.0 : min(_2443, 14.0)));
        uvec4 _2451 = texelFetch(g_lightClusterGridBuffer, int(((_2446 << 2u) + (_2432 << 6u)) >> 2u));
        uint _2452 = _2451.x;
        uint _2453 = _2420.z;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((((1u << ((_2453 >> 4u) & 15u)) + 4294967295u) & _2452) == 0u) || ((_2453 & 240u) == 0u))
        {
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
        }
        else
        {
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            uint _2712 = 0u;
            uint _2721;
            bool _2722;
            for (;;)
            {
                _2721 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2712 << 2u)) >> 2u)).x;
                _2722 = _2721 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2722)
                {
                    frontier_phi_66_pred = _2706;
                    frontier_phi_66_pred_1 = _2711;
                    frontier_phi_66_pred_2 = _2710;
                    frontier_phi_66_pred_3 = _2709;
                    frontier_phi_66_pred_4 = _2708;
                    frontier_phi_66_pred_5 = _2707;
                }
                else
                {
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    uint _2857;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2721;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    for (;;)
                    {
                        uint _2861 = uint(findLSB(_2857)) + (_2712 << 5u);
                        uint _2858 = (_2857 + 4294967295u) & _2857;
                        uint _2863 = _2861 * 48u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2883 = (_2861 * 48u) + 4u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 3u)).x));
                        uint _2902 = (_2861 * 48u) + 8u;
                        vec3 _2913 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x));
                        float _2917 = _2877.x - _2406;
                        float _2918 = _2877.y - _2407;
                        float _2919 = _2877.z - _2408;
                        float _2920 = dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919));
                        float _2923 = inversesqrt(_2920);
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2927 = dot(vec3(_640, _643, _646), vec3(_2924, _2925, _2926));
                        float _2932 = 1.0 - (_2920 * _2877.w);
                        float _4301 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _2934 = sqrt(_2920) * _2896.w;
                        float _2937 = 1.39999997615814208984375 / (_2934 + 1.39999997615814208984375);
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2927) + _2938;
                        float _2944 = _2934 * _2934;
                        float _2948 = ((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2933) / ((_2944 * 0.699999988079071044921875) + 1.0);
                        float _2952 = (-0.0) - _2406;
                        float _2953 = (-0.0) - _2407;
                        float _2954 = (-0.0) - _2408;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2969 = exp2(log2(1.0 / ((_2944 * 3.5) + 5.0)) * 0.25);
                        float _2970 = 1.0 - _715;
                        float _2977 = sqrt(1.0 - ((1.0 - (_2970 * _2970)) * (1.0 - (_2969 * _2969))));
                        float _2978 = _2977 * _2977;
                        float _2979 = _2978 * _2978;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2990 = dot(vec3(_640, _643, _646), vec3(_2959, _2960, _2961));
                        float _4317 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _2994 = dot(vec3(_640, _643, _646), vec3(_2986 * _2980, _2986 * _2981, _2986 * _2982));
                        float _4328 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2997 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3001 = ((_2997 * _2997) * (_2979 + (-1.0))) + 1.0;
                        float _3002 = _2937 * _2978;
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2927) + _3003;
                        float _4339 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3008 = 1.0 - _2978;
                        float _3018 = (0.5 / (((_3007 * ((_2993 * _3008) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_3007 * _3008) + _2978) * _2993))) * _3007;
                        float _4350 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3029 = (((_2979 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3001 * _3001) * ((_2944 * 2.1991131305694580078125) + 3.141590118408203125))) * _2933;
                        _2781 = (_2948 * _2896.x) + _2854;
                        _2782 = (_2948 * _2896.y) + _2855;
                        _2783 = (_2948 * _2896.z) + _2856;
                        _2778 = (_3029 * _2913.x) + _2851;
                        _2779 = (_3029 * _2913.y) + _2852;
                        _2780 = (_3029 * _2913.z) + _2853;
                        if (_2858 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2858;
                        }
                    }
                    frontier_phi_66_pred = _2778;
                    frontier_phi_66_pred_1 = _2783;
                    frontier_phi_66_pred_2 = _2782;
                    frontier_phi_66_pred_3 = _2781;
                    frontier_phi_66_pred_4 = _2780;
                    frontier_phi_66_pred_5 = _2779;
                }
                _2554 = frontier_phi_66_pred;
                _2564 = frontier_phi_66_pred_1;
                _2562 = frontier_phi_66_pred_2;
                _2560 = frontier_phi_66_pred_3;
                _2558 = frontier_phi_66_pred_4;
                _2556 = frontier_phi_66_pred_5;
                uint _2713 = _2712 + 1u;
                if (_2713 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2706 = _2554;
                    _2707 = _2556;
                    _2708 = _2558;
                    _2709 = _2560;
                    _2710 = _2562;
                    _2711 = _2564;
                    _2712 = _2713;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
        }
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.z;
        uint _2570 = (_2568 >> 8u) & 15u;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((4294967295u << _2570) & _2452) == 0u)
        {
            _2674 = _2553;
            _2676 = _2555;
            _2678 = _2557;
            _2680 = _2559;
            _2682 = _2561;
            _2684 = _2563;
        }
        else
        {
            float _2699 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
            float _2700 = _2699 * _2406;
            float _2701 = _2699 * _2407;
            float _2702 = _2699 * _2408;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2570 < ((_2568 >> 12u) & 15u))
            {
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2834 = _2553;
                float _2835 = _2555;
                float _2836 = _2557;
                float _2837 = _2559;
                float _2838 = _2561;
                float _2839 = _2563;
                uint _2840 = _2570;
                uint _2849;
                bool _2850;
                for (;;)
                {
                    _2849 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                    _2850 = _2849 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2850)
                    {
                        frontier_phi_77_pred = _2839;
                        frontier_phi_77_pred_1 = _2838;
                        frontier_phi_77_pred_2 = _2837;
                        frontier_phi_77_pred_3 = _2836;
                        frontier_phi_77_pred_4 = _2835;
                        frontier_phi_77_pred_5 = _2834;
                    }
                    else
                    {
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3056 = _2834;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        uint _3062 = _2849;
                        uint _3063;
                        vec4 _3088;
                        float _3089;
                        vec4 _3104;
                        vec3 _3116;
                        vec4 _3132;
                        vec4 _3147;
                        float _3193;
                        bool _3194;
                        for (;;)
                        {
                            uint _3073 = ((_2840 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3062));
                            _3063 = (_3062 + 4294967295u) & _3062;
                            uint _3075 = _3073 * 40u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            _3089 = _3088.w;
                            uint _3091 = (_3073 * 40u) + 4u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3106 = (_3073 * 40u) + 8u;
                            _3116 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x));
                            uint _3119 = (_3073 * 40u) + 16u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3073 * 40u) + 20u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3073 * 40u) + 24u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3168 = (_3073 * 40u) + 28u;
                            vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3193 = fma(_2408, _3181.z, fma(_2407, _3181.y, _3181.x * _2406)) + _3181.w;
                            _3194 = !((fma(_2408, _3162.z, fma(_2407, _3162.y, _3162.x * _2406)) + _3162.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3194)
                            {
                                float _3221 = _3088.x - _2406;
                                float _3222 = _3088.y - _2407;
                                float _3223 = _3088.z - _2408;
                                float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                                float _3227 = inversesqrt(_3224);
                                float _3228 = _3227 * _3221;
                                float _3229 = _3227 * _3222;
                                float _3230 = _3227 * _3223;
                                float _3234 = 1.0 - (_3224 / (_3089 * _3089));
                                float _4361 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3239 = sqrt(_3224) * _3104.w;
                                float _3241 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                                float _3242 = _3241 * _3241;
                                float _3245 = ((1.0 - _3242) * dot(vec3(_3228, _3229, _3230), vec3(_640, _643, _646))) + _3242;
                                float _3248 = _3239 * _3239;
                                float _3252 = (fma(_2408, _3132.z, fma(_2407, _3132.y, _3132.x * _2406)) + _3132.w) / _3193;
                                float _3253 = (fma(_2408, _3147.z, fma(_2407, _3147.y, _3147.x * _2406)) + _3147.w) / _3193;
                                float _3257 = 1.0 - dot(vec2(_3252, _3253), vec2(_3252, _3253));
                                float _4377 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3259 = _3258 * (((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3235) / ((_3248 * 0.699999988079071044921875) + 1.0));
                                float _3271 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                                float _3272 = 1.0 - _715;
                                float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                                float _3280 = _3279 * _3279;
                                float _3281 = _3280 * _3280;
                                float _3282 = _3228 - _2700;
                                float _3283 = _3229 - _2701;
                                float _3284 = _3230 - _2702;
                                float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                                float _3292 = dot(vec3(_640, _643, _646), vec3((-0.0) - _2700, (-0.0) - _2701, (-0.0) - _2702));
                                float _4388 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3296 = dot(vec3(_640, _643, _646), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                                float _4399 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                                float _3304 = _3241 * _3280;
                                float _3305 = _3304 * _3304;
                                float _3311 = ((1.0 - _3305) * dot(vec3(_640, _643, _646), vec3(_3228, _3229, _3230))) + _3305;
                                float _4410 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3313 = 1.0 - _3280;
                                float _3323 = (0.5 / (((_3312 * ((_3295 * _3313) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3280) * _3295))) * _3312;
                                float _4421 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3333 = (_3258 * _3235) * (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3303 * _3303) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3259 * _3104.y;
                                frontier_phi_83_pred_1 = _3259 * _3104.x;
                                frontier_phi_83_pred_2 = _3333 * _3116.z;
                                frontier_phi_83_pred_3 = _3333 * _3116.y;
                                frontier_phi_83_pred_4 = _3333 * _3116.x;
                                frontier_phi_83_pred_5 = _3259 * _3104.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3341 = frontier_phi_83_pred;
                            _3340 = frontier_phi_83_pred_1;
                            _3339 = frontier_phi_83_pred_2;
                            _3338 = frontier_phi_83_pred_3;
                            _3337 = frontier_phi_83_pred_4;
                            _3342 = frontier_phi_83_pred_5;
                            _3046 = _3340 + _3059;
                            _3047 = _3341 + _3060;
                            _3048 = _3342 + _3061;
                            _3043 = _3337 + _3056;
                            _3044 = _3338 + _3057;
                            _3045 = _3339 + _3058;
                            if (_3063 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3063;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3048;
                        frontier_phi_77_pred_1 = _3047;
                        frontier_phi_77_pred_2 = _3046;
                        frontier_phi_77_pred_3 = _3045;
                        frontier_phi_77_pred_4 = _3044;
                        frontier_phi_77_pred_5 = _3043;
                    }
                    _2685 = frontier_phi_77_pred;
                    _2683 = frontier_phi_77_pred_1;
                    _2681 = frontier_phi_77_pred_2;
                    _2679 = frontier_phi_77_pred_3;
                    _2677 = frontier_phi_77_pred_4;
                    _2675 = frontier_phi_77_pred_5;
                    uint _2841 = _2840 + 1u;
                    if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2834 = _2675;
                        _2835 = _2677;
                        _2836 = _2679;
                        _2837 = _2681;
                        _2838 = _2683;
                        _2839 = _2685;
                        _2840 = _2841;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2679;
                frontier_phi_58_59_ladder_1 = _2685;
                frontier_phi_58_59_ladder_2 = _2683;
                frontier_phi_58_59_ladder_3 = _2681;
                frontier_phi_58_59_ladder_4 = _2677;
                frontier_phi_58_59_ladder_5 = _2675;
            }
            else
            {
                frontier_phi_58_59_ladder = _2557;
                frontier_phi_58_59_ladder_1 = _2563;
                frontier_phi_58_59_ladder_2 = _2561;
                frontier_phi_58_59_ladder_3 = _2559;
                frontier_phi_58_59_ladder_4 = _2555;
                frontier_phi_58_59_ladder_5 = _2553;
            }
            _2674 = frontier_phi_58_59_ladder_5;
            _2676 = frontier_phi_58_59_ladder_4;
            _2678 = frontier_phi_58_59_ladder;
            _2680 = frontier_phi_58_59_ladder_3;
            _2682 = frontier_phi_58_59_ladder_2;
            _2684 = frontier_phi_58_59_ladder_1;
        }
        float _2689 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _2465 = (_2689 * _2680) + _1901;
        _2467 = (_2689 * _2682) + _1903;
        _2469 = (_2689 * _2684) + _1905;
        _2471 = ((_2674 * _683) * _2689) + _2246;
        _2473 = ((_2676 * _685) * _2689) + _2248;
        _2475 = ((_2678 * _686) * _2689) + _2250;
    }
    else
    {
        _2465 = _1901;
        _2467 = _1903;
        _2469 = _1905;
        _2471 = _2246;
        _2473 = _2248;
        _2475 = _2250;
    }
    float _4437 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4448 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4459 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _2492 = ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2465 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _699))) + ((_2471 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1538)) * cbPerFrame._m0[3u].x);
    float _2493 = ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2467 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _699))) + ((_2473 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1538)) * cbPerFrame._m0[3u].x);
    float _2494 = ((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2469 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _699))) + ((_2475 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1538)) * cbPerFrame._m0[3u].x);
    uint _2495 = _230 + 6u;
    float _2503 = _619 / cbSceneParam._m0[86u].x;
    float _2504 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2518 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2520 = _2518.x;
    float _2521 = _2518.y;
    float _2522 = _2518.z;
    float _2523 = _2518.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2578 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2579 = _2578 / _540;
        float _2590 = _2579 * _591;
        float _2591 = _592 * _2579;
        float _2592 = (-0.0) - _2591;
        float _2594 = _2579 * _593;
        float _2596 = (cbSceneParam._m0[77u].w * _2592) / _2578;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2591;
        float _2604 = sqrt(((_2590 * _2590) + (_2591 * _2591)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2578)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2791;
        if (abs((_2592 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2791 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2735 = 1.0 / cbSceneParam._m0[80u].x;
            float _2736 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2737 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2746 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : min(_2736, 0.0));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            _2791 = ((abs(_2604 / _2592) * cbSceneParam._m0[80u].y) * ((((_2746 - _2747) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))))) * _2735)) - ((exp2(_2614 * _2746) - exp2(_2614 * _2747)) * _2735))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2793 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, 1.0), 0.0);
        float _2802 = exp2((_2791 * (-1.44269502162933349609375)) * (1.0 - _2793.w));
        float _2803 = log2(_2802);
        float _2819 = log2(_2523);
        _2616 = (exp2(_2819 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].x)) * _2793.x) / cbSceneParam._m0[78u].x)) + _2520;
        _2618 = (exp2(_2819 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].y)) * _2793.y) / cbSceneParam._m0[78u].y)) + _2521;
        _2620 = (exp2(_2819 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].z)) * _2793.z) / cbSceneParam._m0[78u].z)) + _2522;
        _2622 = _2802 * _2523;
    }
    else
    {
        _2616 = _2520;
        _2618 = _2521;
        _2620 = _2522;
        _2622 = _2523;
    }
    bool _2829;
    vec4 _2632;
    vec4 _2654;
    float _2656;
    float _2660;
    float _2661;
    float _2662;
    float _2663;
    bool _2673;
    for (;;)
    {
        _2632 = cbMatDynParam._m0[0u];
        float _2634 = roundEven(_2632.y);
        bool _2635 = _2634 == 3.0;
        float _2636 = log2(_2622);
        float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * _2492;
        float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * _2493;
        float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * _2494;
        float _2652 = _607 + (-0.5);
        _2654 = cbMtdParam._m0[1u];
        _2656 = _2654.y * _2652;
        float _2659 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2660 = _2659 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
        _2661 = _2659 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
        _2662 = _2659 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
        _2663 = _2652 * 0.999000012874603271484375;
        _2673 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2673)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2663) < 0.5)
            {
                _2829 = true;
                break;
            }
        }
        uint _2770 = _659 + uint(_2632.w);
        if ((cbInstanceData._m0[_2770].w < 1.0) && ((cbInstanceData._m0[_2770].w + _2663) < 0.5))
        {
            _2829 = true;
            break;
        }
        if ((_2656 + 1.0) < _2654.x)
        {
            _2829 = true;
            break;
        }
        _2829 = false;
        break;
    }
    float _3034;
    if (_2829)
    {
        discard_state = true;
        _3034 = 0.0;
    }
    else
    {
        _3034 = cbInstanceData._m0[_2495].w;
    }
    SV_Target.x = _2660;
    SV_Target.y = _2661;
    SV_Target.z = _2662;
    SV_Target.w = _3034;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2495].w;
    discard_exit();
}


