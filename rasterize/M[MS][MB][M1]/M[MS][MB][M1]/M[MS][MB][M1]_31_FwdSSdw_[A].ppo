#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1159;
float _3565;
float _3566;
float _3567;
float _3568;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3577 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3588 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3599 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _319 = _314.x * cbMtdParam._m0[9u].x;
    float _320 = _314.y * cbMtdParam._m0[9u].y;
    float _321 = _314.z * cbMtdParam._m0[9u].z;
    float _325 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _319;
    float _328 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _320;
    float _331 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _321;
    float _338 = ((_319 - _325) * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) + _325;
    float _339 = ((_320 - _328) * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) + _328;
    float _340 = ((_321 - _331) * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) + _331;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _384 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _388 = _384.z;
    float _392 = (_384.x * 2.0) + (-1.0);
    float _393 = (_384.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3610 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))));
    float _404 = _392 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_358.x * 2.0) + (-1.0)));
    float _405 = _393 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_358.y * 2.0) + (-1.0)));
    float _408 = fma(_399, _225, fma(_405, _232, _404 * _218));
    float _411 = fma(_399, _226, fma(_405, _233, _404 * _219));
    float _414 = fma(_399, _227, fma(_405, _234, _404 * _220));
    float _418 = inversesqrt(dot(vec3(_408, _411, _414), vec3(_408, _411, _414)));
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _277) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _278) + cbTextureTilingScale._m0[11u].w));
    float _456 = _454.x;
    float _457 = 1.0 - _456;
    float _464 = ((_456 - _457) * cbMtdParam._m0[24u].z) + _457;
    float _466 = (cbMtdParam._m0[19u].x + dot(vec4(_418 * _408, _418 * _411, _418 * _414, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_464 * cbMtdParam._m0[21u].z);
    float _3621 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _482 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_464 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3632 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _487 = ((_467 * (cbMtdParam._m0[17u].x - _338)) * _483) + _338;
    float _488 = ((_467 * (cbMtdParam._m0[17u].y - _339)) * _483) + _339;
    float _489 = ((_467 * (cbMtdParam._m0[17u].z - _340)) * _483) + _340;
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _504 = _502.x;
    float _507 = _504 - ((_504 * _467) * _483);
    float _512 = (((_358.z - _388) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _388;
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _277) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _278) + cbTextureTilingScale._m0[15u].w));
    float _532 = (_525.x * 2.0) + (-1.0);
    float _533 = (_525.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3643 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _543 = (((_525.z - _512) * _467) * _483) + _512;
    float _558 = (((cbMtdParam._m0[21u].x * _404) + ((_532 - _404) * _467)) * _483) + _404;
    float _559 = (((cbMtdParam._m0[21u].x * _405) + ((_533 - _405) * _467)) * _483) + _405;
    float _560 = (((sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) - _399) * _467) * _483) + _399;
    float _562 = cbMtdParam._m0[22u].x + _384.w;
    float _565 = fma(_560, _225, fma(_559, _232, _558 * _218));
    float _568 = fma(_560, _226, fma(_559, _233, _558 * _219));
    float _571 = fma(_560, _227, fma(_559, _234, _558 * _220));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    float _576 = _575 * _565;
    float _577 = _575 * _568;
    float _578 = _575 * _571;
    float _3654 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _579 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3676 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3687 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3698 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3709 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _584 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    vec4 _663 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _665 = _663.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _840 = sqrt(((_649 * _649) + (_650 * _650)) + (_651 * _651));
        float _846 = (cbMatDynParam._m0[5u].x * _840) + cbMatDynParam._m0[5u].y;
        float _3720 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _851 = (cbMatDynParam._m0[5u].z * _840) + cbMatDynParam._m0[5u].w;
        float _3731 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) - _847)) + _847) < ((_665 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_578, cbSceneParam._m0[5u].z, fma(_577, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _576));
    float _701 = fma(_578, cbSceneParam._m0[6u].z, fma(_577, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _576));
    float _704 = fma(_578, cbSceneParam._m0[7u].z, fma(_577, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _576));
    uint _717 = _258 + 9u;
    uint _718 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3742 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _730 = 1.0 - _584;
    float _731 = _727 * _730;
    float _732 = _728 * _730;
    float _733 = _729 * _730;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _584;
    float _739 = (_728 + (-0.039999999105930328369140625)) * _584;
    float _740 = (_729 + (-0.039999999105930328369140625)) * _584;
    float _741 = _738 + 0.039999999105930328369140625;
    float _743 = _739 + 0.039999999105930328369140625;
    float _744 = _740 + 0.039999999105930328369140625;
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _757 = ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * TEXCOORD_5.w) * _753.x;
    float _758 = dot(vec3(_576, _577, _578), vec3(_656, _657, _658));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _576) - _656;
    float _766 = (_761 * _577) - _657;
    float _767 = (_761 * _578) - _658;
    float _771 = abs(dot(vec3(_656, _657, _658), vec3(_576, _577, _578)));
    float _3775 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_579);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _792 = (1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _793 = _786 * _773;
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _883 = fma(_829, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821));
        float _887 = fma(_829, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821));
        float _891 = fma(_829, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821));
        float _916 = _821 + _576;
        float _917 = _825 + _577;
        float _918 = _829 + _578;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _883;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _887;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _891;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_883 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_887 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_891 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_576, _577, _578), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3823 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_576, _577, _578), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3856 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_576, _577, _578), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3889 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1201 = fma(_829, cbModelParam._m0[30u].z, fma(_825, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821));
        float _1205 = fma(_829, cbModelParam._m0[31u].z, fma(_825, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821));
        float _1209 = fma(_829, cbModelParam._m0[32u].z, fma(_825, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821));
        float _1232 = _821 + _576;
        float _1233 = _825 + _577;
        float _1234 = _829 + _578;
        float _1244 = fma(_1234, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1232)) - _1201;
        float _1245 = fma(_1234, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1232)) - _1205;
        float _1246 = fma(_1234, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1232)) - _1209;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1201 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1205 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[35u].z) + ((((((_1209 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1300 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1267.x + (-0.5));
        float _1302 = _1300 * (_1267.y + (-0.5));
        float _1303 = _1300 * (_1267.z + (-0.5));
        float _1310 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1274.x + (-0.5));
        float _1312 = _1310 * (_1274.y + (-0.5));
        float _1313 = _1310 * (_1274.z + (-0.5));
        float _1320 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1281.x + (-0.5));
        float _1322 = _1320 * (_1281.y + (-0.5));
        float _1323 = _1320 * (_1281.z + (-0.5));
        float _1330 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1288.x + (-0.5));
        float _1332 = _1330 * (_1288.y + (-0.5));
        float _1333 = _1330 * (_1288.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_576, _577, _578), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3952 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1364 + 1.0))) + _1369) * _1334;
        float _1379 = _1302 * 0.5;
        float _1380 = _1312 * 0.5;
        float _1381 = _1322 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_576, _577, _578), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3985 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1406 + 1.0))) + _1411) * _1335;
        float _1421 = _1303 * 0.5;
        float _1422 = _1313 * 0.5;
        float _1423 = _1323 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_576, _577, _578), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4018 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1448 + 1.0))) + _1453) * _1336;
        _1470 = _1303;
        _1471 = _1302;
        _1472 = _1301;
        _1473 = _1313;
        _1474 = _1312;
        _1475 = _1311;
        _1476 = _1323;
        _1477 = _1322;
        _1478 = _1321;
        _1479 = _1336;
        _1480 = _1335;
        _1481 = _1334;
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1159;
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = _1159;
        _1480 = _1159;
        _1481 = _1159;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1172)) + _1172;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1173)) + _1173;
    float _1517 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1494));
    float _1538 = _765 * 0.5;
    float _1539 = _766 * 0.5;
    float _1540 = _767 * 0.5;
    float _1541 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1544 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1547 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1581;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1554 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1558 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1562 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1569 = dot(vec4(cbModelParam._m0[39u]), vec4(_1538, _1539, _1540, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1592;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1583 = dot(vec4(cbModelParam._m0[40u]), vec4(_1538, _1539, _1540, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1596 = (_1592 * cbModelParam._m0[1u].x) + (_1581 * (1.0 - cbModelParam._m0[1u].x));
    float _1606 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _579);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1606 : min(cbModelParam._m0[25u].z, _1606));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1655 = fma(_829, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821)) + cbModelParam._m0[13u].w;
        float _1659 = fma(_829, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821)) + cbModelParam._m0[14u].w;
        float _1663 = fma(_829, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821)) + cbModelParam._m0[15u].w;
        float _1666 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1669 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1672 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1700;
        if (_1666 > 0.0)
        {
            _1700 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1700 = frontier_phi_17_15_ladder;
        }
        float _1925;
        if (_1669 > 0.0)
        {
            _1925 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1925 = frontier_phi_26_22_ladder;
        }
        float _2182;
        if (_1672 > 0.0)
        {
            _2182 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2182 = frontier_phi_38_33_ladder;
        }
        float _2184 = isnan(_1925) ? _1700 : (isnan(_1700) ? _1925 : min(_1700, _1925));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1666) + _1655;
        float _2190 = (_2185 * _1669) + _1659;
        float _2191 = (_2185 * _1672) + _1663;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2192;
        float _2196 = _2192 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 > _2196) || ((_2190 < _2194) || ((_2189 < _2194) || (_2189 > _2196))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1607);
            frontier_phi_16_38_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1688 = frontier_phi_16_38_ladder_2;
        _1690 = frontier_phi_16_38_ladder_1;
        _1692 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1607);
        _1688 = _1676.x * cbModelParam._m0[1u].y;
        _1690 = _1676.y * cbModelParam._m0[1u].y;
        _1692 = _1676.z * cbModelParam._m0[1u].y;
    }
    float _1696 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _579);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1696 : min(cbModelParam._m0[25u].w, _1696));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_829, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_829, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_829, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1765 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1768 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1930;
        if (_1762 > 0.0)
        {
            _1930 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1930 = frontier_phi_28_24_ladder;
        }
        float _2209;
        if (_1765 > 0.0)
        {
            _2209 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2209 = frontier_phi_40_35_ladder;
        }
        float _2422;
        if (_1768 > 0.0)
        {
            _2422 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2422 = frontier_phi_49_46_ladder;
        }
        float _2424 = isnan(_2209) ? _1930 : (isnan(_1930) ? _2209 : min(_1930, _2209));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1762) + _1751;
        float _2430 = (_2425 * _1765) + _1755;
        float _2431 = (_2425 * _1768) + _1759;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2432;
        float _2435 = _2432 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2431 > _2435) || ((_2431 < _2433) || ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 < _2433) || (_2429 > _2435))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2431, cbModelParam._m0[17u].z, fma(_2430, cbModelParam._m0[17u].y, _2429 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2431, cbModelParam._m0[18u].z, fma(_2430, cbModelParam._m0[18u].y, _2429 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2431, cbModelParam._m0[19u].z, fma(_2430, cbModelParam._m0[19u].y, _2429 * cbModelParam._m0[19u].x))), _1697);
            frontier_phi_25_49_ladder = _2630.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2630.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2630.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_25_49_ladder_2;
        _1789 = frontier_phi_25_49_ladder_1;
        _1791 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1697);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1804 = (((_792 * _741) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1806 = (((_792 * _743) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1808 = (((_792 * _744) + _793) * _757) * ((cbModelParam._m0[1u].w * (_1791 - _1692)) + _1692);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    vec4 _1825 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_677, _678));
    float _1827 = _1825.w;
    float _1839 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1827);
    float _1840 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1827);
    float _1841 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1827);
    uvec4 _1845 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _1847 = _1845.x * 14u;
    uint _1848 = _1847 + 13u;
    float _1855 = _757 + (-1.0);
    float _1860 = (cbLight._m0[_1848].x * _1855) + 1.0;
    float _1861 = (cbLight._m0[_1848].y * _1855) + 1.0;
    float _1862 = (cbLight._m0[_1848].z * _1855) + 1.0;
    float _1863 = (cbLight._m0[_1848].w * _1855) + 1.0;
    uint _1864 = _1847 + 5u;
    float _1870 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1874 = _1847 + 4u;
    float _1884 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1888 = _1847 | 1u;
    float _1899 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_576, _577, _578));
    float _1902 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_576, _577, _578));
    float _4154 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _4165 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1907 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _1909 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _1916 = ((cbLight._m0[_1864].x * _1870) * _1909) + (((cbLight._m0[_1874].x * _1839) * _1884) * _1907);
    float _1917 = ((_1870 * cbLight._m0[_1864].y) * _1909) + (((cbLight._m0[_1874].y * _1840) * _1884) * _1907);
    float _1918 = ((_1870 * cbLight._m0[_1864].z) * _1909) + (((cbLight._m0[_1874].z * _1841) * _1884) * _1907);
    uvec4 _1922 = floatBitsToUint(cbLight._m0[_1847 + 12u]);
    bool _1924 = _1922.x == 0u;
    float _1935;
    float _1937;
    float _1939;
    if (_1924)
    {
        _1935 = _1916;
        _1937 = _1917;
        _1939 = _1918;
    }
    else
    {
        uint _1943 = _1847 + 6u;
        float _1959 = (dot(vec3(cbLight._m0[_1847 + 2u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _1960 = _1959 * _1959;
        float _4176 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1962 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _1935 = (((cbLight._m0[_1943].x * 0.3183098733425140380859375) * _1961) * _1962) + _1916;
        _1937 = (((cbLight._m0[_1943].y * 0.3183098733425140380859375) * _1961) * _1962) + _1917;
        _1939 = (((cbLight._m0[_1943].z * 0.3183098733425140380859375) * _1961) * _1962) + _1918;
    }
    bool _1942 = _1922.y == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1942)
    {
        _1980 = _1935;
        _1982 = _1937;
        _1984 = _1939;
    }
    else
    {
        uint _2153 = _1847 + 7u;
        float _2169 = (dot(vec3(cbLight._m0[_1847 + 3u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4192 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2172 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _1980 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _1935;
        _1982 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _1937;
        _1984 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _1939;
    }
    uint _1987 = _1847 + 8u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _579) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1847].x + _656;
    float _2003 = cbLight._m0[_1847].y + _657;
    float _2004 = cbLight._m0[_1847].z + _658;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1847].xyz));
    float _4208 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2016 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2017 = dot(vec3(_576, _577, _578), vec3(_2009, _2010, _2011));
    float _4230 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2009, _2010, _2011));
    float _4241 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2001 * _2001;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2037 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
    float _2038 = 0.959999978542327880859375 - _738;
    float _2040 = 0.959999978542327880859375 - _739;
    float _2041 = 0.959999978542327880859375 - _740;
    float _2048 = 1.0 - _2001;
    float _2059 = (0.5 / (((_2016 * ((_2015 * _2048) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2048) + _2001) * _2015))) * _2015;
    float _4252 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    uint _2075 = _1847 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _579) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1888].x + _656;
    float _2089 = cbLight._m0[_1888].y + _657;
    float _2090 = cbLight._m0[_1888].z + _658;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1888].xyz));
    float _4263 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2102 = dot(vec3(_576, _577, _578), vec3(_2095, _2096, _2097));
    float _4274 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2095, _2096, _2097));
    float _4285 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
    float _2128 = 1.0 - _2087;
    float _2138 = (0.5 / (((_2016 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2128) + _2087) * _2101))) * _2101;
    float _4296 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2150 = (((((_2121 * _2038) + _741) * cbLight._m0[_2075].x) * _2140) * _1870) + ((((cbLight._m0[_1987].x * _1839) * ((_2037 * _2038) + _741)) * _2061) * _1884);
    float _2151 = (((((_2121 * _2040) + _743) * cbLight._m0[_2075].y) * _2140) * _1870) + ((((cbLight._m0[_1987].y * _1840) * ((_2037 * _2040) + _743)) * _2061) * _1884);
    float _2152 = (((((_2121 * _2041) + _744) * cbLight._m0[_2075].z) * _2140) * _1870) + ((((cbLight._m0[_1987].z * _1841) * ((_2037 * _2041) + _744)) * _2061) * _1884);
    float _2214;
    float _2216;
    float _2218;
    if (_1924)
    {
        _2214 = _2150;
        _2216 = _2151;
        _2218 = _2152;
    }
    else
    {
        uint _2220 = _1847 + 2u;
        uint _2224 = _1847 + 10u;
        float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _579) * 0.949999988079071044921875);
        float _2239 = _2238 * _2238;
        float _2240 = cbLight._m0[_2220].x + _656;
        float _2241 = cbLight._m0[_2220].y + _657;
        float _2242 = cbLight._m0[_2220].z + _658;
        float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
        float _2247 = _2246 * _2240;
        float _2248 = _2246 * _2241;
        float _2249 = _2246 * _2242;
        float _2250 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2220].xyz));
        float _4307 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2254 = dot(vec3(_576, _577, _578), vec3(_2247, _2248, _2249));
        float _4318 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2258 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2247, _2248, _2249));
        float _4329 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2262 = _2239 * _2239;
        float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
        float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0);
        float _2280 = 1.0 - _2239;
        float _2290 = (0.5 / (((_2016 * ((_2253 * _2280) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2280) + _2239) * _2253))) * _2253;
        float _4340 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2292 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
        float _2293 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2214 = (((((_2273 * _2038) + _741) * cbLight._m0[_2224].x) * _2292) * _2293) + _2150;
        _2216 = (((((_2273 * _2040) + _743) * cbLight._m0[_2224].y) * _2292) * _2293) + _2151;
        _2218 = (((((_2273 * _2041) + _744) * cbLight._m0[_2224].z) * _2292) * _2293) + _2152;
    }
    float _2328;
    float _2330;
    float _2332;
    if (_1942)
    {
        _2328 = _2214;
        _2330 = _2216;
        _2332 = _2218;
    }
    else
    {
        uint _2339 = _1847 + 3u;
        uint _2343 = _1847 + 11u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _579) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _656;
        float _2360 = cbLight._m0[_2339].y + _657;
        float _2361 = cbLight._m0[_2339].z + _658;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2339].xyz));
        float _4356 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2373 = dot(vec3(_576, _577, _578), vec3(_2366, _2367, _2368));
        float _4367 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4378 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
        float _2399 = 1.0 - _2358;
        float _2409 = (0.5 / (((_2016 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2399) + _2358) * _2372))) * _2372;
        float _4389 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2328 = (((((_2392 * _2038) + _741) * cbLight._m0[_2343].x) * _2411) * _2412) + _2214;
        _2330 = (((((_2392 * _2040) + _743) * cbLight._m0[_2343].y) * _2411) * _2412) + _2216;
        _2332 = (((((_2392 * _2041) + _744) * cbLight._m0[_2343].z) * _2411) * _2412) + _2218;
    }
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_1845.y == 0u)
    {
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2487;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2487;
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2487;
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.x;
        uint _2514 = uint((float(_2502.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2503))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2503)));
        float _2524 = (log2(_2490 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2525 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        uint _2528 = uint(isnan(14.0) ? _2525 : (isnan(_2525) ? 14.0 : min(_2525, 14.0)));
        uvec4 _2533 = texelFetch(g_lightClusterGridBuffer, int(((_2528 << 2u) + (_2514 << 6u)) >> 2u));
        uint _2534 = _2533.x;
        uint _2535 = _2502.z;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((((1u << ((_2535 >> 4u) & 15u)) + 4294967295u) & _2534) == 0u) || ((_2535 & 240u) == 0u))
        {
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
        }
        else
        {
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            uint _2794 = 0u;
            uint _2803;
            bool _2804;
            for (;;)
            {
                _2803 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                _2804 = _2803 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2804)
                {
                    frontier_phi_66_pred = _2788;
                    frontier_phi_66_pred_1 = _2793;
                    frontier_phi_66_pred_2 = _2792;
                    frontier_phi_66_pred_3 = _2791;
                    frontier_phi_66_pred_4 = _2790;
                    frontier_phi_66_pred_5 = _2789;
                }
                else
                {
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    uint _2939;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2803;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2943 = uint(findLSB(_2939)) + (_2794 << 5u);
                        uint _2940 = (_2939 + 4294967295u) & _2939;
                        uint _2945 = _2943 * 48u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2965 = (_2943 * 48u) + 4u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2984 = (_2943 * 48u) + 8u;
                        vec3 _2995 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x));
                        float _2999 = _2959.x - _2488;
                        float _3000 = _2959.y - _2489;
                        float _3001 = _2959.z - _2490;
                        float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                        float _3005 = inversesqrt(_3002);
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3009 = dot(vec3(_698, _701, _704), vec3(_3006, _3007, _3008));
                        float _3014 = 1.0 - (_3002 * _2959.w);
                        float _4415 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3016 = sqrt(_3002) * _2978.w;
                        float _3019 = 1.39999997615814208984375 / (_3016 + 1.39999997615814208984375);
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _3009) + _3020;
                        float _3026 = _3016 * _3016;
                        float _3030 = ((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3015) / ((_3026 * 0.699999988079071044921875) + 1.0);
                        float _3034 = (-0.0) - _2488;
                        float _3035 = (-0.0) - _2489;
                        float _3036 = (-0.0) - _2490;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3051 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _773;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_698, _701, _704), vec3(_3041, _3042, _3043));
                        float _4431 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3076 = dot(vec3(_698, _701, _704), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4442 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3019 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3009) + _3085;
                        float _4453 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4464 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3083 * _3083) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125))) * _3015;
                        _2863 = (_3030 * _2978.x) + _2936;
                        _2864 = (_3030 * _2978.y) + _2937;
                        _2865 = (_3030 * _2978.z) + _2938;
                        _2860 = (_3111 * _2995.x) + _2933;
                        _2861 = (_3111 * _2995.y) + _2934;
                        _2862 = (_3111 * _2995.z) + _2935;
                        if (_2940 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2940;
                        }
                    }
                    frontier_phi_66_pred = _2860;
                    frontier_phi_66_pred_1 = _2865;
                    frontier_phi_66_pred_2 = _2864;
                    frontier_phi_66_pred_3 = _2863;
                    frontier_phi_66_pred_4 = _2862;
                    frontier_phi_66_pred_5 = _2861;
                }
                _2636 = frontier_phi_66_pred;
                _2646 = frontier_phi_66_pred_1;
                _2644 = frontier_phi_66_pred_2;
                _2642 = frontier_phi_66_pred_3;
                _2640 = frontier_phi_66_pred_4;
                _2638 = frontier_phi_66_pred_5;
                uint _2795 = _2794 + 1u;
                if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2788 = _2636;
                    _2789 = _2638;
                    _2790 = _2640;
                    _2791 = _2642;
                    _2792 = _2644;
                    _2793 = _2646;
                    _2794 = _2795;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
        }
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.z;
        uint _2652 = (_2650 >> 8u) & 15u;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        if (((4294967295u << _2652) & _2534) == 0u)
        {
            _2756 = _2635;
            _2758 = _2637;
            _2760 = _2639;
            _2762 = _2641;
            _2764 = _2643;
            _2766 = _2645;
        }
        else
        {
            float _2781 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
            float _2782 = _2781 * _2488;
            float _2783 = _2781 * _2489;
            float _2784 = _2781 * _2490;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2652 < ((_2650 >> 12u) & 15u))
            {
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2916 = _2635;
                float _2917 = _2637;
                float _2918 = _2639;
                float _2919 = _2641;
                float _2920 = _2643;
                float _2921 = _2645;
                uint _2922 = _2652;
                uint _2931;
                bool _2932;
                for (;;)
                {
                    _2931 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                    _2932 = _2931 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2932)
                    {
                        frontier_phi_77_pred = _2921;
                        frontier_phi_77_pred_1 = _2920;
                        frontier_phi_77_pred_2 = _2919;
                        frontier_phi_77_pred_3 = _2918;
                        frontier_phi_77_pred_4 = _2917;
                        frontier_phi_77_pred_5 = _2916;
                    }
                    else
                    {
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        uint _3144 = _2931;
                        uint _3145;
                        vec4 _3170;
                        float _3171;
                        vec4 _3186;
                        vec3 _3198;
                        vec4 _3213;
                        vec4 _3228;
                        float _3274;
                        bool _3275;
                        for (;;)
                        {
                            uint _3155 = ((_2922 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3144));
                            _3145 = (_3144 + 4294967295u) & _3144;
                            uint _3157 = _3155 * 40u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3171 = _3170.w;
                            uint _3173 = (_3155 * 40u) + 4u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3155 * 40u) + 8u;
                            _3198 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x));
                            uint _3200 = (_3155 * 40u) + 16u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3215 = (_3155 * 40u) + 20u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3155 * 40u) + 24u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3249 = (_3155 * 40u) + 28u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3274 = fma(_2490, _3262.z, fma(_2489, _3262.y, _3262.x * _2488)) + _3262.w;
                            _3275 = !((fma(_2490, _3243.z, fma(_2489, _3243.y, _3243.x * _2488)) + _3243.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3275)
                            {
                                float _3302 = _3170.x - _2488;
                                float _3303 = _3170.y - _2489;
                                float _3304 = _3170.z - _2490;
                                float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                                float _3308 = inversesqrt(_3305);
                                float _3309 = _3308 * _3302;
                                float _3310 = _3308 * _3303;
                                float _3311 = _3308 * _3304;
                                float _3315 = 1.0 - (_3305 / (_3171 * _3171));
                                float _4475 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3320 = sqrt(_3305) * _3186.w;
                                float _3322 = 1.39999997615814208984375 / (_3320 + 1.39999997615814208984375);
                                float _3323 = _3322 * _3322;
                                float _3326 = ((1.0 - _3323) * dot(vec3(_3309, _3310, _3311), vec3(_698, _701, _704))) + _3323;
                                float _3329 = _3320 * _3320;
                                float _3333 = (fma(_2490, _3213.z, fma(_2489, _3213.y, _3213.x * _2488)) + _3213.w) / _3274;
                                float _3334 = (fma(_2490, _3228.z, fma(_2489, _3228.y, _3228.x * _2488)) + _3228.w) / _3274;
                                float _3338 = 1.0 - dot(vec2(_3333, _3334), vec2(_3333, _3334));
                                float _4491 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3340 = _3339 * (((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3316) / ((_3329 * 0.699999988079071044921875) + 1.0));
                                float _3352 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                                float _3353 = 1.0 - _773;
                                float _3360 = sqrt(1.0 - ((1.0 - (_3353 * _3353)) * (1.0 - (_3352 * _3352))));
                                float _3361 = _3360 * _3360;
                                float _3362 = _3361 * _3361;
                                float _3363 = _3309 - _2782;
                                float _3364 = _3310 - _2783;
                                float _3365 = _3311 - _2784;
                                float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                                float _3373 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2782, (-0.0) - _2783, (-0.0) - _2784));
                                float _4502 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3377 = dot(vec3(_698, _701, _704), vec3(_3369 * _3363, _3369 * _3364, _3369 * _3365));
                                float _4513 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3384 = ((_3380 * _3380) * (_3362 + (-1.0))) + 1.0;
                                float _3385 = _3322 * _3361;
                                float _3386 = _3385 * _3385;
                                float _3392 = ((1.0 - _3386) * dot(vec3(_698, _701, _704), vec3(_3309, _3310, _3311))) + _3386;
                                float _4524 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3394 = 1.0 - _3361;
                                float _3404 = (0.5 / (((_3393 * ((_3376 * _3394) + _3361)) + 9.9999999392252902907785028219223e-09) + (((_3393 * _3394) + _3361) * _3376))) * _3393;
                                float _4535 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3414 = (_3339 * _3316) * (((_3362 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3384 * _3384) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3340 * _3186.y;
                                frontier_phi_83_pred_1 = _3340 * _3186.x;
                                frontier_phi_83_pred_2 = _3414 * _3198.z;
                                frontier_phi_83_pred_3 = _3414 * _3198.y;
                                frontier_phi_83_pred_4 = _3414 * _3198.x;
                                frontier_phi_83_pred_5 = _3340 * _3186.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3422 = frontier_phi_83_pred;
                            _3421 = frontier_phi_83_pred_1;
                            _3420 = frontier_phi_83_pred_2;
                            _3419 = frontier_phi_83_pred_3;
                            _3418 = frontier_phi_83_pred_4;
                            _3423 = frontier_phi_83_pred_5;
                            _3128 = _3421 + _3141;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            _3125 = _3418 + _3138;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            if (_3145 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3145;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3130;
                        frontier_phi_77_pred_1 = _3129;
                        frontier_phi_77_pred_2 = _3128;
                        frontier_phi_77_pred_3 = _3127;
                        frontier_phi_77_pred_4 = _3126;
                        frontier_phi_77_pred_5 = _3125;
                    }
                    _2767 = frontier_phi_77_pred;
                    _2765 = frontier_phi_77_pred_1;
                    _2763 = frontier_phi_77_pred_2;
                    _2761 = frontier_phi_77_pred_3;
                    _2759 = frontier_phi_77_pred_4;
                    _2757 = frontier_phi_77_pred_5;
                    uint _2923 = _2922 + 1u;
                    if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2916 = _2757;
                        _2917 = _2759;
                        _2918 = _2761;
                        _2919 = _2763;
                        _2920 = _2765;
                        _2921 = _2767;
                        _2922 = _2923;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2761;
                frontier_phi_58_59_ladder_1 = _2767;
                frontier_phi_58_59_ladder_2 = _2765;
                frontier_phi_58_59_ladder_3 = _2763;
                frontier_phi_58_59_ladder_4 = _2759;
                frontier_phi_58_59_ladder_5 = _2757;
            }
            else
            {
                frontier_phi_58_59_ladder = _2639;
                frontier_phi_58_59_ladder_1 = _2645;
                frontier_phi_58_59_ladder_2 = _2643;
                frontier_phi_58_59_ladder_3 = _2641;
                frontier_phi_58_59_ladder_4 = _2637;
                frontier_phi_58_59_ladder_5 = _2635;
            }
            _2756 = frontier_phi_58_59_ladder_5;
            _2758 = frontier_phi_58_59_ladder_4;
            _2760 = frontier_phi_58_59_ladder;
            _2762 = frontier_phi_58_59_ladder_3;
            _2764 = frontier_phi_58_59_ladder_2;
            _2766 = frontier_phi_58_59_ladder_1;
        }
        float _2771 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2547 = (_2771 * _2762) + _1980;
        _2549 = (_2771 * _2764) + _1982;
        _2551 = (_2771 * _2766) + _1984;
        _2553 = ((_2756 * _741) * _2771) + _2328;
        _2555 = ((_2758 * _743) * _2771) + _2330;
        _2557 = ((_2760 * _744) * _2771) + _2332;
    }
    else
    {
        _2547 = _1980;
        _2549 = _1982;
        _2551 = _1984;
        _2553 = _2328;
        _2555 = _2330;
        _2557 = _2332;
    }
    float _4551 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4562 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4573 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2574 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2547 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _757))) + ((_2553 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2575 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2549 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _757))) + ((_2555 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2576 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2551 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _757))) + ((_2557 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    uint _2577 = _258 + 6u;
    float _2585 = _677 / cbSceneParam._m0[86u].x;
    float _2586 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2600 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2602 = _2600.x;
    float _2603 = _2600.y;
    float _2604 = _2600.z;
    float _2605 = _2600.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2660 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2661 = _2660 / _598;
        float _2672 = _2661 * _649;
        float _2673 = _650 * _2661;
        float _2674 = (-0.0) - _2673;
        float _2676 = _2661 * _651;
        float _2678 = (cbSceneParam._m0[77u].w * _2674) / _2660;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2673;
        float _2686 = sqrt(((_2672 * _2672) + (_2673 * _2673)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2660)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2674 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2817 = 1.0 / cbSceneParam._m0[80u].x;
            float _2818 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2819 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            _2873 = ((abs(_2686 / _2674) * cbSceneParam._m0[80u].y) * ((((_2828 - _2829) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))))) * _2817)) - ((exp2(_2696 * _2828) - exp2(_2696 * _2829)) * _2817))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2605);
        _2698 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2602;
        _2700 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2603;
        _2702 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2604;
        _2704 = _2884 * _2605;
    }
    else
    {
        _2698 = _2602;
        _2700 = _2603;
        _2702 = _2604;
        _2704 = _2605;
    }
    bool _2911;
    vec4 _2714;
    vec4 _2736;
    float _2738;
    float _2742;
    float _2743;
    float _2744;
    float _2745;
    bool _2755;
    for (;;)
    {
        _2714 = cbMatDynParam._m0[0u];
        float _2716 = roundEven(_2714.y);
        bool _2717 = _2716 == 3.0;
        float _2718 = log2(_2704);
        float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * _2574;
        float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * _2575;
        float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * _2576;
        float _2734 = _665 + (-0.5);
        _2736 = cbMtdParam._m0[1u];
        _2738 = _2736.y * _2734;
        float _2741 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2742 = _2741 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
        _2743 = _2741 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
        _2744 = _2741 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
        _2745 = _2734 * 0.999000012874603271484375;
        _2755 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2755)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _2745) < 0.5)
            {
                _2911 = true;
                break;
            }
        }
        uint _2852 = _717 + uint(_2714.w);
        if ((cbInstanceData._m0[_2852].w < 1.0) && ((cbInstanceData._m0[_2852].w + _2745) < 0.5))
        {
            _2911 = true;
            break;
        }
        if ((_2738 + 1.0) < _2736.x)
        {
            _2911 = true;
            break;
        }
        _2911 = false;
        break;
    }
    float _3116;
    if (_2911)
    {
        discard_state = true;
        _3116 = 0.0;
    }
    else
    {
        _3116 = cbInstanceData._m0[_2577].w;
    }
    SV_Target.x = _2742;
    SV_Target.y = _2743;
    SV_Target.z = _2744;
    SV_Target.w = _3116;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2577].w;
    discard_exit();
}


