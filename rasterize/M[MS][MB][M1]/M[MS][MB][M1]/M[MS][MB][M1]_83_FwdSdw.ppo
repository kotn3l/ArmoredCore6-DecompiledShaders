#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1197;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3807 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _382) + _455;
    float _467 = ((((_434.x - _453) * _382) + _453) * 2.0) + (-1.0);
    float _468 = ((((_434.y - _454) * _382) + _454) * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3818 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _521 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_507 - _508) * cbMtdParam._m0[24u].z) + _508) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3829 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _529 = (_522 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _530 = (_522 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _531 = (_522 * (cbMtdParam._m0[17u].z - _391)) + _391;
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _559 = _557.x;
    float _577 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _559) * _382) + _559;
    float _581 = ((_543.x - _577) * cbMtdParam._m0[19u].z) + _577;
    float _583 = _581 - (_581 * _522);
    float _588 = (((_409.z - _464) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _464;
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _608 = (_601.x * 2.0) + (-1.0);
    float _609 = (_601.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3840 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _618 = (_522 * (_601.z - _588)) + _588;
    float _623 = _467 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_409.x * 2.0) + (-1.0)));
    float _624 = _468 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_409.y * 2.0) + (-1.0)));
    float _636 = (((_608 - _623) + (cbMtdParam._m0[21u].x * _623)) * _522) + _623;
    float _637 = (((_609 - _624) + (cbMtdParam._m0[21u].x * _624)) * _522) + _624;
    float _638 = (_522 * (sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) - _474)) + _474;
    float _643 = cbMtdParam._m0[22u].x + _487.w;
    float _646 = fma(_638, _231 * NORMAL.x, fma(_637, _238 * TANGENT.x, (_224 * _216) * _636));
    float _649 = fma(_638, _231 * NORMAL.y, fma(_637, _238 * TANGENT.y, (_224 * _217) * _636));
    float _652 = fma(_638, _231 * NORMAL.z, fma(_637, _238 * TANGENT.z, (_224 * _218) * _636));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _3851 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _660 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3873 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3884 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3895 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3906 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _665 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _730 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _720);
    float _731 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _720);
    float _732 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _720);
    float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
    float _737 = _730 * _736;
    float _738 = _731 * _736;
    float _739 = _732 * _736;
    float _745 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _746 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _764 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _767 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _770 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    uint _784 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _790 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_784].x;
    float _791 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_784].y;
    float _792 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_784].z;
    float _3917 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _796 = 1.0 - _665;
    float _797 = _793 * _796;
    float _798 = _794 * _796;
    float _799 = _795 * _796;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _665;
    float _805 = (_794 + (-0.039999999105930328369140625)) * _665;
    float _806 = (_795 + (-0.039999999105930328369140625)) * _665;
    float _807 = _804 + 0.039999999105930328369140625;
    float _809 = _805 + 0.039999999105930328369140625;
    float _810 = _806 + 0.039999999105930328369140625;
    vec4 _819 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _745, cbSceneParam._m0[86u].y * _746));
    float _823 = ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * TEXCOORD_5.w) * _819.x;
    float _824 = dot(vec3(_657, _658, _659), vec3(_737, _738, _739));
    float _827 = _824 * 2.0;
    float _831 = (_827 * _657) - _737;
    float _832 = (_827 * _658) - _738;
    float _833 = (_827 * _659) - _739;
    float _837 = abs(dot(vec3(_737, _738, _739), vec3(_657, _658, _659)));
    float _3950 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = sqrt(_660);
    float _852 = exp2((_839 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_839 * 3.0));
    float _858 = (1.0 - _852) * ((_839 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _859 = _852 * _839;
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _921 = fma(_895, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887));
        float _925 = fma(_895, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887));
        float _929 = fma(_895, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887));
        float _954 = _887 + _657;
        float _955 = _891 + _658;
        float _956 = _895 + _659;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _921;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _925;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _929;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_921 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_925 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_929 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_657, _658, _659), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3998 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_657, _658, _659), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4031 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_657, _658, _659), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4064 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_895, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887));
        float _1240 = fma(_895, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887));
        float _1244 = fma(_895, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887));
        float _1267 = _887 + _657;
        float _1268 = _891 + _658;
        float _1269 = _895 + _659;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_657, _658, _659), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4127 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_657, _658, _659), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4160 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_657, _658, _659), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4193 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1197;
        _1506 = _1197;
        _1507 = _1197;
        _1508 = _1197;
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1210)) + _1210;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1211)) + _1211;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _831 * 0.5;
    float _1574 = _832 * 0.5;
    float _1575 = _833 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _660);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_895, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_895, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_895, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_833, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831));
        float _1704 = fma(_833, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831));
        float _1707 = fma(_833, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1735 = frontier_phi_14_12_ladder;
        }
        float _1907;
        if (_1704 > 0.0)
        {
            _1907 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1907 = frontier_phi_23_19_ladder;
        }
        float _2202;
        if (_1707 > 0.0)
        {
            _2202 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2202 = frontier_phi_35_30_ladder;
        }
        float _2204 = isnan(_1907) ? _1735 : (isnan(_1735) ? _1907 : min(_1735, _1907));
        float _2205 = isnan(_2202) ? _2204 : (isnan(_2204) ? _2202 : min(_2204, _2202));
        float _2209 = (_2205 * _1701) + _1690;
        float _2210 = (_2205 * _1704) + _1694;
        float _2211 = (_2205 * _1707) + _1698;
        float _2212 = _2205 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2212;
        float _2216 = _2212 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 > _2216) || ((_2210 < _2214) || ((_2209 < _2214) || (_2209 > _2216))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2211, cbModelParam._m0[9u].z, fma(_2210, cbModelParam._m0[9u].y, _2209 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2211, cbModelParam._m0[10u].z, fma(_2210, cbModelParam._m0[10u].y, _2209 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2211, cbModelParam._m0[11u].z, fma(_2210, cbModelParam._m0[11u].y, _2209 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_13_35_ladder = _2356.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2356.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2356.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_13_35_ladder_2;
        _1725 = frontier_phi_13_35_ladder_1;
        _1727 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_831, _832, _833), _1642);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _660);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_895, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_895, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_895, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_833, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831));
        float _1800 = fma(_833, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831));
        float _1803 = fma(_833, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831));
        float _1912;
        if (_1797 > 0.0)
        {
            _1912 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1912 = frontier_phi_25_21_ladder;
        }
        float _2229;
        if (_1800 > 0.0)
        {
            _2229 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2229 = frontier_phi_37_32_ladder;
        }
        float _2567;
        if (_1803 > 0.0)
        {
            _2567 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2567 = frontier_phi_47_44_ladder;
        }
        float _2569 = isnan(_2229) ? _1912 : (isnan(_1912) ? _2229 : min(_1912, _2229));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _1797) + _1786;
        float _2575 = (_2570 * _1800) + _1790;
        float _2576 = (_2570 * _1803) + _1794;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2577;
        float _2580 = _2577 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2576 > _2580) || ((_2576 < _2578) || ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 < _2578) || (_2574 > _2580))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2576, cbModelParam._m0[17u].z, fma(_2575, cbModelParam._m0[17u].y, _2574 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2576, cbModelParam._m0[18u].z, fma(_2575, cbModelParam._m0[18u].y, _2574 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2576, cbModelParam._m0[19u].z, fma(_2575, cbModelParam._m0[19u].y, _2574 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_22_47_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_22_47_ladder_2;
        _1824 = frontier_phi_22_47_ladder_1;
        _1826 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_831, _832, _833), _1732);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1839 = (((_858 * _807) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1841 = (((_858 * _809) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1843 = (((_858 * _810) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1899 = _1886 / _1898;
    float _1900 = _1890 / _1898;
    float _1901 = _1894 / _1898;
    float _2048;
    float _2049;
    float _2050;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1928 = ((uint(_1901 > cbSceneParam._m0[59u].y) + uint(_1901 > cbSceneParam._m0[59u].x)) + uint(_1901 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1929 = _1928 + 43u;
        uint _1937 = _1928 + 44u;
        uint _1945 = _1928 + 45u;
        uint _1953 = _1928 + 46u;
        float _1964 = fma(_1898, cbSceneParam._m0[_1929].w, fma(_1894, cbSceneParam._m0[_1929].z, fma(_1890, cbSceneParam._m0[_1929].y, _1886 * cbSceneParam._m0[_1929].x)));
        float _1968 = fma(_1898, cbSceneParam._m0[_1937].w, fma(_1894, cbSceneParam._m0[_1937].z, fma(_1890, cbSceneParam._m0[_1937].y, _1886 * cbSceneParam._m0[_1937].x)));
        float _1976 = fma(_1898, cbSceneParam._m0[_1953].w, fma(_1894, cbSceneParam._m0[_1953].z, fma(_1890, cbSceneParam._m0[_1953].y, _1886 * cbSceneParam._m0[_1953].x)));
        float _1981 = cbSceneParam._m0[33u].z * _1976;
        float _1983 = cbSceneParam._m0[33u].w * _1976;
        float _1986 = fma(_1898, cbSceneParam._m0[_1945].w, fma(_1894, cbSceneParam._m0[_1945].z, fma(_1890, cbSceneParam._m0[_1945].y, _1886 * cbSceneParam._m0[_1945].x))) / _1976;
        float _2034 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
        float _4319 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2041 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 + _1964) / _1976, (_1983 + _1968) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 + _1964) / _1976, (_1968 - _1981) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1981) / _1976, (_1968 - _1983) / _1976), _1986), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 - _1983) / _1976, (_1981 + _1968) / _1976), _1986), 0.0)).x), vec4(0.25)));
        _2048 = 1.0 - (_2041 * cbSceneParam._m0[34u].x);
        _2049 = 1.0 - (_2041 * cbSceneParam._m0[34u].y);
        _2050 = 1.0 - (_2041 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2048 = 1.0;
        _2049 = 1.0;
        _2050 = 1.0;
    }
    float _2114;
    float _2116;
    float _2118;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2102 = fma(_1898, cbSceneParam._m0[63u].w, fma(_1894, cbSceneParam._m0[63u].z, fma(_1890, cbSceneParam._m0[63u].y, _1886 * cbSceneParam._m0[63u].x)));
        float _2103 = fma(_1898, cbSceneParam._m0[60u].w, fma(_1894, cbSceneParam._m0[60u].z, fma(_1890, cbSceneParam._m0[60u].y, _1886 * cbSceneParam._m0[60u].x))) / _2102;
        float _2104 = fma(_1898, cbSceneParam._m0[61u].w, fma(_1894, cbSceneParam._m0[61u].z, fma(_1890, cbSceneParam._m0[61u].y, _1886 * cbSceneParam._m0[61u].x))) / _2102;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2103 >= cbSceneParam._m0[64u].x) && (_2104 >= cbSceneParam._m0[64u].y)) && (_2103 <= cbSceneParam._m0[64u].z)) && (_2104 <= cbSceneParam._m0[64u].w))
        {
            float _2242 = fma(_1898, cbSceneParam._m0[62u].w, fma(_1894, cbSceneParam._m0[62u].z, fma(_1890, cbSceneParam._m0[62u].y, _1886 * cbSceneParam._m0[62u].x))) / _2102;
            float _2246 = isnan(cbSceneParam._m0[41u].w) ? _2242 : (isnan(_2242) ? cbSceneParam._m0[41u].w : max(_2242, cbSceneParam._m0[41u].w));
            float _2289 = (cbSceneParam._m0[33u].x - sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901))) * cbSceneParam._m0[33u].y;
            float _4335 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
            float _2296 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2103, cbSceneParam._m0[33u].w + _2104), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2103, _2104 - cbSceneParam._m0[33u].z), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].z, _2104 - cbSceneParam._m0[33u].w), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2103 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2104), _2246), 0.0)).x), vec4(0.25)));
            float _2300 = 1.0 - (_2296 * cbSceneParam._m0[34u].x);
            float _2301 = 1.0 - (_2296 * cbSceneParam._m0[34u].y);
            float _2302 = 1.0 - (_2296 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2302) ? _2050 : (isnan(_2050) ? _2302 : min(_2050, _2302));
            frontier_phi_34_33_ladder_1 = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
            frontier_phi_34_33_ladder_2 = isnan(_2300) ? _2048 : (isnan(_2048) ? _2300 : min(_2048, _2300));
        }
        else
        {
            frontier_phi_34_33_ladder = _2050;
            frontier_phi_34_33_ladder_1 = _2049;
            frontier_phi_34_33_ladder_2 = _2048;
        }
        _2114 = frontier_phi_34_33_ladder_2;
        _2116 = frontier_phi_34_33_ladder_1;
        _2118 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2114 = _2048;
        _2116 = _2049;
        _2118 = _2050;
    }
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2133 = _823 + (-1.0);
    float _2138 = (cbLight._m0[_2126].x * _2133) + 1.0;
    float _2139 = (cbLight._m0[_2126].y * _2133) + 1.0;
    float _2140 = (cbLight._m0[_2126].z * _2133) + 1.0;
    float _2141 = (cbLight._m0[_2126].w * _2133) + 1.0;
    uint _2142 = _2125 + 5u;
    float _2148 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2152 = _2125 + 4u;
    float _2161 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2165 = _2125 | 1u;
    float _2176 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_657, _658, _659));
    float _2179 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_657, _658, _659));
    float _4371 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _4382 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2186 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2193 = ((cbLight._m0[_2142].x * _2148) * _2186) + (((cbLight._m0[_2152].x * _2114) * _2161) * _2184);
    float _2194 = ((_2148 * cbLight._m0[_2142].y) * _2186) + (((cbLight._m0[_2152].y * _2116) * _2161) * _2184);
    float _2195 = ((_2148 * cbLight._m0[_2142].z) * _2186) + (((cbLight._m0[_2152].z * _2118) * _2161) * _2184);
    uvec4 _2199 = floatBitsToUint(cbLight._m0[_2125 + 12u]);
    bool _2201 = _2199.x == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2201)
    {
        _2303 = _2193;
        _2305 = _2194;
        _2307 = _2195;
    }
    else
    {
        uint _2311 = _2125 + 6u;
        float _2327 = (dot(vec3(cbLight._m0[_2125 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4393 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2330 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2303 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2193;
        _2305 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2194;
        _2307 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2195;
    }
    bool _2310 = _2199.y == 0u;
    float _2365;
    float _2367;
    float _2369;
    if (_2310)
    {
        _2365 = _2303;
        _2367 = _2305;
        _2369 = _2307;
    }
    else
    {
        uint _2538 = _2125 + 7u;
        float _2554 = (dot(vec3(cbLight._m0[_2125 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4409 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2557 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2365 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2303;
        _2367 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2305;
        _2369 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2307;
    }
    uint _2372 = _2125 + 8u;
    float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _660) * 0.949999988079071044921875);
    float _2386 = _2385 * _2385;
    float _2387 = cbLight._m0[_2125].x + _737;
    float _2388 = cbLight._m0[_2125].y + _738;
    float _2389 = cbLight._m0[_2125].z + _739;
    float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
    float _2394 = _2393 * _2387;
    float _2395 = _2393 * _2388;
    float _2396 = _2393 * _2389;
    float _2397 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2125].xyz));
    float _4425 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2401 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2402 = dot(vec3(_657, _658, _659), vec3(_2394, _2395, _2396));
    float _4447 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2394, _2395, _2396));
    float _4458 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2386 * _2386;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2423 = 0.959999978542327880859375 - _804;
    float _2425 = 0.959999978542327880859375 - _805;
    float _2426 = 0.959999978542327880859375 - _806;
    float _2433 = 1.0 - _2386;
    float _2444 = (0.5 / (((_2401 * ((_2400 * _2433) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2433) + _2386) * _2400))) * _2400;
    float _4469 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    uint _2460 = _2125 + 9u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _660) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2165].x + _737;
    float _2474 = cbLight._m0[_2165].y + _738;
    float _2475 = cbLight._m0[_2165].z + _739;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2165].xyz));
    float _4480 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2487 = dot(vec3(_657, _658, _659), vec3(_2480, _2481, _2482));
    float _4491 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2480, _2481, _2482));
    float _4502 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2472 * _2472;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
    float _2513 = 1.0 - _2472;
    float _2523 = (0.5 / (((_2401 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2513) + _2472) * _2486))) * _2486;
    float _4513 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    float _2535 = (((((_2506 * _2423) + _807) * cbLight._m0[_2460].x) * _2525) * _2148) + ((((cbLight._m0[_2372].x * _2114) * ((_2422 * _2423) + _807)) * _2446) * _2161);
    float _2536 = (((((_2506 * _2425) + _809) * cbLight._m0[_2460].y) * _2525) * _2148) + ((((cbLight._m0[_2372].y * _2116) * ((_2422 * _2425) + _809)) * _2446) * _2161);
    float _2537 = (((((_2506 * _2426) + _810) * cbLight._m0[_2460].z) * _2525) * _2148) + ((((cbLight._m0[_2372].z * _2118) * ((_2422 * _2426) + _810)) * _2446) * _2161);
    float _2593;
    float _2595;
    float _2597;
    if (_2201)
    {
        _2593 = _2535;
        _2595 = _2536;
        _2597 = _2537;
    }
    else
    {
        uint _2599 = _2125 + 2u;
        uint _2603 = _2125 + 10u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _660) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _737;
        float _2620 = cbLight._m0[_2599].y + _738;
        float _2621 = cbLight._m0[_2599].z + _739;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2599].xyz));
        float _4524 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2633 = dot(vec3(_657, _658, _659), vec3(_2626, _2627, _2628));
        float _4535 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4546 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2659 = 1.0 - _2618;
        float _2669 = (0.5 / (((_2401 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2659) + _2618) * _2632))) * _2632;
        float _4557 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2593 = (((((_2652 * _2423) + _807) * cbLight._m0[_2603].x) * _2671) * _2672) + _2535;
        _2595 = (((((_2652 * _2425) + _809) * cbLight._m0[_2603].y) * _2671) * _2672) + _2536;
        _2597 = (((((_2652 * _2426) + _810) * cbLight._m0[_2603].z) * _2671) * _2672) + _2537;
    }
    float _2703;
    float _2705;
    float _2707;
    if (_2310)
    {
        _2703 = _2593;
        _2705 = _2595;
        _2707 = _2597;
    }
    else
    {
        uint _2714 = _2125 + 3u;
        uint _2718 = _2125 + 11u;
        float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2714].w)) * _660) * 0.949999988079071044921875);
        float _2733 = _2732 * _2732;
        float _2734 = cbLight._m0[_2714].x + _737;
        float _2735 = cbLight._m0[_2714].y + _738;
        float _2736 = cbLight._m0[_2714].z + _739;
        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
        float _2741 = _2740 * _2734;
        float _2742 = _2740 * _2735;
        float _2743 = _2740 * _2736;
        float _2744 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2714].xyz));
        float _4573 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2748 = dot(vec3(_657, _658, _659), vec3(_2741, _2742, _2743));
        float _4584 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2752 = dot(vec3(cbLight._m0[_2714].xyz), vec3(_2741, _2742, _2743));
        float _4595 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2756 = _2733 * _2733;
        float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
        float _2767 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2774 = 1.0 - _2733;
        float _2784 = (0.5 / (((_2401 * ((_2747 * _2774) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2774) + _2733) * _2747))) * _2747;
        float _4606 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2786 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
        float _2787 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2703 = (((((_2767 * _2423) + _807) * cbLight._m0[_2718].x) * _2786) * _2787) + _2593;
        _2705 = (((((_2767 * _2425) + _809) * cbLight._m0[_2718].y) * _2786) * _2787) + _2595;
        _2707 = (((((_2767 * _2426) + _810) * cbLight._m0[_2718].z) * _2786) * _2787) + _2597;
    }
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_2123.y == 0u)
    {
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.x;
        uint _2820 = uint((float(_2808.y) * floor(float(uint(cbSceneParam._m0[85u].y * _746) / _2809))) + floor(float(uint(cbSceneParam._m0[85u].x * _745) / _2809)));
        float _2830 = (log2(_1901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2831 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        uint _2834 = uint(isnan(14.0) ? _2831 : (isnan(_2831) ? 14.0 : min(_2831, 14.0)));
        uvec4 _2839 = texelFetch(g_lightClusterGridBuffer, int(((_2834 << 2u) + (_2820 << 6u)) >> 2u));
        uint _2840 = _2839.x;
        uint _2841 = _2808.z;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((((1u << ((_2841 >> 4u) & 15u)) + 4294967295u) & _2840) == 0u) || ((_2841 & 240u) == 0u))
        {
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
        }
        else
        {
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            uint _3071 = 0u;
            uint _3080;
            bool _3081;
            for (;;)
            {
                _3080 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                _3081 = _3080 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3081)
                {
                    frontier_phi_66_pred = _3070;
                    frontier_phi_66_pred_1 = _3069;
                    frontier_phi_66_pred_2 = _3068;
                    frontier_phi_66_pred_3 = _3067;
                    frontier_phi_66_pred_4 = _3066;
                    frontier_phi_66_pred_5 = _3065;
                }
                else
                {
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    uint _3195;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3080;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    for (;;)
                    {
                        uint _3199 = uint(findLSB(_3195)) + (_3071 << 5u);
                        uint _3196 = (_3195 + 4294967295u) & _3195;
                        uint _3201 = _3199 * 48u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3221 = (_3199 * 48u) + 4u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3240 = (_3199 * 48u) + 8u;
                        vec3 _3251 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x));
                        float _3255 = _3215.x - _1899;
                        float _3256 = _3215.y - _1900;
                        float _3257 = _3215.z - _1901;
                        float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                        float _3261 = inversesqrt(_3258);
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3265 = dot(vec3(_764, _767, _770), vec3(_3262, _3263, _3264));
                        float _3270 = 1.0 - (_3258 * _3215.w);
                        float _4632 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3272 = sqrt(_3258) * _3234.w;
                        float _3275 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3265) + _3276;
                        float _3282 = _3272 * _3272;
                        float _3286 = ((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3271) / ((_3282 * 0.699999988079071044921875) + 1.0);
                        float _3290 = (-0.0) - _1899;
                        float _3291 = (-0.0) - _1900;
                        float _3292 = (-0.0) - _1901;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3306 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                        float _3307 = 1.0 - _839;
                        float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                        float _3315 = _3314 * _3314;
                        float _3316 = _3315 * _3315;
                        float _3317 = _3297 + _3262;
                        float _3318 = _3298 + _3263;
                        float _3319 = _3299 + _3264;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3327 = dot(vec3(_764, _767, _770), vec3(_3297, _3298, _3299));
                        float _4648 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3331 = dot(vec3(_764, _767, _770), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                        float _4659 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                        float _3339 = _3275 * _3315;
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3265) + _3340;
                        float _4670 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3345 = 1.0 - _3315;
                        float _3355 = (0.5 / (((_3344 * ((_3330 * _3345) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3315) * _3330))) * _3344;
                        float _4681 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3366 = (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3338 * _3338) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125))) * _3271;
                        _3124 = (_3286 * _3234.x) + _3192;
                        _3125 = (_3286 * _3234.y) + _3193;
                        _3126 = (_3286 * _3234.z) + _3194;
                        _3121 = (_3366 * _3251.x) + _3189;
                        _3122 = (_3366 * _3251.y) + _3190;
                        _3123 = (_3366 * _3251.z) + _3191;
                        if (_3196 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3196;
                        }
                    }
                    frontier_phi_66_pred = _3126;
                    frontier_phi_66_pred_1 = _3125;
                    frontier_phi_66_pred_2 = _3124;
                    frontier_phi_66_pred_3 = _3123;
                    frontier_phi_66_pred_4 = _3122;
                    frontier_phi_66_pred_5 = _3121;
                }
                _2931 = frontier_phi_66_pred;
                _2929 = frontier_phi_66_pred_1;
                _2927 = frontier_phi_66_pred_2;
                _2925 = frontier_phi_66_pred_3;
                _2923 = frontier_phi_66_pred_4;
                _2921 = frontier_phi_66_pred_5;
                uint _3072 = _3071 + 1u;
                if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3065 = _2921;
                    _3066 = _2923;
                    _3067 = _2925;
                    _3068 = _2927;
                    _3069 = _2929;
                    _3070 = _2931;
                    _3071 = _3072;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
        }
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.z;
        uint _2937 = (_2935 >> 8u) & 15u;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((4294967295u << _2937) & _2840) == 0u)
        {
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
            _3039 = _2926;
            _3041 = _2928;
            _3043 = _2930;
        }
        else
        {
            float _3058 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
            float _3059 = _3058 * _1899;
            float _3060 = _3058 * _1900;
            float _3061 = _3058 * _1901;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2937 < ((_2935 >> 12u) & 15u))
            {
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3172 = _2920;
                float _3173 = _2922;
                float _3174 = _2924;
                float _3175 = _2926;
                float _3176 = _2928;
                float _3177 = _2930;
                uint _3178 = _2937;
                uint _3187;
                bool _3188;
                for (;;)
                {
                    _3187 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                    _3188 = _3187 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3188)
                    {
                        frontier_phi_72_pred = _3177;
                        frontier_phi_72_pred_1 = _3176;
                        frontier_phi_72_pred_2 = _3175;
                        frontier_phi_72_pred_3 = _3174;
                        frontier_phi_72_pred_4 = _3173;
                        frontier_phi_72_pred_5 = _3172;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3384 = _3172;
                        float _3385 = _3173;
                        float _3386 = _3174;
                        float _3387 = _3175;
                        float _3388 = _3176;
                        float _3389 = _3177;
                        uint _3390 = _3187;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3459;
                        vec4 _3474;
                        float _3520;
                        bool _3521;
                        for (;;)
                        {
                            uint _3401 = ((_3178 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3446 = (_3401 * 40u) + 16u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3401 * 40u) + 20u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3401 * 40u) + 24u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3495 = (_3401 * 40u) + 28u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3520 = fma(_1901, _3508.z, fma(_1900, _3508.y, _3508.x * _1899)) + _3508.w;
                            _3521 = !((fma(_1901, _3489.z, fma(_1900, _3489.y, _3489.x * _1899)) + _3489.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3521)
                            {
                                float _3548 = _3416.x - _1899;
                                float _3549 = _3416.y - _1900;
                                float _3550 = _3416.z - _1901;
                                float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                                float _3554 = inversesqrt(_3551);
                                float _3555 = _3554 * _3548;
                                float _3556 = _3554 * _3549;
                                float _3557 = _3554 * _3550;
                                float _3561 = 1.0 - (_3551 / (_3417 * _3417));
                                float _4692 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3566 = sqrt(_3551) * _3432.w;
                                float _3568 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                                float _3569 = _3568 * _3568;
                                float _3572 = ((1.0 - _3569) * dot(vec3(_3555, _3556, _3557), vec3(_764, _767, _770))) + _3569;
                                float _3575 = _3566 * _3566;
                                float _3579 = (fma(_1901, _3459.z, fma(_1900, _3459.y, _3459.x * _1899)) + _3459.w) / _3520;
                                float _3580 = (fma(_1901, _3474.z, fma(_1900, _3474.y, _3474.x * _1899)) + _3474.w) / _3520;
                                float _3584 = 1.0 - dot(vec2(_3579, _3580), vec2(_3579, _3580));
                                float _4708 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3586 = _3585 * (((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3562) / ((_3575 * 0.699999988079071044921875) + 1.0));
                                float _3598 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                                float _3599 = 1.0 - _839;
                                float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                                float _3607 = _3606 * _3606;
                                float _3608 = _3607 * _3607;
                                float _3609 = _3555 - _3059;
                                float _3610 = _3556 - _3060;
                                float _3611 = _3557 - _3061;
                                float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                                float _3619 = dot(vec3(_764, _767, _770), vec3((-0.0) - _3059, (-0.0) - _3060, (-0.0) - _3061));
                                float _4719 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3623 = dot(vec3(_764, _767, _770), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                                float _4730 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                                float _3631 = _3568 * _3607;
                                float _3632 = _3631 * _3631;
                                float _3638 = ((1.0 - _3632) * dot(vec3(_764, _767, _770), vec3(_3555, _3556, _3557))) + _3632;
                                float _4741 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3640 = 1.0 - _3607;
                                float _3650 = (0.5 / (((_3639 * ((_3622 * _3640) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3607) * _3622))) * _3639;
                                float _4752 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3660 = (_3585 * _3562) * (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3630 * _3630) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3586 * _3432.y;
                                frontier_phi_78_pred_1 = _3586 * _3432.x;
                                frontier_phi_78_pred_2 = _3660 * _3444.z;
                                frontier_phi_78_pred_3 = _3660 * _3444.y;
                                frontier_phi_78_pred_4 = _3660 * _3444.x;
                                frontier_phi_78_pred_5 = _3586 * _3432.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3668 = frontier_phi_78_pred;
                            _3667 = frontier_phi_78_pred_1;
                            _3666 = frontier_phi_78_pred_2;
                            _3665 = frontier_phi_78_pred_3;
                            _3664 = frontier_phi_78_pred_4;
                            _3669 = frontier_phi_78_pred_5;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3376;
                        frontier_phi_72_pred_1 = _3375;
                        frontier_phi_72_pred_2 = _3374;
                        frontier_phi_72_pred_3 = _3373;
                        frontier_phi_72_pred_4 = _3372;
                        frontier_phi_72_pred_5 = _3371;
                    }
                    _3044 = frontier_phi_72_pred;
                    _3042 = frontier_phi_72_pred_1;
                    _3040 = frontier_phi_72_pred_2;
                    _3038 = frontier_phi_72_pred_3;
                    _3036 = frontier_phi_72_pred_4;
                    _3034 = frontier_phi_72_pred_5;
                    uint _3179 = _3178 + 1u;
                    if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3172 = _3034;
                        _3173 = _3036;
                        _3174 = _3038;
                        _3175 = _3040;
                        _3176 = _3042;
                        _3177 = _3044;
                        _3178 = _3179;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3044;
                frontier_phi_60_61_ladder_1 = _3042;
                frontier_phi_60_61_ladder_2 = _3038;
                frontier_phi_60_61_ladder_3 = _3036;
                frontier_phi_60_61_ladder_4 = _3034;
                frontier_phi_60_61_ladder_5 = _3040;
            }
            else
            {
                frontier_phi_60_61_ladder = _2930;
                frontier_phi_60_61_ladder_1 = _2928;
                frontier_phi_60_61_ladder_2 = _2924;
                frontier_phi_60_61_ladder_3 = _2922;
                frontier_phi_60_61_ladder_4 = _2920;
                frontier_phi_60_61_ladder_5 = _2926;
            }
            _3033 = frontier_phi_60_61_ladder_4;
            _3035 = frontier_phi_60_61_ladder_3;
            _3037 = frontier_phi_60_61_ladder_2;
            _3039 = frontier_phi_60_61_ladder_5;
            _3041 = frontier_phi_60_61_ladder_1;
            _3043 = frontier_phi_60_61_ladder;
        }
        float _3048 = isnan(1.0) ? _823 : (isnan(_823) ? 1.0 : min(_823, 1.0));
        _2853 = (_3048 * _3039) + _2365;
        _2855 = (_3048 * _3041) + _2367;
        _2857 = (_3048 * _3043) + _2369;
        _2859 = ((_3033 * _807) * _3048) + _2703;
        _2861 = ((_3035 * _809) * _3048) + _2705;
        _2863 = ((_3037 * _810) * _3048) + _2707;
    }
    else
    {
        _2853 = _2365;
        _2855 = _2367;
        _2857 = _2369;
        _2859 = _2703;
        _2861 = _2705;
        _2863 = _2707;
    }
    float _4768 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4779 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4790 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    uint _2883 = _244 + 6u;
    float _2891 = _745 / cbSceneParam._m0[86u].x;
    float _2892 = _746 / cbSceneParam._m0[86u].y;
    vec4 _2906 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2891, _2892, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2908 = _2906.x;
    float _2909 = _2906.y;
    float _2910 = _2906.z;
    float _2911 = _2906.w;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2945 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2946 = _2945 / _679;
        float _2957 = _2946 * _730;
        float _2958 = _731 * _2946;
        float _2959 = (-0.0) - _2958;
        float _2961 = _2946 * _732;
        float _2963 = (cbSceneParam._m0[77u].w * _2959) / _2945;
        float _2964 = _2963 + cbSceneParam._m0[79u].w;
        float _2965 = cbSceneParam._m0[79u].w - _2958;
        float _2971 = sqrt(((_2957 * _2957) + (_2958 * _2958)) + (_2961 * _2961));
        float _2974 = (1.0 - (cbSceneParam._m0[77u].w / _2945)) * _2971;
        float _2979 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2981 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3134;
        if (abs((_2959 - _2963) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3134 = ((((_2964 > 0.0) ? exp2(_2979 * _2964) : (2.0 - exp2(_2981 * _2964))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2974;
        }
        else
        {
            float _3094 = 1.0 / cbSceneParam._m0[80u].x;
            float _3095 = isnan(_2965) ? _2964 : (isnan(_2964) ? _2965 : max(_2964, _2965));
            float _3096 = isnan(_2965) ? _2964 : (isnan(_2964) ? _2965 : min(_2964, _2965));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            _3134 = ((abs(_2971 / _2959) * cbSceneParam._m0[80u].y) * ((((_3105 - _3106) * 2.0) - ((exp2(_2979 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0)))) - exp2(_2979 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))))) * _3094)) - ((exp2(_2981 * _3105) - exp2(_2981 * _3106)) * _3094))) + (_2974 * cbSceneParam._m0[80u].z);
        }
        vec4 _3136 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2891, _2892, 1.0), 0.0);
        float _3145 = exp2((_3134 * (-1.44269502162933349609375)) * (1.0 - _3136.w));
        float _3146 = log2(_3145);
        float _3162 = log2(_2911);
        _2983 = (exp2(_3162 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].x)) * _3136.x) / cbSceneParam._m0[78u].x)) + _2908;
        _2985 = (exp2(_3162 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].y)) * _3136.y) / cbSceneParam._m0[78u].y)) + _2909;
        _2987 = (exp2(_3162 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].z)) * _3136.z) / cbSceneParam._m0[78u].z)) + _2910;
        _2989 = _3145 * _2911;
    }
    else
    {
        _2983 = _2908;
        _2985 = _2909;
        _2987 = _2910;
        _2989 = _2911;
    }
    float _3001 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3002 = _3001 == 3.0;
    float _3003 = log2(_2989);
    float _3010 = exp2(_3003 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2853 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _823))) + ((_2859 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3011 = exp2(_3003 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2855 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _823))) + ((_2861 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3012 = exp2(_3003 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2857 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _823))) + ((_2863 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3021 = (_3001 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3021 * (_3002 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2983)));
    SV_Target.y = _3021 * (_3002 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.z = _3021 * (_3002 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2987)));
    SV_Target.w = cbInstanceData._m0[_2883].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2883].w;
}


