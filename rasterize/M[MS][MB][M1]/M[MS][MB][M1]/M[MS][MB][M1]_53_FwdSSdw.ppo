#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1041;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3393 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))));
    float _332 = fma(_329, _212, fma(_322, _219, _320 * _205));
    float _335 = fma(_329, _213, fma(_322, _220, _320 * _206));
    float _338 = fma(_329, _214, fma(_322, _221, _320 * _207));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _380 = _378.x;
    float _381 = 1.0 - _380;
    float _388 = ((_380 - _381) * cbMtdParam._m0[24u].z) + _381;
    float _390 = (cbMtdParam._m0[19u].x + dot(vec4(_342 * _332, _342 * _335, _342 * _338, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_388 * cbMtdParam._m0[21u].z);
    float _3404 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _406 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_388 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3415 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _411 = ((_391 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) * _407) + _270;
    float _412 = ((_391 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) * _407) + _271;
    float _413 = ((_391 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) * _407) + _272;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _428 = _426.x;
    float _431 = _428 - ((_428 * _391) * _407);
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _451 = (_444.x * 2.0) + (-1.0);
    float _452 = (_444.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3426 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _462 = (((_444.z - _315) * _391) * _407) + _315;
    float _477 = (((cbMtdParam._m0[21u].x * _320) + ((_451 - _320) * _391)) * _407) + _320;
    float _478 = (((cbMtdParam._m0[21u].x * _322) + ((_452 - _322) * _391)) * _407) + _322;
    float _479 = (((sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) - _329) * _391) * _407) + _329;
    float _484 = cbMtdParam._m0[22u].x + _311.w;
    float _487 = fma(_479, _212, fma(_478, _219, _477 * _205));
    float _490 = fma(_479, _213, fma(_478, _220, _477 * _206));
    float _493 = fma(_479, _214, fma(_478, _221, _477 * _207));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3437 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _501 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3459 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3470 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3481 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3492 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _506 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _608 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _611 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _614 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _628 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _634 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_628].x;
    float _635 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_628].y;
    float _636 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_628].z;
    float _3503 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _640 = 1.0 - _506;
    float _641 = _637 * _640;
    float _642 = _638 * _640;
    float _643 = _639 * _640;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _506;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _506;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _506;
    float _651 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    float _654 = _650 + 0.039999999105930328369140625;
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _667 = ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * TEXCOORD_5.w) * _663.x;
    float _668 = dot(vec3(_498, _499, _500), vec3(_578, _579, _580));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _498) - _578;
    float _676 = (_671 * _499) - _579;
    float _677 = (_671 * _500) - _580;
    float _681 = abs(dot(vec3(_578, _579, _580), vec3(_498, _499, _500)));
    float _3536 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = sqrt(_501);
    float _696 = exp2((_683 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _702 = (1.0 - _696) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _703 = _696 * _683;
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _769 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _773 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _798 = _731 + _498;
        float _799 = _735 + _499;
        float _800 = _739 + _500;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _765;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _769;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _773;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_498, _499, _500), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3584 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_498, _499, _500), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3617 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_498, _499, _500), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3650 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1084 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1088 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1111 = _731 + _498;
        float _1112 = _735 + _499;
        float _1113 = _739 + _500;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_498, _499, _500), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3713 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_498, _499, _500), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3746 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_498, _499, _500), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3779 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1041;
        _1350 = _1041;
        _1351 = _1041;
        _1352 = _1041;
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1053)) + _1053;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1054)) + _1054;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1055)) + _1055;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _675 * 0.5;
    float _1418 = _676 * 0.5;
    float _1419 = _677 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1460;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1471;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1462 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1475 = (_1471 * cbModelParam._m0[1u].x) + (_1460 * (1.0 - cbModelParam._m0[1u].x));
    float _1485 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1485 : min(cbModelParam._m0[25u].z, _1485));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1547 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1550 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1578 = frontier_phi_14_12_ladder;
        }
        float _1802;
        if (_1547 > 0.0)
        {
            _1802 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1802 = frontier_phi_23_19_ladder;
        }
        float _2059;
        if (_1550 > 0.0)
        {
            _2059 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2059 = frontier_phi_35_30_ladder;
        }
        float _2061 = isnan(_1802) ? _1578 : (isnan(_1578) ? _1802 : min(_1578, _1802));
        float _2062 = isnan(_2059) ? _2061 : (isnan(_2061) ? _2059 : min(_2061, _2059));
        float _2066 = (_2062 * _1544) + _1533;
        float _2067 = (_2062 * _1547) + _1537;
        float _2068 = (_2062 * _1550) + _1541;
        float _2069 = _2062 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2069;
        float _2073 = _2069 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 > _2073) || ((_2067 < _2071) || ((_2066 < _2071) || (_2066 > _2073))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2068, cbModelParam._m0[9u].z, fma(_2067, cbModelParam._m0[9u].y, _2066 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2068, cbModelParam._m0[10u].z, fma(_2067, cbModelParam._m0[10u].y, _2066 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2068, cbModelParam._m0[11u].z, fma(_2067, cbModelParam._m0[11u].y, _2066 * cbModelParam._m0[11u].x))), _1486);
            frontier_phi_13_35_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_13_35_ladder_2;
        _1568 = frontier_phi_13_35_ladder_1;
        _1570 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1486);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1642 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1645 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1807;
        if (_1639 > 0.0)
        {
            _1807 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1807 = frontier_phi_25_21_ladder;
        }
        float _2086;
        if (_1642 > 0.0)
        {
            _2086 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2086 = frontier_phi_37_32_ladder;
        }
        float _2299;
        if (_1645 > 0.0)
        {
            _2299 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2299 = frontier_phi_46_43_ladder;
        }
        float _2301 = isnan(_2086) ? _1807 : (isnan(_1807) ? _2086 : min(_1807, _2086));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1639) + _1628;
        float _2307 = (_2302 * _1642) + _1632;
        float _2308 = (_2302 * _1645) + _1636;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_22_46_ladder = _2507.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2507.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2507.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_22_46_ladder_2;
        _1666 = frontier_phi_22_46_ladder_1;
        _1668 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1575);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1681 = (((_702 * _651) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1664 - _1566)) + _1566);
    float _1683 = (((_702 * _653) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1685 = (((_702 * _654) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    vec4 _1702 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_586, _587));
    float _1704 = _1702.w;
    float _1716 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1704);
    float _1717 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1704);
    float _1718 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1704);
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1732 = _667 + (-1.0);
    float _1737 = (cbLight._m0[_1725].x * _1732) + 1.0;
    float _1738 = (cbLight._m0[_1725].y * _1732) + 1.0;
    float _1739 = (cbLight._m0[_1725].z * _1732) + 1.0;
    float _1740 = (cbLight._m0[_1725].w * _1732) + 1.0;
    uint _1741 = _1724 + 5u;
    float _1747 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1751 = _1724 + 4u;
    float _1761 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1765 = _1724 | 1u;
    float _1776 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_498, _499, _500));
    float _1779 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_498, _499, _500));
    float _3915 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _3926 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1784 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1786 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1793 = ((cbLight._m0[_1741].x * _1747) * _1786) + (((cbLight._m0[_1751].x * _1716) * _1761) * _1784);
    float _1794 = ((_1747 * cbLight._m0[_1741].y) * _1786) + (((cbLight._m0[_1751].y * _1717) * _1761) * _1784);
    float _1795 = ((_1747 * cbLight._m0[_1741].z) * _1786) + (((cbLight._m0[_1751].z * _1718) * _1761) * _1784);
    uvec4 _1799 = floatBitsToUint(cbLight._m0[_1724 + 12u]);
    bool _1801 = _1799.x == 0u;
    float _1812;
    float _1814;
    float _1816;
    if (_1801)
    {
        _1812 = _1793;
        _1814 = _1794;
        _1816 = _1795;
    }
    else
    {
        uint _1820 = _1724 + 6u;
        float _1836 = (dot(vec3(cbLight._m0[_1724 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _1837 = _1836 * _1836;
        float _3937 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1839 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1812 = (((cbLight._m0[_1820].x * 0.3183098733425140380859375) * _1838) * _1839) + _1793;
        _1814 = (((cbLight._m0[_1820].y * 0.3183098733425140380859375) * _1838) * _1839) + _1794;
        _1816 = (((cbLight._m0[_1820].z * 0.3183098733425140380859375) * _1838) * _1839) + _1795;
    }
    bool _1819 = _1799.y == 0u;
    float _1857;
    float _1859;
    float _1861;
    if (_1819)
    {
        _1857 = _1812;
        _1859 = _1814;
        _1861 = _1816;
    }
    else
    {
        uint _2030 = _1724 + 7u;
        float _2046 = (dot(vec3(cbLight._m0[_1724 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _3953 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2049 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1857 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _1812;
        _1859 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _1814;
        _1861 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _1816;
    }
    uint _1864 = _1724 + 8u;
    float _1877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _501) * 0.949999988079071044921875);
    float _1878 = _1877 * _1877;
    float _1879 = cbLight._m0[_1724].x + _578;
    float _1880 = cbLight._m0[_1724].y + _579;
    float _1881 = cbLight._m0[_1724].z + _580;
    float _1885 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
    float _1886 = _1885 * _1879;
    float _1887 = _1885 * _1880;
    float _1888 = _1885 * _1881;
    float _1889 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1724].xyz));
    float _3969 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _1893 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1894 = dot(vec3(_498, _499, _500), vec3(_1886, _1887, _1888));
    float _3991 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1898 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1886, _1887, _1888));
    float _4002 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1902 = _1878 * _1878;
    float _1906 = ((_1897 * _1897) * (_1902 + (-1.0))) + 1.0;
    float _1914 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
    float _1915 = 0.959999978542327880859375 - _648;
    float _1917 = 0.959999978542327880859375 - _649;
    float _1918 = 0.959999978542327880859375 - _650;
    float _1925 = 1.0 - _1878;
    float _1936 = (0.5 / (((_1893 * ((_1892 * _1925) + _1878)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _1925) + _1878) * _1892))) * _1892;
    float _4013 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1902 / ((_1906 * _1906) * 3.141590118408203125));
    uint _1952 = _1724 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _501) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1765].x + _578;
    float _1966 = cbLight._m0[_1765].y + _579;
    float _1967 = cbLight._m0[_1765].z + _580;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1765].xyz));
    float _4024 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1979 = dot(vec3(_498, _499, _500), vec3(_1972, _1973, _1974));
    float _4035 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1972, _1973, _1974));
    float _4046 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0);
    float _2005 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1893 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _2005) + _1964) * _1978))) * _1978;
    float _4057 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2027 = (((((_1998 * _1915) + _651) * cbLight._m0[_1952].x) * _2017) * _1747) + ((((cbLight._m0[_1864].x * _1716) * ((_1914 * _1915) + _651)) * _1938) * _1761);
    float _2028 = (((((_1998 * _1917) + _653) * cbLight._m0[_1952].y) * _2017) * _1747) + ((((cbLight._m0[_1864].y * _1717) * ((_1914 * _1917) + _653)) * _1938) * _1761);
    float _2029 = (((((_1998 * _1918) + _654) * cbLight._m0[_1952].z) * _2017) * _1747) + ((((cbLight._m0[_1864].z * _1718) * ((_1914 * _1918) + _654)) * _1938) * _1761);
    float _2091;
    float _2093;
    float _2095;
    if (_1801)
    {
        _2091 = _2027;
        _2093 = _2028;
        _2095 = _2029;
    }
    else
    {
        uint _2097 = _1724 + 2u;
        uint _2101 = _1724 + 10u;
        float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _501) * 0.949999988079071044921875);
        float _2116 = _2115 * _2115;
        float _2117 = cbLight._m0[_2097].x + _578;
        float _2118 = cbLight._m0[_2097].y + _579;
        float _2119 = cbLight._m0[_2097].z + _580;
        float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
        float _2124 = _2123 * _2117;
        float _2125 = _2123 * _2118;
        float _2126 = _2123 * _2119;
        float _2127 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2097].xyz));
        float _4068 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2131 = dot(vec3(_498, _499, _500), vec3(_2124, _2125, _2126));
        float _4079 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2135 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2124, _2125, _2126));
        float _4090 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2139 = _2116 * _2116;
        float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
        float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
        float _2157 = 1.0 - _2116;
        float _2167 = (0.5 / (((_1893 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _2157) + _2116) * _2130))) * _2130;
        float _4101 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2091 = (((((_2150 * _1915) + _651) * cbLight._m0[_2101].x) * _2169) * _2170) + _2027;
        _2093 = (((((_2150 * _1917) + _653) * cbLight._m0[_2101].y) * _2169) * _2170) + _2028;
        _2095 = (((((_2150 * _1918) + _654) * cbLight._m0[_2101].z) * _2169) * _2170) + _2029;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1819)
    {
        _2205 = _2091;
        _2207 = _2093;
        _2209 = _2095;
    }
    else
    {
        uint _2216 = _1724 + 3u;
        uint _2220 = _1724 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _501) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _578;
        float _2237 = cbLight._m0[_2216].y + _579;
        float _2238 = cbLight._m0[_2216].z + _580;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2216].xyz));
        float _4117 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2250 = dot(vec3(_498, _499, _500), vec3(_2243, _2244, _2245));
        float _4128 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4139 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0);
        float _2276 = 1.0 - _2235;
        float _2286 = (0.5 / (((_1893 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1893 * _2276) + _2235) * _2249))) * _2249;
        float _4150 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2288 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2289 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2205 = (((((_2269 * _1915) + _651) * cbLight._m0[_2220].x) * _2288) * _2289) + _2091;
        _2207 = (((((_2269 * _1917) + _653) * cbLight._m0[_2220].y) * _2288) * _2289) + _2093;
        _2209 = (((((_2269 * _1918) + _654) * cbLight._m0[_2220].z) * _2288) * _2289) + _2095;
    }
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_1722.y == 0u)
    {
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2364;
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2364;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2364;
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.x;
        uint _2391 = uint((float(_2379.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _2380))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _2380)));
        float _2401 = (log2(_2367 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2402 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        uint _2405 = uint(isnan(14.0) ? _2402 : (isnan(_2402) ? 14.0 : min(_2402, 14.0)));
        uvec4 _2410 = texelFetch(g_lightClusterGridBuffer, int(((_2405 << 2u) + (_2391 << 6u)) >> 2u));
        uint _2411 = _2410.x;
        uint _2412 = _2379.z;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((((1u << ((_2412 >> 4u) & 15u)) + 4294967295u) & _2411) == 0u) || ((_2412 & 240u) == 0u))
        {
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
        }
        else
        {
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            uint _2663 = 0u;
            uint _2672;
            bool _2673;
            for (;;)
            {
                _2672 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                _2673 = _2672 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2673)
                {
                    frontier_phi_61_pred = _2657;
                    frontier_phi_61_pred_1 = _2662;
                    frontier_phi_61_pred_2 = _2661;
                    frontier_phi_61_pred_3 = _2660;
                    frontier_phi_61_pred_4 = _2659;
                    frontier_phi_61_pred_5 = _2658;
                }
                else
                {
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    uint _2787;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2672;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    for (;;)
                    {
                        uint _2791 = uint(findLSB(_2787)) + (_2663 << 5u);
                        uint _2788 = (_2787 + 4294967295u) & _2787;
                        uint _2793 = _2791 * 48u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2813 = (_2791 * 48u) + 4u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2832 = (_2791 * 48u) + 8u;
                        vec3 _2843 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x));
                        float _2847 = _2807.x - _2365;
                        float _2848 = _2807.y - _2366;
                        float _2849 = _2807.z - _2367;
                        float _2850 = dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849));
                        float _2853 = inversesqrt(_2850);
                        float _2854 = _2853 * _2847;
                        float _2855 = _2853 * _2848;
                        float _2856 = _2853 * _2849;
                        float _2857 = dot(vec3(_608, _611, _614), vec3(_2854, _2855, _2856));
                        float _2862 = 1.0 - (_2850 * _2807.w);
                        float _4176 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2864 = sqrt(_2850) * _2826.w;
                        float _2867 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2857) + _2868;
                        float _2874 = _2864 * _2864;
                        float _2878 = ((isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0))) * _2863) / ((_2874 * 0.699999988079071044921875) + 1.0);
                        float _2882 = (-0.0) - _2365;
                        float _2883 = (-0.0) - _2366;
                        float _2884 = (-0.0) - _2367;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2899 = exp2(log2(1.0 / ((_2874 * 3.5) + 5.0)) * 0.25);
                        float _2900 = 1.0 - _683;
                        float _2907 = sqrt(1.0 - ((1.0 - (_2900 * _2900)) * (1.0 - (_2899 * _2899))));
                        float _2908 = _2907 * _2907;
                        float _2909 = _2908 * _2908;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2912 = _2891 + _2856;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2920 = dot(vec3(_608, _611, _614), vec3(_2889, _2890, _2891));
                        float _4192 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2924 = dot(vec3(_608, _611, _614), vec3(_2916 * _2910, _2916 * _2911, _2916 * _2912));
                        float _4203 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2927 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2931 = ((_2927 * _2927) * (_2909 + (-1.0))) + 1.0;
                        float _2932 = _2867 * _2908;
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2857) + _2933;
                        float _4214 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2937 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2938 = 1.0 - _2908;
                        float _2948 = (0.5 / (((_2937 * ((_2923 * _2938) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2937 * _2938) + _2908) * _2923))) * _2937;
                        float _4225 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2959 = (((_2909 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_2931 * _2931) * ((_2874 * 2.1991131305694580078125) + 3.141590118408203125))) * _2863;
                        _2716 = (_2878 * _2826.x) + _2784;
                        _2717 = (_2878 * _2826.y) + _2785;
                        _2718 = (_2878 * _2826.z) + _2786;
                        _2713 = (_2959 * _2843.x) + _2781;
                        _2714 = (_2959 * _2843.y) + _2782;
                        _2715 = (_2959 * _2843.z) + _2783;
                        if (_2788 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2788;
                        }
                    }
                    frontier_phi_61_pred = _2713;
                    frontier_phi_61_pred_1 = _2718;
                    frontier_phi_61_pred_2 = _2717;
                    frontier_phi_61_pred_3 = _2716;
                    frontier_phi_61_pred_4 = _2715;
                    frontier_phi_61_pred_5 = _2714;
                }
                _2513 = frontier_phi_61_pred;
                _2523 = frontier_phi_61_pred_1;
                _2521 = frontier_phi_61_pred_2;
                _2519 = frontier_phi_61_pred_3;
                _2517 = frontier_phi_61_pred_4;
                _2515 = frontier_phi_61_pred_5;
                uint _2664 = _2663 + 1u;
                if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2657 = _2513;
                    _2658 = _2515;
                    _2659 = _2517;
                    _2660 = _2519;
                    _2661 = _2521;
                    _2662 = _2523;
                    _2663 = _2664;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
        }
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.z;
        uint _2529 = (_2527 >> 8u) & 15u;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((4294967295u << _2529) & _2411) == 0u)
        {
            _2625 = _2512;
            _2627 = _2514;
            _2629 = _2516;
            _2631 = _2518;
            _2633 = _2520;
            _2635 = _2522;
        }
        else
        {
            float _2650 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
            float _2651 = _2650 * _2365;
            float _2652 = _2650 * _2366;
            float _2653 = _2650 * _2367;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2529 < ((_2527 >> 12u) & 15u))
            {
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2636;
                float _2764 = _2512;
                float _2765 = _2514;
                float _2766 = _2516;
                float _2767 = _2518;
                float _2768 = _2520;
                float _2769 = _2522;
                uint _2770 = _2529;
                uint _2779;
                bool _2780;
                for (;;)
                {
                    _2779 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                    _2780 = _2779 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2780)
                    {
                        frontier_phi_67_pred = _2767;
                        frontier_phi_67_pred_1 = _2768;
                        frontier_phi_67_pred_2 = _2769;
                        frontier_phi_67_pred_3 = _2766;
                        frontier_phi_67_pred_4 = _2765;
                        frontier_phi_67_pred_5 = _2764;
                    }
                    else
                    {
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        uint _2983 = _2779;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        vec3 _3037;
                        vec4 _3053;
                        vec4 _3069;
                        float _3115;
                        bool _3116;
                        for (;;)
                        {
                            uint _2994 = ((_2770 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2994 * 40u) + 8u;
                            _3037 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x));
                            uint _3040 = (_2994 * 40u) + 16u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3056 = (_2994 * 40u) + 20u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_2994 * 40u) + 24u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3090 = (_2994 * 40u) + 28u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            _3115 = fma(_2367, _3103.z, fma(_2366, _3103.y, _3103.x * _2365)) + _3103.w;
                            _3116 = !((fma(_2367, _3084.z, fma(_2366, _3084.y, _3084.x * _2365)) + _3084.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3116)
                            {
                                float _3143 = _3009.x - _2365;
                                float _3144 = _3009.y - _2366;
                                float _3145 = _3009.z - _2367;
                                float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                                float _3149 = inversesqrt(_3146);
                                float _3150 = _3149 * _3143;
                                float _3151 = _3149 * _3144;
                                float _3152 = _3149 * _3145;
                                float _3156 = 1.0 - (_3146 / (_3010 * _3010));
                                float _4236 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3161 = sqrt(_3146) * _3025.w;
                                float _3163 = 1.39999997615814208984375 / (_3161 + 1.39999997615814208984375);
                                float _3164 = _3163 * _3163;
                                float _3167 = ((1.0 - _3164) * dot(vec3(_3150, _3151, _3152), vec3(_608, _611, _614))) + _3164;
                                float _3170 = _3161 * _3161;
                                float _3174 = (fma(_2367, _3053.z, fma(_2366, _3053.y, _3053.x * _2365)) + _3053.w) / _3115;
                                float _3175 = (fma(_2367, _3069.z, fma(_2366, _3069.y, _3069.x * _2365)) + _3069.w) / _3115;
                                float _3179 = 1.0 - dot(vec2(_3174, _3175), vec2(_3174, _3175));
                                float _4252 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3181 = _3180 * (((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3157) / ((_3170 * 0.699999988079071044921875) + 1.0));
                                float _3193 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                                float _3194 = 1.0 - _683;
                                float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                                float _3202 = _3201 * _3201;
                                float _3203 = _3202 * _3202;
                                float _3204 = _3150 - _2651;
                                float _3205 = _3151 - _2652;
                                float _3206 = _3152 - _2653;
                                float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                                float _3214 = dot(vec3(_608, _611, _614), vec3((-0.0) - _2651, (-0.0) - _2652, (-0.0) - _2653));
                                float _4263 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3218 = dot(vec3(_608, _611, _614), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                                float _4274 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3221 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                                float _3226 = _3163 * _3202;
                                float _3227 = _3226 * _3226;
                                float _3233 = ((1.0 - _3227) * dot(vec3(_608, _611, _614), vec3(_3150, _3151, _3152))) + _3227;
                                float _4285 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3235 = 1.0 - _3202;
                                float _3245 = (0.5 / (((_3234 * ((_3217 * _3235) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3202) * _3217))) * _3234;
                                float _4296 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3255 = (_3180 * _3157) * (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_3225 * _3225) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3255 * _3037.x;
                                frontier_phi_73_pred_1 = _3255 * _3037.y;
                                frontier_phi_73_pred_2 = _3181 * _3025.z;
                                frontier_phi_73_pred_3 = _3181 * _3025.y;
                                frontier_phi_73_pred_4 = _3181 * _3025.x;
                                frontier_phi_73_pred_5 = _3255 * _3037.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3259 = frontier_phi_73_pred;
                            _3260 = frontier_phi_73_pred_1;
                            _3264 = frontier_phi_73_pred_2;
                            _3263 = frontier_phi_73_pred_3;
                            _3262 = frontier_phi_73_pred_4;
                            _3261 = frontier_phi_73_pred_5;
                            _2967 = _3262 + _2980;
                            _2968 = _3263 + _2981;
                            _2969 = _3264 + _2982;
                            _2964 = _3259 + _2977;
                            _2965 = _3260 + _2978;
                            _2966 = _3261 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2967;
                        frontier_phi_67_pred_1 = _2968;
                        frontier_phi_67_pred_2 = _2969;
                        frontier_phi_67_pred_3 = _2966;
                        frontier_phi_67_pred_4 = _2965;
                        frontier_phi_67_pred_5 = _2964;
                    }
                    _2632 = frontier_phi_67_pred;
                    _2634 = frontier_phi_67_pred_1;
                    _2636 = frontier_phi_67_pred_2;
                    _2630 = frontier_phi_67_pred_3;
                    _2628 = frontier_phi_67_pred_4;
                    _2626 = frontier_phi_67_pred_5;
                    uint _2771 = _2770 + 1u;
                    if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2764 = _2626;
                        _2765 = _2628;
                        _2766 = _2630;
                        _2767 = _2632;
                        _2768 = _2634;
                        _2769 = _2636;
                        _2770 = _2771;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2634;
                frontier_phi_55_56_ladder_1 = _2636;
                frontier_phi_55_56_ladder_2 = _2632;
                frontier_phi_55_56_ladder_3 = _2630;
                frontier_phi_55_56_ladder_4 = _2628;
                frontier_phi_55_56_ladder_5 = _2626;
            }
            else
            {
                frontier_phi_55_56_ladder = _2520;
                frontier_phi_55_56_ladder_1 = _2522;
                frontier_phi_55_56_ladder_2 = _2518;
                frontier_phi_55_56_ladder_3 = _2516;
                frontier_phi_55_56_ladder_4 = _2514;
                frontier_phi_55_56_ladder_5 = _2512;
            }
            _2625 = frontier_phi_55_56_ladder_5;
            _2627 = frontier_phi_55_56_ladder_4;
            _2629 = frontier_phi_55_56_ladder_3;
            _2631 = frontier_phi_55_56_ladder_2;
            _2633 = frontier_phi_55_56_ladder;
            _2635 = frontier_phi_55_56_ladder_1;
        }
        float _2640 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2424 = (_2640 * _2631) + _1857;
        _2426 = (_2640 * _2633) + _1859;
        _2428 = (_2640 * _2635) + _1861;
        _2430 = ((_2625 * _651) * _2640) + _2205;
        _2432 = ((_2627 * _653) * _2640) + _2207;
        _2434 = ((_2629 * _654) * _2640) + _2209;
    }
    else
    {
        _2424 = _1857;
        _2426 = _1859;
        _2428 = _1861;
        _2430 = _2205;
        _2432 = _2207;
        _2434 = _2209;
    }
    float _4312 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4323 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4334 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    uint _2454 = _224 + 6u;
    float _2462 = _586 / cbSceneParam._m0[86u].x;
    float _2463 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2477 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2479 = _2477.x;
    float _2480 = _2477.y;
    float _2481 = _2477.z;
    float _2482 = _2477.w;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _2537 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _2538 = _2537 / _520;
        float _2549 = _2538 * _571;
        float _2550 = _572 * _2538;
        float _2551 = (-0.0) - _2550;
        float _2553 = _2538 * _573;
        float _2555 = (cbSceneParam._m0[77u].w * _2551) / _2537;
        float _2556 = _2555 + cbSceneParam._m0[79u].w;
        float _2557 = cbSceneParam._m0[79u].w - _2550;
        float _2563 = sqrt(((_2549 * _2549) + (_2550 * _2550)) + (_2553 * _2553));
        float _2566 = (1.0 - (cbSceneParam._m0[77u].w / _2537)) * _2563;
        float _2571 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2573 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2726;
        if (abs((_2551 - _2555) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2726 = ((((_2556 > 0.0) ? exp2(_2571 * _2556) : (2.0 - exp2(_2573 * _2556))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2566;
        }
        else
        {
            float _2686 = 1.0 / cbSceneParam._m0[80u].x;
            float _2687 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : max(_2556, _2557));
            float _2688 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : min(_2556, _2557));
            float _2697 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : min(_2687, 0.0));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            _2726 = ((abs(_2563 / _2551) * cbSceneParam._m0[80u].y) * ((((_2697 - _2698) * 2.0) - ((exp2(_2571 * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0)))) - exp2(_2571 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))))) * _2686)) - ((exp2(_2573 * _2697) - exp2(_2573 * _2698)) * _2686))) + (_2566 * cbSceneParam._m0[80u].z);
        }
        vec4 _2728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, 1.0), 0.0);
        float _2737 = exp2((_2726 * (-1.44269502162933349609375)) * (1.0 - _2728.w));
        float _2738 = log2(_2737);
        float _2754 = log2(_2482);
        _2575 = (exp2(_2754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].x)) * _2728.x) / cbSceneParam._m0[78u].x)) + _2479;
        _2577 = (exp2(_2754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].y)) * _2728.y) / cbSceneParam._m0[78u].y)) + _2480;
        _2579 = (exp2(_2754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].z)) * _2728.z) / cbSceneParam._m0[78u].z)) + _2481;
        _2581 = _2737 * _2482;
    }
    else
    {
        _2575 = _2479;
        _2577 = _2480;
        _2579 = _2481;
        _2581 = _2482;
    }
    float _2593 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2594 = _2593 == 3.0;
    float _2595 = log2(_2581);
    float _2602 = exp2(_2595 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2424 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _667))) + ((_2430 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2603 = exp2(_2595 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2426 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _667))) + ((_2432 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2604 = exp2(_2595 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2428 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _667))) + ((_2434 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1475)) * cbPerFrame._m0[3u].x));
    float _2613 = (_2593 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2613 * (_2594 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.y = _2613 * (_2594 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.z = _2613 * (_2594 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2579)));
    SV_Target.w = cbInstanceData._m0[_2454].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2454].w;
}


