#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1380;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3730 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    float _478 = ((_448.z - _469) * _394) + _469;
    float _481 = ((((_448.x - _467) * _394) + _467) * 2.0) + (-1.0);
    float _482 = ((((_448.y - _468) * _394) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3741 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (_481 + ((((_421.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _521 = (_482 + ((((_421.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _524 = fma(_488, _245, fma(_521, _252, _520 * _238));
    float _527 = fma(_488, _246, fma(_521, _253, _520 * _239));
    float _530 = fma(_488, _247, fma(_521, _254, _520 * _240));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _568 = ((_563 - _564) * cbMtdParam._m0[24u].z) + _564;
    float _570 = (cbMtdParam._m0[19u].x + dot(vec4(_534 * _524, _534 * _527, _534 * _530, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_568 * cbMtdParam._m0[21u].z);
    float _3752 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _573 = (-0.0) - cbMtdParam._m0[24u].x;
    float _575 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
    float _583 = _571 - ((_571 * TEXCOORD_8.x) * _576);
    float _584 = _571 - ((_571 * TEXCOORD_8.y) * _576);
    float _585 = _571 - ((_571 * TEXCOORD_8.z) * _576);
    float _592 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _596 = ((isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : min(_592, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _604 = (_596 - (((_568 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _596))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3783 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _609 = ((_583 * (cbMtdParam._m0[17u].x - _401)) * _605) + _401;
    float _610 = ((_584 * (cbMtdParam._m0[17u].y - _402)) * _605) + _402;
    float _611 = ((_585 * (cbMtdParam._m0[17u].z - _403)) * _605) + _403;
    vec4 _623 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _653 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_625 - _626) * cbMtdParam._m0[24u].w) + _626) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3794 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _662 = ((((cbMtdParam._m0[10u].x - _609) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _654) + _609;
    float _663 = ((((cbMtdParam._m0[10u].y - _610) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _654) + _610;
    float _664 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _611)) * _654) + _611;
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _692 = _690.x;
    float _710 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _692) * _394) + _692;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _710) * cbMtdParam._m0[19u].z) + _710;
    float _717 = _714 - ((_605 * _583) * _714);
    float _719 = _717 - (_717 * _654);
    float _724 = (((_421.z - _478) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _478;
    float _728 = ((_508.z - _724) * cbMtdParam._m0[19u].w) + _724;
    vec4 _742 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _749 = (_742.x * 2.0) + (-1.0);
    float _750 = (_742.y * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _3805 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _760 = (((_742.z - _728) * _583) * _605) + _728;
    float _763 = ((cbMtdParam._m0[23u].y - _760) * _654) + _760;
    vec4 _782 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _788 = (_782.x * 2.0) + (-1.0);
    float _789 = (_782.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _3816 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _810 = (((cbMtdParam._m0[21u].x * _520) + ((_749 - _520) * _583)) * _605) + _520;
    float _811 = (((cbMtdParam._m0[21u].x * _521) + ((_750 - _521) * _584)) * _605) + _521;
    float _812 = (((sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) - _488) * _585) * _605) + _488;
    float _823 = (((_788 - _810) + (_810 * cbMtdParam._m0[22u].z)) * _654) + _810;
    float _824 = (((_789 - _811) + (_811 * cbMtdParam._m0[22u].z)) * _654) + _811;
    float _825 = ((sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) - _812) * _654) + _812;
    float _827 = cbMtdParam._m0[22u].x + _508.w;
    float _830 = fma(_825, _245, fma(_824, _252, _823 * _238));
    float _833 = fma(_825, _246, fma(_824, _253, _823 * _239));
    float _836 = fma(_825, _247, fma(_824, _254, _823 * _240));
    float _840 = inversesqrt(dot(vec3(_830, _833, _836), vec3(_830, _833, _836)));
    float _841 = _840 * _830;
    float _842 = _840 * _833;
    float _843 = _840 * _836;
    float _3827 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _844 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _3849 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3860 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3871 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3882 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _849 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _863 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _913 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _903);
    float _914 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _903);
    float _915 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _903);
    float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
    float _920 = _913 * _919;
    float _921 = _914 * _919;
    float _922 = _915 * _919;
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_843, cbSceneParam._m0[5u].z, fma(_842, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _841));
    float _950 = fma(_843, cbSceneParam._m0[6u].z, fma(_842, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _841));
    float _953 = fma(_843, cbSceneParam._m0[7u].z, fma(_842, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _841));
    uint _967 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_967].z;
    float _3893 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _979 = 1.0 - _849;
    float _980 = _976 * _979;
    float _981 = _977 * _979;
    float _982 = _978 * _979;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _849;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _849;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _849;
    float _990 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    vec4 _1002 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _1006 = ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * TEXCOORD_5.w) * _1002.x;
    float _1007 = dot(vec3(_841, _842, _843), vec3(_920, _921, _922));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _841) - _920;
    float _1015 = (_1010 * _842) - _921;
    float _1016 = (_1010 * _843) - _922;
    float _1020 = abs(dot(vec3(_920, _921, _922), vec3(_841, _842, _843)));
    float _3926 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_844);
    float _1035 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1022;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1108 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1112 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1137 = _1070 + _841;
        float _1138 = _1074 + _842;
        float _1139 = _1078 + _843;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_841, _842, _843), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3974 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_841, _842, _843), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4007 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_841, _842, _843), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4040 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1423 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1427 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1450 = _1070 + _841;
        float _1451 = _1074 + _842;
        float _1452 = _1078 + _843;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_841, _842, _843), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4103 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_841, _842, _843), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4136 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_841, _842, _843), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4169 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1380;
        _1689 = _1380;
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1392)) + _1392;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1393)) + _1393;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1394)) + _1394;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _1014 * 0.5;
    float _1757 = _1015 * 0.5;
    float _1758 = _1016 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _844);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1887 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1890 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1918 = frontier_phi_14_12_ladder;
        }
        float _2142;
        if (_1887 > 0.0)
        {
            _2142 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2142 = frontier_phi_23_19_ladder;
        }
        float _2399;
        if (_1890 > 0.0)
        {
            _2399 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2399 = frontier_phi_35_30_ladder;
        }
        float _2401 = isnan(_2142) ? _1918 : (isnan(_1918) ? _2142 : min(_1918, _2142));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1884) + _1873;
        float _2407 = (_2402 * _1887) + _1877;
        float _2408 = (_2402 * _1890) + _1881;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2409;
        float _2413 = _2409 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 > _2413) || ((_2407 < _2411) || ((_2406 < _2411) || (_2406 > _2413))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2408, cbModelParam._m0[9u].z, fma(_2407, cbModelParam._m0[9u].y, _2406 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2408, cbModelParam._m0[10u].z, fma(_2407, cbModelParam._m0[10u].y, _2406 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2408, cbModelParam._m0[11u].z, fma(_2407, cbModelParam._m0[11u].y, _2406 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_13_35_ladder = _2536.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2536.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2536.x * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_13_35_ladder_2;
        _1908 = frontier_phi_13_35_ladder_1;
        _1910 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1825);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _844);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _1983 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _1986 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2147;
        if (_1980 > 0.0)
        {
            _2147 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2147 = frontier_phi_25_21_ladder;
        }
        float _2426;
        if (_1983 > 0.0)
        {
            _2426 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2426 = frontier_phi_37_32_ladder;
        }
        float _2639;
        if (_1986 > 0.0)
        {
            _2639 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2639 = frontier_phi_46_43_ladder;
        }
        float _2641 = isnan(_2426) ? _2147 : (isnan(_2147) ? _2426 : min(_2147, _2426));
        float _2642 = isnan(_2639) ? _2641 : (isnan(_2641) ? _2639 : min(_2641, _2639));
        float _2646 = (_2642 * _1980) + _1969;
        float _2647 = (_2642 * _1983) + _1973;
        float _2648 = (_2642 * _1986) + _1977;
        float _2649 = _2642 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2649;
        float _2652 = _2649 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2648 > _2652) || ((_2648 < _2650) || ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 < _2650) || (_2646 > _2652))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2648, cbModelParam._m0[17u].z, fma(_2647, cbModelParam._m0[17u].y, _2646 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2648, cbModelParam._m0[18u].z, fma(_2647, cbModelParam._m0[18u].y, _2646 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2648, cbModelParam._m0[19u].z, fma(_2647, cbModelParam._m0[19u].y, _2646 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_22_46_ladder = _2847.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2847.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2847.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_22_46_ladder_2;
        _2007 = frontier_phi_22_46_ladder_1;
        _2009 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1915);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2022 = (((_1041 * _990) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2005 - _1906)) + _1906);
    float _2024 = (((_1041 * _992) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2026 = (((_1041 * _993) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2029 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2024, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2032 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2024, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2035 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2024, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    vec4 _2043 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_928, _929));
    float _2045 = _2043.w;
    float _2057 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2045);
    float _2058 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2045);
    float _2059 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2045);
    uvec4 _2063 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2065 = _2063.x * 14u;
    uint _2066 = _2065 + 13u;
    float _2073 = _1006 + (-1.0);
    float _2078 = (cbLight._m0[_2066].x * _2073) + 1.0;
    float _2079 = (cbLight._m0[_2066].y * _2073) + 1.0;
    float _2080 = (cbLight._m0[_2066].z * _2073) + 1.0;
    float _2081 = (cbLight._m0[_2066].w * _2073) + 1.0;
    uint _2082 = _2065 + 5u;
    float _2088 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2092 = _2065 + 4u;
    float _2101 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2105 = _2065 | 1u;
    float _2116 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_841, _842, _843));
    float _2119 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_841, _842, _843));
    float _4305 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _4316 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2124 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _2126 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
    float _2133 = ((cbLight._m0[_2082].x * _2088) * _2126) + (((cbLight._m0[_2092].x * _2057) * _2101) * _2124);
    float _2134 = ((_2088 * cbLight._m0[_2082].y) * _2126) + (((cbLight._m0[_2092].y * _2058) * _2101) * _2124);
    float _2135 = ((_2088 * cbLight._m0[_2082].z) * _2126) + (((cbLight._m0[_2092].z * _2059) * _2101) * _2124);
    uvec4 _2139 = floatBitsToUint(cbLight._m0[_2065 + 12u]);
    bool _2141 = _2139.x == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2141)
    {
        _2152 = _2133;
        _2154 = _2134;
        _2156 = _2135;
    }
    else
    {
        uint _2160 = _2065 + 6u;
        float _2176 = (dot(vec3(cbLight._m0[_2065 + 2u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4327 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2179 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2152 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _2133;
        _2154 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _2134;
        _2156 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _2135;
    }
    bool _2159 = _2139.y == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2159)
    {
        _2197 = _2152;
        _2199 = _2154;
        _2201 = _2156;
    }
    else
    {
        uint _2370 = _2065 + 7u;
        float _2386 = (dot(vec3(cbLight._m0[_2065 + 3u].xyz), vec3(_841, _842, _843)) * 0.5) + 0.5;
        float _2387 = _2386 * _2386;
        float _4343 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2388 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2389 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2197 = (((cbLight._m0[_2370].x * 0.3183098733425140380859375) * _2388) * _2389) + _2152;
        _2199 = (((cbLight._m0[_2370].y * 0.3183098733425140380859375) * _2388) * _2389) + _2154;
        _2201 = (((cbLight._m0[_2370].z * 0.3183098733425140380859375) * _2388) * _2389) + _2156;
    }
    uint _2204 = _2065 + 8u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _844) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_2065].x + _920;
    float _2220 = cbLight._m0[_2065].y + _921;
    float _2221 = cbLight._m0[_2065].z + _922;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2065].xyz));
    float _4359 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2233 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2234 = dot(vec3(_841, _842, _843), vec3(_2226, _2227, _2228));
    float _4381 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2226, _2227, _2228));
    float _4392 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2218 * _2218;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0);
    float _2255 = 0.959999978542327880859375 - _987;
    float _2257 = 0.959999978542327880859375 - _988;
    float _2258 = 0.959999978542327880859375 - _989;
    float _2265 = 1.0 - _2218;
    float _2276 = (0.5 / (((_2233 * ((_2232 * _2265) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2265) + _2218) * _2232))) * _2232;
    float _4403 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    uint _2292 = _2065 + 9u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _844) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2105].x + _920;
    float _2306 = cbLight._m0[_2105].y + _921;
    float _2307 = cbLight._m0[_2105].z + _922;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2105].xyz));
    float _4414 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2319 = dot(vec3(_841, _842, _843), vec3(_2312, _2313, _2314));
    float _4425 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2323 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2312, _2313, _2314));
    float _4436 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2327 = _2304 * _2304;
    float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
    float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
    float _2345 = 1.0 - _2304;
    float _2355 = (0.5 / (((_2233 * ((_2318 * _2345) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2345) + _2304) * _2318))) * _2318;
    float _4447 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
    float _2367 = (((((_2338 * _2255) + _990) * cbLight._m0[_2292].x) * _2357) * _2088) + ((((cbLight._m0[_2204].x * _2057) * ((_2254 * _2255) + _990)) * _2278) * _2101);
    float _2368 = (((((_2338 * _2257) + _992) * cbLight._m0[_2292].y) * _2357) * _2088) + ((((cbLight._m0[_2204].y * _2058) * ((_2254 * _2257) + _992)) * _2278) * _2101);
    float _2369 = (((((_2338 * _2258) + _993) * cbLight._m0[_2292].z) * _2357) * _2088) + ((((cbLight._m0[_2204].z * _2059) * ((_2254 * _2258) + _993)) * _2278) * _2101);
    float _2431;
    float _2433;
    float _2435;
    if (_2141)
    {
        _2431 = _2367;
        _2433 = _2368;
        _2435 = _2369;
    }
    else
    {
        uint _2437 = _2065 + 2u;
        uint _2441 = _2065 + 10u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _844) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _920;
        float _2458 = cbLight._m0[_2437].y + _921;
        float _2459 = cbLight._m0[_2437].z + _922;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2437].xyz));
        float _4458 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2471 = dot(vec3(_841, _842, _843), vec3(_2464, _2465, _2466));
        float _4469 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4480 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
        float _2497 = 1.0 - _2456;
        float _2507 = (0.5 / (((_2233 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2497) + _2456) * _2470))) * _2470;
        float _4491 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2509 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2510 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2431 = (((((_2490 * _2255) + _990) * cbLight._m0[_2441].x) * _2509) * _2510) + _2367;
        _2433 = (((((_2490 * _2257) + _992) * cbLight._m0[_2441].y) * _2509) * _2510) + _2368;
        _2435 = (((((_2490 * _2258) + _993) * cbLight._m0[_2441].z) * _2509) * _2510) + _2369;
    }
    float _2545;
    float _2547;
    float _2549;
    if (_2159)
    {
        _2545 = _2431;
        _2547 = _2433;
        _2549 = _2435;
    }
    else
    {
        uint _2556 = _2065 + 3u;
        uint _2560 = _2065 + 11u;
        float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _844) * 0.949999988079071044921875);
        float _2575 = _2574 * _2574;
        float _2576 = cbLight._m0[_2556].x + _920;
        float _2577 = cbLight._m0[_2556].y + _921;
        float _2578 = cbLight._m0[_2556].z + _922;
        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
        float _2583 = _2582 * _2576;
        float _2584 = _2582 * _2577;
        float _2585 = _2582 * _2578;
        float _2586 = dot(vec3(_841, _842, _843), vec3(cbLight._m0[_2556].xyz));
        float _4507 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2590 = dot(vec3(_841, _842, _843), vec3(_2583, _2584, _2585));
        float _4518 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2594 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2583, _2584, _2585));
        float _4529 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2598 = _2575 * _2575;
        float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
        float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
        float _2616 = 1.0 - _2575;
        float _2626 = (0.5 / (((_2233 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2616) + _2575) * _2589))) * _2589;
        float _4540 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2628 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
        float _2629 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2545 = (((((_2609 * _2255) + _990) * cbLight._m0[_2560].x) * _2628) * _2629) + _2431;
        _2547 = (((((_2609 * _2257) + _992) * cbLight._m0[_2560].y) * _2628) * _2629) + _2433;
        _2549 = (((((_2609 * _2258) + _993) * cbLight._m0[_2560].z) * _2628) * _2629) + _2435;
    }
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_2063.y == 0u)
    {
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2704;
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2704;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2704;
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.x;
        uint _2731 = uint((float(_2719.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _2720))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _2720)));
        float _2741 = (log2(_2707 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2742 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        uint _2745 = uint(isnan(14.0) ? _2742 : (isnan(_2742) ? 14.0 : min(_2742, 14.0)));
        uvec4 _2750 = texelFetch(g_lightClusterGridBuffer, int(((_2745 << 2u) + (_2731 << 6u)) >> 2u));
        uint _2751 = _2750.x;
        uint _2752 = _2719.z;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((((1u << ((_2752 >> 4u) & 15u)) + 4294967295u) & _2751) == 0u) || ((_2752 & 240u) == 0u))
        {
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
        }
        else
        {
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            uint _3002 = 0u;
            uint _3011;
            bool _3012;
            for (;;)
            {
                _3011 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                _3012 = _3011 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3012)
                {
                    frontier_phi_61_pred = _2996;
                    frontier_phi_61_pred_1 = _3001;
                    frontier_phi_61_pred_2 = _3000;
                    frontier_phi_61_pred_3 = _2999;
                    frontier_phi_61_pred_4 = _2998;
                    frontier_phi_61_pred_5 = _2997;
                }
                else
                {
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    uint _3126;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3011;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    for (;;)
                    {
                        uint _3130 = uint(findLSB(_3126)) + (_3002 << 5u);
                        uint _3127 = (_3126 + 4294967295u) & _3126;
                        uint _3132 = _3130 * 48u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3152 = (_3130 * 48u) + 4u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3171 = (_3130 * 48u) + 8u;
                        vec3 _3182 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x));
                        float _3186 = _3146.x - _2705;
                        float _3187 = _3146.y - _2706;
                        float _3188 = _3146.z - _2707;
                        float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                        float _3192 = inversesqrt(_3189);
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3196 = dot(vec3(_947, _950, _953), vec3(_3193, _3194, _3195));
                        float _3201 = 1.0 - (_3189 * _3146.w);
                        float _4566 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3203 = sqrt(_3189) * _3165.w;
                        float _3206 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3196) + _3207;
                        float _3213 = _3203 * _3203;
                        float _3217 = ((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3202) / ((_3213 * 0.699999988079071044921875) + 1.0);
                        float _3221 = (-0.0) - _2705;
                        float _3222 = (-0.0) - _2706;
                        float _3223 = (-0.0) - _2707;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3238 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                        float _3239 = 1.0 - _1022;
                        float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                        float _3247 = _3246 * _3246;
                        float _3248 = _3247 * _3247;
                        float _3249 = _3228 + _3193;
                        float _3250 = _3229 + _3194;
                        float _3251 = _3230 + _3195;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3259 = dot(vec3(_947, _950, _953), vec3(_3228, _3229, _3230));
                        float _4582 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3263 = dot(vec3(_947, _950, _953), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                        float _4593 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                        float _3271 = _3206 * _3247;
                        float _3272 = _3271 * _3271;
                        float _3275 = ((1.0 - _3272) * _3196) + _3272;
                        float _4604 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3277 = 1.0 - _3247;
                        float _3287 = (0.5 / (((_3276 * ((_3262 * _3277) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3247) * _3262))) * _3276;
                        float _4615 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3298 = (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3270 * _3270) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125))) * _3202;
                        _3055 = (_3217 * _3165.x) + _3123;
                        _3056 = (_3217 * _3165.y) + _3124;
                        _3057 = (_3217 * _3165.z) + _3125;
                        _3052 = (_3298 * _3182.x) + _3120;
                        _3053 = (_3298 * _3182.y) + _3121;
                        _3054 = (_3298 * _3182.z) + _3122;
                        if (_3127 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3127;
                        }
                    }
                    frontier_phi_61_pred = _3052;
                    frontier_phi_61_pred_1 = _3057;
                    frontier_phi_61_pred_2 = _3056;
                    frontier_phi_61_pred_3 = _3055;
                    frontier_phi_61_pred_4 = _3054;
                    frontier_phi_61_pred_5 = _3053;
                }
                _2853 = frontier_phi_61_pred;
                _2863 = frontier_phi_61_pred_1;
                _2861 = frontier_phi_61_pred_2;
                _2859 = frontier_phi_61_pred_3;
                _2857 = frontier_phi_61_pred_4;
                _2855 = frontier_phi_61_pred_5;
                uint _3003 = _3002 + 1u;
                if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2996 = _2853;
                    _2997 = _2855;
                    _2998 = _2857;
                    _2999 = _2859;
                    _3000 = _2861;
                    _3001 = _2863;
                    _3002 = _3003;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
        }
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.z;
        uint _2869 = (_2867 >> 8u) & 15u;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((4294967295u << _2869) & _2751) == 0u)
        {
            _2964 = _2852;
            _2966 = _2854;
            _2968 = _2856;
            _2970 = _2858;
            _2972 = _2860;
            _2974 = _2862;
        }
        else
        {
            float _2989 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
            float _2990 = _2989 * _2705;
            float _2991 = _2989 * _2706;
            float _2992 = _2989 * _2707;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2869 < ((_2867 >> 12u) & 15u))
            {
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _3103 = _2852;
                float _3104 = _2854;
                float _3105 = _2856;
                float _3106 = _2858;
                float _3107 = _2860;
                float _3108 = _2862;
                uint _3109 = _2869;
                uint _3118;
                bool _3119;
                for (;;)
                {
                    _3118 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                    _3119 = _3118 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3119)
                    {
                        frontier_phi_67_pred = _3106;
                        frontier_phi_67_pred_1 = _3107;
                        frontier_phi_67_pred_2 = _3108;
                        frontier_phi_67_pred_3 = _3105;
                        frontier_phi_67_pred_4 = _3104;
                        frontier_phi_67_pred_5 = _3103;
                    }
                    else
                    {
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3316 = _3103;
                        float _3317 = _3104;
                        float _3318 = _3105;
                        float _3319 = _3106;
                        float _3320 = _3107;
                        float _3321 = _3108;
                        uint _3322 = _3118;
                        uint _3323;
                        vec4 _3348;
                        float _3349;
                        vec4 _3364;
                        vec3 _3376;
                        vec4 _3391;
                        vec4 _3406;
                        float _3452;
                        bool _3453;
                        for (;;)
                        {
                            uint _3333 = ((_3109 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3322));
                            _3323 = (_3322 + 4294967295u) & _3322;
                            uint _3335 = _3333 * 40u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            _3349 = _3348.w;
                            uint _3351 = (_3333 * 40u) + 4u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3333 * 40u) + 8u;
                            _3376 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x));
                            uint _3378 = (_3333 * 40u) + 16u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3333 * 40u) + 20u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3333 * 40u) + 24u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3427 = (_3333 * 40u) + 28u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            _3452 = fma(_2707, _3440.z, fma(_2706, _3440.y, _3440.x * _2705)) + _3440.w;
                            _3453 = !((fma(_2707, _3421.z, fma(_2706, _3421.y, _3421.x * _2705)) + _3421.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3453)
                            {
                                float _3480 = _3348.x - _2705;
                                float _3481 = _3348.y - _2706;
                                float _3482 = _3348.z - _2707;
                                float _3483 = dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482));
                                float _3486 = inversesqrt(_3483);
                                float _3487 = _3486 * _3480;
                                float _3488 = _3486 * _3481;
                                float _3489 = _3486 * _3482;
                                float _3493 = 1.0 - (_3483 / (_3349 * _3349));
                                float _4626 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3498 = sqrt(_3483) * _3364.w;
                                float _3500 = 1.39999997615814208984375 / (_3498 + 1.39999997615814208984375);
                                float _3501 = _3500 * _3500;
                                float _3504 = ((1.0 - _3501) * dot(vec3(_3487, _3488, _3489), vec3(_947, _950, _953))) + _3501;
                                float _3507 = _3498 * _3498;
                                float _3511 = (fma(_2707, _3391.z, fma(_2706, _3391.y, _3391.x * _2705)) + _3391.w) / _3452;
                                float _3512 = (fma(_2707, _3406.z, fma(_2706, _3406.y, _3406.x * _2705)) + _3406.w) / _3452;
                                float _3516 = 1.0 - dot(vec2(_3511, _3512), vec2(_3511, _3512));
                                float _4642 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3518 = _3517 * (((isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0))) * _3494) / ((_3507 * 0.699999988079071044921875) + 1.0));
                                float _3530 = exp2(log2(1.0 / ((_3507 * 3.5) + 5.0)) * 0.25);
                                float _3531 = 1.0 - _1022;
                                float _3538 = sqrt(1.0 - ((1.0 - (_3531 * _3531)) * (1.0 - (_3530 * _3530))));
                                float _3539 = _3538 * _3538;
                                float _3540 = _3539 * _3539;
                                float _3541 = _3487 - _2990;
                                float _3542 = _3488 - _2991;
                                float _3543 = _3489 - _2992;
                                float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                                float _3551 = dot(vec3(_947, _950, _953), vec3((-0.0) - _2990, (-0.0) - _2991, (-0.0) - _2992));
                                float _4653 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3554 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3555 = dot(vec3(_947, _950, _953), vec3(_3547 * _3541, _3547 * _3542, _3547 * _3543));
                                float _4664 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3562 = ((_3558 * _3558) * (_3540 + (-1.0))) + 1.0;
                                float _3563 = _3500 * _3539;
                                float _3564 = _3563 * _3563;
                                float _3570 = ((1.0 - _3564) * dot(vec3(_947, _950, _953), vec3(_3487, _3488, _3489))) + _3564;
                                float _4675 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3572 = 1.0 - _3539;
                                float _3582 = (0.5 / (((_3571 * ((_3554 * _3572) + _3539)) + 9.9999999392252902907785028219223e-09) + (((_3571 * _3572) + _3539) * _3554))) * _3571;
                                float _4686 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3592 = (_3517 * _3494) * (((_3540 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3562 * _3562) * ((_3507 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3592 * _3376.x;
                                frontier_phi_73_pred_1 = _3592 * _3376.y;
                                frontier_phi_73_pred_2 = _3518 * _3364.z;
                                frontier_phi_73_pred_3 = _3518 * _3364.y;
                                frontier_phi_73_pred_4 = _3518 * _3364.x;
                                frontier_phi_73_pred_5 = _3592 * _3376.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3596 = frontier_phi_73_pred;
                            _3597 = frontier_phi_73_pred_1;
                            _3601 = frontier_phi_73_pred_2;
                            _3600 = frontier_phi_73_pred_3;
                            _3599 = frontier_phi_73_pred_4;
                            _3598 = frontier_phi_73_pred_5;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            _3308 = _3601 + _3321;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            _3305 = _3598 + _3318;
                            if (_3323 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3323;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3306;
                        frontier_phi_67_pred_1 = _3307;
                        frontier_phi_67_pred_2 = _3308;
                        frontier_phi_67_pred_3 = _3305;
                        frontier_phi_67_pred_4 = _3304;
                        frontier_phi_67_pred_5 = _3303;
                    }
                    _2971 = frontier_phi_67_pred;
                    _2973 = frontier_phi_67_pred_1;
                    _2975 = frontier_phi_67_pred_2;
                    _2969 = frontier_phi_67_pred_3;
                    _2967 = frontier_phi_67_pred_4;
                    _2965 = frontier_phi_67_pred_5;
                    uint _3110 = _3109 + 1u;
                    if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3103 = _2965;
                        _3104 = _2967;
                        _3105 = _2969;
                        _3106 = _2971;
                        _3107 = _2973;
                        _3108 = _2975;
                        _3109 = _3110;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2973;
                frontier_phi_55_56_ladder_1 = _2975;
                frontier_phi_55_56_ladder_2 = _2971;
                frontier_phi_55_56_ladder_3 = _2969;
                frontier_phi_55_56_ladder_4 = _2967;
                frontier_phi_55_56_ladder_5 = _2965;
            }
            else
            {
                frontier_phi_55_56_ladder = _2860;
                frontier_phi_55_56_ladder_1 = _2862;
                frontier_phi_55_56_ladder_2 = _2858;
                frontier_phi_55_56_ladder_3 = _2856;
                frontier_phi_55_56_ladder_4 = _2854;
                frontier_phi_55_56_ladder_5 = _2852;
            }
            _2964 = frontier_phi_55_56_ladder_5;
            _2966 = frontier_phi_55_56_ladder_4;
            _2968 = frontier_phi_55_56_ladder_3;
            _2970 = frontier_phi_55_56_ladder_2;
            _2972 = frontier_phi_55_56_ladder;
            _2974 = frontier_phi_55_56_ladder_1;
        }
        float _2979 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _2764 = (_2979 * _2970) + _2197;
        _2766 = (_2979 * _2972) + _2199;
        _2768 = (_2979 * _2974) + _2201;
        _2770 = ((_2964 * _990) * _2979) + _2545;
        _2772 = ((_2966 * _992) * _2979) + _2547;
        _2774 = ((_2968 * _993) * _2979) + _2549;
    }
    else
    {
        _2764 = _2197;
        _2766 = _2199;
        _2768 = _2201;
        _2770 = _2545;
        _2772 = _2547;
        _2774 = _2549;
    }
    float _4702 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4713 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4724 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    uint _2794 = _257 + 6u;
    float _2802 = _928 / cbSceneParam._m0[86u].x;
    float _2803 = _929 / cbSceneParam._m0[86u].y;
    vec4 _2817 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, (log2((isnan(cbSceneParam._m0[77u].w) ? _863 : (isnan(_863) ? cbSceneParam._m0[77u].w : min(_863, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2819 = _2817.x;
    float _2820 = _2817.y;
    float _2821 = _2817.z;
    float _2822 = _2817.w;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_863 > cbSceneParam._m0[78u].w)
    {
        float _2877 = isnan(_863) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _863 : min(cbSceneParam._m0[80u].w, _863));
        float _2878 = _2877 / _863;
        float _2889 = _2878 * _913;
        float _2890 = _914 * _2878;
        float _2891 = (-0.0) - _2890;
        float _2892 = _2878 * _915;
        float _2894 = (cbSceneParam._m0[77u].w * _2891) / _2877;
        float _2895 = _2894 + cbSceneParam._m0[79u].w;
        float _2896 = cbSceneParam._m0[79u].w - _2890;
        float _2902 = sqrt(((_2889 * _2889) + (_2890 * _2890)) + (_2892 * _2892));
        float _2905 = (1.0 - (cbSceneParam._m0[77u].w / _2877)) * _2902;
        float _2910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3065;
        if (abs((_2891 - _2894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3065 = ((((_2895 > 0.0) ? exp2(_2910 * _2895) : (2.0 - exp2(_2912 * _2895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2905;
        }
        else
        {
            float _3025 = 1.0 / cbSceneParam._m0[80u].x;
            float _3026 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : max(_2895, _2896));
            float _3027 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : min(_2895, _2896));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            _3065 = ((abs(_2902 / _2891) * cbSceneParam._m0[80u].y) * ((((_3036 - _3037) * 2.0) - ((exp2(_2910 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0)))) - exp2(_2910 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))))) * _3025)) - ((exp2(_2912 * _3036) - exp2(_2912 * _3037)) * _3025))) + (_2905 * cbSceneParam._m0[80u].z);
        }
        vec4 _3067 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, 1.0), 0.0);
        float _3076 = exp2((_3065 * (-1.44269502162933349609375)) * (1.0 - _3067.w));
        float _3077 = log2(_3076);
        float _3093 = log2(_2822);
        _2914 = (exp2(_3093 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].x)) * _3067.x) / cbSceneParam._m0[78u].x)) + _2819;
        _2916 = (exp2(_3093 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].y)) * _3067.y) / cbSceneParam._m0[78u].y)) + _2820;
        _2918 = (exp2(_3093 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].z)) * _3067.z) / cbSceneParam._m0[78u].z)) + _2821;
        _2920 = _3076 * _2822;
    }
    else
    {
        _2914 = _2819;
        _2916 = _2820;
        _2918 = _2821;
        _2920 = _2822;
    }
    float _2932 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2933 = _2932 == 3.0;
    float _2934 = log2(_2920);
    float _2941 = exp2(_2934 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2764 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1006))) + ((_2770 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2942 = exp2(_2934 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2766 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1006))) + ((_2772 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2943 = exp2(_2934 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2768 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1006))) + ((_2774 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1814)) * cbPerFrame._m0[3u].x));
    float _2952 = (_2932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2952 * (_2933 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2914)));
    SV_Target.y = _2952 * (_2933 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.z = _2952 * (_2933 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.w = cbInstanceData._m0[_2794].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2794].w;
}


