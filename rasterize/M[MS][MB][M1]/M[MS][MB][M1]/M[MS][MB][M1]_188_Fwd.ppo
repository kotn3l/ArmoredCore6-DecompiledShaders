#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1433;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].y) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3759 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _408 = (_401 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _409 = (_401 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _410 = (_401 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _459 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _473 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_449 - _459) * cbMtdParam._m0[24u].y) + _459) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3770 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _481 = (_474 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _482 = (_474 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _483 = (_474 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    float _551 = ((_523.x - _542) * _401) + _542;
    float _552 = ((_523.y - _543) * _401) + _543;
    float _553 = ((_523.z - _544) * _401) + _544;
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _578 = ((_565.z - _553) * _474) + _553;
    float _581 = ((((_565.x - _551) * _474) + _551) * 2.0) + (-1.0);
    float _582 = ((((_565.y - _552) * _474) + _552) * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3781 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _628 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _631 = ((isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : min(_628, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _640 = (_631 - ((((((_621 - _622) * cbMtdParam._m0[24u].z) + _622) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _631))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3802 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _648 = (_641 * (cbMtdParam._m0[17u].x - _481)) + _481;
    float _649 = (_641 * (cbMtdParam._m0[17u].y - _482)) + _482;
    float _650 = (_641 * (cbMtdParam._m0[17u].z - _483)) + _483;
    vec4 _662 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _692 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_664 - _665) * cbMtdParam._m0[24u].w) + _665) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3813 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _701 = ((((cbMtdParam._m0[10u].x - _648) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _693) + _648;
    float _702 = ((((cbMtdParam._m0[10u].y - _649) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _693) + _649;
    float _703 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _650)) * _693) + _650;
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _731 = _729.x;
    float _749 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _731) * _401) + _731;
    float _766 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _749) * _474) + _749;
    float _770 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _766) * cbMtdParam._m0[19u].z) + _766;
    float _772 = _770 - (_770 * _641);
    float _774 = _772 - (_772 * _693);
    float _779 = (((_500.z - _578) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _578;
    vec4 _793 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _800 = (_793.x * 2.0) + (-1.0);
    float _801 = (_793.y * 2.0) + (-1.0);
    float _802 = dot(vec2(_800, _801), vec2(_800, _801));
    float _3824 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _810 = (_641 * (_793.z - _779)) + _779;
    float _813 = ((cbMtdParam._m0[23u].y - _810) * _693) + _810;
    vec4 _832 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _838 = (_832.x * 2.0) + (-1.0);
    float _839 = (_832.y * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _3835 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _850 = _581 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_500.x * 2.0) + (-1.0)));
    float _851 = _582 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_500.y * 2.0) + (-1.0)));
    float _863 = (((_800 - _850) + (cbMtdParam._m0[21u].x * _850)) * _641) + _850;
    float _864 = (((_801 - _851) + (cbMtdParam._m0[21u].x * _851)) * _641) + _851;
    float _865 = (_641 * (sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) - _588)) + _588;
    float _876 = (((_838 - _863) + (_863 * cbMtdParam._m0[22u].z)) * _693) + _863;
    float _877 = (((_839 - _864) + (_864 * cbMtdParam._m0[22u].z)) * _693) + _864;
    float _878 = ((sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) - _865) * _693) + _865;
    float _880 = cbMtdParam._m0[22u].x + _601.w;
    float _883 = fma(_878, _250 * NORMAL.x, fma(_877, _257 * TANGENT.x, (_243 * _235) * _876));
    float _886 = fma(_878, _250 * NORMAL.y, fma(_877, _257 * TANGENT.y, (_243 * _236) * _876));
    float _889 = fma(_878, _250 * NORMAL.z, fma(_877, _257 * TANGENT.z, (_243 * _237) * _876));
    float _893 = inversesqrt(dot(vec3(_883, _886, _889), vec3(_883, _886, _889)));
    float _894 = _893 * _883;
    float _895 = _893 * _886;
    float _896 = _893 * _889;
    float _3846 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _897 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _3868 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3879 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3890 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3901 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _902 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _916 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _966 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _956);
    float _967 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _956);
    float _968 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _956);
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    float _981 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _982 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1000 = fma(_896, cbSceneParam._m0[5u].z, fma(_895, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _894));
    float _1003 = fma(_896, cbSceneParam._m0[6u].z, fma(_895, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _894));
    float _1006 = fma(_896, cbSceneParam._m0[7u].z, fma(_895, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _894));
    uint _1020 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1026 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_1020].x;
    float _1027 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_1020].y;
    float _1028 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_1020].z;
    float _3912 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1032 = 1.0 - _902;
    float _1033 = _1029 * _1032;
    float _1034 = _1030 * _1032;
    float _1035 = _1031 * _1032;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _902;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _902;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _902;
    float _1043 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    vec4 _1055 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _981, cbSceneParam._m0[86u].y * _982));
    float _1059 = ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * TEXCOORD_5.w) * _1055.x;
    float _1060 = dot(vec3(_894, _895, _896), vec3(_973, _974, _975));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _894) - _973;
    float _1068 = (_1063 * _895) - _974;
    float _1069 = (_1063 * _896) - _975;
    float _1073 = abs(dot(vec3(_973, _974, _975), vec3(_894, _895, _896)));
    float _3945 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_897);
    float _1088 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1094 = (1.0 - _1088) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1095 = _1088 * _1075;
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1131, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123));
        float _1161 = fma(_1131, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123));
        float _1165 = fma(_1131, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123));
        float _1190 = _1123 + _894;
        float _1191 = _1127 + _895;
        float _1192 = _1131 + _896;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_894, _895, _896), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3993 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_894, _895, _896), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4026 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_894, _895, _896), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4059 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1471 = fma(_1131, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123));
        float _1475 = fma(_1131, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123));
        float _1479 = fma(_1131, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123));
        float _1502 = _1123 + _894;
        float _1503 = _1127 + _895;
        float _1504 = _1131 + _896;
        float _1514 = fma(_1504, cbModelParam._m0[30u].z, fma(_1503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1502)) - _1471;
        float _1515 = fma(_1504, cbModelParam._m0[31u].z, fma(_1503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1502)) - _1475;
        float _1516 = fma(_1504, cbModelParam._m0[32u].z, fma(_1503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1502)) - _1479;
        float _1520 = inversesqrt(dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516)));
        float _1533 = ((_1520 * _1514) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1471 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1520 * _1515) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1475 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1520 * _1516) / cbModelParam._m0[35u].z) + ((((((_1479 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        float _1570 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1537.x + (-0.5));
        float _1572 = _1570 * (_1537.y + (-0.5));
        float _1573 = _1570 * (_1537.z + (-0.5));
        float _1580 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1544.x + (-0.5));
        float _1582 = _1580 * (_1544.y + (-0.5));
        float _1583 = _1580 * (_1544.z + (-0.5));
        float _1590 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1551.x + (-0.5));
        float _1592 = _1590 * (_1551.y + (-0.5));
        float _1593 = _1590 * (_1551.z + (-0.5));
        float _1600 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1558.x + (-0.5));
        float _1602 = _1600 * (_1558.y + (-0.5));
        float _1603 = _1600 * (_1558.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_894, _895, _896), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4122 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1634 + 1.0))) + _1639) * _1604;
        float _1649 = _1572 * 0.5;
        float _1650 = _1582 * 0.5;
        float _1651 = _1592 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_894, _895, _896), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4155 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1676 + 1.0))) + _1681) * _1605;
        float _1691 = _1573 * 0.5;
        float _1692 = _1583 * 0.5;
        float _1693 = _1593 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_894, _895, _896), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4188 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1718 + 1.0))) + _1723) * _1606;
        _1740 = _1573;
        _1741 = _1572;
        _1742 = _1571;
        _1743 = _1583;
        _1744 = _1582;
        _1745 = _1581;
        _1746 = _1593;
        _1747 = _1592;
        _1748 = _1591;
        _1749 = _1606;
        _1750 = _1605;
        _1751 = _1604;
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1433;
        _1741 = _1433;
        _1742 = _1433;
        _1743 = _1433;
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = _1433;
        _1752 = 0.0;
        _1753 = 0.0;
        _1754 = 0.0;
    }
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1445)) + _1445;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1446)) + _1446;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1447)) + _1447;
    float _1787 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1764));
    float _1808 = _1067 * 0.5;
    float _1809 = _1068 * 0.5;
    float _1810 = _1069 * 0.5;
    float _1811 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1814 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1817 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1851;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1824 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1828 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1832 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1839 = dot(vec4(cbModelParam._m0[39u]), vec4(_1808, _1809, _1810, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1862;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1853 = dot(vec4(cbModelParam._m0[40u]), vec4(_1808, _1809, _1810, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1866 = (_1862 * cbModelParam._m0[1u].x) + (_1851 * (1.0 - cbModelParam._m0[1u].x));
    float _1876 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _897);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1876 : min(cbModelParam._m0[25u].z, _1876));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1925 = fma(_1131, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1123)) + cbModelParam._m0[13u].w;
        float _1929 = fma(_1131, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1123)) + cbModelParam._m0[14u].w;
        float _1933 = fma(_1131, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1123)) + cbModelParam._m0[15u].w;
        float _1936 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1939 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1942 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1970;
        if (_1936 > 0.0)
        {
            _1970 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1970 = frontier_phi_14_12_ladder;
        }
        float _2173;
        if (_1939 > 0.0)
        {
            _2173 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2173 = frontier_phi_23_19_ladder;
        }
        float _2427;
        if (_1942 > 0.0)
        {
            _2427 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2427 = frontier_phi_35_30_ladder;
        }
        float _2429 = isnan(_2173) ? _1970 : (isnan(_1970) ? _2173 : min(_1970, _2173));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1936) + _1925;
        float _2435 = (_2430 * _1939) + _1929;
        float _2436 = (_2430 * _1942) + _1933;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2437;
        float _2441 = _2437 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 > _2441) || ((_2435 < _2439) || ((_2434 < _2439) || (_2434 > _2441))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2436, cbModelParam._m0[9u].z, fma(_2435, cbModelParam._m0[9u].y, _2434 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2436, cbModelParam._m0[10u].z, fma(_2435, cbModelParam._m0[10u].y, _2434 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2436, cbModelParam._m0[11u].z, fma(_2435, cbModelParam._m0[11u].y, _2434 * cbModelParam._m0[11u].x))), _1877);
            frontier_phi_13_35_ladder = _2564.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2564.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2564.x * cbModelParam._m0[1u].y;
        }
        _1958 = frontier_phi_13_35_ladder_2;
        _1960 = frontier_phi_13_35_ladder_1;
        _1962 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1877);
        _1958 = _1946.x * cbModelParam._m0[1u].y;
        _1960 = _1946.y * cbModelParam._m0[1u].y;
        _1962 = _1946.z * cbModelParam._m0[1u].y;
    }
    float _1966 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _897);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1966 : min(cbModelParam._m0[25u].w, _1966));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2021 = fma(_1131, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1123)) + cbModelParam._m0[21u].w;
        float _2025 = fma(_1131, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1123)) + cbModelParam._m0[22u].w;
        float _2029 = fma(_1131, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1123)) + cbModelParam._m0[23u].w;
        float _2032 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2035 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2038 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2178;
        if (_2032 > 0.0)
        {
            _2178 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2178 = frontier_phi_25_21_ladder;
        }
        float _2454;
        if (_2035 > 0.0)
        {
            _2454 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2454 = frontier_phi_37_32_ladder;
        }
        float _2667;
        if (_2038 > 0.0)
        {
            _2667 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2667 = frontier_phi_46_43_ladder;
        }
        float _2669 = isnan(_2454) ? _2178 : (isnan(_2178) ? _2454 : min(_2178, _2454));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _2032) + _2021;
        float _2675 = (_2670 * _2035) + _2025;
        float _2676 = (_2670 * _2038) + _2029;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1967);
            frontier_phi_22_46_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _2057 = frontier_phi_22_46_ladder_2;
        _2059 = frontier_phi_22_46_ladder_1;
        _2061 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1967);
        _2057 = _2041.x * cbModelParam._m0[1u].z;
        _2059 = _2041.y * cbModelParam._m0[1u].z;
        _2061 = _2041.z * cbModelParam._m0[1u].z;
    }
    float _2074 = (((_1094 * _1043) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1094 * _1045) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2078 = (((_1094 * _1046) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2074 * cbSceneParam._m0[91u].x));
    uvec4 _2097 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2099 = _2097.x * 14u;
    uint _2100 = _2099 + 13u;
    float _2107 = _1059 + (-1.0);
    float _2112 = (cbLight._m0[_2100].x * _2107) + 1.0;
    float _2113 = (cbLight._m0[_2100].y * _2107) + 1.0;
    float _2114 = (cbLight._m0[_2100].z * _2107) + 1.0;
    float _2115 = (cbLight._m0[_2100].w * _2107) + 1.0;
    uint _2116 = _2099 + 5u;
    float _2122 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2126 = _2099 + 4u;
    float _2132 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2136 = _2099 | 1u;
    float _2147 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_894, _895, _896));
    float _2150 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_894, _895, _896));
    float _4324 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _4335 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2155 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2157 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2164 = ((cbLight._m0[_2116].x * _2122) * _2157) + ((cbLight._m0[_2126].x * _2132) * _2155);
    float _2165 = ((_2122 * cbLight._m0[_2116].y) * _2157) + ((_2132 * cbLight._m0[_2126].y) * _2155);
    float _2166 = ((_2122 * cbLight._m0[_2116].z) * _2157) + ((_2132 * cbLight._m0[_2126].z) * _2155);
    uvec4 _2170 = floatBitsToUint(cbLight._m0[_2099 + 12u]);
    bool _2172 = _2170.x == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2172)
    {
        _2183 = _2164;
        _2185 = _2165;
        _2187 = _2166;
    }
    else
    {
        uint _2191 = _2099 + 6u;
        float _2207 = (dot(vec3(cbLight._m0[_2099 + 2u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4346 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2210 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2183 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _2164;
        _2185 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _2165;
        _2187 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _2166;
    }
    bool _2190 = _2170.y == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2190)
    {
        _2228 = _2183;
        _2230 = _2185;
        _2232 = _2187;
    }
    else
    {
        uint _2398 = _2099 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_2099 + 3u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4362 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2417 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2228 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2183;
        _2230 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2185;
        _2232 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2187;
    }
    uint _2235 = _2099 + 8u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _897) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_2099].x + _973;
    float _2251 = cbLight._m0[_2099].y + _974;
    float _2252 = cbLight._m0[_2099].z + _975;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2099].xyz));
    float _4378 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2264 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2265 = dot(vec3(_894, _895, _896), vec3(_2257, _2258, _2259));
    float _4400 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2269 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2257, _2258, _2259));
    float _4411 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2273 = _2249 * _2249;
    float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
    float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
    float _2286 = 0.959999978542327880859375 - _1040;
    float _2288 = 0.959999978542327880859375 - _1041;
    float _2289 = 0.959999978542327880859375 - _1042;
    float _2296 = 1.0 - _2249;
    float _2307 = (0.5 / (((_2264 * ((_2263 * _2296) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2296) + _2249) * _2263))) * _2263;
    float _4422 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2309 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
    uint _2320 = _2099 + 9u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _897) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2136].x + _973;
    float _2334 = cbLight._m0[_2136].y + _974;
    float _2335 = cbLight._m0[_2136].z + _975;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2136].xyz));
    float _4433 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2347 = dot(vec3(_894, _895, _896), vec3(_2340, _2341, _2342));
    float _4444 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2351 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2340, _2341, _2342));
    float _4455 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2355 = _2332 * _2332;
    float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
    float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2373 = 1.0 - _2332;
    float _2383 = (0.5 / (((_2264 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2373) + _2332) * _2346))) * _2346;
    float _4466 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
    float _2395 = (((((_2366 * _2286) + _1043) * cbLight._m0[_2320].x) * _2385) * _2122) + (((((_2285 * _2286) + _1043) * cbLight._m0[_2235].x) * _2309) * _2132);
    float _2396 = (((((_2366 * _2288) + _1045) * cbLight._m0[_2320].y) * _2385) * _2122) + (((((_2285 * _2288) + _1045) * cbLight._m0[_2235].y) * _2309) * _2132);
    float _2397 = (((((_2366 * _2289) + _1046) * cbLight._m0[_2320].z) * _2385) * _2122) + (((((_2285 * _2289) + _1046) * cbLight._m0[_2235].z) * _2309) * _2132);
    float _2459;
    float _2461;
    float _2463;
    if (_2172)
    {
        _2459 = _2395;
        _2461 = _2396;
        _2463 = _2397;
    }
    else
    {
        uint _2465 = _2099 + 2u;
        uint _2469 = _2099 + 10u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _897) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _973;
        float _2486 = cbLight._m0[_2465].y + _974;
        float _2487 = cbLight._m0[_2465].z + _975;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2465].xyz));
        float _4477 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2499 = dot(vec3(_894, _895, _896), vec3(_2492, _2493, _2494));
        float _4488 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4499 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2264 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2525) + _2484) * _2498))) * _2498;
        float _4510 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2459 = (((((_2518 * _2286) + _1043) * cbLight._m0[_2469].x) * _2537) * _2538) + _2395;
        _2461 = (((((_2518 * _2288) + _1045) * cbLight._m0[_2469].y) * _2537) * _2538) + _2396;
        _2463 = (((((_2518 * _2289) + _1046) * cbLight._m0[_2469].z) * _2537) * _2538) + _2397;
    }
    float _2573;
    float _2575;
    float _2577;
    if (_2190)
    {
        _2573 = _2459;
        _2575 = _2461;
        _2577 = _2463;
    }
    else
    {
        uint _2584 = _2099 + 3u;
        uint _2588 = _2099 + 11u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _897) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _973;
        float _2605 = cbLight._m0[_2584].y + _974;
        float _2606 = cbLight._m0[_2584].z + _975;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2584].xyz));
        float _4526 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2618 = dot(vec3(_894, _895, _896), vec3(_2611, _2612, _2613));
        float _4537 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4548 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
        float _2644 = 1.0 - _2603;
        float _2654 = (0.5 / (((_2264 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2644) + _2603) * _2617))) * _2617;
        float _4559 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2573 = (((((_2637 * _2286) + _1043) * cbLight._m0[_2588].x) * _2656) * _2657) + _2459;
        _2575 = (((((_2637 * _2288) + _1045) * cbLight._m0[_2588].y) * _2656) * _2657) + _2461;
        _2577 = (((((_2637 * _2289) + _1046) * cbLight._m0[_2588].z) * _2656) * _2657) + _2463;
    }
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_2097.y == 0u)
    {
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2732;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2732;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2732;
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _982) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _981) / _2748)));
        float _2769 = (log2(_2735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
        }
        else
        {
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            uint _3031 = 0u;
            uint _3040;
            bool _3041;
            for (;;)
            {
                _3040 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                _3041 = _3040 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3041)
                {
                    frontier_phi_61_pred = _3025;
                    frontier_phi_61_pred_1 = _3030;
                    frontier_phi_61_pred_2 = _3029;
                    frontier_phi_61_pred_3 = _3028;
                    frontier_phi_61_pred_4 = _3027;
                    frontier_phi_61_pred_5 = _3026;
                }
                else
                {
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    uint _3155;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3040;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    for (;;)
                    {
                        uint _3159 = uint(findLSB(_3155)) + (_3031 << 5u);
                        uint _3156 = (_3155 + 4294967295u) & _3155;
                        uint _3161 = _3159 * 48u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3181 = (_3159 * 48u) + 4u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3200 = (_3159 * 48u) + 8u;
                        vec3 _3211 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x));
                        float _3215 = _3175.x - _2733;
                        float _3216 = _3175.y - _2734;
                        float _3217 = _3175.z - _2735;
                        float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                        float _3221 = inversesqrt(_3218);
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3225 = dot(vec3(_1000, _1003, _1006), vec3(_3222, _3223, _3224));
                        float _3230 = 1.0 - (_3218 * _3175.w);
                        float _4585 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3232 = sqrt(_3218) * _3194.w;
                        float _3235 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3225) + _3236;
                        float _3242 = _3232 * _3232;
                        float _3246 = ((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3231) / ((_3242 * 0.699999988079071044921875) + 1.0);
                        float _3250 = (-0.0) - _2733;
                        float _3251 = (-0.0) - _2734;
                        float _3252 = (-0.0) - _2735;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3267 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                        float _3268 = 1.0 - _1075;
                        float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                        float _3276 = _3275 * _3275;
                        float _3277 = _3276 * _3276;
                        float _3278 = _3257 + _3222;
                        float _3279 = _3258 + _3223;
                        float _3280 = _3259 + _3224;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3288 = dot(vec3(_1000, _1003, _1006), vec3(_3257, _3258, _3259));
                        float _4601 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3292 = dot(vec3(_1000, _1003, _1006), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                        float _4612 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                        float _3300 = _3235 * _3276;
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3225) + _3301;
                        float _4623 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3306 = 1.0 - _3276;
                        float _3316 = (0.5 / (((_3305 * ((_3291 * _3306) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3276) * _3291))) * _3305;
                        float _4634 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3327 = (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) / ((_3299 * _3299) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125))) * _3231;
                        _3084 = (_3246 * _3194.x) + _3152;
                        _3085 = (_3246 * _3194.y) + _3153;
                        _3086 = (_3246 * _3194.z) + _3154;
                        _3081 = (_3327 * _3211.x) + _3149;
                        _3082 = (_3327 * _3211.y) + _3150;
                        _3083 = (_3327 * _3211.z) + _3151;
                        if (_3156 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3156;
                        }
                    }
                    frontier_phi_61_pred = _3081;
                    frontier_phi_61_pred_1 = _3086;
                    frontier_phi_61_pred_2 = _3085;
                    frontier_phi_61_pred_3 = _3084;
                    frontier_phi_61_pred_4 = _3083;
                    frontier_phi_61_pred_5 = _3082;
                }
                _2881 = frontier_phi_61_pred;
                _2891 = frontier_phi_61_pred_1;
                _2889 = frontier_phi_61_pred_2;
                _2887 = frontier_phi_61_pred_3;
                _2885 = frontier_phi_61_pred_4;
                _2883 = frontier_phi_61_pred_5;
                uint _3032 = _3031 + 1u;
                if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3025 = _2881;
                    _3026 = _2883;
                    _3027 = _2885;
                    _3028 = _2887;
                    _3029 = _2889;
                    _3030 = _2891;
                    _3031 = _3032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
        }
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.z;
        uint _2897 = (_2895 >> 8u) & 15u;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((4294967295u << _2897) & _2779) == 0u)
        {
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
        }
        else
        {
            float _3018 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
            float _3019 = _3018 * _2733;
            float _3020 = _3018 * _2734;
            float _3021 = _3018 * _2735;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2897 < ((_2895 >> 12u) & 15u))
            {
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3132 = _2880;
                float _3133 = _2882;
                float _3134 = _2884;
                float _3135 = _2886;
                float _3136 = _2888;
                float _3137 = _2890;
                uint _3138 = _2897;
                uint _3147;
                bool _3148;
                for (;;)
                {
                    _3147 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                    _3148 = _3147 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3148)
                    {
                        frontier_phi_67_pred = _3135;
                        frontier_phi_67_pred_1 = _3136;
                        frontier_phi_67_pred_2 = _3137;
                        frontier_phi_67_pred_3 = _3134;
                        frontier_phi_67_pred_4 = _3133;
                        frontier_phi_67_pred_5 = _3132;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3345 = _3132;
                        float _3346 = _3133;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        float _3349 = _3136;
                        float _3350 = _3137;
                        uint _3351 = _3147;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3420;
                        vec4 _3435;
                        float _3481;
                        bool _3482;
                        for (;;)
                        {
                            uint _3362 = ((_3138 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3407 = (_3362 * 40u) + 16u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3362 * 40u) + 20u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3362 * 40u) + 24u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3456 = (_3362 * 40u) + 28u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3481 = fma(_2735, _3469.z, fma(_2734, _3469.y, _3469.x * _2733)) + _3469.w;
                            _3482 = !((fma(_2735, _3450.z, fma(_2734, _3450.y, _3450.x * _2733)) + _3450.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3482)
                            {
                                float _3509 = _3377.x - _2733;
                                float _3510 = _3377.y - _2734;
                                float _3511 = _3377.z - _2735;
                                float _3512 = dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511));
                                float _3515 = inversesqrt(_3512);
                                float _3516 = _3515 * _3509;
                                float _3517 = _3515 * _3510;
                                float _3518 = _3515 * _3511;
                                float _3522 = 1.0 - (_3512 / (_3378 * _3378));
                                float _4645 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3527 = sqrt(_3512) * _3393.w;
                                float _3529 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                                float _3530 = _3529 * _3529;
                                float _3533 = ((1.0 - _3530) * dot(vec3(_3516, _3517, _3518), vec3(_1000, _1003, _1006))) + _3530;
                                float _3536 = _3527 * _3527;
                                float _3540 = (fma(_2735, _3420.z, fma(_2734, _3420.y, _3420.x * _2733)) + _3420.w) / _3481;
                                float _3541 = (fma(_2735, _3435.z, fma(_2734, _3435.y, _3435.x * _2733)) + _3435.w) / _3481;
                                float _3545 = 1.0 - dot(vec2(_3540, _3541), vec2(_3540, _3541));
                                float _4661 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3547 = _3546 * (((isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0))) * _3523) / ((_3536 * 0.699999988079071044921875) + 1.0));
                                float _3559 = exp2(log2(1.0 / ((_3536 * 3.5) + 5.0)) * 0.25);
                                float _3560 = 1.0 - _1075;
                                float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                                float _3568 = _3567 * _3567;
                                float _3569 = _3568 * _3568;
                                float _3570 = _3516 - _3019;
                                float _3571 = _3517 - _3020;
                                float _3572 = _3518 - _3021;
                                float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                                float _3580 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3019, (-0.0) - _3020, (-0.0) - _3021));
                                float _4672 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3584 = dot(vec3(_1000, _1003, _1006), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                                float _4683 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                                float _3592 = _3529 * _3568;
                                float _3593 = _3592 * _3592;
                                float _3599 = ((1.0 - _3593) * dot(vec3(_1000, _1003, _1006), vec3(_3516, _3517, _3518))) + _3593;
                                float _4694 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3601 = 1.0 - _3568;
                                float _3611 = (0.5 / (((_3600 * ((_3583 * _3601) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3568) * _3583))) * _3600;
                                float _4705 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3621 = (_3546 * _3523) * (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) / ((_3591 * _3591) * ((_3536 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3621 * _3405.x;
                                frontier_phi_73_pred_1 = _3621 * _3405.y;
                                frontier_phi_73_pred_2 = _3547 * _3393.z;
                                frontier_phi_73_pred_3 = _3547 * _3393.y;
                                frontier_phi_73_pred_4 = _3547 * _3393.x;
                                frontier_phi_73_pred_5 = _3621 * _3405.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3625 = frontier_phi_73_pred;
                            _3626 = frontier_phi_73_pred_1;
                            _3630 = frontier_phi_73_pred_2;
                            _3629 = frontier_phi_73_pred_3;
                            _3628 = frontier_phi_73_pred_4;
                            _3627 = frontier_phi_73_pred_5;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3335;
                        frontier_phi_67_pred_1 = _3336;
                        frontier_phi_67_pred_2 = _3337;
                        frontier_phi_67_pred_3 = _3334;
                        frontier_phi_67_pred_4 = _3333;
                        frontier_phi_67_pred_5 = _3332;
                    }
                    _3000 = frontier_phi_67_pred;
                    _3002 = frontier_phi_67_pred_1;
                    _3004 = frontier_phi_67_pred_2;
                    _2998 = frontier_phi_67_pred_3;
                    _2996 = frontier_phi_67_pred_4;
                    _2994 = frontier_phi_67_pred_5;
                    uint _3139 = _3138 + 1u;
                    if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3132 = _2994;
                        _3133 = _2996;
                        _3134 = _2998;
                        _3135 = _3000;
                        _3136 = _3002;
                        _3137 = _3004;
                        _3138 = _3139;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3002;
                frontier_phi_55_56_ladder_1 = _3004;
                frontier_phi_55_56_ladder_2 = _3000;
                frontier_phi_55_56_ladder_3 = _2998;
                frontier_phi_55_56_ladder_4 = _2996;
                frontier_phi_55_56_ladder_5 = _2994;
            }
            else
            {
                frontier_phi_55_56_ladder = _2888;
                frontier_phi_55_56_ladder_1 = _2890;
                frontier_phi_55_56_ladder_2 = _2886;
                frontier_phi_55_56_ladder_3 = _2884;
                frontier_phi_55_56_ladder_4 = _2882;
                frontier_phi_55_56_ladder_5 = _2880;
            }
            _2993 = frontier_phi_55_56_ladder_5;
            _2995 = frontier_phi_55_56_ladder_4;
            _2997 = frontier_phi_55_56_ladder_3;
            _2999 = frontier_phi_55_56_ladder_2;
            _3001 = frontier_phi_55_56_ladder;
            _3003 = frontier_phi_55_56_ladder_1;
        }
        float _3008 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _2792 = (_3008 * _2999) + _2228;
        _2794 = (_3008 * _3001) + _2230;
        _2796 = (_3008 * _3003) + _2232;
        _2798 = ((_2993 * _1043) * _3008) + _2573;
        _2800 = ((_2995 * _1045) * _3008) + _2575;
        _2802 = ((_2997 * _1046) * _3008) + _2577;
    }
    else
    {
        _2792 = _2228;
        _2794 = _2230;
        _2796 = _2232;
        _2798 = _2573;
        _2800 = _2575;
        _2802 = _2577;
    }
    float _4721 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4732 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4743 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    uint _2822 = _263 + 6u;
    float _2830 = _981 / cbSceneParam._m0[86u].x;
    float _2831 = _982 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _916 : (isnan(_916) ? cbSceneParam._m0[77u].w : min(_916, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_916 > cbSceneParam._m0[78u].w)
    {
        float _2905 = isnan(_916) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _916 : min(cbSceneParam._m0[80u].w, _916));
        float _2906 = _2905 / _916;
        float _2917 = _2906 * _966;
        float _2918 = _967 * _2906;
        float _2919 = (-0.0) - _2918;
        float _2921 = _2906 * _968;
        float _2923 = (cbSceneParam._m0[77u].w * _2919) / _2905;
        float _2924 = _2923 + cbSceneParam._m0[79u].w;
        float _2925 = cbSceneParam._m0[79u].w - _2918;
        float _2931 = sqrt(((_2917 * _2917) + (_2918 * _2918)) + (_2921 * _2921));
        float _2934 = (1.0 - (cbSceneParam._m0[77u].w / _2905)) * _2931;
        float _2939 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2941 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3094;
        if (abs((_2919 - _2923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3094 = ((((_2924 > 0.0) ? exp2(_2939 * _2924) : (2.0 - exp2(_2941 * _2924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2934;
        }
        else
        {
            float _3054 = 1.0 / cbSceneParam._m0[80u].x;
            float _3055 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : max(_2924, _2925));
            float _3056 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : min(_2924, _2925));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            _3094 = ((abs(_2931 / _2919) * cbSceneParam._m0[80u].y) * ((((_3065 - _3066) * 2.0) - ((exp2(_2939 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0)))) - exp2(_2939 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))))) * _3054)) - ((exp2(_2941 * _3065) - exp2(_2941 * _3066)) * _3054))) + (_2934 * cbSceneParam._m0[80u].z);
        }
        vec4 _3096 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3105 = exp2((_3094 * (-1.44269502162933349609375)) * (1.0 - _3096.w));
        float _3106 = log2(_3105);
        float _3122 = log2(_2850);
        _2943 = (exp2(_3122 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].x)) * _3096.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2945 = (exp2(_3122 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].y)) * _3096.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2947 = (exp2(_3122 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3106 * cbSceneParam._m0[78u].z)) * _3096.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2949 = _3105 * _2850;
    }
    else
    {
        _2943 = _2847;
        _2945 = _2848;
        _2947 = _2849;
        _2949 = _2850;
    }
    float _2961 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2962 = _2961 == 3.0;
    float _2963 = log2(_2949);
    float _2970 = exp2(_2963 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2792 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1059))) + ((_2798 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _2971 = exp2(_2963 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2794 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1059))) + ((_2800 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _2972 = exp2(_2963 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2796 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1059))) + ((_2802 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1866)) * cbPerFrame._m0[3u].x));
    float _2981 = (_2961 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2981 * (_2962 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.y = _2981 * (_2962 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.z = _2981 * (_2962 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
    SV_Target.w = cbInstanceData._m0[_2822].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
}


