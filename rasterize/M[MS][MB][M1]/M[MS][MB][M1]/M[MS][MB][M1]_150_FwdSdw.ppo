#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1439;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4046 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4057 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4068 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4079 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) + _453;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _434) + _549;
    float _561 = ((((_528.x - _547) * _434) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _434) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _4090 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _600 = (_561 + ((((_501.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _601 = (_562 + ((((_501.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _604 = fma(_568, _252, fma(_601, _259, _600 * _245));
    float _607 = fma(_568, _253, fma(_601, _260, _600 * _246));
    float _610 = fma(_568, _254, fma(_601, _261, _600 * _247));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _650 = (cbMtdParam._m0[19u].x + dot(vec4(_614 * _604, _614 * _607, _614 * _610, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_643 - _644) * cbMtdParam._m0[24u].z) + _644) * cbMtdParam._m0[21u].z);
    float _4101 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _653 = (-0.0) - cbMtdParam._m0[24u].x;
    float _655 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
    float _663 = _651 - ((_651 * TEXCOORD_8.x) * _656);
    float _664 = _651 - ((_651 * TEXCOORD_8.y) * _656);
    float _665 = _651 - ((_651 * TEXCOORD_8.z) * _656);
    float _672 = (_663 * ((_481.x * cbMtdParam._m0[18u].x) - _460)) + _460;
    float _673 = (_664 * ((_481.y * cbMtdParam._m0[18u].y) - _461)) + _461;
    float _674 = (_665 * ((_481.z * cbMtdParam._m0[18u].z) - _462)) + _462;
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _688 = _686.x;
    float _689 = 1.0 - _688;
    float _715 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_688 - _689) * cbMtdParam._m0[24u].w) + _689) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4122 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _724 = ((((cbMtdParam._m0[10u].x - _672) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _716) + _672;
    float _725 = ((((cbMtdParam._m0[10u].y - _673) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _716) + _673;
    float _726 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _674)) * _716) + _674;
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _754 = _752.x;
    float _772 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _754) * _434) + _754;
    float _776 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _772) * cbMtdParam._m0[19u].z) + _772;
    float _778 = _776 - (_776 * _663);
    float _780 = _778 - (_778 * _716);
    float _785 = (((_501.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _789 = ((_588.z - _785) * cbMtdParam._m0[19u].w) + _785;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _4133 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _820 = ((_803.z - _789) * _663) + _789;
    float _823 = ((cbMtdParam._m0[23u].y - _820) * _716) + _820;
    vec4 _842 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _848 = (_842.x * 2.0) + (-1.0);
    float _849 = (_842.y * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _4144 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _865 = ((sqrt(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) - _568) * _665) + _568;
    float _868 = (((_810 - _600) * _663) + _600) + (cbMtdParam._m0[21u].x * _600);
    float _869 = (((_811 - _601) * _664) + _601) + (cbMtdParam._m0[21u].x * _601);
    float _880 = (((_848 - _868) + (_868 * cbMtdParam._m0[22u].z)) * _716) + _868;
    float _881 = (((_849 - _869) + (_869 * cbMtdParam._m0[22u].z)) * _716) + _869;
    float _882 = (_716 * (sqrt(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) - _865)) + _865;
    float _886 = cbMtdParam._m0[22u].x + _588.w;
    float _889 = fma(_882, _252, fma(_881, _259, _880 * _245));
    float _892 = fma(_882, _253, fma(_881, _260, _880 * _246));
    float _895 = fma(_882, _254, fma(_881, _261, _880 * _247));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _4155 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _903 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4177 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4188 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4199 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4210 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _908 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _922 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _972 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _962);
    float _973 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _962);
    float _974 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _962);
    float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
    float _979 = _972 * _978;
    float _980 = _973 * _978;
    float _981 = _974 * _978;
    float _987 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _988 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1006 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1009 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1012 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1026 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1032 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_1026].x;
    float _1033 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_1026].y;
    float _1034 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * cbInstanceData._m0[_1026].z;
    float _4221 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _1038 = 1.0 - _908;
    float _1039 = _1035 * _1038;
    float _1040 = _1036 * _1038;
    float _1041 = _1037 * _1038;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _908;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _908;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _908;
    float _1049 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    vec4 _1061 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _987, cbSceneParam._m0[86u].y * _988));
    float _1065 = ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * TEXCOORD_5.w) * _1061.x;
    float _1066 = dot(vec3(_900, _901, _902), vec3(_979, _980, _981));
    float _1069 = _1066 * 2.0;
    float _1073 = (_1069 * _900) - _979;
    float _1074 = (_1069 * _901) - _980;
    float _1075 = (_1069 * _902) - _981;
    float _1079 = abs(dot(vec3(_979, _980, _981), vec3(_900, _901, _902)));
    float _4254 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1081 = sqrt(_903);
    float _1094 = exp2((_1081 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1081 * 3.0));
    float _1100 = (1.0 - _1094) * ((_1081 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1101 = _1094 * _1081;
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1438;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1163 = fma(_1137, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129));
        float _1167 = fma(_1137, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129));
        float _1171 = fma(_1137, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129));
        float _1196 = _1129 + _900;
        float _1197 = _1133 + _901;
        float _1198 = _1137 + _902;
        float _1208 = fma(_1198, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196)) - _1163;
        float _1209 = fma(_1198, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196)) - _1167;
        float _1210 = fma(_1198, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196)) - _1171;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1163 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1167 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[34u].z) + ((((((_1171 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1266 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1232.x + (-0.5));
        float _1268 = _1266 * (_1232.y + (-0.5));
        float _1269 = _1266 * (_1232.z + (-0.5));
        float _1276 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1239.x + (-0.5));
        float _1278 = _1276 * (_1239.y + (-0.5));
        float _1279 = _1276 * (_1239.z + (-0.5));
        float _1286 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1246.x + (-0.5));
        float _1288 = _1286 * (_1246.y + (-0.5));
        float _1289 = _1286 * (_1246.z + (-0.5));
        float _1296 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1253.x + (-0.5));
        float _1298 = _1296 * (_1253.y + (-0.5));
        float _1299 = _1296 * (_1253.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1320 = (dot(vec3(_900, _901, _902), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1330 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4302 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1332 + 1.0))) + _1337) * _1300;
        float _1347 = _1268 * 0.5;
        float _1348 = _1278 * 0.5;
        float _1349 = _1288 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_900, _901, _902), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4335 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1374 + 1.0))) + _1379) * _1301;
        float _1389 = _1269 * 0.5;
        float _1390 = _1279 * 0.5;
        float _1391 = _1289 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_900, _901, _902), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4368 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1416 + 1.0))) + _1421) * _1302;
        _1438 = _1269;
        _1440 = _1268;
        _1441 = _1267;
        _1442 = _1279;
        _1443 = _1278;
        _1444 = _1277;
        _1445 = _1289;
        _1446 = _1288;
        _1447 = _1287;
        _1448 = _1302;
        _1449 = _1301;
        _1450 = _1300;
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1439;
        _1440 = _1439;
        _1441 = _1439;
        _1442 = _1439;
        _1443 = _1439;
        _1444 = _1439;
        _1445 = _1439;
        _1446 = _1439;
        _1447 = _1439;
        _1448 = _1439;
        _1449 = _1439;
        _1450 = _1439;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1478 = fma(_1137, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129));
        float _1482 = fma(_1137, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129));
        float _1486 = fma(_1137, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129));
        float _1509 = _1129 + _900;
        float _1510 = _1133 + _901;
        float _1511 = _1137 + _902;
        float _1521 = fma(_1511, cbModelParam._m0[30u].z, fma(_1510, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1509)) - _1478;
        float _1522 = fma(_1511, cbModelParam._m0[31u].z, fma(_1510, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1509)) - _1482;
        float _1523 = fma(_1511, cbModelParam._m0[32u].z, fma(_1510, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1509)) - _1486;
        float _1527 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
        float _1540 = ((_1527 * _1521) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1478 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1527 * _1522) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1482 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1527 * _1523) / cbModelParam._m0[35u].z) + ((((((_1486 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        float _1577 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1544.x + (-0.5));
        float _1579 = _1577 * (_1544.y + (-0.5));
        float _1580 = _1577 * (_1544.z + (-0.5));
        float _1587 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1551.x + (-0.5));
        float _1589 = _1587 * (_1551.y + (-0.5));
        float _1590 = _1587 * (_1551.z + (-0.5));
        float _1597 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1558.x + (-0.5));
        float _1599 = _1597 * (_1558.y + (-0.5));
        float _1600 = _1597 * (_1558.z + (-0.5));
        float _1607 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1565.x + (-0.5));
        float _1609 = _1607 * (_1565.y + (-0.5));
        float _1610 = _1607 * (_1565.z + (-0.5));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = _1578 * 0.5;
        float _1615 = _1588 * 0.5;
        float _1616 = _1598 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_900, _901, _902), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4431 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1641 + 1.0))) + _1646) * _1611;
        float _1656 = _1579 * 0.5;
        float _1657 = _1589 * 0.5;
        float _1658 = _1599 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_900, _901, _902), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4464 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1683 + 1.0))) + _1688) * _1612;
        float _1698 = _1580 * 0.5;
        float _1699 = _1590 * 0.5;
        float _1700 = _1600 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_900, _901, _902), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4497 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1725 + 1.0))) + _1730) * _1613;
        _1747 = _1580;
        _1748 = _1579;
        _1749 = _1578;
        _1750 = _1590;
        _1751 = _1589;
        _1752 = _1588;
        _1753 = _1600;
        _1754 = _1599;
        _1755 = _1598;
        _1756 = _1613;
        _1757 = _1612;
        _1758 = _1611;
        _1759 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
    }
    else
    {
        _1747 = _1439;
        _1748 = _1439;
        _1749 = _1439;
        _1750 = _1439;
        _1751 = _1439;
        _1752 = _1439;
        _1753 = _1439;
        _1754 = _1439;
        _1755 = _1439;
        _1756 = _1439;
        _1757 = _1439;
        _1758 = _1439;
        _1759 = 0.0;
        _1760 = 0.0;
        _1761 = 0.0;
    }
    float _1771 = (cbModelParam._m0[1u].x * (_1759 - _1451)) + _1451;
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1452)) + _1452;
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1453)) + _1453;
    float _1794 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1797 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1800 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1771));
    float _1815 = _1073 * 0.5;
    float _1816 = _1074 * 0.5;
    float _1817 = _1075 * 0.5;
    float _1818 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1821 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1824 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1747, _1750, _1753, _1756));
    float _1858;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1831 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1438, _1442, _1445, _1448));
        float _1835 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1839 = dot(vec4(_1815, _1816, _1817, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1846 = dot(vec4(cbModelParam._m0[39u]), vec4(_1815, _1816, _1817, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1869;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1860 = dot(vec4(cbModelParam._m0[40u]), vec4(_1815, _1816, _1817, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1873 = (_1869 * cbModelParam._m0[1u].x) + (_1858 * (1.0 - cbModelParam._m0[1u].x));
    float _1883 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1883 : min(cbModelParam._m0[25u].z, _1883));
    float _1964;
    float _1966;
    float _1968;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1931 = fma(_1137, cbModelParam._m0[13u].z, fma(_1133, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1129)) + cbModelParam._m0[13u].w;
        float _1935 = fma(_1137, cbModelParam._m0[14u].z, fma(_1133, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1129)) + cbModelParam._m0[14u].w;
        float _1939 = fma(_1137, cbModelParam._m0[15u].z, fma(_1133, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1129)) + cbModelParam._m0[15u].w;
        float _1942 = fma(_1075, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073));
        float _1945 = fma(_1075, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073));
        float _1948 = fma(_1075, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073));
        float _1976;
        if (_1942 > 0.0)
        {
            _1976 = abs((1.0 - _1931) / _1942);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1931 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1976 = frontier_phi_14_12_ladder;
        }
        float _2147;
        if (_1945 > 0.0)
        {
            _2147 = abs((1.0 - _1935) / _1945);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1935 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2147 = frontier_phi_23_19_ladder;
        }
        float _2442;
        if (_1948 > 0.0)
        {
            _2442 = abs((1.0 - _1939) / _1948);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1939 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2442 = frontier_phi_35_30_ladder;
        }
        float _2444 = isnan(_2147) ? _1976 : (isnan(_1976) ? _2147 : min(_1976, _2147));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1942) + _1931;
        float _2450 = (_2445 * _1945) + _1935;
        float _2451 = (_2445 * _1948) + _1939;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2452;
        float _2456 = _2452 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 > _2456) || ((_2450 < _2454) || ((_2449 < _2454) || (_2449 > _2456))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2451, cbModelParam._m0[9u].z, fma(_2450, cbModelParam._m0[9u].y, _2449 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2451, cbModelParam._m0[10u].z, fma(_2450, cbModelParam._m0[10u].y, _2449 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2451, cbModelParam._m0[11u].z, fma(_2450, cbModelParam._m0[11u].y, _2449 * cbModelParam._m0[11u].x))), _1884);
            frontier_phi_13_35_ladder = _2596.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2596.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2596.x * cbModelParam._m0[1u].y;
        }
        _1964 = frontier_phi_13_35_ladder_2;
        _1966 = frontier_phi_13_35_ladder_1;
        _1968 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1073, _1074, _1075), _1884);
        _1964 = _1952.x * cbModelParam._m0[1u].y;
        _1966 = _1952.y * cbModelParam._m0[1u].y;
        _1968 = _1952.z * cbModelParam._m0[1u].y;
    }
    float _1972 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1972 : min(cbModelParam._m0[25u].w, _1972));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2026 = fma(_1137, cbModelParam._m0[21u].z, fma(_1133, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1129)) + cbModelParam._m0[21u].w;
        float _2030 = fma(_1137, cbModelParam._m0[22u].z, fma(_1133, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1129)) + cbModelParam._m0[22u].w;
        float _2034 = fma(_1137, cbModelParam._m0[23u].z, fma(_1133, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1129)) + cbModelParam._m0[23u].w;
        float _2037 = fma(_1075, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073));
        float _2040 = fma(_1075, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073));
        float _2043 = fma(_1075, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073));
        float _2152;
        if (_2037 > 0.0)
        {
            _2152 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2152 = frontier_phi_25_21_ladder;
        }
        float _2469;
        if (_2040 > 0.0)
        {
            _2469 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2469 = frontier_phi_37_32_ladder;
        }
        float _2807;
        if (_2043 > 0.0)
        {
            _2807 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2807 = frontier_phi_47_44_ladder;
        }
        float _2809 = isnan(_2469) ? _2152 : (isnan(_2152) ? _2469 : min(_2152, _2469));
        float _2810 = isnan(_2807) ? _2809 : (isnan(_2809) ? _2807 : min(_2809, _2807));
        float _2814 = (_2810 * _2037) + _2026;
        float _2815 = (_2810 * _2040) + _2030;
        float _2816 = (_2810 * _2043) + _2034;
        float _2817 = _2810 * 9.9999997473787516355514526367188e-05;
        float _2818 = (-1.0) - _2817;
        float _2820 = _2817 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2816 > _2820) || ((_2816 < _2818) || ((_2815 > _2820) || ((_2815 < _2818) || ((_2814 < _2818) || (_2814 > _2820))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2816, cbModelParam._m0[17u].z, fma(_2815, cbModelParam._m0[17u].y, _2814 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2816, cbModelParam._m0[18u].z, fma(_2815, cbModelParam._m0[18u].y, _2814 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2816, cbModelParam._m0[19u].z, fma(_2815, cbModelParam._m0[19u].y, _2814 * cbModelParam._m0[19u].x))), _1973);
            frontier_phi_22_47_ladder = _2938.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2938.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2938.x * cbModelParam._m0[1u].z;
        }
        _2062 = frontier_phi_22_47_ladder_2;
        _2064 = frontier_phi_22_47_ladder_1;
        _2066 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1073, _1074, _1075), _1973);
        _2062 = _2046.x * cbModelParam._m0[1u].z;
        _2064 = _2046.y * cbModelParam._m0[1u].z;
        _2066 = _2046.z * cbModelParam._m0[1u].z;
    }
    float _2079 = (((_1100 * _1049) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2062 - _1964)) + _1964);
    float _2081 = (((_1100 * _1051) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2064 - _1966)) + _1966);
    float _2083 = (((_1100 * _1052) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2066 - _1968)) + _1968);
    float _2086 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2081, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2089 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2081, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2092 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2081, cbSceneParam._m0[91u].y, _2079 * cbSceneParam._m0[91u].x));
    float _2126 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2130 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2139 = _2126 / _2138;
    float _2140 = _2130 / _2138;
    float _2141 = _2134 / _2138;
    float _2288;
    float _2289;
    float _2290;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2168 = ((uint(_2141 > cbSceneParam._m0[59u].y) + uint(_2141 > cbSceneParam._m0[59u].x)) + uint(_2141 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2169 = _2168 + 43u;
        uint _2177 = _2168 + 44u;
        uint _2185 = _2168 + 45u;
        uint _2193 = _2168 + 46u;
        float _2204 = fma(_2138, cbSceneParam._m0[_2169].w, fma(_2134, cbSceneParam._m0[_2169].z, fma(_2130, cbSceneParam._m0[_2169].y, _2126 * cbSceneParam._m0[_2169].x)));
        float _2208 = fma(_2138, cbSceneParam._m0[_2177].w, fma(_2134, cbSceneParam._m0[_2177].z, fma(_2130, cbSceneParam._m0[_2177].y, _2126 * cbSceneParam._m0[_2177].x)));
        float _2216 = fma(_2138, cbSceneParam._m0[_2193].w, fma(_2134, cbSceneParam._m0[_2193].z, fma(_2130, cbSceneParam._m0[_2193].y, _2126 * cbSceneParam._m0[_2193].x)));
        float _2221 = cbSceneParam._m0[33u].z * _2216;
        float _2223 = cbSceneParam._m0[33u].w * _2216;
        float _2226 = fma(_2138, cbSceneParam._m0[_2185].w, fma(_2134, cbSceneParam._m0[_2185].z, fma(_2130, cbSceneParam._m0[_2185].y, _2126 * cbSceneParam._m0[_2185].x))) / _2216;
        float _2274 = (cbSceneParam._m0[33u].x - sqrt(((_2140 * _2140) + (_2139 * _2139)) + (_2141 * _2141))) * cbSceneParam._m0[33u].y;
        float _4623 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2281 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2221 + _2204) / _2216, (_2223 + _2208) / _2216), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 + _2204) / _2216, (_2208 - _2221) / _2216), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2204 - _2221) / _2216, (_2208 - _2223) / _2216), _2226), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2204 - _2223) / _2216, (_2221 + _2208) / _2216), _2226), 0.0)).x), vec4(0.25)));
        _2288 = 1.0 - (_2281 * cbSceneParam._m0[34u].x);
        _2289 = 1.0 - (_2281 * cbSceneParam._m0[34u].y);
        _2290 = 1.0 - (_2281 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2288 = 1.0;
        _2289 = 1.0;
        _2290 = 1.0;
    }
    float _2354;
    float _2356;
    float _2358;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2342 = fma(_2138, cbSceneParam._m0[63u].w, fma(_2134, cbSceneParam._m0[63u].z, fma(_2130, cbSceneParam._m0[63u].y, _2126 * cbSceneParam._m0[63u].x)));
        float _2343 = fma(_2138, cbSceneParam._m0[60u].w, fma(_2134, cbSceneParam._m0[60u].z, fma(_2130, cbSceneParam._m0[60u].y, _2126 * cbSceneParam._m0[60u].x))) / _2342;
        float _2344 = fma(_2138, cbSceneParam._m0[61u].w, fma(_2134, cbSceneParam._m0[61u].z, fma(_2130, cbSceneParam._m0[61u].y, _2126 * cbSceneParam._m0[61u].x))) / _2342;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2343 >= cbSceneParam._m0[64u].x) && (_2344 >= cbSceneParam._m0[64u].y)) && (_2343 <= cbSceneParam._m0[64u].z)) && (_2344 <= cbSceneParam._m0[64u].w))
        {
            float _2482 = fma(_2138, cbSceneParam._m0[62u].w, fma(_2134, cbSceneParam._m0[62u].z, fma(_2130, cbSceneParam._m0[62u].y, _2126 * cbSceneParam._m0[62u].x))) / _2342;
            float _2486 = isnan(cbSceneParam._m0[41u].w) ? _2482 : (isnan(_2482) ? cbSceneParam._m0[41u].w : max(_2482, cbSceneParam._m0[41u].w));
            float _2529 = (cbSceneParam._m0[33u].x - sqrt(((_2140 * _2140) + (_2139 * _2139)) + (_2141 * _2141))) * cbSceneParam._m0[33u].y;
            float _4639 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
            float _2536 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2343, cbSceneParam._m0[33u].w + _2344), _2486), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2343, _2344 - cbSceneParam._m0[33u].z), _2486), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2343 - cbSceneParam._m0[33u].z, _2344 - cbSceneParam._m0[33u].w), _2486), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2343 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2344), _2486), 0.0)).x), vec4(0.25)));
            float _2540 = 1.0 - (_2536 * cbSceneParam._m0[34u].x);
            float _2541 = 1.0 - (_2536 * cbSceneParam._m0[34u].y);
            float _2542 = 1.0 - (_2536 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2542) ? _2290 : (isnan(_2290) ? _2542 : min(_2290, _2542));
            frontier_phi_34_33_ladder_1 = isnan(_2541) ? _2289 : (isnan(_2289) ? _2541 : min(_2289, _2541));
            frontier_phi_34_33_ladder_2 = isnan(_2540) ? _2288 : (isnan(_2288) ? _2540 : min(_2288, _2540));
        }
        else
        {
            frontier_phi_34_33_ladder = _2290;
            frontier_phi_34_33_ladder_1 = _2289;
            frontier_phi_34_33_ladder_2 = _2288;
        }
        _2354 = frontier_phi_34_33_ladder_2;
        _2356 = frontier_phi_34_33_ladder_1;
        _2358 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2354 = _2288;
        _2356 = _2289;
        _2358 = _2290;
    }
    uvec4 _2363 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2365 = _2363.x * 14u;
    uint _2366 = _2365 + 13u;
    float _2373 = _1065 + (-1.0);
    float _2378 = (cbLight._m0[_2366].x * _2373) + 1.0;
    float _2379 = (cbLight._m0[_2366].y * _2373) + 1.0;
    float _2380 = (cbLight._m0[_2366].z * _2373) + 1.0;
    float _2381 = (cbLight._m0[_2366].w * _2373) + 1.0;
    uint _2382 = _2365 + 5u;
    float _2388 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
    uint _2392 = _2365 + 4u;
    float _2401 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
    uint _2405 = _2365 | 1u;
    float _2416 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_900, _901, _902));
    float _2419 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_900, _901, _902));
    float _4675 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _4686 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2424 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.3183098733425140380859375;
    float _2426 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2433 = ((cbLight._m0[_2382].x * _2388) * _2426) + (((cbLight._m0[_2392].x * _2354) * _2401) * _2424);
    float _2434 = ((_2388 * cbLight._m0[_2382].y) * _2426) + (((cbLight._m0[_2392].y * _2356) * _2401) * _2424);
    float _2435 = ((_2388 * cbLight._m0[_2382].z) * _2426) + (((cbLight._m0[_2392].z * _2358) * _2401) * _2424);
    uvec4 _2439 = floatBitsToUint(cbLight._m0[_2365 + 12u]);
    bool _2441 = _2439.x == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2441)
    {
        _2543 = _2433;
        _2545 = _2434;
        _2547 = _2435;
    }
    else
    {
        uint _2551 = _2365 + 6u;
        float _2567 = (dot(vec3(cbLight._m0[_2365 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2568 = _2567 * _2567;
        float _4697 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2569 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2570 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2543 = (((cbLight._m0[_2551].x * 0.3183098733425140380859375) * _2569) * _2570) + _2433;
        _2545 = (((cbLight._m0[_2551].y * 0.3183098733425140380859375) * _2569) * _2570) + _2434;
        _2547 = (((cbLight._m0[_2551].z * 0.3183098733425140380859375) * _2569) * _2570) + _2435;
    }
    bool _2550 = _2439.y == 0u;
    float _2605;
    float _2607;
    float _2609;
    if (_2550)
    {
        _2605 = _2543;
        _2607 = _2545;
        _2609 = _2547;
    }
    else
    {
        uint _2778 = _2365 + 7u;
        float _2794 = (dot(vec3(cbLight._m0[_2365 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2795 = _2794 * _2794;
        float _4713 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2796 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2797 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
        _2605 = (((cbLight._m0[_2778].x * 0.3183098733425140380859375) * _2796) * _2797) + _2543;
        _2607 = (((cbLight._m0[_2778].y * 0.3183098733425140380859375) * _2796) * _2797) + _2545;
        _2609 = (((cbLight._m0[_2778].z * 0.3183098733425140380859375) * _2796) * _2797) + _2547;
    }
    uint _2612 = _2365 + 8u;
    float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _903) * 0.949999988079071044921875);
    float _2626 = _2625 * _2625;
    float _2627 = cbLight._m0[_2365].x + _979;
    float _2628 = cbLight._m0[_2365].y + _980;
    float _2629 = cbLight._m0[_2365].z + _981;
    float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
    float _2634 = _2633 * _2627;
    float _2635 = _2633 * _2628;
    float _2636 = _2633 * _2629;
    float _2637 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2365].xyz));
    float _4729 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _4740 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _2641 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2642 = dot(vec3(_900, _901, _902), vec3(_2634, _2635, _2636));
    float _4751 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2646 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2634, _2635, _2636));
    float _4762 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2650 = _2626 * _2626;
    float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
    float _2662 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2663 = 0.959999978542327880859375 - _1046;
    float _2665 = 0.959999978542327880859375 - _1047;
    float _2666 = 0.959999978542327880859375 - _1048;
    float _2673 = 1.0 - _2626;
    float _2684 = (0.5 / (((_2641 * ((_2640 * _2673) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2641 * _2673) + _2626) * _2640))) * _2640;
    float _4773 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2686 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
    uint _2700 = _2365 + 9u;
    float _2711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _903) * 0.949999988079071044921875);
    float _2712 = _2711 * _2711;
    float _2713 = cbLight._m0[_2405].x + _979;
    float _2714 = cbLight._m0[_2405].y + _980;
    float _2715 = cbLight._m0[_2405].z + _981;
    float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
    float _2720 = _2719 * _2713;
    float _2721 = _2719 * _2714;
    float _2722 = _2719 * _2715;
    float _2723 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2405].xyz));
    float _4784 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2726 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2727 = dot(vec3(_900, _901, _902), vec3(_2720, _2721, _2722));
    float _4795 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2730 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2731 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2720, _2721, _2722));
    float _4806 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2735 = _2712 * _2712;
    float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
    float _2746 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
    float _2753 = 1.0 - _2712;
    float _2763 = (0.5 / (((_2641 * ((_2726 * _2753) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2641 * _2753) + _2712) * _2726))) * _2726;
    float _4817 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2765 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
    float _2775 = (((((_2746 * _2663) + _1049) * cbLight._m0[_2700].x) * _2765) * _2388) + ((((cbLight._m0[_2612].x * _2354) * ((_2662 * _2663) + _1049)) * _2686) * _2401);
    float _2776 = (((((_2746 * _2665) + _1051) * cbLight._m0[_2700].y) * _2765) * _2388) + ((((cbLight._m0[_2612].y * _2356) * ((_2662 * _2665) + _1051)) * _2686) * _2401);
    float _2777 = (((((_2746 * _2666) + _1052) * cbLight._m0[_2700].z) * _2765) * _2388) + ((((cbLight._m0[_2612].z * _2358) * ((_2662 * _2666) + _1052)) * _2686) * _2401);
    float _2833;
    float _2835;
    float _2837;
    if (_2441)
    {
        _2833 = _2775;
        _2835 = _2776;
        _2837 = _2777;
    }
    else
    {
        uint _2839 = _2365 + 2u;
        uint _2843 = _2365 + 10u;
        float _2857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2839].w)) * _903) * 0.949999988079071044921875);
        float _2858 = _2857 * _2857;
        float _2859 = cbLight._m0[_2839].x + _979;
        float _2860 = cbLight._m0[_2839].y + _980;
        float _2861 = cbLight._m0[_2839].z + _981;
        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
        float _2866 = _2865 * _2859;
        float _2867 = _2865 * _2860;
        float _2868 = _2865 * _2861;
        float _2869 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2839].xyz));
        float _4828 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2872 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2873 = dot(vec3(_900, _901, _902), vec3(_2866, _2867, _2868));
        float _4839 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2877 = dot(vec3(cbLight._m0[_2839].xyz), vec3(_2866, _2867, _2868));
        float _4850 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2881 = _2858 * _2858;
        float _2885 = ((_2876 * _2876) * (_2881 + (-1.0))) + 1.0;
        float _2892 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
        float _2899 = 1.0 - _2858;
        float _2909 = (0.5 / (((_2641 * ((_2872 * _2899) + _2858)) + 9.9999999392252902907785028219223e-09) + (((_2641 * _2899) + _2858) * _2872))) * _2872;
        float _4861 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2911 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2881 / ((_2885 * _2885) * 3.141590118408203125));
        float _2912 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2833 = (((((_2892 * _2663) + _1049) * cbLight._m0[_2843].x) * _2911) * _2912) + _2775;
        _2835 = (((((_2892 * _2665) + _1051) * cbLight._m0[_2843].y) * _2911) * _2912) + _2776;
        _2837 = (((((_2892 * _2666) + _1052) * cbLight._m0[_2843].z) * _2911) * _2912) + _2777;
    }
    float _2943;
    float _2945;
    float _2947;
    if (_2550)
    {
        _2943 = _2833;
        _2945 = _2835;
        _2947 = _2837;
    }
    else
    {
        uint _2954 = _2365 + 3u;
        uint _2958 = _2365 + 11u;
        float _2972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2954].w)) * _903) * 0.949999988079071044921875);
        float _2973 = _2972 * _2972;
        float _2974 = cbLight._m0[_2954].x + _979;
        float _2975 = cbLight._m0[_2954].y + _980;
        float _2976 = cbLight._m0[_2954].z + _981;
        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
        float _2981 = _2980 * _2974;
        float _2982 = _2980 * _2975;
        float _2983 = _2980 * _2976;
        float _2984 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2954].xyz));
        float _4877 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2987 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2988 = dot(vec3(_900, _901, _902), vec3(_2981, _2982, _2983));
        float _4888 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2991 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2992 = dot(vec3(cbLight._m0[_2954].xyz), vec3(_2981, _2982, _2983));
        float _4899 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2996 = _2973 * _2973;
        float _3000 = ((_2991 * _2991) * (_2996 + (-1.0))) + 1.0;
        float _3007 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
        float _3014 = 1.0 - _2973;
        float _3024 = (0.5 / (((_2641 * ((_2987 * _3014) + _2973)) + 9.9999999392252902907785028219223e-09) + (((_2641 * _3014) + _2973) * _2987))) * _2987;
        float _4910 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        float _3026 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2996 / ((_3000 * _3000) * 3.141590118408203125));
        float _3027 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
        _2943 = (((((_3007 * _2663) + _1049) * cbLight._m0[_2958].x) * _3026) * _3027) + _2833;
        _2945 = (((((_3007 * _2665) + _1051) * cbLight._m0[_2958].y) * _3026) * _3027) + _2835;
        _2947 = (((((_3007 * _2666) + _1052) * cbLight._m0[_2958].z) * _3026) * _3027) + _2837;
    }
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    float _3103;
    if (_2363.y == 0u)
    {
        uvec4 _3048 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3049 = _3048.x;
        uint _3060 = uint((float(_3048.y) * floor(float(uint(cbSceneParam._m0[85u].y * _988) / _3049))) + floor(float(uint(cbSceneParam._m0[85u].x * _987) / _3049)));
        float _3070 = (log2(_2141 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3071 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
        uint _3074 = uint(isnan(14.0) ? _3071 : (isnan(_3071) ? 14.0 : min(_3071, 14.0)));
        uvec4 _3079 = texelFetch(g_lightClusterGridBuffer, int(((_3074 << 2u) + (_3060 << 6u)) >> 2u));
        uint _3080 = _3079.x;
        uint _3081 = _3048.z;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        if (((((1u << ((_3081 >> 4u) & 15u)) + 4294967295u) & _3080) == 0u) || ((_3081 & 240u) == 0u))
        {
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
        }
        else
        {
            float _3161;
            float _3163;
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3304 = 0.0;
            float _3305 = 0.0;
            float _3306 = 0.0;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            uint _3310 = 0u;
            uint _3319;
            bool _3320;
            for (;;)
            {
                _3319 = texelFetch(g_lightClassification, int((((_3074 << 5u) + (_3060 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                _3320 = _3319 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3320)
                {
                    frontier_phi_66_pred = _3309;
                    frontier_phi_66_pred_1 = _3308;
                    frontier_phi_66_pred_2 = _3307;
                    frontier_phi_66_pred_3 = _3306;
                    frontier_phi_66_pred_4 = _3305;
                    frontier_phi_66_pred_5 = _3304;
                }
                else
                {
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    uint _3434;
                    _3428 = _3304;
                    _3429 = _3305;
                    _3430 = _3306;
                    _3431 = _3307;
                    _3432 = _3308;
                    _3433 = _3309;
                    _3434 = _3319;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    for (;;)
                    {
                        uint _3438 = uint(findLSB(_3434)) + (_3310 << 5u);
                        uint _3435 = (_3434 + 4294967295u) & _3434;
                        uint _3440 = _3438 * 48u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3460 = (_3438 * 48u) + 4u;
                        vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 3u)).x));
                        uint _3479 = (_3438 * 48u) + 8u;
                        vec3 _3490 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x));
                        float _3494 = _3454.x - _2139;
                        float _3495 = _3454.y - _2140;
                        float _3496 = _3454.z - _2141;
                        float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                        float _3500 = inversesqrt(_3497);
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3504 = dot(vec3(_1006, _1009, _1012), vec3(_3501, _3502, _3503));
                        float _3509 = 1.0 - (_3497 * _3454.w);
                        float _4936 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3510 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3511 = sqrt(_3497) * _3473.w;
                        float _3514 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3504) + _3515;
                        float _3521 = _3511 * _3511;
                        float _3525 = ((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3510) / ((_3521 * 0.699999988079071044921875) + 1.0);
                        float _3529 = (-0.0) - _2139;
                        float _3530 = (-0.0) - _2140;
                        float _3531 = (-0.0) - _2141;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3545 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                        float _3546 = 1.0 - _1081;
                        float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                        float _3554 = _3553 * _3553;
                        float _3555 = _3554 * _3554;
                        float _3556 = _3536 + _3501;
                        float _3557 = _3537 + _3502;
                        float _3558 = _3538 + _3503;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3566 = dot(vec3(_1006, _1009, _1012), vec3(_3536, _3537, _3538));
                        float _4952 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3569 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3570 = dot(vec3(_1006, _1009, _1012), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                        float _4963 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3573 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                        float _3578 = _3514 * _3554;
                        float _3579 = _3578 * _3578;
                        float _3582 = ((1.0 - _3579) * _3504) + _3579;
                        float _4974 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3583 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3584 = 1.0 - _3554;
                        float _3594 = (0.5 / (((_3583 * ((_3569 * _3584) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3583 * _3584) + _3554) * _3569))) * _3583;
                        float _4985 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3605 = (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) / ((_3577 * _3577) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125))) * _3510;
                        _3363 = (_3525 * _3473.x) + _3431;
                        _3364 = (_3525 * _3473.y) + _3432;
                        _3365 = (_3525 * _3473.z) + _3433;
                        _3360 = (_3605 * _3490.x) + _3428;
                        _3361 = (_3605 * _3490.y) + _3429;
                        _3362 = (_3605 * _3490.z) + _3430;
                        if (_3435 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3428 = _3360;
                            _3429 = _3361;
                            _3430 = _3362;
                            _3431 = _3363;
                            _3432 = _3364;
                            _3433 = _3365;
                            _3434 = _3435;
                        }
                    }
                    frontier_phi_66_pred = _3365;
                    frontier_phi_66_pred_1 = _3364;
                    frontier_phi_66_pred_2 = _3363;
                    frontier_phi_66_pred_3 = _3362;
                    frontier_phi_66_pred_4 = _3361;
                    frontier_phi_66_pred_5 = _3360;
                }
                _3171 = frontier_phi_66_pred;
                _3169 = frontier_phi_66_pred_1;
                _3167 = frontier_phi_66_pred_2;
                _3165 = frontier_phi_66_pred_3;
                _3163 = frontier_phi_66_pred_4;
                _3161 = frontier_phi_66_pred_5;
                uint _3311 = _3310 + 1u;
                if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3304 = _3161;
                    _3305 = _3163;
                    _3306 = _3165;
                    _3307 = _3167;
                    _3308 = _3169;
                    _3309 = _3171;
                    _3310 = _3311;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
        }
        uvec4 _3174 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3175 = _3174.z;
        uint _3177 = (_3175 >> 8u) & 15u;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        if (((4294967295u << _3177) & _3080) == 0u)
        {
            _3272 = _3160;
            _3274 = _3162;
            _3276 = _3164;
            _3278 = _3166;
            _3280 = _3168;
            _3282 = _3170;
        }
        else
        {
            float _3297 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
            float _3298 = _3297 * _2139;
            float _3299 = _3297 * _2140;
            float _3300 = _3297 * _2141;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3177 < ((_3175 >> 12u) & 15u))
            {
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3281;
                float _3283;
                float _3411 = _3160;
                float _3412 = _3162;
                float _3413 = _3164;
                float _3414 = _3166;
                float _3415 = _3168;
                float _3416 = _3170;
                uint _3417 = _3177;
                uint _3426;
                bool _3427;
                for (;;)
                {
                    _3426 = texelFetch(g_lightClassification, int((((_3074 << 5u) + (_3060 << 9u)) + (_3417 << 2u)) >> 2u)).x;
                    _3427 = _3426 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3427)
                    {
                        frontier_phi_72_pred = _3416;
                        frontier_phi_72_pred_1 = _3415;
                        frontier_phi_72_pred_2 = _3414;
                        frontier_phi_72_pred_3 = _3413;
                        frontier_phi_72_pred_4 = _3412;
                        frontier_phi_72_pred_5 = _3411;
                    }
                    else
                    {
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3623 = _3411;
                        float _3624 = _3412;
                        float _3625 = _3413;
                        float _3626 = _3414;
                        float _3627 = _3415;
                        float _3628 = _3416;
                        uint _3629 = _3426;
                        uint _3630;
                        vec4 _3655;
                        float _3656;
                        vec4 _3671;
                        vec3 _3683;
                        vec4 _3698;
                        vec4 _3713;
                        float _3759;
                        bool _3760;
                        for (;;)
                        {
                            uint _3640 = ((_3417 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3629));
                            _3630 = (_3629 + 4294967295u) & _3629;
                            uint _3642 = _3640 * 40u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3656 = _3655.w;
                            uint _3658 = (_3640 * 40u) + 4u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3640 * 40u) + 8u;
                            _3683 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x));
                            uint _3685 = (_3640 * 40u) + 16u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3640 * 40u) + 20u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3640 * 40u) + 24u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3734 = (_3640 * 40u) + 28u;
                            vec4 _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            _3759 = fma(_2141, _3747.z, fma(_2140, _3747.y, _3747.x * _2139)) + _3747.w;
                            _3760 = !((fma(_2141, _3728.z, fma(_2140, _3728.y, _3728.x * _2139)) + _3728.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3760)
                            {
                                float _3787 = _3655.x - _2139;
                                float _3788 = _3655.y - _2140;
                                float _3789 = _3655.z - _2141;
                                float _3790 = dot(vec3(_3787, _3788, _3789), vec3(_3787, _3788, _3789));
                                float _3793 = inversesqrt(_3790);
                                float _3794 = _3793 * _3787;
                                float _3795 = _3793 * _3788;
                                float _3796 = _3793 * _3789;
                                float _3800 = 1.0 - (_3790 / (_3656 * _3656));
                                float _4996 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3801 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3805 = sqrt(_3790) * _3671.w;
                                float _3807 = 1.39999997615814208984375 / (_3805 + 1.39999997615814208984375);
                                float _3808 = _3807 * _3807;
                                float _3811 = ((1.0 - _3808) * dot(vec3(_3794, _3795, _3796), vec3(_1006, _1009, _1012))) + _3808;
                                float _3814 = _3805 * _3805;
                                float _3818 = (fma(_2141, _3698.z, fma(_2140, _3698.y, _3698.x * _2139)) + _3698.w) / _3759;
                                float _3819 = (fma(_2141, _3713.z, fma(_2140, _3713.y, _3713.x * _2139)) + _3713.w) / _3759;
                                float _3823 = 1.0 - dot(vec2(_3818, _3819), vec2(_3818, _3819));
                                float _5012 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3825 = _3824 * (((isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0))) * _3801) / ((_3814 * 0.699999988079071044921875) + 1.0));
                                float _3837 = exp2(log2(1.0 / ((_3814 * 3.5) + 5.0)) * 0.25);
                                float _3838 = 1.0 - _1081;
                                float _3845 = sqrt(1.0 - ((1.0 - (_3838 * _3838)) * (1.0 - (_3837 * _3837))));
                                float _3846 = _3845 * _3845;
                                float _3847 = _3846 * _3846;
                                float _3848 = _3794 - _3298;
                                float _3849 = _3795 - _3299;
                                float _3850 = _3796 - _3300;
                                float _3854 = inversesqrt(dot(vec3(_3848, _3849, _3850), vec3(_3848, _3849, _3850)));
                                float _3858 = dot(vec3(_1006, _1009, _1012), vec3((-0.0) - _3298, (-0.0) - _3299, (-0.0) - _3300));
                                float _5023 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3861 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3862 = dot(vec3(_1006, _1009, _1012), vec3(_3854 * _3848, _3854 * _3849, _3854 * _3850));
                                float _5034 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3869 = ((_3865 * _3865) * (_3847 + (-1.0))) + 1.0;
                                float _3870 = _3807 * _3846;
                                float _3871 = _3870 * _3870;
                                float _3877 = ((1.0 - _3871) * dot(vec3(_1006, _1009, _1012), vec3(_3794, _3795, _3796))) + _3871;
                                float _5045 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3878 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3879 = 1.0 - _3846;
                                float _3889 = (0.5 / (((_3878 * ((_3861 * _3879) + _3846)) + 9.9999999392252902907785028219223e-09) + (((_3878 * _3879) + _3846) * _3861))) * _3878;
                                float _5056 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3899 = (_3824 * _3801) * (((_3847 * 3.1415927410125732421875) * (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0)))) / ((_3869 * _3869) * ((_3814 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3825 * _3671.y;
                                frontier_phi_78_pred_1 = _3825 * _3671.x;
                                frontier_phi_78_pred_2 = _3899 * _3683.z;
                                frontier_phi_78_pred_3 = _3899 * _3683.y;
                                frontier_phi_78_pred_4 = _3899 * _3683.x;
                                frontier_phi_78_pred_5 = _3825 * _3671.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3907 = frontier_phi_78_pred;
                            _3906 = frontier_phi_78_pred_1;
                            _3905 = frontier_phi_78_pred_2;
                            _3904 = frontier_phi_78_pred_3;
                            _3903 = frontier_phi_78_pred_4;
                            _3908 = frontier_phi_78_pred_5;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            if (_3630 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3630;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3615;
                        frontier_phi_72_pred_1 = _3614;
                        frontier_phi_72_pred_2 = _3613;
                        frontier_phi_72_pred_3 = _3612;
                        frontier_phi_72_pred_4 = _3611;
                        frontier_phi_72_pred_5 = _3610;
                    }
                    _3283 = frontier_phi_72_pred;
                    _3281 = frontier_phi_72_pred_1;
                    _3279 = frontier_phi_72_pred_2;
                    _3277 = frontier_phi_72_pred_3;
                    _3275 = frontier_phi_72_pred_4;
                    _3273 = frontier_phi_72_pred_5;
                    uint _3418 = _3417 + 1u;
                    if (_3418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3411 = _3273;
                        _3412 = _3275;
                        _3413 = _3277;
                        _3414 = _3279;
                        _3415 = _3281;
                        _3416 = _3283;
                        _3417 = _3418;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3283;
                frontier_phi_60_61_ladder_1 = _3281;
                frontier_phi_60_61_ladder_2 = _3277;
                frontier_phi_60_61_ladder_3 = _3275;
                frontier_phi_60_61_ladder_4 = _3273;
                frontier_phi_60_61_ladder_5 = _3279;
            }
            else
            {
                frontier_phi_60_61_ladder = _3170;
                frontier_phi_60_61_ladder_1 = _3168;
                frontier_phi_60_61_ladder_2 = _3164;
                frontier_phi_60_61_ladder_3 = _3162;
                frontier_phi_60_61_ladder_4 = _3160;
                frontier_phi_60_61_ladder_5 = _3166;
            }
            _3272 = frontier_phi_60_61_ladder_4;
            _3274 = frontier_phi_60_61_ladder_3;
            _3276 = frontier_phi_60_61_ladder_2;
            _3278 = frontier_phi_60_61_ladder_5;
            _3280 = frontier_phi_60_61_ladder_1;
            _3282 = frontier_phi_60_61_ladder;
        }
        float _3287 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
        _3093 = (_3287 * _3278) + _2605;
        _3095 = (_3287 * _3280) + _2607;
        _3097 = (_3287 * _3282) + _2609;
        _3099 = ((_3272 * _1049) * _3287) + _2943;
        _3101 = ((_3274 * _1051) * _3287) + _2945;
        _3103 = ((_3276 * _1052) * _3287) + _2947;
    }
    else
    {
        _3093 = _2605;
        _3095 = _2607;
        _3097 = _2609;
        _3099 = _2943;
        _3101 = _2945;
        _3103 = _2947;
    }
    float _5072 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _5083 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _5094 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    uint _3123 = _283 + 6u;
    float _3131 = _987 / cbSceneParam._m0[86u].x;
    float _3132 = _988 / cbSceneParam._m0[86u].y;
    vec4 _3146 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3131, _3132, (log2((isnan(cbSceneParam._m0[77u].w) ? _922 : (isnan(_922) ? cbSceneParam._m0[77u].w : min(_922, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3148 = _3146.x;
    float _3149 = _3146.y;
    float _3150 = _3146.z;
    float _3151 = _3146.w;
    float _3222;
    float _3224;
    float _3226;
    float _3228;
    if (_922 > cbSceneParam._m0[78u].w)
    {
        float _3185 = isnan(_922) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _922 : min(cbSceneParam._m0[80u].w, _922));
        float _3186 = _3185 / _922;
        float _3197 = _3186 * _972;
        float _3198 = _973 * _3186;
        float _3199 = (-0.0) - _3198;
        float _3200 = _3186 * _974;
        float _3202 = (cbSceneParam._m0[77u].w * _3199) / _3185;
        float _3203 = _3202 + cbSceneParam._m0[79u].w;
        float _3204 = cbSceneParam._m0[79u].w - _3198;
        float _3210 = sqrt(((_3197 * _3197) + (_3198 * _3198)) + (_3200 * _3200));
        float _3213 = (1.0 - (cbSceneParam._m0[77u].w / _3185)) * _3210;
        float _3218 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3220 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3373;
        if (abs((_3199 - _3202) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3373 = ((((_3203 > 0.0) ? exp2(_3218 * _3203) : (2.0 - exp2(_3220 * _3203))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3213;
        }
        else
        {
            float _3333 = 1.0 / cbSceneParam._m0[80u].x;
            float _3334 = isnan(_3204) ? _3203 : (isnan(_3203) ? _3204 : max(_3203, _3204));
            float _3335 = isnan(_3204) ? _3203 : (isnan(_3203) ? _3204 : min(_3203, _3204));
            float _3344 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : min(_3334, 0.0));
            float _3345 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : min(_3335, 0.0));
            _3373 = ((abs(_3210 / _3199) * cbSceneParam._m0[80u].y) * ((((_3344 - _3345) * 2.0) - ((exp2(_3218 * (isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0)))) - exp2(_3218 * (isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))))) * _3333)) - ((exp2(_3220 * _3344) - exp2(_3220 * _3345)) * _3333))) + (_3213 * cbSceneParam._m0[80u].z);
        }
        vec4 _3375 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3131, _3132, 1.0), 0.0);
        float _3384 = exp2((_3373 * (-1.44269502162933349609375)) * (1.0 - _3375.w));
        float _3385 = log2(_3384);
        float _3401 = log2(_3151);
        _3222 = (exp2(_3401 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].x)) * _3375.x) / cbSceneParam._m0[78u].x)) + _3148;
        _3224 = (exp2(_3401 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].y)) * _3375.y) / cbSceneParam._m0[78u].y)) + _3149;
        _3226 = (exp2(_3401 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].z)) * _3375.z) / cbSceneParam._m0[78u].z)) + _3150;
        _3228 = _3384 * _3151;
    }
    else
    {
        _3222 = _3148;
        _3224 = _3149;
        _3226 = _3150;
        _3228 = _3151;
    }
    float _3240 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3241 = _3240 == 3.0;
    float _3242 = log2(_3228);
    float _3249 = exp2(_3242 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3093 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1065))) + ((_3099 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3250 = exp2(_3242 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3095 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1065))) + ((_3101 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3251 = exp2(_3242 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3097 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1065))) + ((_3103 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1873)) * cbPerFrame._m0[3u].x));
    float _3260 = (_3240 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3260 * (_3241 ? _3249 : (_3249 + (cbSceneParam._m0[72u].w * _3222)));
    SV_Target.y = _3260 * (_3241 ? _3250 : (_3250 + (cbSceneParam._m0[72u].w * _3224)));
    SV_Target.z = _3260 * (_3241 ? _3251 : (_3251 + (cbSceneParam._m0[72u].w * _3226)));
    SV_Target.w = cbInstanceData._m0[_3123].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3123].w;
}


