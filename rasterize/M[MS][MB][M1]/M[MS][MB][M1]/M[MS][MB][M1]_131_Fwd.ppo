#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1294;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3620 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _388) + _457;
    float _469 = ((((_436.x - _455) * _388) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _388) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3631 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _510 = _508.x;
    float _511 = 1.0 - _510;
    float _517 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _520 = ((isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : min(_517, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _529 = (_520 - ((((((_510 - _511) * cbMtdParam._m0[24u].z) + _511) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _520))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3652 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _537 = (_530 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _538 = (_530 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _539 = (_530 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _581 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_553 - _554) * cbMtdParam._m0[24u].w) + _554) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3663 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _590 = ((((cbMtdParam._m0[10u].x - _537) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _582) + _537;
    float _591 = ((((cbMtdParam._m0[10u].y - _538) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _582) + _538;
    float _592 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _539)) * _582) + _539;
    vec4 _618 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _620 = _618.x;
    float _638 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _620) * _388) + _620;
    float _642 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _638) * cbMtdParam._m0[19u].z) + _638;
    float _644 = _642 - (_642 * _530);
    float _646 = _644 - (_644 * _582);
    vec4 _660 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _667 = (_660.x * 2.0) + (-1.0);
    float _668 = (_660.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3674 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _677 = (_530 * (_660.z - _466)) + _466;
    float _680 = ((cbMtdParam._m0[23u].y - _677) * _582) + _677;
    vec4 _699 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _705 = (_699.x * 2.0) + (-1.0);
    float _706 = (_699.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3685 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _724 = (((_667 - _469) + (cbMtdParam._m0[21u].x * _469)) * _530) + _469;
    float _725 = (((_668 - _471) + (cbMtdParam._m0[21u].x * _471)) * _530) + _471;
    float _726 = (_530 * (sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) - _477)) + _477;
    float _737 = (((_705 - _724) + (_724 * cbMtdParam._m0[22u].z)) * _582) + _724;
    float _738 = (((_706 - _725) + (_725 * cbMtdParam._m0[22u].z)) * _582) + _725;
    float _739 = ((sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) - _726) * _582) + _726;
    float _741 = cbMtdParam._m0[22u].x + _490.w;
    float _744 = fma(_739, _238 * NORMAL.x, fma(_738, _245 * TANGENT.x, (_231 * _223) * _737));
    float _747 = fma(_739, _238 * NORMAL.y, fma(_738, _245 * TANGENT.y, (_231 * _224) * _737));
    float _750 = fma(_739, _238 * NORMAL.z, fma(_738, _245 * TANGENT.z, (_231 * _225) * _737));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _3696 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _758 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3718 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3729 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3740 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3751 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _763 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _777 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _827 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _817);
    float _828 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _817);
    float _829 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _817);
    float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
    float _834 = _827 * _833;
    float _835 = _828 * _833;
    float _836 = _829 * _833;
    float _842 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _843 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _861 = fma(_757, cbSceneParam._m0[5u].z, fma(_756, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _755));
    float _864 = fma(_757, cbSceneParam._m0[6u].z, fma(_756, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _755));
    float _867 = fma(_757, cbSceneParam._m0[7u].z, fma(_756, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _755));
    uint _881 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _887 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_881].x;
    float _888 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_881].y;
    float _889 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_881].z;
    float _3762 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _893 = 1.0 - _763;
    float _894 = _890 * _893;
    float _895 = _891 * _893;
    float _896 = _892 * _893;
    float _901 = (_890 + (-0.039999999105930328369140625)) * _763;
    float _902 = (_891 + (-0.039999999105930328369140625)) * _763;
    float _903 = (_892 + (-0.039999999105930328369140625)) * _763;
    float _904 = _901 + 0.039999999105930328369140625;
    float _906 = _902 + 0.039999999105930328369140625;
    float _907 = _903 + 0.039999999105930328369140625;
    vec4 _916 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _842, cbSceneParam._m0[86u].y * _843));
    float _920 = ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * TEXCOORD_5.w) * _916.x;
    float _921 = dot(vec3(_755, _756, _757), vec3(_834, _835, _836));
    float _924 = _921 * 2.0;
    float _928 = (_924 * _755) - _834;
    float _929 = (_924 * _756) - _835;
    float _930 = (_924 * _757) - _836;
    float _934 = abs(dot(vec3(_834, _835, _836), vec3(_755, _756, _757)));
    float _3795 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _936 = sqrt(_758);
    float _949 = exp2((_936 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_936 * 3.0));
    float _955 = (1.0 - _949) * ((_936 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _956 = _949 * _936;
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1293;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1018 = fma(_992, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984));
        float _1022 = fma(_992, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984));
        float _1026 = fma(_992, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984));
        float _1051 = _984 + _755;
        float _1052 = _988 + _756;
        float _1053 = _992 + _757;
        float _1063 = fma(_1053, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051)) - _1018;
        float _1064 = fma(_1053, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051)) - _1022;
        float _1065 = fma(_1053, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051)) - _1026;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1018 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1022 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[34u].z) + ((((((_1026 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1121 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1087.x + (-0.5));
        float _1123 = _1121 * (_1087.y + (-0.5));
        float _1124 = _1121 * (_1087.z + (-0.5));
        float _1131 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1094.x + (-0.5));
        float _1133 = _1131 * (_1094.y + (-0.5));
        float _1134 = _1131 * (_1094.z + (-0.5));
        float _1141 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1101.x + (-0.5));
        float _1143 = _1141 * (_1101.y + (-0.5));
        float _1144 = _1141 * (_1101.z + (-0.5));
        float _1151 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1108.x + (-0.5));
        float _1153 = _1151 * (_1108.y + (-0.5));
        float _1154 = _1151 * (_1108.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1175 = (dot(vec3(_755, _756, _757), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1185 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3843 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1187 + 1.0))) + _1192) * _1155;
        float _1202 = _1123 * 0.5;
        float _1203 = _1133 * 0.5;
        float _1204 = _1143 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_755, _756, _757), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3876 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1229 + 1.0))) + _1234) * _1156;
        float _1244 = _1124 * 0.5;
        float _1245 = _1134 * 0.5;
        float _1246 = _1144 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_755, _756, _757), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3909 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1271 + 1.0))) + _1276) * _1157;
        _1293 = _1124;
        _1295 = _1123;
        _1296 = _1122;
        _1297 = _1134;
        _1298 = _1133;
        _1299 = _1132;
        _1300 = _1144;
        _1301 = _1143;
        _1302 = _1142;
        _1303 = _1157;
        _1304 = _1156;
        _1305 = _1155;
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _1294;
        _1295 = _1294;
        _1296 = _1294;
        _1297 = _1294;
        _1298 = _1294;
        _1299 = _1294;
        _1300 = _1294;
        _1301 = _1294;
        _1302 = _1294;
        _1303 = _1294;
        _1304 = _1294;
        _1305 = _1294;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_992, cbModelParam._m0[30u].z, fma(_988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984));
        float _1337 = fma(_992, cbModelParam._m0[31u].z, fma(_988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984));
        float _1341 = fma(_992, cbModelParam._m0[32u].z, fma(_988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984));
        float _1364 = _984 + _755;
        float _1365 = _988 + _756;
        float _1366 = _992 + _757;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_755, _756, _757), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3972 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_755, _756, _757), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4005 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_755, _756, _757), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4038 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1294;
        _1603 = _1294;
        _1604 = _1294;
        _1605 = _1294;
        _1606 = _1294;
        _1607 = _1294;
        _1608 = _1294;
        _1609 = _1294;
        _1610 = _1294;
        _1611 = _1294;
        _1612 = _1294;
        _1613 = _1294;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1306)) + _1306;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1307)) + _1307;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1308)) + _1308;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _928 * 0.5;
    float _1671 = _929 * 0.5;
    float _1672 = _930 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1293, _1297, _1300, _1303));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_992, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_992, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_992, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_930, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928));
        float _1800 = fma(_930, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928));
        float _1803 = fma(_930, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1831 = frontier_phi_14_12_ladder;
        }
        float _2033;
        if (_1800 > 0.0)
        {
            _2033 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2033 = frontier_phi_23_19_ladder;
        }
        float _2287;
        if (_1803 > 0.0)
        {
            _2287 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2287 = frontier_phi_35_30_ladder;
        }
        float _2289 = isnan(_2033) ? _1831 : (isnan(_1831) ? _2033 : min(_1831, _2033));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1797) + _1786;
        float _2295 = (_2290 * _1800) + _1790;
        float _2296 = (_2290 * _1803) + _1794;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_13_35_ladder = _2424.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2424.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2424.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_13_35_ladder_2;
        _1821 = frontier_phi_13_35_ladder_1;
        _1823 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_928, _929, _930), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1881 = fma(_992, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984)) + cbModelParam._m0[21u].w;
        float _1885 = fma(_992, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984)) + cbModelParam._m0[22u].w;
        float _1889 = fma(_992, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984)) + cbModelParam._m0[23u].w;
        float _1892 = fma(_930, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928));
        float _1895 = fma(_930, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928));
        float _1898 = fma(_930, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928));
        float _2038;
        if (_1892 > 0.0)
        {
            _2038 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2038 = frontier_phi_25_21_ladder;
        }
        float _2314;
        if (_1895 > 0.0)
        {
            _2314 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2314 = frontier_phi_37_32_ladder;
        }
        float _2527;
        if (_1898 > 0.0)
        {
            _2527 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2527 = frontier_phi_46_43_ladder;
        }
        float _2529 = isnan(_2314) ? _2038 : (isnan(_2038) ? _2314 : min(_2038, _2314));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _1892) + _1881;
        float _2535 = (_2530 * _1895) + _1885;
        float _2536 = (_2530 * _1898) + _1889;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2537;
        float _2540 = _2537 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2536 > _2540) || ((_2536 < _2538) || ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 < _2538) || (_2534 > _2540))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2536, cbModelParam._m0[17u].z, fma(_2535, cbModelParam._m0[17u].y, _2534 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2536, cbModelParam._m0[18u].z, fma(_2535, cbModelParam._m0[18u].y, _2534 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2536, cbModelParam._m0[19u].z, fma(_2535, cbModelParam._m0[19u].y, _2534 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_22_46_ladder = _2735.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2735.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2735.x * cbModelParam._m0[1u].z;
        }
        _1917 = frontier_phi_22_46_ladder_2;
        _1919 = frontier_phi_22_46_ladder_1;
        _1921 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_928, _929, _930), _1828);
        _1917 = _1901.x * cbModelParam._m0[1u].z;
        _1919 = _1901.y * cbModelParam._m0[1u].z;
        _1921 = _1901.z * cbModelParam._m0[1u].z;
    }
    float _1934 = (((_955 * _904) + _956) * _920) * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1936 = (((_955 * _906) + _956) * _920) * ((cbModelParam._m0[1u].w * (_1919 - _1821)) + _1821);
    float _1938 = (((_955 * _907) + _956) * _920) * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1941 = fma(_1938, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1934 * cbSceneParam._m0[89u].x));
    float _1944 = fma(_1938, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1934 * cbSceneParam._m0[90u].x));
    float _1947 = fma(_1938, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1934 * cbSceneParam._m0[91u].x));
    uvec4 _1957 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1959 = _1957.x * 14u;
    uint _1960 = _1959 + 13u;
    float _1967 = _920 + (-1.0);
    float _1972 = (cbLight._m0[_1960].x * _1967) + 1.0;
    float _1973 = (cbLight._m0[_1960].y * _1967) + 1.0;
    float _1974 = (cbLight._m0[_1960].z * _1967) + 1.0;
    float _1975 = (cbLight._m0[_1960].w * _1967) + 1.0;
    uint _1976 = _1959 + 5u;
    float _1982 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _1986 = _1959 + 4u;
    float _1992 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _1996 = _1959 | 1u;
    float _2007 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_755, _756, _757));
    float _2010 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_755, _756, _757));
    float _4174 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _4185 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2015 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.3183098733425140380859375;
    float _2017 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _2024 = ((cbLight._m0[_1976].x * _1982) * _2017) + ((cbLight._m0[_1986].x * _1992) * _2015);
    float _2025 = ((_1982 * cbLight._m0[_1976].y) * _2017) + ((_1992 * cbLight._m0[_1986].y) * _2015);
    float _2026 = ((_1982 * cbLight._m0[_1976].z) * _2017) + ((_1992 * cbLight._m0[_1986].z) * _2015);
    uvec4 _2030 = floatBitsToUint(cbLight._m0[_1959 + 12u]);
    bool _2032 = _2030.x == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_2032)
    {
        _2043 = _2024;
        _2045 = _2025;
        _2047 = _2026;
    }
    else
    {
        uint _2051 = _1959 + 6u;
        float _2067 = (dot(vec3(cbLight._m0[_1959 + 2u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4196 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2070 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2043 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _2024;
        _2045 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _2025;
        _2047 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _2026;
    }
    bool _2050 = _2030.y == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2050)
    {
        _2088 = _2043;
        _2090 = _2045;
        _2092 = _2047;
    }
    else
    {
        uint _2258 = _1959 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1959 + 3u].xyz), vec3(_755, _756, _757)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4212 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2277 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2088 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2043;
        _2090 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2045;
        _2092 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2047;
    }
    uint _2095 = _1959 + 8u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _758) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1959].x + _834;
    float _2111 = cbLight._m0[_1959].y + _835;
    float _2112 = cbLight._m0[_1959].z + _836;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1959].xyz));
    float _4228 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2124 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2125 = dot(vec3(_755, _756, _757), vec3(_2117, _2118, _2119));
    float _4250 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2117, _2118, _2119));
    float _4261 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2109 * _2109;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
    float _2146 = 0.959999978542327880859375 - _901;
    float _2148 = 0.959999978542327880859375 - _902;
    float _2149 = 0.959999978542327880859375 - _903;
    float _2156 = 1.0 - _2109;
    float _2167 = (0.5 / (((_2124 * ((_2123 * _2156) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2156) + _2109) * _2123))) * _2123;
    float _4272 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    uint _2180 = _1959 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _758) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1996].x + _834;
    float _2194 = cbLight._m0[_1996].y + _835;
    float _2195 = cbLight._m0[_1996].z + _836;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1996].xyz));
    float _4283 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2207 = dot(vec3(_755, _756, _757), vec3(_2200, _2201, _2202));
    float _4294 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2200, _2201, _2202));
    float _4305 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2233 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2124 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2233) + _2192) * _2206))) * _2206;
    float _4316 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2255 = (((((_2226 * _2146) + _904) * cbLight._m0[_2180].x) * _2245) * _1982) + (((((_2145 * _2146) + _904) * cbLight._m0[_2095].x) * _2169) * _1992);
    float _2256 = (((((_2226 * _2148) + _906) * cbLight._m0[_2180].y) * _2245) * _1982) + (((((_2145 * _2148) + _906) * cbLight._m0[_2095].y) * _2169) * _1992);
    float _2257 = (((((_2226 * _2149) + _907) * cbLight._m0[_2180].z) * _2245) * _1982) + (((((_2145 * _2149) + _907) * cbLight._m0[_2095].z) * _2169) * _1992);
    float _2319;
    float _2321;
    float _2323;
    if (_2032)
    {
        _2319 = _2255;
        _2321 = _2256;
        _2323 = _2257;
    }
    else
    {
        uint _2325 = _1959 + 2u;
        uint _2329 = _1959 + 10u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _758) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _834;
        float _2346 = cbLight._m0[_2325].y + _835;
        float _2347 = cbLight._m0[_2325].z + _836;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2325].xyz));
        float _4327 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2359 = dot(vec3(_755, _756, _757), vec3(_2352, _2353, _2354));
        float _4338 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4349 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
        float _2385 = 1.0 - _2344;
        float _2395 = (0.5 / (((_2124 * ((_2358 * _2385) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2385) + _2344) * _2358))) * _2358;
        float _4360 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2319 = (((((_2378 * _2146) + _904) * cbLight._m0[_2329].x) * _2397) * _2398) + _2255;
        _2321 = (((((_2378 * _2148) + _906) * cbLight._m0[_2329].y) * _2397) * _2398) + _2256;
        _2323 = (((((_2378 * _2149) + _907) * cbLight._m0[_2329].z) * _2397) * _2398) + _2257;
    }
    float _2433;
    float _2435;
    float _2437;
    if (_2050)
    {
        _2433 = _2319;
        _2435 = _2321;
        _2437 = _2323;
    }
    else
    {
        uint _2444 = _1959 + 3u;
        uint _2448 = _1959 + 11u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _758) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _834;
        float _2465 = cbLight._m0[_2444].y + _835;
        float _2466 = cbLight._m0[_2444].z + _836;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_2444].xyz));
        float _4376 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2478 = dot(vec3(_755, _756, _757), vec3(_2471, _2472, _2473));
        float _4387 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4398 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2124 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2504) + _2463) * _2477))) * _2477;
        float _4409 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2433 = (((((_2497 * _2146) + _904) * cbLight._m0[_2448].x) * _2516) * _2517) + _2319;
        _2435 = (((((_2497 * _2148) + _906) * cbLight._m0[_2448].y) * _2516) * _2517) + _2321;
        _2437 = (((((_2497 * _2149) + _907) * cbLight._m0[_2448].z) * _2516) * _2517) + _2323;
    }
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_1957.y == 0u)
    {
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2592;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2592;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2592;
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.x;
        uint _2619 = uint((float(_2607.y) * floor(float(uint(cbSceneParam._m0[85u].y * _843) / _2608))) + floor(float(uint(cbSceneParam._m0[85u].x * _842) / _2608)));
        float _2629 = (log2(_2595 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2630 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        uint _2633 = uint(isnan(14.0) ? _2630 : (isnan(_2630) ? 14.0 : min(_2630, 14.0)));
        uvec4 _2638 = texelFetch(g_lightClusterGridBuffer, int(((_2633 << 2u) + (_2619 << 6u)) >> 2u));
        uint _2639 = _2638.x;
        uint _2640 = _2607.z;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((((1u << ((_2640 >> 4u) & 15u)) + 4294967295u) & _2639) == 0u) || ((_2640 & 240u) == 0u))
        {
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
        }
        else
        {
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            uint _2891 = 0u;
            uint _2900;
            bool _2901;
            for (;;)
            {
                _2900 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                _2901 = _2900 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2901)
                {
                    frontier_phi_61_pred = _2885;
                    frontier_phi_61_pred_1 = _2890;
                    frontier_phi_61_pred_2 = _2889;
                    frontier_phi_61_pred_3 = _2888;
                    frontier_phi_61_pred_4 = _2887;
                    frontier_phi_61_pred_5 = _2886;
                }
                else
                {
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    uint _3015;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2900;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    for (;;)
                    {
                        uint _3019 = uint(findLSB(_3015)) + (_2891 << 5u);
                        uint _3016 = (_3015 + 4294967295u) & _3015;
                        uint _3021 = _3019 * 48u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3041 = (_3019 * 48u) + 4u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3060 = (_3019 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3035.x - _2593;
                        float _3076 = _3035.y - _2594;
                        float _3077 = _3035.z - _2595;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3085 = dot(vec3(_861, _864, _867), vec3(_3082, _3083, _3084));
                        float _3090 = 1.0 - (_3078 * _3035.w);
                        float _4435 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3092 = sqrt(_3078) * _3054.w;
                        float _3095 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3085) + _3096;
                        float _3102 = _3092 * _3092;
                        float _3106 = ((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3091) / ((_3102 * 0.699999988079071044921875) + 1.0);
                        float _3110 = (-0.0) - _2593;
                        float _3111 = (-0.0) - _2594;
                        float _3112 = (-0.0) - _2595;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3127 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                        float _3128 = 1.0 - _936;
                        float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                        float _3136 = _3135 * _3135;
                        float _3137 = _3136 * _3136;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3148 = dot(vec3(_861, _864, _867), vec3(_3117, _3118, _3119));
                        float _4451 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3152 = dot(vec3(_861, _864, _867), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                        float _4462 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                        float _3160 = _3095 * _3136;
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3085) + _3161;
                        float _4473 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3166 = 1.0 - _3136;
                        float _3176 = (0.5 / (((_3165 * ((_3151 * _3166) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3136) * _3151))) * _3165;
                        float _4484 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3187 = (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3159 * _3159) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125))) * _3091;
                        _2944 = (_3106 * _3054.x) + _3012;
                        _2945 = (_3106 * _3054.y) + _3013;
                        _2946 = (_3106 * _3054.z) + _3014;
                        _2941 = (_3187 * _3071.x) + _3009;
                        _2942 = (_3187 * _3071.y) + _3010;
                        _2943 = (_3187 * _3071.z) + _3011;
                        if (_3016 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _3016;
                        }
                    }
                    frontier_phi_61_pred = _2941;
                    frontier_phi_61_pred_1 = _2946;
                    frontier_phi_61_pred_2 = _2945;
                    frontier_phi_61_pred_3 = _2944;
                    frontier_phi_61_pred_4 = _2943;
                    frontier_phi_61_pred_5 = _2942;
                }
                _2741 = frontier_phi_61_pred;
                _2751 = frontier_phi_61_pred_1;
                _2749 = frontier_phi_61_pred_2;
                _2747 = frontier_phi_61_pred_3;
                _2745 = frontier_phi_61_pred_4;
                _2743 = frontier_phi_61_pred_5;
                uint _2892 = _2891 + 1u;
                if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2885 = _2741;
                    _2886 = _2743;
                    _2887 = _2745;
                    _2888 = _2747;
                    _2889 = _2749;
                    _2890 = _2751;
                    _2891 = _2892;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
        }
        uvec4 _2754 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2755 = _2754.z;
        uint _2757 = (_2755 >> 8u) & 15u;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((4294967295u << _2757) & _2639) == 0u)
        {
            _2853 = _2740;
            _2855 = _2742;
            _2857 = _2744;
            _2859 = _2746;
            _2861 = _2748;
            _2863 = _2750;
        }
        else
        {
            float _2878 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
            float _2879 = _2878 * _2593;
            float _2880 = _2878 * _2594;
            float _2881 = _2878 * _2595;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2757 < ((_2755 >> 12u) & 15u))
            {
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2992 = _2740;
                float _2993 = _2742;
                float _2994 = _2744;
                float _2995 = _2746;
                float _2996 = _2748;
                float _2997 = _2750;
                uint _2998 = _2757;
                uint _3007;
                bool _3008;
                for (;;)
                {
                    _3007 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                    _3008 = _3007 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3008)
                    {
                        frontier_phi_67_pred = _2995;
                        frontier_phi_67_pred_1 = _2996;
                        frontier_phi_67_pred_2 = _2997;
                        frontier_phi_67_pred_3 = _2994;
                        frontier_phi_67_pred_4 = _2993;
                        frontier_phi_67_pred_5 = _2992;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        uint _3211 = _3007;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3280;
                        vec4 _3296;
                        float _3342;
                        bool _3343;
                        for (;;)
                        {
                            uint _3222 = ((_2998 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3267 = (_3222 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3283 = (_3222 * 40u) + 20u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3222 * 40u) + 24u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3317 = (_3222 * 40u) + 28u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3342 = fma(_2595, _3330.z, fma(_2594, _3330.y, _3330.x * _2593)) + _3330.w;
                            _3343 = !((fma(_2595, _3311.z, fma(_2594, _3311.y, _3311.x * _2593)) + _3311.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3343)
                            {
                                float _3370 = _3237.x - _2593;
                                float _3371 = _3237.y - _2594;
                                float _3372 = _3237.z - _2595;
                                float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                                float _3376 = inversesqrt(_3373);
                                float _3377 = _3376 * _3370;
                                float _3378 = _3376 * _3371;
                                float _3379 = _3376 * _3372;
                                float _3383 = 1.0 - (_3373 / (_3238 * _3238));
                                float _4495 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3388 = sqrt(_3373) * _3253.w;
                                float _3390 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                                float _3391 = _3390 * _3390;
                                float _3394 = ((1.0 - _3391) * dot(vec3(_3377, _3378, _3379), vec3(_861, _864, _867))) + _3391;
                                float _3397 = _3388 * _3388;
                                float _3401 = (fma(_2595, _3280.z, fma(_2594, _3280.y, _3280.x * _2593)) + _3280.w) / _3342;
                                float _3402 = (fma(_2595, _3296.z, fma(_2594, _3296.y, _3296.x * _2593)) + _3296.w) / _3342;
                                float _3406 = 1.0 - dot(vec2(_3401, _3402), vec2(_3401, _3402));
                                float _4511 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3408 = _3407 * (((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3384) / ((_3397 * 0.699999988079071044921875) + 1.0));
                                float _3420 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                                float _3421 = 1.0 - _936;
                                float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                                float _3429 = _3428 * _3428;
                                float _3430 = _3429 * _3429;
                                float _3431 = _3377 - _2879;
                                float _3432 = _3378 - _2880;
                                float _3433 = _3379 - _2881;
                                float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                                float _3441 = dot(vec3(_861, _864, _867), vec3((-0.0) - _2879, (-0.0) - _2880, (-0.0) - _2881));
                                float _4522 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3445 = dot(vec3(_861, _864, _867), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                                float _4533 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                                float _3453 = _3390 * _3429;
                                float _3454 = _3453 * _3453;
                                float _3460 = ((1.0 - _3454) * dot(vec3(_861, _864, _867), vec3(_3377, _3378, _3379))) + _3454;
                                float _4544 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3462 = 1.0 - _3429;
                                float _3472 = (0.5 / (((_3461 * ((_3444 * _3462) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3429) * _3444))) * _3461;
                                float _4555 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3482 = (_3407 * _3384) * (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3452 * _3452) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3482 * _3265.x;
                                frontier_phi_73_pred_1 = _3482 * _3265.y;
                                frontier_phi_73_pred_2 = _3408 * _3253.z;
                                frontier_phi_73_pred_3 = _3408 * _3253.y;
                                frontier_phi_73_pred_4 = _3408 * _3253.x;
                                frontier_phi_73_pred_5 = _3482 * _3265.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3486 = frontier_phi_73_pred;
                            _3487 = frontier_phi_73_pred_1;
                            _3491 = frontier_phi_73_pred_2;
                            _3490 = frontier_phi_73_pred_3;
                            _3489 = frontier_phi_73_pred_4;
                            _3488 = frontier_phi_73_pred_5;
                            _3195 = _3489 + _3208;
                            _3196 = _3490 + _3209;
                            _3197 = _3491 + _3210;
                            _3192 = _3486 + _3205;
                            _3193 = _3487 + _3206;
                            _3194 = _3488 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3195;
                        frontier_phi_67_pred_1 = _3196;
                        frontier_phi_67_pred_2 = _3197;
                        frontier_phi_67_pred_3 = _3194;
                        frontier_phi_67_pred_4 = _3193;
                        frontier_phi_67_pred_5 = _3192;
                    }
                    _2860 = frontier_phi_67_pred;
                    _2862 = frontier_phi_67_pred_1;
                    _2864 = frontier_phi_67_pred_2;
                    _2858 = frontier_phi_67_pred_3;
                    _2856 = frontier_phi_67_pred_4;
                    _2854 = frontier_phi_67_pred_5;
                    uint _2999 = _2998 + 1u;
                    if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2992 = _2854;
                        _2993 = _2856;
                        _2994 = _2858;
                        _2995 = _2860;
                        _2996 = _2862;
                        _2997 = _2864;
                        _2998 = _2999;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2862;
                frontier_phi_55_56_ladder_1 = _2864;
                frontier_phi_55_56_ladder_2 = _2860;
                frontier_phi_55_56_ladder_3 = _2858;
                frontier_phi_55_56_ladder_4 = _2856;
                frontier_phi_55_56_ladder_5 = _2854;
            }
            else
            {
                frontier_phi_55_56_ladder = _2748;
                frontier_phi_55_56_ladder_1 = _2750;
                frontier_phi_55_56_ladder_2 = _2746;
                frontier_phi_55_56_ladder_3 = _2744;
                frontier_phi_55_56_ladder_4 = _2742;
                frontier_phi_55_56_ladder_5 = _2740;
            }
            _2853 = frontier_phi_55_56_ladder_5;
            _2855 = frontier_phi_55_56_ladder_4;
            _2857 = frontier_phi_55_56_ladder_3;
            _2859 = frontier_phi_55_56_ladder_2;
            _2861 = frontier_phi_55_56_ladder;
            _2863 = frontier_phi_55_56_ladder_1;
        }
        float _2868 = isnan(1.0) ? _920 : (isnan(_920) ? 1.0 : min(_920, 1.0));
        _2652 = (_2868 * _2859) + _2088;
        _2654 = (_2868 * _2861) + _2090;
        _2656 = (_2868 * _2863) + _2092;
        _2658 = ((_2853 * _904) * _2868) + _2433;
        _2660 = ((_2855 * _906) * _2868) + _2435;
        _2662 = ((_2857 * _907) * _2868) + _2437;
    }
    else
    {
        _2652 = _2088;
        _2654 = _2090;
        _2656 = _2092;
        _2658 = _2433;
        _2660 = _2435;
        _2662 = _2437;
    }
    float _4571 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4582 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4593 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    uint _2682 = _251 + 6u;
    float _2690 = _842 / cbSceneParam._m0[86u].x;
    float _2691 = _843 / cbSceneParam._m0[86u].y;
    vec4 _2705 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, (log2((isnan(cbSceneParam._m0[77u].w) ? _777 : (isnan(_777) ? cbSceneParam._m0[77u].w : min(_777, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2707 = _2705.x;
    float _2708 = _2705.y;
    float _2709 = _2705.z;
    float _2710 = _2705.w;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_777 > cbSceneParam._m0[78u].w)
    {
        float _2765 = isnan(_777) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _777 : min(cbSceneParam._m0[80u].w, _777));
        float _2766 = _2765 / _777;
        float _2777 = _2766 * _827;
        float _2778 = _828 * _2766;
        float _2779 = (-0.0) - _2778;
        float _2781 = _2766 * _829;
        float _2783 = (cbSceneParam._m0[77u].w * _2779) / _2765;
        float _2784 = _2783 + cbSceneParam._m0[79u].w;
        float _2785 = cbSceneParam._m0[79u].w - _2778;
        float _2791 = sqrt(((_2777 * _2777) + (_2778 * _2778)) + (_2781 * _2781));
        float _2794 = (1.0 - (cbSceneParam._m0[77u].w / _2765)) * _2791;
        float _2799 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2801 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2954;
        if (abs((_2779 - _2783) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2954 = ((((_2784 > 0.0) ? exp2(_2799 * _2784) : (2.0 - exp2(_2801 * _2784))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2794;
        }
        else
        {
            float _2914 = 1.0 / cbSceneParam._m0[80u].x;
            float _2915 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : max(_2784, _2785));
            float _2916 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : min(_2784, _2785));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            _2954 = ((abs(_2791 / _2779) * cbSceneParam._m0[80u].y) * ((((_2925 - _2926) * 2.0) - ((exp2(_2799 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0)))) - exp2(_2799 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))))) * _2914)) - ((exp2(_2801 * _2925) - exp2(_2801 * _2926)) * _2914))) + (_2794 * cbSceneParam._m0[80u].z);
        }
        vec4 _2956 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, 1.0), 0.0);
        float _2965 = exp2((_2954 * (-1.44269502162933349609375)) * (1.0 - _2956.w));
        float _2966 = log2(_2965);
        float _2982 = log2(_2710);
        _2803 = (exp2(_2982 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].x)) * _2956.x) / cbSceneParam._m0[78u].x)) + _2707;
        _2805 = (exp2(_2982 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].y)) * _2956.y) / cbSceneParam._m0[78u].y)) + _2708;
        _2807 = (exp2(_2982 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].z)) * _2956.z) / cbSceneParam._m0[78u].z)) + _2709;
        _2809 = _2965 * _2710;
    }
    else
    {
        _2803 = _2707;
        _2805 = _2708;
        _2807 = _2709;
        _2809 = _2710;
    }
    float _2821 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2822 = _2821 == 3.0;
    float _2823 = log2(_2809);
    float _2830 = exp2(_2823 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2652 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _920))) + ((_2658 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1728)) * cbPerFrame._m0[3u].x));
    float _2831 = exp2(_2823 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2654 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _920))) + ((_2660 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1728)) * cbPerFrame._m0[3u].x));
    float _2832 = exp2(_2823 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2656 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _920))) + ((_2662 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1728)) * cbPerFrame._m0[3u].x));
    float _2841 = (_2821 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2841 * (_2822 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2803)));
    SV_Target.y = _2841 * (_2822 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.z = _2841 * (_2822 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.w = cbInstanceData._m0[_2682].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2682].w;
}


