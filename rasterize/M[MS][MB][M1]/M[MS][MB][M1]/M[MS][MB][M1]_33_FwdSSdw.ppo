#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1152;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _306 = _302.z;
    float _311 = (_302.x * 2.0) + (-1.0);
    float _313 = (_302.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3505 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))));
    float _323 = fma(_320, _225, fma(_313, _232, _311 * _218));
    float _326 = fma(_320, _226, fma(_313, _233, _311 * _219));
    float _329 = fma(_320, _227, fma(_313, _234, _311 * _220));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _371 = _369.x;
    float _372 = 1.0 - _371;
    float _379 = ((_371 - _372) * cbMtdParam._m0[24u].z) + _372;
    float _381 = (cbMtdParam._m0[19u].x + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_379 * cbMtdParam._m0[21u].z);
    float _3516 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _384 = (-0.0) - cbMtdParam._m0[24u].x;
    float _386 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
    float _394 = _382 - ((_382 * TEXCOORD_8.x) * _387);
    float _395 = _382 - ((_382 * TEXCOORD_8.y) * _387);
    float _396 = _382 - ((_382 * TEXCOORD_8.z) * _387);
    float _403 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _407 = ((isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : min(_403, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _415 = (_407 - (((_379 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _407))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3547 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _420 = ((_394 * (cbMtdParam._m0[17u].x - _282)) * _416) + _282;
    float _421 = ((_395 * (cbMtdParam._m0[17u].y - _283)) * _416) + _283;
    float _422 = ((_396 * (cbMtdParam._m0[17u].z - _284)) * _416) + _284;
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _436 = _434.x;
    float _437 = 1.0 - _436;
    float _466 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_436 - _437) * cbMtdParam._m0[24u].w) + _437) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3558 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _475 = ((((cbMtdParam._m0[10u].x - _420) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _467) + _420;
    float _476 = ((((cbMtdParam._m0[10u].y - _421) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _467) + _421;
    float _477 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _422)) * _467) + _422;
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _492 = _490.x;
    float _495 = _492 - ((_492 * _394) * _416);
    float _497 = _495 - (_495 * _467);
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3569 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _529 = (((_511.z - _306) * _394) * _416) + _306;
    float _532 = ((cbMtdParam._m0[23u].y - _529) * _467) + _529;
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _557 = (_551.x * 2.0) + (-1.0);
    float _558 = (_551.y * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3580 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _579 = (((cbMtdParam._m0[21u].x * _311) + ((_518 - _311) * _394)) * _416) + _311;
    float _580 = (((cbMtdParam._m0[21u].x * _313) + ((_519 - _313) * _395)) * _416) + _313;
    float _581 = (((sqrt(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) - _320) * _396) * _416) + _320;
    float _592 = (((_557 - _579) + (_579 * cbMtdParam._m0[22u].z)) * _467) + _579;
    float _593 = (((_558 - _580) + (_580 * cbMtdParam._m0[22u].z)) * _467) + _580;
    float _594 = ((sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) - _581) * _467) + _581;
    float _596 = cbMtdParam._m0[22u].x + _302.w;
    float _599 = fma(_594, _225, fma(_593, _232, _592 * _218));
    float _602 = fma(_594, _226, fma(_593, _233, _592 * _219));
    float _605 = fma(_594, _227, fma(_593, _234, _592 * _220));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _610 = _609 * _599;
    float _611 = _609 * _602;
    float _612 = _609 * _605;
    float _3591 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _613 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3613 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3624 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3635 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3646 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _618 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _632 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _682 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _672);
    float _683 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _672);
    float _684 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _672);
    float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
    float _689 = _682 * _688;
    float _690 = _683 * _688;
    float _691 = _684 * _688;
    float _697 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _698 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_612, cbSceneParam._m0[5u].z, fma(_611, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _610));
    float _722 = fma(_612, cbSceneParam._m0[6u].z, fma(_611, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _610));
    float _725 = fma(_612, cbSceneParam._m0[7u].z, fma(_611, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _610));
    uint _739 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3657 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _751 = 1.0 - _618;
    float _752 = _748 * _751;
    float _753 = _749 * _751;
    float _754 = _750 * _751;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _618;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _618;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _618;
    float _762 = _759 + 0.039999999105930328369140625;
    float _764 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _697, cbSceneParam._m0[86u].y * _698));
    float _778 = ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * TEXCOORD_5.w) * _774.x;
    float _779 = dot(vec3(_610, _611, _612), vec3(_689, _690, _691));
    float _782 = _779 * 2.0;
    float _786 = (_782 * _610) - _689;
    float _787 = (_782 * _611) - _690;
    float _788 = (_782 * _612) - _691;
    float _792 = abs(dot(vec3(_689, _690, _691), vec3(_610, _611, _612)));
    float _3690 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _794 = sqrt(_613);
    float _807 = exp2((_794 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_794 * 3.0));
    float _813 = (1.0 - _807) * ((_794 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _814 = _807 * _794;
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1151;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _876 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _880 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _884 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _909 = _842 + _610;
        float _910 = _846 + _611;
        float _911 = _850 + _612;
        float _921 = fma(_911, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909)) - _876;
        float _922 = fma(_911, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909)) - _880;
        float _923 = fma(_911, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909)) - _884;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_876 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_880 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[34u].z) + ((((((_884 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _979 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_945.x + (-0.5));
        float _981 = _979 * (_945.y + (-0.5));
        float _982 = _979 * (_945.z + (-0.5));
        float _989 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_952.x + (-0.5));
        float _991 = _989 * (_952.y + (-0.5));
        float _992 = _989 * (_952.z + (-0.5));
        float _999 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_959.x + (-0.5));
        float _1001 = _999 * (_959.y + (-0.5));
        float _1002 = _999 * (_959.z + (-0.5));
        float _1009 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_966.x + (-0.5));
        float _1011 = _1009 * (_966.y + (-0.5));
        float _1012 = _1009 * (_966.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1033 = (dot(vec3(_610, _611, _612), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1043 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3738 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1045 + 1.0))) + _1050) * _1013;
        float _1060 = _981 * 0.5;
        float _1061 = _991 * 0.5;
        float _1062 = _1001 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_610, _611, _612), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3771 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1087 + 1.0))) + _1092) * _1014;
        float _1102 = _982 * 0.5;
        float _1103 = _992 * 0.5;
        float _1104 = _1002 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_610, _611, _612), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3804 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1129 + 1.0))) + _1134) * _1015;
        _1151 = _982;
        _1153 = _981;
        _1154 = _980;
        _1155 = _992;
        _1156 = _991;
        _1157 = _990;
        _1158 = _1002;
        _1159 = _1001;
        _1160 = _1000;
        _1161 = _1015;
        _1162 = _1014;
        _1163 = _1013;
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _1152;
        _1153 = _1152;
        _1154 = _1152;
        _1155 = _1152;
        _1156 = _1152;
        _1157 = _1152;
        _1158 = _1152;
        _1159 = _1152;
        _1160 = _1152;
        _1161 = _1152;
        _1162 = _1152;
        _1163 = _1152;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1195 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1199 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1222 = _842 + _610;
        float _1223 = _846 + _611;
        float _1224 = _850 + _612;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_610, _611, _612), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3867 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_610, _611, _612), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3900 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_610, _611, _612), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3933 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1152;
        _1461 = _1152;
        _1462 = _1152;
        _1463 = _1152;
        _1464 = _1152;
        _1465 = _1152;
        _1466 = _1152;
        _1467 = _1152;
        _1468 = _1152;
        _1469 = _1152;
        _1470 = _1152;
        _1471 = _1152;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _786 * 0.5;
    float _1529 = _787 * 0.5;
    float _1530 = _788 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1151, _1155, _1158, _1161));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_788, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786));
        float _1659 = fma(_788, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786));
        float _1662 = fma(_788, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1690 = frontier_phi_14_12_ladder;
        }
        float _1915;
        if (_1659 > 0.0)
        {
            _1915 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1915 = frontier_phi_23_19_ladder;
        }
        float _2172;
        if (_1662 > 0.0)
        {
            _2172 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2172 = frontier_phi_35_30_ladder;
        }
        float _2174 = isnan(_1915) ? _1690 : (isnan(_1690) ? _1915 : min(_1690, _1915));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1656) + _1645;
        float _2180 = (_2175 * _1659) + _1649;
        float _2181 = (_2175 * _1662) + _1653;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2182;
        float _2186 = _2182 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 > _2186) || ((_2180 < _2184) || ((_2179 < _2184) || (_2179 > _2186))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_13_35_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_13_35_ladder_2;
        _1680 = frontier_phi_13_35_ladder_1;
        _1682 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_786, _787, _788), _1597);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1741 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1745 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1749 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1752 = fma(_788, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786));
        float _1755 = fma(_788, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786));
        float _1758 = fma(_788, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786));
        float _1920;
        if (_1752 > 0.0)
        {
            _1920 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1920 = frontier_phi_25_21_ladder;
        }
        float _2199;
        if (_1755 > 0.0)
        {
            _2199 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2199 = frontier_phi_37_32_ladder;
        }
        float _2412;
        if (_1758 > 0.0)
        {
            _2412 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2412 = frontier_phi_46_43_ladder;
        }
        float _2414 = isnan(_2199) ? _1920 : (isnan(_1920) ? _2199 : min(_1920, _2199));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1752) + _1741;
        float _2420 = (_2415 * _1755) + _1745;
        float _2421 = (_2415 * _1758) + _1749;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_22_46_ladder = _2620.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2620.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2620.x * cbModelParam._m0[1u].z;
        }
        _1777 = frontier_phi_22_46_ladder_2;
        _1779 = frontier_phi_22_46_ladder_1;
        _1781 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_786, _787, _788), _1687);
        _1777 = _1761.x * cbModelParam._m0[1u].z;
        _1779 = _1761.y * cbModelParam._m0[1u].z;
        _1781 = _1761.z * cbModelParam._m0[1u].z;
    }
    float _1794 = (((_813 * _762) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1796 = (((_813 * _764) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1798 = (((_813 * _765) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1794 * cbSceneParam._m0[91u].x));
    vec4 _1815 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_697, _698));
    float _1817 = _1815.w;
    float _1829 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1817);
    float _1830 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1817);
    float _1831 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1817);
    uvec4 _1835 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1837 = _1835.x * 14u;
    uint _1838 = _1837 + 13u;
    float _1845 = _778 + (-1.0);
    float _1850 = (cbLight._m0[_1838].x * _1845) + 1.0;
    float _1851 = (cbLight._m0[_1838].y * _1845) + 1.0;
    float _1852 = (cbLight._m0[_1838].z * _1845) + 1.0;
    float _1853 = (cbLight._m0[_1838].w * _1845) + 1.0;
    uint _1854 = _1837 + 5u;
    float _1860 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1864 = _1837 + 4u;
    float _1874 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1878 = _1837 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_610, _611, _612));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_610, _611, _612));
    float _4069 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _4080 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1854].x * _1860) * _1899) + (((cbLight._m0[_1864].x * _1829) * _1874) * _1897);
    float _1907 = ((_1860 * cbLight._m0[_1854].y) * _1899) + (((cbLight._m0[_1864].y * _1830) * _1874) * _1897);
    float _1908 = ((_1860 * cbLight._m0[_1854].z) * _1899) + (((cbLight._m0[_1864].z * _1831) * _1874) * _1897);
    uvec4 _1912 = floatBitsToUint(cbLight._m0[_1837 + 12u]);
    bool _1914 = _1912.x == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1914)
    {
        _1925 = _1906;
        _1927 = _1907;
        _1929 = _1908;
    }
    else
    {
        uint _1933 = _1837 + 6u;
        float _1949 = (dot(vec3(cbLight._m0[_1837 + 2u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _4091 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1952 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _1925 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1906;
        _1927 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1907;
        _1929 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1908;
    }
    bool _1932 = _1912.y == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1932)
    {
        _1970 = _1925;
        _1972 = _1927;
        _1974 = _1929;
    }
    else
    {
        uint _2143 = _1837 + 7u;
        float _2159 = (dot(vec3(cbLight._m0[_1837 + 3u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4107 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2162 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1970 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _1925;
        _1972 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _1927;
        _1974 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _1929;
    }
    uint _1977 = _1837 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _613) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1837].x + _689;
    float _1993 = cbLight._m0[_1837].y + _690;
    float _1994 = cbLight._m0[_1837].z + _691;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1837].xyz));
    float _4123 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _4134 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _2006 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2007 = dot(vec3(_610, _611, _612), vec3(_1999, _2000, _2001));
    float _4145 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_1999, _2000, _2001));
    float _4156 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2028 = 0.959999978542327880859375 - _759;
    float _2030 = 0.959999978542327880859375 - _760;
    float _2031 = 0.959999978542327880859375 - _761;
    float _2038 = 1.0 - _1991;
    float _2049 = (0.5 / (((_2006 * ((_2005 * _2038) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2038) + _1991) * _2005))) * _2005;
    float _4167 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2065 = _1837 + 9u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _613) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1878].x + _689;
    float _2079 = cbLight._m0[_1878].y + _690;
    float _2080 = cbLight._m0[_1878].z + _691;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1878].xyz));
    float _4178 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2092 = dot(vec3(_610, _611, _612), vec3(_2085, _2086, _2087));
    float _4189 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2085, _2086, _2087));
    float _4200 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2077 * _2077;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2111 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
    float _2118 = 1.0 - _2077;
    float _2128 = (0.5 / (((_2006 * ((_2091 * _2118) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2118) + _2077) * _2091))) * _2091;
    float _4211 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    float _2140 = (((((_2111 * _2028) + _762) * cbLight._m0[_2065].x) * _2130) * _1860) + ((((cbLight._m0[_1977].x * _1829) * ((_2027 * _2028) + _762)) * _2051) * _1874);
    float _2141 = (((((_2111 * _2030) + _764) * cbLight._m0[_2065].y) * _2130) * _1860) + ((((cbLight._m0[_1977].y * _1830) * ((_2027 * _2030) + _764)) * _2051) * _1874);
    float _2142 = (((((_2111 * _2031) + _765) * cbLight._m0[_2065].z) * _2130) * _1860) + ((((cbLight._m0[_1977].z * _1831) * ((_2027 * _2031) + _765)) * _2051) * _1874);
    float _2204;
    float _2206;
    float _2208;
    if (_1914)
    {
        _2204 = _2140;
        _2206 = _2141;
        _2208 = _2142;
    }
    else
    {
        uint _2210 = _1837 + 2u;
        uint _2214 = _1837 + 10u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _613) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _689;
        float _2231 = cbLight._m0[_2210].y + _690;
        float _2232 = cbLight._m0[_2210].z + _691;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2210].xyz));
        float _4222 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2244 = dot(vec3(_610, _611, _612), vec3(_2237, _2238, _2239));
        float _4233 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4244 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
        float _2270 = 1.0 - _2229;
        float _2280 = (0.5 / (((_2006 * ((_2243 * _2270) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2270) + _2229) * _2243))) * _2243;
        float _4255 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2204 = (((((_2263 * _2028) + _762) * cbLight._m0[_2214].x) * _2282) * _2283) + _2140;
        _2206 = (((((_2263 * _2030) + _764) * cbLight._m0[_2214].y) * _2282) * _2283) + _2141;
        _2208 = (((((_2263 * _2031) + _765) * cbLight._m0[_2214].z) * _2282) * _2283) + _2142;
    }
    float _2318;
    float _2320;
    float _2322;
    if (_1932)
    {
        _2318 = _2204;
        _2320 = _2206;
        _2322 = _2208;
    }
    else
    {
        uint _2329 = _1837 + 3u;
        uint _2333 = _1837 + 11u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _613) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _689;
        float _2350 = cbLight._m0[_2329].y + _690;
        float _2351 = cbLight._m0[_2329].z + _691;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2329].xyz));
        float _4271 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2363 = dot(vec3(_610, _611, _612), vec3(_2356, _2357, _2358));
        float _4282 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4293 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
        float _2389 = 1.0 - _2348;
        float _2399 = (0.5 / (((_2006 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2389) + _2348) * _2362))) * _2362;
        float _4304 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2318 = (((((_2382 * _2028) + _762) * cbLight._m0[_2333].x) * _2401) * _2402) + _2204;
        _2320 = (((((_2382 * _2030) + _764) * cbLight._m0[_2333].y) * _2401) * _2402) + _2206;
        _2322 = (((((_2382 * _2031) + _765) * cbLight._m0[_2333].z) * _2401) * _2402) + _2208;
    }
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_1835.y == 0u)
    {
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2477;
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2477;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2477;
        uvec4 _2492 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2493 = _2492.x;
        uint _2504 = uint((float(_2492.y) * floor(float(uint(cbSceneParam._m0[85u].y * _698) / _2493))) + floor(float(uint(cbSceneParam._m0[85u].x * _697) / _2493)));
        float _2514 = (log2(_2480 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2515 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        uint _2518 = uint(isnan(14.0) ? _2515 : (isnan(_2515) ? 14.0 : min(_2515, 14.0)));
        uvec4 _2523 = texelFetch(g_lightClusterGridBuffer, int(((_2518 << 2u) + (_2504 << 6u)) >> 2u));
        uint _2524 = _2523.x;
        uint _2525 = _2492.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2525 >> 4u) & 15u)) + 4294967295u) & _2524) == 0u) || ((_2525 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2785)
                {
                    frontier_phi_61_pred = _2769;
                    frontier_phi_61_pred_1 = _2774;
                    frontier_phi_61_pred_2 = _2773;
                    frontier_phi_61_pred_3 = _2772;
                    frontier_phi_61_pred_4 = _2771;
                    frontier_phi_61_pred_5 = _2770;
                }
                else
                {
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    uint _2899;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2784;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    for (;;)
                    {
                        uint _2903 = uint(findLSB(_2899)) + (_2775 << 5u);
                        uint _2900 = (_2899 + 4294967295u) & _2899;
                        uint _2905 = _2903 * 48u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2925 = (_2903 * 48u) + 4u;
                        vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2944 = (_2903 * 48u) + 8u;
                        vec3 _2955 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x));
                        float _2959 = _2919.x - _2478;
                        float _2960 = _2919.y - _2479;
                        float _2961 = _2919.z - _2480;
                        float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                        float _2965 = inversesqrt(_2962);
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2969 = dot(vec3(_719, _722, _725), vec3(_2966, _2967, _2968));
                        float _2974 = 1.0 - (_2962 * _2919.w);
                        float _4330 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _2976 = sqrt(_2962) * _2938.w;
                        float _2979 = 1.39999997615814208984375 / (_2976 + 1.39999997615814208984375);
                        float _2980 = _2979 * _2979;
                        float _2983 = ((1.0 - _2980) * _2969) + _2980;
                        float _2986 = _2976 * _2976;
                        float _2990 = ((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2975) / ((_2986 * 0.699999988079071044921875) + 1.0);
                        float _2994 = (-0.0) - _2478;
                        float _2995 = (-0.0) - _2479;
                        float _2996 = (-0.0) - _2480;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3011 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _794;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3001 + _2966;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_719, _722, _725), vec3(_3001, _3002, _3003));
                        float _4346 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3036 = dot(vec3(_719, _722, _725), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4357 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2979 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2969) + _3045;
                        float _4368 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4379 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) / ((_3043 * _3043) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125))) * _2975;
                        _2828 = (_2990 * _2938.x) + _2896;
                        _2829 = (_2990 * _2938.y) + _2897;
                        _2830 = (_2990 * _2938.z) + _2898;
                        _2825 = (_3071 * _2955.x) + _2893;
                        _2826 = (_3071 * _2955.y) + _2894;
                        _2827 = (_3071 * _2955.z) + _2895;
                        if (_2900 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2900;
                        }
                    }
                    frontier_phi_61_pred = _2825;
                    frontier_phi_61_pred_1 = _2830;
                    frontier_phi_61_pred_2 = _2829;
                    frontier_phi_61_pred_3 = _2828;
                    frontier_phi_61_pred_4 = _2827;
                    frontier_phi_61_pred_5 = _2826;
                }
                _2626 = frontier_phi_61_pred;
                _2636 = frontier_phi_61_pred_1;
                _2634 = frontier_phi_61_pred_2;
                _2632 = frontier_phi_61_pred_3;
                _2630 = frontier_phi_61_pred_4;
                _2628 = frontier_phi_61_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2626;
                    _2770 = _2628;
                    _2771 = _2630;
                    _2772 = _2632;
                    _2773 = _2634;
                    _2774 = _2636;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2642) & _2524) == 0u)
        {
            _2737 = _2625;
            _2739 = _2627;
            _2741 = _2629;
            _2743 = _2631;
            _2745 = _2633;
            _2747 = _2635;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
            float _2763 = _2762 * _2478;
            float _2764 = _2762 * _2479;
            float _2765 = _2762 * _2480;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2876 = _2625;
                float _2877 = _2627;
                float _2878 = _2629;
                float _2879 = _2631;
                float _2880 = _2633;
                float _2881 = _2635;
                uint _2882 = _2642;
                uint _2891;
                bool _2892;
                for (;;)
                {
                    _2891 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2882 << 2u)) >> 2u)).x;
                    _2892 = _2891 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2892)
                    {
                        frontier_phi_67_pred = _2879;
                        frontier_phi_67_pred_1 = _2880;
                        frontier_phi_67_pred_2 = _2881;
                        frontier_phi_67_pred_3 = _2878;
                        frontier_phi_67_pred_4 = _2877;
                        frontier_phi_67_pred_5 = _2876;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        uint _3095 = _2891;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3227;
                        bool _3228;
                        for (;;)
                        {
                            uint _3106 = ((_2882 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3106 * 40u) + 24u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3202 = (_3106 * 40u) + 28u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3227 = fma(_2480, _3215.z, fma(_2479, _3215.y, _3215.x * _2478)) + _3215.w;
                            _3228 = !((fma(_2480, _3196.z, fma(_2479, _3196.y, _3196.x * _2478)) + _3196.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3228)
                            {
                                float _3255 = _3121.x - _2478;
                                float _3256 = _3121.y - _2479;
                                float _3257 = _3121.z - _2480;
                                float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                                float _3261 = inversesqrt(_3258);
                                float _3262 = _3261 * _3255;
                                float _3263 = _3261 * _3256;
                                float _3264 = _3261 * _3257;
                                float _3268 = 1.0 - (_3258 / (_3122 * _3122));
                                float _4390 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3273 = sqrt(_3258) * _3137.w;
                                float _3275 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                                float _3276 = _3275 * _3275;
                                float _3279 = ((1.0 - _3276) * dot(vec3(_3262, _3263, _3264), vec3(_719, _722, _725))) + _3276;
                                float _3282 = _3273 * _3273;
                                float _3286 = (fma(_2480, _3165.z, fma(_2479, _3165.y, _3165.x * _2478)) + _3165.w) / _3227;
                                float _3287 = (fma(_2480, _3181.z, fma(_2479, _3181.y, _3181.x * _2478)) + _3181.w) / _3227;
                                float _3291 = 1.0 - dot(vec2(_3286, _3287), vec2(_3286, _3287));
                                float _4406 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3293 = _3292 * (((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3269) / ((_3282 * 0.699999988079071044921875) + 1.0));
                                float _3305 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                                float _3306 = 1.0 - _794;
                                float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                                float _3314 = _3313 * _3313;
                                float _3315 = _3314 * _3314;
                                float _3316 = _3262 - _2763;
                                float _3317 = _3263 - _2764;
                                float _3318 = _3264 - _2765;
                                float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                                float _3326 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4417 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3330 = dot(vec3(_719, _722, _725), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                                float _4428 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                                float _3338 = _3275 * _3314;
                                float _3339 = _3338 * _3338;
                                float _3345 = ((1.0 - _3339) * dot(vec3(_719, _722, _725), vec3(_3262, _3263, _3264))) + _3339;
                                float _4439 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3347 = 1.0 - _3314;
                                float _3357 = (0.5 / (((_3346 * ((_3329 * _3347) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3314) * _3329))) * _3346;
                                float _4450 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3367 = (_3292 * _3269) * (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) / ((_3337 * _3337) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3367 * _3149.x;
                                frontier_phi_73_pred_1 = _3367 * _3149.y;
                                frontier_phi_73_pred_2 = _3293 * _3137.z;
                                frontier_phi_73_pred_3 = _3293 * _3137.y;
                                frontier_phi_73_pred_4 = _3293 * _3137.x;
                                frontier_phi_73_pred_5 = _3367 * _3149.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_73_pred;
                            _3372 = frontier_phi_73_pred_1;
                            _3376 = frontier_phi_73_pred_2;
                            _3375 = frontier_phi_73_pred_3;
                            _3374 = frontier_phi_73_pred_4;
                            _3373 = frontier_phi_73_pred_5;
                            _3079 = _3374 + _3092;
                            _3080 = _3375 + _3093;
                            _3081 = _3376 + _3094;
                            _3076 = _3371 + _3089;
                            _3077 = _3372 + _3090;
                            _3078 = _3373 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3079;
                        frontier_phi_67_pred_1 = _3080;
                        frontier_phi_67_pred_2 = _3081;
                        frontier_phi_67_pred_3 = _3078;
                        frontier_phi_67_pred_4 = _3077;
                        frontier_phi_67_pred_5 = _3076;
                    }
                    _2744 = frontier_phi_67_pred;
                    _2746 = frontier_phi_67_pred_1;
                    _2748 = frontier_phi_67_pred_2;
                    _2742 = frontier_phi_67_pred_3;
                    _2740 = frontier_phi_67_pred_4;
                    _2738 = frontier_phi_67_pred_5;
                    uint _2883 = _2882 + 1u;
                    if (_2883 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2876 = _2738;
                        _2877 = _2740;
                        _2878 = _2742;
                        _2879 = _2744;
                        _2880 = _2746;
                        _2881 = _2748;
                        _2882 = _2883;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2746;
                frontier_phi_55_56_ladder_1 = _2748;
                frontier_phi_55_56_ladder_2 = _2744;
                frontier_phi_55_56_ladder_3 = _2742;
                frontier_phi_55_56_ladder_4 = _2740;
                frontier_phi_55_56_ladder_5 = _2738;
            }
            else
            {
                frontier_phi_55_56_ladder = _2633;
                frontier_phi_55_56_ladder_1 = _2635;
                frontier_phi_55_56_ladder_2 = _2631;
                frontier_phi_55_56_ladder_3 = _2629;
                frontier_phi_55_56_ladder_4 = _2627;
                frontier_phi_55_56_ladder_5 = _2625;
            }
            _2737 = frontier_phi_55_56_ladder_5;
            _2739 = frontier_phi_55_56_ladder_4;
            _2741 = frontier_phi_55_56_ladder_3;
            _2743 = frontier_phi_55_56_ladder_2;
            _2745 = frontier_phi_55_56_ladder;
            _2747 = frontier_phi_55_56_ladder_1;
        }
        float _2752 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
        _2537 = (_2752 * _2743) + _1970;
        _2539 = (_2752 * _2745) + _1972;
        _2541 = (_2752 * _2747) + _1974;
        _2543 = ((_2737 * _762) * _2752) + _2318;
        _2545 = ((_2739 * _764) * _2752) + _2320;
        _2547 = ((_2741 * _765) * _2752) + _2322;
    }
    else
    {
        _2537 = _1970;
        _2539 = _1972;
        _2541 = _1974;
        _2543 = _2318;
        _2545 = _2320;
        _2547 = _2322;
    }
    float _4466 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4477 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4488 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    uint _2567 = _237 + 6u;
    float _2575 = _697 / cbSceneParam._m0[86u].x;
    float _2576 = _698 / cbSceneParam._m0[86u].y;
    vec4 _2590 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, (log2((isnan(cbSceneParam._m0[77u].w) ? _632 : (isnan(_632) ? cbSceneParam._m0[77u].w : min(_632, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2592 = _2590.x;
    float _2593 = _2590.y;
    float _2594 = _2590.z;
    float _2595 = _2590.w;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_632 > cbSceneParam._m0[78u].w)
    {
        float _2650 = isnan(_632) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _632 : min(cbSceneParam._m0[80u].w, _632));
        float _2651 = _2650 / _632;
        float _2662 = _2651 * _682;
        float _2663 = _683 * _2651;
        float _2664 = (-0.0) - _2663;
        float _2665 = _2651 * _684;
        float _2667 = (cbSceneParam._m0[77u].w * _2664) / _2650;
        float _2668 = _2667 + cbSceneParam._m0[79u].w;
        float _2669 = cbSceneParam._m0[79u].w - _2663;
        float _2675 = sqrt(((_2662 * _2662) + (_2663 * _2663)) + (_2665 * _2665));
        float _2678 = (1.0 - (cbSceneParam._m0[77u].w / _2650)) * _2675;
        float _2683 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2685 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2838;
        if (abs((_2664 - _2667) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2838 = ((((_2668 > 0.0) ? exp2(_2683 * _2668) : (2.0 - exp2(_2685 * _2668))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2678;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : max(_2668, _2669));
            float _2800 = isnan(_2669) ? _2668 : (isnan(_2668) ? _2669 : min(_2668, _2669));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2838 = ((abs(_2675 / _2664) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2683 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2683 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2685 * _2809) - exp2(_2685 * _2810)) * _2798))) + (_2678 * cbSceneParam._m0[80u].z);
        }
        vec4 _2840 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, 1.0), 0.0);
        float _2849 = exp2((_2838 * (-1.44269502162933349609375)) * (1.0 - _2840.w));
        float _2850 = log2(_2849);
        float _2866 = log2(_2595);
        _2687 = (exp2(_2866 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].x)) * _2840.x) / cbSceneParam._m0[78u].x)) + _2592;
        _2689 = (exp2(_2866 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].y)) * _2840.y) / cbSceneParam._m0[78u].y)) + _2593;
        _2691 = (exp2(_2866 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].z)) * _2840.z) / cbSceneParam._m0[78u].z)) + _2594;
        _2693 = _2849 * _2595;
    }
    else
    {
        _2687 = _2592;
        _2689 = _2593;
        _2691 = _2594;
        _2693 = _2595;
    }
    float _2705 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2706 = _2705 == 3.0;
    float _2707 = log2(_2693);
    float _2714 = exp2(_2707 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2537 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _778))) + ((_2543 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2715 = exp2(_2707 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2539 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _778))) + ((_2545 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2716 = exp2(_2707 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2541 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _778))) + ((_2547 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2725 = (_2705 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2725 * (_2706 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.y = _2725 * (_2706 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.z = _2725 * (_2706 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.w = cbInstanceData._m0[_2567].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2567].w;
}


