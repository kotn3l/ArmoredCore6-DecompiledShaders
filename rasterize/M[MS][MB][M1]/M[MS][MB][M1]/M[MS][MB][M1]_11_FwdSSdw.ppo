#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1167;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3519 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3530 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3541 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _282) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _283) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _324 = _319.x * cbMtdParam._m0[9u].x;
    float _325 = _319.y * cbMtdParam._m0[9u].y;
    float _326 = _319.z * cbMtdParam._m0[9u].z;
    float _330 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _296.x) * _324;
    float _333 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _296.y) * _325;
    float _336 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _296.z) * _326;
    float _343 = ((_324 - _330) * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) + _330;
    float _344 = ((_325 - _333) * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) + _333;
    float _345 = ((_326 - _336) * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) + _336;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _384 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _388 = _384.z;
    float _392 = (_384.x * 2.0) + (-1.0);
    float _393 = (_384.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3552 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))));
    float _404 = _392 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_358.x * 2.0) + (-1.0)));
    float _405 = _393 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_358.y * 2.0) + (-1.0)));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_420 - _421) * cbMtdParam._m0[24u].w) + _421) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3563 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _343) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _453) + _343;
    float _462 = ((((cbMtdParam._m0[10u].y - _344) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _453) + _344;
    float _463 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _345)) * _453) + _345;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _478 = _476.x;
    float _480 = _478 - (_478 * _453);
    float _485 = (((_358.z - _388) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _388;
    float _489 = ((cbMtdParam._m0[23u].y - _485) * _453) + _485;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _521 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_232, _233, _234, 0.0));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _282) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _283) + cbTextureTilingScale._m0[18u].w));
    float _538 = _536.x;
    float _543 = fract(_536.w + cbPerFrame._m0[22u].x);
    float _545 = (1.0 - _543) * _538;
    float _550 = ((_543 + (-1.0)) + _538) * 9.0;
    float _552 = ((_538 + (-1.0)) + _543) * 9.0;
    float _553 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _554 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _568 = (_545 * ((_536.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _553 : (isnan(_553) ? 3.0 : min(_553, 3.0))) * 3.1415927410125732421875);
    float _570 = (_545 * ((_536.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _554 : (isnan(_554) ? 3.0 : min(_554, 3.0))) * 3.1415927410125732421875);
    float _574 = inversesqrt(dot(vec3(_568, _570, 1.0), vec3(_568, _570, 1.0)));
    float _590 = (((((0.5 - _513) + ((_568 * 0.5) * _574)) * _521) + _513) * 2.0) + (-1.0);
    float _591 = (((((0.5 - _514) + ((_574 * 0.5) * _570)) * _521) + _514) * 2.0) + (-1.0);
    float _592 = dot(vec2(_590, _591), vec2(_590, _591));
    float _3594 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _608 = ((((cbMtdParam._m0[22u].z * _404) - _404) + _590) * _453) + _404;
    float _609 = ((((cbMtdParam._m0[22u].z * _405) - _405) + _591) * _453) + _405;
    float _610 = (_453 * (sqrt(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) - _399)) + _399;
    float _612 = cbMtdParam._m0[22u].x + _384.w;
    float _615 = fma(_610, _232, fma(_609, _238 * TANGENT.x, (_224 * _216) * _608));
    float _618 = fma(_610, _233, fma(_609, _238 * TANGENT.y, (_224 * _217) * _608));
    float _621 = fma(_610, _234, fma(_609, _238 * TANGENT.z, (_224 * _218) * _608));
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    float _626 = _625 * _615;
    float _627 = _625 * _618;
    float _628 = _625 * _621;
    float _3605 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _629 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3627 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3638 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3649 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3660 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _634 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _699 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _689);
    float _700 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _689);
    float _701 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _689);
    float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
    float _706 = _699 * _705;
    float _707 = _700 * _705;
    float _708 = _701 * _705;
    float _714 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _715 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_628, cbSceneParam._m0[5u].z, fma(_627, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _626));
    float _739 = fma(_628, cbSceneParam._m0[6u].z, fma(_627, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _626));
    float _742 = fma(_628, cbSceneParam._m0[7u].z, fma(_627, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _626));
    uint _756 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3671 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _768 = 1.0 - _634;
    float _769 = _765 * _768;
    float _770 = _766 * _768;
    float _771 = _767 * _768;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _634;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _634;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _634;
    float _779 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _714, cbSceneParam._m0[86u].y * _715));
    float _795 = ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * TEXCOORD_5.w) * _791.x;
    float _796 = dot(vec3(_626, _627, _628), vec3(_706, _707, _708));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _626) - _706;
    float _804 = (_799 * _627) - _707;
    float _805 = (_799 * _628) - _708;
    float _809 = abs(dot(vec3(_706, _707, _708), vec3(_626, _627, _628)));
    float _3704 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_629);
    float _823 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _829 = (1.0 - _823) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _830 = _823 * _811;
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _892 = fma(_866, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858));
        float _896 = fma(_866, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858));
        float _900 = fma(_866, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858));
        float _924 = _858 + _626;
        float _925 = _862 + _627;
        float _926 = _866 + _628;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _892;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _896;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _900;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_892 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_896 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_900 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_626, _627, _628), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3752 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_626, _627, _628), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3785 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_626, _627, _628), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3818 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_866, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858));
        float _1210 = fma(_866, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858));
        float _1214 = fma(_866, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858));
        float _1237 = _858 + _626;
        float _1238 = _862 + _627;
        float _1239 = _866 + _628;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_626, _627, _628), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3881 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_626, _627, _628), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3914 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_626, _627, _628), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3947 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1167;
        _1476 = _1167;
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1179)) + _1179;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _803 * 0.5;
    float _1544 = _804 * 0.5;
    float _1545 = _805 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _629);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1661 = fma(_866, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858)) + cbModelParam._m0[13u].w;
        float _1665 = fma(_866, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858)) + cbModelParam._m0[14u].w;
        float _1669 = fma(_866, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858)) + cbModelParam._m0[15u].w;
        float _1672 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1675 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1678 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1706;
        if (_1672 > 0.0)
        {
            _1706 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1706 = frontier_phi_14_12_ladder;
        }
        float _1931;
        if (_1675 > 0.0)
        {
            _1931 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1931 = frontier_phi_23_19_ladder;
        }
        float _2188;
        if (_1678 > 0.0)
        {
            _2188 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2188 = frontier_phi_35_30_ladder;
        }
        float _2190 = isnan(_1931) ? _1706 : (isnan(_1706) ? _1931 : min(_1706, _1931));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1672) + _1661;
        float _2196 = (_2191 * _1675) + _1665;
        float _2197 = (_2191 * _1678) + _1669;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2198;
        float _2202 = _2198 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 > _2202) || ((_2196 < _2200) || ((_2195 < _2200) || (_2195 > _2202))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_13_35_ladder = _2325.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2325.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2325.x * cbModelParam._m0[1u].y;
        }
        _1694 = frontier_phi_13_35_ladder_2;
        _1696 = frontier_phi_13_35_ladder_1;
        _1698 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1612);
        _1694 = _1682.x * cbModelParam._m0[1u].y;
        _1696 = _1682.y * cbModelParam._m0[1u].y;
        _1698 = _1682.z * cbModelParam._m0[1u].y;
    }
    float _1702 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _629);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1702 : min(cbModelParam._m0[25u].w, _1702));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1757 = fma(_866, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858)) + cbModelParam._m0[21u].w;
        float _1761 = fma(_866, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858)) + cbModelParam._m0[22u].w;
        float _1765 = fma(_866, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858)) + cbModelParam._m0[23u].w;
        float _1768 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1771 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1774 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1936;
        if (_1768 > 0.0)
        {
            _1936 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1936 = frontier_phi_25_21_ladder;
        }
        float _2215;
        if (_1771 > 0.0)
        {
            _2215 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2215 = frontier_phi_37_32_ladder;
        }
        float _2428;
        if (_1774 > 0.0)
        {
            _2428 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2428 = frontier_phi_46_43_ladder;
        }
        float _2430 = isnan(_2215) ? _1936 : (isnan(_1936) ? _2215 : min(_1936, _2215));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1768) + _1757;
        float _2436 = (_2431 * _1771) + _1761;
        float _2437 = (_2431 * _1774) + _1765;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2437, cbModelParam._m0[17u].z, fma(_2436, cbModelParam._m0[17u].y, _2435 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2437, cbModelParam._m0[18u].z, fma(_2436, cbModelParam._m0[18u].y, _2435 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2437, cbModelParam._m0[19u].z, fma(_2436, cbModelParam._m0[19u].y, _2435 * cbModelParam._m0[19u].x))), _1703);
            frontier_phi_22_46_ladder = _2636.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2636.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2636.x * cbModelParam._m0[1u].z;
        }
        _1793 = frontier_phi_22_46_ladder_2;
        _1795 = frontier_phi_22_46_ladder_1;
        _1797 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1703);
        _1793 = _1777.x * cbModelParam._m0[1u].z;
        _1795 = _1777.y * cbModelParam._m0[1u].z;
        _1797 = _1777.z * cbModelParam._m0[1u].z;
    }
    float _1810 = (((_829 * _779) + _830) * _795) * ((cbModelParam._m0[1u].w * (_1793 - _1694)) + _1694);
    float _1812 = (((_829 * _781) + _830) * _795) * ((cbModelParam._m0[1u].w * (_1795 - _1696)) + _1696);
    float _1814 = (((_829 * _782) + _830) * _795) * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1817 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1810 * cbSceneParam._m0[91u].x));
    vec4 _1831 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_714, _715));
    float _1833 = _1831.w;
    float _1845 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1833);
    float _1846 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1833);
    float _1847 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1833);
    uvec4 _1851 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _1853 = _1851.x * 14u;
    uint _1854 = _1853 + 13u;
    float _1861 = _795 + (-1.0);
    float _1866 = (cbLight._m0[_1854].x * _1861) + 1.0;
    float _1867 = (cbLight._m0[_1854].y * _1861) + 1.0;
    float _1868 = (cbLight._m0[_1854].z * _1861) + 1.0;
    float _1869 = (cbLight._m0[_1854].w * _1861) + 1.0;
    uint _1870 = _1853 + 5u;
    float _1876 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1880 = _1853 + 4u;
    float _1890 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1894 = _1853 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_626, _627, _628));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_626, _627, _628));
    float _4083 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _4094 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1870].x * _1876) * _1915) + (((cbLight._m0[_1880].x * _1845) * _1890) * _1913);
    float _1923 = ((_1876 * cbLight._m0[_1870].y) * _1915) + (((cbLight._m0[_1880].y * _1846) * _1890) * _1913);
    float _1924 = ((_1876 * cbLight._m0[_1870].z) * _1915) + (((cbLight._m0[_1880].z * _1847) * _1890) * _1913);
    uvec4 _1928 = floatBitsToUint(cbLight._m0[_1853 + 12u]);
    bool _1930 = _1928.x == 0u;
    float _1941;
    float _1943;
    float _1945;
    if (_1930)
    {
        _1941 = _1922;
        _1943 = _1923;
        _1945 = _1924;
    }
    else
    {
        uint _1949 = _1853 + 6u;
        float _1965 = (dot(vec3(cbLight._m0[_1853 + 2u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _4105 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1968 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _1941 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1922;
        _1943 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1923;
        _1945 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1924;
    }
    bool _1948 = _1928.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1948)
    {
        _1986 = _1941;
        _1988 = _1943;
        _1990 = _1945;
    }
    else
    {
        uint _2159 = _1853 + 7u;
        float _2175 = (dot(vec3(cbLight._m0[_1853 + 3u].xyz), vec3(_626, _627, _628)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4121 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2178 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _1986 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _1941;
        _1988 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _1943;
        _1990 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _1945;
    }
    uint _1993 = _1853 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _629) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1853].x + _706;
    float _2009 = cbLight._m0[_1853].y + _707;
    float _2010 = cbLight._m0[_1853].z + _708;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_1853].xyz));
    float _4137 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2022 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2023 = dot(vec3(_626, _627, _628), vec3(_2015, _2016, _2017));
    float _4159 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2015, _2016, _2017));
    float _4170 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2043 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
    float _2044 = 0.959999978542327880859375 - _776;
    float _2046 = 0.959999978542327880859375 - _777;
    float _2047 = 0.959999978542327880859375 - _778;
    float _2054 = 1.0 - _2007;
    float _2065 = (0.5 / (((_2022 * ((_2021 * _2054) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2054) + _2007) * _2021))) * _2021;
    float _4181 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2081 = _1853 + 9u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _629) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1894].x + _706;
    float _2095 = cbLight._m0[_1894].y + _707;
    float _2096 = cbLight._m0[_1894].z + _708;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_1894].xyz));
    float _4192 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2108 = dot(vec3(_626, _627, _628), vec3(_2101, _2102, _2103));
    float _4203 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2101, _2102, _2103));
    float _4214 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2093 * _2093;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
    float _2134 = 1.0 - _2093;
    float _2144 = (0.5 / (((_2022 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2134) + _2093) * _2107))) * _2107;
    float _4225 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    float _2156 = (((((_2127 * _2044) + _779) * cbLight._m0[_2081].x) * _2146) * _1876) + ((((cbLight._m0[_1993].x * _1845) * ((_2043 * _2044) + _779)) * _2067) * _1890);
    float _2157 = (((((_2127 * _2046) + _781) * cbLight._m0[_2081].y) * _2146) * _1876) + ((((cbLight._m0[_1993].y * _1846) * ((_2043 * _2046) + _781)) * _2067) * _1890);
    float _2158 = (((((_2127 * _2047) + _782) * cbLight._m0[_2081].z) * _2146) * _1876) + ((((cbLight._m0[_1993].z * _1847) * ((_2043 * _2047) + _782)) * _2067) * _1890);
    float _2220;
    float _2222;
    float _2224;
    if (_1930)
    {
        _2220 = _2156;
        _2222 = _2157;
        _2224 = _2158;
    }
    else
    {
        uint _2226 = _1853 + 2u;
        uint _2230 = _1853 + 10u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _629) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _706;
        float _2247 = cbLight._m0[_2226].y + _707;
        float _2248 = cbLight._m0[_2226].z + _708;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2226].xyz));
        float _4236 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2260 = dot(vec3(_626, _627, _628), vec3(_2253, _2254, _2255));
        float _4247 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4258 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
        float _2286 = 1.0 - _2245;
        float _2296 = (0.5 / (((_2022 * ((_2259 * _2286) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2286) + _2245) * _2259))) * _2259;
        float _4269 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2220 = (((((_2279 * _2044) + _779) * cbLight._m0[_2230].x) * _2298) * _2299) + _2156;
        _2222 = (((((_2279 * _2046) + _781) * cbLight._m0[_2230].y) * _2298) * _2299) + _2157;
        _2224 = (((((_2279 * _2047) + _782) * cbLight._m0[_2230].z) * _2298) * _2299) + _2158;
    }
    float _2334;
    float _2336;
    float _2338;
    if (_1948)
    {
        _2334 = _2220;
        _2336 = _2222;
        _2338 = _2224;
    }
    else
    {
        uint _2345 = _1853 + 3u;
        uint _2349 = _1853 + 11u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _629) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _706;
        float _2366 = cbLight._m0[_2345].y + _707;
        float _2367 = cbLight._m0[_2345].z + _708;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_626, _627, _628), vec3(cbLight._m0[_2345].xyz));
        float _4285 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2379 = dot(vec3(_626, _627, _628), vec3(_2372, _2373, _2374));
        float _4296 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4307 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
        float _2405 = 1.0 - _2364;
        float _2415 = (0.5 / (((_2022 * ((_2378 * _2405) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2405) + _2364) * _2378))) * _2378;
        float _4318 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2417 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2418 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2334 = (((((_2398 * _2044) + _779) * cbLight._m0[_2349].x) * _2417) * _2418) + _2220;
        _2336 = (((((_2398 * _2046) + _781) * cbLight._m0[_2349].y) * _2417) * _2418) + _2222;
        _2338 = (((((_2398 * _2047) + _782) * cbLight._m0[_2349].z) * _2417) * _2418) + _2224;
    }
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_1851.y == 0u)
    {
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2493;
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2493;
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2493;
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.x;
        uint _2520 = uint((float(_2508.y) * floor(float(uint(cbSceneParam._m0[85u].y * _715) / _2509))) + floor(float(uint(cbSceneParam._m0[85u].x * _714) / _2509)));
        float _2530 = (log2(_2496 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2531 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        uint _2534 = uint(isnan(14.0) ? _2531 : (isnan(_2531) ? 14.0 : min(_2531, 14.0)));
        uvec4 _2539 = texelFetch(g_lightClusterGridBuffer, int(((_2534 << 2u) + (_2520 << 6u)) >> 2u));
        uint _2540 = _2539.x;
        uint _2541 = _2508.z;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((((1u << ((_2541 >> 4u) & 15u)) + 4294967295u) & _2540) == 0u) || ((_2541 & 240u) == 0u))
        {
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
        }
        else
        {
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            uint _2792 = 0u;
            uint _2801;
            bool _2802;
            for (;;)
            {
                _2801 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                _2802 = _2801 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2802)
                {
                    frontier_phi_61_pred = _2786;
                    frontier_phi_61_pred_1 = _2791;
                    frontier_phi_61_pred_2 = _2790;
                    frontier_phi_61_pred_3 = _2789;
                    frontier_phi_61_pred_4 = _2788;
                    frontier_phi_61_pred_5 = _2787;
                }
                else
                {
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    uint _2916;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2801;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    for (;;)
                    {
                        uint _2920 = uint(findLSB(_2916)) + (_2792 << 5u);
                        uint _2917 = (_2916 + 4294967295u) & _2916;
                        uint _2922 = _2920 * 48u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2942 = (_2920 * 48u) + 4u;
                        vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2961 = (_2920 * 48u) + 8u;
                        vec3 _2972 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x));
                        float _2976 = _2936.x - _2494;
                        float _2977 = _2936.y - _2495;
                        float _2978 = _2936.z - _2496;
                        float _2979 = dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978));
                        float _2982 = inversesqrt(_2979);
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2986 = dot(vec3(_736, _739, _742), vec3(_2983, _2984, _2985));
                        float _2991 = 1.0 - (_2979 * _2936.w);
                        float _4344 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2992 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _2993 = sqrt(_2979) * _2955.w;
                        float _2996 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                        float _2997 = _2996 * _2996;
                        float _3000 = ((1.0 - _2997) * _2986) + _2997;
                        float _3003 = _2993 * _2993;
                        float _3007 = ((isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))) * _2992) / ((_3003 * 0.699999988079071044921875) + 1.0);
                        float _3011 = (-0.0) - _2494;
                        float _3012 = (-0.0) - _2495;
                        float _3013 = (-0.0) - _2496;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3018 = _3017 * _3011;
                        float _3019 = _3017 * _3012;
                        float _3020 = _3017 * _3013;
                        float _3028 = exp2(log2(1.0 / ((_3003 * 3.5) + 5.0)) * 0.25);
                        float _3029 = 1.0 - _811;
                        float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                        float _3037 = _3036 * _3036;
                        float _3038 = _3037 * _3037;
                        float _3039 = _3018 + _2983;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3049 = dot(vec3(_736, _739, _742), vec3(_3018, _3019, _3020));
                        float _4360 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3053 = dot(vec3(_736, _739, _742), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                        float _4371 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                        float _3061 = _2996 * _3037;
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _2986) + _3062;
                        float _4382 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3067 = 1.0 - _3037;
                        float _3077 = (0.5 / (((_3066 * ((_3052 * _3067) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3037) * _3052))) * _3066;
                        float _4393 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3087 = (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) / ((_3060 * _3060) * ((_3003 * 2.1991131305694580078125) + 3.141590118408203125))) * _2992;
                        _2845 = (_3007 * _2955.x) + _2913;
                        _2846 = (_3007 * _2955.y) + _2914;
                        _2847 = (_3007 * _2955.z) + _2915;
                        _2842 = (_3087 * _2972.x) + _2910;
                        _2843 = (_3087 * _2972.y) + _2911;
                        _2844 = (_3087 * _2972.z) + _2912;
                        if (_2917 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2917;
                        }
                    }
                    frontier_phi_61_pred = _2842;
                    frontier_phi_61_pred_1 = _2847;
                    frontier_phi_61_pred_2 = _2846;
                    frontier_phi_61_pred_3 = _2845;
                    frontier_phi_61_pred_4 = _2844;
                    frontier_phi_61_pred_5 = _2843;
                }
                _2642 = frontier_phi_61_pred;
                _2652 = frontier_phi_61_pred_1;
                _2650 = frontier_phi_61_pred_2;
                _2648 = frontier_phi_61_pred_3;
                _2646 = frontier_phi_61_pred_4;
                _2644 = frontier_phi_61_pred_5;
                uint _2793 = _2792 + 1u;
                if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2786 = _2642;
                    _2787 = _2644;
                    _2788 = _2646;
                    _2789 = _2648;
                    _2790 = _2650;
                    _2791 = _2652;
                    _2792 = _2793;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
        }
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.z;
        uint _2658 = (_2656 >> 8u) & 15u;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((4294967295u << _2658) & _2540) == 0u)
        {
            _2754 = _2641;
            _2756 = _2643;
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
            _2764 = _2651;
        }
        else
        {
            float _2779 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
            float _2780 = _2779 * _2494;
            float _2781 = _2779 * _2495;
            float _2782 = _2779 * _2496;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2658 < ((_2656 >> 12u) & 15u))
            {
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2893 = _2641;
                float _2894 = _2643;
                float _2895 = _2645;
                float _2896 = _2647;
                float _2897 = _2649;
                float _2898 = _2651;
                uint _2899 = _2658;
                uint _2908;
                bool _2909;
                for (;;)
                {
                    _2908 = texelFetch(g_lightClassification, int((((_2534 << 5u) + (_2520 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                    _2909 = _2908 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2909)
                    {
                        frontier_phi_67_pred = _2896;
                        frontier_phi_67_pred_1 = _2897;
                        frontier_phi_67_pred_2 = _2898;
                        frontier_phi_67_pred_3 = _2895;
                        frontier_phi_67_pred_4 = _2894;
                        frontier_phi_67_pred_5 = _2893;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3105 = _2893;
                        float _3106 = _2894;
                        float _3107 = _2895;
                        float _3108 = _2896;
                        float _3109 = _2897;
                        float _3110 = _2898;
                        uint _3111 = _2908;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3180;
                        vec4 _3195;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3122 = ((_2899 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3167 = (_3122 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3122 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3122 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3122 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2496, _3229.z, fma(_2495, _3229.y, _3229.x * _2494)) + _3229.w;
                            _3242 = !((fma(_2496, _3210.z, fma(_2495, _3210.y, _3210.x * _2494)) + _3210.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3137.x - _2494;
                                float _3270 = _3137.y - _2495;
                                float _3271 = _3137.z - _2496;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3138 * _3138));
                                float _4404 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3287 = sqrt(_3272) * _3153.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_736, _739, _742))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2496, _3180.z, fma(_2495, _3180.y, _3180.x * _2494)) + _3180.w) / _3241;
                                float _3301 = (fma(_2496, _3195.z, fma(_2495, _3195.y, _3195.x * _2494)) + _3195.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4420 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _811;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2780;
                                float _3331 = _3277 - _2781;
                                float _3332 = _3278 - _2782;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2780, (-0.0) - _2781, (-0.0) - _2782));
                                float _4431 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3344 = dot(vec3(_736, _739, _742), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4442 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_736, _739, _742), vec3(_3276, _3277, _3278))) + _3353;
                                float _4453 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4464 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3381 * _3165.x;
                                frontier_phi_73_pred_1 = _3381 * _3165.y;
                                frontier_phi_73_pred_2 = _3307 * _3153.z;
                                frontier_phi_73_pred_3 = _3307 * _3153.y;
                                frontier_phi_73_pred_4 = _3307 * _3153.x;
                                frontier_phi_73_pred_5 = _3381 * _3165.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_73_pred;
                            _3386 = frontier_phi_73_pred_1;
                            _3390 = frontier_phi_73_pred_2;
                            _3389 = frontier_phi_73_pred_3;
                            _3388 = frontier_phi_73_pred_4;
                            _3387 = frontier_phi_73_pred_5;
                            _3095 = _3388 + _3108;
                            _3096 = _3389 + _3109;
                            _3097 = _3390 + _3110;
                            _3092 = _3385 + _3105;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3095;
                        frontier_phi_67_pred_1 = _3096;
                        frontier_phi_67_pred_2 = _3097;
                        frontier_phi_67_pred_3 = _3094;
                        frontier_phi_67_pred_4 = _3093;
                        frontier_phi_67_pred_5 = _3092;
                    }
                    _2761 = frontier_phi_67_pred;
                    _2763 = frontier_phi_67_pred_1;
                    _2765 = frontier_phi_67_pred_2;
                    _2759 = frontier_phi_67_pred_3;
                    _2757 = frontier_phi_67_pred_4;
                    _2755 = frontier_phi_67_pred_5;
                    uint _2900 = _2899 + 1u;
                    if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2893 = _2755;
                        _2894 = _2757;
                        _2895 = _2759;
                        _2896 = _2761;
                        _2897 = _2763;
                        _2898 = _2765;
                        _2899 = _2900;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2763;
                frontier_phi_55_56_ladder_1 = _2765;
                frontier_phi_55_56_ladder_2 = _2761;
                frontier_phi_55_56_ladder_3 = _2759;
                frontier_phi_55_56_ladder_4 = _2757;
                frontier_phi_55_56_ladder_5 = _2755;
            }
            else
            {
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            _2754 = frontier_phi_55_56_ladder_5;
            _2756 = frontier_phi_55_56_ladder_4;
            _2758 = frontier_phi_55_56_ladder_3;
            _2760 = frontier_phi_55_56_ladder_2;
            _2762 = frontier_phi_55_56_ladder;
            _2764 = frontier_phi_55_56_ladder_1;
        }
        float _2769 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2553 = (_2769 * _2760) + _1986;
        _2555 = (_2769 * _2762) + _1988;
        _2557 = (_2769 * _2764) + _1990;
        _2559 = ((_2754 * _779) * _2769) + _2334;
        _2561 = ((_2756 * _781) * _2769) + _2336;
        _2563 = ((_2758 * _782) * _2769) + _2338;
    }
    else
    {
        _2553 = _1986;
        _2555 = _1988;
        _2557 = _1990;
        _2559 = _2334;
        _2561 = _2336;
        _2563 = _2338;
    }
    float _4480 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4491 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4502 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    uint _2583 = _263 + 6u;
    float _2591 = _714 / cbSceneParam._m0[86u].x;
    float _2592 = _715 / cbSceneParam._m0[86u].y;
    vec4 _2606 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2608 = _2606.x;
    float _2609 = _2606.y;
    float _2610 = _2606.z;
    float _2611 = _2606.w;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2666 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2667 = _2666 / _648;
        float _2678 = _2667 * _699;
        float _2679 = _700 * _2667;
        float _2680 = (-0.0) - _2679;
        float _2682 = _2667 * _701;
        float _2684 = (cbSceneParam._m0[77u].w * _2680) / _2666;
        float _2685 = _2684 + cbSceneParam._m0[79u].w;
        float _2686 = cbSceneParam._m0[79u].w - _2679;
        float _2692 = sqrt(((_2678 * _2678) + (_2679 * _2679)) + (_2682 * _2682));
        float _2695 = (1.0 - (cbSceneParam._m0[77u].w / _2666)) * _2692;
        float _2700 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2702 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2855;
        if (abs((_2680 - _2684) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2855 = ((((_2685 > 0.0) ? exp2(_2700 * _2685) : (2.0 - exp2(_2702 * _2685))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2695;
        }
        else
        {
            float _2815 = 1.0 / cbSceneParam._m0[80u].x;
            float _2816 = isnan(_2686) ? _2685 : (isnan(_2685) ? _2686 : max(_2685, _2686));
            float _2817 = isnan(_2686) ? _2685 : (isnan(_2685) ? _2686 : min(_2685, _2686));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            _2855 = ((abs(_2692 / _2680) * cbSceneParam._m0[80u].y) * ((((_2826 - _2827) * 2.0) - ((exp2(_2700 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0)))) - exp2(_2700 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))))) * _2815)) - ((exp2(_2702 * _2826) - exp2(_2702 * _2827)) * _2815))) + (_2695 * cbSceneParam._m0[80u].z);
        }
        vec4 _2857 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2591, _2592, 1.0), 0.0);
        float _2866 = exp2((_2855 * (-1.44269502162933349609375)) * (1.0 - _2857.w));
        float _2867 = log2(_2866);
        float _2883 = log2(_2611);
        _2704 = (exp2(_2883 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].x)) * _2857.x) / cbSceneParam._m0[78u].x)) + _2608;
        _2706 = (exp2(_2883 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].y)) * _2857.y) / cbSceneParam._m0[78u].y)) + _2609;
        _2708 = (exp2(_2883 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2867 * cbSceneParam._m0[78u].z)) * _2857.z) / cbSceneParam._m0[78u].z)) + _2610;
        _2710 = _2866 * _2611;
    }
    else
    {
        _2704 = _2608;
        _2706 = _2609;
        _2708 = _2610;
        _2710 = _2611;
    }
    float _2722 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2723 = _2722 == 3.0;
    float _2724 = log2(_2710);
    float _2731 = exp2(_2724 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2553 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _795))) + ((_2559 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2732 = exp2(_2724 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2555 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _795))) + ((_2561 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2733 = exp2(_2724 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2557 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _795))) + ((_2563 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2742 = (_2722 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2742 * (_2723 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.y = _2742 * (_2723 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.z = _2742 * (_2723 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.w = cbInstanceData._m0[_2583].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2583].w;
}


