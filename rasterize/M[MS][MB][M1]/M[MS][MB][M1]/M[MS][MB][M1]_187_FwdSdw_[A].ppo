#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1443;
float _4106;
float _4107;
float _4108;
float _4109;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _373 = _371.x;
    float _385 = dot(vec4(_373, _371.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _402 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_373 - _385) * cbMtdParam._m0[24u].y) + _385) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4118 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _410 = (_403 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _411 = (_403 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _412 = (_403 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _461 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _475 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_451 - _461) * cbMtdParam._m0[24u].y) + _461) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4129 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _483 = (_476 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410;
    float _484 = (_476 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411;
    float _485 = (_476 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412;
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _531 = ((_503.x - _522) * _403) + _522;
    float _532 = ((_503.y - _523) * _403) + _523;
    float _533 = ((_503.z - _524) * _403) + _524;
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _558 = ((_545.z - _533) * _476) + _533;
    float _561 = ((((_545.x - _531) * _476) + _531) * 2.0) + (-1.0);
    float _563 = ((((_545.y - _532) * _476) + _532) * 2.0) + (-1.0);
    float _564 = dot(vec2(_561, _563), vec2(_561, _563));
    float _4140 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _609 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _612 = ((isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : min(_609, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _621 = (_612 - ((((((_602 - _603) * cbMtdParam._m0[24u].z) + _603) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _612))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4161 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _629 = (_622 * (cbMtdParam._m0[17u].x - _483)) + _483;
    float _630 = (_622 * (cbMtdParam._m0[17u].y - _484)) + _484;
    float _631 = (_622 * (cbMtdParam._m0[17u].z - _485)) + _485;
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _673 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_645 - _646) * cbMtdParam._m0[24u].w) + _646) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4172 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _682 = ((((cbMtdParam._m0[10u].x - _629) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _674) + _629;
    float _683 = ((((cbMtdParam._m0[10u].y - _630) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _674) + _630;
    float _684 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _631)) * _674) + _631;
    vec4 _710 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _712 = _710.x;
    float _730 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _712) * _403) + _712;
    float _747 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _730) * _476) + _730;
    float _751 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _747) * cbMtdParam._m0[19u].z) + _747;
    float _753 = _751 - (_751 * _622);
    float _755 = _753 - (_753 * _674);
    vec4 _769 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _776 = (_769.x * 2.0) + (-1.0);
    float _777 = (_769.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _4183 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _786 = (_622 * (_769.z - _558)) + _558;
    float _789 = ((cbMtdParam._m0[23u].y - _786) * _674) + _786;
    vec4 _808 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _814 = (_808.x * 2.0) + (-1.0);
    float _815 = (_808.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _4194 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _833 = (((_776 - _561) + (cbMtdParam._m0[21u].x * _561)) * _622) + _561;
    float _834 = (((_777 - _563) + (cbMtdParam._m0[21u].x * _563)) * _622) + _563;
    float _835 = (_622 * (sqrt(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) - _569)) + _569;
    float _846 = (((_814 - _833) + (_833 * cbMtdParam._m0[22u].z)) * _674) + _833;
    float _847 = (((_815 - _834) + (_834 * cbMtdParam._m0[22u].z)) * _674) + _834;
    float _848 = ((sqrt(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) - _835) * _674) + _835;
    float _850 = cbMtdParam._m0[22u].x + _582.w;
    float _853 = fma(_848, _252 * NORMAL.x, fma(_847, _259 * TANGENT.x, (_245 * _237) * _846));
    float _856 = fma(_848, _252 * NORMAL.y, fma(_847, _259 * TANGENT.y, (_245 * _238) * _846));
    float _859 = fma(_848, _252 * NORMAL.z, fma(_847, _259 * TANGENT.z, (_245 * _239) * _846));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _4205 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _867 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4227 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4238 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4249 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4260 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _872 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    vec4 _950 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _952 = _950.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1124 = sqrt(((_936 * _936) + (_937 * _937)) + (_938 * _938));
        float _1130 = (cbMatDynParam._m0[5u].x * _1124) + cbMatDynParam._m0[5u].y;
        float _4271 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1135 = (cbMatDynParam._m0[5u].z * _1124) + cbMatDynParam._m0[5u].w;
        float _4282 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) - _1131)) + _1131) < ((_952 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _963 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _964 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _982 = fma(_866, cbSceneParam._m0[5u].z, fma(_865, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _864));
    float _985 = fma(_866, cbSceneParam._m0[6u].z, fma(_865, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _864));
    float _988 = fma(_866, cbSceneParam._m0[7u].z, fma(_865, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _864));
    uint _1001 = _265 + 9u;
    uint _1002 = _1001 + uint(cbMatDynParam._m0[0u].w);
    float _1008 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_1002].x;
    float _1009 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * cbInstanceData._m0[_1002].y;
    float _1010 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * cbInstanceData._m0[_1002].z;
    float _4293 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _1014 = 1.0 - _872;
    float _1015 = _1011 * _1014;
    float _1016 = _1012 * _1014;
    float _1017 = _1013 * _1014;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _872;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _872;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _872;
    float _1025 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    float _1028 = _1024 + 0.039999999105930328369140625;
    vec4 _1037 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _963, cbSceneParam._m0[86u].y * _964));
    float _1041 = ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * TEXCOORD_5.w) * _1037.x;
    float _1042 = dot(vec3(_864, _865, _866), vec3(_943, _944, _945));
    float _1045 = _1042 * 2.0;
    float _1049 = (_1045 * _864) - _943;
    float _1050 = (_1045 * _865) - _944;
    float _1051 = (_1045 * _866) - _945;
    float _1055 = abs(dot(vec3(_943, _944, _945), vec3(_864, _865, _866)));
    float _4326 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1057 = sqrt(_867);
    float _1070 = exp2((_1057 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1057 * 3.0));
    float _1076 = (1.0 - _1070) * ((_1057 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1077 = _1070 * _1057;
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1442;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1167 = fma(_1113, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105));
        float _1171 = fma(_1113, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105));
        float _1175 = fma(_1113, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105));
        float _1200 = _1105 + _864;
        float _1201 = _1109 + _865;
        float _1202 = _1113 + _866;
        float _1212 = fma(_1202, cbModelParam._m0[26u].z, fma(_1201, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1200)) - _1167;
        float _1213 = fma(_1202, cbModelParam._m0[27u].z, fma(_1201, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1200)) - _1171;
        float _1214 = fma(_1202, cbModelParam._m0[28u].z, fma(_1201, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1200)) - _1175;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1167 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1171 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[34u].z) + ((((((_1175 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1270 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1236.x + (-0.5));
        float _1272 = _1270 * (_1236.y + (-0.5));
        float _1273 = _1270 * (_1236.z + (-0.5));
        float _1280 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1243.x + (-0.5));
        float _1282 = _1280 * (_1243.y + (-0.5));
        float _1283 = _1280 * (_1243.z + (-0.5));
        float _1290 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1250.x + (-0.5));
        float _1292 = _1290 * (_1250.y + (-0.5));
        float _1293 = _1290 * (_1250.z + (-0.5));
        float _1300 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1257.x + (-0.5));
        float _1302 = _1300 * (_1257.y + (-0.5));
        float _1303 = _1300 * (_1257.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1324 = (dot(vec3(_864, _865, _866), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1334 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4374 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1336 + 1.0))) + _1341) * _1304;
        float _1351 = _1272 * 0.5;
        float _1352 = _1282 * 0.5;
        float _1353 = _1292 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_864, _865, _866), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4407 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1378 + 1.0))) + _1383) * _1305;
        float _1393 = _1273 * 0.5;
        float _1394 = _1283 * 0.5;
        float _1395 = _1293 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_864, _865, _866), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4440 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1420 + 1.0))) + _1425) * _1306;
        _1442 = _1273;
        _1444 = _1272;
        _1445 = _1271;
        _1446 = _1283;
        _1447 = _1282;
        _1448 = _1281;
        _1449 = _1293;
        _1450 = _1292;
        _1451 = _1291;
        _1452 = _1306;
        _1453 = _1305;
        _1454 = _1304;
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1457 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1443;
        _1444 = _1443;
        _1445 = _1443;
        _1446 = _1443;
        _1447 = _1443;
        _1448 = _1443;
        _1449 = _1443;
        _1450 = _1443;
        _1451 = _1443;
        _1452 = _1443;
        _1453 = _1443;
        _1454 = _1443;
        _1455 = 0.0;
        _1456 = 0.0;
        _1457 = 0.0;
    }
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1484 = fma(_1113, cbModelParam._m0[30u].z, fma(_1109, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105));
        float _1488 = fma(_1113, cbModelParam._m0[31u].z, fma(_1109, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105));
        float _1492 = fma(_1113, cbModelParam._m0[32u].z, fma(_1109, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105));
        float _1515 = _1105 + _864;
        float _1516 = _1109 + _865;
        float _1517 = _1113 + _866;
        float _1527 = fma(_1517, cbModelParam._m0[30u].z, fma(_1516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1515)) - _1484;
        float _1528 = fma(_1517, cbModelParam._m0[31u].z, fma(_1516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1515)) - _1488;
        float _1529 = fma(_1517, cbModelParam._m0[32u].z, fma(_1516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1515)) - _1492;
        float _1533 = inversesqrt(dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529)));
        float _1546 = ((_1533 * _1527) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1484 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1533 * _1528) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1488 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1533 * _1529) / cbModelParam._m0[35u].z) + ((((((_1492 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        float _1583 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1550.x + (-0.5));
        float _1585 = _1583 * (_1550.y + (-0.5));
        float _1586 = _1583 * (_1550.z + (-0.5));
        float _1593 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1557.x + (-0.5));
        float _1595 = _1593 * (_1557.y + (-0.5));
        float _1596 = _1593 * (_1557.z + (-0.5));
        float _1603 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1564.x + (-0.5));
        float _1605 = _1603 * (_1564.y + (-0.5));
        float _1606 = _1603 * (_1564.z + (-0.5));
        float _1613 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1571.x + (-0.5));
        float _1615 = _1613 * (_1571.y + (-0.5));
        float _1616 = _1613 * (_1571.z + (-0.5));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = _1584 * 0.5;
        float _1621 = _1594 * 0.5;
        float _1622 = _1604 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_864, _865, _866), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4503 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1647 + 1.0))) + _1652) * _1617;
        float _1662 = _1585 * 0.5;
        float _1663 = _1595 * 0.5;
        float _1664 = _1605 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_864, _865, _866), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4514 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4525 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4536 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_1689 + 1.0))) + _1694) * _1618;
        float _1704 = _1586 * 0.5;
        float _1705 = _1596 * 0.5;
        float _1706 = _1606 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_864, _865, _866), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4569 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1731 + 1.0))) + _1736) * _1619;
        _1753 = _1586;
        _1754 = _1585;
        _1755 = _1584;
        _1756 = _1596;
        _1757 = _1595;
        _1758 = _1594;
        _1759 = _1606;
        _1760 = _1605;
        _1761 = _1604;
        _1762 = _1619;
        _1763 = _1618;
        _1764 = _1617;
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
    }
    else
    {
        _1753 = _1443;
        _1754 = _1443;
        _1755 = _1443;
        _1756 = _1443;
        _1757 = _1443;
        _1758 = _1443;
        _1759 = _1443;
        _1760 = _1443;
        _1761 = _1443;
        _1762 = _1443;
        _1763 = _1443;
        _1764 = _1443;
        _1765 = 0.0;
        _1766 = 0.0;
        _1767 = 0.0;
    }
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1455)) + _1455;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1456)) + _1456;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1457)) + _1457;
    float _1800 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1777));
    float _1821 = _1049 * 0.5;
    float _1822 = _1050 * 0.5;
    float _1823 = _1051 * 0.5;
    float _1824 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1827 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1830 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1864;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1837 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1442, _1446, _1449, _1452));
        float _1841 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1444, _1447, _1450, _1453));
        float _1845 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1445, _1448, _1451, _1454));
        float _1852 = dot(vec4(cbModelParam._m0[39u]), vec4(_1821, _1822, _1823, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1875;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1866 = dot(vec4(cbModelParam._m0[40u]), vec4(_1821, _1822, _1823, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1879 = (_1875 * cbModelParam._m0[1u].x) + (_1864 * (1.0 - cbModelParam._m0[1u].x));
    float _1889 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1889 : min(cbModelParam._m0[25u].z, _1889));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1938 = fma(_1113, cbModelParam._m0[13u].z, fma(_1109, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105)) + cbModelParam._m0[13u].w;
        float _1942 = fma(_1113, cbModelParam._m0[14u].z, fma(_1109, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105)) + cbModelParam._m0[14u].w;
        float _1946 = fma(_1113, cbModelParam._m0[15u].z, fma(_1109, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105)) + cbModelParam._m0[15u].w;
        float _1949 = fma(_1051, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049));
        float _1952 = fma(_1051, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049));
        float _1955 = fma(_1051, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049));
        float _1983;
        if (_1949 > 0.0)
        {
            _1983 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1983 = frontier_phi_17_15_ladder;
        }
        float _2155;
        if (_1952 > 0.0)
        {
            _2155 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2155 = frontier_phi_26_22_ladder;
        }
        float _2450;
        if (_1955 > 0.0)
        {
            _2450 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2450 = frontier_phi_38_33_ladder;
        }
        float _2452 = isnan(_2155) ? _1983 : (isnan(_1983) ? _2155 : min(_1983, _2155));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1949) + _1938;
        float _2458 = (_2453 * _1952) + _1942;
        float _2459 = (_2453 * _1955) + _1946;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1890);
            frontier_phi_16_38_ladder = _2604.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2604.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2604.x * cbModelParam._m0[1u].y;
        }
        _1971 = frontier_phi_16_38_ladder_2;
        _1973 = frontier_phi_16_38_ladder_1;
        _1975 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1049, _1050, _1051), _1890);
        _1971 = _1959.x * cbModelParam._m0[1u].y;
        _1973 = _1959.y * cbModelParam._m0[1u].y;
        _1975 = _1959.z * cbModelParam._m0[1u].y;
    }
    float _1979 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1979 : min(cbModelParam._m0[25u].w, _1979));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2034 = fma(_1113, cbModelParam._m0[21u].z, fma(_1109, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105)) + cbModelParam._m0[21u].w;
        float _2038 = fma(_1113, cbModelParam._m0[22u].z, fma(_1109, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105)) + cbModelParam._m0[22u].w;
        float _2042 = fma(_1113, cbModelParam._m0[23u].z, fma(_1109, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105)) + cbModelParam._m0[23u].w;
        float _2045 = fma(_1051, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049));
        float _2048 = fma(_1051, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049));
        float _2051 = fma(_1051, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049));
        float _2160;
        if (_2045 > 0.0)
        {
            _2160 = abs((1.0 - _2034) / _2045);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2034 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2160 = frontier_phi_28_24_ladder;
        }
        float _2477;
        if (_2048 > 0.0)
        {
            _2477 = abs((1.0 - _2038) / _2048);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2038 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2477 = frontier_phi_40_35_ladder;
        }
        float _2815;
        if (_2051 > 0.0)
        {
            _2815 = abs((1.0 - _2042) / _2051);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2042 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2815 = frontier_phi_50_47_ladder;
        }
        float _2817 = isnan(_2477) ? _2160 : (isnan(_2160) ? _2477 : min(_2160, _2477));
        float _2818 = isnan(_2815) ? _2817 : (isnan(_2817) ? _2815 : min(_2817, _2815));
        float _2822 = (_2818 * _2045) + _2034;
        float _2823 = (_2818 * _2048) + _2038;
        float _2824 = (_2818 * _2051) + _2042;
        float _2825 = _2818 * 9.9999997473787516355514526367188e-05;
        float _2826 = (-1.0) - _2825;
        float _2828 = _2825 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2824 > _2828) || ((_2824 < _2826) || ((_2823 > _2828) || ((_2823 < _2826) || ((_2822 < _2826) || (_2822 > _2828))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2824, cbModelParam._m0[17u].z, fma(_2823, cbModelParam._m0[17u].y, _2822 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2824, cbModelParam._m0[18u].z, fma(_2823, cbModelParam._m0[18u].y, _2822 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2824, cbModelParam._m0[19u].z, fma(_2823, cbModelParam._m0[19u].y, _2822 * cbModelParam._m0[19u].x))), _1980);
            frontier_phi_25_50_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2070 = frontier_phi_25_50_ladder_2;
        _2072 = frontier_phi_25_50_ladder_1;
        _2074 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1049, _1050, _1051), _1980);
        _2070 = _2054.x * cbModelParam._m0[1u].z;
        _2072 = _2054.y * cbModelParam._m0[1u].z;
        _2074 = _2054.z * cbModelParam._m0[1u].z;
    }
    float _2087 = (((_1076 * _1025) + _1077) * _1041) * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2089 = (((_1076 * _1027) + _1077) * _1041) * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2091 = (((_1076 * _1028) + _1077) * _1041) * ((cbModelParam._m0[1u].w * (_2074 - _1975)) + _1975);
    float _2094 = fma(_2091, cbSceneParam._m0[89u].z, fma(_2089, cbSceneParam._m0[89u].y, _2087 * cbSceneParam._m0[89u].x));
    float _2097 = fma(_2091, cbSceneParam._m0[90u].z, fma(_2089, cbSceneParam._m0[90u].y, _2087 * cbSceneParam._m0[90u].x));
    float _2100 = fma(_2091, cbSceneParam._m0[91u].z, fma(_2089, cbSceneParam._m0[91u].y, _2087 * cbSceneParam._m0[91u].x));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2147 = _2134 / _2146;
    float _2148 = _2138 / _2146;
    float _2149 = _2142 / _2146;
    float _2296;
    float _2297;
    float _2298;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2176 = ((uint(_2149 > cbSceneParam._m0[59u].y) + uint(_2149 > cbSceneParam._m0[59u].x)) + uint(_2149 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2177 = _2176 + 43u;
        uint _2185 = _2176 + 44u;
        uint _2193 = _2176 + 45u;
        uint _2201 = _2176 + 46u;
        float _2212 = fma(_2146, cbSceneParam._m0[_2177].w, fma(_2142, cbSceneParam._m0[_2177].z, fma(_2138, cbSceneParam._m0[_2177].y, _2134 * cbSceneParam._m0[_2177].x)));
        float _2216 = fma(_2146, cbSceneParam._m0[_2185].w, fma(_2142, cbSceneParam._m0[_2185].z, fma(_2138, cbSceneParam._m0[_2185].y, _2134 * cbSceneParam._m0[_2185].x)));
        float _2224 = fma(_2146, cbSceneParam._m0[_2201].w, fma(_2142, cbSceneParam._m0[_2201].z, fma(_2138, cbSceneParam._m0[_2201].y, _2134 * cbSceneParam._m0[_2201].x)));
        float _2229 = cbSceneParam._m0[33u].z * _2224;
        float _2231 = cbSceneParam._m0[33u].w * _2224;
        float _2234 = fma(_2146, cbSceneParam._m0[_2193].w, fma(_2142, cbSceneParam._m0[_2193].z, fma(_2138, cbSceneParam._m0[_2193].y, _2134 * cbSceneParam._m0[_2193].x))) / _2224;
        float _2282 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
        float _4695 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2289 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2229 + _2212) / _2224, (_2231 + _2216) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2231 + _2212) / _2224, (_2216 - _2229) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2229) / _2224, (_2216 - _2231) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2231) / _2224, (_2229 + _2216) / _2224), _2234), 0.0)).x), vec4(0.25)));
        _2296 = 1.0 - (_2289 * cbSceneParam._m0[34u].x);
        _2297 = 1.0 - (_2289 * cbSceneParam._m0[34u].y);
        _2298 = 1.0 - (_2289 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2296 = 1.0;
        _2297 = 1.0;
        _2298 = 1.0;
    }
    float _2362;
    float _2364;
    float _2366;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2350 = fma(_2146, cbSceneParam._m0[63u].w, fma(_2142, cbSceneParam._m0[63u].z, fma(_2138, cbSceneParam._m0[63u].y, _2134 * cbSceneParam._m0[63u].x)));
        float _2351 = fma(_2146, cbSceneParam._m0[60u].w, fma(_2142, cbSceneParam._m0[60u].z, fma(_2138, cbSceneParam._m0[60u].y, _2134 * cbSceneParam._m0[60u].x))) / _2350;
        float _2352 = fma(_2146, cbSceneParam._m0[61u].w, fma(_2142, cbSceneParam._m0[61u].z, fma(_2138, cbSceneParam._m0[61u].y, _2134 * cbSceneParam._m0[61u].x))) / _2350;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2351 >= cbSceneParam._m0[64u].x) && (_2352 >= cbSceneParam._m0[64u].y)) && (_2351 <= cbSceneParam._m0[64u].z)) && (_2352 <= cbSceneParam._m0[64u].w))
        {
            float _2490 = fma(_2146, cbSceneParam._m0[62u].w, fma(_2142, cbSceneParam._m0[62u].z, fma(_2138, cbSceneParam._m0[62u].y, _2134 * cbSceneParam._m0[62u].x))) / _2350;
            float _2494 = isnan(cbSceneParam._m0[41u].w) ? _2490 : (isnan(_2490) ? cbSceneParam._m0[41u].w : max(_2490, cbSceneParam._m0[41u].w));
            float _2537 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
            float _4711 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
            float _2544 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2351, cbSceneParam._m0[33u].w + _2352), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2351, _2352 - cbSceneParam._m0[33u].z), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].z, _2352 - cbSceneParam._m0[33u].w), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2352), _2494), 0.0)).x), vec4(0.25)));
            float _2548 = 1.0 - (_2544 * cbSceneParam._m0[34u].x);
            float _2549 = 1.0 - (_2544 * cbSceneParam._m0[34u].y);
            float _2550 = 1.0 - (_2544 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2550) ? _2298 : (isnan(_2298) ? _2550 : min(_2298, _2550));
            frontier_phi_37_36_ladder_1 = isnan(_2549) ? _2297 : (isnan(_2297) ? _2549 : min(_2297, _2549));
            frontier_phi_37_36_ladder_2 = isnan(_2548) ? _2296 : (isnan(_2296) ? _2548 : min(_2296, _2548));
        }
        else
        {
            frontier_phi_37_36_ladder = _2298;
            frontier_phi_37_36_ladder_1 = _2297;
            frontier_phi_37_36_ladder_2 = _2296;
        }
        _2362 = frontier_phi_37_36_ladder_2;
        _2364 = frontier_phi_37_36_ladder_1;
        _2366 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2362 = _2296;
        _2364 = _2297;
        _2366 = _2298;
    }
    uvec4 _2371 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2373 = _2371.x * 14u;
    uint _2374 = _2373 + 13u;
    float _2381 = _1041 + (-1.0);
    float _2386 = (cbLight._m0[_2374].x * _2381) + 1.0;
    float _2387 = (cbLight._m0[_2374].y * _2381) + 1.0;
    float _2388 = (cbLight._m0[_2374].z * _2381) + 1.0;
    float _2389 = (cbLight._m0[_2374].w * _2381) + 1.0;
    uint _2390 = _2373 + 5u;
    float _2396 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
    uint _2400 = _2373 + 4u;
    float _2409 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
    uint _2413 = _2373 | 1u;
    float _2424 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_864, _865, _866));
    float _2427 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_864, _865, _866));
    float _4747 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _4758 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2432 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * 0.3183098733425140380859375;
    float _2434 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * 0.3183098733425140380859375;
    float _2441 = ((cbLight._m0[_2390].x * _2396) * _2434) + (((cbLight._m0[_2400].x * _2362) * _2409) * _2432);
    float _2442 = ((_2396 * cbLight._m0[_2390].y) * _2434) + (((cbLight._m0[_2400].y * _2364) * _2409) * _2432);
    float _2443 = ((_2396 * cbLight._m0[_2390].z) * _2434) + (((cbLight._m0[_2400].z * _2366) * _2409) * _2432);
    uvec4 _2447 = floatBitsToUint(cbLight._m0[_2373 + 12u]);
    bool _2449 = _2447.x == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2449)
    {
        _2551 = _2441;
        _2553 = _2442;
        _2555 = _2443;
    }
    else
    {
        uint _2559 = _2373 + 6u;
        float _2575 = (dot(vec3(cbLight._m0[_2373 + 2u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4769 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2578 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2551 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2441;
        _2553 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2442;
        _2555 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2443;
    }
    bool _2558 = _2447.y == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2558)
    {
        _2613 = _2551;
        _2615 = _2553;
        _2617 = _2555;
    }
    else
    {
        uint _2786 = _2373 + 7u;
        float _2802 = (dot(vec3(cbLight._m0[_2373 + 3u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2803 = _2802 * _2802;
        float _4785 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2804 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2805 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2613 = (((cbLight._m0[_2786].x * 0.3183098733425140380859375) * _2804) * _2805) + _2551;
        _2615 = (((cbLight._m0[_2786].y * 0.3183098733425140380859375) * _2804) * _2805) + _2553;
        _2617 = (((cbLight._m0[_2786].z * 0.3183098733425140380859375) * _2804) * _2805) + _2555;
    }
    uint _2620 = _2373 + 8u;
    float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _867) * 0.949999988079071044921875);
    float _2634 = _2633 * _2633;
    float _2635 = cbLight._m0[_2373].x + _943;
    float _2636 = cbLight._m0[_2373].y + _944;
    float _2637 = cbLight._m0[_2373].z + _945;
    float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
    float _2642 = _2641 * _2635;
    float _2643 = _2641 * _2636;
    float _2644 = _2641 * _2637;
    float _2645 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2373].xyz));
    float _4801 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _4812 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _2649 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2650 = dot(vec3(_864, _865, _866), vec3(_2642, _2643, _2644));
    float _4823 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _2654 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2642, _2643, _2644));
    float _4834 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = _2634 * _2634;
    float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
    float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
    float _2671 = 0.959999978542327880859375 - _1022;
    float _2673 = 0.959999978542327880859375 - _1023;
    float _2674 = 0.959999978542327880859375 - _1024;
    float _2681 = 1.0 - _2634;
    float _2692 = (0.5 / (((_2649 * ((_2648 * _2681) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2681) + _2634) * _2648))) * _2648;
    float _4845 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2694 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
    uint _2708 = _2373 + 9u;
    float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _867) * 0.949999988079071044921875);
    float _2720 = _2719 * _2719;
    float _2721 = cbLight._m0[_2413].x + _943;
    float _2722 = cbLight._m0[_2413].y + _944;
    float _2723 = cbLight._m0[_2413].z + _945;
    float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
    float _2728 = _2727 * _2721;
    float _2729 = _2727 * _2722;
    float _2730 = _2727 * _2723;
    float _2731 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2413].xyz));
    float _4856 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2734 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _2735 = dot(vec3(_864, _865, _866), vec3(_2728, _2729, _2730));
    float _4867 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2739 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2728, _2729, _2730));
    float _4878 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2743 = _2720 * _2720;
    float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
    float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0);
    float _2761 = 1.0 - _2720;
    float _2771 = (0.5 / (((_2649 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2761) + _2720) * _2734))) * _2734;
    float _4889 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2773 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
    float _2783 = (((((_2754 * _2671) + _1025) * cbLight._m0[_2708].x) * _2773) * _2396) + ((((cbLight._m0[_2620].x * _2362) * ((_2670 * _2671) + _1025)) * _2694) * _2409);
    float _2784 = (((((_2754 * _2673) + _1027) * cbLight._m0[_2708].y) * _2773) * _2396) + ((((cbLight._m0[_2620].y * _2364) * ((_2670 * _2673) + _1027)) * _2694) * _2409);
    float _2785 = (((((_2754 * _2674) + _1028) * cbLight._m0[_2708].z) * _2773) * _2396) + ((((cbLight._m0[_2620].z * _2366) * ((_2670 * _2674) + _1028)) * _2694) * _2409);
    float _2841;
    float _2843;
    float _2845;
    if (_2449)
    {
        _2841 = _2783;
        _2843 = _2784;
        _2845 = _2785;
    }
    else
    {
        uint _2847 = _2373 + 2u;
        uint _2851 = _2373 + 10u;
        float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2847].w)) * _867) * 0.949999988079071044921875);
        float _2866 = _2865 * _2865;
        float _2867 = cbLight._m0[_2847].x + _943;
        float _2868 = cbLight._m0[_2847].y + _944;
        float _2869 = cbLight._m0[_2847].z + _945;
        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
        float _2874 = _2873 * _2867;
        float _2875 = _2873 * _2868;
        float _2876 = _2873 * _2869;
        float _2877 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2847].xyz));
        float _4900 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2881 = dot(vec3(_864, _865, _866), vec3(_2874, _2875, _2876));
        float _4911 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2885 = dot(vec3(cbLight._m0[_2847].xyz), vec3(_2874, _2875, _2876));
        float _4922 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2889 = _2866 * _2866;
        float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
        float _2900 = exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0);
        float _2907 = 1.0 - _2866;
        float _2917 = (0.5 / (((_2649 * ((_2880 * _2907) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2907) + _2866) * _2880))) * _2880;
        float _4933 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2841 = (((((_2900 * _2671) + _1025) * cbLight._m0[_2851].x) * _2919) * _2920) + _2783;
        _2843 = (((((_2900 * _2673) + _1027) * cbLight._m0[_2851].y) * _2919) * _2920) + _2784;
        _2845 = (((((_2900 * _2674) + _1028) * cbLight._m0[_2851].z) * _2919) * _2920) + _2785;
    }
    float _2951;
    float _2953;
    float _2955;
    if (_2558)
    {
        _2951 = _2841;
        _2953 = _2843;
        _2955 = _2845;
    }
    else
    {
        uint _2962 = _2373 + 3u;
        uint _2966 = _2373 + 11u;
        float _2980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2962].w)) * _867) * 0.949999988079071044921875);
        float _2981 = _2980 * _2980;
        float _2982 = cbLight._m0[_2962].x + _943;
        float _2983 = cbLight._m0[_2962].y + _944;
        float _2984 = cbLight._m0[_2962].z + _945;
        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
        float _2989 = _2988 * _2982;
        float _2990 = _2988 * _2983;
        float _2991 = _2988 * _2984;
        float _2992 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2962].xyz));
        float _4949 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _2996 = dot(vec3(_864, _865, _866), vec3(_2989, _2990, _2991));
        float _4960 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _3000 = dot(vec3(cbLight._m0[_2962].xyz), vec3(_2989, _2990, _2991));
        float _4971 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3004 = _2981 * _2981;
        float _3008 = ((_2999 * _2999) * (_3004 + (-1.0))) + 1.0;
        float _3015 = exp2(log2(1.0 - (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) * 5.0);
        float _3022 = 1.0 - _2981;
        float _3032 = (0.5 / (((_2649 * ((_2995 * _3022) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _3022) + _2981) * _2995))) * _2995;
        float _4982 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3034 = (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_3004 / ((_3008 * _3008) * 3.141590118408203125));
        float _3035 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2951 = (((((_3015 * _2671) + _1025) * cbLight._m0[_2966].x) * _3034) * _3035) + _2841;
        _2953 = (((((_3015 * _2673) + _1027) * cbLight._m0[_2966].y) * _3034) * _3035) + _2843;
        _2955 = (((((_3015 * _2674) + _1028) * cbLight._m0[_2966].z) * _3034) * _3035) + _2845;
    }
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_2371.y == 0u)
    {
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.x;
        uint _3068 = uint((float(_3056.y) * floor(float(uint(cbSceneParam._m0[85u].y * _964) / _3057))) + floor(float(uint(cbSceneParam._m0[85u].x * _963) / _3057)));
        float _3078 = (log2(_2149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3079 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        uint _3082 = uint(isnan(14.0) ? _3079 : (isnan(_3079) ? 14.0 : min(_3079, 14.0)));
        uvec4 _3087 = texelFetch(g_lightClusterGridBuffer, int(((_3082 << 2u) + (_3068 << 6u)) >> 2u));
        uint _3088 = _3087.x;
        uint _3089 = _3056.z;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((((1u << ((_3089 >> 4u) & 15u)) + 4294967295u) & _3088) == 0u) || ((_3089 & 240u) == 0u))
        {
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
        }
        else
        {
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            float _3326 = 0.0;
            uint _3327 = 0u;
            uint _3336;
            bool _3337;
            for (;;)
            {
                _3336 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3327 << 2u)) >> 2u)).x;
                _3337 = _3336 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3337)
                {
                    frontier_phi_71_pred = _3326;
                    frontier_phi_71_pred_1 = _3325;
                    frontier_phi_71_pred_2 = _3324;
                    frontier_phi_71_pred_3 = _3323;
                    frontier_phi_71_pred_4 = _3322;
                    frontier_phi_71_pred_5 = _3321;
                }
                else
                {
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    uint _3472;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3323;
                    _3469 = _3324;
                    _3470 = _3325;
                    _3471 = _3326;
                    _3472 = _3336;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    for (;;)
                    {
                        uint _3476 = uint(findLSB(_3472)) + (_3327 << 5u);
                        uint _3473 = (_3472 + 4294967295u) & _3472;
                        uint _3478 = _3476 * 48u;
                        vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3478)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 3u)).x));
                        uint _3498 = (_3476 * 48u) + 4u;
                        vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 3u)).x));
                        uint _3517 = (_3476 * 48u) + 8u;
                        vec3 _3528 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x));
                        float _3532 = _3492.x - _2147;
                        float _3533 = _3492.y - _2148;
                        float _3534 = _3492.z - _2149;
                        float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                        float _3538 = inversesqrt(_3535);
                        float _3539 = _3538 * _3532;
                        float _3540 = _3538 * _3533;
                        float _3541 = _3538 * _3534;
                        float _3542 = dot(vec3(_982, _985, _988), vec3(_3539, _3540, _3541));
                        float _3547 = 1.0 - (_3535 * _3492.w);
                        float _5008 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3548 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                        float _3549 = sqrt(_3535) * _3511.w;
                        float _3552 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                        float _3553 = _3552 * _3552;
                        float _3556 = ((1.0 - _3553) * _3542) + _3553;
                        float _3559 = _3549 * _3549;
                        float _3563 = ((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3548) / ((_3559 * 0.699999988079071044921875) + 1.0);
                        float _3567 = (-0.0) - _2147;
                        float _3568 = (-0.0) - _2148;
                        float _3569 = (-0.0) - _2149;
                        float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                        float _3574 = _3573 * _3567;
                        float _3575 = _3573 * _3568;
                        float _3576 = _3573 * _3569;
                        float _3583 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                        float _3584 = 1.0 - _1057;
                        float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                        float _3592 = _3591 * _3591;
                        float _3593 = _3592 * _3592;
                        float _3594 = _3574 + _3539;
                        float _3595 = _3575 + _3540;
                        float _3596 = _3576 + _3541;
                        float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                        float _3604 = dot(vec3(_982, _985, _988), vec3(_3574, _3575, _3576));
                        float _5024 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3607 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                        float _3608 = dot(vec3(_982, _985, _988), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                        float _5035 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3611 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                        float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                        float _3616 = _3552 * _3592;
                        float _3617 = _3616 * _3616;
                        float _3620 = ((1.0 - _3617) * _3542) + _3617;
                        float _5046 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3621 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3622 = 1.0 - _3592;
                        float _3632 = (0.5 / (((_3621 * ((_3607 * _3622) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3592) * _3607))) * _3621;
                        float _5057 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3643 = (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) / ((_3615 * _3615) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125))) * _3548;
                        _3396 = (_3563 * _3511.x) + _3469;
                        _3397 = (_3563 * _3511.y) + _3470;
                        _3398 = (_3563 * _3511.z) + _3471;
                        _3393 = (_3643 * _3528.x) + _3466;
                        _3394 = (_3643 * _3528.y) + _3467;
                        _3395 = (_3643 * _3528.z) + _3468;
                        if (_3473 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3395;
                            _3469 = _3396;
                            _3470 = _3397;
                            _3471 = _3398;
                            _3472 = _3473;
                        }
                    }
                    frontier_phi_71_pred = _3398;
                    frontier_phi_71_pred_1 = _3397;
                    frontier_phi_71_pred_2 = _3396;
                    frontier_phi_71_pred_3 = _3395;
                    frontier_phi_71_pred_4 = _3394;
                    frontier_phi_71_pred_5 = _3393;
                }
                _3179 = frontier_phi_71_pred;
                _3177 = frontier_phi_71_pred_1;
                _3175 = frontier_phi_71_pred_2;
                _3173 = frontier_phi_71_pred_3;
                _3171 = frontier_phi_71_pred_4;
                _3169 = frontier_phi_71_pred_5;
                uint _3328 = _3327 + 1u;
                if (_3328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3321 = _3169;
                    _3322 = _3171;
                    _3323 = _3173;
                    _3324 = _3175;
                    _3325 = _3177;
                    _3326 = _3179;
                    _3327 = _3328;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
        }
        uvec4 _3182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3183 = _3182.z;
        uint _3185 = (_3183 >> 8u) & 15u;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        float _3297;
        float _3299;
        if (((4294967295u << _3185) & _3088) == 0u)
        {
            _3289 = _3168;
            _3291 = _3170;
            _3293 = _3172;
            _3295 = _3174;
            _3297 = _3176;
            _3299 = _3178;
        }
        else
        {
            float _3314 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
            float _3315 = _3314 * _2147;
            float _3316 = _3314 * _2148;
            float _3317 = _3314 * _2149;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3185 < ((_3183 >> 12u) & 15u))
            {
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3298;
                float _3300;
                float _3449 = _3168;
                float _3450 = _3170;
                float _3451 = _3172;
                float _3452 = _3174;
                float _3453 = _3176;
                float _3454 = _3178;
                uint _3455 = _3185;
                uint _3464;
                bool _3465;
                for (;;)
                {
                    _3464 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3455 << 2u)) >> 2u)).x;
                    _3465 = _3464 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3465)
                    {
                        frontier_phi_82_pred = _3454;
                        frontier_phi_82_pred_1 = _3453;
                        frontier_phi_82_pred_2 = _3452;
                        frontier_phi_82_pred_3 = _3451;
                        frontier_phi_82_pred_4 = _3450;
                        frontier_phi_82_pred_5 = _3449;
                    }
                    else
                    {
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3953;
                        float _3954;
                        float _3955;
                        float _3670 = _3449;
                        float _3671 = _3450;
                        float _3672 = _3451;
                        float _3673 = _3452;
                        float _3674 = _3453;
                        float _3675 = _3454;
                        uint _3676 = _3464;
                        uint _3677;
                        vec4 _3702;
                        float _3703;
                        vec4 _3718;
                        vec3 _3730;
                        vec4 _3745;
                        vec4 _3760;
                        float _3806;
                        bool _3807;
                        for (;;)
                        {
                            uint _3687 = ((_3455 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3676));
                            _3677 = (_3676 + 4294967295u) & _3676;
                            uint _3689 = _3687 * 40u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            _3703 = _3702.w;
                            uint _3705 = (_3687 * 40u) + 4u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3720 = (_3687 * 40u) + 8u;
                            _3730 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x));
                            uint _3732 = (_3687 * 40u) + 16u;
                            _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3747 = (_3687 * 40u) + 20u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3687 * 40u) + 24u;
                            vec4 _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            uint _3781 = (_3687 * 40u) + 28u;
                            vec4 _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            _3806 = fma(_2149, _3794.z, fma(_2148, _3794.y, _3794.x * _2147)) + _3794.w;
                            _3807 = !((fma(_2149, _3775.z, fma(_2148, _3775.y, _3775.x * _2147)) + _3775.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3807)
                            {
                                float _3834 = _3702.x - _2147;
                                float _3835 = _3702.y - _2148;
                                float _3836 = _3702.z - _2149;
                                float _3837 = dot(vec3(_3834, _3835, _3836), vec3(_3834, _3835, _3836));
                                float _3840 = inversesqrt(_3837);
                                float _3841 = _3840 * _3834;
                                float _3842 = _3840 * _3835;
                                float _3843 = _3840 * _3836;
                                float _3847 = 1.0 - (_3837 / (_3703 * _3703));
                                float _5068 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3852 = sqrt(_3837) * _3718.w;
                                float _3854 = 1.39999997615814208984375 / (_3852 + 1.39999997615814208984375);
                                float _3855 = _3854 * _3854;
                                float _3858 = ((1.0 - _3855) * dot(vec3(_3841, _3842, _3843), vec3(_982, _985, _988))) + _3855;
                                float _3861 = _3852 * _3852;
                                float _3865 = (fma(_2149, _3745.z, fma(_2148, _3745.y, _3745.x * _2147)) + _3745.w) / _3806;
                                float _3866 = (fma(_2149, _3760.z, fma(_2148, _3760.y, _3760.x * _2147)) + _3760.w) / _3806;
                                float _3870 = 1.0 - dot(vec2(_3865, _3866), vec2(_3865, _3866));
                                float _5084 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3871 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3872 = _3871 * (((isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0))) * _3848) / ((_3861 * 0.699999988079071044921875) + 1.0));
                                float _3884 = exp2(log2(1.0 / ((_3861 * 3.5) + 5.0)) * 0.25);
                                float _3885 = 1.0 - _1057;
                                float _3892 = sqrt(1.0 - ((1.0 - (_3885 * _3885)) * (1.0 - (_3884 * _3884))));
                                float _3893 = _3892 * _3892;
                                float _3894 = _3893 * _3893;
                                float _3895 = _3841 - _3315;
                                float _3896 = _3842 - _3316;
                                float _3897 = _3843 - _3317;
                                float _3901 = inversesqrt(dot(vec3(_3895, _3896, _3897), vec3(_3895, _3896, _3897)));
                                float _3905 = dot(vec3(_982, _985, _988), vec3((-0.0) - _3315, (-0.0) - _3316, (-0.0) - _3317));
                                float _5095 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3908 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                                float _3909 = dot(vec3(_982, _985, _988), vec3(_3901 * _3895, _3901 * _3896, _3901 * _3897));
                                float _5106 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3912 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3916 = ((_3912 * _3912) * (_3894 + (-1.0))) + 1.0;
                                float _3917 = _3854 * _3893;
                                float _3918 = _3917 * _3917;
                                float _3924 = ((1.0 - _3918) * dot(vec3(_982, _985, _988), vec3(_3841, _3842, _3843))) + _3918;
                                float _5117 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3925 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3926 = 1.0 - _3893;
                                float _3936 = (0.5 / (((_3925 * ((_3908 * _3926) + _3893)) + 9.9999999392252902907785028219223e-09) + (((_3925 * _3926) + _3893) * _3908))) * _3925;
                                float _5128 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3946 = (_3871 * _3848) * (((_3894 * 3.1415927410125732421875) * (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0)))) / ((_3916 * _3916) * ((_3861 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3872 * _3718.z;
                                frontier_phi_88_pred_1 = _3872 * _3718.y;
                                frontier_phi_88_pred_2 = _3872 * _3718.x;
                                frontier_phi_88_pred_3 = _3946 * _3730.z;
                                frontier_phi_88_pred_4 = _3946 * _3730.y;
                                frontier_phi_88_pred_5 = _3946 * _3730.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3955 = frontier_phi_88_pred;
                            _3954 = frontier_phi_88_pred_1;
                            _3953 = frontier_phi_88_pred_2;
                            _3952 = frontier_phi_88_pred_3;
                            _3951 = frontier_phi_88_pred_4;
                            _3950 = frontier_phi_88_pred_5;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            _3662 = _3955 + _3675;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3659 = _3952 + _3672;
                            if (_3677 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3659;
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3677;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3662;
                        frontier_phi_82_pred_1 = _3661;
                        frontier_phi_82_pred_2 = _3660;
                        frontier_phi_82_pred_3 = _3659;
                        frontier_phi_82_pred_4 = _3658;
                        frontier_phi_82_pred_5 = _3657;
                    }
                    _3300 = frontier_phi_82_pred;
                    _3298 = frontier_phi_82_pred_1;
                    _3296 = frontier_phi_82_pred_2;
                    _3294 = frontier_phi_82_pred_3;
                    _3292 = frontier_phi_82_pred_4;
                    _3290 = frontier_phi_82_pred_5;
                    uint _3456 = _3455 + 1u;
                    if (_3456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3449 = _3290;
                        _3450 = _3292;
                        _3451 = _3294;
                        _3452 = _3296;
                        _3453 = _3298;
                        _3454 = _3300;
                        _3455 = _3456;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3296;
                frontier_phi_63_64_ladder_1 = _3300;
                frontier_phi_63_64_ladder_2 = _3298;
                frontier_phi_63_64_ladder_3 = _3294;
                frontier_phi_63_64_ladder_4 = _3292;
                frontier_phi_63_64_ladder_5 = _3290;
            }
            else
            {
                frontier_phi_63_64_ladder = _3174;
                frontier_phi_63_64_ladder_1 = _3178;
                frontier_phi_63_64_ladder_2 = _3176;
                frontier_phi_63_64_ladder_3 = _3172;
                frontier_phi_63_64_ladder_4 = _3170;
                frontier_phi_63_64_ladder_5 = _3168;
            }
            _3289 = frontier_phi_63_64_ladder_5;
            _3291 = frontier_phi_63_64_ladder_4;
            _3293 = frontier_phi_63_64_ladder_3;
            _3295 = frontier_phi_63_64_ladder;
            _3297 = frontier_phi_63_64_ladder_2;
            _3299 = frontier_phi_63_64_ladder_1;
        }
        float _3304 = isnan(1.0) ? _1041 : (isnan(_1041) ? 1.0 : min(_1041, 1.0));
        _3101 = (_3304 * _3295) + _2613;
        _3103 = (_3304 * _3297) + _2615;
        _3105 = (_3304 * _3299) + _2617;
        _3107 = ((_3289 * _1025) * _3304) + _2951;
        _3109 = ((_3291 * _1027) * _3304) + _2953;
        _3111 = ((_3293 * _1028) * _3304) + _2955;
    }
    else
    {
        _3101 = _2613;
        _3103 = _2615;
        _3105 = _2617;
        _3107 = _2951;
        _3109 = _2953;
        _3111 = _2955;
    }
    float _5144 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5155 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _5166 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _3128 = ((isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0))) * (_3101 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1041))) + ((_3107 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    float _3129 = ((isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0))) * (_3103 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1041))) + ((_3109 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    float _3130 = ((isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0))) * (_3105 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1041))) + ((_3111 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1879)) * cbPerFrame._m0[3u].x);
    uint _3131 = _265 + 6u;
    float _3139 = _963 / cbSceneParam._m0[86u].x;
    float _3140 = _964 / cbSceneParam._m0[86u].y;
    vec4 _3154 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3156 = _3154.x;
    float _3157 = _3154.y;
    float _3158 = _3154.z;
    float _3159 = _3154.w;
    float _3231;
    float _3233;
    float _3235;
    float _3237;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _3193 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _3194 = _3193 / _886;
        float _3205 = _3194 * _936;
        float _3206 = _937 * _3194;
        float _3207 = (-0.0) - _3206;
        float _3209 = _3194 * _938;
        float _3211 = (cbSceneParam._m0[77u].w * _3207) / _3193;
        float _3212 = _3211 + cbSceneParam._m0[79u].w;
        float _3213 = cbSceneParam._m0[79u].w - _3206;
        float _3219 = sqrt(((_3205 * _3205) + (_3206 * _3206)) + (_3209 * _3209));
        float _3222 = (1.0 - (cbSceneParam._m0[77u].w / _3193)) * _3219;
        float _3227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3406;
        if (abs((_3207 - _3211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3406 = ((((_3212 > 0.0) ? exp2(_3227 * _3212) : (2.0 - exp2(_3229 * _3212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3222;
        }
        else
        {
            float _3350 = 1.0 / cbSceneParam._m0[80u].x;
            float _3351 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : max(_3212, _3213));
            float _3352 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : min(_3212, _3213));
            float _3361 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : min(_3351, 0.0));
            float _3362 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : min(_3352, 0.0));
            _3406 = ((abs(_3219 / _3207) * cbSceneParam._m0[80u].y) * ((((_3361 - _3362) * 2.0) - ((exp2(_3227 * (isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0)))) - exp2(_3227 * (isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))))) * _3350)) - ((exp2(_3229 * _3361) - exp2(_3229 * _3362)) * _3350))) + (_3222 * cbSceneParam._m0[80u].z);
        }
        vec4 _3408 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, 1.0), 0.0);
        float _3417 = exp2((_3406 * (-1.44269502162933349609375)) * (1.0 - _3408.w));
        float _3418 = log2(_3417);
        float _3434 = log2(_3159);
        _3231 = (exp2(_3434 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3418 * cbSceneParam._m0[78u].x)) * _3408.x) / cbSceneParam._m0[78u].x)) + _3156;
        _3233 = (exp2(_3434 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3418 * cbSceneParam._m0[78u].y)) * _3408.y) / cbSceneParam._m0[78u].y)) + _3157;
        _3235 = (exp2(_3434 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3418 * cbSceneParam._m0[78u].z)) * _3408.z) / cbSceneParam._m0[78u].z)) + _3158;
        _3237 = _3417 * _3159;
    }
    else
    {
        _3231 = _3156;
        _3233 = _3157;
        _3235 = _3158;
        _3237 = _3159;
    }
    bool _3444;
    vec4 _3247;
    vec4 _3269;
    float _3271;
    float _3275;
    float _3276;
    float _3277;
    float _3278;
    bool _3288;
    for (;;)
    {
        _3247 = cbMatDynParam._m0[0u];
        float _3249 = roundEven(_3247.y);
        bool _3250 = _3249 == 3.0;
        float _3251 = log2(_3237);
        float _3258 = exp2(_3251 * cbSceneParam._m0[78u].x) * _3128;
        float _3259 = exp2(_3251 * cbSceneParam._m0[78u].y) * _3129;
        float _3260 = exp2(_3251 * cbSceneParam._m0[78u].z) * _3130;
        float _3267 = _952 + (-0.5);
        _3269 = cbMtdParam._m0[1u];
        _3271 = _3269.y * _3267;
        float _3274 = (_3249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3275 = _3274 * (_3250 ? _3258 : (_3258 + (cbSceneParam._m0[72u].w * _3231)));
        _3276 = _3274 * (_3250 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3233)));
        _3277 = _3274 * (_3250 ? _3260 : (_3260 + (cbSceneParam._m0[72u].w * _3235)));
        _3278 = _3267 * 0.999000012874603271484375;
        _3288 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3288)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3278) < 0.5)
            {
                _3444 = true;
                break;
            }
        }
        uint _3385 = _1001 + uint(_3247.w);
        if ((cbInstanceData._m0[_3385].w < 1.0) && ((cbInstanceData._m0[_3385].w + _3278) < 0.5))
        {
            _3444 = true;
            break;
        }
        if ((_3271 + 1.0) < _3269.x)
        {
            _3444 = true;
            break;
        }
        _3444 = false;
        break;
    }
    float _3648;
    if (_3444)
    {
        discard_state = true;
        _3648 = 0.0;
    }
    else
    {
        _3648 = cbInstanceData._m0[_3131].w;
    }
    SV_Target.x = _3275;
    SV_Target.y = _3276;
    SV_Target.z = _3277;
    SV_Target.w = _3648;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3131].w;
    discard_exit();
}


