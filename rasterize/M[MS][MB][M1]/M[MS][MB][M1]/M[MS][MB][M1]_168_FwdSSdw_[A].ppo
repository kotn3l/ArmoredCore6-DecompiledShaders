#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1241;
float _3646;
float _3647;
float _3648;
float _3649;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _351 = _349.x;
    float _363 = dot(vec4(_351, _349.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _380 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_351 - _363) * cbMtdParam._m0[24u].y) + _363) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3658 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _388 = (_381 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _389 = (_381 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _390 = (_381 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _439 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _453 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_429 - _439) * cbMtdParam._m0[24u].y) + _439) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3669 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _461 = (_454 * ((_407.x * cbMtdParam._m0[13u].x) - _388)) + _388;
    float _462 = (_454 * ((_407.y * cbMtdParam._m0[13u].y) - _389)) + _389;
    float _463 = (_454 * ((_407.z * cbMtdParam._m0[13u].z) - _390)) + _390;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _495 = _493.x;
    float _496 = _493.y;
    float _497 = _493.z;
    float _504 = ((_476.x - _495) * _381) + _495;
    float _505 = ((_476.y - _496) * _381) + _496;
    float _506 = ((_476.z - _497) * _381) + _497;
    vec4 _518 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _531 = ((_518.z - _506) * _454) + _506;
    float _534 = ((((_518.x - _504) * _454) + _504) * 2.0) + (-1.0);
    float _536 = ((((_518.y - _505) * _454) + _505) * 2.0) + (-1.0);
    float _537 = dot(vec2(_534, _536), vec2(_534, _536));
    float _3680 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _542 = sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _568 = (((_556.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _534;
    float _569 = (((_556.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _536;
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _597 = _595.x;
    float _615 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _597) * _381) + _597;
    float _633 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _262) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _263) + cbTextureTilingScale._m0[21u].w)).x - _615) * _454) + _615;
    float _637 = ((_581.x - _633) * cbMtdParam._m0[19u].z) + _633;
    float _641 = (cbMtdParam._m0[19u].w * (_556.z - _531)) + _531;
    float _646 = cbMtdParam._m0[22u].x + _556.w;
    float _649 = fma(_542, _229 * NORMAL.x, fma(_569, _236 * TANGENT.x, (_222 * _214) * _568));
    float _652 = fma(_542, _229 * NORMAL.y, fma(_569, _236 * TANGENT.y, (_222 * _215) * _568));
    float _655 = fma(_542, _229 * NORMAL.z, fma(_569, _236 * TANGENT.z, (_222 * _216) * _568));
    float _659 = inversesqrt(dot(vec3(_649, _652, _655), vec3(_649, _652, _655)));
    float _660 = _659 * _649;
    float _661 = _659 * _652;
    float _662 = _659 * _655;
    float _3691 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _663 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3713 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3724 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3735 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3746 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _668 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    vec4 _747 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _749 = _747.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _921 = sqrt(((_733 * _733) + (_734 * _734)) + (_735 * _735));
        float _927 = (cbMatDynParam._m0[5u].x * _921) + cbMatDynParam._m0[5u].y;
        float _3757 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _932 = (cbMatDynParam._m0[5u].z * _921) + cbMatDynParam._m0[5u].w;
        float _3768 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) - _928)) + _928) < ((_749 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _760 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _761 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _779 = fma(_662, cbSceneParam._m0[5u].z, fma(_661, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _660));
    float _782 = fma(_662, cbSceneParam._m0[6u].z, fma(_661, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _660));
    float _785 = fma(_662, cbSceneParam._m0[7u].z, fma(_661, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _660));
    uint _798 = _242 + 9u;
    uint _799 = _798 + uint(cbMatDynParam._m0[0u].w);
    float _805 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_799].x;
    float _806 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_799].y;
    float _807 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_799].z;
    float _3779 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _811 = 1.0 - _668;
    float _812 = _808 * _811;
    float _813 = _809 * _811;
    float _814 = _810 * _811;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _668;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _668;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _668;
    float _822 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    float _825 = _821 + 0.039999999105930328369140625;
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _760, cbSceneParam._m0[86u].y * _761));
    float _838 = ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * TEXCOORD_5.w) * _834.x;
    float _839 = dot(vec3(_660, _661, _662), vec3(_740, _741, _742));
    float _842 = _839 * 2.0;
    float _846 = (_842 * _660) - _740;
    float _847 = (_842 * _661) - _741;
    float _848 = (_842 * _662) - _742;
    float _852 = abs(dot(vec3(_740, _741, _742), vec3(_660, _661, _662)));
    float _3812 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _854 = sqrt(_663);
    float _867 = exp2((_854 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_854 * 3.0));
    float _873 = (1.0 - _867) * ((_854 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _874 = _867 * _854;
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1240;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _965 = fma(_910, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902));
        float _969 = fma(_910, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902));
        float _973 = fma(_910, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902));
        float _998 = _902 + _660;
        float _999 = _906 + _661;
        float _1000 = _910 + _662;
        float _1010 = fma(_1000, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998)) - _965;
        float _1011 = fma(_1000, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998)) - _969;
        float _1012 = fma(_1000, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998)) - _973;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_965 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_969 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[34u].z) + ((((((_973 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1068 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1034.x + (-0.5));
        float _1070 = _1068 * (_1034.y + (-0.5));
        float _1071 = _1068 * (_1034.z + (-0.5));
        float _1078 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1041.x + (-0.5));
        float _1080 = _1078 * (_1041.y + (-0.5));
        float _1081 = _1078 * (_1041.z + (-0.5));
        float _1088 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1048.x + (-0.5));
        float _1090 = _1088 * (_1048.y + (-0.5));
        float _1091 = _1088 * (_1048.z + (-0.5));
        float _1098 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1055.x + (-0.5));
        float _1100 = _1098 * (_1055.y + (-0.5));
        float _1101 = _1098 * (_1055.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1122 = (dot(vec3(_660, _661, _662), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1132 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3860 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1134 + 1.0))) + _1139) * _1102;
        float _1149 = _1070 * 0.5;
        float _1150 = _1080 * 0.5;
        float _1151 = _1090 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_660, _661, _662), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3893 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1176 + 1.0))) + _1181) * _1103;
        float _1191 = _1071 * 0.5;
        float _1192 = _1081 * 0.5;
        float _1193 = _1091 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_660, _661, _662), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3926 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1218 + 1.0))) + _1223) * _1104;
        _1240 = _1071;
        _1242 = _1070;
        _1243 = _1069;
        _1244 = _1081;
        _1245 = _1080;
        _1246 = _1079;
        _1247 = _1091;
        _1248 = _1090;
        _1249 = _1089;
        _1250 = _1104;
        _1251 = _1103;
        _1252 = _1102;
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _1241;
        _1242 = _1241;
        _1243 = _1241;
        _1244 = _1241;
        _1245 = _1241;
        _1246 = _1241;
        _1247 = _1241;
        _1248 = _1241;
        _1249 = _1241;
        _1250 = _1241;
        _1251 = _1241;
        _1252 = _1241;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_910, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _902));
        float _1286 = fma(_910, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _902));
        float _1290 = fma(_910, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _902));
        float _1313 = _902 + _660;
        float _1314 = _906 + _661;
        float _1315 = _910 + _662;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_660, _661, _662), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3989 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_660, _661, _662), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4022 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_660, _661, _662), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4055 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1241;
        _1552 = _1241;
        _1553 = _1241;
        _1554 = _1241;
        _1555 = _1241;
        _1556 = _1241;
        _1557 = _1241;
        _1558 = _1241;
        _1559 = _1241;
        _1560 = _1241;
        _1561 = _1241;
        _1562 = _1241;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1253)) + _1253;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1254)) + _1254;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1255)) + _1255;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _846 * 0.5;
    float _1620 = _847 * 0.5;
    float _1621 = _848 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1240, _1244, _1247, _1250));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _663);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_910, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_910, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_910, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_848, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846));
        float _1751 = fma(_848, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846));
        float _1754 = fma(_848, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1782 = frontier_phi_17_15_ladder;
        }
        float _2006;
        if (_1751 > 0.0)
        {
            _2006 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2006 = frontier_phi_26_22_ladder;
        }
        float _2263;
        if (_1754 > 0.0)
        {
            _2263 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2263 = frontier_phi_38_33_ladder;
        }
        float _2265 = isnan(_2006) ? _1782 : (isnan(_1782) ? _2006 : min(_1782, _2006));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1748) + _1737;
        float _2271 = (_2266 * _1751) + _1741;
        float _2272 = (_2266 * _1754) + _1745;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2273;
        float _2277 = _2273 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 > _2277) || ((_2271 < _2275) || ((_2270 < _2275) || (_2270 > _2277))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2272, cbModelParam._m0[9u].z, fma(_2271, cbModelParam._m0[9u].y, _2270 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2272, cbModelParam._m0[10u].z, fma(_2271, cbModelParam._m0[10u].y, _2270 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2272, cbModelParam._m0[11u].z, fma(_2271, cbModelParam._m0[11u].y, _2270 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_16_38_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_16_38_ladder_2;
        _1772 = frontier_phi_16_38_ladder_1;
        _1774 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_846, _847, _848), _1688);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _663);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1833 = fma(_910, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902)) + cbModelParam._m0[21u].w;
        float _1837 = fma(_910, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902)) + cbModelParam._m0[22u].w;
        float _1841 = fma(_910, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902)) + cbModelParam._m0[23u].w;
        float _1844 = fma(_848, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846));
        float _1847 = fma(_848, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846));
        float _1850 = fma(_848, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846));
        float _2011;
        if (_1844 > 0.0)
        {
            _2011 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2011 = frontier_phi_28_24_ladder;
        }
        float _2290;
        if (_1847 > 0.0)
        {
            _2290 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2290 = frontier_phi_40_35_ladder;
        }
        float _2503;
        if (_1850 > 0.0)
        {
            _2503 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2503 = frontier_phi_49_46_ladder;
        }
        float _2505 = isnan(_2290) ? _2011 : (isnan(_2011) ? _2290 : min(_2011, _2290));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1844) + _1833;
        float _2511 = (_2506 * _1847) + _1837;
        float _2512 = (_2506 * _1850) + _1841;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_25_49_ladder = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1869 = frontier_phi_25_49_ladder_2;
        _1871 = frontier_phi_25_49_ladder_1;
        _1873 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_846, _847, _848), _1779);
        _1869 = _1853.x * cbModelParam._m0[1u].z;
        _1871 = _1853.y * cbModelParam._m0[1u].z;
        _1873 = _1853.z * cbModelParam._m0[1u].z;
    }
    float _1886 = (((_873 * _822) + _874) * _838) * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1888 = (((_873 * _824) + _874) * _838) * ((cbModelParam._m0[1u].w * (_1871 - _1772)) + _1772);
    float _1890 = (((_873 * _825) + _874) * _838) * ((cbModelParam._m0[1u].w * (_1873 - _1774)) + _1774);
    float _1893 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1886 * cbSceneParam._m0[91u].x));
    vec4 _1907 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_760, _761));
    float _1909 = _1907.w;
    float _1921 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1909);
    float _1922 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1909);
    float _1923 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1909);
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1937 = _838 + (-1.0);
    float _1942 = (cbLight._m0[_1930].x * _1937) + 1.0;
    float _1943 = (cbLight._m0[_1930].y * _1937) + 1.0;
    float _1944 = (cbLight._m0[_1930].z * _1937) + 1.0;
    float _1945 = (cbLight._m0[_1930].w * _1937) + 1.0;
    uint _1946 = _1929 + 5u;
    float _1952 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1956 = _1929 + 4u;
    float _1965 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1969 = _1929 | 1u;
    float _1980 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_660, _661, _662));
    float _1983 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_660, _661, _662));
    float _4191 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _4202 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1988 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.3183098733425140380859375;
    float _1990 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _1997 = ((cbLight._m0[_1946].x * _1952) * _1990) + (((cbLight._m0[_1956].x * _1921) * _1965) * _1988);
    float _1998 = ((_1952 * cbLight._m0[_1946].y) * _1990) + (((cbLight._m0[_1956].y * _1922) * _1965) * _1988);
    float _1999 = ((_1952 * cbLight._m0[_1946].z) * _1990) + (((cbLight._m0[_1956].z * _1923) * _1965) * _1988);
    uvec4 _2003 = floatBitsToUint(cbLight._m0[_1929 + 12u]);
    bool _2005 = _2003.x == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_2005)
    {
        _2016 = _1997;
        _2018 = _1998;
        _2020 = _1999;
    }
    else
    {
        uint _2024 = _1929 + 6u;
        float _2040 = (dot(vec3(cbLight._m0[_1929 + 2u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2041 = _2040 * _2040;
        float _4213 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2043 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2016 = (((cbLight._m0[_2024].x * 0.3183098733425140380859375) * _2042) * _2043) + _1997;
        _2018 = (((cbLight._m0[_2024].y * 0.3183098733425140380859375) * _2042) * _2043) + _1998;
        _2020 = (((cbLight._m0[_2024].z * 0.3183098733425140380859375) * _2042) * _2043) + _1999;
    }
    bool _2023 = _2003.y == 0u;
    float _2061;
    float _2063;
    float _2065;
    if (_2023)
    {
        _2061 = _2016;
        _2063 = _2018;
        _2065 = _2020;
    }
    else
    {
        uint _2234 = _1929 + 7u;
        float _2250 = (dot(vec3(cbLight._m0[_1929 + 3u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4229 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2253 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2061 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2016;
        _2063 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2018;
        _2065 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2020;
    }
    uint _2068 = _1929 + 8u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _663) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1929].x + _740;
    float _2084 = cbLight._m0[_1929].y + _741;
    float _2085 = cbLight._m0[_1929].z + _742;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_1929].xyz));
    float _4245 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _2097 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2098 = dot(vec3(_660, _661, _662), vec3(_2090, _2091, _2092));
    float _4267 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2090, _2091, _2092));
    float _4278 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2082 * _2082;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0);
    float _2119 = 0.959999978542327880859375 - _819;
    float _2121 = 0.959999978542327880859375 - _820;
    float _2122 = 0.959999978542327880859375 - _821;
    float _2129 = 1.0 - _2082;
    float _2140 = (0.5 / (((_2097 * ((_2096 * _2129) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2129) + _2082) * _2096))) * _2096;
    float _4289 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2142 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    uint _2156 = _1929 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _663) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_1969].x + _740;
    float _2170 = cbLight._m0[_1969].y + _741;
    float _2171 = cbLight._m0[_1969].z + _742;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_1969].xyz));
    float _4300 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2183 = dot(vec3(_660, _661, _662), vec3(_2176, _2177, _2178));
    float _4311 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2176, _2177, _2178));
    float _4322 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0);
    float _2209 = 1.0 - _2168;
    float _2219 = (0.5 / (((_2097 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2209) + _2168) * _2182))) * _2182;
    float _4333 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2231 = (((((_2202 * _2119) + _822) * cbLight._m0[_2156].x) * _2221) * _1952) + ((((cbLight._m0[_2068].x * _1921) * ((_2118 * _2119) + _822)) * _2142) * _1965);
    float _2232 = (((((_2202 * _2121) + _824) * cbLight._m0[_2156].y) * _2221) * _1952) + ((((cbLight._m0[_2068].y * _1922) * ((_2118 * _2121) + _824)) * _2142) * _1965);
    float _2233 = (((((_2202 * _2122) + _825) * cbLight._m0[_2156].z) * _2221) * _1952) + ((((cbLight._m0[_2068].z * _1923) * ((_2118 * _2122) + _825)) * _2142) * _1965);
    float _2295;
    float _2297;
    float _2299;
    if (_2005)
    {
        _2295 = _2231;
        _2297 = _2232;
        _2299 = _2233;
    }
    else
    {
        uint _2301 = _1929 + 2u;
        uint _2305 = _1929 + 10u;
        float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _663) * 0.949999988079071044921875);
        float _2320 = _2319 * _2319;
        float _2321 = cbLight._m0[_2301].x + _740;
        float _2322 = cbLight._m0[_2301].y + _741;
        float _2323 = cbLight._m0[_2301].z + _742;
        float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
        float _2328 = _2327 * _2321;
        float _2329 = _2327 * _2322;
        float _2330 = _2327 * _2323;
        float _2331 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2301].xyz));
        float _4344 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2335 = dot(vec3(_660, _661, _662), vec3(_2328, _2329, _2330));
        float _4355 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2339 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2328, _2329, _2330));
        float _4366 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _2320 * _2320;
        float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
        float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0);
        float _2361 = 1.0 - _2320;
        float _2371 = (0.5 / (((_2097 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2361) + _2320) * _2334))) * _2334;
        float _4377 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2295 = (((((_2354 * _2119) + _822) * cbLight._m0[_2305].x) * _2373) * _2374) + _2231;
        _2297 = (((((_2354 * _2121) + _824) * cbLight._m0[_2305].y) * _2373) * _2374) + _2232;
        _2299 = (((((_2354 * _2122) + _825) * cbLight._m0[_2305].z) * _2373) * _2374) + _2233;
    }
    float _2409;
    float _2411;
    float _2413;
    if (_2023)
    {
        _2409 = _2295;
        _2411 = _2297;
        _2413 = _2299;
    }
    else
    {
        uint _2420 = _1929 + 3u;
        uint _2424 = _1929 + 11u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _663) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _740;
        float _2441 = cbLight._m0[_2420].y + _741;
        float _2442 = cbLight._m0[_2420].z + _742;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2420].xyz));
        float _4393 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2454 = dot(vec3(_660, _661, _662), vec3(_2447, _2448, _2449));
        float _4404 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4415 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2097 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2480) + _2439) * _2453))) * _2453;
        float _4426 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2409 = (((((_2473 * _2119) + _822) * cbLight._m0[_2424].x) * _2492) * _2493) + _2295;
        _2411 = (((((_2473 * _2121) + _824) * cbLight._m0[_2424].y) * _2492) * _2493) + _2297;
        _2413 = (((((_2473 * _2122) + _825) * cbLight._m0[_2424].z) * _2492) * _2493) + _2299;
    }
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_1927.y == 0u)
    {
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2568;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2568;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2568;
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _761) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _760) / _2584)));
        float _2605 = (log2(_2571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
        }
        else
        {
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            uint _2875 = 0u;
            uint _2884;
            bool _2885;
            for (;;)
            {
                _2884 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                _2885 = _2884 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2885)
                {
                    frontier_phi_66_pred = _2869;
                    frontier_phi_66_pred_1 = _2874;
                    frontier_phi_66_pred_2 = _2873;
                    frontier_phi_66_pred_3 = _2872;
                    frontier_phi_66_pred_4 = _2871;
                    frontier_phi_66_pred_5 = _2870;
                }
                else
                {
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    uint _3020;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2884;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    for (;;)
                    {
                        uint _3024 = uint(findLSB(_3020)) + (_2875 << 5u);
                        uint _3021 = (_3020 + 4294967295u) & _3020;
                        uint _3026 = _3024 * 48u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3046 = (_3024 * 48u) + 4u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3065 = (_3024 * 48u) + 8u;
                        vec3 _3076 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x));
                        float _3080 = _3040.x - _2569;
                        float _3081 = _3040.y - _2570;
                        float _3082 = _3040.z - _2571;
                        float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                        float _3086 = inversesqrt(_3083);
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3090 = dot(vec3(_779, _782, _785), vec3(_3087, _3088, _3089));
                        float _3095 = 1.0 - (_3083 * _3040.w);
                        float _4452 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3097 = sqrt(_3083) * _3059.w;
                        float _3100 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3090) + _3101;
                        float _3107 = _3097 * _3097;
                        float _3111 = ((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3096) / ((_3107 * 0.699999988079071044921875) + 1.0);
                        float _3115 = (-0.0) - _2569;
                        float _3116 = (-0.0) - _2570;
                        float _3117 = (-0.0) - _2571;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3132 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                        float _3133 = 1.0 - _854;
                        float _3140 = sqrt(1.0 - ((1.0 - (_3133 * _3133)) * (1.0 - (_3132 * _3132))));
                        float _3141 = _3140 * _3140;
                        float _3142 = _3141 * _3141;
                        float _3143 = _3122 + _3087;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3153 = dot(vec3(_779, _782, _785), vec3(_3122, _3123, _3124));
                        float _4468 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3157 = dot(vec3(_779, _782, _785), vec3(_3149 * _3143, _3149 * _3144, _3149 * _3145));
                        float _4479 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3160 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3164 = ((_3160 * _3160) * (_3142 + (-1.0))) + 1.0;
                        float _3165 = _3100 * _3141;
                        float _3166 = _3165 * _3165;
                        float _3169 = ((1.0 - _3166) * _3090) + _3166;
                        float _4490 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3171 = 1.0 - _3141;
                        float _3181 = (0.5 / (((_3170 * ((_3156 * _3171) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3141) * _3156))) * _3170;
                        float _4501 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3192 = (((_3142 * 3.1415927410125732421875) * (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) / ((_3164 * _3164) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125))) * _3096;
                        _2944 = (_3111 * _3059.x) + _3017;
                        _2945 = (_3111 * _3059.y) + _3018;
                        _2946 = (_3111 * _3059.z) + _3019;
                        _2941 = (_3192 * _3076.x) + _3014;
                        _2942 = (_3192 * _3076.y) + _3015;
                        _2943 = (_3192 * _3076.z) + _3016;
                        if (_3021 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _3021;
                        }
                    }
                    frontier_phi_66_pred = _2941;
                    frontier_phi_66_pred_1 = _2946;
                    frontier_phi_66_pred_2 = _2945;
                    frontier_phi_66_pred_3 = _2944;
                    frontier_phi_66_pred_4 = _2943;
                    frontier_phi_66_pred_5 = _2942;
                }
                _2717 = frontier_phi_66_pred;
                _2727 = frontier_phi_66_pred_1;
                _2725 = frontier_phi_66_pred_2;
                _2723 = frontier_phi_66_pred_3;
                _2721 = frontier_phi_66_pred_4;
                _2719 = frontier_phi_66_pred_5;
                uint _2876 = _2875 + 1u;
                if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2869 = _2717;
                    _2870 = _2719;
                    _2871 = _2721;
                    _2872 = _2723;
                    _2873 = _2725;
                    _2874 = _2727;
                    _2875 = _2876;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
        }
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.z;
        uint _2733 = (_2731 >> 8u) & 15u;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        if (((4294967295u << _2733) & _2615) == 0u)
        {
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
        }
        else
        {
            float _2862 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
            float _2863 = _2862 * _2569;
            float _2864 = _2862 * _2570;
            float _2865 = _2862 * _2571;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2733 < ((_2731 >> 12u) & 15u))
            {
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2997 = _2716;
                float _2998 = _2718;
                float _2999 = _2720;
                float _3000 = _2722;
                float _3001 = _2724;
                float _3002 = _2726;
                uint _3003 = _2733;
                uint _3012;
                bool _3013;
                for (;;)
                {
                    _3012 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                    _3013 = _3012 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3013)
                    {
                        frontier_phi_77_pred = _3002;
                        frontier_phi_77_pred_1 = _3001;
                        frontier_phi_77_pred_2 = _3000;
                        frontier_phi_77_pred_3 = _2999;
                        frontier_phi_77_pred_4 = _2998;
                        frontier_phi_77_pred_5 = _2997;
                    }
                    else
                    {
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        float _3223 = _3001;
                        float _3224 = _3002;
                        uint _3225 = _3012;
                        uint _3226;
                        vec4 _3251;
                        float _3252;
                        vec4 _3267;
                        vec3 _3279;
                        vec4 _3294;
                        vec4 _3309;
                        float _3355;
                        bool _3356;
                        for (;;)
                        {
                            uint _3236 = ((_3003 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3225));
                            _3226 = (_3225 + 4294967295u) & _3225;
                            uint _3238 = _3236 * 40u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3252 = _3251.w;
                            uint _3254 = (_3236 * 40u) + 4u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3236 * 40u) + 8u;
                            _3279 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x));
                            uint _3281 = (_3236 * 40u) + 16u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3236 * 40u) + 20u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3236 * 40u) + 24u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3330 = (_3236 * 40u) + 28u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3355 = fma(_2571, _3343.z, fma(_2570, _3343.y, _3343.x * _2569)) + _3343.w;
                            _3356 = !((fma(_2571, _3324.z, fma(_2570, _3324.y, _3324.x * _2569)) + _3324.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3356)
                            {
                                float _3383 = _3251.x - _2569;
                                float _3384 = _3251.y - _2570;
                                float _3385 = _3251.z - _2571;
                                float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                                float _3389 = inversesqrt(_3386);
                                float _3390 = _3389 * _3383;
                                float _3391 = _3389 * _3384;
                                float _3392 = _3389 * _3385;
                                float _3396 = 1.0 - (_3386 / (_3252 * _3252));
                                float _4512 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3401 = sqrt(_3386) * _3267.w;
                                float _3403 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                                float _3404 = _3403 * _3403;
                                float _3407 = ((1.0 - _3404) * dot(vec3(_3390, _3391, _3392), vec3(_779, _782, _785))) + _3404;
                                float _3410 = _3401 * _3401;
                                float _3414 = (fma(_2571, _3294.z, fma(_2570, _3294.y, _3294.x * _2569)) + _3294.w) / _3355;
                                float _3415 = (fma(_2571, _3309.z, fma(_2570, _3309.y, _3309.x * _2569)) + _3309.w) / _3355;
                                float _3419 = 1.0 - dot(vec2(_3414, _3415), vec2(_3414, _3415));
                                float _4528 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3421 = _3420 * (((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3397) / ((_3410 * 0.699999988079071044921875) + 1.0));
                                float _3433 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                                float _3434 = 1.0 - _854;
                                float _3441 = sqrt(1.0 - ((1.0 - (_3434 * _3434)) * (1.0 - (_3433 * _3433))));
                                float _3442 = _3441 * _3441;
                                float _3443 = _3442 * _3442;
                                float _3444 = _3390 - _2863;
                                float _3445 = _3391 - _2864;
                                float _3446 = _3392 - _2865;
                                float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                                float _3454 = dot(vec3(_779, _782, _785), vec3((-0.0) - _2863, (-0.0) - _2864, (-0.0) - _2865));
                                float _4539 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3458 = dot(vec3(_779, _782, _785), vec3(_3450 * _3444, _3450 * _3445, _3450 * _3446));
                                float _4550 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3465 = ((_3461 * _3461) * (_3443 + (-1.0))) + 1.0;
                                float _3466 = _3403 * _3442;
                                float _3467 = _3466 * _3466;
                                float _3473 = ((1.0 - _3467) * dot(vec3(_779, _782, _785), vec3(_3390, _3391, _3392))) + _3467;
                                float _4561 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3475 = 1.0 - _3442;
                                float _3485 = (0.5 / (((_3474 * ((_3457 * _3475) + _3442)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3442) * _3457))) * _3474;
                                float _4572 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3495 = (_3420 * _3397) * (((_3443 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3465 * _3465) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3421 * _3267.y;
                                frontier_phi_83_pred_1 = _3421 * _3267.x;
                                frontier_phi_83_pred_2 = _3495 * _3279.z;
                                frontier_phi_83_pred_3 = _3495 * _3279.y;
                                frontier_phi_83_pred_4 = _3495 * _3279.x;
                                frontier_phi_83_pred_5 = _3421 * _3267.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3503 = frontier_phi_83_pred;
                            _3502 = frontier_phi_83_pred_1;
                            _3501 = frontier_phi_83_pred_2;
                            _3500 = frontier_phi_83_pred_3;
                            _3499 = frontier_phi_83_pred_4;
                            _3504 = frontier_phi_83_pred_5;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            _3206 = _3499 + _3219;
                            _3207 = _3500 + _3220;
                            _3208 = _3501 + _3221;
                            if (_3226 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3226;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3211;
                        frontier_phi_77_pred_1 = _3210;
                        frontier_phi_77_pred_2 = _3209;
                        frontier_phi_77_pred_3 = _3208;
                        frontier_phi_77_pred_4 = _3207;
                        frontier_phi_77_pred_5 = _3206;
                    }
                    _2848 = frontier_phi_77_pred;
                    _2846 = frontier_phi_77_pred_1;
                    _2844 = frontier_phi_77_pred_2;
                    _2842 = frontier_phi_77_pred_3;
                    _2840 = frontier_phi_77_pred_4;
                    _2838 = frontier_phi_77_pred_5;
                    uint _3004 = _3003 + 1u;
                    if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2997 = _2838;
                        _2998 = _2840;
                        _2999 = _2842;
                        _3000 = _2844;
                        _3001 = _2846;
                        _3002 = _2848;
                        _3003 = _3004;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2842;
                frontier_phi_58_59_ladder_1 = _2848;
                frontier_phi_58_59_ladder_2 = _2846;
                frontier_phi_58_59_ladder_3 = _2844;
                frontier_phi_58_59_ladder_4 = _2840;
                frontier_phi_58_59_ladder_5 = _2838;
            }
            else
            {
                frontier_phi_58_59_ladder = _2720;
                frontier_phi_58_59_ladder_1 = _2726;
                frontier_phi_58_59_ladder_2 = _2724;
                frontier_phi_58_59_ladder_3 = _2722;
                frontier_phi_58_59_ladder_4 = _2718;
                frontier_phi_58_59_ladder_5 = _2716;
            }
            _2837 = frontier_phi_58_59_ladder_5;
            _2839 = frontier_phi_58_59_ladder_4;
            _2841 = frontier_phi_58_59_ladder;
            _2843 = frontier_phi_58_59_ladder_3;
            _2845 = frontier_phi_58_59_ladder_2;
            _2847 = frontier_phi_58_59_ladder_1;
        }
        float _2852 = isnan(1.0) ? _838 : (isnan(_838) ? 1.0 : min(_838, 1.0));
        _2628 = (_2852 * _2843) + _2061;
        _2630 = (_2852 * _2845) + _2063;
        _2632 = (_2852 * _2847) + _2065;
        _2634 = ((_2837 * _822) * _2852) + _2409;
        _2636 = ((_2839 * _824) * _2852) + _2411;
        _2638 = ((_2841 * _825) * _2852) + _2413;
    }
    else
    {
        _2628 = _2061;
        _2630 = _2063;
        _2632 = _2065;
        _2634 = _2409;
        _2636 = _2411;
        _2638 = _2413;
    }
    float _4588 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4599 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4610 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2655 = ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2628 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _838))) + ((_2634 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2656 = ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2630 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _838))) + ((_2636 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2657 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2632 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _838))) + ((_2638 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    uint _2658 = _242 + 6u;
    float _2666 = _760 / cbSceneParam._m0[86u].x;
    float _2667 = _761 / cbSceneParam._m0[86u].y;
    vec4 _2681 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2683 = _2681.x;
    float _2684 = _2681.y;
    float _2685 = _2681.z;
    float _2686 = _2681.w;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2741 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2742 = _2741 / _682;
        float _2753 = _2742 * _733;
        float _2754 = _734 * _2742;
        float _2755 = (-0.0) - _2754;
        float _2757 = _2742 * _735;
        float _2759 = (cbSceneParam._m0[77u].w * _2755) / _2741;
        float _2760 = _2759 + cbSceneParam._m0[79u].w;
        float _2761 = cbSceneParam._m0[79u].w - _2754;
        float _2767 = sqrt(((_2753 * _2753) + (_2754 * _2754)) + (_2757 * _2757));
        float _2770 = (1.0 - (cbSceneParam._m0[77u].w / _2741)) * _2767;
        float _2775 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2777 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2954;
        if (abs((_2755 - _2759) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2954 = ((((_2760 > 0.0) ? exp2(_2775 * _2760) : (2.0 - exp2(_2777 * _2760))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2770;
        }
        else
        {
            float _2898 = 1.0 / cbSceneParam._m0[80u].x;
            float _2899 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : max(_2760, _2761));
            float _2900 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : min(_2760, _2761));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            _2954 = ((abs(_2767 / _2755) * cbSceneParam._m0[80u].y) * ((((_2909 - _2910) * 2.0) - ((exp2(_2775 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0)))) - exp2(_2775 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))))) * _2898)) - ((exp2(_2777 * _2909) - exp2(_2777 * _2910)) * _2898))) + (_2770 * cbSceneParam._m0[80u].z);
        }
        vec4 _2956 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, 1.0), 0.0);
        float _2965 = exp2((_2954 * (-1.44269502162933349609375)) * (1.0 - _2956.w));
        float _2966 = log2(_2965);
        float _2982 = log2(_2686);
        _2779 = (exp2(_2982 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].x)) * _2956.x) / cbSceneParam._m0[78u].x)) + _2683;
        _2781 = (exp2(_2982 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].y)) * _2956.y) / cbSceneParam._m0[78u].y)) + _2684;
        _2783 = (exp2(_2982 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].z)) * _2956.z) / cbSceneParam._m0[78u].z)) + _2685;
        _2785 = _2965 * _2686;
    }
    else
    {
        _2779 = _2683;
        _2781 = _2684;
        _2783 = _2685;
        _2785 = _2686;
    }
    bool _2992;
    vec4 _2795;
    vec4 _2817;
    float _2819;
    float _2823;
    float _2824;
    float _2825;
    float _2826;
    bool _2836;
    for (;;)
    {
        _2795 = cbMatDynParam._m0[0u];
        float _2797 = roundEven(_2795.y);
        bool _2798 = _2797 == 3.0;
        float _2799 = log2(_2785);
        float _2806 = exp2(_2799 * cbSceneParam._m0[78u].x) * _2655;
        float _2807 = exp2(_2799 * cbSceneParam._m0[78u].y) * _2656;
        float _2808 = exp2(_2799 * cbSceneParam._m0[78u].z) * _2657;
        float _2815 = _749 + (-0.5);
        _2817 = cbMtdParam._m0[1u];
        _2819 = _2817.y * _2815;
        float _2822 = (_2797 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2823 = _2822 * (_2798 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2779)));
        _2824 = _2822 * (_2798 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2781)));
        _2825 = _2822 * (_2798 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2783)));
        _2826 = _2815 * 0.999000012874603271484375;
        _2836 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2836)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2826) < 0.5)
            {
                _2992 = true;
                break;
            }
        }
        uint _2933 = _798 + uint(_2795.w);
        if ((cbInstanceData._m0[_2933].w < 1.0) && ((cbInstanceData._m0[_2933].w + _2826) < 0.5))
        {
            _2992 = true;
            break;
        }
        if ((_2819 + 1.0) < _2817.x)
        {
            _2992 = true;
            break;
        }
        _2992 = false;
        break;
    }
    float _3197;
    if (_2992)
    {
        discard_state = true;
        _3197 = 0.0;
    }
    else
    {
        _3197 = cbInstanceData._m0[_2658].w;
    }
    SV_Target.x = _2823;
    SV_Target.y = _2824;
    SV_Target.z = _2825;
    SV_Target.w = _3197;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2658].w;
    discard_exit();
}


