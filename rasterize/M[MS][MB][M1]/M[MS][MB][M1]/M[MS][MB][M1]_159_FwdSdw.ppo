#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1346;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3954 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _392) + _461;
    float _473 = ((((_440.x - _459) * _392) + _459) * 2.0) + (-1.0);
    float _475 = ((((_440.y - _460) * _392) + _460) * 2.0) + (-1.0);
    float _476 = dot(vec2(_473, _475), vec2(_473, _475));
    float _3965 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _481 = sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))));
    float _484 = fma(_481, _243, fma(_475, _250, _473 * _236));
    float _487 = fma(_481, _244, fma(_475, _251, _473 * _237));
    float _490 = fma(_481, _245, fma(_475, _252, _473 * _238));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _543 = ((_538 - _539) * cbMtdParam._m0[24u].z) + _539;
    float _545 = (cbMtdParam._m0[19u].x + dot(vec4(_494 * _484, _494 * _487, _494 * _490, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_543 * cbMtdParam._m0[21u].z);
    float _3976 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _548 = (-0.0) - cbMtdParam._m0[24u].x;
    float _550 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
    float _558 = _546 - ((_546 * TEXCOORD_8.x) * _551);
    float _559 = _546 - ((_546 * TEXCOORD_8.y) * _551);
    float _560 = _546 - ((_546 * TEXCOORD_8.z) * _551);
    float _567 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _571 = ((isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : min(_567, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _579 = (_571 - (((_543 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _571))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4007 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _584 = ((_558 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) * _580) + _399;
    float _585 = ((_559 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) * _580) + _400;
    float _586 = ((_560 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) * _580) + _401;
    vec4 _598 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _628 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_600 - _601) * cbMtdParam._m0[24u].w) + _601) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4018 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _637 = ((((cbMtdParam._m0[10u].x - _584) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _629) + _584;
    float _638 = ((((cbMtdParam._m0[10u].y - _585) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _629) + _585;
    float _639 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _586)) * _629) + _586;
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _667) * _392) + _667;
    float _689 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _685) * cbMtdParam._m0[19u].z) + _685;
    float _692 = _689 - ((_580 * _558) * _689);
    float _694 = _692 - (_692 * _629);
    vec4 _708 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _715 = (_708.x * 2.0) + (-1.0);
    float _716 = (_708.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _4029 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _726 = (((_708.z - _470) * _558) * _580) + _470;
    float _729 = ((cbMtdParam._m0[23u].y - _726) * _629) + _726;
    vec4 _748 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _754 = (_748.x * 2.0) + (-1.0);
    float _755 = (_748.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _4040 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _776 = (((cbMtdParam._m0[21u].x * _473) + ((_715 - _473) * _558)) * _580) + _473;
    float _777 = (((cbMtdParam._m0[21u].x * _475) + ((_716 - _475) * _559)) * _580) + _475;
    float _778 = (((sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) - _481) * _560) * _580) + _481;
    float _789 = (((_754 - _776) + (_776 * cbMtdParam._m0[22u].z)) * _629) + _776;
    float _790 = (((_755 - _777) + (_777 * cbMtdParam._m0[22u].z)) * _629) + _777;
    float _791 = ((sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) - _778) * _629) + _778;
    float _793 = cbMtdParam._m0[22u].x + _510.w;
    float _796 = fma(_791, _243, fma(_790, _250, _789 * _236));
    float _799 = fma(_791, _244, fma(_790, _251, _789 * _237));
    float _802 = fma(_791, _245, fma(_790, _252, _789 * _238));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _4051 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _810 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4073 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4084 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4095 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4106 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _815 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _829 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _879 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _869);
    float _880 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _869);
    float _881 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _869);
    float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
    float _886 = _879 * _885;
    float _887 = _880 * _885;
    float _888 = _881 * _885;
    float _894 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _895 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _913 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _916 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _919 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    uint _933 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_933].z;
    float _4117 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _945 = 1.0 - _815;
    float _946 = _942 * _945;
    float _947 = _943 * _945;
    float _948 = _944 * _945;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _815;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _815;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _815;
    float _956 = _953 + 0.039999999105930328369140625;
    float _958 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _894, cbSceneParam._m0[86u].y * _895));
    float _972 = ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * TEXCOORD_5.w) * _968.x;
    float _973 = dot(vec3(_807, _808, _809), vec3(_886, _887, _888));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _807) - _886;
    float _981 = (_976 * _808) - _887;
    float _982 = (_976 * _809) - _888;
    float _986 = abs(dot(vec3(_886, _887, _888), vec3(_807, _808, _809)));
    float _4150 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_810);
    float _1001 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1007 = (1.0 - _1001) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1008 = _1001 * _988;
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1345;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1070 = fma(_1044, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036));
        float _1074 = fma(_1044, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036));
        float _1078 = fma(_1044, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036));
        float _1103 = _1036 + _807;
        float _1104 = _1040 + _808;
        float _1105 = _1044 + _809;
        float _1115 = fma(_1105, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103)) - _1070;
        float _1116 = fma(_1105, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103)) - _1074;
        float _1117 = fma(_1105, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103)) - _1078;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1070 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1074 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[34u].z) + ((((((_1078 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1173 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1139.x + (-0.5));
        float _1175 = _1173 * (_1139.y + (-0.5));
        float _1176 = _1173 * (_1139.z + (-0.5));
        float _1183 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1146.x + (-0.5));
        float _1185 = _1183 * (_1146.y + (-0.5));
        float _1186 = _1183 * (_1146.z + (-0.5));
        float _1193 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1153.x + (-0.5));
        float _1195 = _1193 * (_1153.y + (-0.5));
        float _1196 = _1193 * (_1153.z + (-0.5));
        float _1203 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1160.x + (-0.5));
        float _1205 = _1203 * (_1160.y + (-0.5));
        float _1206 = _1203 * (_1160.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1227 = (dot(vec3(_807, _808, _809), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1237 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4198 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1239 + 1.0))) + _1244) * _1207;
        float _1254 = _1175 * 0.5;
        float _1255 = _1185 * 0.5;
        float _1256 = _1195 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_807, _808, _809), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4231 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1281 + 1.0))) + _1286) * _1208;
        float _1296 = _1176 * 0.5;
        float _1297 = _1186 * 0.5;
        float _1298 = _1196 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_807, _808, _809), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4264 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1323 + 1.0))) + _1328) * _1209;
        _1345 = _1176;
        _1347 = _1175;
        _1348 = _1174;
        _1349 = _1186;
        _1350 = _1185;
        _1351 = _1184;
        _1352 = _1196;
        _1353 = _1195;
        _1354 = _1194;
        _1355 = _1209;
        _1356 = _1208;
        _1357 = _1207;
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1346;
        _1347 = _1346;
        _1348 = _1346;
        _1349 = _1346;
        _1350 = _1346;
        _1351 = _1346;
        _1352 = _1346;
        _1353 = _1346;
        _1354 = _1346;
        _1355 = _1346;
        _1356 = _1346;
        _1357 = _1346;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1044, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036));
        float _1389 = fma(_1044, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036));
        float _1393 = fma(_1044, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036));
        float _1416 = _1036 + _807;
        float _1417 = _1040 + _808;
        float _1418 = _1044 + _809;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_807, _808, _809), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4327 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_807, _808, _809), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4360 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_807, _808, _809), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4393 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1346;
        _1655 = _1346;
        _1656 = _1346;
        _1657 = _1346;
        _1658 = _1346;
        _1659 = _1346;
        _1660 = _1346;
        _1661 = _1346;
        _1662 = _1346;
        _1663 = _1346;
        _1664 = _1346;
        _1665 = _1346;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1358)) + _1358;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1359)) + _1359;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1360)) + _1360;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _980 * 0.5;
    float _1723 = _981 * 0.5;
    float _1724 = _982 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1345, _1349, _1352, _1355));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _810);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1838 = fma(_1044, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036)) + cbModelParam._m0[13u].w;
        float _1842 = fma(_1044, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036)) + cbModelParam._m0[14u].w;
        float _1846 = fma(_1044, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036)) + cbModelParam._m0[15u].w;
        float _1849 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1852 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1855 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1883;
        if (_1849 > 0.0)
        {
            _1883 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1883 = frontier_phi_14_12_ladder;
        }
        float _2054;
        if (_1852 > 0.0)
        {
            _2054 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2054 = frontier_phi_23_19_ladder;
        }
        float _2349;
        if (_1855 > 0.0)
        {
            _2349 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2349 = frontier_phi_35_30_ladder;
        }
        float _2351 = isnan(_2054) ? _1883 : (isnan(_1883) ? _2054 : min(_1883, _2054));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1849) + _1838;
        float _2357 = (_2352 * _1852) + _1842;
        float _2358 = (_2352 * _1855) + _1846;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_13_35_ladder = _2503.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2503.x * cbModelParam._m0[1u].y;
        }
        _1871 = frontier_phi_13_35_ladder_2;
        _1873 = frontier_phi_13_35_ladder_1;
        _1875 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1791);
        _1871 = _1859.x * cbModelParam._m0[1u].y;
        _1873 = _1859.y * cbModelParam._m0[1u].y;
        _1875 = _1859.z * cbModelParam._m0[1u].y;
    }
    float _1879 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _810);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1879 : min(cbModelParam._m0[25u].w, _1879));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1933 = fma(_1044, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036)) + cbModelParam._m0[21u].w;
        float _1937 = fma(_1044, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036)) + cbModelParam._m0[22u].w;
        float _1941 = fma(_1044, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036)) + cbModelParam._m0[23u].w;
        float _1944 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1947 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1950 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2059;
        if (_1944 > 0.0)
        {
            _2059 = abs((1.0 - _1933) / _1944);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1933 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2059 = frontier_phi_25_21_ladder;
        }
        float _2376;
        if (_1947 > 0.0)
        {
            _2376 = abs((1.0 - _1937) / _1947);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1937 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2376 = frontier_phi_37_32_ladder;
        }
        float _2714;
        if (_1950 > 0.0)
        {
            _2714 = abs((1.0 - _1941) / _1950);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1941 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2714 = frontier_phi_47_44_ladder;
        }
        float _2716 = isnan(_2376) ? _2059 : (isnan(_2059) ? _2376 : min(_2059, _2376));
        float _2717 = isnan(_2714) ? _2716 : (isnan(_2716) ? _2714 : min(_2716, _2714));
        float _2721 = (_2717 * _1944) + _1933;
        float _2722 = (_2717 * _1947) + _1937;
        float _2723 = (_2717 * _1950) + _1941;
        float _2724 = _2717 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2724;
        float _2727 = _2724 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2723 > _2727) || ((_2723 < _2725) || ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 < _2725) || (_2721 > _2727))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2723, cbModelParam._m0[17u].z, fma(_2722, cbModelParam._m0[17u].y, _2721 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2723, cbModelParam._m0[18u].z, fma(_2722, cbModelParam._m0[18u].y, _2721 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2723, cbModelParam._m0[19u].z, fma(_2722, cbModelParam._m0[19u].y, _2721 * cbModelParam._m0[19u].x))), _1880);
            frontier_phi_22_47_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1969 = frontier_phi_22_47_ladder_2;
        _1971 = frontier_phi_22_47_ladder_1;
        _1973 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1880);
        _1969 = _1953.x * cbModelParam._m0[1u].z;
        _1971 = _1953.y * cbModelParam._m0[1u].z;
        _1973 = _1953.z * cbModelParam._m0[1u].z;
    }
    float _1986 = (((_1007 * _956) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_1969 - _1871)) + _1871);
    float _1988 = (((_1007 * _958) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_1971 - _1873)) + _1873);
    float _1990 = (((_1007 * _959) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1993 = fma(_1990, cbSceneParam._m0[89u].z, fma(_1988, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _1996 = fma(_1990, cbSceneParam._m0[90u].z, fma(_1988, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _1999 = fma(_1990, cbSceneParam._m0[91u].z, fma(_1988, cbSceneParam._m0[91u].y, _1986 * cbSceneParam._m0[91u].x));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2046 = _2033 / _2045;
    float _2047 = _2037 / _2045;
    float _2048 = _2041 / _2045;
    float _2195;
    float _2196;
    float _2197;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2075 = ((uint(_2048 > cbSceneParam._m0[59u].y) + uint(_2048 > cbSceneParam._m0[59u].x)) + uint(_2048 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2076 = _2075 + 43u;
        uint _2084 = _2075 + 44u;
        uint _2092 = _2075 + 45u;
        uint _2100 = _2075 + 46u;
        float _2111 = fma(_2045, cbSceneParam._m0[_2076].w, fma(_2041, cbSceneParam._m0[_2076].z, fma(_2037, cbSceneParam._m0[_2076].y, _2033 * cbSceneParam._m0[_2076].x)));
        float _2115 = fma(_2045, cbSceneParam._m0[_2084].w, fma(_2041, cbSceneParam._m0[_2084].z, fma(_2037, cbSceneParam._m0[_2084].y, _2033 * cbSceneParam._m0[_2084].x)));
        float _2123 = fma(_2045, cbSceneParam._m0[_2100].w, fma(_2041, cbSceneParam._m0[_2100].z, fma(_2037, cbSceneParam._m0[_2100].y, _2033 * cbSceneParam._m0[_2100].x)));
        float _2128 = cbSceneParam._m0[33u].z * _2123;
        float _2130 = cbSceneParam._m0[33u].w * _2123;
        float _2133 = fma(_2045, cbSceneParam._m0[_2092].w, fma(_2041, cbSceneParam._m0[_2092].z, fma(_2037, cbSceneParam._m0[_2092].y, _2033 * cbSceneParam._m0[_2092].x))) / _2123;
        float _2181 = (cbSceneParam._m0[33u].x - sqrt(((_2047 * _2047) + (_2046 * _2046)) + (_2048 * _2048))) * cbSceneParam._m0[33u].y;
        float _4519 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2188 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 + _2111) / _2123, (_2130 + _2115) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 + _2111) / _2123, (_2115 - _2128) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 - _2128) / _2123, (_2115 - _2130) / _2123), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 - _2130) / _2123, (_2128 + _2115) / _2123), _2133), 0.0)).x), vec4(0.25)));
        _2195 = 1.0 - (_2188 * cbSceneParam._m0[34u].x);
        _2196 = 1.0 - (_2188 * cbSceneParam._m0[34u].y);
        _2197 = 1.0 - (_2188 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2195 = 1.0;
        _2196 = 1.0;
        _2197 = 1.0;
    }
    float _2261;
    float _2263;
    float _2265;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2249 = fma(_2045, cbSceneParam._m0[63u].w, fma(_2041, cbSceneParam._m0[63u].z, fma(_2037, cbSceneParam._m0[63u].y, _2033 * cbSceneParam._m0[63u].x)));
        float _2250 = fma(_2045, cbSceneParam._m0[60u].w, fma(_2041, cbSceneParam._m0[60u].z, fma(_2037, cbSceneParam._m0[60u].y, _2033 * cbSceneParam._m0[60u].x))) / _2249;
        float _2251 = fma(_2045, cbSceneParam._m0[61u].w, fma(_2041, cbSceneParam._m0[61u].z, fma(_2037, cbSceneParam._m0[61u].y, _2033 * cbSceneParam._m0[61u].x))) / _2249;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2250 >= cbSceneParam._m0[64u].x) && (_2251 >= cbSceneParam._m0[64u].y)) && (_2250 <= cbSceneParam._m0[64u].z)) && (_2251 <= cbSceneParam._m0[64u].w))
        {
            float _2389 = fma(_2045, cbSceneParam._m0[62u].w, fma(_2041, cbSceneParam._m0[62u].z, fma(_2037, cbSceneParam._m0[62u].y, _2033 * cbSceneParam._m0[62u].x))) / _2249;
            float _2393 = isnan(cbSceneParam._m0[41u].w) ? _2389 : (isnan(_2389) ? cbSceneParam._m0[41u].w : max(_2389, cbSceneParam._m0[41u].w));
            float _2436 = (cbSceneParam._m0[33u].x - sqrt(((_2047 * _2047) + (_2046 * _2046)) + (_2048 * _2048))) * cbSceneParam._m0[33u].y;
            float _4535 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
            float _2443 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2250, cbSceneParam._m0[33u].w + _2251), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2250, _2251 - cbSceneParam._m0[33u].z), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].z, _2251 - cbSceneParam._m0[33u].w), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2250 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2251), _2393), 0.0)).x), vec4(0.25)));
            float _2447 = 1.0 - (_2443 * cbSceneParam._m0[34u].x);
            float _2448 = 1.0 - (_2443 * cbSceneParam._m0[34u].y);
            float _2449 = 1.0 - (_2443 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2449) ? _2197 : (isnan(_2197) ? _2449 : min(_2197, _2449));
            frontier_phi_34_33_ladder_1 = isnan(_2448) ? _2196 : (isnan(_2196) ? _2448 : min(_2196, _2448));
            frontier_phi_34_33_ladder_2 = isnan(_2447) ? _2195 : (isnan(_2195) ? _2447 : min(_2195, _2447));
        }
        else
        {
            frontier_phi_34_33_ladder = _2197;
            frontier_phi_34_33_ladder_1 = _2196;
            frontier_phi_34_33_ladder_2 = _2195;
        }
        _2261 = frontier_phi_34_33_ladder_2;
        _2263 = frontier_phi_34_33_ladder_1;
        _2265 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2261 = _2195;
        _2263 = _2196;
        _2265 = _2197;
    }
    uvec4 _2270 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2272 = _2270.x * 14u;
    uint _2273 = _2272 + 13u;
    float _2280 = _972 + (-1.0);
    float _2285 = (cbLight._m0[_2273].x * _2280) + 1.0;
    float _2286 = (cbLight._m0[_2273].y * _2280) + 1.0;
    float _2287 = (cbLight._m0[_2273].z * _2280) + 1.0;
    float _2288 = (cbLight._m0[_2273].w * _2280) + 1.0;
    uint _2289 = _2272 + 5u;
    float _2295 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2299 = _2272 + 4u;
    float _2308 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2312 = _2272 | 1u;
    float _2323 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_807, _808, _809));
    float _2326 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_807, _808, _809));
    float _4571 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _4582 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2331 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * 0.3183098733425140380859375;
    float _2333 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * 0.3183098733425140380859375;
    float _2340 = ((cbLight._m0[_2289].x * _2295) * _2333) + (((cbLight._m0[_2299].x * _2261) * _2308) * _2331);
    float _2341 = ((_2295 * cbLight._m0[_2289].y) * _2333) + (((cbLight._m0[_2299].y * _2263) * _2308) * _2331);
    float _2342 = ((_2295 * cbLight._m0[_2289].z) * _2333) + (((cbLight._m0[_2299].z * _2265) * _2308) * _2331);
    uvec4 _2346 = floatBitsToUint(cbLight._m0[_2272 + 12u]);
    bool _2348 = _2346.x == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2348)
    {
        _2450 = _2340;
        _2452 = _2341;
        _2454 = _2342;
    }
    else
    {
        uint _2458 = _2272 + 6u;
        float _2474 = (dot(vec3(cbLight._m0[_2272 + 2u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4593 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2477 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2450 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2340;
        _2452 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2341;
        _2454 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2342;
    }
    bool _2457 = _2346.y == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2457)
    {
        _2512 = _2450;
        _2514 = _2452;
        _2516 = _2454;
    }
    else
    {
        uint _2685 = _2272 + 7u;
        float _2701 = (dot(vec3(cbLight._m0[_2272 + 3u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2702 = _2701 * _2701;
        float _4609 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2703 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2704 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2512 = (((cbLight._m0[_2685].x * 0.3183098733425140380859375) * _2703) * _2704) + _2450;
        _2514 = (((cbLight._m0[_2685].y * 0.3183098733425140380859375) * _2703) * _2704) + _2452;
        _2516 = (((cbLight._m0[_2685].z * 0.3183098733425140380859375) * _2703) * _2704) + _2454;
    }
    uint _2519 = _2272 + 8u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _810) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2272].x + _886;
    float _2535 = cbLight._m0[_2272].y + _887;
    float _2536 = cbLight._m0[_2272].z + _888;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2272].xyz));
    float _4625 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _4636 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2548 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2549 = dot(vec3(_807, _808, _809), vec3(_2541, _2542, _2543));
    float _4647 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2553 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2541, _2542, _2543));
    float _4658 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2557 = _2533 * _2533;
    float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
    float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
    float _2570 = 0.959999978542327880859375 - _953;
    float _2572 = 0.959999978542327880859375 - _954;
    float _2573 = 0.959999978542327880859375 - _955;
    float _2580 = 1.0 - _2533;
    float _2591 = (0.5 / (((_2548 * ((_2547 * _2580) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2580) + _2533) * _2547))) * _2547;
    float _4669 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
    uint _2607 = _2272 + 9u;
    float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _810) * 0.949999988079071044921875);
    float _2619 = _2618 * _2618;
    float _2620 = cbLight._m0[_2312].x + _886;
    float _2621 = cbLight._m0[_2312].y + _887;
    float _2622 = cbLight._m0[_2312].z + _888;
    float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
    float _2627 = _2626 * _2620;
    float _2628 = _2626 * _2621;
    float _2629 = _2626 * _2622;
    float _2630 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2312].xyz));
    float _4680 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2634 = dot(vec3(_807, _808, _809), vec3(_2627, _2628, _2629));
    float _4691 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2627, _2628, _2629));
    float _4702 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2619 * _2619;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
    float _2660 = 1.0 - _2619;
    float _2670 = (0.5 / (((_2548 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2660) + _2619) * _2633))) * _2633;
    float _4713 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2672 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    float _2682 = (((((_2653 * _2570) + _956) * cbLight._m0[_2607].x) * _2672) * _2295) + ((((cbLight._m0[_2519].x * _2261) * ((_2569 * _2570) + _956)) * _2593) * _2308);
    float _2683 = (((((_2653 * _2572) + _958) * cbLight._m0[_2607].y) * _2672) * _2295) + ((((cbLight._m0[_2519].y * _2263) * ((_2569 * _2572) + _958)) * _2593) * _2308);
    float _2684 = (((((_2653 * _2573) + _959) * cbLight._m0[_2607].z) * _2672) * _2295) + ((((cbLight._m0[_2519].z * _2265) * ((_2569 * _2573) + _959)) * _2593) * _2308);
    float _2740;
    float _2742;
    float _2744;
    if (_2348)
    {
        _2740 = _2682;
        _2742 = _2683;
        _2744 = _2684;
    }
    else
    {
        uint _2746 = _2272 + 2u;
        uint _2750 = _2272 + 10u;
        float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2746].w)) * _810) * 0.949999988079071044921875);
        float _2765 = _2764 * _2764;
        float _2766 = cbLight._m0[_2746].x + _886;
        float _2767 = cbLight._m0[_2746].y + _887;
        float _2768 = cbLight._m0[_2746].z + _888;
        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
        float _2773 = _2772 * _2766;
        float _2774 = _2772 * _2767;
        float _2775 = _2772 * _2768;
        float _2776 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2746].xyz));
        float _4724 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2780 = dot(vec3(_807, _808, _809), vec3(_2773, _2774, _2775));
        float _4735 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2784 = dot(vec3(cbLight._m0[_2746].xyz), vec3(_2773, _2774, _2775));
        float _4746 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2788 = _2765 * _2765;
        float _2792 = ((_2783 * _2783) * (_2788 + (-1.0))) + 1.0;
        float _2799 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
        float _2806 = 1.0 - _2765;
        float _2816 = (0.5 / (((_2548 * ((_2779 * _2806) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2806) + _2765) * _2779))) * _2779;
        float _4757 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2818 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2788 / ((_2792 * _2792) * 3.141590118408203125));
        float _2819 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2740 = (((((_2799 * _2570) + _956) * cbLight._m0[_2750].x) * _2818) * _2819) + _2682;
        _2742 = (((((_2799 * _2572) + _958) * cbLight._m0[_2750].y) * _2818) * _2819) + _2683;
        _2744 = (((((_2799 * _2573) + _959) * cbLight._m0[_2750].z) * _2818) * _2819) + _2684;
    }
    float _2850;
    float _2852;
    float _2854;
    if (_2457)
    {
        _2850 = _2740;
        _2852 = _2742;
        _2854 = _2744;
    }
    else
    {
        uint _2861 = _2272 + 3u;
        uint _2865 = _2272 + 11u;
        float _2879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2861].w)) * _810) * 0.949999988079071044921875);
        float _2880 = _2879 * _2879;
        float _2881 = cbLight._m0[_2861].x + _886;
        float _2882 = cbLight._m0[_2861].y + _887;
        float _2883 = cbLight._m0[_2861].z + _888;
        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
        float _2888 = _2887 * _2881;
        float _2889 = _2887 * _2882;
        float _2890 = _2887 * _2883;
        float _2891 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2861].xyz));
        float _4773 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2895 = dot(vec3(_807, _808, _809), vec3(_2888, _2889, _2890));
        float _4784 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2899 = dot(vec3(cbLight._m0[_2861].xyz), vec3(_2888, _2889, _2890));
        float _4795 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2903 = _2880 * _2880;
        float _2907 = ((_2898 * _2898) * (_2903 + (-1.0))) + 1.0;
        float _2914 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
        float _2921 = 1.0 - _2880;
        float _2931 = (0.5 / (((_2548 * ((_2894 * _2921) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2548 * _2921) + _2880) * _2894))) * _2894;
        float _4806 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2933 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2903 / ((_2907 * _2907) * 3.141590118408203125));
        float _2934 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2850 = (((((_2914 * _2570) + _956) * cbLight._m0[_2865].x) * _2933) * _2934) + _2740;
        _2852 = (((((_2914 * _2572) + _958) * cbLight._m0[_2865].y) * _2933) * _2934) + _2742;
        _2854 = (((((_2914 * _2573) + _959) * cbLight._m0[_2865].z) * _2933) * _2934) + _2744;
    }
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_2270.y == 0u)
    {
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.x;
        uint _2967 = uint((float(_2955.y) * floor(float(uint(cbSceneParam._m0[85u].y * _895) / _2956))) + floor(float(uint(cbSceneParam._m0[85u].x * _894) / _2956)));
        float _2977 = (log2(_2048 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2978 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        uint _2981 = uint(isnan(14.0) ? _2978 : (isnan(_2978) ? 14.0 : min(_2978, 14.0)));
        uvec4 _2986 = texelFetch(g_lightClusterGridBuffer, int(((_2981 << 2u) + (_2967 << 6u)) >> 2u));
        uint _2987 = _2986.x;
        uint _2988 = _2955.z;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((((1u << ((_2988 >> 4u) & 15u)) + 4294967295u) & _2987) == 0u) || ((_2988 & 240u) == 0u))
        {
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
        }
        else
        {
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3227)
                {
                    frontier_phi_66_pred = _3216;
                    frontier_phi_66_pred_1 = _3215;
                    frontier_phi_66_pred_2 = _3214;
                    frontier_phi_66_pred_3 = _3213;
                    frontier_phi_66_pred_4 = _3212;
                    frontier_phi_66_pred_5 = _3211;
                }
                else
                {
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    uint _3341;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3226;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    for (;;)
                    {
                        uint _3345 = uint(findLSB(_3341)) + (_3217 << 5u);
                        uint _3342 = (_3341 + 4294967295u) & _3341;
                        uint _3347 = _3345 * 48u;
                        vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3367 = (_3345 * 48u) + 4u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3386 = (_3345 * 48u) + 8u;
                        vec3 _3397 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x));
                        float _3401 = _3361.x - _2046;
                        float _3402 = _3361.y - _2047;
                        float _3403 = _3361.z - _2048;
                        float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                        float _3407 = inversesqrt(_3404);
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3411 = dot(vec3(_913, _916, _919), vec3(_3408, _3409, _3410));
                        float _3416 = 1.0 - (_3404 * _3361.w);
                        float _4832 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3418 = sqrt(_3404) * _3380.w;
                        float _3421 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3411) + _3422;
                        float _3428 = _3418 * _3418;
                        float _3432 = ((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3417) / ((_3428 * 0.699999988079071044921875) + 1.0);
                        float _3436 = (-0.0) - _2046;
                        float _3437 = (-0.0) - _2047;
                        float _3438 = (-0.0) - _2048;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3452 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                        float _3453 = 1.0 - _988;
                        float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                        float _3461 = _3460 * _3460;
                        float _3462 = _3461 * _3461;
                        float _3463 = _3443 + _3408;
                        float _3464 = _3444 + _3409;
                        float _3465 = _3445 + _3410;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3473 = dot(vec3(_913, _916, _919), vec3(_3443, _3444, _3445));
                        float _4848 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3477 = dot(vec3(_913, _916, _919), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                        float _4859 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                        float _3485 = _3421 * _3461;
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3411) + _3486;
                        float _4870 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3491 = 1.0 - _3461;
                        float _3501 = (0.5 / (((_3490 * ((_3476 * _3491) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3461) * _3476))) * _3490;
                        float _4881 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3512 = (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3484 * _3484) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125))) * _3417;
                        _3270 = (_3432 * _3380.x) + _3338;
                        _3271 = (_3432 * _3380.y) + _3339;
                        _3272 = (_3432 * _3380.z) + _3340;
                        _3267 = (_3512 * _3397.x) + _3335;
                        _3268 = (_3512 * _3397.y) + _3336;
                        _3269 = (_3512 * _3397.z) + _3337;
                        if (_3342 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3342;
                        }
                    }
                    frontier_phi_66_pred = _3272;
                    frontier_phi_66_pred_1 = _3271;
                    frontier_phi_66_pred_2 = _3270;
                    frontier_phi_66_pred_3 = _3269;
                    frontier_phi_66_pred_4 = _3268;
                    frontier_phi_66_pred_5 = _3267;
                }
                _3078 = frontier_phi_66_pred;
                _3076 = frontier_phi_66_pred_1;
                _3074 = frontier_phi_66_pred_2;
                _3072 = frontier_phi_66_pred_3;
                _3070 = frontier_phi_66_pred_4;
                _3068 = frontier_phi_66_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3068;
                    _3212 = _3070;
                    _3213 = _3072;
                    _3214 = _3074;
                    _3215 = _3076;
                    _3216 = _3078;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
        }
        uvec4 _3081 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3082 = _3081.z;
        uint _3084 = (_3082 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3084) & _2987) == 0u)
        {
            _3179 = _3067;
            _3181 = _3069;
            _3183 = _3071;
            _3185 = _3073;
            _3187 = _3075;
            _3189 = _3077;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
            float _3205 = _3204 * _2046;
            float _3206 = _3204 * _2047;
            float _3207 = _3204 * _2048;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3084 < ((_3082 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3318 = _3067;
                float _3319 = _3069;
                float _3320 = _3071;
                float _3321 = _3073;
                float _3322 = _3075;
                float _3323 = _3077;
                uint _3324 = _3084;
                uint _3333;
                bool _3334;
                for (;;)
                {
                    _3333 = texelFetch(g_lightClassification, int((((_2981 << 5u) + (_2967 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                    _3334 = _3333 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3334)
                    {
                        frontier_phi_72_pred = _3323;
                        frontier_phi_72_pred_1 = _3322;
                        frontier_phi_72_pred_2 = _3321;
                        frontier_phi_72_pred_3 = _3320;
                        frontier_phi_72_pred_4 = _3319;
                        frontier_phi_72_pred_5 = _3318;
                    }
                    else
                    {
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        float _3532 = _3320;
                        float _3533 = _3321;
                        float _3534 = _3322;
                        float _3535 = _3323;
                        uint _3536 = _3333;
                        uint _3537;
                        vec4 _3562;
                        float _3563;
                        vec4 _3578;
                        vec3 _3590;
                        vec4 _3605;
                        vec4 _3621;
                        float _3667;
                        bool _3668;
                        for (;;)
                        {
                            uint _3547 = ((_3324 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3536));
                            _3537 = (_3536 + 4294967295u) & _3536;
                            uint _3549 = _3547 * 40u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3563 = _3562.w;
                            uint _3565 = (_3547 * 40u) + 4u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3547 * 40u) + 8u;
                            _3590 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x));
                            uint _3592 = (_3547 * 40u) + 16u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3608 = (_3547 * 40u) + 20u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3547 * 40u) + 24u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3642 = (_3547 * 40u) + 28u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3667 = fma(_2048, _3655.z, fma(_2047, _3655.y, _3655.x * _2046)) + _3655.w;
                            _3668 = !((fma(_2048, _3636.z, fma(_2047, _3636.y, _3636.x * _2046)) + _3636.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3668)
                            {
                                float _3695 = _3562.x - _2046;
                                float _3696 = _3562.y - _2047;
                                float _3697 = _3562.z - _2048;
                                float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                                float _3701 = inversesqrt(_3698);
                                float _3702 = _3701 * _3695;
                                float _3703 = _3701 * _3696;
                                float _3704 = _3701 * _3697;
                                float _3708 = 1.0 - (_3698 / (_3563 * _3563));
                                float _4892 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3713 = sqrt(_3698) * _3578.w;
                                float _3715 = 1.39999997615814208984375 / (_3713 + 1.39999997615814208984375);
                                float _3716 = _3715 * _3715;
                                float _3719 = ((1.0 - _3716) * dot(vec3(_3702, _3703, _3704), vec3(_913, _916, _919))) + _3716;
                                float _3722 = _3713 * _3713;
                                float _3726 = (fma(_2048, _3605.z, fma(_2047, _3605.y, _3605.x * _2046)) + _3605.w) / _3667;
                                float _3727 = (fma(_2048, _3621.z, fma(_2047, _3621.y, _3621.x * _2046)) + _3621.w) / _3667;
                                float _3731 = 1.0 - dot(vec2(_3726, _3727), vec2(_3726, _3727));
                                float _4908 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3733 = _3732 * (((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3709) / ((_3722 * 0.699999988079071044921875) + 1.0));
                                float _3745 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                                float _3746 = 1.0 - _988;
                                float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3702 - _3205;
                                float _3757 = _3703 - _3206;
                                float _3758 = _3704 - _3207;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_913, _916, _919), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4919 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3770 = dot(vec3(_913, _916, _919), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4930 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3715 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_913, _916, _919), vec3(_3702, _3703, _3704))) + _3779;
                                float _4941 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4952 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3732 * _3709) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3777 * _3777) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3733 * _3578.y;
                                frontier_phi_78_pred_1 = _3733 * _3578.x;
                                frontier_phi_78_pred_2 = _3807 * _3590.z;
                                frontier_phi_78_pred_3 = _3807 * _3590.y;
                                frontier_phi_78_pred_4 = _3807 * _3590.x;
                                frontier_phi_78_pred_5 = _3733 * _3578.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3815 = frontier_phi_78_pred;
                            _3814 = frontier_phi_78_pred_1;
                            _3813 = frontier_phi_78_pred_2;
                            _3812 = frontier_phi_78_pred_3;
                            _3811 = frontier_phi_78_pred_4;
                            _3816 = frontier_phi_78_pred_5;
                            _3520 = _3814 + _3533;
                            _3521 = _3815 + _3534;
                            _3522 = _3816 + _3535;
                            _3517 = _3811 + _3530;
                            _3518 = _3812 + _3531;
                            _3519 = _3813 + _3532;
                            if (_3537 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3537;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3522;
                        frontier_phi_72_pred_1 = _3521;
                        frontier_phi_72_pred_2 = _3520;
                        frontier_phi_72_pred_3 = _3519;
                        frontier_phi_72_pred_4 = _3518;
                        frontier_phi_72_pred_5 = _3517;
                    }
                    _3190 = frontier_phi_72_pred;
                    _3188 = frontier_phi_72_pred_1;
                    _3186 = frontier_phi_72_pred_2;
                    _3184 = frontier_phi_72_pred_3;
                    _3182 = frontier_phi_72_pred_4;
                    _3180 = frontier_phi_72_pred_5;
                    uint _3325 = _3324 + 1u;
                    if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3318 = _3180;
                        _3319 = _3182;
                        _3320 = _3184;
                        _3321 = _3186;
                        _3322 = _3188;
                        _3323 = _3190;
                        _3324 = _3325;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3190;
                frontier_phi_60_61_ladder_1 = _3188;
                frontier_phi_60_61_ladder_2 = _3184;
                frontier_phi_60_61_ladder_3 = _3182;
                frontier_phi_60_61_ladder_4 = _3180;
                frontier_phi_60_61_ladder_5 = _3186;
            }
            else
            {
                frontier_phi_60_61_ladder = _3077;
                frontier_phi_60_61_ladder_1 = _3075;
                frontier_phi_60_61_ladder_2 = _3071;
                frontier_phi_60_61_ladder_3 = _3069;
                frontier_phi_60_61_ladder_4 = _3067;
                frontier_phi_60_61_ladder_5 = _3073;
            }
            _3179 = frontier_phi_60_61_ladder_4;
            _3181 = frontier_phi_60_61_ladder_3;
            _3183 = frontier_phi_60_61_ladder_2;
            _3185 = frontier_phi_60_61_ladder_5;
            _3187 = frontier_phi_60_61_ladder_1;
            _3189 = frontier_phi_60_61_ladder;
        }
        float _3194 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _3000 = (_3194 * _3185) + _2512;
        _3002 = (_3194 * _3187) + _2514;
        _3004 = (_3194 * _3189) + _2516;
        _3006 = ((_3179 * _956) * _3194) + _2850;
        _3008 = ((_3181 * _958) * _3194) + _2852;
        _3010 = ((_3183 * _959) * _3194) + _2854;
    }
    else
    {
        _3000 = _2512;
        _3002 = _2514;
        _3004 = _2516;
        _3006 = _2850;
        _3008 = _2852;
        _3010 = _2854;
    }
    float _4968 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4979 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4990 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    uint _3030 = _255 + 6u;
    float _3038 = _894 / cbSceneParam._m0[86u].x;
    float _3039 = _895 / cbSceneParam._m0[86u].y;
    vec4 _3053 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3038, _3039, (log2((isnan(cbSceneParam._m0[77u].w) ? _829 : (isnan(_829) ? cbSceneParam._m0[77u].w : min(_829, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3055 = _3053.x;
    float _3056 = _3053.y;
    float _3057 = _3053.z;
    float _3058 = _3053.w;
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    if (_829 > cbSceneParam._m0[78u].w)
    {
        float _3092 = isnan(_829) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _829 : min(cbSceneParam._m0[80u].w, _829));
        float _3093 = _3092 / _829;
        float _3104 = _3093 * _879;
        float _3105 = _880 * _3093;
        float _3106 = (-0.0) - _3105;
        float _3107 = _3093 * _881;
        float _3109 = (cbSceneParam._m0[77u].w * _3106) / _3092;
        float _3110 = _3109 + cbSceneParam._m0[79u].w;
        float _3111 = cbSceneParam._m0[79u].w - _3105;
        float _3117 = sqrt(((_3104 * _3104) + (_3105 * _3105)) + (_3107 * _3107));
        float _3120 = (1.0 - (cbSceneParam._m0[77u].w / _3092)) * _3117;
        float _3125 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3127 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3280;
        if (abs((_3106 - _3109) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3280 = ((((_3110 > 0.0) ? exp2(_3125 * _3110) : (2.0 - exp2(_3127 * _3110))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3120;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : max(_3110, _3111));
            float _3242 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : min(_3110, _3111));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3280 = ((abs(_3117 / _3106) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3125 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3125 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3127 * _3251) - exp2(_3127 * _3252)) * _3240))) + (_3120 * cbSceneParam._m0[80u].z);
        }
        vec4 _3282 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3038, _3039, 1.0), 0.0);
        float _3291 = exp2((_3280 * (-1.44269502162933349609375)) * (1.0 - _3282.w));
        float _3292 = log2(_3291);
        float _3308 = log2(_3058);
        _3129 = (exp2(_3308 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].x)) * _3282.x) / cbSceneParam._m0[78u].x)) + _3055;
        _3131 = (exp2(_3308 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].y)) * _3282.y) / cbSceneParam._m0[78u].y)) + _3056;
        _3133 = (exp2(_3308 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].z)) * _3282.z) / cbSceneParam._m0[78u].z)) + _3057;
        _3135 = _3291 * _3058;
    }
    else
    {
        _3129 = _3055;
        _3131 = _3056;
        _3133 = _3057;
        _3135 = _3058;
    }
    float _3147 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3148 = _3147 == 3.0;
    float _3149 = log2(_3135);
    float _3156 = exp2(_3149 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_3000 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _972))) + ((_3006 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _3157 = exp2(_3149 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_3002 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _972))) + ((_3008 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _3158 = exp2(_3149 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_3004 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _972))) + ((_3010 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1780)) * cbPerFrame._m0[3u].x));
    float _3167 = (_3147 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3167 * (_3148 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3129)));
    SV_Target.y = _3167 * (_3148 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3131)));
    SV_Target.z = _3167 * (_3148 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3133)));
    SV_Target.w = cbInstanceData._m0[_3030].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3030].w;
}


