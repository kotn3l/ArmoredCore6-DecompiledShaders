#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1198;
float _3604;
float _3605;
float _3606;
float _3607;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3616 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _378) + _426;
    float _438 = ((((_405.x - _424) * _378) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _378) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3627 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _479 = _477.x;
    float _480 = 1.0 - _479;
    float _493 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_479 - _480) * cbMtdParam._m0[24u].z) + _480) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3638 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _501 = (_494 * (cbMtdParam._m0[17u].x - _385)) + _385;
    float _502 = (_494 * (cbMtdParam._m0[17u].y - _386)) + _386;
    float _503 = (_494 * (cbMtdParam._m0[17u].z - _387)) + _387;
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _531 = _529.x;
    float _549 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _531) * _378) + _531;
    float _553 = ((_515.x - _549) * cbMtdParam._m0[19u].z) + _549;
    float _555 = _553 - (_553 * _494);
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _575 = (_568.x * 2.0) + (-1.0);
    float _576 = (_568.y * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3649 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _585 = (_494 * (_568.z - _435)) + _435;
    float _597 = (((_575 - _438) + (cbMtdParam._m0[21u].x * _438)) * _494) + _438;
    float _598 = (((_576 - _440) + (cbMtdParam._m0[21u].x * _440)) * _494) + _440;
    float _599 = (_494 * (sqrt(1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) - _446)) + _446;
    float _604 = cbMtdParam._m0[22u].x + _459.w;
    float _607 = fma(_599, _227 * NORMAL.x, fma(_598, _234 * TANGENT.x, (_220 * _212) * _597));
    float _610 = fma(_599, _227 * NORMAL.y, fma(_598, _234 * TANGENT.y, (_220 * _213) * _597));
    float _613 = fma(_599, _227 * NORMAL.z, fma(_598, _234 * TANGENT.z, (_220 * _214) * _597));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3660 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _621 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3682 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3693 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3704 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3715 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _626 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _640 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _691 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _681);
    float _692 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _681);
    float _693 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _681);
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    float _698 = _691 * _697;
    float _699 = _692 * _697;
    float _700 = _693 * _697;
    vec4 _705 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _707 = _705.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _879 = sqrt(((_691 * _691) + (_692 * _692)) + (_693 * _693));
        float _885 = (cbMatDynParam._m0[5u].x * _879) + cbMatDynParam._m0[5u].y;
        float _3726 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _890 = (cbMatDynParam._m0[5u].z * _879) + cbMatDynParam._m0[5u].w;
        float _3737 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) - _886)) + _886) < ((_707 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _740 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _743 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _756 = _240 + 9u;
    uint _757 = _756 + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_757].z;
    float _3748 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _769 = 1.0 - _626;
    float _770 = _766 * _769;
    float _771 = _767 * _769;
    float _772 = _768 * _769;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _626;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _626;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _626;
    float _780 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _796 = ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * TEXCOORD_5.w) * _792.x;
    float _797 = dot(vec3(_618, _619, _620), vec3(_698, _699, _700));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _618) - _698;
    float _805 = (_800 * _619) - _699;
    float _806 = (_800 * _620) - _700;
    float _810 = abs(dot(vec3(_698, _699, _700), vec3(_618, _619, _620)));
    float _3781 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_621);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _831 = (1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _832 = _825 * _812;
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1197;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _922 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _926 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _930 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _955 = _860 + _618;
        float _956 = _864 + _619;
        float _957 = _868 + _620;
        float _967 = fma(_957, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955)) - _922;
        float _968 = fma(_957, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955)) - _926;
        float _969 = fma(_957, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955)) - _930;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_922 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_926 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[34u].z) + ((((((_930 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1025 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_991.x + (-0.5));
        float _1027 = _1025 * (_991.y + (-0.5));
        float _1028 = _1025 * (_991.z + (-0.5));
        float _1035 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_998.x + (-0.5));
        float _1037 = _1035 * (_998.y + (-0.5));
        float _1038 = _1035 * (_998.z + (-0.5));
        float _1045 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1005.x + (-0.5));
        float _1047 = _1045 * (_1005.y + (-0.5));
        float _1048 = _1045 * (_1005.z + (-0.5));
        float _1055 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1012.x + (-0.5));
        float _1057 = _1055 * (_1012.y + (-0.5));
        float _1058 = _1055 * (_1012.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1079 = (dot(vec3(_618, _619, _620), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1089 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3829 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1091 + 1.0))) + _1096) * _1059;
        float _1106 = _1027 * 0.5;
        float _1107 = _1037 * 0.5;
        float _1108 = _1047 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_618, _619, _620), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3862 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1133 + 1.0))) + _1138) * _1060;
        float _1148 = _1028 * 0.5;
        float _1149 = _1038 * 0.5;
        float _1150 = _1048 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_618, _619, _620), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3895 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1175 + 1.0))) + _1180) * _1061;
        _1197 = _1028;
        _1199 = _1027;
        _1200 = _1026;
        _1201 = _1038;
        _1202 = _1037;
        _1203 = _1036;
        _1204 = _1048;
        _1205 = _1047;
        _1206 = _1046;
        _1207 = _1061;
        _1208 = _1060;
        _1209 = _1059;
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _1198;
        _1199 = _1198;
        _1200 = _1198;
        _1201 = _1198;
        _1202 = _1198;
        _1203 = _1198;
        _1204 = _1198;
        _1205 = _1198;
        _1206 = _1198;
        _1207 = _1198;
        _1208 = _1198;
        _1209 = _1198;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1244 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1248 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1271 = _860 + _618;
        float _1272 = _864 + _619;
        float _1273 = _868 + _620;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_618, _619, _620), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3958 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_618, _619, _620), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3991 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_618, _619, _620), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4024 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1198;
        _1510 = _1198;
        _1511 = _1198;
        _1512 = _1198;
        _1513 = _1198;
        _1514 = _1198;
        _1515 = _1198;
        _1516 = _1198;
        _1517 = _1198;
        _1518 = _1198;
        _1519 = _1198;
        _1520 = _1198;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _804 * 0.5;
    float _1578 = _805 * 0.5;
    float _1579 = _806 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1197, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1708 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1711 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1739 = frontier_phi_17_15_ladder;
        }
        float _1963;
        if (_1708 > 0.0)
        {
            _1963 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1963 = frontier_phi_26_22_ladder;
        }
        float _2220;
        if (_1711 > 0.0)
        {
            _2220 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2220 = frontier_phi_38_33_ladder;
        }
        float _2222 = isnan(_1963) ? _1739 : (isnan(_1739) ? _1963 : min(_1739, _1963));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1705) + _1694;
        float _2228 = (_2223 * _1708) + _1698;
        float _2229 = (_2223 * _1711) + _1702;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2230;
        float _2234 = _2230 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 > _2234) || ((_2228 < _2232) || ((_2227 < _2232) || (_2227 > _2234))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_16_38_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_16_38_ladder_2;
        _1729 = frontier_phi_16_38_ladder_1;
        _1731 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1646);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1790 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1794 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1798 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1801 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1804 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1807 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1968;
        if (_1801 > 0.0)
        {
            _1968 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1968 = frontier_phi_28_24_ladder;
        }
        float _2247;
        if (_1804 > 0.0)
        {
            _2247 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2247 = frontier_phi_40_35_ladder;
        }
        float _2460;
        if (_1807 > 0.0)
        {
            _2460 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2460 = frontier_phi_49_46_ladder;
        }
        float _2462 = isnan(_2247) ? _1968 : (isnan(_1968) ? _2247 : min(_1968, _2247));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1801) + _1790;
        float _2468 = (_2463 * _1804) + _1794;
        float _2469 = (_2463 * _1807) + _1798;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_25_49_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1826 = frontier_phi_25_49_ladder_2;
        _1828 = frontier_phi_25_49_ladder_1;
        _1830 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1736);
        _1826 = _1810.x * cbModelParam._m0[1u].z;
        _1828 = _1810.y * cbModelParam._m0[1u].z;
        _1830 = _1810.z * cbModelParam._m0[1u].z;
    }
    float _1843 = (((_831 * _780) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1845 = (((_831 * _782) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1828 - _1729)) + _1729);
    float _1847 = (((_831 * _783) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1830 - _1731)) + _1731);
    float _1850 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1845, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1845, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1845, cbSceneParam._m0[91u].y, _1843 * cbSceneParam._m0[91u].x));
    vec4 _1864 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_718, _719));
    float _1866 = _1864.w;
    float _1878 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1866);
    float _1879 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1866);
    float _1880 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1866);
    uvec4 _1884 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1886 = _1884.x * 14u;
    uint _1887 = _1886 + 13u;
    float _1894 = _796 + (-1.0);
    float _1899 = (cbLight._m0[_1887].x * _1894) + 1.0;
    float _1900 = (cbLight._m0[_1887].y * _1894) + 1.0;
    float _1901 = (cbLight._m0[_1887].z * _1894) + 1.0;
    float _1902 = (cbLight._m0[_1887].w * _1894) + 1.0;
    uint _1903 = _1886 + 5u;
    float _1909 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1913 = _1886 + 4u;
    float _1922 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1926 = _1886 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_618, _619, _620));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_618, _619, _620));
    float _4160 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4171 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1903].x * _1909) * _1947) + (((cbLight._m0[_1913].x * _1878) * _1922) * _1945);
    float _1955 = ((_1909 * cbLight._m0[_1903].y) * _1947) + (((cbLight._m0[_1913].y * _1879) * _1922) * _1945);
    float _1956 = ((_1909 * cbLight._m0[_1903].z) * _1947) + (((cbLight._m0[_1913].z * _1880) * _1922) * _1945);
    uvec4 _1960 = floatBitsToUint(cbLight._m0[_1886 + 12u]);
    bool _1962 = _1960.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1962)
    {
        _1973 = _1954;
        _1975 = _1955;
        _1977 = _1956;
    }
    else
    {
        uint _1981 = _1886 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1886 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4182 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2000 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1954;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1955;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1956;
    }
    bool _1980 = _1960.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1980)
    {
        _2018 = _1973;
        _2020 = _1975;
        _2022 = _1977;
    }
    else
    {
        uint _2191 = _1886 + 7u;
        float _2207 = (dot(vec3(cbLight._m0[_1886 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4198 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2210 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2018 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _1973;
        _2020 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _1975;
        _2022 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _1977;
    }
    uint _2025 = _1886 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _621) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1886].x + _698;
    float _2041 = cbLight._m0[_1886].y + _699;
    float _2042 = cbLight._m0[_1886].z + _700;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1886].xyz));
    float _4214 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2054 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2055 = dot(vec3(_618, _619, _620), vec3(_2047, _2048, _2049));
    float _4236 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2047, _2048, _2049));
    float _4247 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2075 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
    float _2076 = 0.959999978542327880859375 - _777;
    float _2078 = 0.959999978542327880859375 - _778;
    float _2079 = 0.959999978542327880859375 - _779;
    float _2086 = 1.0 - _2039;
    float _2097 = (0.5 / (((_2054 * ((_2053 * _2086) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2086) + _2039) * _2053))) * _2053;
    float _4258 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2113 = _1886 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _621) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1926].x + _698;
    float _2127 = cbLight._m0[_1926].y + _699;
    float _2128 = cbLight._m0[_1926].z + _700;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1926].xyz));
    float _4269 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2140 = dot(vec3(_618, _619, _620), vec3(_2133, _2134, _2135));
    float _4280 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2133, _2134, _2135));
    float _4291 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0);
    float _2166 = 1.0 - _2125;
    float _2176 = (0.5 / (((_2054 * ((_2139 * _2166) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2166) + _2125) * _2139))) * _2139;
    float _4302 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2188 = (((((_2159 * _2076) + _780) * cbLight._m0[_2113].x) * _2178) * _1909) + ((((cbLight._m0[_2025].x * _1878) * ((_2075 * _2076) + _780)) * _2099) * _1922);
    float _2189 = (((((_2159 * _2078) + _782) * cbLight._m0[_2113].y) * _2178) * _1909) + ((((cbLight._m0[_2025].y * _1879) * ((_2075 * _2078) + _782)) * _2099) * _1922);
    float _2190 = (((((_2159 * _2079) + _783) * cbLight._m0[_2113].z) * _2178) * _1909) + ((((cbLight._m0[_2025].z * _1880) * ((_2075 * _2079) + _783)) * _2099) * _1922);
    float _2252;
    float _2254;
    float _2256;
    if (_1962)
    {
        _2252 = _2188;
        _2254 = _2189;
        _2256 = _2190;
    }
    else
    {
        uint _2258 = _1886 + 2u;
        uint _2262 = _1886 + 10u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _621) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _698;
        float _2279 = cbLight._m0[_2258].y + _699;
        float _2280 = cbLight._m0[_2258].z + _700;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2258].xyz));
        float _4313 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2292 = dot(vec3(_618, _619, _620), vec3(_2285, _2286, _2287));
        float _4324 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4335 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0);
        float _2318 = 1.0 - _2277;
        float _2328 = (0.5 / (((_2054 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2318) + _2277) * _2291))) * _2291;
        float _4346 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2252 = (((((_2311 * _2076) + _780) * cbLight._m0[_2262].x) * _2330) * _2331) + _2188;
        _2254 = (((((_2311 * _2078) + _782) * cbLight._m0[_2262].y) * _2330) * _2331) + _2189;
        _2256 = (((((_2311 * _2079) + _783) * cbLight._m0[_2262].z) * _2330) * _2331) + _2190;
    }
    float _2366;
    float _2368;
    float _2370;
    if (_1980)
    {
        _2366 = _2252;
        _2368 = _2254;
        _2370 = _2256;
    }
    else
    {
        uint _2377 = _1886 + 3u;
        uint _2381 = _1886 + 11u;
        float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _621) * 0.949999988079071044921875);
        float _2396 = _2395 * _2395;
        float _2397 = cbLight._m0[_2377].x + _698;
        float _2398 = cbLight._m0[_2377].y + _699;
        float _2399 = cbLight._m0[_2377].z + _700;
        float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
        float _2404 = _2403 * _2397;
        float _2405 = _2403 * _2398;
        float _2406 = _2403 * _2399;
        float _2407 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2377].xyz));
        float _4362 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2411 = dot(vec3(_618, _619, _620), vec3(_2404, _2405, _2406));
        float _4373 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2415 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2404, _2405, _2406));
        float _4384 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2419 = _2396 * _2396;
        float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
        float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
        float _2437 = 1.0 - _2396;
        float _2447 = (0.5 / (((_2054 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2437) + _2396) * _2410))) * _2410;
        float _4395 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2449 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
        float _2450 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2366 = (((((_2430 * _2076) + _780) * cbLight._m0[_2381].x) * _2449) * _2450) + _2252;
        _2368 = (((((_2430 * _2078) + _782) * cbLight._m0[_2381].y) * _2449) * _2450) + _2254;
        _2370 = (((((_2430 * _2079) + _783) * cbLight._m0[_2381].z) * _2449) * _2450) + _2256;
    }
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_1884.y == 0u)
    {
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2525;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2525;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2525;
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.x;
        uint _2552 = uint((float(_2540.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2541))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2541)));
        float _2562 = (log2(_2528 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2563 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        uint _2566 = uint(isnan(14.0) ? _2563 : (isnan(_2563) ? 14.0 : min(_2563, 14.0)));
        uvec4 _2571 = texelFetch(g_lightClusterGridBuffer, int(((_2566 << 2u) + (_2552 << 6u)) >> 2u));
        uint _2572 = _2571.x;
        uint _2573 = _2540.z;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((((1u << ((_2573 >> 4u) & 15u)) + 4294967295u) & _2572) == 0u) || ((_2573 & 240u) == 0u))
        {
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
        }
        else
        {
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2842)
                {
                    frontier_phi_66_pred = _2826;
                    frontier_phi_66_pred_1 = _2831;
                    frontier_phi_66_pred_2 = _2830;
                    frontier_phi_66_pred_3 = _2829;
                    frontier_phi_66_pred_4 = _2828;
                    frontier_phi_66_pred_5 = _2827;
                }
                else
                {
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    uint _2977;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2841;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    for (;;)
                    {
                        uint _2981 = uint(findLSB(_2977)) + (_2832 << 5u);
                        uint _2978 = (_2977 + 4294967295u) & _2977;
                        uint _2983 = _2981 * 48u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 3u)).x));
                        uint _3003 = (_2981 * 48u) + 4u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3022 = (_2981 * 48u) + 8u;
                        vec3 _3033 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x));
                        float _3037 = _2997.x - _2526;
                        float _3038 = _2997.y - _2527;
                        float _3039 = _2997.z - _2528;
                        float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                        float _3043 = inversesqrt(_3040);
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3047 = dot(vec3(_737, _740, _743), vec3(_3044, _3045, _3046));
                        float _3052 = 1.0 - (_3040 * _2997.w);
                        float _4421 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3054 = sqrt(_3040) * _3016.w;
                        float _3057 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                        float _3058 = _3057 * _3057;
                        float _3061 = ((1.0 - _3058) * _3047) + _3058;
                        float _3064 = _3054 * _3054;
                        float _3068 = ((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3053) / ((_3064 * 0.699999988079071044921875) + 1.0);
                        float _3072 = (-0.0) - _2526;
                        float _3073 = (-0.0) - _2527;
                        float _3074 = (-0.0) - _2528;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3089 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _812;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_737, _740, _743), vec3(_3079, _3080, _3081));
                        float _4437 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3114 = dot(vec3(_737, _740, _743), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4448 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = _3057 * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3047) + _3123;
                        float _4459 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4470 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) / ((_3121 * _3121) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125))) * _3053;
                        _2901 = (_3068 * _3016.x) + _2974;
                        _2902 = (_3068 * _3016.y) + _2975;
                        _2903 = (_3068 * _3016.z) + _2976;
                        _2898 = (_3149 * _3033.x) + _2971;
                        _2899 = (_3149 * _3033.y) + _2972;
                        _2900 = (_3149 * _3033.z) + _2973;
                        if (_2978 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2978;
                        }
                    }
                    frontier_phi_66_pred = _2898;
                    frontier_phi_66_pred_1 = _2903;
                    frontier_phi_66_pred_2 = _2902;
                    frontier_phi_66_pred_3 = _2901;
                    frontier_phi_66_pred_4 = _2900;
                    frontier_phi_66_pred_5 = _2899;
                }
                _2674 = frontier_phi_66_pred;
                _2684 = frontier_phi_66_pred_1;
                _2682 = frontier_phi_66_pred_2;
                _2680 = frontier_phi_66_pred_3;
                _2678 = frontier_phi_66_pred_4;
                _2676 = frontier_phi_66_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2674;
                    _2827 = _2676;
                    _2828 = _2678;
                    _2829 = _2680;
                    _2830 = _2682;
                    _2831 = _2684;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
        }
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.z;
        uint _2690 = (_2688 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2690) & _2572) == 0u)
        {
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
            _2802 = _2681;
            _2804 = _2683;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
            float _2820 = _2819 * _2526;
            float _2821 = _2819 * _2527;
            float _2822 = _2819 * _2528;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2690 < ((_2688 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2954 = _2673;
                float _2955 = _2675;
                float _2956 = _2677;
                float _2957 = _2679;
                float _2958 = _2681;
                float _2959 = _2683;
                uint _2960 = _2690;
                uint _2969;
                bool _2970;
                for (;;)
                {
                    _2969 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                    _2970 = _2969 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2970)
                    {
                        frontier_phi_77_pred = _2959;
                        frontier_phi_77_pred_1 = _2958;
                        frontier_phi_77_pred_2 = _2957;
                        frontier_phi_77_pred_3 = _2956;
                        frontier_phi_77_pred_4 = _2955;
                        frontier_phi_77_pred_5 = _2954;
                    }
                    else
                    {
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        uint _3182 = _2969;
                        uint _3183;
                        vec4 _3208;
                        float _3209;
                        vec4 _3224;
                        vec3 _3236;
                        vec4 _3251;
                        vec4 _3267;
                        float _3313;
                        bool _3314;
                        for (;;)
                        {
                            uint _3193 = ((_2960 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3182));
                            _3183 = (_3182 + 4294967295u) & _3182;
                            uint _3195 = _3193 * 40u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3209 = _3208.w;
                            uint _3211 = (_3193 * 40u) + 4u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3226 = (_3193 * 40u) + 8u;
                            _3236 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x));
                            uint _3238 = (_3193 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3254 = (_3193 * 40u) + 20u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3193 * 40u) + 24u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3288 = (_3193 * 40u) + 28u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3313 = fma(_2528, _3301.z, fma(_2527, _3301.y, _3301.x * _2526)) + _3301.w;
                            _3314 = !((fma(_2528, _3282.z, fma(_2527, _3282.y, _3282.x * _2526)) + _3282.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3314)
                            {
                                float _3341 = _3208.x - _2526;
                                float _3342 = _3208.y - _2527;
                                float _3343 = _3208.z - _2528;
                                float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                                float _3347 = inversesqrt(_3344);
                                float _3348 = _3347 * _3341;
                                float _3349 = _3347 * _3342;
                                float _3350 = _3347 * _3343;
                                float _3354 = 1.0 - (_3344 / (_3209 * _3209));
                                float _4481 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3359 = sqrt(_3344) * _3224.w;
                                float _3361 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                                float _3362 = _3361 * _3361;
                                float _3365 = ((1.0 - _3362) * dot(vec3(_3348, _3349, _3350), vec3(_737, _740, _743))) + _3362;
                                float _3368 = _3359 * _3359;
                                float _3372 = (fma(_2528, _3251.z, fma(_2527, _3251.y, _3251.x * _2526)) + _3251.w) / _3313;
                                float _3373 = (fma(_2528, _3267.z, fma(_2527, _3267.y, _3267.x * _2526)) + _3267.w) / _3313;
                                float _3377 = 1.0 - dot(vec2(_3372, _3373), vec2(_3372, _3373));
                                float _4497 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3379 = _3378 * (((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3355) / ((_3368 * 0.699999988079071044921875) + 1.0));
                                float _3391 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                                float _3392 = 1.0 - _812;
                                float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                                float _3400 = _3399 * _3399;
                                float _3401 = _3400 * _3400;
                                float _3402 = _3348 - _2820;
                                float _3403 = _3349 - _2821;
                                float _3404 = _3350 - _2822;
                                float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                                float _3412 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4508 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3416 = dot(vec3(_737, _740, _743), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                                float _4519 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                                float _3424 = _3361 * _3400;
                                float _3425 = _3424 * _3424;
                                float _3431 = ((1.0 - _3425) * dot(vec3(_737, _740, _743), vec3(_3348, _3349, _3350))) + _3425;
                                float _4530 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3433 = 1.0 - _3400;
                                float _3443 = (0.5 / (((_3432 * ((_3415 * _3433) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3400) * _3415))) * _3432;
                                float _4541 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3453 = (_3378 * _3355) * (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) / ((_3423 * _3423) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3379 * _3224.y;
                                frontier_phi_83_pred_1 = _3379 * _3224.x;
                                frontier_phi_83_pred_2 = _3453 * _3236.z;
                                frontier_phi_83_pred_3 = _3453 * _3236.y;
                                frontier_phi_83_pred_4 = _3453 * _3236.x;
                                frontier_phi_83_pred_5 = _3379 * _3224.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3461 = frontier_phi_83_pred;
                            _3460 = frontier_phi_83_pred_1;
                            _3459 = frontier_phi_83_pred_2;
                            _3458 = frontier_phi_83_pred_3;
                            _3457 = frontier_phi_83_pred_4;
                            _3462 = frontier_phi_83_pred_5;
                            _3166 = _3460 + _3179;
                            _3167 = _3461 + _3180;
                            _3168 = _3462 + _3181;
                            _3163 = _3457 + _3176;
                            _3164 = _3458 + _3177;
                            _3165 = _3459 + _3178;
                            if (_3183 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3183;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3168;
                        frontier_phi_77_pred_1 = _3167;
                        frontier_phi_77_pred_2 = _3166;
                        frontier_phi_77_pred_3 = _3165;
                        frontier_phi_77_pred_4 = _3164;
                        frontier_phi_77_pred_5 = _3163;
                    }
                    _2805 = frontier_phi_77_pred;
                    _2803 = frontier_phi_77_pred_1;
                    _2801 = frontier_phi_77_pred_2;
                    _2799 = frontier_phi_77_pred_3;
                    _2797 = frontier_phi_77_pred_4;
                    _2795 = frontier_phi_77_pred_5;
                    uint _2961 = _2960 + 1u;
                    if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2954 = _2795;
                        _2955 = _2797;
                        _2956 = _2799;
                        _2957 = _2801;
                        _2958 = _2803;
                        _2959 = _2805;
                        _2960 = _2961;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2799;
                frontier_phi_58_59_ladder_1 = _2805;
                frontier_phi_58_59_ladder_2 = _2803;
                frontier_phi_58_59_ladder_3 = _2801;
                frontier_phi_58_59_ladder_4 = _2797;
                frontier_phi_58_59_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_58_59_ladder = _2677;
                frontier_phi_58_59_ladder_1 = _2683;
                frontier_phi_58_59_ladder_2 = _2681;
                frontier_phi_58_59_ladder_3 = _2679;
                frontier_phi_58_59_ladder_4 = _2675;
                frontier_phi_58_59_ladder_5 = _2673;
            }
            _2794 = frontier_phi_58_59_ladder_5;
            _2796 = frontier_phi_58_59_ladder_4;
            _2798 = frontier_phi_58_59_ladder;
            _2800 = frontier_phi_58_59_ladder_3;
            _2802 = frontier_phi_58_59_ladder_2;
            _2804 = frontier_phi_58_59_ladder_1;
        }
        float _2809 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2585 = (_2809 * _2800) + _2018;
        _2587 = (_2809 * _2802) + _2020;
        _2589 = (_2809 * _2804) + _2022;
        _2591 = ((_2794 * _780) * _2809) + _2366;
        _2593 = ((_2796 * _782) * _2809) + _2368;
        _2595 = ((_2798 * _783) * _2809) + _2370;
    }
    else
    {
        _2585 = _2018;
        _2587 = _2020;
        _2589 = _2022;
        _2591 = _2366;
        _2593 = _2368;
        _2595 = _2370;
    }
    float _4557 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4568 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4579 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2612 = ((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2585 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _796))) + ((_2591 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2613 = ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2587 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _796))) + ((_2593 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2614 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2589 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _796))) + ((_2595 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    uint _2615 = _240 + 6u;
    float _2623 = _718 / cbSceneParam._m0[86u].x;
    float _2624 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2638 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, (log2((isnan(cbSceneParam._m0[77u].w) ? _640 : (isnan(_640) ? cbSceneParam._m0[77u].w : min(_640, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2640 = _2638.x;
    float _2641 = _2638.y;
    float _2642 = _2638.z;
    float _2643 = _2638.w;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_640 > cbSceneParam._m0[78u].w)
    {
        float _2698 = isnan(_640) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _640 : min(cbSceneParam._m0[80u].w, _640));
        float _2699 = _2698 / _640;
        float _2710 = _2699 * _691;
        float _2711 = _692 * _2699;
        float _2712 = (-0.0) - _2711;
        float _2714 = _2699 * _693;
        float _2716 = (cbSceneParam._m0[77u].w * _2712) / _2698;
        float _2717 = _2716 + cbSceneParam._m0[79u].w;
        float _2718 = cbSceneParam._m0[79u].w - _2711;
        float _2724 = sqrt(((_2710 * _2710) + (_2711 * _2711)) + (_2714 * _2714));
        float _2727 = (1.0 - (cbSceneParam._m0[77u].w / _2698)) * _2724;
        float _2732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2911;
        if (abs((_2712 - _2716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2911 = ((((_2717 > 0.0) ? exp2(_2732 * _2717) : (2.0 - exp2(_2734 * _2717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2727;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : max(_2717, _2718));
            float _2857 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : min(_2717, _2718));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2911 = ((abs(_2724 / _2712) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2732 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2732 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2734 * _2866) - exp2(_2734 * _2867)) * _2855))) + (_2727 * cbSceneParam._m0[80u].z);
        }
        vec4 _2913 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, 1.0), 0.0);
        float _2922 = exp2((_2911 * (-1.44269502162933349609375)) * (1.0 - _2913.w));
        float _2923 = log2(_2922);
        float _2939 = log2(_2643);
        _2736 = (exp2(_2939 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].x)) * _2913.x) / cbSceneParam._m0[78u].x)) + _2640;
        _2738 = (exp2(_2939 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].y)) * _2913.y) / cbSceneParam._m0[78u].y)) + _2641;
        _2740 = (exp2(_2939 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].z)) * _2913.z) / cbSceneParam._m0[78u].z)) + _2642;
        _2742 = _2922 * _2643;
    }
    else
    {
        _2736 = _2640;
        _2738 = _2641;
        _2740 = _2642;
        _2742 = _2643;
    }
    bool _2949;
    vec4 _2752;
    vec4 _2774;
    float _2776;
    float _2780;
    float _2781;
    float _2782;
    float _2783;
    bool _2793;
    for (;;)
    {
        _2752 = cbMatDynParam._m0[0u];
        float _2754 = roundEven(_2752.y);
        bool _2755 = _2754 == 3.0;
        float _2756 = log2(_2742);
        float _2763 = exp2(_2756 * cbSceneParam._m0[78u].x) * _2612;
        float _2764 = exp2(_2756 * cbSceneParam._m0[78u].y) * _2613;
        float _2765 = exp2(_2756 * cbSceneParam._m0[78u].z) * _2614;
        float _2772 = _707 + (-0.5);
        _2774 = cbMtdParam._m0[1u];
        _2776 = _2774.y * _2772;
        float _2779 = (_2754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2780 = _2779 * (_2755 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2736)));
        _2781 = _2779 * (_2755 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2738)));
        _2782 = _2779 * (_2755 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2740)));
        _2783 = _2772 * 0.999000012874603271484375;
        _2793 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2793)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2783) < 0.5)
            {
                _2949 = true;
                break;
            }
        }
        uint _2890 = _756 + uint(_2752.w);
        if ((cbInstanceData._m0[_2890].w < 1.0) && ((cbInstanceData._m0[_2890].w + _2783) < 0.5))
        {
            _2949 = true;
            break;
        }
        if ((_2776 + 1.0) < _2774.x)
        {
            _2949 = true;
            break;
        }
        _2949 = false;
        break;
    }
    float _3154;
    if (_2949)
    {
        discard_state = true;
        _3154 = 0.0;
    }
    else
    {
        _3154 = cbInstanceData._m0[_2615].w;
    }
    SV_Target.x = _2780;
    SV_Target.y = _2781;
    SV_Target.z = _2782;
    SV_Target.w = _3154;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2615].w;
    discard_exit();
}


