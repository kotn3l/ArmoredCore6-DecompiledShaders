#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1290;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3898 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3909 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3920 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].y) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3931 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _428 = (_421 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _429 = (_421 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _430 = (_421 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _440;
    vec4 _468 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _545 = ((_515.z - _536) * _421) + _536;
    float _548 = ((((_515.x - _534) * _421) + _534) * 2.0) + (-1.0);
    float _549 = ((((_515.y - _535) * _421) + _535) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3942 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))));
    float _558 = _548 + ((((_488.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _559 = _549 + ((((_488.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _562 = fma(_555, _237, fma(_559, _244, _558 * _230));
    float _565 = fma(_555, _238, fma(_559, _245, _558 * _231));
    float _568 = fma(_555, _239, fma(_559, _246, _558 * _232));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _623 = (cbMtdParam._m0[19u].x + dot(vec4(_572 * _562, _572 * _565, _572 * _568, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_616 - _617) * cbMtdParam._m0[24u].z) + _617) * cbMtdParam._m0[21u].z);
    float _3953 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _631 = (_624 * ((_468.x * cbMtdParam._m0[18u].x) - _447)) + _447;
    float _632 = (_624 * ((_468.y * cbMtdParam._m0[18u].y) - _448)) + _448;
    float _633 = (_624 * ((_468.z * cbMtdParam._m0[18u].z) - _449)) + _449;
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _661 = _659.x;
    float _679 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _661) * _421) + _661;
    float _683 = ((_645.x - _679) * cbMtdParam._m0[19u].z) + _679;
    float _685 = _683 - (_683 * _624);
    float _690 = (((_488.z - _545) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _545;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _710 = (_703.x * 2.0) + (-1.0);
    float _711 = (_703.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3964 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _720 = ((_703.z - _690) * _624) + _690;
    float _730 = ((sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _555) * _624) + _555;
    float _733 = (((_710 - _558) * _624) + _558) + (cbMtdParam._m0[21u].x * _558);
    float _734 = (((_711 - _559) * _624) + _559) + (cbMtdParam._m0[21u].x * _559);
    float _736 = cbMtdParam._m0[22u].x + _588.w;
    float _739 = fma(_730, _237, fma(_734, _244, _733 * _230));
    float _742 = fma(_730, _238, fma(_734, _245, _733 * _231));
    float _745 = fma(_730, _239, fma(_734, _246, _733 * _232));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    float _750 = _749 * _739;
    float _751 = _749 * _742;
    float _752 = _749 * _745;
    float _3975 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _753 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _3997 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4008 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4019 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4030 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _758 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _772 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _823 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _813);
    float _824 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _813);
    float _825 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _813);
    float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
    float _830 = _823 * _829;
    float _831 = _824 * _829;
    float _832 = _825 * _829;
    float _838 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _839 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _857 = fma(_752, cbSceneParam._m0[5u].z, fma(_751, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _750));
    float _860 = fma(_752, cbSceneParam._m0[6u].z, fma(_751, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _750));
    float _863 = fma(_752, cbSceneParam._m0[7u].z, fma(_751, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _750));
    uint _877 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _883 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_877].x;
    float _884 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_877].y;
    float _885 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_877].z;
    float _4041 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _889 = 1.0 - _758;
    float _890 = _886 * _889;
    float _891 = _887 * _889;
    float _892 = _888 * _889;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _758;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _758;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _758;
    float _900 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    float _903 = _899 + 0.039999999105930328369140625;
    vec4 _912 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _838, cbSceneParam._m0[86u].y * _839));
    float _916 = ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * TEXCOORD_5.w) * _912.x;
    float _917 = dot(vec3(_750, _751, _752), vec3(_830, _831, _832));
    float _920 = _917 * 2.0;
    float _924 = (_920 * _750) - _830;
    float _925 = (_920 * _751) - _831;
    float _926 = (_920 * _752) - _832;
    float _930 = abs(dot(vec3(_830, _831, _832), vec3(_750, _751, _752)));
    float _4074 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _932 = sqrt(_753);
    float _945 = exp2((_932 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_932 * 3.0));
    float _951 = (1.0 - _945) * ((_932 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _952 = _945 * _932;
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_988, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980));
        float _1018 = fma(_988, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980));
        float _1022 = fma(_988, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980));
        float _1047 = _980 + _750;
        float _1048 = _984 + _751;
        float _1049 = _988 + _752;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_750, _751, _752), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4122 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_750, _751, _752), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4155 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_750, _751, _752), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4188 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_988, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980));
        float _1333 = fma(_988, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980));
        float _1337 = fma(_988, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980));
        float _1360 = _980 + _750;
        float _1361 = _984 + _751;
        float _1362 = _988 + _752;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_750, _751, _752), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4251 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_750, _751, _752), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4284 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_750, _751, _752), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4317 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1290;
        _1599 = _1290;
        _1600 = _1290;
        _1601 = _1290;
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1302)) + _1302;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1303)) + _1303;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1304)) + _1304;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _924 * 0.5;
    float _1667 = _925 * 0.5;
    float _1668 = _926 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_988, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_988, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_988, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_926, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924));
        float _1796 = fma(_926, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924));
        float _1799 = fma(_926, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1827 = frontier_phi_14_12_ladder;
        }
        float _1998;
        if (_1796 > 0.0)
        {
            _1998 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1998 = frontier_phi_23_19_ladder;
        }
        float _2293;
        if (_1799 > 0.0)
        {
            _2293 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2293 = frontier_phi_35_30_ladder;
        }
        float _2295 = isnan(_1998) ? _1827 : (isnan(_1827) ? _1998 : min(_1827, _1998));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1793) + _1782;
        float _2301 = (_2296 * _1796) + _1786;
        float _2302 = (_2296 * _1799) + _1790;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_13_35_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_13_35_ladder_2;
        _1817 = frontier_phi_13_35_ladder_1;
        _1819 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_924, _925, _926), _1735);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_988, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_988, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_988, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_926, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924));
        float _1891 = fma(_926, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924));
        float _1894 = fma(_926, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924));
        float _2003;
        if (_1888 > 0.0)
        {
            _2003 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2003 = frontier_phi_25_21_ladder;
        }
        float _2320;
        if (_1891 > 0.0)
        {
            _2320 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2320 = frontier_phi_37_32_ladder;
        }
        float _2658;
        if (_1894 > 0.0)
        {
            _2658 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2658 = frontier_phi_47_44_ladder;
        }
        float _2660 = isnan(_2320) ? _2003 : (isnan(_2003) ? _2320 : min(_2003, _2320));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _1888) + _1877;
        float _2666 = (_2661 * _1891) + _1881;
        float _2667 = (_2661 * _1894) + _1885;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_22_47_ladder = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2789.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2789.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_22_47_ladder_2;
        _1915 = frontier_phi_22_47_ladder_1;
        _1917 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_924, _925, _926), _1824);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1930 = (((_951 * _900) + _952) * _916) * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1932 = (((_951 * _902) + _952) * _916) * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1934 = (((_951 * _903) + _952) * _916) * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1990 = _1977 / _1989;
    float _1991 = _1981 / _1989;
    float _1992 = _1985 / _1989;
    float _2139;
    float _2140;
    float _2141;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2019 = ((uint(_1992 > cbSceneParam._m0[59u].y) + uint(_1992 > cbSceneParam._m0[59u].x)) + uint(_1992 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2020 = _2019 + 43u;
        uint _2028 = _2019 + 44u;
        uint _2036 = _2019 + 45u;
        uint _2044 = _2019 + 46u;
        float _2055 = fma(_1989, cbSceneParam._m0[_2020].w, fma(_1985, cbSceneParam._m0[_2020].z, fma(_1981, cbSceneParam._m0[_2020].y, _1977 * cbSceneParam._m0[_2020].x)));
        float _2059 = fma(_1989, cbSceneParam._m0[_2028].w, fma(_1985, cbSceneParam._m0[_2028].z, fma(_1981, cbSceneParam._m0[_2028].y, _1977 * cbSceneParam._m0[_2028].x)));
        float _2067 = fma(_1989, cbSceneParam._m0[_2044].w, fma(_1985, cbSceneParam._m0[_2044].z, fma(_1981, cbSceneParam._m0[_2044].y, _1977 * cbSceneParam._m0[_2044].x)));
        float _2072 = cbSceneParam._m0[33u].z * _2067;
        float _2074 = cbSceneParam._m0[33u].w * _2067;
        float _2077 = fma(_1989, cbSceneParam._m0[_2036].w, fma(_1985, cbSceneParam._m0[_2036].z, fma(_1981, cbSceneParam._m0[_2036].y, _1977 * cbSceneParam._m0[_2036].x))) / _2067;
        float _2125 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
        float _4443 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2132 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2055) / _2067, (_2074 + _2059) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 + _2055) / _2067, (_2059 - _2072) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2072) / _2067, (_2059 - _2074) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2074) / _2067, (_2072 + _2059) / _2067), _2077), 0.0)).x), vec4(0.25)));
        _2139 = 1.0 - (_2132 * cbSceneParam._m0[34u].x);
        _2140 = 1.0 - (_2132 * cbSceneParam._m0[34u].y);
        _2141 = 1.0 - (_2132 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2139 = 1.0;
        _2140 = 1.0;
        _2141 = 1.0;
    }
    float _2205;
    float _2207;
    float _2209;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2193 = fma(_1989, cbSceneParam._m0[63u].w, fma(_1985, cbSceneParam._m0[63u].z, fma(_1981, cbSceneParam._m0[63u].y, _1977 * cbSceneParam._m0[63u].x)));
        float _2194 = fma(_1989, cbSceneParam._m0[60u].w, fma(_1985, cbSceneParam._m0[60u].z, fma(_1981, cbSceneParam._m0[60u].y, _1977 * cbSceneParam._m0[60u].x))) / _2193;
        float _2195 = fma(_1989, cbSceneParam._m0[61u].w, fma(_1985, cbSceneParam._m0[61u].z, fma(_1981, cbSceneParam._m0[61u].y, _1977 * cbSceneParam._m0[61u].x))) / _2193;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2194 >= cbSceneParam._m0[64u].x) && (_2195 >= cbSceneParam._m0[64u].y)) && (_2194 <= cbSceneParam._m0[64u].z)) && (_2195 <= cbSceneParam._m0[64u].w))
        {
            float _2333 = fma(_1989, cbSceneParam._m0[62u].w, fma(_1985, cbSceneParam._m0[62u].z, fma(_1981, cbSceneParam._m0[62u].y, _1977 * cbSceneParam._m0[62u].x))) / _2193;
            float _2337 = isnan(cbSceneParam._m0[41u].w) ? _2333 : (isnan(_2333) ? cbSceneParam._m0[41u].w : max(_2333, cbSceneParam._m0[41u].w));
            float _2380 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
            float _4459 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
            float _2387 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2194, cbSceneParam._m0[33u].w + _2195), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2194, _2195 - cbSceneParam._m0[33u].z), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].z, _2195 - cbSceneParam._m0[33u].w), _2337), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2195), _2337), 0.0)).x), vec4(0.25)));
            float _2391 = 1.0 - (_2387 * cbSceneParam._m0[34u].x);
            float _2392 = 1.0 - (_2387 * cbSceneParam._m0[34u].y);
            float _2393 = 1.0 - (_2387 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_34_33_ladder_1 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
            frontier_phi_34_33_ladder_2 = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
        }
        else
        {
            frontier_phi_34_33_ladder = _2141;
            frontier_phi_34_33_ladder_1 = _2140;
            frontier_phi_34_33_ladder_2 = _2139;
        }
        _2205 = frontier_phi_34_33_ladder_2;
        _2207 = frontier_phi_34_33_ladder_1;
        _2209 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2205 = _2139;
        _2207 = _2140;
        _2209 = _2141;
    }
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _916 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2252 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2256 = _2216 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_750, _751, _752));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_750, _751, _752));
    float _4495 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4506 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2233].x * _2239) * _2277) + (((cbLight._m0[_2243].x * _2205) * _2252) * _2275);
    float _2285 = ((_2239 * cbLight._m0[_2233].y) * _2277) + (((cbLight._m0[_2243].y * _2207) * _2252) * _2275);
    float _2286 = ((_2239 * cbLight._m0[_2233].z) * _2277) + (((cbLight._m0[_2243].z * _2209) * _2252) * _2275);
    uvec4 _2290 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2292 = _2290.x == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2292)
    {
        _2394 = _2284;
        _2396 = _2285;
        _2398 = _2286;
    }
    else
    {
        uint _2402 = _2216 + 6u;
        float _2418 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4517 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2421 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2394 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2284;
        _2396 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2285;
        _2398 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2286;
    }
    bool _2401 = _2290.y == 0u;
    float _2456;
    float _2458;
    float _2460;
    if (_2401)
    {
        _2456 = _2394;
        _2458 = _2396;
        _2460 = _2398;
    }
    else
    {
        uint _2629 = _2216 + 7u;
        float _2645 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_750, _751, _752)) * 0.5) + 0.5;
        float _2646 = _2645 * _2645;
        float _4533 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2647 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2648 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2456 = (((cbLight._m0[_2629].x * 0.3183098733425140380859375) * _2647) * _2648) + _2394;
        _2458 = (((cbLight._m0[_2629].y * 0.3183098733425140380859375) * _2647) * _2648) + _2396;
        _2460 = (((cbLight._m0[_2629].z * 0.3183098733425140380859375) * _2647) * _2648) + _2398;
    }
    uint _2463 = _2216 + 8u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _753) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2216].x + _830;
    float _2479 = cbLight._m0[_2216].y + _831;
    float _2480 = cbLight._m0[_2216].z + _832;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2216].xyz));
    float _4549 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2492 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2493 = dot(vec3(_750, _751, _752), vec3(_2485, _2486, _2487));
    float _4571 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2485, _2486, _2487));
    float _4582 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2477 * _2477;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2514 = 0.959999978542327880859375 - _897;
    float _2516 = 0.959999978542327880859375 - _898;
    float _2517 = 0.959999978542327880859375 - _899;
    float _2524 = 1.0 - _2477;
    float _2535 = (0.5 / (((_2492 * ((_2491 * _2524) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2524) + _2477) * _2491))) * _2491;
    float _4593 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2537 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    uint _2551 = _2216 + 9u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _753) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2256].x + _830;
    float _2565 = cbLight._m0[_2256].y + _831;
    float _2566 = cbLight._m0[_2256].z + _832;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2256].xyz));
    float _4604 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2578 = dot(vec3(_750, _751, _752), vec3(_2571, _2572, _2573));
    float _4615 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2582 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2571, _2572, _2573));
    float _4626 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2586 = _2563 * _2563;
    float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
    float _2597 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2604 = 1.0 - _2563;
    float _2614 = (0.5 / (((_2492 * ((_2577 * _2604) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2604) + _2563) * _2577))) * _2577;
    float _4637 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
    float _2626 = (((((_2597 * _2514) + _900) * cbLight._m0[_2551].x) * _2616) * _2239) + ((((cbLight._m0[_2463].x * _2205) * ((_2513 * _2514) + _900)) * _2537) * _2252);
    float _2627 = (((((_2597 * _2516) + _902) * cbLight._m0[_2551].y) * _2616) * _2239) + ((((cbLight._m0[_2463].y * _2207) * ((_2513 * _2516) + _902)) * _2537) * _2252);
    float _2628 = (((((_2597 * _2517) + _903) * cbLight._m0[_2551].z) * _2616) * _2239) + ((((cbLight._m0[_2463].z * _2209) * ((_2513 * _2517) + _903)) * _2537) * _2252);
    float _2684;
    float _2686;
    float _2688;
    if (_2292)
    {
        _2684 = _2626;
        _2686 = _2627;
        _2688 = _2628;
    }
    else
    {
        uint _2690 = _2216 + 2u;
        uint _2694 = _2216 + 10u;
        float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2690].w)) * _753) * 0.949999988079071044921875);
        float _2709 = _2708 * _2708;
        float _2710 = cbLight._m0[_2690].x + _830;
        float _2711 = cbLight._m0[_2690].y + _831;
        float _2712 = cbLight._m0[_2690].z + _832;
        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
        float _2717 = _2716 * _2710;
        float _2718 = _2716 * _2711;
        float _2719 = _2716 * _2712;
        float _2720 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2690].xyz));
        float _4648 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2724 = dot(vec3(_750, _751, _752), vec3(_2717, _2718, _2719));
        float _4659 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2728 = dot(vec3(cbLight._m0[_2690].xyz), vec3(_2717, _2718, _2719));
        float _4670 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2732 = _2709 * _2709;
        float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
        float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2750 = 1.0 - _2709;
        float _2760 = (0.5 / (((_2492 * ((_2723 * _2750) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2750) + _2709) * _2723))) * _2723;
        float _4681 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2684 = (((((_2743 * _2514) + _900) * cbLight._m0[_2694].x) * _2762) * _2763) + _2626;
        _2686 = (((((_2743 * _2516) + _902) * cbLight._m0[_2694].y) * _2762) * _2763) + _2627;
        _2688 = (((((_2743 * _2517) + _903) * cbLight._m0[_2694].z) * _2762) * _2763) + _2628;
    }
    float _2794;
    float _2796;
    float _2798;
    if (_2401)
    {
        _2794 = _2684;
        _2796 = _2686;
        _2798 = _2688;
    }
    else
    {
        uint _2805 = _2216 + 3u;
        uint _2809 = _2216 + 11u;
        float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2805].w)) * _753) * 0.949999988079071044921875);
        float _2824 = _2823 * _2823;
        float _2825 = cbLight._m0[_2805].x + _830;
        float _2826 = cbLight._m0[_2805].y + _831;
        float _2827 = cbLight._m0[_2805].z + _832;
        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
        float _2832 = _2831 * _2825;
        float _2833 = _2831 * _2826;
        float _2834 = _2831 * _2827;
        float _2835 = dot(vec3(_750, _751, _752), vec3(cbLight._m0[_2805].xyz));
        float _4697 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2839 = dot(vec3(_750, _751, _752), vec3(_2832, _2833, _2834));
        float _4708 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2843 = dot(vec3(cbLight._m0[_2805].xyz), vec3(_2832, _2833, _2834));
        float _4719 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2847 = _2824 * _2824;
        float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
        float _2858 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2865 = 1.0 - _2824;
        float _2875 = (0.5 / (((_2492 * ((_2838 * _2865) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2865) + _2824) * _2838))) * _2838;
        float _4730 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2794 = (((((_2858 * _2514) + _900) * cbLight._m0[_2809].x) * _2877) * _2878) + _2684;
        _2796 = (((((_2858 * _2516) + _902) * cbLight._m0[_2809].y) * _2877) * _2878) + _2686;
        _2798 = (((((_2858 * _2517) + _903) * cbLight._m0[_2809].z) * _2877) * _2878) + _2688;
    }
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_2214.y == 0u)
    {
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.x;
        uint _2911 = uint((float(_2899.y) * floor(float(uint(cbSceneParam._m0[85u].y * _839) / _2900))) + floor(float(uint(cbSceneParam._m0[85u].x * _838) / _2900)));
        float _2921 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2922 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        uint _2925 = uint(isnan(14.0) ? _2922 : (isnan(_2922) ? 14.0 : min(_2922, 14.0)));
        uvec4 _2930 = texelFetch(g_lightClusterGridBuffer, int(((_2925 << 2u) + (_2911 << 6u)) >> 2u));
        uint _2931 = _2930.x;
        uint _2932 = _2899.z;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((((1u << ((_2932 >> 4u) & 15u)) + 4294967295u) & _2931) == 0u) || ((_2932 & 240u) == 0u))
        {
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
        }
        else
        {
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            uint _3162 = 0u;
            uint _3171;
            bool _3172;
            for (;;)
            {
                _3171 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                _3172 = _3171 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3172)
                {
                    frontier_phi_66_pred = _3161;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3171;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3162 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _1990;
                        float _3347 = _3306.y - _1991;
                        float _3348 = _3306.z - _1992;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_857, _860, _863), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4756 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _1990;
                        float _3382 = (-0.0) - _1991;
                        float _3383 = (-0.0) - _1992;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3397 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _932;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_857, _860, _863), vec3(_3388, _3389, _3390));
                        float _4772 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3422 = dot(vec3(_857, _860, _863), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4783 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3366 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3356) + _3431;
                        float _4794 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4805 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3429 * _3429) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3215 = (_3377 * _3325.x) + _3283;
                        _3216 = (_3377 * _3325.y) + _3284;
                        _3217 = (_3377 * _3325.z) + _3285;
                        _3212 = (_3457 * _3342.x) + _3280;
                        _3213 = (_3457 * _3342.y) + _3281;
                        _3214 = (_3457 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_66_pred = _3217;
                    frontier_phi_66_pred_1 = _3216;
                    frontier_phi_66_pred_2 = _3215;
                    frontier_phi_66_pred_3 = _3214;
                    frontier_phi_66_pred_4 = _3213;
                    frontier_phi_66_pred_5 = _3212;
                }
                _3022 = frontier_phi_66_pred;
                _3020 = frontier_phi_66_pred_1;
                _3018 = frontier_phi_66_pred_2;
                _3016 = frontier_phi_66_pred_3;
                _3014 = frontier_phi_66_pred_4;
                _3012 = frontier_phi_66_pred_5;
                uint _3163 = _3162 + 1u;
                if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3156 = _3012;
                    _3157 = _3014;
                    _3158 = _3016;
                    _3159 = _3018;
                    _3160 = _3020;
                    _3161 = _3022;
                    _3162 = _3163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
        }
        uvec4 _3025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3026 = _3025.z;
        uint _3028 = (_3026 >> 8u) & 15u;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((4294967295u << _3028) & _2931) == 0u)
        {
            _3124 = _3011;
            _3126 = _3013;
            _3128 = _3015;
            _3130 = _3017;
            _3132 = _3019;
            _3134 = _3021;
        }
        else
        {
            float _3149 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float _3150 = _3149 * _1990;
            float _3151 = _3149 * _1991;
            float _3152 = _3149 * _1992;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3028 < ((_3026 >> 12u) & 15u))
            {
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3263 = _3011;
                float _3264 = _3013;
                float _3265 = _3015;
                float _3266 = _3017;
                float _3267 = _3019;
                float _3268 = _3021;
                uint _3269 = _3028;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3279)
                    {
                        frontier_phi_72_pred = _3268;
                        frontier_phi_72_pred_1 = _3267;
                        frontier_phi_72_pred_2 = _3266;
                        frontier_phi_72_pred_3 = _3265;
                        frontier_phi_72_pred_4 = _3264;
                        frontier_phi_72_pred_5 = _3263;
                    }
                    else
                    {
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        uint _3481 = _3278;
                        uint _3482;
                        vec4 _3507;
                        float _3508;
                        vec4 _3523;
                        vec3 _3535;
                        vec4 _3550;
                        vec4 _3565;
                        float _3611;
                        bool _3612;
                        for (;;)
                        {
                            uint _3492 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3481));
                            _3482 = (_3481 + 4294967295u) & _3481;
                            uint _3494 = _3492 * 40u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3508 = _3507.w;
                            uint _3510 = (_3492 * 40u) + 4u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3492 * 40u) + 8u;
                            _3535 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x));
                            uint _3537 = (_3492 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3492 * 40u) + 20u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3492 * 40u) + 24u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3586 = (_3492 * 40u) + 28u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3611 = fma(_1992, _3599.z, fma(_1991, _3599.y, _3599.x * _1990)) + _3599.w;
                            _3612 = !((fma(_1992, _3580.z, fma(_1991, _3580.y, _3580.x * _1990)) + _3580.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3612)
                            {
                                float _3639 = _3507.x - _1990;
                                float _3640 = _3507.y - _1991;
                                float _3641 = _3507.z - _1992;
                                float _3642 = dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641));
                                float _3645 = inversesqrt(_3642);
                                float _3646 = _3645 * _3639;
                                float _3647 = _3645 * _3640;
                                float _3648 = _3645 * _3641;
                                float _3652 = 1.0 - (_3642 / (_3508 * _3508));
                                float _4816 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3657 = sqrt(_3642) * _3523.w;
                                float _3659 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                                float _3660 = _3659 * _3659;
                                float _3663 = ((1.0 - _3660) * dot(vec3(_3646, _3647, _3648), vec3(_857, _860, _863))) + _3660;
                                float _3666 = _3657 * _3657;
                                float _3670 = (fma(_1992, _3550.z, fma(_1991, _3550.y, _3550.x * _1990)) + _3550.w) / _3611;
                                float _3671 = (fma(_1992, _3565.z, fma(_1991, _3565.y, _3565.x * _1990)) + _3565.w) / _3611;
                                float _3675 = 1.0 - dot(vec2(_3670, _3671), vec2(_3670, _3671));
                                float _4832 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3677 = _3676 * (((isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0))) * _3653) / ((_3666 * 0.699999988079071044921875) + 1.0));
                                float _3689 = exp2(log2(1.0 / ((_3666 * 3.5) + 5.0)) * 0.25);
                                float _3690 = 1.0 - _932;
                                float _3697 = sqrt(1.0 - ((1.0 - (_3690 * _3690)) * (1.0 - (_3689 * _3689))));
                                float _3698 = _3697 * _3697;
                                float _3699 = _3698 * _3698;
                                float _3700 = _3646 - _3150;
                                float _3701 = _3647 - _3151;
                                float _3702 = _3648 - _3152;
                                float _3706 = inversesqrt(dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702)));
                                float _3710 = dot(vec3(_857, _860, _863), vec3((-0.0) - _3150, (-0.0) - _3151, (-0.0) - _3152));
                                float _4843 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3714 = dot(vec3(_857, _860, _863), vec3(_3706 * _3700, _3706 * _3701, _3706 * _3702));
                                float _4854 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3721 = ((_3717 * _3717) * (_3699 + (-1.0))) + 1.0;
                                float _3722 = _3659 * _3698;
                                float _3723 = _3722 * _3722;
                                float _3729 = ((1.0 - _3723) * dot(vec3(_857, _860, _863), vec3(_3646, _3647, _3648))) + _3723;
                                float _4865 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3731 = 1.0 - _3698;
                                float _3741 = (0.5 / (((_3730 * ((_3713 * _3731) + _3698)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3698) * _3713))) * _3730;
                                float _4876 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3751 = (_3676 * _3653) * (((_3699 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3721 * _3721) * ((_3666 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3677 * _3523.y;
                                frontier_phi_78_pred_1 = _3677 * _3523.x;
                                frontier_phi_78_pred_2 = _3751 * _3535.z;
                                frontier_phi_78_pred_3 = _3751 * _3535.y;
                                frontier_phi_78_pred_4 = _3751 * _3535.x;
                                frontier_phi_78_pred_5 = _3677 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_78_pred;
                            _3758 = frontier_phi_78_pred_1;
                            _3757 = frontier_phi_78_pred_2;
                            _3756 = frontier_phi_78_pred_3;
                            _3755 = frontier_phi_78_pred_4;
                            _3760 = frontier_phi_78_pred_5;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            if (_3482 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3482;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3467;
                        frontier_phi_72_pred_1 = _3466;
                        frontier_phi_72_pred_2 = _3465;
                        frontier_phi_72_pred_3 = _3464;
                        frontier_phi_72_pred_4 = _3463;
                        frontier_phi_72_pred_5 = _3462;
                    }
                    _3135 = frontier_phi_72_pred;
                    _3133 = frontier_phi_72_pred_1;
                    _3131 = frontier_phi_72_pred_2;
                    _3129 = frontier_phi_72_pred_3;
                    _3127 = frontier_phi_72_pred_4;
                    _3125 = frontier_phi_72_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3125;
                        _3264 = _3127;
                        _3265 = _3129;
                        _3266 = _3131;
                        _3267 = _3133;
                        _3268 = _3135;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3135;
                frontier_phi_60_61_ladder_1 = _3133;
                frontier_phi_60_61_ladder_2 = _3129;
                frontier_phi_60_61_ladder_3 = _3127;
                frontier_phi_60_61_ladder_4 = _3125;
                frontier_phi_60_61_ladder_5 = _3131;
            }
            else
            {
                frontier_phi_60_61_ladder = _3021;
                frontier_phi_60_61_ladder_1 = _3019;
                frontier_phi_60_61_ladder_2 = _3015;
                frontier_phi_60_61_ladder_3 = _3013;
                frontier_phi_60_61_ladder_4 = _3011;
                frontier_phi_60_61_ladder_5 = _3017;
            }
            _3124 = frontier_phi_60_61_ladder_4;
            _3126 = frontier_phi_60_61_ladder_3;
            _3128 = frontier_phi_60_61_ladder_2;
            _3130 = frontier_phi_60_61_ladder_5;
            _3132 = frontier_phi_60_61_ladder_1;
            _3134 = frontier_phi_60_61_ladder;
        }
        float _3139 = isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0));
        _2944 = (_3139 * _3130) + _2456;
        _2946 = (_3139 * _3132) + _2458;
        _2948 = (_3139 * _3134) + _2460;
        _2950 = ((_3124 * _900) * _3139) + _2794;
        _2952 = ((_3126 * _902) * _3139) + _2796;
        _2954 = ((_3128 * _903) * _3139) + _2798;
    }
    else
    {
        _2944 = _2456;
        _2946 = _2458;
        _2948 = _2460;
        _2950 = _2794;
        _2952 = _2796;
        _2954 = _2798;
    }
    float _4892 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4903 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4914 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    uint _2974 = _270 + 6u;
    float _2982 = _838 / cbSceneParam._m0[86u].x;
    float _2983 = _839 / cbSceneParam._m0[86u].y;
    vec4 _2997 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, (log2((isnan(cbSceneParam._m0[77u].w) ? _772 : (isnan(_772) ? cbSceneParam._m0[77u].w : min(_772, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2999 = _2997.x;
    float _3000 = _2997.y;
    float _3001 = _2997.z;
    float _3002 = _2997.w;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    if (_772 > cbSceneParam._m0[78u].w)
    {
        float _3036 = isnan(_772) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _772 : min(cbSceneParam._m0[80u].w, _772));
        float _3037 = _3036 / _772;
        float _3048 = _3037 * _823;
        float _3049 = _824 * _3037;
        float _3050 = (-0.0) - _3049;
        float _3052 = _3037 * _825;
        float _3054 = (cbSceneParam._m0[77u].w * _3050) / _3036;
        float _3055 = _3054 + cbSceneParam._m0[79u].w;
        float _3056 = cbSceneParam._m0[79u].w - _3049;
        float _3062 = sqrt(((_3048 * _3048) + (_3049 * _3049)) + (_3052 * _3052));
        float _3065 = (1.0 - (cbSceneParam._m0[77u].w / _3036)) * _3062;
        float _3070 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3072 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_3050 - _3054) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_3055 > 0.0) ? exp2(_3070 * _3055) : (2.0 - exp2(_3072 * _3055))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3065;
        }
        else
        {
            float _3185 = 1.0 / cbSceneParam._m0[80u].x;
            float _3186 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : max(_3055, _3056));
            float _3187 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : min(_3055, _3056));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            _3225 = ((abs(_3062 / _3050) * cbSceneParam._m0[80u].y) * ((((_3196 - _3197) * 2.0) - ((exp2(_3070 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)))) - exp2(_3070 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))))) * _3185)) - ((exp2(_3072 * _3196) - exp2(_3072 * _3197)) * _3185))) + (_3065 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_3002);
        _3074 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _2999;
        _3076 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _3000;
        _3078 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _3001;
        _3080 = _3236 * _3002;
    }
    else
    {
        _3074 = _2999;
        _3076 = _3000;
        _3078 = _3001;
        _3080 = _3002;
    }
    float _3092 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3093 = _3092 == 3.0;
    float _3094 = log2(_3080);
    float _3101 = exp2(_3094 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2944 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _916))) + ((_2950 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3102 = exp2(_3094 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2946 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _916))) + ((_2952 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3103 = exp2(_3094 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2948 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _916))) + ((_2954 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1724)) * cbPerFrame._m0[3u].x));
    float _3112 = (_3092 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3112 * (_3093 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.y = _3112 * (_3093 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3076)));
    SV_Target.z = _3112 * (_3093 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3078)));
    SV_Target.w = cbInstanceData._m0[_2974].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2974].w;
}


