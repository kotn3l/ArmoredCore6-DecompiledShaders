#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1406;
float _3808;
float _3809;
float _3810;
float _3811;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3820 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _494 = _490.z;
    float _503 = ((_473.z - _494) * _398) + _494;
    float _506 = ((((_473.x - _492) * _398) + _492) * 2.0) + (-1.0);
    float _507 = ((((_473.y - _493) * _398) + _493) * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _3831 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _513 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    float _516 = _506 + ((((_446.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _517 = _507 + ((((_446.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _520 = fma(_513, _249, fma(_517, _256, _516 * _242));
    float _523 = fma(_513, _250, fma(_517, _257, _516 * _243));
    float _526 = fma(_513, _251, fma(_517, _258, _516 * _244));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _581 = (cbMtdParam._m0[19u].x + dot(vec4(_530 * _520, _530 * _523, _530 * _526, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_574 - _575) * cbMtdParam._m0[24u].z) + _575) * cbMtdParam._m0[21u].z);
    float _3842 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _584 = (-0.0) - cbMtdParam._m0[24u].x;
    float _586 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
    float _594 = _582 - ((_582 * TEXCOORD_8.x) * _587);
    float _595 = _582 - ((_582 * TEXCOORD_8.y) * _587);
    float _596 = _582 - ((_582 * TEXCOORD_8.z) * _587);
    float _603 = (_594 * ((_426.x * cbMtdParam._m0[18u].x) - _405)) + _405;
    float _604 = (_595 * ((_426.y * cbMtdParam._m0[18u].y) - _406)) + _406;
    float _605 = (_596 * ((_426.z * cbMtdParam._m0[18u].z) - _407)) + _407;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _619 = _617.x;
    float _620 = 1.0 - _619;
    float _648 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_619 - _620) * cbMtdParam._m0[24u].w) + _620) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3863 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _657 = ((((cbMtdParam._m0[10u].x - _603) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _649) + _603;
    float _658 = ((((cbMtdParam._m0[10u].y - _604) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _649) + _604;
    float _659 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _605)) * _649) + _605;
    vec4 _685 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _687 = _685.x;
    float _705 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _687) * _398) + _687;
    float _709 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _705) * cbMtdParam._m0[19u].z) + _705;
    float _711 = _709 - (_709 * _594);
    float _713 = _711 - (_711 * _649);
    float _718 = (((_446.z - _503) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _503;
    vec4 _732 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _739 = (_732.x * 2.0) + (-1.0);
    float _740 = (_732.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _3874 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _749 = ((_732.z - _718) * _594) + _718;
    float _752 = ((cbMtdParam._m0[23u].y - _749) * _649) + _749;
    vec4 _771 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _777 = (_771.x * 2.0) + (-1.0);
    float _778 = (_771.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _3885 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _794 = ((sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _513) * _596) + _513;
    float _797 = (((_739 - _516) * _594) + _516) + (cbMtdParam._m0[21u].x * _516);
    float _798 = (((_740 - _517) * _595) + _517) + (cbMtdParam._m0[21u].x * _517);
    float _809 = (((_777 - _797) + (_797 * cbMtdParam._m0[22u].z)) * _649) + _797;
    float _810 = (((_778 - _798) + (_798 * cbMtdParam._m0[22u].z)) * _649) + _798;
    float _811 = (_649 * (sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _794)) + _794;
    float _813 = cbMtdParam._m0[22u].x + _546.w;
    float _816 = fma(_811, _249, fma(_810, _256, _809 * _242));
    float _819 = fma(_811, _250, fma(_810, _257, _809 * _243));
    float _822 = fma(_811, _251, fma(_810, _258, _809 * _244));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    float _827 = _826 * _816;
    float _828 = _826 * _819;
    float _829 = _826 * _822;
    float _3896 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _830 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _3918 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3929 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3940 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3951 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _835 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _899 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _889);
    float _900 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _889);
    float _901 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _889);
    float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
    float _906 = _899 * _905;
    float _907 = _900 * _905;
    float _908 = _901 * _905;
    vec4 _913 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _915 = _913.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1087 = sqrt(((_899 * _899) + (_900 * _900)) + (_901 * _901));
        float _1093 = (cbMatDynParam._m0[5u].x * _1087) + cbMatDynParam._m0[5u].y;
        float _3962 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1098 = (cbMatDynParam._m0[5u].z * _1087) + cbMatDynParam._m0[5u].w;
        float _3973 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) - _1094)) + _1094) < ((_915 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _926 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _927 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _945 = fma(_829, cbSceneParam._m0[5u].z, fma(_828, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _827));
    float _948 = fma(_829, cbSceneParam._m0[6u].z, fma(_828, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _827));
    float _951 = fma(_829, cbSceneParam._m0[7u].z, fma(_828, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _827));
    uint _964 = _261 + 9u;
    uint _965 = _964 + uint(cbMatDynParam._m0[0u].w);
    float _971 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_965].x;
    float _972 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_965].y;
    float _973 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_965].z;
    float _3984 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _977 = 1.0 - _835;
    float _978 = _974 * _977;
    float _979 = _975 * _977;
    float _980 = _976 * _977;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _835;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _835;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _835;
    float _988 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    float _991 = _987 + 0.039999999105930328369140625;
    vec4 _1000 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _926, cbSceneParam._m0[86u].y * _927));
    float _1004 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * TEXCOORD_5.w) * _1000.x;
    float _1005 = dot(vec3(_827, _828, _829), vec3(_906, _907, _908));
    float _1008 = _1005 * 2.0;
    float _1012 = (_1008 * _827) - _906;
    float _1013 = (_1008 * _828) - _907;
    float _1014 = (_1008 * _829) - _908;
    float _1018 = abs(dot(vec3(_906, _907, _908), vec3(_827, _828, _829)));
    float _4017 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1020 = sqrt(_830);
    float _1033 = exp2((_1020 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1020 * 3.0));
    float _1039 = (1.0 - _1033) * ((_1020 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1040 = _1033 * _1020;
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1134 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1138 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1163 = _1068 + _827;
        float _1164 = _1072 + _828;
        float _1165 = _1076 + _829;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1130;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1134;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1138;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_827, _828, _829), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4065 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_827, _828, _829), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4098 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_827, _828, _829), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4131 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1448 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1452 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1456 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1479 = _1068 + _827;
        float _1480 = _1072 + _828;
        float _1481 = _1076 + _829;
        float _1491 = fma(_1481, cbModelParam._m0[30u].z, fma(_1480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1479)) - _1448;
        float _1492 = fma(_1481, cbModelParam._m0[31u].z, fma(_1480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1479)) - _1452;
        float _1493 = fma(_1481, cbModelParam._m0[32u].z, fma(_1480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1479)) - _1456;
        float _1497 = inversesqrt(dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493)));
        float _1510 = ((_1497 * _1491) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1448 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1497 * _1492) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1452 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1497 * _1493) / cbModelParam._m0[35u].z) + ((((((_1456 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        float _1547 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1514.x + (-0.5));
        float _1549 = _1547 * (_1514.y + (-0.5));
        float _1550 = _1547 * (_1514.z + (-0.5));
        float _1557 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1521.x + (-0.5));
        float _1559 = _1557 * (_1521.y + (-0.5));
        float _1560 = _1557 * (_1521.z + (-0.5));
        float _1567 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1528.x + (-0.5));
        float _1569 = _1567 * (_1528.y + (-0.5));
        float _1570 = _1567 * (_1528.z + (-0.5));
        float _1577 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1535.x + (-0.5));
        float _1579 = _1577 * (_1535.y + (-0.5));
        float _1580 = _1577 * (_1535.z + (-0.5));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = _1548 * 0.5;
        float _1585 = _1558 * 0.5;
        float _1586 = _1568 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_827, _828, _829), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4194 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1611 + 1.0))) + _1616) * _1581;
        float _1626 = _1549 * 0.5;
        float _1627 = _1559 * 0.5;
        float _1628 = _1569 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_827, _828, _829), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4227 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1653 + 1.0))) + _1658) * _1582;
        float _1668 = _1550 * 0.5;
        float _1669 = _1560 * 0.5;
        float _1670 = _1570 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_827, _828, _829), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4260 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1695 + 1.0))) + _1700) * _1583;
        _1717 = _1550;
        _1718 = _1549;
        _1719 = _1548;
        _1720 = _1560;
        _1721 = _1559;
        _1722 = _1558;
        _1723 = _1570;
        _1724 = _1569;
        _1725 = _1568;
        _1726 = _1583;
        _1727 = _1582;
        _1728 = _1581;
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
    }
    else
    {
        _1717 = _1406;
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = _1406;
        _1726 = _1406;
        _1727 = _1406;
        _1728 = _1406;
        _1729 = 0.0;
        _1730 = 0.0;
        _1731 = 0.0;
    }
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1418)) + _1418;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1419)) + _1419;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1420)) + _1420;
    float _1764 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1741));
    float _1785 = _1012 * 0.5;
    float _1786 = _1013 * 0.5;
    float _1787 = _1014 * 0.5;
    float _1788 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1791 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1794 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1801 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1805 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1809 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1816 = dot(vec4(cbModelParam._m0[39u]), vec4(_1785, _1786, _1787, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1830 = dot(vec4(cbModelParam._m0[40u]), vec4(_1785, _1786, _1787, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1843 = (_1839 * cbModelParam._m0[1u].x) + (_1828 * (1.0 - cbModelParam._m0[1u].x));
    float _1853 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _830);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1853 : min(cbModelParam._m0[25u].z, _1853));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1901 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1905 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1909 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1912 = fma(_1014, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012));
        float _1915 = fma(_1014, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012));
        float _1918 = fma(_1014, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012));
        float _1946;
        if (_1912 > 0.0)
        {
            _1946 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1946 = frontier_phi_17_15_ladder;
        }
        float _2169;
        if (_1915 > 0.0)
        {
            _2169 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2169 = frontier_phi_26_22_ladder;
        }
        float _2426;
        if (_1918 > 0.0)
        {
            _2426 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2426 = frontier_phi_38_33_ladder;
        }
        float _2428 = isnan(_2169) ? _1946 : (isnan(_1946) ? _2169 : min(_1946, _2169));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1912) + _1901;
        float _2434 = (_2429 * _1915) + _1905;
        float _2435 = (_2429 * _1918) + _1909;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2436;
        float _2440 = _2436 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 > _2440) || ((_2434 < _2438) || ((_2433 < _2438) || (_2433 > _2440))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2435, cbModelParam._m0[9u].z, fma(_2434, cbModelParam._m0[9u].y, _2433 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2435, cbModelParam._m0[10u].z, fma(_2434, cbModelParam._m0[10u].y, _2433 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2435, cbModelParam._m0[11u].z, fma(_2434, cbModelParam._m0[11u].y, _2433 * cbModelParam._m0[11u].x))), _1854);
            frontier_phi_16_38_ladder = _2563.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2563.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2563.x * cbModelParam._m0[1u].y;
        }
        _1934 = frontier_phi_16_38_ladder_2;
        _1936 = frontier_phi_16_38_ladder_1;
        _1938 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1012, _1013, _1014), _1854);
        _1934 = _1922.x * cbModelParam._m0[1u].y;
        _1936 = _1922.y * cbModelParam._m0[1u].y;
        _1938 = _1922.z * cbModelParam._m0[1u].y;
    }
    float _1942 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _830);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1942 : min(cbModelParam._m0[25u].w, _1942));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1996 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _2000 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _2004 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _2007 = fma(_1014, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012));
        float _2010 = fma(_1014, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012));
        float _2013 = fma(_1014, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012));
        float _2174;
        if (_2007 > 0.0)
        {
            _2174 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2174 = frontier_phi_28_24_ladder;
        }
        float _2453;
        if (_2010 > 0.0)
        {
            _2453 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2453 = frontier_phi_40_35_ladder;
        }
        float _2666;
        if (_2013 > 0.0)
        {
            _2666 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2666 = frontier_phi_49_46_ladder;
        }
        float _2668 = isnan(_2453) ? _2174 : (isnan(_2174) ? _2453 : min(_2174, _2453));
        float _2669 = isnan(_2666) ? _2668 : (isnan(_2668) ? _2666 : min(_2668, _2666));
        float _2673 = (_2669 * _2007) + _1996;
        float _2674 = (_2669 * _2010) + _2000;
        float _2675 = (_2669 * _2013) + _2004;
        float _2676 = _2669 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2676;
        float _2679 = _2676 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2675 > _2679) || ((_2675 < _2677) || ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 < _2677) || (_2673 > _2679))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2675, cbModelParam._m0[17u].z, fma(_2674, cbModelParam._m0[17u].y, _2673 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2675, cbModelParam._m0[18u].z, fma(_2674, cbModelParam._m0[18u].y, _2673 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2675, cbModelParam._m0[19u].z, fma(_2674, cbModelParam._m0[19u].y, _2673 * cbModelParam._m0[19u].x))), _1943);
            frontier_phi_25_49_ladder = _2874.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2874.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2874.x * cbModelParam._m0[1u].z;
        }
        _2032 = frontier_phi_25_49_ladder_2;
        _2034 = frontier_phi_25_49_ladder_1;
        _2036 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1012, _1013, _1014), _1943);
        _2032 = _2016.x * cbModelParam._m0[1u].z;
        _2034 = _2016.y * cbModelParam._m0[1u].z;
        _2036 = _2016.z * cbModelParam._m0[1u].z;
    }
    float _2049 = (((_1039 * _988) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2051 = (((_1039 * _990) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1039 * _991) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2056 = fma(_2053, cbSceneParam._m0[89u].z, fma(_2051, cbSceneParam._m0[89u].y, _2049 * cbSceneParam._m0[89u].x));
    float _2059 = fma(_2053, cbSceneParam._m0[90u].z, fma(_2051, cbSceneParam._m0[90u].y, _2049 * cbSceneParam._m0[90u].x));
    float _2062 = fma(_2053, cbSceneParam._m0[91u].z, fma(_2051, cbSceneParam._m0[91u].y, _2049 * cbSceneParam._m0[91u].x));
    vec4 _2070 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_926, _927));
    float _2072 = _2070.w;
    float _2084 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2072);
    float _2085 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2072);
    float _2086 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2072);
    uvec4 _2090 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2092 = _2090.x * 14u;
    uint _2093 = _2092 + 13u;
    float _2100 = _1004 + (-1.0);
    float _2105 = (cbLight._m0[_2093].x * _2100) + 1.0;
    float _2106 = (cbLight._m0[_2093].y * _2100) + 1.0;
    float _2107 = (cbLight._m0[_2093].z * _2100) + 1.0;
    float _2108 = (cbLight._m0[_2093].w * _2100) + 1.0;
    uint _2109 = _2092 + 5u;
    float _2115 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2119 = _2092 + 4u;
    float _2128 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2132 = _2092 | 1u;
    float _2143 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_827, _828, _829));
    float _2146 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_827, _828, _829));
    float _4396 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _4407 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2151 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
    float _2153 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
    float _2160 = ((cbLight._m0[_2109].x * _2115) * _2153) + (((cbLight._m0[_2119].x * _2084) * _2128) * _2151);
    float _2161 = ((_2115 * cbLight._m0[_2109].y) * _2153) + (((cbLight._m0[_2119].y * _2085) * _2128) * _2151);
    float _2162 = ((_2115 * cbLight._m0[_2109].z) * _2153) + (((cbLight._m0[_2119].z * _2086) * _2128) * _2151);
    uvec4 _2166 = floatBitsToUint(cbLight._m0[_2092 + 12u]);
    bool _2168 = _2166.x == 0u;
    float _2179;
    float _2181;
    float _2183;
    if (_2168)
    {
        _2179 = _2160;
        _2181 = _2161;
        _2183 = _2162;
    }
    else
    {
        uint _2187 = _2092 + 6u;
        float _2203 = (dot(vec3(cbLight._m0[_2092 + 2u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2204 = _2203 * _2203;
        float _4418 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2205 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2206 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2179 = (((cbLight._m0[_2187].x * 0.3183098733425140380859375) * _2205) * _2206) + _2160;
        _2181 = (((cbLight._m0[_2187].y * 0.3183098733425140380859375) * _2205) * _2206) + _2161;
        _2183 = (((cbLight._m0[_2187].z * 0.3183098733425140380859375) * _2205) * _2206) + _2162;
    }
    bool _2186 = _2166.y == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2186)
    {
        _2224 = _2179;
        _2226 = _2181;
        _2228 = _2183;
    }
    else
    {
        uint _2397 = _2092 + 7u;
        float _2413 = (dot(vec3(cbLight._m0[_2092 + 3u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2414 = _2413 * _2413;
        float _4434 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2415 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2416 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2224 = (((cbLight._m0[_2397].x * 0.3183098733425140380859375) * _2415) * _2416) + _2179;
        _2226 = (((cbLight._m0[_2397].y * 0.3183098733425140380859375) * _2415) * _2416) + _2181;
        _2228 = (((cbLight._m0[_2397].z * 0.3183098733425140380859375) * _2415) * _2416) + _2183;
    }
    uint _2231 = _2092 + 8u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _830) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_2092].x + _906;
    float _2247 = cbLight._m0[_2092].y + _907;
    float _2248 = cbLight._m0[_2092].z + _908;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2092].xyz));
    float _4450 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _4461 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _2260 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2261 = dot(vec3(_827, _828, _829), vec3(_2253, _2254, _2255));
    float _4472 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2265 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2253, _2254, _2255));
    float _4483 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2269 = _2245 * _2245;
    float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
    float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
    float _2282 = 0.959999978542327880859375 - _985;
    float _2284 = 0.959999978542327880859375 - _986;
    float _2285 = 0.959999978542327880859375 - _987;
    float _2292 = 1.0 - _2245;
    float _2303 = (0.5 / (((_2260 * ((_2259 * _2292) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2292) + _2245) * _2259))) * _2259;
    float _4494 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
    uint _2319 = _2092 + 9u;
    float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _830) * 0.949999988079071044921875);
    float _2331 = _2330 * _2330;
    float _2332 = cbLight._m0[_2132].x + _906;
    float _2333 = cbLight._m0[_2132].y + _907;
    float _2334 = cbLight._m0[_2132].z + _908;
    float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
    float _2339 = _2338 * _2332;
    float _2340 = _2338 * _2333;
    float _2341 = _2338 * _2334;
    float _2342 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2132].xyz));
    float _4505 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2346 = dot(vec3(_827, _828, _829), vec3(_2339, _2340, _2341));
    float _4516 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2350 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2339, _2340, _2341));
    float _4527 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2354 = _2331 * _2331;
    float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
    float _2365 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
    float _2372 = 1.0 - _2331;
    float _2382 = (0.5 / (((_2260 * ((_2345 * _2372) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2372) + _2331) * _2345))) * _2345;
    float _4538 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2384 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
    float _2394 = (((((_2365 * _2282) + _988) * cbLight._m0[_2319].x) * _2384) * _2115) + ((((cbLight._m0[_2231].x * _2084) * ((_2281 * _2282) + _988)) * _2305) * _2128);
    float _2395 = (((((_2365 * _2284) + _990) * cbLight._m0[_2319].y) * _2384) * _2115) + ((((cbLight._m0[_2231].y * _2085) * ((_2281 * _2284) + _990)) * _2305) * _2128);
    float _2396 = (((((_2365 * _2285) + _991) * cbLight._m0[_2319].z) * _2384) * _2115) + ((((cbLight._m0[_2231].z * _2086) * ((_2281 * _2285) + _991)) * _2305) * _2128);
    float _2458;
    float _2460;
    float _2462;
    if (_2168)
    {
        _2458 = _2394;
        _2460 = _2395;
        _2462 = _2396;
    }
    else
    {
        uint _2464 = _2092 + 2u;
        uint _2468 = _2092 + 10u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _830) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _906;
        float _2485 = cbLight._m0[_2464].y + _907;
        float _2486 = cbLight._m0[_2464].z + _908;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2464].xyz));
        float _4549 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2498 = dot(vec3(_827, _828, _829), vec3(_2491, _2492, _2493));
        float _4560 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4571 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
        float _2524 = 1.0 - _2483;
        float _2534 = (0.5 / (((_2260 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2524) + _2483) * _2497))) * _2497;
        float _4582 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2458 = (((((_2517 * _2282) + _988) * cbLight._m0[_2468].x) * _2536) * _2537) + _2394;
        _2460 = (((((_2517 * _2284) + _990) * cbLight._m0[_2468].y) * _2536) * _2537) + _2395;
        _2462 = (((((_2517 * _2285) + _991) * cbLight._m0[_2468].z) * _2536) * _2537) + _2396;
    }
    float _2572;
    float _2574;
    float _2576;
    if (_2186)
    {
        _2572 = _2458;
        _2574 = _2460;
        _2576 = _2462;
    }
    else
    {
        uint _2583 = _2092 + 3u;
        uint _2587 = _2092 + 11u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _830) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _906;
        float _2604 = cbLight._m0[_2583].y + _907;
        float _2605 = cbLight._m0[_2583].z + _908;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2583].xyz));
        float _4598 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2617 = dot(vec3(_827, _828, _829), vec3(_2610, _2611, _2612));
        float _4609 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4620 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
        float _2643 = 1.0 - _2602;
        float _2653 = (0.5 / (((_2260 * ((_2616 * _2643) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2260 * _2643) + _2602) * _2616))) * _2616;
        float _4631 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2572 = (((((_2636 * _2282) + _988) * cbLight._m0[_2587].x) * _2655) * _2656) + _2458;
        _2574 = (((((_2636 * _2284) + _990) * cbLight._m0[_2587].y) * _2655) * _2656) + _2460;
        _2576 = (((((_2636 * _2285) + _991) * cbLight._m0[_2587].z) * _2655) * _2656) + _2462;
    }
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_2090.y == 0u)
    {
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2731;
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2731;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2731;
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.x;
        uint _2758 = uint((float(_2746.y) * floor(float(uint(cbSceneParam._m0[85u].y * _927) / _2747))) + floor(float(uint(cbSceneParam._m0[85u].x * _926) / _2747)));
        float _2768 = (log2(_2734 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2769 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        uint _2772 = uint(isnan(14.0) ? _2769 : (isnan(_2769) ? 14.0 : min(_2769, 14.0)));
        uvec4 _2777 = texelFetch(g_lightClusterGridBuffer, int(((_2772 << 2u) + (_2758 << 6u)) >> 2u));
        uint _2778 = _2777.x;
        uint _2779 = _2746.z;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((((1u << ((_2779 >> 4u) & 15u)) + 4294967295u) & _2778) == 0u) || ((_2779 & 240u) == 0u))
        {
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
        }
        else
        {
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            uint _3037 = 0u;
            uint _3046;
            bool _3047;
            for (;;)
            {
                _3046 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                _3047 = _3046 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3047)
                {
                    frontier_phi_66_pred = _3031;
                    frontier_phi_66_pred_1 = _3036;
                    frontier_phi_66_pred_2 = _3035;
                    frontier_phi_66_pred_3 = _3034;
                    frontier_phi_66_pred_4 = _3033;
                    frontier_phi_66_pred_5 = _3032;
                }
                else
                {
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    uint _3182;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3046;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    for (;;)
                    {
                        uint _3186 = uint(findLSB(_3182)) + (_3037 << 5u);
                        uint _3183 = (_3182 + 4294967295u) & _3182;
                        uint _3188 = _3186 * 48u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3208 = (_3186 * 48u) + 4u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3227 = (_3186 * 48u) + 8u;
                        vec3 _3238 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x));
                        float _3242 = _3202.x - _2732;
                        float _3243 = _3202.y - _2733;
                        float _3244 = _3202.z - _2734;
                        float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                        float _3248 = inversesqrt(_3245);
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3252 = dot(vec3(_945, _948, _951), vec3(_3249, _3250, _3251));
                        float _3257 = 1.0 - (_3245 * _3202.w);
                        float _4657 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3259 = sqrt(_3245) * _3221.w;
                        float _3262 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3252) + _3263;
                        float _3269 = _3259 * _3259;
                        float _3273 = ((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3258) / ((_3269 * 0.699999988079071044921875) + 1.0);
                        float _3277 = (-0.0) - _2732;
                        float _3278 = (-0.0) - _2733;
                        float _3279 = (-0.0) - _2734;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3294 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                        float _3295 = 1.0 - _1020;
                        float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                        float _3303 = _3302 * _3302;
                        float _3304 = _3303 * _3303;
                        float _3305 = _3284 + _3249;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                        float _3315 = dot(vec3(_945, _948, _951), vec3(_3284, _3285, _3286));
                        float _4673 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3319 = dot(vec3(_945, _948, _951), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                        float _4684 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                        float _3327 = _3262 * _3303;
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3252) + _3328;
                        float _4695 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3332 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3333 = 1.0 - _3303;
                        float _3343 = (0.5 / (((_3332 * ((_3318 * _3333) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3303) * _3318))) * _3332;
                        float _4706 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3354 = (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) / ((_3326 * _3326) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125))) * _3258;
                        _3106 = (_3273 * _3221.x) + _3179;
                        _3107 = (_3273 * _3221.y) + _3180;
                        _3108 = (_3273 * _3221.z) + _3181;
                        _3103 = (_3354 * _3238.x) + _3176;
                        _3104 = (_3354 * _3238.y) + _3177;
                        _3105 = (_3354 * _3238.z) + _3178;
                        if (_3183 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3183;
                        }
                    }
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3108;
                    frontier_phi_66_pred_2 = _3107;
                    frontier_phi_66_pred_3 = _3106;
                    frontier_phi_66_pred_4 = _3105;
                    frontier_phi_66_pred_5 = _3104;
                }
                _2880 = frontier_phi_66_pred;
                _2890 = frontier_phi_66_pred_1;
                _2888 = frontier_phi_66_pred_2;
                _2886 = frontier_phi_66_pred_3;
                _2884 = frontier_phi_66_pred_4;
                _2882 = frontier_phi_66_pred_5;
                uint _3038 = _3037 + 1u;
                if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3031 = _2880;
                    _3032 = _2882;
                    _3033 = _2884;
                    _3034 = _2886;
                    _3035 = _2888;
                    _3036 = _2890;
                    _3037 = _3038;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
        }
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.z;
        uint _2896 = (_2894 >> 8u) & 15u;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        if (((4294967295u << _2896) & _2778) == 0u)
        {
            _2999 = _2879;
            _3001 = _2881;
            _3003 = _2883;
            _3005 = _2885;
            _3007 = _2887;
            _3009 = _2889;
        }
        else
        {
            float _3024 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
            float _3025 = _3024 * _2732;
            float _3026 = _3024 * _2733;
            float _3027 = _3024 * _2734;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2896 < ((_2894 >> 12u) & 15u))
            {
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3159 = _2879;
                float _3160 = _2881;
                float _3161 = _2883;
                float _3162 = _2885;
                float _3163 = _2887;
                float _3164 = _2889;
                uint _3165 = _2896;
                uint _3174;
                bool _3175;
                for (;;)
                {
                    _3174 = texelFetch(g_lightClassification, int((((_2772 << 5u) + (_2758 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                    _3175 = _3174 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3175)
                    {
                        frontier_phi_77_pred = _3164;
                        frontier_phi_77_pred_1 = _3163;
                        frontier_phi_77_pred_2 = _3162;
                        frontier_phi_77_pred_3 = _3161;
                        frontier_phi_77_pred_4 = _3160;
                        frontier_phi_77_pred_5 = _3159;
                    }
                    else
                    {
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        uint _3387 = _3174;
                        uint _3388;
                        vec4 _3413;
                        float _3414;
                        vec4 _3429;
                        vec3 _3441;
                        vec4 _3456;
                        vec4 _3471;
                        float _3517;
                        bool _3518;
                        for (;;)
                        {
                            uint _3398 = ((_3165 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3387));
                            _3388 = (_3387 + 4294967295u) & _3387;
                            uint _3400 = _3398 * 40u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3414 = _3413.w;
                            uint _3416 = (_3398 * 40u) + 4u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3398 * 40u) + 8u;
                            _3441 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x));
                            uint _3443 = (_3398 * 40u) + 16u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3398 * 40u) + 20u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3398 * 40u) + 24u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3492 = (_3398 * 40u) + 28u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            _3517 = fma(_2734, _3505.z, fma(_2733, _3505.y, _3505.x * _2732)) + _3505.w;
                            _3518 = !((fma(_2734, _3486.z, fma(_2733, _3486.y, _3486.x * _2732)) + _3486.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3518)
                            {
                                float _3545 = _3413.x - _2732;
                                float _3546 = _3413.y - _2733;
                                float _3547 = _3413.z - _2734;
                                float _3548 = dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547));
                                float _3551 = inversesqrt(_3548);
                                float _3552 = _3551 * _3545;
                                float _3553 = _3551 * _3546;
                                float _3554 = _3551 * _3547;
                                float _3558 = 1.0 - (_3548 / (_3414 * _3414));
                                float _4717 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3563 = sqrt(_3548) * _3429.w;
                                float _3565 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                                float _3566 = _3565 * _3565;
                                float _3569 = ((1.0 - _3566) * dot(vec3(_3552, _3553, _3554), vec3(_945, _948, _951))) + _3566;
                                float _3572 = _3563 * _3563;
                                float _3576 = (fma(_2734, _3456.z, fma(_2733, _3456.y, _3456.x * _2732)) + _3456.w) / _3517;
                                float _3577 = (fma(_2734, _3471.z, fma(_2733, _3471.y, _3471.x * _2732)) + _3471.w) / _3517;
                                float _3581 = 1.0 - dot(vec2(_3576, _3577), vec2(_3576, _3577));
                                float _4733 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3583 = _3582 * (((isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0))) * _3559) / ((_3572 * 0.699999988079071044921875) + 1.0));
                                float _3595 = exp2(log2(1.0 / ((_3572 * 3.5) + 5.0)) * 0.25);
                                float _3596 = 1.0 - _1020;
                                float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                                float _3604 = _3603 * _3603;
                                float _3605 = _3604 * _3604;
                                float _3606 = _3552 - _3025;
                                float _3607 = _3553 - _3026;
                                float _3608 = _3554 - _3027;
                                float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                                float _3616 = dot(vec3(_945, _948, _951), vec3((-0.0) - _3025, (-0.0) - _3026, (-0.0) - _3027));
                                float _4744 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3620 = dot(vec3(_945, _948, _951), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                                float _4755 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                                float _3628 = _3565 * _3604;
                                float _3629 = _3628 * _3628;
                                float _3635 = ((1.0 - _3629) * dot(vec3(_945, _948, _951), vec3(_3552, _3553, _3554))) + _3629;
                                float _4766 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3637 = 1.0 - _3604;
                                float _3647 = (0.5 / (((_3636 * ((_3619 * _3637) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3636 * _3637) + _3604) * _3619))) * _3636;
                                float _4777 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3657 = (_3582 * _3559) * (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) / ((_3627 * _3627) * ((_3572 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3583 * _3429.y;
                                frontier_phi_83_pred_1 = _3583 * _3429.x;
                                frontier_phi_83_pred_2 = _3657 * _3441.z;
                                frontier_phi_83_pred_3 = _3657 * _3441.y;
                                frontier_phi_83_pred_4 = _3657 * _3441.x;
                                frontier_phi_83_pred_5 = _3583 * _3429.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3665 = frontier_phi_83_pred;
                            _3664 = frontier_phi_83_pred_1;
                            _3663 = frontier_phi_83_pred_2;
                            _3662 = frontier_phi_83_pred_3;
                            _3661 = frontier_phi_83_pred_4;
                            _3666 = frontier_phi_83_pred_5;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            if (_3388 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3388;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3373;
                        frontier_phi_77_pred_1 = _3372;
                        frontier_phi_77_pred_2 = _3371;
                        frontier_phi_77_pred_3 = _3370;
                        frontier_phi_77_pred_4 = _3369;
                        frontier_phi_77_pred_5 = _3368;
                    }
                    _3010 = frontier_phi_77_pred;
                    _3008 = frontier_phi_77_pred_1;
                    _3006 = frontier_phi_77_pred_2;
                    _3004 = frontier_phi_77_pred_3;
                    _3002 = frontier_phi_77_pred_4;
                    _3000 = frontier_phi_77_pred_5;
                    uint _3166 = _3165 + 1u;
                    if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3159 = _3000;
                        _3160 = _3002;
                        _3161 = _3004;
                        _3162 = _3006;
                        _3163 = _3008;
                        _3164 = _3010;
                        _3165 = _3166;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3004;
                frontier_phi_58_59_ladder_1 = _3010;
                frontier_phi_58_59_ladder_2 = _3008;
                frontier_phi_58_59_ladder_3 = _3006;
                frontier_phi_58_59_ladder_4 = _3002;
                frontier_phi_58_59_ladder_5 = _3000;
            }
            else
            {
                frontier_phi_58_59_ladder = _2883;
                frontier_phi_58_59_ladder_1 = _2889;
                frontier_phi_58_59_ladder_2 = _2887;
                frontier_phi_58_59_ladder_3 = _2885;
                frontier_phi_58_59_ladder_4 = _2881;
                frontier_phi_58_59_ladder_5 = _2879;
            }
            _2999 = frontier_phi_58_59_ladder_5;
            _3001 = frontier_phi_58_59_ladder_4;
            _3003 = frontier_phi_58_59_ladder;
            _3005 = frontier_phi_58_59_ladder_3;
            _3007 = frontier_phi_58_59_ladder_2;
            _3009 = frontier_phi_58_59_ladder_1;
        }
        float _3014 = isnan(1.0) ? _1004 : (isnan(_1004) ? 1.0 : min(_1004, 1.0));
        _2791 = (_3014 * _3005) + _2224;
        _2793 = (_3014 * _3007) + _2226;
        _2795 = (_3014 * _3009) + _2228;
        _2797 = ((_2999 * _988) * _3014) + _2572;
        _2799 = ((_3001 * _990) * _3014) + _2574;
        _2801 = ((_3003 * _991) * _3014) + _2576;
    }
    else
    {
        _2791 = _2224;
        _2793 = _2226;
        _2795 = _2228;
        _2797 = _2572;
        _2799 = _2574;
        _2801 = _2576;
    }
    float _4793 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4804 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4815 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2818 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2791 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1004))) + ((_2797 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _2819 = ((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2793 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1004))) + ((_2799 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _2820 = ((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2795 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1004))) + ((_2801 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    uint _2821 = _261 + 6u;
    float _2829 = _926 / cbSceneParam._m0[86u].x;
    float _2830 = _927 / cbSceneParam._m0[86u].y;
    vec4 _2844 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2846 = _2844.x;
    float _2847 = _2844.y;
    float _2848 = _2844.z;
    float _2849 = _2844.w;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _2904 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _2905 = _2904 / _849;
        float _2916 = _2905 * _899;
        float _2917 = _900 * _2905;
        float _2918 = (-0.0) - _2917;
        float _2919 = _2905 * _901;
        float _2921 = (cbSceneParam._m0[77u].w * _2918) / _2904;
        float _2922 = _2921 + cbSceneParam._m0[79u].w;
        float _2923 = cbSceneParam._m0[79u].w - _2917;
        float _2929 = sqrt(((_2916 * _2916) + (_2917 * _2917)) + (_2919 * _2919));
        float _2932 = (1.0 - (cbSceneParam._m0[77u].w / _2904)) * _2929;
        float _2937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3116;
        if (abs((_2918 - _2921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3116 = ((((_2922 > 0.0) ? exp2(_2937 * _2922) : (2.0 - exp2(_2939 * _2922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2932;
        }
        else
        {
            float _3060 = 1.0 / cbSceneParam._m0[80u].x;
            float _3061 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : max(_2922, _2923));
            float _3062 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : min(_2922, _2923));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            _3116 = ((abs(_2929 / _2918) * cbSceneParam._m0[80u].y) * ((((_3071 - _3072) * 2.0) - ((exp2(_2937 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)))) - exp2(_2937 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))))) * _3060)) - ((exp2(_2939 * _3071) - exp2(_2939 * _3072)) * _3060))) + (_2932 * cbSceneParam._m0[80u].z);
        }
        vec4 _3118 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, 1.0), 0.0);
        float _3127 = exp2((_3116 * (-1.44269502162933349609375)) * (1.0 - _3118.w));
        float _3128 = log2(_3127);
        float _3144 = log2(_2849);
        _2941 = (exp2(_3144 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].x)) * _3118.x) / cbSceneParam._m0[78u].x)) + _2846;
        _2943 = (exp2(_3144 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].y)) * _3118.y) / cbSceneParam._m0[78u].y)) + _2847;
        _2945 = (exp2(_3144 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].z)) * _3118.z) / cbSceneParam._m0[78u].z)) + _2848;
        _2947 = _3127 * _2849;
    }
    else
    {
        _2941 = _2846;
        _2943 = _2847;
        _2945 = _2848;
        _2947 = _2849;
    }
    bool _3154;
    vec4 _2957;
    vec4 _2979;
    float _2981;
    float _2985;
    float _2986;
    float _2987;
    float _2988;
    bool _2998;
    for (;;)
    {
        _2957 = cbMatDynParam._m0[0u];
        float _2959 = roundEven(_2957.y);
        bool _2960 = _2959 == 3.0;
        float _2961 = log2(_2947);
        float _2968 = exp2(_2961 * cbSceneParam._m0[78u].x) * _2818;
        float _2969 = exp2(_2961 * cbSceneParam._m0[78u].y) * _2819;
        float _2970 = exp2(_2961 * cbSceneParam._m0[78u].z) * _2820;
        float _2977 = _915 + (-0.5);
        _2979 = cbMtdParam._m0[1u];
        _2981 = _2979.y * _2977;
        float _2984 = (_2959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2985 = _2984 * (_2960 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2941)));
        _2986 = _2984 * (_2960 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2943)));
        _2987 = _2984 * (_2960 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2945)));
        _2988 = _2977 * 0.999000012874603271484375;
        _2998 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2998)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _2988) < 0.5)
            {
                _3154 = true;
                break;
            }
        }
        uint _3095 = _964 + uint(_2957.w);
        if ((cbInstanceData._m0[_3095].w < 1.0) && ((cbInstanceData._m0[_3095].w + _2988) < 0.5))
        {
            _3154 = true;
            break;
        }
        if ((_2981 + 1.0) < _2979.x)
        {
            _3154 = true;
            break;
        }
        _3154 = false;
        break;
    }
    float _3359;
    if (_3154)
    {
        discard_state = true;
        _3359 = 0.0;
    }
    else
    {
        _3359 = cbInstanceData._m0[_2821].w;
    }
    SV_Target.x = _2985;
    SV_Target.y = _2986;
    SV_Target.z = _2987;
    SV_Target.w = _3359;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2821].w;
    discard_exit();
}


