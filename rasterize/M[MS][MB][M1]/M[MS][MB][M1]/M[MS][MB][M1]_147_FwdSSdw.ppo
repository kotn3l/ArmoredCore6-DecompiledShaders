#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1339;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3688 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _388) + _457;
    float _469 = ((((_436.x - _455) * _388) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _388) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3699 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))));
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _505 = (((_493.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _506 = (((_493.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _509 = fma(_477, _239, fma(_506, _246, _505 * _232));
    float _512 = fma(_477, _240, fma(_506, _247, _505 * _233));
    float _515 = fma(_477, _241, fma(_506, _248, _505 * _234));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _555 = (cbMtdParam._m0[19u].x + dot(vec4(_519 * _509, _519 * _512, _519 * _515, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_548 - _549) * cbMtdParam._m0[24u].z) + _549) * cbMtdParam._m0[21u].z);
    float _3710 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _558 = (-0.0) - cbMtdParam._m0[24u].x;
    float _560 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _560 : (isnan(_560) ? 1.0 : min(_560, 1.0));
    float _568 = _556 - ((_556 * TEXCOORD_8.x) * _561);
    float _569 = _556 - ((_556 * TEXCOORD_8.y) * _561);
    float _570 = _556 - ((_556 * TEXCOORD_8.z) * _561);
    float _577 = (_568 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _578 = (_569 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _579 = (_570 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _593 = _591.x;
    float _594 = 1.0 - _593;
    float _622 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_593 - _594) * cbMtdParam._m0[24u].w) + _594) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3731 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _631 = ((((cbMtdParam._m0[10u].x - _577) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _623) + _577;
    float _632 = ((((cbMtdParam._m0[10u].y - _578) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _623) + _578;
    float _633 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _579)) * _623) + _579;
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _661 = _659.x;
    float _679 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _661) * _388) + _661;
    float _683 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _679) * cbMtdParam._m0[19u].z) + _679;
    float _685 = _683 - (_683 * _568);
    float _687 = _685 - (_685 * _623);
    float _691 = (cbMtdParam._m0[19u].w * (_493.z - _466)) + _466;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _712 = (_705.x * 2.0) + (-1.0);
    float _713 = (_705.y * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _3742 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _722 = ((_705.z - _691) * _568) + _691;
    float _725 = ((cbMtdParam._m0[23u].y - _722) * _623) + _722;
    vec4 _744 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _750 = (_744.x * 2.0) + (-1.0);
    float _751 = (_744.y * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _3753 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _767 = ((sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) - _477) * _570) + _477;
    float _770 = (((_712 - _505) * _568) + _505) + (cbMtdParam._m0[21u].x * _505);
    float _771 = (((_713 - _506) * _569) + _506) + (cbMtdParam._m0[21u].x * _506);
    float _782 = (((_750 - _770) + (_770 * cbMtdParam._m0[22u].z)) * _623) + _770;
    float _783 = (((_751 - _771) + (_771 * cbMtdParam._m0[22u].z)) * _623) + _771;
    float _784 = (_623 * (sqrt(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) - _767)) + _767;
    float _786 = cbMtdParam._m0[22u].x + _493.w;
    float _789 = fma(_784, _239, fma(_783, _246, _782 * _232));
    float _792 = fma(_784, _240, fma(_783, _247, _782 * _233));
    float _795 = fma(_784, _241, fma(_783, _248, _782 * _234));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _3764 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _803 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _3786 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3797 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3808 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3819 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _808 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _872 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _862);
    float _873 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _862);
    float _874 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _862);
    float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
    float _879 = _872 * _878;
    float _880 = _873 * _878;
    float _881 = _874 * _878;
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _909 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _912 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _926 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_926].z;
    float _3830 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _938 = 1.0 - _808;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _808;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _808;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _808;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _965 = ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * TEXCOORD_5.w) * _961.x;
    float _966 = dot(vec3(_800, _801, _802), vec3(_879, _880, _881));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _800) - _879;
    float _974 = (_969 * _801) - _880;
    float _975 = (_969 * _802) - _881;
    float _979 = abs(dot(vec3(_879, _880, _881), vec3(_800, _801, _802)));
    float _3863 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_803);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1000 = (1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1001 = _994 * _981;
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1338;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1063 = fma(_1037, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029));
        float _1067 = fma(_1037, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029));
        float _1071 = fma(_1037, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029));
        float _1096 = _1029 + _800;
        float _1097 = _1033 + _801;
        float _1098 = _1037 + _802;
        float _1108 = fma(_1098, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096)) - _1063;
        float _1109 = fma(_1098, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096)) - _1067;
        float _1110 = fma(_1098, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096)) - _1071;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1063 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1067 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[34u].z) + ((((((_1071 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1166 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1132.x + (-0.5));
        float _1168 = _1166 * (_1132.y + (-0.5));
        float _1169 = _1166 * (_1132.z + (-0.5));
        float _1176 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1139.x + (-0.5));
        float _1178 = _1176 * (_1139.y + (-0.5));
        float _1179 = _1176 * (_1139.z + (-0.5));
        float _1186 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1146.x + (-0.5));
        float _1188 = _1186 * (_1146.y + (-0.5));
        float _1189 = _1186 * (_1146.z + (-0.5));
        float _1196 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1153.x + (-0.5));
        float _1198 = _1196 * (_1153.y + (-0.5));
        float _1199 = _1196 * (_1153.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1220 = (dot(vec3(_800, _801, _802), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1230 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3911 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1232 + 1.0))) + _1237) * _1200;
        float _1247 = _1168 * 0.5;
        float _1248 = _1178 * 0.5;
        float _1249 = _1188 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_800, _801, _802), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3944 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1274 + 1.0))) + _1279) * _1201;
        float _1289 = _1169 * 0.5;
        float _1290 = _1179 * 0.5;
        float _1291 = _1189 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_800, _801, _802), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3977 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1316 + 1.0))) + _1321) * _1202;
        _1338 = _1169;
        _1340 = _1168;
        _1341 = _1167;
        _1342 = _1179;
        _1343 = _1178;
        _1344 = _1177;
        _1345 = _1189;
        _1346 = _1188;
        _1347 = _1187;
        _1348 = _1202;
        _1349 = _1201;
        _1350 = _1200;
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1339;
        _1340 = _1339;
        _1341 = _1339;
        _1342 = _1339;
        _1343 = _1339;
        _1344 = _1339;
        _1345 = _1339;
        _1346 = _1339;
        _1347 = _1339;
        _1348 = _1339;
        _1349 = _1339;
        _1350 = _1339;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1378 = fma(_1037, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029));
        float _1382 = fma(_1037, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029));
        float _1386 = fma(_1037, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029));
        float _1409 = _1029 + _800;
        float _1410 = _1033 + _801;
        float _1411 = _1037 + _802;
        float _1421 = fma(_1411, cbModelParam._m0[30u].z, fma(_1410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1409)) - _1378;
        float _1422 = fma(_1411, cbModelParam._m0[31u].z, fma(_1410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1409)) - _1382;
        float _1423 = fma(_1411, cbModelParam._m0[32u].z, fma(_1410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1409)) - _1386;
        float _1427 = inversesqrt(dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423)));
        float _1440 = ((_1427 * _1421) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1378 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1427 * _1422) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1382 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1427 * _1423) / cbModelParam._m0[35u].z) + ((((((_1386 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        float _1477 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1444.x + (-0.5));
        float _1479 = _1477 * (_1444.y + (-0.5));
        float _1480 = _1477 * (_1444.z + (-0.5));
        float _1487 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1451.x + (-0.5));
        float _1489 = _1487 * (_1451.y + (-0.5));
        float _1490 = _1487 * (_1451.z + (-0.5));
        float _1497 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1458.x + (-0.5));
        float _1499 = _1497 * (_1458.y + (-0.5));
        float _1500 = _1497 * (_1458.z + (-0.5));
        float _1507 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1465.x + (-0.5));
        float _1509 = _1507 * (_1465.y + (-0.5));
        float _1510 = _1507 * (_1465.z + (-0.5));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = _1478 * 0.5;
        float _1515 = _1488 * 0.5;
        float _1516 = _1498 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_800, _801, _802), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4040 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1541 + 1.0))) + _1546) * _1511;
        float _1556 = _1479 * 0.5;
        float _1557 = _1489 * 0.5;
        float _1558 = _1499 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_800, _801, _802), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4073 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1583 + 1.0))) + _1588) * _1512;
        float _1598 = _1480 * 0.5;
        float _1599 = _1490 * 0.5;
        float _1600 = _1500 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_800, _801, _802), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4106 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1625 + 1.0))) + _1630) * _1513;
        _1647 = _1480;
        _1648 = _1479;
        _1649 = _1478;
        _1650 = _1490;
        _1651 = _1489;
        _1652 = _1488;
        _1653 = _1500;
        _1654 = _1499;
        _1655 = _1498;
        _1656 = _1513;
        _1657 = _1512;
        _1658 = _1511;
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
    }
    else
    {
        _1647 = _1339;
        _1648 = _1339;
        _1649 = _1339;
        _1650 = _1339;
        _1651 = _1339;
        _1652 = _1339;
        _1653 = _1339;
        _1654 = _1339;
        _1655 = _1339;
        _1656 = _1339;
        _1657 = _1339;
        _1658 = _1339;
        _1659 = 0.0;
        _1660 = 0.0;
        _1661 = 0.0;
    }
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1351)) + _1351;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1352)) + _1352;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1353)) + _1353;
    float _1694 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1671));
    float _1715 = _973 * 0.5;
    float _1716 = _974 * 0.5;
    float _1717 = _975 * 0.5;
    float _1718 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1721 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1724 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1758;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1731 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1338, _1342, _1345, _1348));
        float _1735 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1739 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1746 = dot(vec4(cbModelParam._m0[39u]), vec4(_1715, _1716, _1717, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1769;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1760 = dot(vec4(cbModelParam._m0[40u]), vec4(_1715, _1716, _1717, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1773 = (_1769 * cbModelParam._m0[1u].x) + (_1758 * (1.0 - cbModelParam._m0[1u].x));
    float _1783 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1783 : min(cbModelParam._m0[25u].z, _1783));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1831 = fma(_1037, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029)) + cbModelParam._m0[13u].w;
        float _1835 = fma(_1037, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029)) + cbModelParam._m0[14u].w;
        float _1839 = fma(_1037, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029)) + cbModelParam._m0[15u].w;
        float _1842 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1845 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1848 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1876;
        if (_1842 > 0.0)
        {
            _1876 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1876 = frontier_phi_14_12_ladder;
        }
        float _2099;
        if (_1845 > 0.0)
        {
            _2099 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2099 = frontier_phi_23_19_ladder;
        }
        float _2356;
        if (_1848 > 0.0)
        {
            _2356 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2356 = frontier_phi_35_30_ladder;
        }
        float _2358 = isnan(_2099) ? _1876 : (isnan(_1876) ? _2099 : min(_1876, _2099));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1842) + _1831;
        float _2364 = (_2359 * _1845) + _1835;
        float _2365 = (_2359 * _1848) + _1839;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2366;
        float _2370 = _2366 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 > _2370) || ((_2364 < _2368) || ((_2363 < _2368) || (_2363 > _2370))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2365, cbModelParam._m0[9u].z, fma(_2364, cbModelParam._m0[9u].y, _2363 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2365, cbModelParam._m0[10u].z, fma(_2364, cbModelParam._m0[10u].y, _2363 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2365, cbModelParam._m0[11u].z, fma(_2364, cbModelParam._m0[11u].y, _2363 * cbModelParam._m0[11u].x))), _1784);
            frontier_phi_13_35_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1864 = frontier_phi_13_35_ladder_2;
        _1866 = frontier_phi_13_35_ladder_1;
        _1868 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1784);
        _1864 = _1852.x * cbModelParam._m0[1u].y;
        _1866 = _1852.y * cbModelParam._m0[1u].y;
        _1868 = _1852.z * cbModelParam._m0[1u].y;
    }
    float _1872 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1872 : min(cbModelParam._m0[25u].w, _1872));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1037, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1037, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1037, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1940 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1943 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2104;
        if (_1937 > 0.0)
        {
            _2104 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2104 = frontier_phi_25_21_ladder;
        }
        float _2383;
        if (_1940 > 0.0)
        {
            _2383 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2383 = frontier_phi_37_32_ladder;
        }
        float _2596;
        if (_1943 > 0.0)
        {
            _2596 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2596 = frontier_phi_46_43_ladder;
        }
        float _2598 = isnan(_2383) ? _2104 : (isnan(_2104) ? _2383 : min(_2104, _2383));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _1937) + _1926;
        float _2604 = (_2599 * _1940) + _1930;
        float _2605 = (_2599 * _1943) + _1934;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2606;
        float _2609 = _2606 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2605 > _2609) || ((_2605 < _2607) || ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 < _2607) || (_2603 > _2609))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2605, cbModelParam._m0[17u].z, fma(_2604, cbModelParam._m0[17u].y, _2603 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2605, cbModelParam._m0[18u].z, fma(_2604, cbModelParam._m0[18u].y, _2603 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2605, cbModelParam._m0[19u].z, fma(_2604, cbModelParam._m0[19u].y, _2603 * cbModelParam._m0[19u].x))), _1873);
            frontier_phi_22_46_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_22_46_ladder_2;
        _1964 = frontier_phi_22_46_ladder_1;
        _1966 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1873);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1979 = (((_1000 * _949) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1962 - _1864)) + _1864);
    float _1981 = (((_1000 * _951) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1964 - _1866)) + _1866);
    float _1983 = (((_1000 * _952) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1966 - _1868)) + _1868);
    float _1986 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    vec4 _2000 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_887, _888));
    float _2002 = _2000.w;
    float _2014 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2002);
    float _2015 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2002);
    float _2016 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2002);
    uvec4 _2020 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2022 = _2020.x * 14u;
    uint _2023 = _2022 + 13u;
    float _2030 = _965 + (-1.0);
    float _2035 = (cbLight._m0[_2023].x * _2030) + 1.0;
    float _2036 = (cbLight._m0[_2023].y * _2030) + 1.0;
    float _2037 = (cbLight._m0[_2023].z * _2030) + 1.0;
    float _2038 = (cbLight._m0[_2023].w * _2030) + 1.0;
    uint _2039 = _2022 + 5u;
    float _2045 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2049 = _2022 + 4u;
    float _2058 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2062 = _2022 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_800, _801, _802));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_800, _801, _802));
    float _4242 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4253 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2039].x * _2045) * _2083) + (((cbLight._m0[_2049].x * _2014) * _2058) * _2081);
    float _2091 = ((_2045 * cbLight._m0[_2039].y) * _2083) + (((cbLight._m0[_2049].y * _2015) * _2058) * _2081);
    float _2092 = ((_2045 * cbLight._m0[_2039].z) * _2083) + (((cbLight._m0[_2049].z * _2016) * _2058) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2022 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2098)
    {
        _2109 = _2090;
        _2111 = _2091;
        _2113 = _2092;
    }
    else
    {
        uint _2117 = _2022 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_2022 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4264 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2136 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _2090;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2091;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2092;
    }
    bool _2116 = _2096.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2116)
    {
        _2154 = _2109;
        _2156 = _2111;
        _2158 = _2113;
    }
    else
    {
        uint _2327 = _2022 + 7u;
        float _2343 = (dot(vec3(cbLight._m0[_2022 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2344 = _2343 * _2343;
        float _4280 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2345 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2346 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2154 = (((cbLight._m0[_2327].x * 0.3183098733425140380859375) * _2345) * _2346) + _2109;
        _2156 = (((cbLight._m0[_2327].y * 0.3183098733425140380859375) * _2345) * _2346) + _2111;
        _2158 = (((cbLight._m0[_2327].z * 0.3183098733425140380859375) * _2345) * _2346) + _2113;
    }
    uint _2161 = _2022 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _803) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2022].x + _879;
    float _2177 = cbLight._m0[_2022].y + _880;
    float _2178 = cbLight._m0[_2022].z + _881;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2022].xyz));
    float _4296 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _4307 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2190 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2191 = dot(vec3(_800, _801, _802), vec3(_2183, _2184, _2185));
    float _4318 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2183, _2184, _2185));
    float _4329 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0);
    float _2212 = 0.959999978542327880859375 - _946;
    float _2214 = 0.959999978542327880859375 - _947;
    float _2215 = 0.959999978542327880859375 - _948;
    float _2222 = 1.0 - _2175;
    float _2233 = (0.5 / (((_2190 * ((_2189 * _2222) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2222) + _2175) * _2189))) * _2189;
    float _4340 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2249 = _2022 + 9u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _803) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_2062].x + _879;
    float _2263 = cbLight._m0[_2062].y + _880;
    float _2264 = cbLight._m0[_2062].z + _881;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2062].xyz));
    float _4351 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2276 = dot(vec3(_800, _801, _802), vec3(_2269, _2270, _2271));
    float _4362 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2269, _2270, _2271));
    float _4373 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2261 * _2261;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0);
    float _2302 = 1.0 - _2261;
    float _2312 = (0.5 / (((_2190 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2302) + _2261) * _2275))) * _2275;
    float _4384 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    float _2324 = (((((_2295 * _2212) + _949) * cbLight._m0[_2249].x) * _2314) * _2045) + ((((cbLight._m0[_2161].x * _2014) * ((_2211 * _2212) + _949)) * _2235) * _2058);
    float _2325 = (((((_2295 * _2214) + _951) * cbLight._m0[_2249].y) * _2314) * _2045) + ((((cbLight._m0[_2161].y * _2015) * ((_2211 * _2214) + _951)) * _2235) * _2058);
    float _2326 = (((((_2295 * _2215) + _952) * cbLight._m0[_2249].z) * _2314) * _2045) + ((((cbLight._m0[_2161].z * _2016) * ((_2211 * _2215) + _952)) * _2235) * _2058);
    float _2388;
    float _2390;
    float _2392;
    if (_2098)
    {
        _2388 = _2324;
        _2390 = _2325;
        _2392 = _2326;
    }
    else
    {
        uint _2394 = _2022 + 2u;
        uint _2398 = _2022 + 10u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _803) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _879;
        float _2415 = cbLight._m0[_2394].y + _880;
        float _2416 = cbLight._m0[_2394].z + _881;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2394].xyz));
        float _4395 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2428 = dot(vec3(_800, _801, _802), vec3(_2421, _2422, _2423));
        float _4406 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4417 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0);
        float _2454 = 1.0 - _2413;
        float _2464 = (0.5 / (((_2190 * ((_2427 * _2454) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2454) + _2413) * _2427))) * _2427;
        float _4428 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2388 = (((((_2447 * _2212) + _949) * cbLight._m0[_2398].x) * _2466) * _2467) + _2324;
        _2390 = (((((_2447 * _2214) + _951) * cbLight._m0[_2398].y) * _2466) * _2467) + _2325;
        _2392 = (((((_2447 * _2215) + _952) * cbLight._m0[_2398].z) * _2466) * _2467) + _2326;
    }
    float _2502;
    float _2504;
    float _2506;
    if (_2116)
    {
        _2502 = _2388;
        _2504 = _2390;
        _2506 = _2392;
    }
    else
    {
        uint _2513 = _2022 + 3u;
        uint _2517 = _2022 + 11u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _803) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _879;
        float _2534 = cbLight._m0[_2513].y + _880;
        float _2535 = cbLight._m0[_2513].z + _881;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2513].xyz));
        float _4444 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2547 = dot(vec3(_800, _801, _802), vec3(_2540, _2541, _2542));
        float _4455 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4466 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
        float _2573 = 1.0 - _2532;
        float _2583 = (0.5 / (((_2190 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2573) + _2532) * _2546))) * _2546;
        float _4477 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2502 = (((((_2566 * _2212) + _949) * cbLight._m0[_2517].x) * _2585) * _2586) + _2388;
        _2504 = (((((_2566 * _2214) + _951) * cbLight._m0[_2517].y) * _2585) * _2586) + _2390;
        _2506 = (((((_2566 * _2215) + _952) * cbLight._m0[_2517].z) * _2585) * _2586) + _2392;
    }
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_2020.y == 0u)
    {
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2661;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2661;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2661;
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.x;
        uint _2688 = uint((float(_2676.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2677))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2677)));
        float _2698 = (log2(_2664 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2699 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        uint _2702 = uint(isnan(14.0) ? _2699 : (isnan(_2699) ? 14.0 : min(_2699, 14.0)));
        uvec4 _2707 = texelFetch(g_lightClusterGridBuffer, int(((_2702 << 2u) + (_2688 << 6u)) >> 2u));
        uint _2708 = _2707.x;
        uint _2709 = _2676.z;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((((1u << ((_2709 >> 4u) & 15u)) + 4294967295u) & _2708) == 0u) || ((_2709 & 240u) == 0u))
        {
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
        }
        else
        {
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            uint _2959 = 0u;
            uint _2968;
            bool _2969;
            for (;;)
            {
                _2968 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                _2969 = _2968 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2969)
                {
                    frontier_phi_61_pred = _2953;
                    frontier_phi_61_pred_1 = _2958;
                    frontier_phi_61_pred_2 = _2957;
                    frontier_phi_61_pred_3 = _2956;
                    frontier_phi_61_pred_4 = _2955;
                    frontier_phi_61_pred_5 = _2954;
                }
                else
                {
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    uint _3083;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2968;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    for (;;)
                    {
                        uint _3087 = uint(findLSB(_3083)) + (_2959 << 5u);
                        uint _3084 = (_3083 + 4294967295u) & _3083;
                        uint _3089 = _3087 * 48u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3109 = (_3087 * 48u) + 4u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3128 = (_3087 * 48u) + 8u;
                        vec3 _3139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x));
                        float _3143 = _3103.x - _2662;
                        float _3144 = _3103.y - _2663;
                        float _3145 = _3103.z - _2664;
                        float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                        float _3149 = inversesqrt(_3146);
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3153 = dot(vec3(_906, _909, _912), vec3(_3150, _3151, _3152));
                        float _3158 = 1.0 - (_3146 * _3103.w);
                        float _4503 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3160 = sqrt(_3146) * _3122.w;
                        float _3163 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3153) + _3164;
                        float _3170 = _3160 * _3160;
                        float _3174 = ((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3159) / ((_3170 * 0.699999988079071044921875) + 1.0);
                        float _3178 = (-0.0) - _2662;
                        float _3179 = (-0.0) - _2663;
                        float _3180 = (-0.0) - _2664;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3195 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                        float _3196 = 1.0 - _981;
                        float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                        float _3204 = _3203 * _3203;
                        float _3205 = _3204 * _3204;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3216 = dot(vec3(_906, _909, _912), vec3(_3185, _3186, _3187));
                        float _4519 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3220 = dot(vec3(_906, _909, _912), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                        float _4530 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                        float _3228 = _3163 * _3204;
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3153) + _3229;
                        float _4541 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3234 = 1.0 - _3204;
                        float _3244 = (0.5 / (((_3233 * ((_3219 * _3234) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3204) * _3219))) * _3233;
                        float _4552 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3255 = (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3227 * _3227) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125))) * _3159;
                        _3012 = (_3174 * _3122.x) + _3080;
                        _3013 = (_3174 * _3122.y) + _3081;
                        _3014 = (_3174 * _3122.z) + _3082;
                        _3009 = (_3255 * _3139.x) + _3077;
                        _3010 = (_3255 * _3139.y) + _3078;
                        _3011 = (_3255 * _3139.z) + _3079;
                        if (_3084 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3084;
                        }
                    }
                    frontier_phi_61_pred = _3009;
                    frontier_phi_61_pred_1 = _3014;
                    frontier_phi_61_pred_2 = _3013;
                    frontier_phi_61_pred_3 = _3012;
                    frontier_phi_61_pred_4 = _3011;
                    frontier_phi_61_pred_5 = _3010;
                }
                _2810 = frontier_phi_61_pred;
                _2820 = frontier_phi_61_pred_1;
                _2818 = frontier_phi_61_pred_2;
                _2816 = frontier_phi_61_pred_3;
                _2814 = frontier_phi_61_pred_4;
                _2812 = frontier_phi_61_pred_5;
                uint _2960 = _2959 + 1u;
                if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2953 = _2810;
                    _2954 = _2812;
                    _2955 = _2814;
                    _2956 = _2816;
                    _2957 = _2818;
                    _2958 = _2820;
                    _2959 = _2960;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
        }
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.z;
        uint _2826 = (_2824 >> 8u) & 15u;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((4294967295u << _2826) & _2708) == 0u)
        {
            _2921 = _2809;
            _2923 = _2811;
            _2925 = _2813;
            _2927 = _2815;
            _2929 = _2817;
            _2931 = _2819;
        }
        else
        {
            float _2946 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
            float _2947 = _2946 * _2662;
            float _2948 = _2946 * _2663;
            float _2949 = _2946 * _2664;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2826 < ((_2824 >> 12u) & 15u))
            {
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _3060 = _2809;
                float _3061 = _2811;
                float _3062 = _2813;
                float _3063 = _2815;
                float _3064 = _2817;
                float _3065 = _2819;
                uint _3066 = _2826;
                uint _3075;
                bool _3076;
                for (;;)
                {
                    _3075 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                    _3076 = _3075 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3076)
                    {
                        frontier_phi_67_pred = _3063;
                        frontier_phi_67_pred_1 = _3064;
                        frontier_phi_67_pred_2 = _3065;
                        frontier_phi_67_pred_3 = _3062;
                        frontier_phi_67_pred_4 = _3061;
                        frontier_phi_67_pred_5 = _3060;
                    }
                    else
                    {
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        uint _3279 = _3075;
                        uint _3280;
                        vec4 _3305;
                        float _3306;
                        vec4 _3321;
                        vec3 _3333;
                        vec4 _3348;
                        vec4 _3364;
                        float _3410;
                        bool _3411;
                        for (;;)
                        {
                            uint _3290 = ((_3066 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3279));
                            _3280 = (_3279 + 4294967295u) & _3279;
                            uint _3292 = _3290 * 40u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3306 = _3305.w;
                            uint _3308 = (_3290 * 40u) + 4u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3290 * 40u) + 8u;
                            _3333 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x));
                            uint _3335 = (_3290 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3290 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3290 * 40u) + 24u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3385 = (_3290 * 40u) + 28u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3410 = fma(_2664, _3398.z, fma(_2663, _3398.y, _3398.x * _2662)) + _3398.w;
                            _3411 = !((fma(_2664, _3379.z, fma(_2663, _3379.y, _3379.x * _2662)) + _3379.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3411)
                            {
                                float _3438 = _3305.x - _2662;
                                float _3439 = _3305.y - _2663;
                                float _3440 = _3305.z - _2664;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3306 * _3306));
                                float _4563 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3456 = sqrt(_3441) * _3321.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3462 = ((1.0 - _3459) * dot(vec3(_3445, _3446, _3447), vec3(_906, _909, _912))) + _3459;
                                float _3465 = _3456 * _3456;
                                float _3469 = (fma(_2664, _3348.z, fma(_2663, _3348.y, _3348.x * _2662)) + _3348.w) / _3410;
                                float _3470 = (fma(_2664, _3364.z, fma(_2663, _3364.y, _3364.x * _2662)) + _3364.w) / _3410;
                                float _3474 = 1.0 - dot(vec2(_3469, _3470), vec2(_3469, _3470));
                                float _4579 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3476 = _3475 * (((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3452) / ((_3465 * 0.699999988079071044921875) + 1.0));
                                float _3488 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                                float _3489 = 1.0 - _981;
                                float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                                float _3497 = _3496 * _3496;
                                float _3498 = _3497 * _3497;
                                float _3499 = _3445 - _2947;
                                float _3500 = _3446 - _2948;
                                float _3501 = _3447 - _2949;
                                float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                                float _3509 = dot(vec3(_906, _909, _912), vec3((-0.0) - _2947, (-0.0) - _2948, (-0.0) - _2949));
                                float _4590 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3513 = dot(vec3(_906, _909, _912), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                                float _4601 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                                float _3521 = _3458 * _3497;
                                float _3522 = _3521 * _3521;
                                float _3528 = ((1.0 - _3522) * dot(vec3(_906, _909, _912), vec3(_3445, _3446, _3447))) + _3522;
                                float _4612 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3530 = 1.0 - _3497;
                                float _3540 = (0.5 / (((_3529 * ((_3512 * _3530) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3497) * _3512))) * _3529;
                                float _4623 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3550 = (_3475 * _3452) * (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3520 * _3520) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3550 * _3333.x;
                                frontier_phi_73_pred_1 = _3550 * _3333.y;
                                frontier_phi_73_pred_2 = _3476 * _3321.z;
                                frontier_phi_73_pred_3 = _3476 * _3321.y;
                                frontier_phi_73_pred_4 = _3476 * _3321.x;
                                frontier_phi_73_pred_5 = _3550 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3554 = frontier_phi_73_pred;
                            _3555 = frontier_phi_73_pred_1;
                            _3559 = frontier_phi_73_pred_2;
                            _3558 = frontier_phi_73_pred_3;
                            _3557 = frontier_phi_73_pred_4;
                            _3556 = frontier_phi_73_pred_5;
                            _3263 = _3557 + _3276;
                            _3264 = _3558 + _3277;
                            _3265 = _3559 + _3278;
                            _3260 = _3554 + _3273;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            if (_3280 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3280;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3263;
                        frontier_phi_67_pred_1 = _3264;
                        frontier_phi_67_pred_2 = _3265;
                        frontier_phi_67_pred_3 = _3262;
                        frontier_phi_67_pred_4 = _3261;
                        frontier_phi_67_pred_5 = _3260;
                    }
                    _2928 = frontier_phi_67_pred;
                    _2930 = frontier_phi_67_pred_1;
                    _2932 = frontier_phi_67_pred_2;
                    _2926 = frontier_phi_67_pred_3;
                    _2924 = frontier_phi_67_pred_4;
                    _2922 = frontier_phi_67_pred_5;
                    uint _3067 = _3066 + 1u;
                    if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3060 = _2922;
                        _3061 = _2924;
                        _3062 = _2926;
                        _3063 = _2928;
                        _3064 = _2930;
                        _3065 = _2932;
                        _3066 = _3067;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2930;
                frontier_phi_55_56_ladder_1 = _2932;
                frontier_phi_55_56_ladder_2 = _2928;
                frontier_phi_55_56_ladder_3 = _2926;
                frontier_phi_55_56_ladder_4 = _2924;
                frontier_phi_55_56_ladder_5 = _2922;
            }
            else
            {
                frontier_phi_55_56_ladder = _2817;
                frontier_phi_55_56_ladder_1 = _2819;
                frontier_phi_55_56_ladder_2 = _2815;
                frontier_phi_55_56_ladder_3 = _2813;
                frontier_phi_55_56_ladder_4 = _2811;
                frontier_phi_55_56_ladder_5 = _2809;
            }
            _2921 = frontier_phi_55_56_ladder_5;
            _2923 = frontier_phi_55_56_ladder_4;
            _2925 = frontier_phi_55_56_ladder_3;
            _2927 = frontier_phi_55_56_ladder_2;
            _2929 = frontier_phi_55_56_ladder;
            _2931 = frontier_phi_55_56_ladder_1;
        }
        float _2936 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _2721 = (_2936 * _2927) + _2154;
        _2723 = (_2936 * _2929) + _2156;
        _2725 = (_2936 * _2931) + _2158;
        _2727 = ((_2921 * _949) * _2936) + _2502;
        _2729 = ((_2923 * _951) * _2936) + _2504;
        _2731 = ((_2925 * _952) * _2936) + _2506;
    }
    else
    {
        _2721 = _2154;
        _2723 = _2156;
        _2725 = _2158;
        _2727 = _2502;
        _2729 = _2504;
        _2731 = _2506;
    }
    float _4639 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4650 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4661 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    uint _2751 = _251 + 6u;
    float _2759 = _887 / cbSceneParam._m0[86u].x;
    float _2760 = _888 / cbSceneParam._m0[86u].y;
    vec4 _2774 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2776 = _2774.x;
    float _2777 = _2774.y;
    float _2778 = _2774.z;
    float _2779 = _2774.w;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _2834 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _2835 = _2834 / _822;
        float _2846 = _2835 * _872;
        float _2847 = _873 * _2835;
        float _2848 = (-0.0) - _2847;
        float _2849 = _2835 * _874;
        float _2851 = (cbSceneParam._m0[77u].w * _2848) / _2834;
        float _2852 = _2851 + cbSceneParam._m0[79u].w;
        float _2853 = cbSceneParam._m0[79u].w - _2847;
        float _2859 = sqrt(((_2846 * _2846) + (_2847 * _2847)) + (_2849 * _2849));
        float _2862 = (1.0 - (cbSceneParam._m0[77u].w / _2834)) * _2859;
        float _2867 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2869 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3022;
        if (abs((_2848 - _2851) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3022 = ((((_2852 > 0.0) ? exp2(_2867 * _2852) : (2.0 - exp2(_2869 * _2852))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2862;
        }
        else
        {
            float _2982 = 1.0 / cbSceneParam._m0[80u].x;
            float _2983 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : max(_2852, _2853));
            float _2984 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : min(_2852, _2853));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            _3022 = ((abs(_2859 / _2848) * cbSceneParam._m0[80u].y) * ((((_2993 - _2994) * 2.0) - ((exp2(_2867 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0)))) - exp2(_2867 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))))) * _2982)) - ((exp2(_2869 * _2993) - exp2(_2869 * _2994)) * _2982))) + (_2862 * cbSceneParam._m0[80u].z);
        }
        vec4 _3024 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, 1.0), 0.0);
        float _3033 = exp2((_3022 * (-1.44269502162933349609375)) * (1.0 - _3024.w));
        float _3034 = log2(_3033);
        float _3050 = log2(_2779);
        _2871 = (exp2(_3050 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].x)) * _3024.x) / cbSceneParam._m0[78u].x)) + _2776;
        _2873 = (exp2(_3050 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].y)) * _3024.y) / cbSceneParam._m0[78u].y)) + _2777;
        _2875 = (exp2(_3050 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].z)) * _3024.z) / cbSceneParam._m0[78u].z)) + _2778;
        _2877 = _3033 * _2779;
    }
    else
    {
        _2871 = _2776;
        _2873 = _2777;
        _2875 = _2778;
        _2877 = _2779;
    }
    float _2889 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2890 = _2889 == 3.0;
    float _2891 = log2(_2877);
    float _2898 = exp2(_2891 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2721 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _965))) + ((_2727 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2899 = exp2(_2891 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2723 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _965))) + ((_2729 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2900 = exp2(_2891 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2725 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _965))) + ((_2731 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2909 = (_2889 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2909 * (_2890 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.y = _2909 * (_2890 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.z = _2909 * (_2890 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.w = cbInstanceData._m0[_2751].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2751].w;
}


