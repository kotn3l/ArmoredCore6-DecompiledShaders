#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1317;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3665 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3676 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _534 = ((_506.x - _525) * _385) + _525;
    float _535 = ((_506.y - _526) * _385) + _526;
    float _536 = ((_506.z - _527) * _385) + _527;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _561 = ((_548.z - _536) * _458) + _536;
    float _564 = ((((_548.x - _534) * _458) + _534) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _535) * _458) + _535) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _3687 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _627 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_613 - _614) * cbMtdParam._m0[24u].z) + _614) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3698 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _635 = (_628 * ((_486.x * cbMtdParam._m0[18u].x) - _465)) + _465;
    float _636 = (_628 * ((_486.y * cbMtdParam._m0[18u].y) - _466)) + _466;
    float _637 = (_628 * ((_486.z * cbMtdParam._m0[18u].z) - _467)) + _467;
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _663 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _665 = _663.x;
    float _683 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _665) * _385) + _665;
    float _700 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _683) * _458) + _683;
    float _704 = ((_649.x - _700) * cbMtdParam._m0[19u].z) + _700;
    float _706 = _704 - (_704 * _628);
    float _710 = (cbMtdParam._m0[19u].w * (_586.z - _561)) + _561;
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _730 = (_723.x * 2.0) + (-1.0);
    float _731 = (_723.y * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3709 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _740 = (_628 * (_723.z - _710)) + _710;
    float _743 = (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _564;
    float _744 = (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    float _756 = (((_730 - _743) + (cbMtdParam._m0[21u].x * _743)) * _628) + _743;
    float _757 = (((_731 - _744) + (cbMtdParam._m0[21u].x * _744)) * _628) + _744;
    float _758 = (_628 * (sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _572)) + _572;
    float _763 = cbMtdParam._m0[22u].x + _586.w;
    float _766 = fma(_758, _233 * NORMAL.x, fma(_757, _240 * TANGENT.x, (_226 * _218) * _756));
    float _769 = fma(_758, _233 * NORMAL.y, fma(_757, _240 * TANGENT.y, (_226 * _219) * _756));
    float _772 = fma(_758, _233 * NORMAL.z, fma(_757, _240 * TANGENT.z, (_226 * _220) * _756));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _777 = _776 * _766;
    float _778 = _776 * _769;
    float _779 = _776 * _772;
    float _3720 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _780 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3742 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3753 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3764 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3775 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _785 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _799 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _850 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _840);
    float _851 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _840);
    float _852 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _840);
    float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
    float _857 = _850 * _856;
    float _858 = _851 * _856;
    float _859 = _852 * _856;
    float _865 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _866 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _884 = fma(_779, cbSceneParam._m0[5u].z, fma(_778, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _777));
    float _887 = fma(_779, cbSceneParam._m0[6u].z, fma(_778, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _777));
    float _890 = fma(_779, cbSceneParam._m0[7u].z, fma(_778, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _777));
    uint _904 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _910 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_904].x;
    float _911 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_904].y;
    float _912 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_904].z;
    float _3786 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _916 = 1.0 - _785;
    float _917 = _913 * _916;
    float _918 = _914 * _916;
    float _919 = _915 * _916;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _785;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _785;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _785;
    float _927 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _865, cbSceneParam._m0[86u].y * _866));
    float _943 = ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * TEXCOORD_5.w) * _939.x;
    float _944 = dot(vec3(_777, _778, _779), vec3(_857, _858, _859));
    float _947 = _944 * 2.0;
    float _951 = (_947 * _777) - _857;
    float _952 = (_947 * _778) - _858;
    float _953 = (_947 * _779) - _859;
    float _957 = abs(dot(vec3(_857, _858, _859), vec3(_777, _778, _779)));
    float _3819 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_780);
    float _972 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _978 = (1.0 - _972) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _979 = _972 * _959;
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_1015, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007));
        float _1045 = fma(_1015, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007));
        float _1049 = fma(_1015, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007));
        float _1074 = _1007 + _777;
        float _1075 = _1011 + _778;
        float _1076 = _1015 + _779;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1041;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1045;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1049;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_777, _778, _779), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3867 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_777, _778, _779), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3900 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_777, _778, _779), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3933 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1355 = fma(_1015, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007));
        float _1359 = fma(_1015, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007));
        float _1363 = fma(_1015, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007));
        float _1386 = _1007 + _777;
        float _1387 = _1011 + _778;
        float _1388 = _1015 + _779;
        float _1398 = fma(_1388, cbModelParam._m0[30u].z, fma(_1387, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1386)) - _1355;
        float _1399 = fma(_1388, cbModelParam._m0[31u].z, fma(_1387, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1386)) - _1359;
        float _1400 = fma(_1388, cbModelParam._m0[32u].z, fma(_1387, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1386)) - _1363;
        float _1404 = inversesqrt(dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400)));
        float _1417 = ((_1404 * _1398) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1355 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1404 * _1399) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1359 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1404 * _1400) / cbModelParam._m0[35u].z) + ((((((_1363 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        float _1454 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1421.x + (-0.5));
        float _1456 = _1454 * (_1421.y + (-0.5));
        float _1457 = _1454 * (_1421.z + (-0.5));
        float _1464 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1428.x + (-0.5));
        float _1466 = _1464 * (_1428.y + (-0.5));
        float _1467 = _1464 * (_1428.z + (-0.5));
        float _1474 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1435.x + (-0.5));
        float _1476 = _1474 * (_1435.y + (-0.5));
        float _1477 = _1474 * (_1435.z + (-0.5));
        float _1484 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1442.x + (-0.5));
        float _1486 = _1484 * (_1442.y + (-0.5));
        float _1487 = _1484 * (_1442.z + (-0.5));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = _1455 * 0.5;
        float _1492 = _1465 * 0.5;
        float _1493 = _1475 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_777, _778, _779), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _3996 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1518 + 1.0))) + _1523) * _1488;
        float _1533 = _1456 * 0.5;
        float _1534 = _1466 * 0.5;
        float _1535 = _1476 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_777, _778, _779), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4029 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1560 + 1.0))) + _1565) * _1489;
        float _1575 = _1457 * 0.5;
        float _1576 = _1467 * 0.5;
        float _1577 = _1477 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_777, _778, _779), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4062 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1602 + 1.0))) + _1607) * _1490;
        _1624 = _1457;
        _1625 = _1456;
        _1626 = _1455;
        _1627 = _1467;
        _1628 = _1466;
        _1629 = _1465;
        _1630 = _1477;
        _1631 = _1476;
        _1632 = _1475;
        _1633 = _1490;
        _1634 = _1489;
        _1635 = _1488;
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
    }
    else
    {
        _1624 = _1317;
        _1625 = _1317;
        _1626 = _1317;
        _1627 = _1317;
        _1628 = _1317;
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1329)) + _1329;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1330)) + _1330;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1331)) + _1331;
    float _1671 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1648));
    float _1692 = _951 * 0.5;
    float _1693 = _952 * 0.5;
    float _1694 = _953 * 0.5;
    float _1695 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1698 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1701 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1735;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1708 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1712 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1716 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1723 = dot(vec4(cbModelParam._m0[39u]), vec4(_1692, _1693, _1694, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1746;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1737 = dot(vec4(cbModelParam._m0[40u]), vec4(_1692, _1693, _1694, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1737) ? 0.0 : (isnan(0.0) ? _1737 : max(0.0, _1737))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1750 = (_1746 * cbModelParam._m0[1u].x) + (_1735 * (1.0 - cbModelParam._m0[1u].x));
    float _1760 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1760 : min(cbModelParam._m0[25u].z, _1760));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_1015, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_1015, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_1015, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_953, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951));
        float _1822 = fma(_953, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951));
        float _1825 = fma(_953, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1853 = frontier_phi_14_12_ladder;
        }
        float _2076;
        if (_1822 > 0.0)
        {
            _2076 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2076 = frontier_phi_23_19_ladder;
        }
        float _2333;
        if (_1825 > 0.0)
        {
            _2333 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2333 = frontier_phi_35_30_ladder;
        }
        float _2335 = isnan(_2076) ? _1853 : (isnan(_1853) ? _2076 : min(_1853, _2076));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1819) + _1808;
        float _2341 = (_2336 * _1822) + _1812;
        float _2342 = (_2336 * _1825) + _1816;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1761);
            frontier_phi_13_35_ladder = _2470.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2470.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2470.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_13_35_ladder_2;
        _1843 = frontier_phi_13_35_ladder_1;
        _1845 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_951, _952, _953), _1761);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1903 = fma(_1015, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007)) + cbModelParam._m0[21u].w;
        float _1907 = fma(_1015, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007)) + cbModelParam._m0[22u].w;
        float _1911 = fma(_1015, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007)) + cbModelParam._m0[23u].w;
        float _1914 = fma(_953, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951));
        float _1917 = fma(_953, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951));
        float _1920 = fma(_953, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951));
        float _2081;
        if (_1914 > 0.0)
        {
            _2081 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2081 = frontier_phi_25_21_ladder;
        }
        float _2360;
        if (_1917 > 0.0)
        {
            _2360 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2360 = frontier_phi_37_32_ladder;
        }
        float _2573;
        if (_1920 > 0.0)
        {
            _2573 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2573 = frontier_phi_46_43_ladder;
        }
        float _2575 = isnan(_2360) ? _2081 : (isnan(_2081) ? _2360 : min(_2081, _2360));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1914) + _1903;
        float _2581 = (_2576 * _1917) + _1907;
        float _2582 = (_2576 * _1920) + _1911;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_22_46_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1939 = frontier_phi_22_46_ladder_2;
        _1941 = frontier_phi_22_46_ladder_1;
        _1943 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_951, _952, _953), _1850);
        _1939 = _1923.x * cbModelParam._m0[1u].z;
        _1941 = _1923.y * cbModelParam._m0[1u].z;
        _1943 = _1923.z * cbModelParam._m0[1u].z;
    }
    float _1956 = (((_978 * _927) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1939 - _1841)) + _1841);
    float _1958 = (((_978 * _929) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1941 - _1843)) + _1843);
    float _1960 = (((_978 * _930) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1943 - _1845)) + _1845);
    float _1963 = fma(_1960, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1956 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1960, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1956 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1960, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, _1956 * cbSceneParam._m0[91u].x));
    vec4 _1977 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_865, _866));
    float _1979 = _1977.w;
    float _1991 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1979);
    float _1992 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1979);
    float _1993 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1979);
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2007 = _943 + (-1.0);
    float _2012 = (cbLight._m0[_2000].x * _2007) + 1.0;
    float _2013 = (cbLight._m0[_2000].y * _2007) + 1.0;
    float _2014 = (cbLight._m0[_2000].z * _2007) + 1.0;
    float _2015 = (cbLight._m0[_2000].w * _2007) + 1.0;
    uint _2016 = _1999 + 5u;
    float _2022 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2026 = _1999 + 4u;
    float _2035 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2039 = _1999 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_777, _778, _779));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_777, _778, _779));
    float _4198 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4209 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2016].x * _2022) * _2060) + (((cbLight._m0[_2026].x * _1991) * _2035) * _2058);
    float _2068 = ((_2022 * cbLight._m0[_2016].y) * _2060) + (((cbLight._m0[_2026].y * _1992) * _2035) * _2058);
    float _2069 = ((_2022 * cbLight._m0[_2016].z) * _2060) + (((cbLight._m0[_2026].z * _1993) * _2035) * _2058);
    uvec4 _2073 = floatBitsToUint(cbLight._m0[_1999 + 12u]);
    bool _2075 = _2073.x == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2075)
    {
        _2086 = _2067;
        _2088 = _2068;
        _2090 = _2069;
    }
    else
    {
        uint _2094 = _1999 + 6u;
        float _2110 = (dot(vec3(cbLight._m0[_1999 + 2u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4220 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2113 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2086 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _2067;
        _2088 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _2068;
        _2090 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _2069;
    }
    bool _2093 = _2073.y == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2093)
    {
        _2131 = _2086;
        _2133 = _2088;
        _2135 = _2090;
    }
    else
    {
        uint _2304 = _1999 + 7u;
        float _2320 = (dot(vec3(cbLight._m0[_1999 + 3u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4236 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2323 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2131 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2086;
        _2133 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2088;
        _2135 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2090;
    }
    uint _2138 = _1999 + 8u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _780) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1999].x + _857;
    float _2154 = cbLight._m0[_1999].y + _858;
    float _2155 = cbLight._m0[_1999].z + _859;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_1999].xyz));
    float _4252 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2167 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2168 = dot(vec3(_777, _778, _779), vec3(_2160, _2161, _2162));
    float _4274 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2160, _2161, _2162));
    float _4285 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2152 * _2152;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2188 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
    float _2189 = 0.959999978542327880859375 - _924;
    float _2191 = 0.959999978542327880859375 - _925;
    float _2192 = 0.959999978542327880859375 - _926;
    float _2199 = 1.0 - _2152;
    float _2210 = (0.5 / (((_2167 * ((_2166 * _2199) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2199) + _2152) * _2166))) * _2166;
    float _4296 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    uint _2226 = _1999 + 9u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _780) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2039].x + _857;
    float _2240 = cbLight._m0[_2039].y + _858;
    float _2241 = cbLight._m0[_2039].z + _859;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2039].xyz));
    float _4307 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2253 = dot(vec3(_777, _778, _779), vec3(_2246, _2247, _2248));
    float _4318 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2246, _2247, _2248));
    float _4329 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2238 * _2238;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0);
    float _2279 = 1.0 - _2238;
    float _2289 = (0.5 / (((_2167 * ((_2252 * _2279) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2279) + _2238) * _2252))) * _2252;
    float _4340 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    float _2301 = (((((_2272 * _2189) + _927) * cbLight._m0[_2226].x) * _2291) * _2022) + ((((cbLight._m0[_2138].x * _1991) * ((_2188 * _2189) + _927)) * _2212) * _2035);
    float _2302 = (((((_2272 * _2191) + _929) * cbLight._m0[_2226].y) * _2291) * _2022) + ((((cbLight._m0[_2138].y * _1992) * ((_2188 * _2191) + _929)) * _2212) * _2035);
    float _2303 = (((((_2272 * _2192) + _930) * cbLight._m0[_2226].z) * _2291) * _2022) + ((((cbLight._m0[_2138].z * _1993) * ((_2188 * _2192) + _930)) * _2212) * _2035);
    float _2365;
    float _2367;
    float _2369;
    if (_2075)
    {
        _2365 = _2301;
        _2367 = _2302;
        _2369 = _2303;
    }
    else
    {
        uint _2371 = _1999 + 2u;
        uint _2375 = _1999 + 10u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _780) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _857;
        float _2392 = cbLight._m0[_2371].y + _858;
        float _2393 = cbLight._m0[_2371].z + _859;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2371].xyz));
        float _4351 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2405 = dot(vec3(_777, _778, _779), vec3(_2398, _2399, _2400));
        float _4362 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4373 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2167 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2431) + _2390) * _2404))) * _2404;
        float _4384 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2365 = (((((_2424 * _2189) + _927) * cbLight._m0[_2375].x) * _2443) * _2444) + _2301;
        _2367 = (((((_2424 * _2191) + _929) * cbLight._m0[_2375].y) * _2443) * _2444) + _2302;
        _2369 = (((((_2424 * _2192) + _930) * cbLight._m0[_2375].z) * _2443) * _2444) + _2303;
    }
    float _2479;
    float _2481;
    float _2483;
    if (_2093)
    {
        _2479 = _2365;
        _2481 = _2367;
        _2483 = _2369;
    }
    else
    {
        uint _2490 = _1999 + 3u;
        uint _2494 = _1999 + 11u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _780) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _857;
        float _2511 = cbLight._m0[_2490].y + _858;
        float _2512 = cbLight._m0[_2490].z + _859;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2490].xyz));
        float _4400 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2524 = dot(vec3(_777, _778, _779), vec3(_2517, _2518, _2519));
        float _4411 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4422 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
        float _2550 = 1.0 - _2509;
        float _2560 = (0.5 / (((_2167 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2550) + _2509) * _2523))) * _2523;
        float _4433 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2479 = (((((_2543 * _2189) + _927) * cbLight._m0[_2494].x) * _2562) * _2563) + _2365;
        _2481 = (((((_2543 * _2191) + _929) * cbLight._m0[_2494].y) * _2562) * _2563) + _2367;
        _2483 = (((((_2543 * _2192) + _930) * cbLight._m0[_2494].z) * _2562) * _2563) + _2369;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_1997.y == 0u)
    {
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2638;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2638;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2638;
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _866) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _865) / _2654)));
        float _2675 = (log2(_2641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            uint _2937 = 0u;
            uint _2946;
            bool _2947;
            for (;;)
            {
                _2946 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                _2947 = _2946 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2947)
                {
                    frontier_phi_61_pred = _2931;
                    frontier_phi_61_pred_1 = _2936;
                    frontier_phi_61_pred_2 = _2935;
                    frontier_phi_61_pred_3 = _2934;
                    frontier_phi_61_pred_4 = _2933;
                    frontier_phi_61_pred_5 = _2932;
                }
                else
                {
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    uint _3061;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2946;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    for (;;)
                    {
                        uint _3065 = uint(findLSB(_3061)) + (_2937 << 5u);
                        uint _3062 = (_3061 + 4294967295u) & _3061;
                        uint _3067 = _3065 * 48u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3087 = (_3065 * 48u) + 4u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3106 = (_3065 * 48u) + 8u;
                        vec3 _3117 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x));
                        float _3121 = _3081.x - _2639;
                        float _3122 = _3081.y - _2640;
                        float _3123 = _3081.z - _2641;
                        float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                        float _3127 = inversesqrt(_3124);
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3131 = dot(vec3(_884, _887, _890), vec3(_3128, _3129, _3130));
                        float _3136 = 1.0 - (_3124 * _3081.w);
                        float _4459 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3138 = sqrt(_3124) * _3100.w;
                        float _3141 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3131) + _3142;
                        float _3148 = _3138 * _3138;
                        float _3152 = ((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3137) / ((_3148 * 0.699999988079071044921875) + 1.0);
                        float _3156 = (-0.0) - _2639;
                        float _3157 = (-0.0) - _2640;
                        float _3158 = (-0.0) - _2641;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3173 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _959;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3163 + _3128;
                        float _3185 = _3164 + _3129;
                        float _3186 = _3165 + _3130;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_884, _887, _890), vec3(_3163, _3164, _3165));
                        float _4475 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3198 = dot(vec3(_884, _887, _890), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4486 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3141 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3131) + _3207;
                        float _4497 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4508 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3205 * _3205) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125))) * _3137;
                        _2990 = (_3152 * _3100.x) + _3058;
                        _2991 = (_3152 * _3100.y) + _3059;
                        _2992 = (_3152 * _3100.z) + _3060;
                        _2987 = (_3233 * _3117.x) + _3055;
                        _2988 = (_3233 * _3117.y) + _3056;
                        _2989 = (_3233 * _3117.z) + _3057;
                        if (_3062 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _3062;
                        }
                    }
                    frontier_phi_61_pred = _2987;
                    frontier_phi_61_pred_1 = _2992;
                    frontier_phi_61_pred_2 = _2991;
                    frontier_phi_61_pred_3 = _2990;
                    frontier_phi_61_pred_4 = _2989;
                    frontier_phi_61_pred_5 = _2988;
                }
                _2787 = frontier_phi_61_pred;
                _2797 = frontier_phi_61_pred_1;
                _2795 = frontier_phi_61_pred_2;
                _2793 = frontier_phi_61_pred_3;
                _2791 = frontier_phi_61_pred_4;
                _2789 = frontier_phi_61_pred_5;
                uint _2938 = _2937 + 1u;
                if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2931 = _2787;
                    _2932 = _2789;
                    _2933 = _2791;
                    _2934 = _2793;
                    _2935 = _2795;
                    _2936 = _2797;
                    _2937 = _2938;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        if (((4294967295u << _2803) & _2685) == 0u)
        {
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
            _2905 = _2792;
            _2907 = _2794;
            _2909 = _2796;
        }
        else
        {
            float _2924 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
            float _2925 = _2924 * _2639;
            float _2926 = _2924 * _2640;
            float _2927 = _2924 * _2641;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _3038 = _2786;
                float _3039 = _2788;
                float _3040 = _2790;
                float _3041 = _2792;
                float _3042 = _2794;
                float _3043 = _2796;
                uint _3044 = _2803;
                uint _3053;
                bool _3054;
                for (;;)
                {
                    _3053 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                    _3054 = _3053 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3054)
                    {
                        frontier_phi_67_pred = _3041;
                        frontier_phi_67_pred_1 = _3042;
                        frontier_phi_67_pred_2 = _3043;
                        frontier_phi_67_pred_3 = _3040;
                        frontier_phi_67_pred_4 = _3039;
                        frontier_phi_67_pred_5 = _3038;
                    }
                    else
                    {
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        float _3253 = _3040;
                        float _3254 = _3041;
                        float _3255 = _3042;
                        float _3256 = _3043;
                        uint _3257 = _3053;
                        uint _3258;
                        vec4 _3283;
                        float _3284;
                        vec4 _3299;
                        vec3 _3311;
                        vec4 _3326;
                        vec4 _3341;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3268 = ((_3044 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3257));
                            _3258 = (_3257 + 4294967295u) & _3257;
                            uint _3270 = _3268 * 40u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            _3284 = _3283.w;
                            uint _3286 = (_3268 * 40u) + 4u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3268 * 40u) + 8u;
                            _3311 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x));
                            uint _3313 = (_3268 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3268 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3268 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3268 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_2641, _3375.z, fma(_2640, _3375.y, _3375.x * _2639)) + _3375.w;
                            _3388 = !((fma(_2641, _3356.z, fma(_2640, _3356.y, _3356.x * _2639)) + _3356.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3283.x - _2639;
                                float _3416 = _3283.y - _2640;
                                float _3417 = _3283.z - _2641;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3284 * _3284));
                                float _4519 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3433 = sqrt(_3418) * _3299.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_884, _887, _890))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_2641, _3326.z, fma(_2640, _3326.y, _3326.x * _2639)) + _3326.w) / _3387;
                                float _3447 = (fma(_2641, _3341.z, fma(_2640, _3341.y, _3341.x * _2639)) + _3341.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4535 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _959;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2925;
                                float _3477 = _3423 - _2926;
                                float _3478 = _3424 - _2927;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_884, _887, _890), vec3((-0.0) - _2925, (-0.0) - _2926, (-0.0) - _2927));
                                float _4546 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3490 = dot(vec3(_884, _887, _890), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4557 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_884, _887, _890), vec3(_3422, _3423, _3424))) + _3499;
                                float _4568 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4579 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3527 * _3311.x;
                                frontier_phi_73_pred_1 = _3527 * _3311.y;
                                frontier_phi_73_pred_2 = _3453 * _3299.z;
                                frontier_phi_73_pred_3 = _3453 * _3299.y;
                                frontier_phi_73_pred_4 = _3453 * _3299.x;
                                frontier_phi_73_pred_5 = _3527 * _3311.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_73_pred;
                            _3532 = frontier_phi_73_pred_1;
                            _3536 = frontier_phi_73_pred_2;
                            _3535 = frontier_phi_73_pred_3;
                            _3534 = frontier_phi_73_pred_4;
                            _3533 = frontier_phi_73_pred_5;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            if (_3258 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3258;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3241;
                        frontier_phi_67_pred_1 = _3242;
                        frontier_phi_67_pred_2 = _3243;
                        frontier_phi_67_pred_3 = _3240;
                        frontier_phi_67_pred_4 = _3239;
                        frontier_phi_67_pred_5 = _3238;
                    }
                    _2906 = frontier_phi_67_pred;
                    _2908 = frontier_phi_67_pred_1;
                    _2910 = frontier_phi_67_pred_2;
                    _2904 = frontier_phi_67_pred_3;
                    _2902 = frontier_phi_67_pred_4;
                    _2900 = frontier_phi_67_pred_5;
                    uint _3045 = _3044 + 1u;
                    if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3038 = _2900;
                        _3039 = _2902;
                        _3040 = _2904;
                        _3041 = _2906;
                        _3042 = _2908;
                        _3043 = _2910;
                        _3044 = _3045;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2908;
                frontier_phi_55_56_ladder_1 = _2910;
                frontier_phi_55_56_ladder_2 = _2906;
                frontier_phi_55_56_ladder_3 = _2904;
                frontier_phi_55_56_ladder_4 = _2902;
                frontier_phi_55_56_ladder_5 = _2900;
            }
            else
            {
                frontier_phi_55_56_ladder = _2794;
                frontier_phi_55_56_ladder_1 = _2796;
                frontier_phi_55_56_ladder_2 = _2792;
                frontier_phi_55_56_ladder_3 = _2790;
                frontier_phi_55_56_ladder_4 = _2788;
                frontier_phi_55_56_ladder_5 = _2786;
            }
            _2899 = frontier_phi_55_56_ladder_5;
            _2901 = frontier_phi_55_56_ladder_4;
            _2903 = frontier_phi_55_56_ladder_3;
            _2905 = frontier_phi_55_56_ladder_2;
            _2907 = frontier_phi_55_56_ladder;
            _2909 = frontier_phi_55_56_ladder_1;
        }
        float _2914 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2698 = (_2914 * _2905) + _2131;
        _2700 = (_2914 * _2907) + _2133;
        _2702 = (_2914 * _2909) + _2135;
        _2704 = ((_2899 * _927) * _2914) + _2479;
        _2706 = ((_2901 * _929) * _2914) + _2481;
        _2708 = ((_2903 * _930) * _2914) + _2483;
    }
    else
    {
        _2698 = _2131;
        _2700 = _2133;
        _2702 = _2135;
        _2704 = _2479;
        _2706 = _2481;
        _2708 = _2483;
    }
    float _4595 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4606 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4617 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    uint _2728 = _246 + 6u;
    float _2736 = _865 / cbSceneParam._m0[86u].x;
    float _2737 = _866 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _799 : (isnan(_799) ? cbSceneParam._m0[77u].w : min(_799, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_799 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_799) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _799 : min(cbSceneParam._m0[80u].w, _799));
        float _2812 = _2811 / _799;
        float _2823 = _2812 * _850;
        float _2824 = _851 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2827 = _2812 * _852;
        float _2829 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2830 = _2829 + cbSceneParam._m0[79u].w;
        float _2831 = cbSceneParam._m0[79u].w - _2824;
        float _2837 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2827 * _2827));
        float _2840 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2837;
        float _2845 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2847 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3000;
        if (abs((_2825 - _2829) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3000 = ((((_2830 > 0.0) ? exp2(_2845 * _2830) : (2.0 - exp2(_2847 * _2830))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2840;
        }
        else
        {
            float _2960 = 1.0 / cbSceneParam._m0[80u].x;
            float _2961 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : max(_2830, _2831));
            float _2962 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : min(_2830, _2831));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            _3000 = ((abs(_2837 / _2825) * cbSceneParam._m0[80u].y) * ((((_2971 - _2972) * 2.0) - ((exp2(_2845 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0)))) - exp2(_2845 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))))) * _2960)) - ((exp2(_2847 * _2971) - exp2(_2847 * _2972)) * _2960))) + (_2840 * cbSceneParam._m0[80u].z);
        }
        vec4 _3002 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _3011 = exp2((_3000 * (-1.44269502162933349609375)) * (1.0 - _3002.w));
        float _3012 = log2(_3011);
        float _3028 = log2(_2756);
        _2849 = (exp2(_3028 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3012 * cbSceneParam._m0[78u].x)) * _3002.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2851 = (exp2(_3028 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3012 * cbSceneParam._m0[78u].y)) * _3002.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2853 = (exp2(_3028 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3012 * cbSceneParam._m0[78u].z)) * _3002.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2855 = _3011 * _2756;
    }
    else
    {
        _2849 = _2753;
        _2851 = _2754;
        _2853 = _2755;
        _2855 = _2756;
    }
    float _2867 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2868 = _2867 == 3.0;
    float _2869 = log2(_2855);
    float _2876 = exp2(_2869 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2698 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _943))) + ((_2704 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1750)) * cbPerFrame._m0[3u].x));
    float _2877 = exp2(_2869 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2700 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _943))) + ((_2706 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1750)) * cbPerFrame._m0[3u].x));
    float _2878 = exp2(_2869 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2702 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _943))) + ((_2708 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1750)) * cbPerFrame._m0[3u].x));
    float _2887 = (_2867 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2887 * (_2868 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.y = _2887 * (_2868 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2851)));
    SV_Target.z = _2887 * (_2868 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2853)));
    SV_Target.w = cbInstanceData._m0[_2728].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
}


