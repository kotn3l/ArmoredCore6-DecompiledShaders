#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1138;
float _3520;
float _3521;
float _3522;
float _3523;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3532 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3543 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3554 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) + _327;
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3565 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    float _404 = fma(_395, _221, fma(_401, _228, _400 * _214));
    float _407 = fma(_395, _222, fma(_401, _229, _400 * _215));
    float _410 = fma(_395, _223, fma(_401, _230, _400 * _216));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _452 = _450.x;
    float _453 = 1.0 - _452;
    float _462 = (cbMtdParam._m0[19u].x + dot(vec4(_414 * _404, _414 * _407, _414 * _410, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_452 - _453) * cbMtdParam._m0[24u].z) + _453) * cbMtdParam._m0[21u].z);
    float _3576 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _470 = (_463 * (cbMtdParam._m0[17u].x - _334)) + _334;
    float _471 = (_463 * (cbMtdParam._m0[17u].y - _335)) + _335;
    float _472 = (_463 * (cbMtdParam._m0[17u].z - _336)) + _336;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _487 = _485.x;
    float _489 = _487 - (_487 * _463);
    float _494 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _514 = (_507.x * 2.0) + (-1.0);
    float _515 = (_507.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3587 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _524 = ((_507.z - _494) * _463) + _494;
    float _534 = ((sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) - _395) * _463) + _395;
    float _537 = (((_514 - _400) * _463) + _400) + (cbMtdParam._m0[21u].x * _400);
    float _538 = (((_515 - _401) * _463) + _401) + (cbMtdParam._m0[21u].x * _401);
    float _540 = cbMtdParam._m0[22u].x + _380.w;
    float _543 = fma(_534, _221, fma(_538, _228, _537 * _214));
    float _546 = fma(_534, _222, fma(_538, _229, _537 * _215));
    float _549 = fma(_534, _223, fma(_538, _230, _537 * _216));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3598 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _557 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3620 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3631 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3642 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3653 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _562 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _576 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _627 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _617);
    float _628 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _617);
    float _629 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _617);
    float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
    float _634 = _627 * _633;
    float _635 = _628 * _633;
    float _636 = _629 * _633;
    vec4 _641 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _643 = _641.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _818 = sqrt(((_627 * _627) + (_628 * _628)) + (_629 * _629));
        float _824 = (cbMatDynParam._m0[5u].x * _818) + cbMatDynParam._m0[5u].y;
        float _3664 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _829 = (cbMatDynParam._m0[5u].z * _818) + cbMatDynParam._m0[5u].w;
        float _3675 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) - _825)) + _825) < ((_643 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _655 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _656 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _676 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _679 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _682 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _695 = _254 + 9u;
    uint _696 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_696].z;
    float _3686 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _708 = 1.0 - _562;
    float _709 = _705 * _708;
    float _710 = _706 * _708;
    float _711 = _707 * _708;
    float _716 = (_705 + (-0.039999999105930328369140625)) * _562;
    float _717 = (_706 + (-0.039999999105930328369140625)) * _562;
    float _718 = (_707 + (-0.039999999105930328369140625)) * _562;
    float _719 = _716 + 0.039999999105930328369140625;
    float _721 = _717 + 0.039999999105930328369140625;
    float _722 = _718 + 0.039999999105930328369140625;
    vec4 _731 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _655, cbSceneParam._m0[86u].y * _656));
    float _735 = ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * TEXCOORD_5.w) * _731.x;
    float _736 = dot(vec3(_554, _555, _556), vec3(_634, _635, _636));
    float _739 = _736 * 2.0;
    float _743 = (_739 * _554) - _634;
    float _744 = (_739 * _555) - _635;
    float _745 = (_739 * _556) - _636;
    float _749 = abs(dot(vec3(_634, _635, _636), vec3(_554, _555, _556)));
    float _3719 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _751 = sqrt(_557);
    float _764 = exp2((_751 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_751 * 3.0));
    float _770 = (1.0 - _764) * ((_751 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _771 = _764 * _751;
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1137;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _862 = fma(_807, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799));
        float _866 = fma(_807, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799));
        float _870 = fma(_807, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799));
        float _895 = _799 + _554;
        float _896 = _803 + _555;
        float _897 = _807 + _556;
        float _907 = fma(_897, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895)) - _862;
        float _908 = fma(_897, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895)) - _866;
        float _909 = fma(_897, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895)) - _870;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_862 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_866 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[34u].z) + ((((((_870 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _965 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_931.x + (-0.5));
        float _967 = _965 * (_931.y + (-0.5));
        float _968 = _965 * (_931.z + (-0.5));
        float _975 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_938.x + (-0.5));
        float _977 = _975 * (_938.y + (-0.5));
        float _978 = _975 * (_938.z + (-0.5));
        float _985 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_945.x + (-0.5));
        float _987 = _985 * (_945.y + (-0.5));
        float _988 = _985 * (_945.z + (-0.5));
        float _995 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_952.x + (-0.5));
        float _997 = _995 * (_952.y + (-0.5));
        float _998 = _995 * (_952.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1019 = (dot(vec3(_554, _555, _556), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1029 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3767 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1031 + 1.0))) + _1036) * _999;
        float _1046 = _967 * 0.5;
        float _1047 = _977 * 0.5;
        float _1048 = _987 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_554, _555, _556), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3800 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1073 + 1.0))) + _1078) * _1000;
        float _1088 = _968 * 0.5;
        float _1089 = _978 * 0.5;
        float _1090 = _988 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_554, _555, _556), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3833 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1115 + 1.0))) + _1120) * _1001;
        _1137 = _968;
        _1139 = _967;
        _1140 = _966;
        _1141 = _978;
        _1142 = _977;
        _1143 = _976;
        _1144 = _988;
        _1145 = _987;
        _1146 = _986;
        _1147 = _1001;
        _1148 = _1000;
        _1149 = _999;
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _1138;
        _1139 = _1138;
        _1140 = _1138;
        _1141 = _1138;
        _1142 = _1138;
        _1143 = _1138;
        _1144 = _1138;
        _1145 = _1138;
        _1146 = _1138;
        _1147 = _1138;
        _1148 = _1138;
        _1149 = _1138;
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1180 = fma(_807, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799));
        float _1184 = fma(_807, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799));
        float _1188 = fma(_807, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799));
        float _1211 = _799 + _554;
        float _1212 = _803 + _555;
        float _1213 = _807 + _556;
        float _1223 = fma(_1213, cbModelParam._m0[30u].z, fma(_1212, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211)) - _1180;
        float _1224 = fma(_1213, cbModelParam._m0[31u].z, fma(_1212, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211)) - _1184;
        float _1225 = fma(_1213, cbModelParam._m0[32u].z, fma(_1212, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211)) - _1188;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1180 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1184 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[35u].z) + ((((((_1188 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1279 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1246.x + (-0.5));
        float _1281 = _1279 * (_1246.y + (-0.5));
        float _1282 = _1279 * (_1246.z + (-0.5));
        float _1289 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1253.x + (-0.5));
        float _1291 = _1289 * (_1253.y + (-0.5));
        float _1292 = _1289 * (_1253.z + (-0.5));
        float _1299 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1260.x + (-0.5));
        float _1301 = _1299 * (_1260.y + (-0.5));
        float _1302 = _1299 * (_1260.z + (-0.5));
        float _1309 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1267.x + (-0.5));
        float _1311 = _1309 * (_1267.y + (-0.5));
        float _1312 = _1309 * (_1267.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_554, _555, _556), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3896 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1343 + 1.0))) + _1348) * _1313;
        float _1358 = _1281 * 0.5;
        float _1359 = _1291 * 0.5;
        float _1360 = _1301 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_554, _555, _556), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3929 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1385 + 1.0))) + _1390) * _1314;
        float _1400 = _1282 * 0.5;
        float _1401 = _1292 * 0.5;
        float _1402 = _1302 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_554, _555, _556), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3962 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1427 + 1.0))) + _1432) * _1315;
        _1449 = _1282;
        _1450 = _1281;
        _1451 = _1280;
        _1452 = _1292;
        _1453 = _1291;
        _1454 = _1290;
        _1455 = _1302;
        _1456 = _1301;
        _1457 = _1300;
        _1458 = _1315;
        _1459 = _1314;
        _1460 = _1313;
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1138;
        _1450 = _1138;
        _1451 = _1138;
        _1452 = _1138;
        _1453 = _1138;
        _1454 = _1138;
        _1455 = _1138;
        _1456 = _1138;
        _1457 = _1138;
        _1458 = _1138;
        _1459 = _1138;
        _1460 = _1138;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1150)) + _1150;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1151)) + _1151;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1152)) + _1152;
    float _1496 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1473));
    float _1517 = _743 * 0.5;
    float _1518 = _744 * 0.5;
    float _1519 = _745 * 0.5;
    float _1520 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1523 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1526 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1560;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1533 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1137, _1141, _1144, _1147));
        float _1537 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1541 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1548 = dot(vec4(cbModelParam._m0[39u]), vec4(_1517, _1518, _1519, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1571;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1562 = dot(vec4(cbModelParam._m0[40u]), vec4(_1517, _1518, _1519, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1575 = (_1571 * cbModelParam._m0[1u].x) + (_1560 * (1.0 - cbModelParam._m0[1u].x));
    float _1585 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1585 : min(cbModelParam._m0[25u].z, _1585));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1634 = fma(_807, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799)) + cbModelParam._m0[13u].w;
        float _1638 = fma(_807, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799)) + cbModelParam._m0[14u].w;
        float _1642 = fma(_807, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799)) + cbModelParam._m0[15u].w;
        float _1645 = fma(_745, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743));
        float _1648 = fma(_745, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743));
        float _1651 = fma(_745, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743));
        float _1679;
        if (_1645 > 0.0)
        {
            _1679 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1679 = frontier_phi_17_15_ladder;
        }
        float _1883;
        if (_1648 > 0.0)
        {
            _1883 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1883 = frontier_phi_26_22_ladder;
        }
        float _2137;
        if (_1651 > 0.0)
        {
            _2137 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2137 = frontier_phi_38_33_ladder;
        }
        float _2139 = isnan(_1883) ? _1679 : (isnan(_1679) ? _1883 : min(_1679, _1883));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1645) + _1634;
        float _2145 = (_2140 * _1648) + _1638;
        float _2146 = (_2140 * _1651) + _1642;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1586);
            frontier_phi_16_38_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1667 = frontier_phi_16_38_ladder_2;
        _1669 = frontier_phi_16_38_ladder_1;
        _1671 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_743, _744, _745), _1586);
        _1667 = _1655.x * cbModelParam._m0[1u].y;
        _1669 = _1655.y * cbModelParam._m0[1u].y;
        _1671 = _1655.z * cbModelParam._m0[1u].y;
    }
    float _1675 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1675 : min(cbModelParam._m0[25u].w, _1675));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1730 = fma(_807, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799)) + cbModelParam._m0[21u].w;
        float _1734 = fma(_807, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799)) + cbModelParam._m0[22u].w;
        float _1738 = fma(_807, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799)) + cbModelParam._m0[23u].w;
        float _1741 = fma(_745, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743));
        float _1744 = fma(_745, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743));
        float _1747 = fma(_745, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743));
        float _1888;
        if (_1741 > 0.0)
        {
            _1888 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1888 = frontier_phi_28_24_ladder;
        }
        float _2164;
        if (_1744 > 0.0)
        {
            _2164 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2164 = frontier_phi_40_35_ladder;
        }
        float _2377;
        if (_1747 > 0.0)
        {
            _2377 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2377 = frontier_phi_49_46_ladder;
        }
        float _2379 = isnan(_2164) ? _1888 : (isnan(_1888) ? _2164 : min(_1888, _2164));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1741) + _1730;
        float _2385 = (_2380 * _1744) + _1734;
        float _2386 = (_2380 * _1747) + _1738;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1676);
            frontier_phi_25_49_ladder = _2585.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2585.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2585.x * cbModelParam._m0[1u].z;
        }
        _1766 = frontier_phi_25_49_ladder_2;
        _1768 = frontier_phi_25_49_ladder_1;
        _1770 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_743, _744, _745), _1676);
        _1766 = _1750.x * cbModelParam._m0[1u].z;
        _1768 = _1750.y * cbModelParam._m0[1u].z;
        _1770 = _1750.z * cbModelParam._m0[1u].z;
    }
    float _1783 = (((_770 * _719) + _771) * _735) * ((cbModelParam._m0[1u].w * (_1766 - _1667)) + _1667);
    float _1785 = (((_770 * _721) + _771) * _735) * ((cbModelParam._m0[1u].w * (_1768 - _1669)) + _1669);
    float _1787 = (((_770 * _722) + _771) * _735) * ((cbModelParam._m0[1u].w * (_1770 - _1671)) + _1671);
    float _1790 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, _1783 * cbSceneParam._m0[91u].x));
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1816 = _735 + (-1.0);
    float _1821 = (cbLight._m0[_1809].x * _1816) + 1.0;
    float _1822 = (cbLight._m0[_1809].y * _1816) + 1.0;
    float _1823 = (cbLight._m0[_1809].z * _1816) + 1.0;
    float _1824 = (cbLight._m0[_1809].w * _1816) + 1.0;
    uint _1825 = _1808 + 5u;
    float _1831 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1835 = _1808 + 4u;
    float _1842 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1846 = _1808 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_554, _555, _556));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_554, _555, _556));
    float _4098 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _4109 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1825].x * _1831) * _1867) + ((cbLight._m0[_1835].x * _1842) * _1865);
    float _1875 = ((_1831 * cbLight._m0[_1825].y) * _1867) + ((_1842 * cbLight._m0[_1835].y) * _1865);
    float _1876 = ((_1831 * cbLight._m0[_1825].z) * _1867) + ((_1842 * cbLight._m0[_1835].z) * _1865);
    uvec4 _1880 = floatBitsToUint(cbLight._m0[_1808 + 12u]);
    bool _1882 = _1880.x == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1882)
    {
        _1893 = _1874;
        _1895 = _1875;
        _1897 = _1876;
    }
    else
    {
        uint _1901 = _1808 + 6u;
        float _1917 = (dot(vec3(cbLight._m0[_1808 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _4120 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1920 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1893 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1874;
        _1895 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1875;
        _1897 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1876;
    }
    bool _1900 = _1880.y == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1900)
    {
        _1938 = _1893;
        _1940 = _1895;
        _1942 = _1897;
    }
    else
    {
        uint _2108 = _1808 + 7u;
        float _2124 = (dot(vec3(cbLight._m0[_1808 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4136 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2127 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1938 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _1893;
        _1940 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _1895;
        _1942 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _1897;
    }
    uint _1945 = _1808 + 8u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _557) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1808].x + _634;
    float _1961 = cbLight._m0[_1808].y + _635;
    float _1962 = cbLight._m0[_1808].z + _636;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1808].xyz));
    float _4152 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _1974 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _1975 = dot(vec3(_554, _555, _556), vec3(_1967, _1968, _1969));
    float _4174 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1967, _1968, _1969));
    float _4185 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1959 * _1959;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0);
    float _1996 = 0.959999978542327880859375 - _716;
    float _1998 = 0.959999978542327880859375 - _717;
    float _1999 = 0.959999978542327880859375 - _718;
    float _2006 = 1.0 - _1959;
    float _2017 = (0.5 / (((_1974 * ((_1973 * _2006) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2006) + _1959) * _1973))) * _1973;
    float _4196 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    uint _2030 = _1808 + 9u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _557) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1846].x + _634;
    float _2044 = cbLight._m0[_1846].y + _635;
    float _2045 = cbLight._m0[_1846].z + _636;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1846].xyz));
    float _4207 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2057 = dot(vec3(_554, _555, _556), vec3(_2050, _2051, _2052));
    float _4218 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2061 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2050, _2051, _2052));
    float _4229 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = _2042 * _2042;
    float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
    float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0);
    float _2083 = 1.0 - _2042;
    float _2093 = (0.5 / (((_1974 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2083) + _2042) * _2056))) * _2056;
    float _4240 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
    float _2105 = (((((_2076 * _1996) + _719) * cbLight._m0[_2030].x) * _2095) * _1831) + (((((_1995 * _1996) + _719) * cbLight._m0[_1945].x) * _2019) * _1842);
    float _2106 = (((((_2076 * _1998) + _721) * cbLight._m0[_2030].y) * _2095) * _1831) + (((((_1995 * _1998) + _721) * cbLight._m0[_1945].y) * _2019) * _1842);
    float _2107 = (((((_2076 * _1999) + _722) * cbLight._m0[_2030].z) * _2095) * _1831) + (((((_1995 * _1999) + _722) * cbLight._m0[_1945].z) * _2019) * _1842);
    float _2169;
    float _2171;
    float _2173;
    if (_1882)
    {
        _2169 = _2105;
        _2171 = _2106;
        _2173 = _2107;
    }
    else
    {
        uint _2175 = _1808 + 2u;
        uint _2179 = _1808 + 10u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _557) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _634;
        float _2196 = cbLight._m0[_2175].y + _635;
        float _2197 = cbLight._m0[_2175].z + _636;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2175].xyz));
        float _4251 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2209 = dot(vec3(_554, _555, _556), vec3(_2202, _2203, _2204));
        float _4262 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4273 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2235 = 1.0 - _2194;
        float _2245 = (0.5 / (((_1974 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2235) + _2194) * _2208))) * _2208;
        float _4284 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2169 = (((((_2228 * _1996) + _719) * cbLight._m0[_2179].x) * _2247) * _2248) + _2105;
        _2171 = (((((_2228 * _1998) + _721) * cbLight._m0[_2179].y) * _2247) * _2248) + _2106;
        _2173 = (((((_2228 * _1999) + _722) * cbLight._m0[_2179].z) * _2247) * _2248) + _2107;
    }
    float _2283;
    float _2285;
    float _2287;
    if (_1900)
    {
        _2283 = _2169;
        _2285 = _2171;
        _2287 = _2173;
    }
    else
    {
        uint _2294 = _1808 + 3u;
        uint _2298 = _1808 + 11u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _557) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _634;
        float _2315 = cbLight._m0[_2294].y + _635;
        float _2316 = cbLight._m0[_2294].z + _636;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2294].xyz));
        float _4300 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2328 = dot(vec3(_554, _555, _556), vec3(_2321, _2322, _2323));
        float _4311 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4322 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0);
        float _2354 = 1.0 - _2313;
        float _2364 = (0.5 / (((_1974 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2354) + _2313) * _2327))) * _2327;
        float _4333 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2283 = (((((_2347 * _1996) + _719) * cbLight._m0[_2298].x) * _2366) * _2367) + _2169;
        _2285 = (((((_2347 * _1998) + _721) * cbLight._m0[_2298].y) * _2366) * _2367) + _2171;
        _2287 = (((((_2347 * _1999) + _722) * cbLight._m0[_2298].z) * _2366) * _2367) + _2173;
    }
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_1806.y == 0u)
    {
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2442;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2442;
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2442;
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.x;
        uint _2469 = uint((float(_2457.y) * floor(float(uint(cbSceneParam._m0[85u].y * _656) / _2458))) + floor(float(uint(cbSceneParam._m0[85u].x * _655) / _2458)));
        float _2479 = (log2(_2445 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2480 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        uint _2483 = uint(isnan(14.0) ? _2480 : (isnan(_2480) ? 14.0 : min(_2480, 14.0)));
        uvec4 _2488 = texelFetch(g_lightClusterGridBuffer, int(((_2483 << 2u) + (_2469 << 6u)) >> 2u));
        uint _2489 = _2488.x;
        uint _2490 = _2457.z;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2490 >> 4u) & 15u)) + 4294967295u) & _2489) == 0u) || ((_2490 & 240u) == 0u))
        {
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2759)
                {
                    frontier_phi_66_pred = _2743;
                    frontier_phi_66_pred_1 = _2748;
                    frontier_phi_66_pred_2 = _2747;
                    frontier_phi_66_pred_3 = _2746;
                    frontier_phi_66_pred_4 = _2745;
                    frontier_phi_66_pred_5 = _2744;
                }
                else
                {
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    uint _2894;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2758;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    for (;;)
                    {
                        uint _2898 = uint(findLSB(_2894)) + (_2749 << 5u);
                        uint _2895 = (_2894 + 4294967295u) & _2894;
                        uint _2900 = _2898 * 48u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2920 = (_2898 * 48u) + 4u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2939 = (_2898 * 48u) + 8u;
                        vec3 _2950 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x));
                        float _2954 = _2914.x - _2443;
                        float _2955 = _2914.y - _2444;
                        float _2956 = _2914.z - _2445;
                        float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                        float _2960 = inversesqrt(_2957);
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2964 = dot(vec3(_676, _679, _682), vec3(_2961, _2962, _2963));
                        float _2969 = 1.0 - (_2957 * _2914.w);
                        float _4359 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _2971 = sqrt(_2957) * _2933.w;
                        float _2974 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2964) + _2975;
                        float _2981 = _2971 * _2971;
                        float _2985 = ((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2970) / ((_2981 * 0.699999988079071044921875) + 1.0);
                        float _2989 = (-0.0) - _2443;
                        float _2990 = (-0.0) - _2444;
                        float _2991 = (-0.0) - _2445;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _3006 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                        float _3007 = 1.0 - _751;
                        float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                        float _3015 = _3014 * _3014;
                        float _3016 = _3015 * _3015;
                        float _3017 = _2996 + _2961;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3027 = dot(vec3(_676, _679, _682), vec3(_2996, _2997, _2998));
                        float _4375 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3031 = dot(vec3(_676, _679, _682), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                        float _4386 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                        float _3039 = _2974 * _3015;
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _2964) + _3040;
                        float _4397 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3045 = 1.0 - _3015;
                        float _3055 = (0.5 / (((_3044 * ((_3030 * _3045) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3015) * _3030))) * _3044;
                        float _4408 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3066 = (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) / ((_3038 * _3038) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125))) * _2970;
                        _2818 = (_2985 * _2933.x) + _2891;
                        _2819 = (_2985 * _2933.y) + _2892;
                        _2820 = (_2985 * _2933.z) + _2893;
                        _2815 = (_3066 * _2950.x) + _2888;
                        _2816 = (_3066 * _2950.y) + _2889;
                        _2817 = (_3066 * _2950.z) + _2890;
                        if (_2895 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2895;
                        }
                    }
                    frontier_phi_66_pred = _2815;
                    frontier_phi_66_pred_1 = _2820;
                    frontier_phi_66_pred_2 = _2819;
                    frontier_phi_66_pred_3 = _2818;
                    frontier_phi_66_pred_4 = _2817;
                    frontier_phi_66_pred_5 = _2816;
                }
                _2591 = frontier_phi_66_pred;
                _2601 = frontier_phi_66_pred_1;
                _2599 = frontier_phi_66_pred_2;
                _2597 = frontier_phi_66_pred_3;
                _2595 = frontier_phi_66_pred_4;
                _2593 = frontier_phi_66_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2591;
                    _2744 = _2593;
                    _2745 = _2595;
                    _2746 = _2597;
                    _2747 = _2599;
                    _2748 = _2601;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2607) & _2489) == 0u)
        {
            _2711 = _2590;
            _2713 = _2592;
            _2715 = _2594;
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
            float _2737 = _2736 * _2443;
            float _2738 = _2736 * _2444;
            float _2739 = _2736 * _2445;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2871 = _2590;
                float _2872 = _2592;
                float _2873 = _2594;
                float _2874 = _2596;
                float _2875 = _2598;
                float _2876 = _2600;
                uint _2877 = _2607;
                uint _2886;
                bool _2887;
                for (;;)
                {
                    _2886 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                    _2887 = _2886 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2887)
                    {
                        frontier_phi_77_pred = _2876;
                        frontier_phi_77_pred_1 = _2875;
                        frontier_phi_77_pred_2 = _2874;
                        frontier_phi_77_pred_3 = _2873;
                        frontier_phi_77_pred_4 = _2872;
                        frontier_phi_77_pred_5 = _2871;
                    }
                    else
                    {
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        uint _3099 = _2886;
                        uint _3100;
                        vec4 _3125;
                        float _3126;
                        vec4 _3141;
                        vec3 _3153;
                        vec4 _3168;
                        vec4 _3183;
                        float _3229;
                        bool _3230;
                        for (;;)
                        {
                            uint _3110 = ((_2877 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3099));
                            _3100 = (_3099 + 4294967295u) & _3099;
                            uint _3112 = _3110 * 40u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.w;
                            uint _3128 = (_3110 * 40u) + 4u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3110 * 40u) + 8u;
                            _3153 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x));
                            uint _3155 = (_3110 * 40u) + 16u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3110 * 40u) + 20u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3110 * 40u) + 24u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3204 = (_3110 * 40u) + 28u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3229 = fma(_2445, _3217.z, fma(_2444, _3217.y, _3217.x * _2443)) + _3217.w;
                            _3230 = !((fma(_2445, _3198.z, fma(_2444, _3198.y, _3198.x * _2443)) + _3198.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3230)
                            {
                                float _3257 = _3125.x - _2443;
                                float _3258 = _3125.y - _2444;
                                float _3259 = _3125.z - _2445;
                                float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                                float _3263 = inversesqrt(_3260);
                                float _3264 = _3263 * _3257;
                                float _3265 = _3263 * _3258;
                                float _3266 = _3263 * _3259;
                                float _3270 = 1.0 - (_3260 / (_3126 * _3126));
                                float _4419 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3275 = sqrt(_3260) * _3141.w;
                                float _3277 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                                float _3278 = _3277 * _3277;
                                float _3281 = ((1.0 - _3278) * dot(vec3(_3264, _3265, _3266), vec3(_676, _679, _682))) + _3278;
                                float _3284 = _3275 * _3275;
                                float _3288 = (fma(_2445, _3168.z, fma(_2444, _3168.y, _3168.x * _2443)) + _3168.w) / _3229;
                                float _3289 = (fma(_2445, _3183.z, fma(_2444, _3183.y, _3183.x * _2443)) + _3183.w) / _3229;
                                float _3293 = 1.0 - dot(vec2(_3288, _3289), vec2(_3288, _3289));
                                float _4435 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3295 = _3294 * (((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3271) / ((_3284 * 0.699999988079071044921875) + 1.0));
                                float _3307 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                                float _3308 = 1.0 - _751;
                                float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                                float _3316 = _3315 * _3315;
                                float _3317 = _3316 * _3316;
                                float _3318 = _3264 - _2737;
                                float _3319 = _3265 - _2738;
                                float _3320 = _3266 - _2739;
                                float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                                float _3328 = dot(vec3(_676, _679, _682), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4446 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3332 = dot(vec3(_676, _679, _682), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                                float _4457 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                                float _3340 = _3277 * _3316;
                                float _3341 = _3340 * _3340;
                                float _3347 = ((1.0 - _3341) * dot(vec3(_676, _679, _682), vec3(_3264, _3265, _3266))) + _3341;
                                float _4468 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3349 = 1.0 - _3316;
                                float _3359 = (0.5 / (((_3348 * ((_3331 * _3349) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3316) * _3331))) * _3348;
                                float _4479 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3369 = (_3294 * _3271) * (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3339 * _3339) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3295 * _3141.y;
                                frontier_phi_83_pred_1 = _3295 * _3141.x;
                                frontier_phi_83_pred_2 = _3369 * _3153.z;
                                frontier_phi_83_pred_3 = _3369 * _3153.y;
                                frontier_phi_83_pred_4 = _3369 * _3153.x;
                                frontier_phi_83_pred_5 = _3295 * _3141.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3377 = frontier_phi_83_pred;
                            _3376 = frontier_phi_83_pred_1;
                            _3375 = frontier_phi_83_pred_2;
                            _3374 = frontier_phi_83_pred_3;
                            _3373 = frontier_phi_83_pred_4;
                            _3378 = frontier_phi_83_pred_5;
                            _3083 = _3376 + _3096;
                            _3084 = _3377 + _3097;
                            _3085 = _3378 + _3098;
                            _3080 = _3373 + _3093;
                            _3081 = _3374 + _3094;
                            _3082 = _3375 + _3095;
                            if (_3100 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3100;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3085;
                        frontier_phi_77_pred_1 = _3084;
                        frontier_phi_77_pred_2 = _3083;
                        frontier_phi_77_pred_3 = _3082;
                        frontier_phi_77_pred_4 = _3081;
                        frontier_phi_77_pred_5 = _3080;
                    }
                    _2722 = frontier_phi_77_pred;
                    _2720 = frontier_phi_77_pred_1;
                    _2718 = frontier_phi_77_pred_2;
                    _2716 = frontier_phi_77_pred_3;
                    _2714 = frontier_phi_77_pred_4;
                    _2712 = frontier_phi_77_pred_5;
                    uint _2878 = _2877 + 1u;
                    if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2871 = _2712;
                        _2872 = _2714;
                        _2873 = _2716;
                        _2874 = _2718;
                        _2875 = _2720;
                        _2876 = _2722;
                        _2877 = _2878;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2716;
                frontier_phi_58_59_ladder_1 = _2722;
                frontier_phi_58_59_ladder_2 = _2720;
                frontier_phi_58_59_ladder_3 = _2718;
                frontier_phi_58_59_ladder_4 = _2714;
                frontier_phi_58_59_ladder_5 = _2712;
            }
            else
            {
                frontier_phi_58_59_ladder = _2594;
                frontier_phi_58_59_ladder_1 = _2600;
                frontier_phi_58_59_ladder_2 = _2598;
                frontier_phi_58_59_ladder_3 = _2596;
                frontier_phi_58_59_ladder_4 = _2592;
                frontier_phi_58_59_ladder_5 = _2590;
            }
            _2711 = frontier_phi_58_59_ladder_5;
            _2713 = frontier_phi_58_59_ladder_4;
            _2715 = frontier_phi_58_59_ladder;
            _2717 = frontier_phi_58_59_ladder_3;
            _2719 = frontier_phi_58_59_ladder_2;
            _2721 = frontier_phi_58_59_ladder_1;
        }
        float _2726 = isnan(1.0) ? _735 : (isnan(_735) ? 1.0 : min(_735, 1.0));
        _2502 = (_2726 * _2717) + _1938;
        _2504 = (_2726 * _2719) + _1940;
        _2506 = (_2726 * _2721) + _1942;
        _2508 = ((_2711 * _719) * _2726) + _2283;
        _2510 = ((_2713 * _721) * _2726) + _2285;
        _2512 = ((_2715 * _722) * _2726) + _2287;
    }
    else
    {
        _2502 = _1938;
        _2504 = _1940;
        _2506 = _1942;
        _2508 = _2283;
        _2510 = _2285;
        _2512 = _2287;
    }
    float _4495 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4506 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4517 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _2529 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2502 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _735))) + ((_2508 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    float _2530 = ((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2504 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _735))) + ((_2510 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    float _2531 = ((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2506 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _735))) + ((_2512 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    uint _2532 = _254 + 6u;
    float _2540 = _655 / cbSceneParam._m0[86u].x;
    float _2541 = _656 / cbSceneParam._m0[86u].y;
    vec4 _2555 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, (log2((isnan(cbSceneParam._m0[77u].w) ? _576 : (isnan(_576) ? cbSceneParam._m0[77u].w : min(_576, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2557 = _2555.x;
    float _2558 = _2555.y;
    float _2559 = _2555.z;
    float _2560 = _2555.w;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_576 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_576) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _576 : min(cbSceneParam._m0[80u].w, _576));
        float _2616 = _2615 / _576;
        float _2627 = _2616 * _627;
        float _2628 = _628 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2631 = _2616 * _629;
        float _2633 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2634 = _2633 + cbSceneParam._m0[79u].w;
        float _2635 = cbSceneParam._m0[79u].w - _2628;
        float _2641 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2631 * _2631));
        float _2644 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2641;
        float _2649 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2651 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2828;
        if (abs((_2629 - _2633) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2828 = ((((_2634 > 0.0) ? exp2(_2649 * _2634) : (2.0 - exp2(_2651 * _2634))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2644;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2635) ? _2634 : (isnan(_2634) ? _2635 : max(_2634, _2635));
            float _2774 = isnan(_2635) ? _2634 : (isnan(_2634) ? _2635 : min(_2634, _2635));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2828 = ((abs(_2641 / _2629) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2649 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2649 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2651 * _2783) - exp2(_2651 * _2784)) * _2772))) + (_2644 * cbSceneParam._m0[80u].z);
        }
        vec4 _2830 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, 1.0), 0.0);
        float _2839 = exp2((_2828 * (-1.44269502162933349609375)) * (1.0 - _2830.w));
        float _2840 = log2(_2839);
        float _2856 = log2(_2560);
        _2653 = (exp2(_2856 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].x)) * _2830.x) / cbSceneParam._m0[78u].x)) + _2557;
        _2655 = (exp2(_2856 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].y)) * _2830.y) / cbSceneParam._m0[78u].y)) + _2558;
        _2657 = (exp2(_2856 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].z)) * _2830.z) / cbSceneParam._m0[78u].z)) + _2559;
        _2659 = _2839 * _2560;
    }
    else
    {
        _2653 = _2557;
        _2655 = _2558;
        _2657 = _2559;
        _2659 = _2560;
    }
    bool _2866;
    vec4 _2669;
    vec4 _2691;
    float _2693;
    float _2697;
    float _2698;
    float _2699;
    float _2700;
    bool _2710;
    for (;;)
    {
        _2669 = cbMatDynParam._m0[0u];
        float _2671 = roundEven(_2669.y);
        bool _2672 = _2671 == 3.0;
        float _2673 = log2(_2659);
        float _2680 = exp2(_2673 * cbSceneParam._m0[78u].x) * _2529;
        float _2681 = exp2(_2673 * cbSceneParam._m0[78u].y) * _2530;
        float _2682 = exp2(_2673 * cbSceneParam._m0[78u].z) * _2531;
        float _2689 = _643 + (-0.5);
        _2691 = cbMtdParam._m0[1u];
        _2693 = _2691.y * _2689;
        float _2696 = (_2671 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2697 = _2696 * (_2672 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2653)));
        _2698 = _2696 * (_2672 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2655)));
        _2699 = _2696 * (_2672 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2657)));
        _2700 = _2689 * 0.999000012874603271484375;
        _2710 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2710)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2700) < 0.5)
            {
                _2866 = true;
                break;
            }
        }
        uint _2807 = _695 + uint(_2669.w);
        if ((cbInstanceData._m0[_2807].w < 1.0) && ((cbInstanceData._m0[_2807].w + _2700) < 0.5))
        {
            _2866 = true;
            break;
        }
        if ((_2693 + 1.0) < _2691.x)
        {
            _2866 = true;
            break;
        }
        _2866 = false;
        break;
    }
    float _3071;
    if (_2866)
    {
        discard_state = true;
        _3071 = 0.0;
    }
    else
    {
        _3071 = cbInstanceData._m0[_2532].w;
    }
    SV_Target.x = _2697;
    SV_Target.y = _2698;
    SV_Target.z = _2699;
    SV_Target.w = _3071;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2532].w;
    discard_exit();
}


