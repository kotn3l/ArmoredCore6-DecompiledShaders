#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1095;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3447 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3458 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3469 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) + _325;
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = _378.z;
    float _386 = (_378.x * 2.0) + (-1.0);
    float _387 = (_378.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3480 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _393 = sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))));
    float _398 = _386 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_352.x * 2.0) + (-1.0)));
    float _399 = _387 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_352.y * 2.0) + (-1.0)));
    float _402 = fma(_393, _219, fma(_399, _226, _398 * _212));
    float _405 = fma(_393, _220, fma(_399, _227, _398 * _213));
    float _408 = fma(_393, _221, fma(_399, _228, _398 * _214));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _450 = _448.x;
    float _451 = 1.0 - _450;
    float _460 = (cbMtdParam._m0[19u].x + dot(vec4(_412 * _402, _412 * _405, _412 * _408, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_450 - _451) * cbMtdParam._m0[24u].z) + _451) * cbMtdParam._m0[21u].z);
    float _3491 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _468 = (_461 * (cbMtdParam._m0[17u].x - _332)) + _332;
    float _469 = (_461 * (cbMtdParam._m0[17u].y - _333)) + _333;
    float _470 = (_461 * (cbMtdParam._m0[17u].z - _334)) + _334;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _485 = _483.x;
    float _487 = _485 - (_485 * _461);
    float _492 = (((_352.z - _382) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _382;
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _512 = (_505.x * 2.0) + (-1.0);
    float _513 = (_505.y * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3502 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _522 = ((_505.z - _492) * _461) + _492;
    float _532 = ((sqrt(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) - _393) * _461) + _393;
    float _535 = (((_512 - _398) * _461) + _398) + (cbMtdParam._m0[21u].x * _398);
    float _536 = (((_513 - _399) * _461) + _399) + (cbMtdParam._m0[21u].x * _399);
    float _538 = cbMtdParam._m0[22u].x + _378.w;
    float _541 = fma(_532, _219, fma(_536, _226, _535 * _212));
    float _544 = fma(_532, _220, fma(_536, _227, _535 * _213));
    float _547 = fma(_532, _221, fma(_536, _228, _535 * _214));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3513 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _555 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3535 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3546 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3557 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3568 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _560 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _625 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _615);
    float _626 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _615);
    float _627 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _615);
    float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
    float _632 = _625 * _631;
    float _633 = _626 * _631;
    float _634 = _627 * _631;
    float _640 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _641 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _662 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _665 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _668 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _682 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _688 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_682].x;
    float _689 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_682].y;
    float _690 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_682].z;
    float _3579 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _694 = 1.0 - _560;
    float _695 = _691 * _694;
    float _696 = _692 * _694;
    float _697 = _693 * _694;
    float _702 = (_691 + (-0.039999999105930328369140625)) * _560;
    float _703 = (_692 + (-0.039999999105930328369140625)) * _560;
    float _704 = (_693 + (-0.039999999105930328369140625)) * _560;
    float _705 = _702 + 0.039999999105930328369140625;
    float _707 = _703 + 0.039999999105930328369140625;
    float _708 = _704 + 0.039999999105930328369140625;
    vec4 _717 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _640, cbSceneParam._m0[86u].y * _641));
    float _721 = ((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * TEXCOORD_5.w) * _717.x;
    float _722 = dot(vec3(_552, _553, _554), vec3(_632, _633, _634));
    float _725 = _722 * 2.0;
    float _729 = (_725 * _552) - _632;
    float _730 = (_725 * _553) - _633;
    float _731 = (_725 * _554) - _634;
    float _735 = abs(dot(vec3(_632, _633, _634), vec3(_552, _553, _554)));
    float _3612 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _737 = sqrt(_555);
    float _750 = exp2((_737 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_737 * 3.0));
    float _756 = (1.0 - _750) * ((_737 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _757 = _750 * _737;
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1094;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _819 = fma(_793, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785));
        float _823 = fma(_793, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785));
        float _827 = fma(_793, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785));
        float _852 = _785 + _552;
        float _853 = _789 + _553;
        float _854 = _793 + _554;
        float _864 = fma(_854, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852)) - _819;
        float _865 = fma(_854, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852)) - _823;
        float _866 = fma(_854, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852)) - _827;
        float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
        float _883 = ((_870 * _864) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_819 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_870 * _865) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_823 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_870 * _866) / cbModelParam._m0[34u].z) + ((((((_827 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        float _922 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_888.x + (-0.5));
        float _924 = _922 * (_888.y + (-0.5));
        float _925 = _922 * (_888.z + (-0.5));
        float _932 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_895.x + (-0.5));
        float _934 = _932 * (_895.y + (-0.5));
        float _935 = _932 * (_895.z + (-0.5));
        float _942 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_902.x + (-0.5));
        float _944 = _942 * (_902.y + (-0.5));
        float _945 = _942 * (_902.z + (-0.5));
        float _952 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_909.x + (-0.5));
        float _954 = _952 * (_909.y + (-0.5));
        float _955 = _952 * (_909.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _976 = (dot(vec3(_552, _553, _554), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _986 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3660 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_988 + 1.0))) + _993) * _956;
        float _1003 = _924 * 0.5;
        float _1004 = _934 * 0.5;
        float _1005 = _944 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_552, _553, _554), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3693 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1030 + 1.0))) + _1035) * _957;
        float _1045 = _925 * 0.5;
        float _1046 = _935 * 0.5;
        float _1047 = _945 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_552, _553, _554), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3726 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1072 + 1.0))) + _1077) * _958;
        _1094 = _925;
        _1096 = _924;
        _1097 = _923;
        _1098 = _935;
        _1099 = _934;
        _1100 = _933;
        _1101 = _945;
        _1102 = _944;
        _1103 = _943;
        _1104 = _958;
        _1105 = _957;
        _1106 = _956;
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
    }
    else
    {
        _1094 = _1095;
        _1096 = _1095;
        _1097 = _1095;
        _1098 = _1095;
        _1099 = _1095;
        _1100 = _1095;
        _1101 = _1095;
        _1102 = _1095;
        _1103 = _1095;
        _1104 = _1095;
        _1105 = _1095;
        _1106 = _1095;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_793, cbModelParam._m0[30u].z, fma(_789, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _785));
        float _1138 = fma(_793, cbModelParam._m0[31u].z, fma(_789, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _785));
        float _1142 = fma(_793, cbModelParam._m0[32u].z, fma(_789, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _785));
        float _1165 = _785 + _552;
        float _1166 = _789 + _553;
        float _1167 = _793 + _554;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_552, _553, _554), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3789 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_552, _553, _554), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3822 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_552, _553, _554), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3855 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1095;
        _1404 = _1095;
        _1405 = _1095;
        _1406 = _1095;
        _1407 = _1095;
        _1408 = _1095;
        _1409 = _1095;
        _1410 = _1095;
        _1411 = _1095;
        _1412 = _1095;
        _1413 = _1095;
        _1414 = _1095;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _729 * 0.5;
    float _1472 = _730 * 0.5;
    float _1473 = _731 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1094, _1098, _1101, _1104));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_793, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_793, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_793, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_731, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729));
        float _1602 = fma(_731, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729));
        float _1605 = fma(_731, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1633 = frontier_phi_14_12_ladder;
        }
        float _1858;
        if (_1602 > 0.0)
        {
            _1858 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1858 = frontier_phi_23_19_ladder;
        }
        float _2115;
        if (_1605 > 0.0)
        {
            _2115 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2115 = frontier_phi_35_30_ladder;
        }
        float _2117 = isnan(_1858) ? _1633 : (isnan(_1633) ? _1858 : min(_1633, _1858));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1599) + _1588;
        float _2123 = (_2118 * _1602) + _1592;
        float _2124 = (_2118 * _1605) + _1596;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2125;
        float _2129 = _2125 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 > _2129) || ((_2123 < _2127) || ((_2122 < _2127) || (_2122 > _2129))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2124, cbModelParam._m0[9u].z, fma(_2123, cbModelParam._m0[9u].y, _2122 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2124, cbModelParam._m0[10u].z, fma(_2123, cbModelParam._m0[10u].y, _2122 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2124, cbModelParam._m0[11u].z, fma(_2123, cbModelParam._m0[11u].y, _2122 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_13_35_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_13_35_ladder_2;
        _1623 = frontier_phi_13_35_ladder_1;
        _1625 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_729, _730, _731), _1540);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_793, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_793, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_793, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_731, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729));
        float _1698 = fma(_731, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729));
        float _1701 = fma(_731, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729));
        float _1863;
        if (_1695 > 0.0)
        {
            _1863 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1863 = frontier_phi_25_21_ladder;
        }
        float _2142;
        if (_1698 > 0.0)
        {
            _2142 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2142 = frontier_phi_37_32_ladder;
        }
        float _2355;
        if (_1701 > 0.0)
        {
            _2355 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2355 = frontier_phi_46_43_ladder;
        }
        float _2357 = isnan(_2142) ? _1863 : (isnan(_1863) ? _2142 : min(_1863, _2142));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1695) + _1684;
        float _2363 = (_2358 * _1698) + _1688;
        float _2364 = (_2358 * _1701) + _1692;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2365;
        float _2368 = _2365 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2364 > _2368) || ((_2364 < _2366) || ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 < _2366) || (_2362 > _2368))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2364, cbModelParam._m0[17u].z, fma(_2363, cbModelParam._m0[17u].y, _2362 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2364, cbModelParam._m0[18u].z, fma(_2363, cbModelParam._m0[18u].y, _2362 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2364, cbModelParam._m0[19u].z, fma(_2363, cbModelParam._m0[19u].y, _2362 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_22_46_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_22_46_ladder_2;
        _1722 = frontier_phi_22_46_ladder_1;
        _1724 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_729, _730, _731), _1630);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1737 = (((_756 * _705) + _757) * _721) * ((cbModelParam._m0[1u].w * (_1720 - _1621)) + _1621);
    float _1739 = (((_756 * _707) + _757) * _721) * ((cbModelParam._m0[1u].w * (_1722 - _1623)) + _1623);
    float _1741 = (((_756 * _708) + _757) * _721) * ((cbModelParam._m0[1u].w * (_1724 - _1625)) + _1625);
    float _1744 = fma(_1741, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1741, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1741, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    vec4 _1758 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_640, _641));
    float _1760 = _1758.w;
    float _1772 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1760);
    float _1773 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1760);
    float _1774 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1760);
    uvec4 _1778 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1780 = _1778.x * 14u;
    uint _1781 = _1780 + 13u;
    float _1788 = _721 + (-1.0);
    float _1793 = (cbLight._m0[_1781].x * _1788) + 1.0;
    float _1794 = (cbLight._m0[_1781].y * _1788) + 1.0;
    float _1795 = (cbLight._m0[_1781].z * _1788) + 1.0;
    float _1796 = (cbLight._m0[_1781].w * _1788) + 1.0;
    uint _1797 = _1780 + 5u;
    float _1803 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1807 = _1780 + 4u;
    float _1817 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1821 = _1780 | 1u;
    float _1832 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_552, _553, _554));
    float _1835 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_552, _553, _554));
    float _3991 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _4002 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1840 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1842 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.3183098733425140380859375;
    float _1849 = ((cbLight._m0[_1797].x * _1803) * _1842) + (((cbLight._m0[_1807].x * _1772) * _1817) * _1840);
    float _1850 = ((_1803 * cbLight._m0[_1797].y) * _1842) + (((cbLight._m0[_1807].y * _1773) * _1817) * _1840);
    float _1851 = ((_1803 * cbLight._m0[_1797].z) * _1842) + (((cbLight._m0[_1807].z * _1774) * _1817) * _1840);
    uvec4 _1855 = floatBitsToUint(cbLight._m0[_1780 + 12u]);
    bool _1857 = _1855.x == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1857)
    {
        _1868 = _1849;
        _1870 = _1850;
        _1872 = _1851;
    }
    else
    {
        uint _1876 = _1780 + 6u;
        float _1892 = (dot(vec3(cbLight._m0[_1780 + 2u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _4013 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1895 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _1868 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1849;
        _1870 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1850;
        _1872 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1851;
    }
    bool _1875 = _1855.y == 0u;
    float _1913;
    float _1915;
    float _1917;
    if (_1875)
    {
        _1913 = _1868;
        _1915 = _1870;
        _1917 = _1872;
    }
    else
    {
        uint _2086 = _1780 + 7u;
        float _2102 = (dot(vec3(cbLight._m0[_1780 + 3u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4029 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2105 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1913 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1868;
        _1915 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1870;
        _1917 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1872;
    }
    uint _1920 = _1780 + 8u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _555) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1780].x + _632;
    float _1936 = cbLight._m0[_1780].y + _633;
    float _1937 = cbLight._m0[_1780].z + _634;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1780].xyz));
    float _4045 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _1949 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1950 = dot(vec3(_552, _553, _554), vec3(_1942, _1943, _1944));
    float _4067 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1942, _1943, _1944));
    float _4078 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1934 * _1934;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1970 = exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0);
    float _1971 = 0.959999978542327880859375 - _702;
    float _1973 = 0.959999978542327880859375 - _703;
    float _1974 = 0.959999978542327880859375 - _704;
    float _1981 = 1.0 - _1934;
    float _1992 = (0.5 / (((_1949 * ((_1948 * _1981) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _1981) + _1934) * _1948))) * _1948;
    float _4089 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    uint _2008 = _1780 + 9u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _555) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1821].x + _632;
    float _2022 = cbLight._m0[_1821].y + _633;
    float _2023 = cbLight._m0[_1821].z + _634;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1821].xyz));
    float _4100 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2035 = dot(vec3(_552, _553, _554), vec3(_2028, _2029, _2030));
    float _4111 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_2028, _2029, _2030));
    float _4122 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2020 * _2020;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2054 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
    float _2061 = 1.0 - _2020;
    float _2071 = (0.5 / (((_1949 * ((_2034 * _2061) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2061) + _2020) * _2034))) * _2034;
    float _4133 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    float _2083 = (((((_2054 * _1971) + _705) * cbLight._m0[_2008].x) * _2073) * _1803) + ((((cbLight._m0[_1920].x * _1772) * ((_1970 * _1971) + _705)) * _1994) * _1817);
    float _2084 = (((((_2054 * _1973) + _707) * cbLight._m0[_2008].y) * _2073) * _1803) + ((((cbLight._m0[_1920].y * _1773) * ((_1970 * _1973) + _707)) * _1994) * _1817);
    float _2085 = (((((_2054 * _1974) + _708) * cbLight._m0[_2008].z) * _2073) * _1803) + ((((cbLight._m0[_1920].z * _1774) * ((_1970 * _1974) + _708)) * _1994) * _1817);
    float _2147;
    float _2149;
    float _2151;
    if (_1857)
    {
        _2147 = _2083;
        _2149 = _2084;
        _2151 = _2085;
    }
    else
    {
        uint _2153 = _1780 + 2u;
        uint _2157 = _1780 + 10u;
        float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _555) * 0.949999988079071044921875);
        float _2172 = _2171 * _2171;
        float _2173 = cbLight._m0[_2153].x + _632;
        float _2174 = cbLight._m0[_2153].y + _633;
        float _2175 = cbLight._m0[_2153].z + _634;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2180 = _2179 * _2173;
        float _2181 = _2179 * _2174;
        float _2182 = _2179 * _2175;
        float _2183 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2153].xyz));
        float _4144 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2187 = dot(vec3(_552, _553, _554), vec3(_2180, _2181, _2182));
        float _4155 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2191 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2180, _2181, _2182));
        float _4166 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2195 = _2172 * _2172;
        float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
        float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2213 = 1.0 - _2172;
        float _2223 = (0.5 / (((_1949 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2213) + _2172) * _2186))) * _2186;
        float _4177 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2147 = (((((_2206 * _1971) + _705) * cbLight._m0[_2157].x) * _2225) * _2226) + _2083;
        _2149 = (((((_2206 * _1973) + _707) * cbLight._m0[_2157].y) * _2225) * _2226) + _2084;
        _2151 = (((((_2206 * _1974) + _708) * cbLight._m0[_2157].z) * _2225) * _2226) + _2085;
    }
    float _2261;
    float _2263;
    float _2265;
    if (_1875)
    {
        _2261 = _2147;
        _2263 = _2149;
        _2265 = _2151;
    }
    else
    {
        uint _2272 = _1780 + 3u;
        uint _2276 = _1780 + 11u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _555) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _632;
        float _2293 = cbLight._m0[_2272].y + _633;
        float _2294 = cbLight._m0[_2272].z + _634;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2272].xyz));
        float _4193 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2306 = dot(vec3(_552, _553, _554), vec3(_2299, _2300, _2301));
        float _4204 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4215 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2332 = 1.0 - _2291;
        float _2342 = (0.5 / (((_1949 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2332) + _2291) * _2305))) * _2305;
        float _4226 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2344 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2345 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2261 = (((((_2325 * _1971) + _705) * cbLight._m0[_2276].x) * _2344) * _2345) + _2147;
        _2263 = (((((_2325 * _1973) + _707) * cbLight._m0[_2276].y) * _2344) * _2345) + _2149;
        _2265 = (((((_2325 * _1974) + _708) * cbLight._m0[_2276].z) * _2344) * _2345) + _2151;
    }
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_1778.y == 0u)
    {
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2420;
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2420;
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2420;
        uvec4 _2435 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2436 = _2435.x;
        uint _2447 = uint((float(_2435.y) * floor(float(uint(cbSceneParam._m0[85u].y * _641) / _2436))) + floor(float(uint(cbSceneParam._m0[85u].x * _640) / _2436)));
        float _2457 = (log2(_2423 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2458 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        uint _2461 = uint(isnan(14.0) ? _2458 : (isnan(_2458) ? 14.0 : min(_2458, 14.0)));
        uvec4 _2466 = texelFetch(g_lightClusterGridBuffer, int(((_2461 << 2u) + (_2447 << 6u)) >> 2u));
        uint _2467 = _2466.x;
        uint _2468 = _2435.z;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((((1u << ((_2468 >> 4u) & 15u)) + 4294967295u) & _2467) == 0u) || ((_2468 & 240u) == 0u))
        {
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
        }
        else
        {
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2461 << 5u) + (_2447 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2729)
                {
                    frontier_phi_61_pred = _2713;
                    frontier_phi_61_pred_1 = _2718;
                    frontier_phi_61_pred_2 = _2717;
                    frontier_phi_61_pred_3 = _2716;
                    frontier_phi_61_pred_4 = _2715;
                    frontier_phi_61_pred_5 = _2714;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2728;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2719 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        float _2903 = _2863.x - _2421;
                        float _2904 = _2863.y - _2422;
                        float _2905 = _2863.z - _2423;
                        float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                        float _2909 = inversesqrt(_2906);
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2913 = dot(vec3(_662, _665, _668), vec3(_2910, _2911, _2912));
                        float _2918 = 1.0 - (_2906 * _2863.w);
                        float _4252 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2920 = sqrt(_2906) * _2882.w;
                        float _2923 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2913) + _2924;
                        float _2930 = _2920 * _2920;
                        float _2934 = ((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2919) / ((_2930 * 0.699999988079071044921875) + 1.0);
                        float _2938 = (-0.0) - _2421;
                        float _2939 = (-0.0) - _2422;
                        float _2940 = (-0.0) - _2423;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2955 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2956 = 1.0 - _737;
                        float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                        float _2964 = _2963 * _2963;
                        float _2965 = _2964 * _2964;
                        float _2966 = _2945 + _2910;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2976 = dot(vec3(_662, _665, _668), vec3(_2945, _2946, _2947));
                        float _4268 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2980 = dot(vec3(_662, _665, _668), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                        float _4279 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                        float _2988 = _2923 * _2964;
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2913) + _2989;
                        float _4290 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2994 = 1.0 - _2964;
                        float _3004 = (0.5 / (((_2993 * ((_2979 * _2994) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2964) * _2979))) * _2993;
                        float _4301 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3015 = (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_2987 * _2987) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2919;
                        _2772 = (_2934 * _2882.x) + _2840;
                        _2773 = (_2934 * _2882.y) + _2841;
                        _2774 = (_2934 * _2882.z) + _2842;
                        _2769 = (_3015 * _2899.x) + _2837;
                        _2770 = (_3015 * _2899.y) + _2838;
                        _2771 = (_3015 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_61_pred = _2769;
                    frontier_phi_61_pred_1 = _2774;
                    frontier_phi_61_pred_2 = _2773;
                    frontier_phi_61_pred_3 = _2772;
                    frontier_phi_61_pred_4 = _2771;
                    frontier_phi_61_pred_5 = _2770;
                }
                _2569 = frontier_phi_61_pred;
                _2579 = frontier_phi_61_pred_1;
                _2577 = frontier_phi_61_pred_2;
                _2575 = frontier_phi_61_pred_3;
                _2573 = frontier_phi_61_pred_4;
                _2571 = frontier_phi_61_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2569;
                    _2714 = _2571;
                    _2715 = _2573;
                    _2716 = _2575;
                    _2717 = _2577;
                    _2718 = _2579;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
        }
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.z;
        uint _2585 = (_2583 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2585) & _2467) == 0u)
        {
            _2681 = _2568;
            _2683 = _2570;
            _2685 = _2572;
            _2687 = _2574;
            _2689 = _2576;
            _2691 = _2578;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
            float _2707 = _2706 * _2421;
            float _2708 = _2706 * _2422;
            float _2709 = _2706 * _2423;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2585 < ((_2583 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2820 = _2568;
                float _2821 = _2570;
                float _2822 = _2572;
                float _2823 = _2574;
                float _2824 = _2576;
                float _2825 = _2578;
                uint _2826 = _2585;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2461 << 5u) + (_2447 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2836)
                    {
                        frontier_phi_67_pred = _2823;
                        frontier_phi_67_pred_1 = _2824;
                        frontier_phi_67_pred_2 = _2825;
                        frontier_phi_67_pred_3 = _2822;
                        frontier_phi_67_pred_4 = _2821;
                        frontier_phi_67_pred_5 = _2820;
                    }
                    else
                    {
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3033 = _2820;
                        float _3034 = _2821;
                        float _3035 = _2822;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        uint _3039 = _2835;
                        uint _3040;
                        vec4 _3065;
                        float _3066;
                        vec4 _3081;
                        vec3 _3093;
                        vec4 _3108;
                        vec4 _3123;
                        float _3169;
                        bool _3170;
                        for (;;)
                        {
                            uint _3050 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3039));
                            _3040 = (_3039 + 4294967295u) & _3039;
                            uint _3052 = _3050 * 40u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3066 = _3065.w;
                            uint _3068 = (_3050 * 40u) + 4u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3050 * 40u) + 8u;
                            _3093 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x));
                            uint _3095 = (_3050 * 40u) + 16u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3050 * 40u) + 20u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3050 * 40u) + 24u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3144 = (_3050 * 40u) + 28u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3169 = fma(_2423, _3157.z, fma(_2422, _3157.y, _3157.x * _2421)) + _3157.w;
                            _3170 = !((fma(_2423, _3138.z, fma(_2422, _3138.y, _3138.x * _2421)) + _3138.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3170)
                            {
                                float _3197 = _3065.x - _2421;
                                float _3198 = _3065.y - _2422;
                                float _3199 = _3065.z - _2423;
                                float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                                float _3203 = inversesqrt(_3200);
                                float _3204 = _3203 * _3197;
                                float _3205 = _3203 * _3198;
                                float _3206 = _3203 * _3199;
                                float _3210 = 1.0 - (_3200 / (_3066 * _3066));
                                float _4312 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3215 = sqrt(_3200) * _3081.w;
                                float _3217 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                                float _3218 = _3217 * _3217;
                                float _3221 = ((1.0 - _3218) * dot(vec3(_3204, _3205, _3206), vec3(_662, _665, _668))) + _3218;
                                float _3224 = _3215 * _3215;
                                float _3228 = (fma(_2423, _3108.z, fma(_2422, _3108.y, _3108.x * _2421)) + _3108.w) / _3169;
                                float _3229 = (fma(_2423, _3123.z, fma(_2422, _3123.y, _3123.x * _2421)) + _3123.w) / _3169;
                                float _3233 = 1.0 - dot(vec2(_3228, _3229), vec2(_3228, _3229));
                                float _4328 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3235 = _3234 * (((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3211) / ((_3224 * 0.699999988079071044921875) + 1.0));
                                float _3247 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                                float _3248 = 1.0 - _737;
                                float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                                float _3256 = _3255 * _3255;
                                float _3257 = _3256 * _3256;
                                float _3258 = _3204 - _2707;
                                float _3259 = _3205 - _2708;
                                float _3260 = _3206 - _2709;
                                float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                                float _3268 = dot(vec3(_662, _665, _668), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4339 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3271 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3272 = dot(vec3(_662, _665, _668), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                                float _4350 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                                float _3280 = _3217 * _3256;
                                float _3281 = _3280 * _3280;
                                float _3287 = ((1.0 - _3281) * dot(vec3(_662, _665, _668), vec3(_3204, _3205, _3206))) + _3281;
                                float _4361 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3289 = 1.0 - _3256;
                                float _3299 = (0.5 / (((_3288 * ((_3271 * _3289) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3256) * _3271))) * _3288;
                                float _4372 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3309 = (_3234 * _3211) * (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3279 * _3279) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3309 * _3093.x;
                                frontier_phi_73_pred_1 = _3309 * _3093.y;
                                frontier_phi_73_pred_2 = _3235 * _3081.z;
                                frontier_phi_73_pred_3 = _3235 * _3081.y;
                                frontier_phi_73_pred_4 = _3235 * _3081.x;
                                frontier_phi_73_pred_5 = _3309 * _3093.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3313 = frontier_phi_73_pred;
                            _3314 = frontier_phi_73_pred_1;
                            _3318 = frontier_phi_73_pred_2;
                            _3317 = frontier_phi_73_pred_3;
                            _3316 = frontier_phi_73_pred_4;
                            _3315 = frontier_phi_73_pred_5;
                            _3023 = _3316 + _3036;
                            _3024 = _3317 + _3037;
                            _3025 = _3318 + _3038;
                            _3020 = _3313 + _3033;
                            _3021 = _3314 + _3034;
                            _3022 = _3315 + _3035;
                            if (_3040 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3040;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3023;
                        frontier_phi_67_pred_1 = _3024;
                        frontier_phi_67_pred_2 = _3025;
                        frontier_phi_67_pred_3 = _3022;
                        frontier_phi_67_pred_4 = _3021;
                        frontier_phi_67_pred_5 = _3020;
                    }
                    _2688 = frontier_phi_67_pred;
                    _2690 = frontier_phi_67_pred_1;
                    _2692 = frontier_phi_67_pred_2;
                    _2686 = frontier_phi_67_pred_3;
                    _2684 = frontier_phi_67_pred_4;
                    _2682 = frontier_phi_67_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2682;
                        _2821 = _2684;
                        _2822 = _2686;
                        _2823 = _2688;
                        _2824 = _2690;
                        _2825 = _2692;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2690;
                frontier_phi_55_56_ladder_1 = _2692;
                frontier_phi_55_56_ladder_2 = _2688;
                frontier_phi_55_56_ladder_3 = _2686;
                frontier_phi_55_56_ladder_4 = _2684;
                frontier_phi_55_56_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_55_56_ladder = _2576;
                frontier_phi_55_56_ladder_1 = _2578;
                frontier_phi_55_56_ladder_2 = _2574;
                frontier_phi_55_56_ladder_3 = _2572;
                frontier_phi_55_56_ladder_4 = _2570;
                frontier_phi_55_56_ladder_5 = _2568;
            }
            _2681 = frontier_phi_55_56_ladder_5;
            _2683 = frontier_phi_55_56_ladder_4;
            _2685 = frontier_phi_55_56_ladder_3;
            _2687 = frontier_phi_55_56_ladder_2;
            _2689 = frontier_phi_55_56_ladder;
            _2691 = frontier_phi_55_56_ladder_1;
        }
        float _2696 = isnan(1.0) ? _721 : (isnan(_721) ? 1.0 : min(_721, 1.0));
        _2480 = (_2696 * _2687) + _1913;
        _2482 = (_2696 * _2689) + _1915;
        _2484 = (_2696 * _2691) + _1917;
        _2486 = ((_2681 * _705) * _2696) + _2261;
        _2488 = ((_2683 * _707) * _2696) + _2263;
        _2490 = ((_2685 * _708) * _2696) + _2265;
    }
    else
    {
        _2480 = _1913;
        _2482 = _1915;
        _2484 = _1917;
        _2486 = _2261;
        _2488 = _2263;
        _2490 = _2265;
    }
    float _4388 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4399 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4410 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    uint _2510 = _252 + 6u;
    float _2518 = _640 / cbSceneParam._m0[86u].x;
    float _2519 = _641 / cbSceneParam._m0[86u].y;
    vec4 _2533 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2535 = _2533.x;
    float _2536 = _2533.y;
    float _2537 = _2533.z;
    float _2538 = _2533.w;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2593 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2594 = _2593 / _574;
        float _2605 = _2594 * _625;
        float _2606 = _626 * _2594;
        float _2607 = (-0.0) - _2606;
        float _2609 = _2594 * _627;
        float _2611 = (cbSceneParam._m0[77u].w * _2607) / _2593;
        float _2612 = _2611 + cbSceneParam._m0[79u].w;
        float _2613 = cbSceneParam._m0[79u].w - _2606;
        float _2619 = sqrt(((_2605 * _2605) + (_2606 * _2606)) + (_2609 * _2609));
        float _2622 = (1.0 - (cbSceneParam._m0[77u].w / _2593)) * _2619;
        float _2627 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2629 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2782;
        if (abs((_2607 - _2611) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2782 = ((((_2612 > 0.0) ? exp2(_2627 * _2612) : (2.0 - exp2(_2629 * _2612))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2622;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : max(_2612, _2613));
            float _2744 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : min(_2612, _2613));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2782 = ((abs(_2619 / _2607) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2627 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2627 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2629 * _2753) - exp2(_2629 * _2754)) * _2742))) + (_2622 * cbSceneParam._m0[80u].z);
        }
        vec4 _2784 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, 1.0), 0.0);
        float _2793 = exp2((_2782 * (-1.44269502162933349609375)) * (1.0 - _2784.w));
        float _2794 = log2(_2793);
        float _2810 = log2(_2538);
        _2631 = (exp2(_2810 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].x)) * _2784.x) / cbSceneParam._m0[78u].x)) + _2535;
        _2633 = (exp2(_2810 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].y)) * _2784.y) / cbSceneParam._m0[78u].y)) + _2536;
        _2635 = (exp2(_2810 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].z)) * _2784.z) / cbSceneParam._m0[78u].z)) + _2537;
        _2637 = _2793 * _2538;
    }
    else
    {
        _2631 = _2535;
        _2633 = _2536;
        _2635 = _2537;
        _2637 = _2538;
    }
    float _2649 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2650 = _2649 == 3.0;
    float _2651 = log2(_2637);
    float _2658 = exp2(_2651 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2480 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _721))) + ((_2486 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2659 = exp2(_2651 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2482 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _721))) + ((_2488 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2660 = exp2(_2651 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2484 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _721))) + ((_2490 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2669 = (_2649 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2669 * (_2650 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.y = _2669 * (_2650 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.z = _2669 * (_2650 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.w = cbInstanceData._m0[_2510].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2510].w;
}


