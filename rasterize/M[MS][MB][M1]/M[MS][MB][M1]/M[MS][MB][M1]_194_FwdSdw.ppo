#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1303;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[24u].y) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3910 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _394 = (_387 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _395 = (_387 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _396 = (_387 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].y) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3921 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _387) + _527;
    float _537 = ((_508.y - _528) * _387) + _528;
    float _538 = ((_508.z - _529) * _387) + _529;
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _460) + _538;
    float _566 = ((((_550.x - _536) * _460) + _536) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _537) * _460) + _537) * 2.0) + (-1.0);
    float _569 = dot(vec2(_566, _568), vec2(_566, _568));
    float _3932 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))));
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _621 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_607 - _608) * cbMtdParam._m0[24u].z) + _608) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3943 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _629 = (_622 * ((_488.x * cbMtdParam._m0[18u].x) - _467)) + _467;
    float _630 = (_622 * ((_488.y * cbMtdParam._m0[18u].y) - _468)) + _468;
    float _631 = (_622 * ((_488.z * cbMtdParam._m0[18u].z) - _469)) + _469;
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _659 = _657.x;
    float _677 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _659) * _387) + _659;
    float _694 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _677) * _460) + _677;
    float _698 = ((_643.x - _694) * cbMtdParam._m0[19u].z) + _694;
    float _700 = _698 - (_698 * _622);
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _720 = (_713.x * 2.0) + (-1.0);
    float _721 = (_713.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3954 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _730 = (_622 * (_713.z - _563)) + _563;
    float _742 = (((_720 - _566) + (cbMtdParam._m0[21u].x * _566)) * _622) + _566;
    float _743 = (((_721 - _568) + (cbMtdParam._m0[21u].x * _568)) * _622) + _568;
    float _744 = (_622 * (sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) - _574)) + _574;
    float _749 = cbMtdParam._m0[22u].x + _587.w;
    float _752 = fma(_744, _235 * NORMAL.x, fma(_743, _242 * TANGENT.x, (_228 * _220) * _742));
    float _755 = fma(_744, _235 * NORMAL.y, fma(_743, _242 * TANGENT.y, (_228 * _221) * _742));
    float _758 = fma(_744, _235 * NORMAL.z, fma(_743, _242 * TANGENT.z, (_228 * _222) * _742));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _3965 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _766 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3987 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3998 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4009 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4020 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _771 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _870 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _873 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _876 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _890 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _896 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_890].x;
    float _897 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_890].y;
    float _898 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_890].z;
    float _4031 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _902 = 1.0 - _771;
    float _903 = _899 * _902;
    float _904 = _900 * _902;
    float _905 = _901 * _902;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _771;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _771;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _771;
    float _913 = _910 + 0.039999999105930328369140625;
    float _915 = _911 + 0.039999999105930328369140625;
    float _916 = _912 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _929 = ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * TEXCOORD_5.w) * _925.x;
    float _930 = dot(vec3(_763, _764, _765), vec3(_843, _844, _845));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _763) - _843;
    float _938 = (_933 * _764) - _844;
    float _939 = (_933 * _765) - _845;
    float _943 = abs(dot(vec3(_843, _844, _845), vec3(_763, _764, _765)));
    float _4064 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_766);
    float _958 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _964 = (1.0 - _958) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _965 = _958 * _945;
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1031 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1035 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1060 = _993 + _763;
        float _1061 = _997 + _764;
        float _1062 = _1001 + _765;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_763, _764, _765), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _4112 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_763, _764, _765), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4145 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_763, _764, _765), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4178 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1341 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1345 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1349 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1372 = _993 + _763;
        float _1373 = _997 + _764;
        float _1374 = _1001 + _765;
        float _1384 = fma(_1374, cbModelParam._m0[30u].z, fma(_1373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1372)) - _1341;
        float _1385 = fma(_1374, cbModelParam._m0[31u].z, fma(_1373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1372)) - _1345;
        float _1386 = fma(_1374, cbModelParam._m0[32u].z, fma(_1373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1372)) - _1349;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1341 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1345 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[35u].z) + ((((((_1349 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1440 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1407.x + (-0.5));
        float _1442 = _1440 * (_1407.y + (-0.5));
        float _1443 = _1440 * (_1407.z + (-0.5));
        float _1450 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1414.x + (-0.5));
        float _1452 = _1450 * (_1414.y + (-0.5));
        float _1453 = _1450 * (_1414.z + (-0.5));
        float _1460 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1421.x + (-0.5));
        float _1462 = _1460 * (_1421.y + (-0.5));
        float _1463 = _1460 * (_1421.z + (-0.5));
        float _1470 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1428.x + (-0.5));
        float _1472 = _1470 * (_1428.y + (-0.5));
        float _1473 = _1470 * (_1428.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_763, _764, _765), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4241 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1504 + 1.0))) + _1509) * _1474;
        float _1519 = _1442 * 0.5;
        float _1520 = _1452 * 0.5;
        float _1521 = _1462 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_763, _764, _765), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4274 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1546 + 1.0))) + _1551) * _1475;
        float _1561 = _1443 * 0.5;
        float _1562 = _1453 * 0.5;
        float _1563 = _1463 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_763, _764, _765), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4307 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1588 + 1.0))) + _1593) * _1476;
        _1610 = _1443;
        _1611 = _1442;
        _1612 = _1441;
        _1613 = _1453;
        _1614 = _1452;
        _1615 = _1451;
        _1616 = _1463;
        _1617 = _1462;
        _1618 = _1461;
        _1619 = _1476;
        _1620 = _1475;
        _1621 = _1474;
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1303;
        _1611 = _1303;
        _1612 = _1303;
        _1613 = _1303;
        _1614 = _1303;
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1315)) + _1315;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1316)) + _1316;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1317)) + _1317;
    float _1657 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1634));
    float _1678 = _937 * 0.5;
    float _1679 = _938 * 0.5;
    float _1680 = _939 * 0.5;
    float _1681 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1684 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1687 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1721;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1694 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1698 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1702 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1709 = dot(vec4(cbModelParam._m0[39u]), vec4(_1678, _1679, _1680, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1732;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1723 = dot(vec4(cbModelParam._m0[40u]), vec4(_1678, _1679, _1680, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1736 = (_1732 * cbModelParam._m0[1u].x) + (_1721 * (1.0 - cbModelParam._m0[1u].x));
    float _1746 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1746 : min(cbModelParam._m0[25u].z, _1746));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1794 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1798 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1802 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1805 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1808 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1811 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1839;
        if (_1805 > 0.0)
        {
            _1839 = abs((1.0 - _1794) / _1805);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1794 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1839 = frontier_phi_14_12_ladder;
        }
        float _2010;
        if (_1808 > 0.0)
        {
            _2010 = abs((1.0 - _1798) / _1808);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1798 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2010 = frontier_phi_23_19_ladder;
        }
        float _2305;
        if (_1811 > 0.0)
        {
            _2305 = abs((1.0 - _1802) / _1811);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1802 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2305 = frontier_phi_35_30_ladder;
        }
        float _2307 = isnan(_2010) ? _1839 : (isnan(_1839) ? _2010 : min(_1839, _2010));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1805) + _1794;
        float _2313 = (_2308 * _1808) + _1798;
        float _2314 = (_2308 * _1811) + _1802;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2315;
        float _2319 = _2315 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 > _2319) || ((_2313 < _2317) || ((_2312 < _2317) || (_2312 > _2319))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1747);
            frontier_phi_13_35_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1827 = frontier_phi_13_35_ladder_2;
        _1829 = frontier_phi_13_35_ladder_1;
        _1831 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1747);
        _1827 = _1815.x * cbModelParam._m0[1u].y;
        _1829 = _1815.y * cbModelParam._m0[1u].y;
        _1831 = _1815.z * cbModelParam._m0[1u].y;
    }
    float _1835 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1835 : min(cbModelParam._m0[25u].w, _1835));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1889 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1893 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1897 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1900 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1903 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1906 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2015;
        if (_1900 > 0.0)
        {
            _2015 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2332;
        if (_1903 > 0.0)
        {
            _2332 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2332 = frontier_phi_37_32_ladder;
        }
        float _2670;
        if (_1906 > 0.0)
        {
            _2670 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2670 = frontier_phi_47_44_ladder;
        }
        float _2672 = isnan(_2332) ? _2015 : (isnan(_2015) ? _2332 : min(_2015, _2332));
        float _2673 = isnan(_2670) ? _2672 : (isnan(_2672) ? _2670 : min(_2672, _2670));
        float _2677 = (_2673 * _1900) + _1889;
        float _2678 = (_2673 * _1903) + _1893;
        float _2679 = (_2673 * _1906) + _1897;
        float _2680 = _2673 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2680;
        float _2683 = _2680 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2679 > _2683) || ((_2679 < _2681) || ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 < _2681) || (_2677 > _2683))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2679, cbModelParam._m0[17u].z, fma(_2678, cbModelParam._m0[17u].y, _2677 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2679, cbModelParam._m0[18u].z, fma(_2678, cbModelParam._m0[18u].y, _2677 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2679, cbModelParam._m0[19u].z, fma(_2678, cbModelParam._m0[19u].y, _2677 * cbModelParam._m0[19u].x))), _1836);
            frontier_phi_22_47_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1925 = frontier_phi_22_47_ladder_2;
        _1927 = frontier_phi_22_47_ladder_1;
        _1929 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1836);
        _1925 = _1909.x * cbModelParam._m0[1u].z;
        _1927 = _1909.y * cbModelParam._m0[1u].z;
        _1929 = _1909.z * cbModelParam._m0[1u].z;
    }
    float _1942 = (((_964 * _913) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1944 = (((_964 * _915) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1946 = (((_964 * _916) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1942 * cbSceneParam._m0[91u].x));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2002 = _1989 / _2001;
    float _2003 = _1993 / _2001;
    float _2004 = _1997 / _2001;
    float _2151;
    float _2152;
    float _2153;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2031 = ((uint(_2004 > cbSceneParam._m0[59u].y) + uint(_2004 > cbSceneParam._m0[59u].x)) + uint(_2004 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2032 = _2031 + 43u;
        uint _2040 = _2031 + 44u;
        uint _2048 = _2031 + 45u;
        uint _2056 = _2031 + 46u;
        float _2067 = fma(_2001, cbSceneParam._m0[_2032].w, fma(_1997, cbSceneParam._m0[_2032].z, fma(_1993, cbSceneParam._m0[_2032].y, _1989 * cbSceneParam._m0[_2032].x)));
        float _2071 = fma(_2001, cbSceneParam._m0[_2040].w, fma(_1997, cbSceneParam._m0[_2040].z, fma(_1993, cbSceneParam._m0[_2040].y, _1989 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2001, cbSceneParam._m0[_2056].w, fma(_1997, cbSceneParam._m0[_2056].z, fma(_1993, cbSceneParam._m0[_2056].y, _1989 * cbSceneParam._m0[_2056].x)));
        float _2084 = cbSceneParam._m0[33u].z * _2079;
        float _2086 = cbSceneParam._m0[33u].w * _2079;
        float _2089 = fma(_2001, cbSceneParam._m0[_2048].w, fma(_1997, cbSceneParam._m0[_2048].z, fma(_1993, cbSceneParam._m0[_2048].y, _1989 * cbSceneParam._m0[_2048].x))) / _2079;
        float _2137 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
        float _4433 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2144 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2067) / _2079, (_2086 + _2071) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 + _2067) / _2079, (_2071 - _2084) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2084) / _2079, (_2071 - _2086) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2086) / _2079, (_2084 + _2071) / _2079), _2089), 0.0)).x), vec4(0.25)));
        _2151 = 1.0 - (_2144 * cbSceneParam._m0[34u].x);
        _2152 = 1.0 - (_2144 * cbSceneParam._m0[34u].y);
        _2153 = 1.0 - (_2144 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2151 = 1.0;
        _2152 = 1.0;
        _2153 = 1.0;
    }
    float _2217;
    float _2219;
    float _2221;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2205 = fma(_2001, cbSceneParam._m0[63u].w, fma(_1997, cbSceneParam._m0[63u].z, fma(_1993, cbSceneParam._m0[63u].y, _1989 * cbSceneParam._m0[63u].x)));
        float _2206 = fma(_2001, cbSceneParam._m0[60u].w, fma(_1997, cbSceneParam._m0[60u].z, fma(_1993, cbSceneParam._m0[60u].y, _1989 * cbSceneParam._m0[60u].x))) / _2205;
        float _2207 = fma(_2001, cbSceneParam._m0[61u].w, fma(_1997, cbSceneParam._m0[61u].z, fma(_1993, cbSceneParam._m0[61u].y, _1989 * cbSceneParam._m0[61u].x))) / _2205;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2206 >= cbSceneParam._m0[64u].x) && (_2207 >= cbSceneParam._m0[64u].y)) && (_2206 <= cbSceneParam._m0[64u].z)) && (_2207 <= cbSceneParam._m0[64u].w))
        {
            float _2345 = fma(_2001, cbSceneParam._m0[62u].w, fma(_1997, cbSceneParam._m0[62u].z, fma(_1993, cbSceneParam._m0[62u].y, _1989 * cbSceneParam._m0[62u].x))) / _2205;
            float _2349 = isnan(cbSceneParam._m0[41u].w) ? _2345 : (isnan(_2345) ? cbSceneParam._m0[41u].w : max(_2345, cbSceneParam._m0[41u].w));
            float _2392 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
            float _4449 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
            float _2399 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2206, cbSceneParam._m0[33u].w + _2207), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2206, _2207 - cbSceneParam._m0[33u].z), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].z, _2207 - cbSceneParam._m0[33u].w), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2207), _2349), 0.0)).x), vec4(0.25)));
            float _2403 = 1.0 - (_2399 * cbSceneParam._m0[34u].x);
            float _2404 = 1.0 - (_2399 * cbSceneParam._m0[34u].y);
            float _2405 = 1.0 - (_2399 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
            frontier_phi_34_33_ladder_1 = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
            frontier_phi_34_33_ladder_2 = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
        }
        else
        {
            frontier_phi_34_33_ladder = _2153;
            frontier_phi_34_33_ladder_1 = _2152;
            frontier_phi_34_33_ladder_2 = _2151;
        }
        _2217 = frontier_phi_34_33_ladder_2;
        _2219 = frontier_phi_34_33_ladder_1;
        _2221 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2217 = _2151;
        _2219 = _2152;
        _2221 = _2153;
    }
    uvec4 _2226 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2228 = _2226.x * 14u;
    uint _2229 = _2228 + 13u;
    float _2236 = _929 + (-1.0);
    float _2241 = (cbLight._m0[_2229].x * _2236) + 1.0;
    float _2242 = (cbLight._m0[_2229].y * _2236) + 1.0;
    float _2243 = (cbLight._m0[_2229].z * _2236) + 1.0;
    float _2244 = (cbLight._m0[_2229].w * _2236) + 1.0;
    uint _2245 = _2228 + 5u;
    float _2251 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2255 = _2228 + 4u;
    float _2264 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2268 = _2228 | 1u;
    float _2279 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_763, _764, _765));
    float _2282 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_763, _764, _765));
    float _4485 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _4496 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2287 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2289 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * 0.3183098733425140380859375;
    float _2296 = ((cbLight._m0[_2245].x * _2251) * _2289) + (((cbLight._m0[_2255].x * _2217) * _2264) * _2287);
    float _2297 = ((_2251 * cbLight._m0[_2245].y) * _2289) + (((cbLight._m0[_2255].y * _2219) * _2264) * _2287);
    float _2298 = ((_2251 * cbLight._m0[_2245].z) * _2289) + (((cbLight._m0[_2255].z * _2221) * _2264) * _2287);
    uvec4 _2302 = floatBitsToUint(cbLight._m0[_2228 + 12u]);
    bool _2304 = _2302.x == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2304)
    {
        _2406 = _2296;
        _2408 = _2297;
        _2410 = _2298;
    }
    else
    {
        uint _2414 = _2228 + 6u;
        float _2430 = (dot(vec3(cbLight._m0[_2228 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4507 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2433 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2406 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2296;
        _2408 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2297;
        _2410 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2298;
    }
    bool _2413 = _2302.y == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2413)
    {
        _2468 = _2406;
        _2470 = _2408;
        _2472 = _2410;
    }
    else
    {
        uint _2641 = _2228 + 7u;
        float _2657 = (dot(vec3(cbLight._m0[_2228 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2658 = _2657 * _2657;
        float _4523 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2659 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2660 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2468 = (((cbLight._m0[_2641].x * 0.3183098733425140380859375) * _2659) * _2660) + _2406;
        _2470 = (((cbLight._m0[_2641].y * 0.3183098733425140380859375) * _2659) * _2660) + _2408;
        _2472 = (((cbLight._m0[_2641].z * 0.3183098733425140380859375) * _2659) * _2660) + _2410;
    }
    uint _2475 = _2228 + 8u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _766) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2228].x + _843;
    float _2491 = cbLight._m0[_2228].y + _844;
    float _2492 = cbLight._m0[_2228].z + _845;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2228].xyz));
    float _4539 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _4550 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2504 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2505 = dot(vec3(_763, _764, _765), vec3(_2497, _2498, _2499));
    float _4561 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2497, _2498, _2499));
    float _4572 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2489 * _2489;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
    float _2526 = 0.959999978542327880859375 - _910;
    float _2528 = 0.959999978542327880859375 - _911;
    float _2529 = 0.959999978542327880859375 - _912;
    float _2536 = 1.0 - _2489;
    float _2547 = (0.5 / (((_2504 * ((_2503 * _2536) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2536) + _2489) * _2503))) * _2503;
    float _4583 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    uint _2563 = _2228 + 9u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _766) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2268].x + _843;
    float _2577 = cbLight._m0[_2268].y + _844;
    float _2578 = cbLight._m0[_2268].z + _845;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2268].xyz));
    float _4594 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2590 = dot(vec3(_763, _764, _765), vec3(_2583, _2584, _2585));
    float _4605 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2583, _2584, _2585));
    float _4616 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2575 * _2575;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
    float _2616 = 1.0 - _2575;
    float _2626 = (0.5 / (((_2504 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2616) + _2575) * _2589))) * _2589;
    float _4627 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    float _2638 = (((((_2609 * _2526) + _913) * cbLight._m0[_2563].x) * _2628) * _2251) + ((((cbLight._m0[_2475].x * _2217) * ((_2525 * _2526) + _913)) * _2549) * _2264);
    float _2639 = (((((_2609 * _2528) + _915) * cbLight._m0[_2563].y) * _2628) * _2251) + ((((cbLight._m0[_2475].y * _2219) * ((_2525 * _2528) + _915)) * _2549) * _2264);
    float _2640 = (((((_2609 * _2529) + _916) * cbLight._m0[_2563].z) * _2628) * _2251) + ((((cbLight._m0[_2475].z * _2221) * ((_2525 * _2529) + _916)) * _2549) * _2264);
    float _2696;
    float _2698;
    float _2700;
    if (_2304)
    {
        _2696 = _2638;
        _2698 = _2639;
        _2700 = _2640;
    }
    else
    {
        uint _2702 = _2228 + 2u;
        uint _2706 = _2228 + 10u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _766) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _843;
        float _2723 = cbLight._m0[_2702].y + _844;
        float _2724 = cbLight._m0[_2702].z + _845;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2702].xyz));
        float _4638 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2736 = dot(vec3(_763, _764, _765), vec3(_2729, _2730, _2731));
        float _4649 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4660 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2504 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2762) + _2721) * _2735))) * _2735;
        float _4671 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2696 = (((((_2755 * _2526) + _913) * cbLight._m0[_2706].x) * _2774) * _2775) + _2638;
        _2698 = (((((_2755 * _2528) + _915) * cbLight._m0[_2706].y) * _2774) * _2775) + _2639;
        _2700 = (((((_2755 * _2529) + _916) * cbLight._m0[_2706].z) * _2774) * _2775) + _2640;
    }
    float _2806;
    float _2808;
    float _2810;
    if (_2413)
    {
        _2806 = _2696;
        _2808 = _2698;
        _2810 = _2700;
    }
    else
    {
        uint _2817 = _2228 + 3u;
        uint _2821 = _2228 + 11u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _766) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _843;
        float _2838 = cbLight._m0[_2817].y + _844;
        float _2839 = cbLight._m0[_2817].z + _845;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2817].xyz));
        float _4687 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2851 = dot(vec3(_763, _764, _765), vec3(_2844, _2845, _2846));
        float _4698 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4709 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0);
        float _2877 = 1.0 - _2836;
        float _2887 = (0.5 / (((_2504 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2877) + _2836) * _2850))) * _2850;
        float _4720 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2889 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2890 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2806 = (((((_2870 * _2526) + _913) * cbLight._m0[_2821].x) * _2889) * _2890) + _2696;
        _2808 = (((((_2870 * _2528) + _915) * cbLight._m0[_2821].y) * _2889) * _2890) + _2698;
        _2810 = (((((_2870 * _2529) + _916) * cbLight._m0[_2821].z) * _2889) * _2890) + _2700;
    }
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_2226.y == 0u)
    {
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.x;
        uint _2923 = uint((float(_2911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2912))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2912)));
        float _2933 = (log2(_2004 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2934 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        uint _2937 = uint(isnan(14.0) ? _2934 : (isnan(_2934) ? 14.0 : min(_2934, 14.0)));
        uvec4 _2942 = texelFetch(g_lightClusterGridBuffer, int(((_2937 << 2u) + (_2923 << 6u)) >> 2u));
        uint _2943 = _2942.x;
        uint _2944 = _2911.z;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((((1u << ((_2944 >> 4u) & 15u)) + 4294967295u) & _2943) == 0u) || ((_2944 & 240u) == 0u))
        {
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
        }
        else
        {
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            uint _3174 = 0u;
            uint _3183;
            bool _3184;
            for (;;)
            {
                _3183 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3174 << 2u)) >> 2u)).x;
                _3184 = _3183 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3184)
                {
                    frontier_phi_66_pred = _3173;
                    frontier_phi_66_pred_1 = _3172;
                    frontier_phi_66_pred_2 = _3171;
                    frontier_phi_66_pred_3 = _3170;
                    frontier_phi_66_pred_4 = _3169;
                    frontier_phi_66_pred_5 = _3168;
                }
                else
                {
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    uint _3298;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3183;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    for (;;)
                    {
                        uint _3302 = uint(findLSB(_3298)) + (_3174 << 5u);
                        uint _3299 = (_3298 + 4294967295u) & _3298;
                        uint _3304 = _3302 * 48u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3324 = (_3302 * 48u) + 4u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 3u)).x));
                        uint _3343 = (_3302 * 48u) + 8u;
                        vec3 _3354 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x));
                        float _3358 = _3318.x - _2002;
                        float _3359 = _3318.y - _2003;
                        float _3360 = _3318.z - _2004;
                        float _3361 = dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360));
                        float _3364 = inversesqrt(_3361);
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3368 = dot(vec3(_870, _873, _876), vec3(_3365, _3366, _3367));
                        float _3373 = 1.0 - (_3361 * _3318.w);
                        float _4746 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3374 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3375 = sqrt(_3361) * _3337.w;
                        float _3378 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3368) + _3379;
                        float _3385 = _3375 * _3375;
                        float _3389 = ((isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0))) * _3374) / ((_3385 * 0.699999988079071044921875) + 1.0);
                        float _3393 = (-0.0) - _2002;
                        float _3394 = (-0.0) - _2003;
                        float _3395 = (-0.0) - _2004;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3400 = _3399 * _3393;
                        float _3401 = _3399 * _3394;
                        float _3402 = _3399 * _3395;
                        float _3409 = exp2(log2(1.0 / ((_3385 * 3.5) + 5.0)) * 0.25);
                        float _3410 = 1.0 - _945;
                        float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                        float _3418 = _3417 * _3417;
                        float _3419 = _3418 * _3418;
                        float _3420 = _3400 + _3365;
                        float _3421 = _3401 + _3366;
                        float _3422 = _3402 + _3367;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3430 = dot(vec3(_870, _873, _876), vec3(_3400, _3401, _3402));
                        float _4762 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3434 = dot(vec3(_870, _873, _876), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                        float _4773 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                        float _3442 = _3378 * _3418;
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3368) + _3443;
                        float _4784 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3448 = 1.0 - _3418;
                        float _3458 = (0.5 / (((_3447 * ((_3433 * _3448) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3418) * _3433))) * _3447;
                        float _4795 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3469 = (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3441 * _3441) * ((_3385 * 2.1991131305694580078125) + 3.141590118408203125))) * _3374;
                        _3227 = (_3389 * _3337.x) + _3295;
                        _3228 = (_3389 * _3337.y) + _3296;
                        _3229 = (_3389 * _3337.z) + _3297;
                        _3224 = (_3469 * _3354.x) + _3292;
                        _3225 = (_3469 * _3354.y) + _3293;
                        _3226 = (_3469 * _3354.z) + _3294;
                        if (_3299 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3299;
                        }
                    }
                    frontier_phi_66_pred = _3229;
                    frontier_phi_66_pred_1 = _3228;
                    frontier_phi_66_pred_2 = _3227;
                    frontier_phi_66_pred_3 = _3226;
                    frontier_phi_66_pred_4 = _3225;
                    frontier_phi_66_pred_5 = _3224;
                }
                _3034 = frontier_phi_66_pred;
                _3032 = frontier_phi_66_pred_1;
                _3030 = frontier_phi_66_pred_2;
                _3028 = frontier_phi_66_pred_3;
                _3026 = frontier_phi_66_pred_4;
                _3024 = frontier_phi_66_pred_5;
                uint _3175 = _3174 + 1u;
                if (_3175 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3168 = _3024;
                    _3169 = _3026;
                    _3170 = _3028;
                    _3171 = _3030;
                    _3172 = _3032;
                    _3173 = _3034;
                    _3174 = _3175;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
        }
        uvec4 _3037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3038 = _3037.z;
        uint _3040 = (_3038 >> 8u) & 15u;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        if (((4294967295u << _3040) & _2943) == 0u)
        {
            _3136 = _3023;
            _3138 = _3025;
            _3140 = _3027;
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
        }
        else
        {
            float _3161 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
            float _3162 = _3161 * _2002;
            float _3163 = _3161 * _2003;
            float _3164 = _3161 * _2004;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3040 < ((_3038 >> 12u) & 15u))
            {
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3275 = _3023;
                float _3276 = _3025;
                float _3277 = _3027;
                float _3278 = _3029;
                float _3279 = _3031;
                float _3280 = _3033;
                uint _3281 = _3040;
                uint _3290;
                bool _3291;
                for (;;)
                {
                    _3290 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3281 << 2u)) >> 2u)).x;
                    _3291 = _3290 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3291)
                    {
                        frontier_phi_72_pred = _3280;
                        frontier_phi_72_pred_1 = _3279;
                        frontier_phi_72_pred_2 = _3278;
                        frontier_phi_72_pred_3 = _3277;
                        frontier_phi_72_pred_4 = _3276;
                        frontier_phi_72_pred_5 = _3275;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3487 = _3275;
                        float _3488 = _3276;
                        float _3489 = _3277;
                        float _3490 = _3278;
                        float _3491 = _3279;
                        float _3492 = _3280;
                        uint _3493 = _3290;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3504 = ((_3281 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3504 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3504 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3504 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_2004, _3611.z, fma(_2003, _3611.y, _3611.x * _2002)) + _3611.w;
                            _3624 = !((fma(_2004, _3592.z, fma(_2003, _3592.y, _3592.x * _2002)) + _3592.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3519.x - _2002;
                                float _3652 = _3519.y - _2003;
                                float _3653 = _3519.z - _2004;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3520 * _3520));
                                float _4806 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3669 = sqrt(_3654) * _3535.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_870, _873, _876))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_2004, _3562.z, fma(_2003, _3562.y, _3562.x * _2002)) + _3562.w) / _3623;
                                float _3683 = (fma(_2004, _3577.z, fma(_2003, _3577.y, _3577.x * _2002)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4822 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _945;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3162;
                                float _3713 = _3659 - _3163;
                                float _3714 = _3660 - _3164;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_870, _873, _876), vec3((-0.0) - _3162, (-0.0) - _3163, (-0.0) - _3164));
                                float _4833 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3726 = dot(vec3(_870, _873, _876), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4844 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_870, _873, _876), vec3(_3658, _3659, _3660))) + _3735;
                                float _4855 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4866 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3689 * _3535.y;
                                frontier_phi_78_pred_1 = _3689 * _3535.x;
                                frontier_phi_78_pred_2 = _3763 * _3547.z;
                                frontier_phi_78_pred_3 = _3763 * _3547.y;
                                frontier_phi_78_pred_4 = _3763 * _3547.x;
                                frontier_phi_78_pred_5 = _3689 * _3535.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_78_pred;
                            _3770 = frontier_phi_78_pred_1;
                            _3769 = frontier_phi_78_pred_2;
                            _3768 = frontier_phi_78_pred_3;
                            _3767 = frontier_phi_78_pred_4;
                            _3772 = frontier_phi_78_pred_5;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3479;
                        frontier_phi_72_pred_1 = _3478;
                        frontier_phi_72_pred_2 = _3477;
                        frontier_phi_72_pred_3 = _3476;
                        frontier_phi_72_pred_4 = _3475;
                        frontier_phi_72_pred_5 = _3474;
                    }
                    _3147 = frontier_phi_72_pred;
                    _3145 = frontier_phi_72_pred_1;
                    _3143 = frontier_phi_72_pred_2;
                    _3141 = frontier_phi_72_pred_3;
                    _3139 = frontier_phi_72_pred_4;
                    _3137 = frontier_phi_72_pred_5;
                    uint _3282 = _3281 + 1u;
                    if (_3282 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3275 = _3137;
                        _3276 = _3139;
                        _3277 = _3141;
                        _3278 = _3143;
                        _3279 = _3145;
                        _3280 = _3147;
                        _3281 = _3282;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3147;
                frontier_phi_60_61_ladder_1 = _3145;
                frontier_phi_60_61_ladder_2 = _3141;
                frontier_phi_60_61_ladder_3 = _3139;
                frontier_phi_60_61_ladder_4 = _3137;
                frontier_phi_60_61_ladder_5 = _3143;
            }
            else
            {
                frontier_phi_60_61_ladder = _3033;
                frontier_phi_60_61_ladder_1 = _3031;
                frontier_phi_60_61_ladder_2 = _3027;
                frontier_phi_60_61_ladder_3 = _3025;
                frontier_phi_60_61_ladder_4 = _3023;
                frontier_phi_60_61_ladder_5 = _3029;
            }
            _3136 = frontier_phi_60_61_ladder_4;
            _3138 = frontier_phi_60_61_ladder_3;
            _3140 = frontier_phi_60_61_ladder_2;
            _3142 = frontier_phi_60_61_ladder_5;
            _3144 = frontier_phi_60_61_ladder_1;
            _3146 = frontier_phi_60_61_ladder;
        }
        float _3151 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2956 = (_3151 * _3142) + _2468;
        _2958 = (_3151 * _3144) + _2470;
        _2960 = (_3151 * _3146) + _2472;
        _2962 = ((_3136 * _913) * _3151) + _2806;
        _2964 = ((_3138 * _915) * _3151) + _2808;
        _2966 = ((_3140 * _916) * _3151) + _2810;
    }
    else
    {
        _2956 = _2468;
        _2958 = _2470;
        _2960 = _2472;
        _2962 = _2806;
        _2964 = _2808;
        _2966 = _2810;
    }
    float _4882 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4893 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4904 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    uint _2986 = _248 + 6u;
    float _2994 = _851 / cbSceneParam._m0[86u].x;
    float _2995 = _852 / cbSceneParam._m0[86u].y;
    vec4 _3009 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3011 = _3009.x;
    float _3012 = _3009.y;
    float _3013 = _3009.z;
    float _3014 = _3009.w;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _3048 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _3049 = _3048 / _785;
        float _3060 = _3049 * _836;
        float _3061 = _837 * _3049;
        float _3062 = (-0.0) - _3061;
        float _3064 = _3049 * _838;
        float _3066 = (cbSceneParam._m0[77u].w * _3062) / _3048;
        float _3067 = _3066 + cbSceneParam._m0[79u].w;
        float _3068 = cbSceneParam._m0[79u].w - _3061;
        float _3074 = sqrt(((_3060 * _3060) + (_3061 * _3061)) + (_3064 * _3064));
        float _3077 = (1.0 - (cbSceneParam._m0[77u].w / _3048)) * _3074;
        float _3082 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3084 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3237;
        if (abs((_3062 - _3066) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3237 = ((((_3067 > 0.0) ? exp2(_3082 * _3067) : (2.0 - exp2(_3084 * _3067))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3077;
        }
        else
        {
            float _3197 = 1.0 / cbSceneParam._m0[80u].x;
            float _3198 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : max(_3067, _3068));
            float _3199 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : min(_3067, _3068));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            float _3209 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : min(_3199, 0.0));
            _3237 = ((abs(_3074 / _3062) * cbSceneParam._m0[80u].y) * ((((_3208 - _3209) * 2.0) - ((exp2(_3082 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0)))) - exp2(_3082 * (isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))))) * _3197)) - ((exp2(_3084 * _3208) - exp2(_3084 * _3209)) * _3197))) + (_3077 * cbSceneParam._m0[80u].z);
        }
        vec4 _3239 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, 1.0), 0.0);
        float _3248 = exp2((_3237 * (-1.44269502162933349609375)) * (1.0 - _3239.w));
        float _3249 = log2(_3248);
        float _3265 = log2(_3014);
        _3086 = (exp2(_3265 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].x)) * _3239.x) / cbSceneParam._m0[78u].x)) + _3011;
        _3088 = (exp2(_3265 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].y)) * _3239.y) / cbSceneParam._m0[78u].y)) + _3012;
        _3090 = (exp2(_3265 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].z)) * _3239.z) / cbSceneParam._m0[78u].z)) + _3013;
        _3092 = _3248 * _3014;
    }
    else
    {
        _3086 = _3011;
        _3088 = _3012;
        _3090 = _3013;
        _3092 = _3014;
    }
    float _3104 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3105 = _3104 == 3.0;
    float _3106 = log2(_3092);
    float _3113 = exp2(_3106 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2956 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _929))) + ((_2962 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _3114 = exp2(_3106 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2958 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _929))) + ((_2964 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _3115 = exp2(_3106 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2960 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _929))) + ((_2966 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _3124 = (_3104 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3124 * (_3105 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.y = _3124 * (_3105 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3088)));
    SV_Target.z = _3124 * (_3105 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.w = cbInstanceData._m0[_2986].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2986].w;
}


