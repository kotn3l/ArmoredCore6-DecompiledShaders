#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1173;
float _3580;
float _3581;
float _3582;
float _3583;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _308 = _304.z;
    float _313 = (_304.x * 2.0) + (-1.0);
    float _315 = (_304.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3592 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))));
    float _325 = fma(_322, _227, fma(_315, _234, _313 * _220));
    float _328 = fma(_322, _228, fma(_315, _235, _313 * _221));
    float _331 = fma(_322, _229, fma(_315, _236, _313 * _222));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _373 = _371.x;
    float _374 = 1.0 - _373;
    float _383 = (cbMtdParam._m0[19u].x + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_373 - _374) * cbMtdParam._m0[24u].z) + _374) * cbMtdParam._m0[21u].z);
    float _3603 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _386 = (-0.0) - cbMtdParam._m0[24u].x;
    float _388 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
    float _396 = _384 - ((_384 * TEXCOORD_8.x) * _389);
    float _397 = _384 - ((_384 * TEXCOORD_8.y) * _389);
    float _398 = _384 - ((_384 * TEXCOORD_8.z) * _389);
    float _405 = (_396 * (cbMtdParam._m0[17u].x - _284)) + _284;
    float _406 = (_397 * (cbMtdParam._m0[17u].y - _285)) + _285;
    float _407 = (_398 * (cbMtdParam._m0[17u].z - _286)) + _286;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _421 = _419.x;
    float _422 = 1.0 - _421;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_421 - _422) * cbMtdParam._m0[24u].w) + _422) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3624 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _405) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _453) + _405;
    float _462 = ((((cbMtdParam._m0[10u].y - _406) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _453) + _406;
    float _463 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _407)) * _453) + _407;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _478 = _476.x;
    float _480 = _478 - (_478 * _396);
    float _482 = _480 - (_480 * _453);
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _503 = (_496.x * 2.0) + (-1.0);
    float _504 = (_496.y * 2.0) + (-1.0);
    float _505 = dot(vec2(_503, _504), vec2(_503, _504));
    float _3635 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _513 = ((_496.z - _308) * _396) + _308;
    float _516 = ((cbMtdParam._m0[23u].y - _513) * _453) + _513;
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _541 = (_535.x * 2.0) + (-1.0);
    float _542 = (_535.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3646 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _558 = ((sqrt(1.0 - (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) - _322) * _398) + _322;
    float _561 = (((_503 - _313) * _396) + _313) + (cbMtdParam._m0[21u].x * _313);
    float _562 = (((_504 - _315) * _397) + _315) + (cbMtdParam._m0[21u].x * _315);
    float _573 = (((_541 - _561) + (_561 * cbMtdParam._m0[22u].z)) * _453) + _561;
    float _574 = (((_542 - _562) + (_562 * cbMtdParam._m0[22u].z)) * _453) + _562;
    float _575 = (_453 * (sqrt(1.0 - (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) - _558)) + _558;
    float _577 = cbMtdParam._m0[22u].x + _304.w;
    float _580 = fma(_575, _227, fma(_574, _234, _573 * _220));
    float _583 = fma(_575, _228, fma(_574, _235, _573 * _221));
    float _586 = fma(_575, _229, fma(_574, _236, _573 * _222));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _591 = _590 * _580;
    float _592 = _590 * _583;
    float _593 = _590 * _586;
    float _3657 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _594 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3679 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3690 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3701 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3712 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _599 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _663 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _653);
    float _664 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _653);
    float _665 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _653);
    float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
    float _670 = _663 * _669;
    float _671 = _664 * _669;
    float _672 = _665 * _669;
    vec4 _677 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _679 = _677.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _854 = sqrt(((_663 * _663) + (_664 * _664)) + (_665 * _665));
        float _860 = (cbMatDynParam._m0[5u].x * _854) + cbMatDynParam._m0[5u].y;
        float _3723 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _865 = (cbMatDynParam._m0[5u].z * _854) + cbMatDynParam._m0[5u].w;
        float _3734 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) - _861)) + _861) < ((_679 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _712 = fma(_593, cbSceneParam._m0[5u].z, fma(_592, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _591));
    float _715 = fma(_593, cbSceneParam._m0[6u].z, fma(_592, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _591));
    float _718 = fma(_593, cbSceneParam._m0[7u].z, fma(_592, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _591));
    uint _731 = _239 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3745 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _744 = 1.0 - _599;
    float _745 = _741 * _744;
    float _746 = _742 * _744;
    float _747 = _743 * _744;
    float _752 = (_741 + (-0.039999999105930328369140625)) * _599;
    float _753 = (_742 + (-0.039999999105930328369140625)) * _599;
    float _754 = (_743 + (-0.039999999105930328369140625)) * _599;
    float _755 = _752 + 0.039999999105930328369140625;
    float _757 = _753 + 0.039999999105930328369140625;
    float _758 = _754 + 0.039999999105930328369140625;
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _771 = ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * TEXCOORD_5.w) * _767.x;
    float _772 = dot(vec3(_591, _592, _593), vec3(_670, _671, _672));
    float _775 = _772 * 2.0;
    float _779 = (_775 * _591) - _670;
    float _780 = (_775 * _592) - _671;
    float _781 = (_775 * _593) - _672;
    float _785 = abs(dot(vec3(_670, _671, _672), vec3(_591, _592, _593)));
    float _3778 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = sqrt(_594);
    float _800 = exp2((_787 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_787 * 3.0));
    float _806 = (1.0 - _800) * ((_787 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _807 = _800 * _787;
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1172;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_843, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835));
        float _901 = fma(_843, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835));
        float _905 = fma(_843, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835));
        float _930 = _835 + _591;
        float _931 = _839 + _592;
        float _932 = _843 + _593;
        float _942 = fma(_932, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930)) - _897;
        float _943 = fma(_932, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930)) - _901;
        float _944 = fma(_932, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930)) - _905;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _1000 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_966.x + (-0.5));
        float _1002 = _1000 * (_966.y + (-0.5));
        float _1003 = _1000 * (_966.z + (-0.5));
        float _1010 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_973.x + (-0.5));
        float _1012 = _1010 * (_973.y + (-0.5));
        float _1013 = _1010 * (_973.z + (-0.5));
        float _1020 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_980.x + (-0.5));
        float _1022 = _1020 * (_980.y + (-0.5));
        float _1023 = _1020 * (_980.z + (-0.5));
        float _1030 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_987.x + (-0.5));
        float _1032 = _1030 * (_987.y + (-0.5));
        float _1033 = _1030 * (_987.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1054 = (dot(vec3(_591, _592, _593), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1064 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3826 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1066 + 1.0))) + _1071) * _1034;
        float _1081 = _1002 * 0.5;
        float _1082 = _1012 * 0.5;
        float _1083 = _1022 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_591, _592, _593), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3859 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1108 + 1.0))) + _1113) * _1035;
        float _1123 = _1003 * 0.5;
        float _1124 = _1013 * 0.5;
        float _1125 = _1023 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_591, _592, _593), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3892 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1150 + 1.0))) + _1155) * _1036;
        _1172 = _1003;
        _1174 = _1002;
        _1175 = _1001;
        _1176 = _1013;
        _1177 = _1012;
        _1178 = _1011;
        _1179 = _1023;
        _1180 = _1022;
        _1181 = _1021;
        _1182 = _1036;
        _1183 = _1035;
        _1184 = _1034;
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _1173;
        _1174 = _1173;
        _1175 = _1173;
        _1176 = _1173;
        _1177 = _1173;
        _1178 = _1173;
        _1179 = _1173;
        _1180 = _1173;
        _1181 = _1173;
        _1182 = _1173;
        _1183 = _1173;
        _1184 = _1173;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1215 = fma(_843, cbModelParam._m0[30u].z, fma(_839, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _835));
        float _1219 = fma(_843, cbModelParam._m0[31u].z, fma(_839, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _835));
        float _1223 = fma(_843, cbModelParam._m0[32u].z, fma(_839, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _835));
        float _1246 = _835 + _591;
        float _1247 = _839 + _592;
        float _1248 = _843 + _593;
        float _1258 = fma(_1248, cbModelParam._m0[30u].z, fma(_1247, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1246)) - _1215;
        float _1259 = fma(_1248, cbModelParam._m0[31u].z, fma(_1247, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1246)) - _1219;
        float _1260 = fma(_1248, cbModelParam._m0[32u].z, fma(_1247, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1246)) - _1223;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1215 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1219 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[35u].z) + ((((((_1223 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1314 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1281.x + (-0.5));
        float _1316 = _1314 * (_1281.y + (-0.5));
        float _1317 = _1314 * (_1281.z + (-0.5));
        float _1324 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1288.x + (-0.5));
        float _1326 = _1324 * (_1288.y + (-0.5));
        float _1327 = _1324 * (_1288.z + (-0.5));
        float _1334 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1295.x + (-0.5));
        float _1336 = _1334 * (_1295.y + (-0.5));
        float _1337 = _1334 * (_1295.z + (-0.5));
        float _1344 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1302.x + (-0.5));
        float _1346 = _1344 * (_1302.y + (-0.5));
        float _1347 = _1344 * (_1302.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_591, _592, _593), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3955 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1378 + 1.0))) + _1383) * _1348;
        float _1393 = _1316 * 0.5;
        float _1394 = _1326 * 0.5;
        float _1395 = _1336 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_591, _592, _593), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3988 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1420 + 1.0))) + _1425) * _1349;
        float _1435 = _1317 * 0.5;
        float _1436 = _1327 * 0.5;
        float _1437 = _1337 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_591, _592, _593), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4021 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1462 + 1.0))) + _1467) * _1350;
        _1484 = _1317;
        _1485 = _1316;
        _1486 = _1315;
        _1487 = _1327;
        _1488 = _1326;
        _1489 = _1325;
        _1490 = _1337;
        _1491 = _1336;
        _1492 = _1335;
        _1493 = _1350;
        _1494 = _1349;
        _1495 = _1348;
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1173;
        _1485 = _1173;
        _1486 = _1173;
        _1487 = _1173;
        _1488 = _1173;
        _1489 = _1173;
        _1490 = _1173;
        _1491 = _1173;
        _1492 = _1173;
        _1493 = _1173;
        _1494 = _1173;
        _1495 = _1173;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1185)) + _1185;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1186)) + _1186;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1187)) + _1187;
    float _1531 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1508));
    float _1552 = _779 * 0.5;
    float _1553 = _780 * 0.5;
    float _1554 = _781 * 0.5;
    float _1555 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1558 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1561 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1595;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1568 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1172, _1176, _1179, _1182));
        float _1572 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1576 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1583 = dot(vec4(cbModelParam._m0[39u]), vec4(_1552, _1553, _1554, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1606;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1597 = dot(vec4(cbModelParam._m0[40u]), vec4(_1552, _1553, _1554, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1610 = (_1606 * cbModelParam._m0[1u].x) + (_1595 * (1.0 - cbModelParam._m0[1u].x));
    float _1620 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1620 : min(cbModelParam._m0[25u].z, _1620));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_843, cbModelParam._m0[13u].z, fma(_839, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_843, cbModelParam._m0[14u].z, fma(_839, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_843, cbModelParam._m0[15u].z, fma(_839, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_781, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779));
        float _1683 = fma(_781, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779));
        float _1686 = fma(_781, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1714 = frontier_phi_17_15_ladder;
        }
        float _1939;
        if (_1683 > 0.0)
        {
            _1939 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1939 = frontier_phi_26_22_ladder;
        }
        float _2196;
        if (_1686 > 0.0)
        {
            _2196 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2196 = frontier_phi_38_33_ladder;
        }
        float _2198 = isnan(_1939) ? _1714 : (isnan(_1714) ? _1939 : min(_1714, _1939));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1680) + _1669;
        float _2204 = (_2199 * _1683) + _1673;
        float _2205 = (_2199 * _1686) + _1677;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2206;
        float _2210 = _2206 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 > _2210) || ((_2204 < _2208) || ((_2203 < _2208) || (_2203 > _2210))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2205, cbModelParam._m0[9u].z, fma(_2204, cbModelParam._m0[9u].y, _2203 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2205, cbModelParam._m0[10u].z, fma(_2204, cbModelParam._m0[10u].y, _2203 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2205, cbModelParam._m0[11u].z, fma(_2204, cbModelParam._m0[11u].y, _2203 * cbModelParam._m0[11u].x))), _1621);
            frontier_phi_16_38_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_16_38_ladder_2;
        _1704 = frontier_phi_16_38_ladder_1;
        _1706 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_779, _780, _781), _1621);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1765 = fma(_843, cbModelParam._m0[21u].z, fma(_839, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835)) + cbModelParam._m0[21u].w;
        float _1769 = fma(_843, cbModelParam._m0[22u].z, fma(_839, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835)) + cbModelParam._m0[22u].w;
        float _1773 = fma(_843, cbModelParam._m0[23u].z, fma(_839, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835)) + cbModelParam._m0[23u].w;
        float _1776 = fma(_781, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779));
        float _1779 = fma(_781, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779));
        float _1782 = fma(_781, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779));
        float _1944;
        if (_1776 > 0.0)
        {
            _1944 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1944 = frontier_phi_28_24_ladder;
        }
        float _2223;
        if (_1779 > 0.0)
        {
            _2223 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2223 = frontier_phi_40_35_ladder;
        }
        float _2436;
        if (_1782 > 0.0)
        {
            _2436 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2436 = frontier_phi_49_46_ladder;
        }
        float _2438 = isnan(_2223) ? _1944 : (isnan(_1944) ? _2223 : min(_1944, _2223));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1776) + _1765;
        float _2444 = (_2439 * _1779) + _1769;
        float _2445 = (_2439 * _1782) + _1773;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2446;
        float _2449 = _2446 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2445 > _2449) || ((_2445 < _2447) || ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 < _2447) || (_2443 > _2449))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2644 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2445, cbModelParam._m0[17u].z, fma(_2444, cbModelParam._m0[17u].y, _2443 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2445, cbModelParam._m0[18u].z, fma(_2444, cbModelParam._m0[18u].y, _2443 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2445, cbModelParam._m0[19u].z, fma(_2444, cbModelParam._m0[19u].y, _2443 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_25_49_ladder = _2644.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2644.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2644.x * cbModelParam._m0[1u].z;
        }
        _1801 = frontier_phi_25_49_ladder_2;
        _1803 = frontier_phi_25_49_ladder_1;
        _1805 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_779, _780, _781), _1711);
        _1801 = _1785.x * cbModelParam._m0[1u].z;
        _1803 = _1785.y * cbModelParam._m0[1u].z;
        _1805 = _1785.z * cbModelParam._m0[1u].z;
    }
    float _1818 = (((_806 * _755) + _807) * _771) * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1820 = (((_806 * _757) + _807) * _771) * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1822 = (((_806 * _758) + _807) * _771) * ((cbModelParam._m0[1u].w * (_1805 - _1706)) + _1706);
    float _1825 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, _1818 * cbSceneParam._m0[91u].x));
    vec4 _1839 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_691, _692));
    float _1841 = _1839.w;
    float _1853 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1841);
    float _1854 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1841);
    float _1855 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1841);
    uvec4 _1859 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1861 = _1859.x * 14u;
    uint _1862 = _1861 + 13u;
    float _1869 = _771 + (-1.0);
    float _1874 = (cbLight._m0[_1862].x * _1869) + 1.0;
    float _1875 = (cbLight._m0[_1862].y * _1869) + 1.0;
    float _1876 = (cbLight._m0[_1862].z * _1869) + 1.0;
    float _1877 = (cbLight._m0[_1862].w * _1869) + 1.0;
    uint _1878 = _1861 + 5u;
    float _1884 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1888 = _1861 + 4u;
    float _1898 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1902 = _1861 | 1u;
    float _1913 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_591, _592, _593));
    float _1916 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_591, _592, _593));
    float _4157 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _4168 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1921 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _1923 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _1930 = ((cbLight._m0[_1878].x * _1884) * _1923) + (((cbLight._m0[_1888].x * _1853) * _1898) * _1921);
    float _1931 = ((_1884 * cbLight._m0[_1878].y) * _1923) + (((cbLight._m0[_1888].y * _1854) * _1898) * _1921);
    float _1932 = ((_1884 * cbLight._m0[_1878].z) * _1923) + (((cbLight._m0[_1888].z * _1855) * _1898) * _1921);
    uvec4 _1936 = floatBitsToUint(cbLight._m0[_1861 + 12u]);
    bool _1938 = _1936.x == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1938)
    {
        _1949 = _1930;
        _1951 = _1931;
        _1953 = _1932;
    }
    else
    {
        uint _1957 = _1861 + 6u;
        float _1973 = (dot(vec3(cbLight._m0[_1861 + 2u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _1974 = _1973 * _1973;
        float _4179 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1976 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1949 = (((cbLight._m0[_1957].x * 0.3183098733425140380859375) * _1975) * _1976) + _1930;
        _1951 = (((cbLight._m0[_1957].y * 0.3183098733425140380859375) * _1975) * _1976) + _1931;
        _1953 = (((cbLight._m0[_1957].z * 0.3183098733425140380859375) * _1975) * _1976) + _1932;
    }
    bool _1956 = _1936.y == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1956)
    {
        _1994 = _1949;
        _1996 = _1951;
        _1998 = _1953;
    }
    else
    {
        uint _2167 = _1861 + 7u;
        float _2183 = (dot(vec3(cbLight._m0[_1861 + 3u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2184 = _2183 * _2183;
        float _4195 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2185 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2186 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1994 = (((cbLight._m0[_2167].x * 0.3183098733425140380859375) * _2185) * _2186) + _1949;
        _1996 = (((cbLight._m0[_2167].y * 0.3183098733425140380859375) * _2185) * _2186) + _1951;
        _1998 = (((cbLight._m0[_2167].z * 0.3183098733425140380859375) * _2185) * _2186) + _1953;
    }
    uint _2001 = _1861 + 8u;
    float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _594) * 0.949999988079071044921875);
    float _2015 = _2014 * _2014;
    float _2016 = cbLight._m0[_1861].x + _670;
    float _2017 = cbLight._m0[_1861].y + _671;
    float _2018 = cbLight._m0[_1861].z + _672;
    float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
    float _2023 = _2022 * _2016;
    float _2024 = _2022 * _2017;
    float _2025 = _2022 * _2018;
    float _2026 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_1861].xyz));
    float _4211 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2030 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2031 = dot(vec3(_591, _592, _593), vec3(_2023, _2024, _2025));
    float _4233 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2023, _2024, _2025));
    float _4244 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2039 = _2015 * _2015;
    float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
    float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
    float _2052 = 0.959999978542327880859375 - _752;
    float _2054 = 0.959999978542327880859375 - _753;
    float _2055 = 0.959999978542327880859375 - _754;
    float _2062 = 1.0 - _2015;
    float _2073 = (0.5 / (((_2030 * ((_2029 * _2062) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2062) + _2015) * _2029))) * _2029;
    float _4255 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
    uint _2089 = _1861 + 9u;
    float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _594) * 0.949999988079071044921875);
    float _2101 = _2100 * _2100;
    float _2102 = cbLight._m0[_1902].x + _670;
    float _2103 = cbLight._m0[_1902].y + _671;
    float _2104 = cbLight._m0[_1902].z + _672;
    float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
    float _2109 = _2108 * _2102;
    float _2110 = _2108 * _2103;
    float _2111 = _2108 * _2104;
    float _2112 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_1902].xyz));
    float _4266 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2116 = dot(vec3(_591, _592, _593), vec3(_2109, _2110, _2111));
    float _4277 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2120 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2109, _2110, _2111));
    float _4288 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = _2101 * _2101;
    float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
    float _2135 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
    float _2142 = 1.0 - _2101;
    float _2152 = (0.5 / (((_2030 * ((_2115 * _2142) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2142) + _2101) * _2115))) * _2115;
    float _4299 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2154 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
    float _2164 = (((((_2135 * _2052) + _755) * cbLight._m0[_2089].x) * _2154) * _1884) + ((((cbLight._m0[_2001].x * _1853) * ((_2051 * _2052) + _755)) * _2075) * _1898);
    float _2165 = (((((_2135 * _2054) + _757) * cbLight._m0[_2089].y) * _2154) * _1884) + ((((cbLight._m0[_2001].y * _1854) * ((_2051 * _2054) + _757)) * _2075) * _1898);
    float _2166 = (((((_2135 * _2055) + _758) * cbLight._m0[_2089].z) * _2154) * _1884) + ((((cbLight._m0[_2001].z * _1855) * ((_2051 * _2055) + _758)) * _2075) * _1898);
    float _2228;
    float _2230;
    float _2232;
    if (_1938)
    {
        _2228 = _2164;
        _2230 = _2165;
        _2232 = _2166;
    }
    else
    {
        uint _2234 = _1861 + 2u;
        uint _2238 = _1861 + 10u;
        float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _594) * 0.949999988079071044921875);
        float _2253 = _2252 * _2252;
        float _2254 = cbLight._m0[_2234].x + _670;
        float _2255 = cbLight._m0[_2234].y + _671;
        float _2256 = cbLight._m0[_2234].z + _672;
        float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
        float _2261 = _2260 * _2254;
        float _2262 = _2260 * _2255;
        float _2263 = _2260 * _2256;
        float _2264 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2234].xyz));
        float _4310 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2268 = dot(vec3(_591, _592, _593), vec3(_2261, _2262, _2263));
        float _4321 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2272 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2261, _2262, _2263));
        float _4332 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2276 = _2253 * _2253;
        float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
        float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
        float _2294 = 1.0 - _2253;
        float _2304 = (0.5 / (((_2030 * ((_2267 * _2294) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2294) + _2253) * _2267))) * _2267;
        float _4343 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2306 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
        float _2307 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2228 = (((((_2287 * _2052) + _755) * cbLight._m0[_2238].x) * _2306) * _2307) + _2164;
        _2230 = (((((_2287 * _2054) + _757) * cbLight._m0[_2238].y) * _2306) * _2307) + _2165;
        _2232 = (((((_2287 * _2055) + _758) * cbLight._m0[_2238].z) * _2306) * _2307) + _2166;
    }
    float _2342;
    float _2344;
    float _2346;
    if (_1956)
    {
        _2342 = _2228;
        _2344 = _2230;
        _2346 = _2232;
    }
    else
    {
        uint _2353 = _1861 + 3u;
        uint _2357 = _1861 + 11u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _594) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _670;
        float _2374 = cbLight._m0[_2353].y + _671;
        float _2375 = cbLight._m0[_2353].z + _672;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2353].xyz));
        float _4359 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2387 = dot(vec3(_591, _592, _593), vec3(_2380, _2381, _2382));
        float _4370 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4381 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2413 = 1.0 - _2372;
        float _2423 = (0.5 / (((_2030 * ((_2386 * _2413) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2413) + _2372) * _2386))) * _2386;
        float _4392 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2342 = (((((_2406 * _2052) + _755) * cbLight._m0[_2357].x) * _2425) * _2426) + _2228;
        _2344 = (((((_2406 * _2054) + _757) * cbLight._m0[_2357].y) * _2425) * _2426) + _2230;
        _2346 = (((((_2406 * _2055) + _758) * cbLight._m0[_2357].z) * _2425) * _2426) + _2232;
    }
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_1859.y == 0u)
    {
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2501;
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2501;
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2501;
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.x;
        uint _2528 = uint((float(_2516.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2517))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2517)));
        float _2538 = (log2(_2504 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2539 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        uint _2542 = uint(isnan(14.0) ? _2539 : (isnan(_2539) ? 14.0 : min(_2539, 14.0)));
        uvec4 _2547 = texelFetch(g_lightClusterGridBuffer, int(((_2542 << 2u) + (_2528 << 6u)) >> 2u));
        uint _2548 = _2547.x;
        uint _2549 = _2516.z;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((((1u << ((_2549 >> 4u) & 15u)) + 4294967295u) & _2548) == 0u) || ((_2549 & 240u) == 0u))
        {
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
        }
        else
        {
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            uint _2807 = 0u;
            uint _2816;
            bool _2817;
            for (;;)
            {
                _2816 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                _2817 = _2816 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2817)
                {
                    frontier_phi_66_pred = _2801;
                    frontier_phi_66_pred_1 = _2806;
                    frontier_phi_66_pred_2 = _2805;
                    frontier_phi_66_pred_3 = _2804;
                    frontier_phi_66_pred_4 = _2803;
                    frontier_phi_66_pred_5 = _2802;
                }
                else
                {
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    uint _2952;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2816;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2956 = uint(findLSB(_2952)) + (_2807 << 5u);
                        uint _2953 = (_2952 + 4294967295u) & _2952;
                        uint _2958 = _2956 * 48u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2978 = (_2956 * 48u) + 4u;
                        vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2997 = (_2956 * 48u) + 8u;
                        vec3 _3008 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x));
                        float _3012 = _2972.x - _2502;
                        float _3013 = _2972.y - _2503;
                        float _3014 = _2972.z - _2504;
                        float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                        float _3018 = inversesqrt(_3015);
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3022 = dot(vec3(_712, _715, _718), vec3(_3019, _3020, _3021));
                        float _3027 = 1.0 - (_3015 * _2972.w);
                        float _4418 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3029 = sqrt(_3015) * _2991.w;
                        float _3032 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _3022) + _3033;
                        float _3039 = _3029 * _3029;
                        float _3043 = ((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3028) / ((_3039 * 0.699999988079071044921875) + 1.0);
                        float _3047 = (-0.0) - _2502;
                        float _3048 = (-0.0) - _2503;
                        float _3049 = (-0.0) - _2504;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3064 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                        float _3065 = 1.0 - _787;
                        float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                        float _3073 = _3072 * _3072;
                        float _3074 = _3073 * _3073;
                        float _3075 = _3054 + _3019;
                        float _3076 = _3055 + _3020;
                        float _3077 = _3056 + _3021;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3085 = dot(vec3(_712, _715, _718), vec3(_3054, _3055, _3056));
                        float _4434 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3089 = dot(vec3(_712, _715, _718), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                        float _4445 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                        float _3097 = _3032 * _3073;
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3022) + _3098;
                        float _4456 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3103 = 1.0 - _3073;
                        float _3113 = (0.5 / (((_3102 * ((_3088 * _3103) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3073) * _3088))) * _3102;
                        float _4467 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3124 = (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3096 * _3096) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125))) * _3028;
                        _2876 = (_3043 * _2991.x) + _2949;
                        _2877 = (_3043 * _2991.y) + _2950;
                        _2878 = (_3043 * _2991.z) + _2951;
                        _2873 = (_3124 * _3008.x) + _2946;
                        _2874 = (_3124 * _3008.y) + _2947;
                        _2875 = (_3124 * _3008.z) + _2948;
                        if (_2953 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2953;
                        }
                    }
                    frontier_phi_66_pred = _2873;
                    frontier_phi_66_pred_1 = _2878;
                    frontier_phi_66_pred_2 = _2877;
                    frontier_phi_66_pred_3 = _2876;
                    frontier_phi_66_pred_4 = _2875;
                    frontier_phi_66_pred_5 = _2874;
                }
                _2650 = frontier_phi_66_pred;
                _2660 = frontier_phi_66_pred_1;
                _2658 = frontier_phi_66_pred_2;
                _2656 = frontier_phi_66_pred_3;
                _2654 = frontier_phi_66_pred_4;
                _2652 = frontier_phi_66_pred_5;
                uint _2808 = _2807 + 1u;
                if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2801 = _2650;
                    _2802 = _2652;
                    _2803 = _2654;
                    _2804 = _2656;
                    _2805 = _2658;
                    _2806 = _2660;
                    _2807 = _2808;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
        }
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.z;
        uint _2666 = (_2664 >> 8u) & 15u;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((4294967295u << _2666) & _2548) == 0u)
        {
            _2769 = _2649;
            _2771 = _2651;
            _2773 = _2653;
            _2775 = _2655;
            _2777 = _2657;
            _2779 = _2659;
        }
        else
        {
            float _2794 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
            float _2795 = _2794 * _2502;
            float _2796 = _2794 * _2503;
            float _2797 = _2794 * _2504;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2666 < ((_2664 >> 12u) & 15u))
            {
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2929 = _2649;
                float _2930 = _2651;
                float _2931 = _2653;
                float _2932 = _2655;
                float _2933 = _2657;
                float _2934 = _2659;
                uint _2935 = _2666;
                uint _2944;
                bool _2945;
                for (;;)
                {
                    _2944 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                    _2945 = _2944 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2945)
                    {
                        frontier_phi_77_pred = _2934;
                        frontier_phi_77_pred_1 = _2933;
                        frontier_phi_77_pred_2 = _2932;
                        frontier_phi_77_pred_3 = _2931;
                        frontier_phi_77_pred_4 = _2930;
                        frontier_phi_77_pred_5 = _2929;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        uint _3157 = _2944;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3227;
                        vec4 _3243;
                        float _3289;
                        bool _3290;
                        for (;;)
                        {
                            uint _3168 = ((_2935 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3214 = (_3168 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3168 * 40u) + 20u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3168 * 40u) + 24u;
                            vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3264 = (_3168 * 40u) + 28u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3289 = fma(_2504, _3277.z, fma(_2503, _3277.y, _3277.x * _2502)) + _3277.w;
                            _3290 = !((fma(_2504, _3258.z, fma(_2503, _3258.y, _3258.x * _2502)) + _3258.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3290)
                            {
                                float _3317 = _3183.x - _2502;
                                float _3318 = _3183.y - _2503;
                                float _3319 = _3183.z - _2504;
                                float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                                float _3323 = inversesqrt(_3320);
                                float _3324 = _3323 * _3317;
                                float _3325 = _3323 * _3318;
                                float _3326 = _3323 * _3319;
                                float _3330 = 1.0 - (_3320 / (_3184 * _3184));
                                float _4478 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3331 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3335 = sqrt(_3320) * _3199.w;
                                float _3337 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                                float _3338 = _3337 * _3337;
                                float _3341 = ((1.0 - _3338) * dot(vec3(_3324, _3325, _3326), vec3(_712, _715, _718))) + _3338;
                                float _3344 = _3335 * _3335;
                                float _3348 = (fma(_2504, _3227.z, fma(_2503, _3227.y, _3227.x * _2502)) + _3227.w) / _3289;
                                float _3349 = (fma(_2504, _3243.z, fma(_2503, _3243.y, _3243.x * _2502)) + _3243.w) / _3289;
                                float _3353 = 1.0 - dot(vec2(_3348, _3349), vec2(_3348, _3349));
                                float _4494 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3355 = _3354 * (((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3331) / ((_3344 * 0.699999988079071044921875) + 1.0));
                                float _3367 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                                float _3368 = 1.0 - _787;
                                float _3375 = sqrt(1.0 - ((1.0 - (_3368 * _3368)) * (1.0 - (_3367 * _3367))));
                                float _3376 = _3375 * _3375;
                                float _3377 = _3376 * _3376;
                                float _3378 = _3324 - _2795;
                                float _3379 = _3325 - _2796;
                                float _3380 = _3326 - _2797;
                                float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                                float _3388 = dot(vec3(_712, _715, _718), vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797));
                                float _4505 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3391 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3392 = dot(vec3(_712, _715, _718), vec3(_3384 * _3378, _3384 * _3379, _3384 * _3380));
                                float _4516 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3399 = ((_3395 * _3395) * (_3377 + (-1.0))) + 1.0;
                                float _3400 = _3337 * _3376;
                                float _3401 = _3400 * _3400;
                                float _3407 = ((1.0 - _3401) * dot(vec3(_712, _715, _718), vec3(_3324, _3325, _3326))) + _3401;
                                float _4527 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3409 = 1.0 - _3376;
                                float _3419 = (0.5 / (((_3408 * ((_3391 * _3409) + _3376)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3376) * _3391))) * _3408;
                                float _4538 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3429 = (_3354 * _3331) * (((_3377 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3399 * _3399) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3355 * _3199.y;
                                frontier_phi_83_pred_1 = _3355 * _3199.x;
                                frontier_phi_83_pred_2 = _3429 * _3211.z;
                                frontier_phi_83_pred_3 = _3429 * _3211.y;
                                frontier_phi_83_pred_4 = _3429 * _3211.x;
                                frontier_phi_83_pred_5 = _3355 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3437 = frontier_phi_83_pred;
                            _3436 = frontier_phi_83_pred_1;
                            _3435 = frontier_phi_83_pred_2;
                            _3434 = frontier_phi_83_pred_3;
                            _3433 = frontier_phi_83_pred_4;
                            _3438 = frontier_phi_83_pred_5;
                            _3141 = _3436 + _3154;
                            _3142 = _3437 + _3155;
                            _3143 = _3438 + _3156;
                            _3138 = _3433 + _3151;
                            _3139 = _3434 + _3152;
                            _3140 = _3435 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3143;
                        frontier_phi_77_pred_1 = _3142;
                        frontier_phi_77_pred_2 = _3141;
                        frontier_phi_77_pred_3 = _3140;
                        frontier_phi_77_pred_4 = _3139;
                        frontier_phi_77_pred_5 = _3138;
                    }
                    _2780 = frontier_phi_77_pred;
                    _2778 = frontier_phi_77_pred_1;
                    _2776 = frontier_phi_77_pred_2;
                    _2774 = frontier_phi_77_pred_3;
                    _2772 = frontier_phi_77_pred_4;
                    _2770 = frontier_phi_77_pred_5;
                    uint _2936 = _2935 + 1u;
                    if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2929 = _2770;
                        _2930 = _2772;
                        _2931 = _2774;
                        _2932 = _2776;
                        _2933 = _2778;
                        _2934 = _2780;
                        _2935 = _2936;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2774;
                frontier_phi_58_59_ladder_1 = _2780;
                frontier_phi_58_59_ladder_2 = _2778;
                frontier_phi_58_59_ladder_3 = _2776;
                frontier_phi_58_59_ladder_4 = _2772;
                frontier_phi_58_59_ladder_5 = _2770;
            }
            else
            {
                frontier_phi_58_59_ladder = _2653;
                frontier_phi_58_59_ladder_1 = _2659;
                frontier_phi_58_59_ladder_2 = _2657;
                frontier_phi_58_59_ladder_3 = _2655;
                frontier_phi_58_59_ladder_4 = _2651;
                frontier_phi_58_59_ladder_5 = _2649;
            }
            _2769 = frontier_phi_58_59_ladder_5;
            _2771 = frontier_phi_58_59_ladder_4;
            _2773 = frontier_phi_58_59_ladder;
            _2775 = frontier_phi_58_59_ladder_3;
            _2777 = frontier_phi_58_59_ladder_2;
            _2779 = frontier_phi_58_59_ladder_1;
        }
        float _2784 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        _2561 = (_2784 * _2775) + _1994;
        _2563 = (_2784 * _2777) + _1996;
        _2565 = (_2784 * _2779) + _1998;
        _2567 = ((_2769 * _755) * _2784) + _2342;
        _2569 = ((_2771 * _757) * _2784) + _2344;
        _2571 = ((_2773 * _758) * _2784) + _2346;
    }
    else
    {
        _2561 = _1994;
        _2563 = _1996;
        _2565 = _1998;
        _2567 = _2342;
        _2569 = _2344;
        _2571 = _2346;
    }
    float _4554 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4565 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4576 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2588 = ((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2561 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _771))) + ((_2567 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1610)) * cbPerFrame._m0[3u].x);
    float _2589 = ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2563 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _771))) + ((_2569 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1610)) * cbPerFrame._m0[3u].x);
    float _2590 = ((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2565 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _771))) + ((_2571 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1610)) * cbPerFrame._m0[3u].x);
    uint _2591 = _239 + 6u;
    float _2599 = _691 / cbSceneParam._m0[86u].x;
    float _2600 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2614 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2616 = _2614.x;
    float _2617 = _2614.y;
    float _2618 = _2614.z;
    float _2619 = _2614.w;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2674 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2675 = _2674 / _613;
        float _2686 = _2675 * _663;
        float _2687 = _664 * _2675;
        float _2688 = (-0.0) - _2687;
        float _2689 = _2675 * _665;
        float _2691 = (cbSceneParam._m0[77u].w * _2688) / _2674;
        float _2692 = _2691 + cbSceneParam._m0[79u].w;
        float _2693 = cbSceneParam._m0[79u].w - _2687;
        float _2699 = sqrt(((_2686 * _2686) + (_2687 * _2687)) + (_2689 * _2689));
        float _2702 = (1.0 - (cbSceneParam._m0[77u].w / _2674)) * _2699;
        float _2707 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2709 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2886;
        if (abs((_2688 - _2691) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2886 = ((((_2692 > 0.0) ? exp2(_2707 * _2692) : (2.0 - exp2(_2709 * _2692))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2702;
        }
        else
        {
            float _2830 = 1.0 / cbSceneParam._m0[80u].x;
            float _2831 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : max(_2692, _2693));
            float _2832 = isnan(_2693) ? _2692 : (isnan(_2692) ? _2693 : min(_2692, _2693));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            _2886 = ((abs(_2699 / _2688) * cbSceneParam._m0[80u].y) * ((((_2841 - _2842) * 2.0) - ((exp2(_2707 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)))) - exp2(_2707 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))))) * _2830)) - ((exp2(_2709 * _2841) - exp2(_2709 * _2842)) * _2830))) + (_2702 * cbSceneParam._m0[80u].z);
        }
        vec4 _2888 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2599, _2600, 1.0), 0.0);
        float _2897 = exp2((_2886 * (-1.44269502162933349609375)) * (1.0 - _2888.w));
        float _2898 = log2(_2897);
        float _2914 = log2(_2619);
        _2711 = (exp2(_2914 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].x)) * _2888.x) / cbSceneParam._m0[78u].x)) + _2616;
        _2713 = (exp2(_2914 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].y)) * _2888.y) / cbSceneParam._m0[78u].y)) + _2617;
        _2715 = (exp2(_2914 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].z)) * _2888.z) / cbSceneParam._m0[78u].z)) + _2618;
        _2717 = _2897 * _2619;
    }
    else
    {
        _2711 = _2616;
        _2713 = _2617;
        _2715 = _2618;
        _2717 = _2619;
    }
    bool _2924;
    vec4 _2727;
    vec4 _2749;
    float _2751;
    float _2755;
    float _2756;
    float _2757;
    float _2758;
    bool _2768;
    for (;;)
    {
        _2727 = cbMatDynParam._m0[0u];
        float _2729 = roundEven(_2727.y);
        bool _2730 = _2729 == 3.0;
        float _2731 = log2(_2717);
        float _2738 = exp2(_2731 * cbSceneParam._m0[78u].x) * _2588;
        float _2739 = exp2(_2731 * cbSceneParam._m0[78u].y) * _2589;
        float _2740 = exp2(_2731 * cbSceneParam._m0[78u].z) * _2590;
        float _2747 = _679 + (-0.5);
        _2749 = cbMtdParam._m0[1u];
        _2751 = _2749.y * _2747;
        float _2754 = (_2729 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2755 = _2754 * (_2730 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2711)));
        _2756 = _2754 * (_2730 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2713)));
        _2757 = _2754 * (_2730 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2715)));
        _2758 = _2747 * 0.999000012874603271484375;
        _2768 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2768)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2758) < 0.5)
            {
                _2924 = true;
                break;
            }
        }
        uint _2865 = _731 + uint(_2727.w);
        if ((cbInstanceData._m0[_2865].w < 1.0) && ((cbInstanceData._m0[_2865].w + _2758) < 0.5))
        {
            _2924 = true;
            break;
        }
        if ((_2751 + 1.0) < _2749.x)
        {
            _2924 = true;
            break;
        }
        _2924 = false;
        break;
    }
    float _3129;
    if (_2924)
    {
        discard_state = true;
        _3129 = 0.0;
    }
    else
    {
        _3129 = cbInstanceData._m0[_2591].w;
    }
    SV_Target.x = _2755;
    SV_Target.y = _2756;
    SV_Target.z = _2757;
    SV_Target.w = _3129;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2591].w;
    discard_exit();
}


