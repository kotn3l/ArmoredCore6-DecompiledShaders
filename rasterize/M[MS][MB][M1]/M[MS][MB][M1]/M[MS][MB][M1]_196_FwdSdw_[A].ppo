#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1363;
float _4024;
float _4025;
float _4026;
float _4027;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].y) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4036 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _398 = (_391 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _399 = (_391 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _400 = (_391 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].y) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4047 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _533 = _529.z;
    float _540 = ((_512.x - _531) * _391) + _531;
    float _541 = ((_512.y - _532) * _391) + _532;
    float _542 = ((_512.z - _533) * _391) + _533;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _567 = ((_554.z - _542) * _464) + _542;
    float _570 = ((((_554.x - _540) * _464) + _540) * 2.0) + (-1.0);
    float _572 = ((((_554.y - _541) * _464) + _541) * 2.0) + (-1.0);
    float _573 = dot(vec2(_570, _572), vec2(_570, _572));
    float _4058 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _619 = _617.x;
    float _620 = 1.0 - _619;
    float _633 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_619 - _620) * cbMtdParam._m0[24u].z) + _620) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4069 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _641 = (_634 * ((_492.x * cbMtdParam._m0[18u].x) - _471)) + _471;
    float _642 = (_634 * ((_492.y * cbMtdParam._m0[18u].y) - _472)) + _472;
    float _643 = (_634 * ((_492.z * cbMtdParam._m0[18u].z) - _473)) + _473;
    vec4 _655 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _669 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _671 = _669.x;
    float _689 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _671) * _391) + _671;
    float _706 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _689) * _464) + _689;
    float _710 = ((_655.x - _706) * cbMtdParam._m0[19u].z) + _706;
    float _712 = _710 - (_710 * _634);
    float _716 = (cbMtdParam._m0[19u].w * (_592.z - _567)) + _567;
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _736 = (_729.x * 2.0) + (-1.0);
    float _737 = (_729.y * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _4080 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _746 = (_634 * (_729.z - _716)) + _716;
    float _749 = (((_592.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _570;
    float _750 = (((_592.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _572;
    float _762 = (((_736 - _749) + (cbMtdParam._m0[21u].x * _749)) * _634) + _749;
    float _763 = (((_737 - _750) + (cbMtdParam._m0[21u].x * _750)) * _634) + _750;
    float _764 = (_634 * (sqrt(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) - _578)) + _578;
    float _769 = cbMtdParam._m0[22u].x + _592.w;
    float _772 = fma(_764, _239 * NORMAL.x, fma(_763, _246 * TANGENT.x, (_232 * _224) * _762));
    float _775 = fma(_764, _239 * NORMAL.y, fma(_763, _246 * TANGENT.y, (_232 * _225) * _762));
    float _778 = fma(_764, _239 * NORMAL.z, fma(_763, _246 * TANGENT.z, (_232 * _226) * _762));
    float _782 = inversesqrt(dot(vec3(_772, _775, _778), vec3(_772, _775, _778)));
    float _783 = _782 * _772;
    float _784 = _782 * _775;
    float _785 = _782 * _778;
    float _4091 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _786 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4113 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4124 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4135 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4146 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _791 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _856 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _846);
    float _857 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _846);
    float _858 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _846);
    float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
    float _863 = _856 * _862;
    float _864 = _857 * _862;
    float _865 = _858 * _862;
    vec4 _870 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _872 = _870.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1044 = sqrt(((_856 * _856) + (_857 * _857)) + (_858 * _858));
        float _1050 = (cbMatDynParam._m0[5u].x * _1044) + cbMatDynParam._m0[5u].y;
        float _4157 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1055 = (cbMatDynParam._m0[5u].z * _1044) + cbMatDynParam._m0[5u].w;
        float _4168 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) - _1051)) + _1051) < ((_872 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _883 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _884 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _902 = fma(_785, cbSceneParam._m0[5u].z, fma(_784, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _783));
    float _905 = fma(_785, cbSceneParam._m0[6u].z, fma(_784, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _783));
    float _908 = fma(_785, cbSceneParam._m0[7u].z, fma(_784, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _783));
    uint _921 = _252 + 9u;
    uint _922 = _921 + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_922].z;
    float _4179 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _934 = 1.0 - _791;
    float _935 = _931 * _934;
    float _936 = _932 * _934;
    float _937 = _933 * _934;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _791;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _791;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _791;
    float _945 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _883, cbSceneParam._m0[86u].y * _884));
    float _961 = ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_783, _784, _785), vec3(_863, _864, _865));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _783) - _863;
    float _970 = (_965 * _784) - _864;
    float _971 = (_965 * _785) - _865;
    float _975 = abs(dot(vec3(_863, _864, _865), vec3(_783, _784, _785)));
    float _4212 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_786);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _996 = (1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _997 = _990 * _977;
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1033, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025));
        float _1091 = fma(_1033, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025));
        float _1095 = fma(_1033, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025));
        float _1120 = _1025 + _783;
        float _1121 = _1029 + _784;
        float _1122 = _1033 + _785;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_783, _784, _785), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4260 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_783, _784, _785), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4293 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_783, _784, _785), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4326 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1033, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025));
        float _1408 = fma(_1033, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025));
        float _1412 = fma(_1033, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025));
        float _1435 = _1025 + _783;
        float _1436 = _1029 + _784;
        float _1437 = _1033 + _785;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_783, _784, _785), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4389 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_783, _784, _785), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4422 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_783, _784, _785), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4455 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1363;
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = _1363;
        _1683 = _1363;
        _1684 = _1363;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1375)) + _1375;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1376)) + _1376;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1377)) + _1377;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _969 * 0.5;
    float _1742 = _970 * 0.5;
    float _1743 = _971 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _786);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1033, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1033, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1033, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1871 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1874 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1902 = frontier_phi_17_15_ladder;
        }
        float _2073;
        if (_1871 > 0.0)
        {
            _2073 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2073 = frontier_phi_26_22_ladder;
        }
        float _2368;
        if (_1874 > 0.0)
        {
            _2368 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2368 = frontier_phi_38_33_ladder;
        }
        float _2370 = isnan(_2073) ? _1902 : (isnan(_1902) ? _2073 : min(_1902, _2073));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1868) + _1857;
        float _2376 = (_2371 * _1871) + _1861;
        float _2377 = (_2371 * _1874) + _1865;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2378;
        float _2382 = _2378 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 > _2382) || ((_2376 < _2380) || ((_2375 < _2380) || (_2375 > _2382))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2377, cbModelParam._m0[9u].z, fma(_2376, cbModelParam._m0[9u].y, _2375 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2377, cbModelParam._m0[10u].z, fma(_2376, cbModelParam._m0[10u].y, _2375 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2377, cbModelParam._m0[11u].z, fma(_2376, cbModelParam._m0[11u].y, _2375 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_16_38_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_16_38_ladder_2;
        _1892 = frontier_phi_16_38_ladder_1;
        _1894 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1810);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _786);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1952 = fma(_1033, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025)) + cbModelParam._m0[21u].w;
        float _1956 = fma(_1033, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025)) + cbModelParam._m0[22u].w;
        float _1960 = fma(_1033, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025)) + cbModelParam._m0[23u].w;
        float _1963 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1966 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1969 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2078;
        if (_1963 > 0.0)
        {
            _2078 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2078 = frontier_phi_28_24_ladder;
        }
        float _2395;
        if (_1966 > 0.0)
        {
            _2395 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2395 = frontier_phi_40_35_ladder;
        }
        float _2733;
        if (_1969 > 0.0)
        {
            _2733 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2733 = frontier_phi_50_47_ladder;
        }
        float _2735 = isnan(_2395) ? _2078 : (isnan(_2078) ? _2395 : min(_2078, _2395));
        float _2736 = isnan(_2733) ? _2735 : (isnan(_2735) ? _2733 : min(_2735, _2733));
        float _2740 = (_2736 * _1963) + _1952;
        float _2741 = (_2736 * _1966) + _1956;
        float _2742 = (_2736 * _1969) + _1960;
        float _2743 = _2736 * 9.9999997473787516355514526367188e-05;
        float _2744 = (-1.0) - _2743;
        float _2746 = _2743 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2742 > _2746) || ((_2742 < _2744) || ((_2741 > _2746) || ((_2741 < _2744) || ((_2740 < _2744) || (_2740 > _2746))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2742, cbModelParam._m0[17u].z, fma(_2741, cbModelParam._m0[17u].y, _2740 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2742, cbModelParam._m0[18u].z, fma(_2741, cbModelParam._m0[18u].y, _2740 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2742, cbModelParam._m0[19u].z, fma(_2741, cbModelParam._m0[19u].y, _2740 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_25_50_ladder = _2864.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2864.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2864.x * cbModelParam._m0[1u].z;
        }
        _1988 = frontier_phi_25_50_ladder_2;
        _1990 = frontier_phi_25_50_ladder_1;
        _1992 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1899);
        _1988 = _1972.x * cbModelParam._m0[1u].z;
        _1990 = _1972.y * cbModelParam._m0[1u].z;
        _1992 = _1972.z * cbModelParam._m0[1u].z;
    }
    float _2005 = (((_996 * _945) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2007 = (((_996 * _947) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2009 = (((_996 * _948) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2012 = fma(_2009, cbSceneParam._m0[89u].z, fma(_2007, cbSceneParam._m0[89u].y, _2005 * cbSceneParam._m0[89u].x));
    float _2015 = fma(_2009, cbSceneParam._m0[90u].z, fma(_2007, cbSceneParam._m0[90u].y, _2005 * cbSceneParam._m0[90u].x));
    float _2018 = fma(_2009, cbSceneParam._m0[91u].z, fma(_2007, cbSceneParam._m0[91u].y, _2005 * cbSceneParam._m0[91u].x));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2065 = _2052 / _2064;
    float _2066 = _2056 / _2064;
    float _2067 = _2060 / _2064;
    float _2214;
    float _2215;
    float _2216;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2094 = ((uint(_2067 > cbSceneParam._m0[59u].y) + uint(_2067 > cbSceneParam._m0[59u].x)) + uint(_2067 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2095 = _2094 + 43u;
        uint _2103 = _2094 + 44u;
        uint _2111 = _2094 + 45u;
        uint _2119 = _2094 + 46u;
        float _2130 = fma(_2064, cbSceneParam._m0[_2095].w, fma(_2060, cbSceneParam._m0[_2095].z, fma(_2056, cbSceneParam._m0[_2095].y, _2052 * cbSceneParam._m0[_2095].x)));
        float _2134 = fma(_2064, cbSceneParam._m0[_2103].w, fma(_2060, cbSceneParam._m0[_2103].z, fma(_2056, cbSceneParam._m0[_2103].y, _2052 * cbSceneParam._m0[_2103].x)));
        float _2142 = fma(_2064, cbSceneParam._m0[_2119].w, fma(_2060, cbSceneParam._m0[_2119].z, fma(_2056, cbSceneParam._m0[_2119].y, _2052 * cbSceneParam._m0[_2119].x)));
        float _2147 = cbSceneParam._m0[33u].z * _2142;
        float _2149 = cbSceneParam._m0[33u].w * _2142;
        float _2152 = fma(_2064, cbSceneParam._m0[_2111].w, fma(_2060, cbSceneParam._m0[_2111].z, fma(_2056, cbSceneParam._m0[_2111].y, _2052 * cbSceneParam._m0[_2111].x))) / _2142;
        float _2200 = (cbSceneParam._m0[33u].x - sqrt(((_2066 * _2066) + (_2065 * _2065)) + (_2067 * _2067))) * cbSceneParam._m0[33u].y;
        float _4581 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2207 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 + _2130) / _2142, (_2149 + _2134) / _2142), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 + _2130) / _2142, (_2134 - _2147) / _2142), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 - _2147) / _2142, (_2134 - _2149) / _2142), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2130 - _2149) / _2142, (_2147 + _2134) / _2142), _2152), 0.0)).x), vec4(0.25)));
        _2214 = 1.0 - (_2207 * cbSceneParam._m0[34u].x);
        _2215 = 1.0 - (_2207 * cbSceneParam._m0[34u].y);
        _2216 = 1.0 - (_2207 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2214 = 1.0;
        _2215 = 1.0;
        _2216 = 1.0;
    }
    float _2280;
    float _2282;
    float _2284;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2268 = fma(_2064, cbSceneParam._m0[63u].w, fma(_2060, cbSceneParam._m0[63u].z, fma(_2056, cbSceneParam._m0[63u].y, _2052 * cbSceneParam._m0[63u].x)));
        float _2269 = fma(_2064, cbSceneParam._m0[60u].w, fma(_2060, cbSceneParam._m0[60u].z, fma(_2056, cbSceneParam._m0[60u].y, _2052 * cbSceneParam._m0[60u].x))) / _2268;
        float _2270 = fma(_2064, cbSceneParam._m0[61u].w, fma(_2060, cbSceneParam._m0[61u].z, fma(_2056, cbSceneParam._m0[61u].y, _2052 * cbSceneParam._m0[61u].x))) / _2268;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2269 >= cbSceneParam._m0[64u].x) && (_2270 >= cbSceneParam._m0[64u].y)) && (_2269 <= cbSceneParam._m0[64u].z)) && (_2270 <= cbSceneParam._m0[64u].w))
        {
            float _2408 = fma(_2064, cbSceneParam._m0[62u].w, fma(_2060, cbSceneParam._m0[62u].z, fma(_2056, cbSceneParam._m0[62u].y, _2052 * cbSceneParam._m0[62u].x))) / _2268;
            float _2412 = isnan(cbSceneParam._m0[41u].w) ? _2408 : (isnan(_2408) ? cbSceneParam._m0[41u].w : max(_2408, cbSceneParam._m0[41u].w));
            float _2455 = (cbSceneParam._m0[33u].x - sqrt(((_2066 * _2066) + (_2065 * _2065)) + (_2067 * _2067))) * cbSceneParam._m0[33u].y;
            float _4597 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
            float _2462 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2269, cbSceneParam._m0[33u].w + _2270), _2412), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2269, _2270 - cbSceneParam._m0[33u].z), _2412), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2269 - cbSceneParam._m0[33u].z, _2270 - cbSceneParam._m0[33u].w), _2412), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2269 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2270), _2412), 0.0)).x), vec4(0.25)));
            float _2466 = 1.0 - (_2462 * cbSceneParam._m0[34u].x);
            float _2467 = 1.0 - (_2462 * cbSceneParam._m0[34u].y);
            float _2468 = 1.0 - (_2462 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
            frontier_phi_37_36_ladder_1 = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
            frontier_phi_37_36_ladder_2 = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
        }
        else
        {
            frontier_phi_37_36_ladder = _2216;
            frontier_phi_37_36_ladder_1 = _2215;
            frontier_phi_37_36_ladder_2 = _2214;
        }
        _2280 = frontier_phi_37_36_ladder_2;
        _2282 = frontier_phi_37_36_ladder_1;
        _2284 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2280 = _2214;
        _2282 = _2215;
        _2284 = _2216;
    }
    uvec4 _2289 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2291 = _2289.x * 14u;
    uint _2292 = _2291 + 13u;
    float _2299 = _961 + (-1.0);
    float _2304 = (cbLight._m0[_2292].x * _2299) + 1.0;
    float _2305 = (cbLight._m0[_2292].y * _2299) + 1.0;
    float _2306 = (cbLight._m0[_2292].z * _2299) + 1.0;
    float _2307 = (cbLight._m0[_2292].w * _2299) + 1.0;
    uint _2308 = _2291 + 5u;
    float _2314 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2318 = _2291 + 4u;
    float _2327 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2331 = _2291 | 1u;
    float _2342 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_783, _784, _785));
    float _2345 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_783, _784, _785));
    float _4633 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _4644 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2352 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2359 = ((cbLight._m0[_2308].x * _2314) * _2352) + (((cbLight._m0[_2318].x * _2280) * _2327) * _2350);
    float _2360 = ((_2314 * cbLight._m0[_2308].y) * _2352) + (((cbLight._m0[_2318].y * _2282) * _2327) * _2350);
    float _2361 = ((_2314 * cbLight._m0[_2308].z) * _2352) + (((cbLight._m0[_2318].z * _2284) * _2327) * _2350);
    uvec4 _2365 = floatBitsToUint(cbLight._m0[_2291 + 12u]);
    bool _2367 = _2365.x == 0u;
    float _2469;
    float _2471;
    float _2473;
    if (_2367)
    {
        _2469 = _2359;
        _2471 = _2360;
        _2473 = _2361;
    }
    else
    {
        uint _2477 = _2291 + 6u;
        float _2493 = (dot(vec3(cbLight._m0[_2291 + 2u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2494 = _2493 * _2493;
        float _4655 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2495 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2496 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2469 = (((cbLight._m0[_2477].x * 0.3183098733425140380859375) * _2495) * _2496) + _2359;
        _2471 = (((cbLight._m0[_2477].y * 0.3183098733425140380859375) * _2495) * _2496) + _2360;
        _2473 = (((cbLight._m0[_2477].z * 0.3183098733425140380859375) * _2495) * _2496) + _2361;
    }
    bool _2476 = _2365.y == 0u;
    float _2531;
    float _2533;
    float _2535;
    if (_2476)
    {
        _2531 = _2469;
        _2533 = _2471;
        _2535 = _2473;
    }
    else
    {
        uint _2704 = _2291 + 7u;
        float _2720 = (dot(vec3(cbLight._m0[_2291 + 3u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2721 = _2720 * _2720;
        float _4671 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2722 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2723 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2531 = (((cbLight._m0[_2704].x * 0.3183098733425140380859375) * _2722) * _2723) + _2469;
        _2533 = (((cbLight._m0[_2704].y * 0.3183098733425140380859375) * _2722) * _2723) + _2471;
        _2535 = (((cbLight._m0[_2704].z * 0.3183098733425140380859375) * _2722) * _2723) + _2473;
    }
    uint _2538 = _2291 + 8u;
    float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _786) * 0.949999988079071044921875);
    float _2552 = _2551 * _2551;
    float _2553 = cbLight._m0[_2291].x + _863;
    float _2554 = cbLight._m0[_2291].y + _864;
    float _2555 = cbLight._m0[_2291].z + _865;
    float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
    float _2560 = _2559 * _2553;
    float _2561 = _2559 * _2554;
    float _2562 = _2559 * _2555;
    float _2563 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2291].xyz));
    float _4687 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _4698 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2567 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2568 = dot(vec3(_783, _784, _785), vec3(_2560, _2561, _2562));
    float _4709 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2572 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2560, _2561, _2562));
    float _4720 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = _2552 * _2552;
    float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
    float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0);
    float _2589 = 0.959999978542327880859375 - _942;
    float _2591 = 0.959999978542327880859375 - _943;
    float _2592 = 0.959999978542327880859375 - _944;
    float _2599 = 1.0 - _2552;
    float _2610 = (0.5 / (((_2567 * ((_2566 * _2599) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2599) + _2552) * _2566))) * _2566;
    float _4731 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2612 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
    uint _2626 = _2291 + 9u;
    float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _786) * 0.949999988079071044921875);
    float _2638 = _2637 * _2637;
    float _2639 = cbLight._m0[_2331].x + _863;
    float _2640 = cbLight._m0[_2331].y + _864;
    float _2641 = cbLight._m0[_2331].z + _865;
    float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
    float _2646 = _2645 * _2639;
    float _2647 = _2645 * _2640;
    float _2648 = _2645 * _2641;
    float _2649 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2331].xyz));
    float _4742 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2652 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2653 = dot(vec3(_783, _784, _785), vec3(_2646, _2647, _2648));
    float _4753 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2656 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2657 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2646, _2647, _2648));
    float _4764 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2661 = _2638 * _2638;
    float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
    float _2672 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
    float _2679 = 1.0 - _2638;
    float _2689 = (0.5 / (((_2567 * ((_2652 * _2679) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2679) + _2638) * _2652))) * _2652;
    float _4775 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2691 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
    float _2701 = (((((_2672 * _2589) + _945) * cbLight._m0[_2626].x) * _2691) * _2314) + ((((cbLight._m0[_2538].x * _2280) * ((_2588 * _2589) + _945)) * _2612) * _2327);
    float _2702 = (((((_2672 * _2591) + _947) * cbLight._m0[_2626].y) * _2691) * _2314) + ((((cbLight._m0[_2538].y * _2282) * ((_2588 * _2591) + _947)) * _2612) * _2327);
    float _2703 = (((((_2672 * _2592) + _948) * cbLight._m0[_2626].z) * _2691) * _2314) + ((((cbLight._m0[_2538].z * _2284) * ((_2588 * _2592) + _948)) * _2612) * _2327);
    float _2759;
    float _2761;
    float _2763;
    if (_2367)
    {
        _2759 = _2701;
        _2761 = _2702;
        _2763 = _2703;
    }
    else
    {
        uint _2765 = _2291 + 2u;
        uint _2769 = _2291 + 10u;
        float _2783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2765].w)) * _786) * 0.949999988079071044921875);
        float _2784 = _2783 * _2783;
        float _2785 = cbLight._m0[_2765].x + _863;
        float _2786 = cbLight._m0[_2765].y + _864;
        float _2787 = cbLight._m0[_2765].z + _865;
        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
        float _2792 = _2791 * _2785;
        float _2793 = _2791 * _2786;
        float _2794 = _2791 * _2787;
        float _2795 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2765].xyz));
        float _4786 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2799 = dot(vec3(_783, _784, _785), vec3(_2792, _2793, _2794));
        float _4797 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2803 = dot(vec3(cbLight._m0[_2765].xyz), vec3(_2792, _2793, _2794));
        float _4808 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2807 = _2784 * _2784;
        float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
        float _2818 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
        float _2825 = 1.0 - _2784;
        float _2835 = (0.5 / (((_2567 * ((_2798 * _2825) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2825) + _2784) * _2798))) * _2798;
        float _4819 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2837 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
        float _2838 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2759 = (((((_2818 * _2589) + _945) * cbLight._m0[_2769].x) * _2837) * _2838) + _2701;
        _2761 = (((((_2818 * _2591) + _947) * cbLight._m0[_2769].y) * _2837) * _2838) + _2702;
        _2763 = (((((_2818 * _2592) + _948) * cbLight._m0[_2769].z) * _2837) * _2838) + _2703;
    }
    float _2869;
    float _2871;
    float _2873;
    if (_2476)
    {
        _2869 = _2759;
        _2871 = _2761;
        _2873 = _2763;
    }
    else
    {
        uint _2880 = _2291 + 3u;
        uint _2884 = _2291 + 11u;
        float _2898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2880].w)) * _786) * 0.949999988079071044921875);
        float _2899 = _2898 * _2898;
        float _2900 = cbLight._m0[_2880].x + _863;
        float _2901 = cbLight._m0[_2880].y + _864;
        float _2902 = cbLight._m0[_2880].z + _865;
        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
        float _2907 = _2906 * _2900;
        float _2908 = _2906 * _2901;
        float _2909 = _2906 * _2902;
        float _2910 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2880].xyz));
        float _4835 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2914 = dot(vec3(_783, _784, _785), vec3(_2907, _2908, _2909));
        float _4846 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2918 = dot(vec3(cbLight._m0[_2880].xyz), vec3(_2907, _2908, _2909));
        float _4857 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2922 = _2899 * _2899;
        float _2926 = ((_2917 * _2917) * (_2922 + (-1.0))) + 1.0;
        float _2933 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2940 = 1.0 - _2899;
        float _2950 = (0.5 / (((_2567 * ((_2913 * _2940) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2567 * _2940) + _2899) * _2913))) * _2913;
        float _4868 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2952 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2922 / ((_2926 * _2926) * 3.141590118408203125));
        float _2953 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2869 = (((((_2933 * _2589) + _945) * cbLight._m0[_2884].x) * _2952) * _2953) + _2759;
        _2871 = (((((_2933 * _2591) + _947) * cbLight._m0[_2884].y) * _2952) * _2953) + _2761;
        _2873 = (((((_2933 * _2592) + _948) * cbLight._m0[_2884].z) * _2952) * _2953) + _2763;
    }
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_2289.y == 0u)
    {
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.x;
        uint _2986 = uint((float(_2974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _884) / _2975))) + floor(float(uint(cbSceneParam._m0[85u].x * _883) / _2975)));
        float _2996 = (log2(_2067 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2997 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        uint _3000 = uint(isnan(14.0) ? _2997 : (isnan(_2997) ? 14.0 : min(_2997, 14.0)));
        uvec4 _3005 = texelFetch(g_lightClusterGridBuffer, int(((_3000 << 2u) + (_2986 << 6u)) >> 2u));
        uint _3006 = _3005.x;
        uint _3007 = _2974.z;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        if (((((1u << ((_3007 >> 4u) & 15u)) + 4294967295u) & _3006) == 0u) || ((_3007 & 240u) == 0u))
        {
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
        }
        else
        {
            float _3087;
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            uint _3245 = 0u;
            uint _3254;
            bool _3255;
            for (;;)
            {
                _3254 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3245 << 2u)) >> 2u)).x;
                _3255 = _3254 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3255)
                {
                    frontier_phi_71_pred = _3244;
                    frontier_phi_71_pred_1 = _3243;
                    frontier_phi_71_pred_2 = _3242;
                    frontier_phi_71_pred_3 = _3241;
                    frontier_phi_71_pred_4 = _3240;
                    frontier_phi_71_pred_5 = _3239;
                }
                else
                {
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    uint _3390;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3254;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    for (;;)
                    {
                        uint _3394 = uint(findLSB(_3390)) + (_3245 << 5u);
                        uint _3391 = (_3390 + 4294967295u) & _3390;
                        uint _3396 = _3394 * 48u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3416 = (_3394 * 48u) + 4u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3435 = (_3394 * 48u) + 8u;
                        vec3 _3446 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x));
                        float _3450 = _3410.x - _2065;
                        float _3451 = _3410.y - _2066;
                        float _3452 = _3410.z - _2067;
                        float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                        float _3456 = inversesqrt(_3453);
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3460 = dot(vec3(_902, _905, _908), vec3(_3457, _3458, _3459));
                        float _3465 = 1.0 - (_3453 * _3410.w);
                        float _4894 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3467 = sqrt(_3453) * _3429.w;
                        float _3470 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3460) + _3471;
                        float _3477 = _3467 * _3467;
                        float _3481 = ((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3466) / ((_3477 * 0.699999988079071044921875) + 1.0);
                        float _3485 = (-0.0) - _2065;
                        float _3486 = (-0.0) - _2066;
                        float _3487 = (-0.0) - _2067;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3501 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                        float _3502 = 1.0 - _977;
                        float _3509 = sqrt(1.0 - ((1.0 - (_3502 * _3502)) * (1.0 - (_3501 * _3501))));
                        float _3510 = _3509 * _3509;
                        float _3511 = _3510 * _3510;
                        float _3512 = _3492 + _3457;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                        float _3522 = dot(vec3(_902, _905, _908), vec3(_3492, _3493, _3494));
                        float _4910 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3526 = dot(vec3(_902, _905, _908), vec3(_3518 * _3512, _3518 * _3513, _3518 * _3514));
                        float _4921 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3533 = ((_3529 * _3529) * (_3511 + (-1.0))) + 1.0;
                        float _3534 = _3470 * _3510;
                        float _3535 = _3534 * _3534;
                        float _3538 = ((1.0 - _3535) * _3460) + _3535;
                        float _4932 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3539 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3540 = 1.0 - _3510;
                        float _3550 = (0.5 / (((_3539 * ((_3525 * _3540) + _3510)) + 9.9999999392252902907785028219223e-09) + (((_3539 * _3540) + _3510) * _3525))) * _3539;
                        float _4943 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3561 = (((_3511 * 3.1415927410125732421875) * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) / ((_3533 * _3533) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125))) * _3466;
                        _3314 = (_3481 * _3429.x) + _3387;
                        _3315 = (_3481 * _3429.y) + _3388;
                        _3316 = (_3481 * _3429.z) + _3389;
                        _3311 = (_3561 * _3446.x) + _3384;
                        _3312 = (_3561 * _3446.y) + _3385;
                        _3313 = (_3561 * _3446.z) + _3386;
                        if (_3391 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3391;
                        }
                    }
                    frontier_phi_71_pred = _3316;
                    frontier_phi_71_pred_1 = _3315;
                    frontier_phi_71_pred_2 = _3314;
                    frontier_phi_71_pred_3 = _3313;
                    frontier_phi_71_pred_4 = _3312;
                    frontier_phi_71_pred_5 = _3311;
                }
                _3097 = frontier_phi_71_pred;
                _3095 = frontier_phi_71_pred_1;
                _3093 = frontier_phi_71_pred_2;
                _3091 = frontier_phi_71_pred_3;
                _3089 = frontier_phi_71_pred_4;
                _3087 = frontier_phi_71_pred_5;
                uint _3246 = _3245 + 1u;
                if (_3246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3239 = _3087;
                    _3240 = _3089;
                    _3241 = _3091;
                    _3242 = _3093;
                    _3243 = _3095;
                    _3244 = _3097;
                    _3245 = _3246;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
        }
        uvec4 _3100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3101 = _3100.z;
        uint _3103 = (_3101 >> 8u) & 15u;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        if (((4294967295u << _3103) & _3006) == 0u)
        {
            _3207 = _3086;
            _3209 = _3088;
            _3211 = _3090;
            _3213 = _3092;
            _3215 = _3094;
            _3217 = _3096;
        }
        else
        {
            float _3232 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
            float _3233 = _3232 * _2065;
            float _3234 = _3232 * _2066;
            float _3235 = _3232 * _2067;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3103 < ((_3101 >> 12u) & 15u))
            {
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3367 = _3086;
                float _3368 = _3088;
                float _3369 = _3090;
                float _3370 = _3092;
                float _3371 = _3094;
                float _3372 = _3096;
                uint _3373 = _3103;
                uint _3382;
                bool _3383;
                for (;;)
                {
                    _3382 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3373 << 2u)) >> 2u)).x;
                    _3383 = _3382 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3383)
                    {
                        frontier_phi_82_pred = _3372;
                        frontier_phi_82_pred_1 = _3371;
                        frontier_phi_82_pred_2 = _3370;
                        frontier_phi_82_pred_3 = _3369;
                        frontier_phi_82_pred_4 = _3368;
                        frontier_phi_82_pred_5 = _3367;
                    }
                    else
                    {
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        uint _3594 = _3382;
                        uint _3595;
                        vec4 _3620;
                        float _3621;
                        vec4 _3636;
                        vec3 _3648;
                        vec4 _3663;
                        vec4 _3678;
                        float _3724;
                        bool _3725;
                        for (;;)
                        {
                            uint _3605 = ((_3373 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3594));
                            _3595 = (_3594 + 4294967295u) & _3594;
                            uint _3607 = _3605 * 40u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3621 = _3620.w;
                            uint _3623 = (_3605 * 40u) + 4u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3605 * 40u) + 8u;
                            _3648 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x));
                            uint _3650 = (_3605 * 40u) + 16u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3605 * 40u) + 20u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3605 * 40u) + 24u;
                            vec4 _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3699 = (_3605 * 40u) + 28u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            _3724 = fma(_2067, _3712.z, fma(_2066, _3712.y, _3712.x * _2065)) + _3712.w;
                            _3725 = !((fma(_2067, _3693.z, fma(_2066, _3693.y, _3693.x * _2065)) + _3693.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3725)
                            {
                                float _3752 = _3620.x - _2065;
                                float _3753 = _3620.y - _2066;
                                float _3754 = _3620.z - _2067;
                                float _3755 = dot(vec3(_3752, _3753, _3754), vec3(_3752, _3753, _3754));
                                float _3758 = inversesqrt(_3755);
                                float _3759 = _3758 * _3752;
                                float _3760 = _3758 * _3753;
                                float _3761 = _3758 * _3754;
                                float _3765 = 1.0 - (_3755 / (_3621 * _3621));
                                float _4954 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3770 = sqrt(_3755) * _3636.w;
                                float _3772 = 1.39999997615814208984375 / (_3770 + 1.39999997615814208984375);
                                float _3773 = _3772 * _3772;
                                float _3776 = ((1.0 - _3773) * dot(vec3(_3759, _3760, _3761), vec3(_902, _905, _908))) + _3773;
                                float _3779 = _3770 * _3770;
                                float _3783 = (fma(_2067, _3663.z, fma(_2066, _3663.y, _3663.x * _2065)) + _3663.w) / _3724;
                                float _3784 = (fma(_2067, _3678.z, fma(_2066, _3678.y, _3678.x * _2065)) + _3678.w) / _3724;
                                float _3788 = 1.0 - dot(vec2(_3783, _3784), vec2(_3783, _3784));
                                float _4970 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3790 = _3789 * (((isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0))) * _3766) / ((_3779 * 0.699999988079071044921875) + 1.0));
                                float _3802 = exp2(log2(1.0 / ((_3779 * 3.5) + 5.0)) * 0.25);
                                float _3803 = 1.0 - _977;
                                float _3810 = sqrt(1.0 - ((1.0 - (_3803 * _3803)) * (1.0 - (_3802 * _3802))));
                                float _3811 = _3810 * _3810;
                                float _3812 = _3811 * _3811;
                                float _3813 = _3759 - _3233;
                                float _3814 = _3760 - _3234;
                                float _3815 = _3761 - _3235;
                                float _3819 = inversesqrt(dot(vec3(_3813, _3814, _3815), vec3(_3813, _3814, _3815)));
                                float _3823 = dot(vec3(_902, _905, _908), vec3((-0.0) - _3233, (-0.0) - _3234, (-0.0) - _3235));
                                float _4981 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3827 = dot(vec3(_902, _905, _908), vec3(_3819 * _3813, _3819 * _3814, _3819 * _3815));
                                float _4992 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3830 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3834 = ((_3830 * _3830) * (_3812 + (-1.0))) + 1.0;
                                float _3835 = _3772 * _3811;
                                float _3836 = _3835 * _3835;
                                float _3842 = ((1.0 - _3836) * dot(vec3(_902, _905, _908), vec3(_3759, _3760, _3761))) + _3836;
                                float _5003 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3843 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3844 = 1.0 - _3811;
                                float _3854 = (0.5 / (((_3843 * ((_3826 * _3844) + _3811)) + 9.9999999392252902907785028219223e-09) + (((_3843 * _3844) + _3811) * _3826))) * _3843;
                                float _5014 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3864 = (_3789 * _3766) * (((_3812 * 3.1415927410125732421875) * (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) / ((_3834 * _3834) * ((_3779 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3790 * _3636.z;
                                frontier_phi_88_pred_1 = _3790 * _3636.y;
                                frontier_phi_88_pred_2 = _3790 * _3636.x;
                                frontier_phi_88_pred_3 = _3864 * _3648.z;
                                frontier_phi_88_pred_4 = _3864 * _3648.y;
                                frontier_phi_88_pred_5 = _3864 * _3648.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3873 = frontier_phi_88_pred;
                            _3872 = frontier_phi_88_pred_1;
                            _3871 = frontier_phi_88_pred_2;
                            _3870 = frontier_phi_88_pred_3;
                            _3869 = frontier_phi_88_pred_4;
                            _3868 = frontier_phi_88_pred_5;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            if (_3595 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3595;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3580;
                        frontier_phi_82_pred_1 = _3579;
                        frontier_phi_82_pred_2 = _3578;
                        frontier_phi_82_pred_3 = _3577;
                        frontier_phi_82_pred_4 = _3576;
                        frontier_phi_82_pred_5 = _3575;
                    }
                    _3218 = frontier_phi_82_pred;
                    _3216 = frontier_phi_82_pred_1;
                    _3214 = frontier_phi_82_pred_2;
                    _3212 = frontier_phi_82_pred_3;
                    _3210 = frontier_phi_82_pred_4;
                    _3208 = frontier_phi_82_pred_5;
                    uint _3374 = _3373 + 1u;
                    if (_3374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3367 = _3208;
                        _3368 = _3210;
                        _3369 = _3212;
                        _3370 = _3214;
                        _3371 = _3216;
                        _3372 = _3218;
                        _3373 = _3374;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3214;
                frontier_phi_63_64_ladder_1 = _3218;
                frontier_phi_63_64_ladder_2 = _3216;
                frontier_phi_63_64_ladder_3 = _3212;
                frontier_phi_63_64_ladder_4 = _3210;
                frontier_phi_63_64_ladder_5 = _3208;
            }
            else
            {
                frontier_phi_63_64_ladder = _3092;
                frontier_phi_63_64_ladder_1 = _3096;
                frontier_phi_63_64_ladder_2 = _3094;
                frontier_phi_63_64_ladder_3 = _3090;
                frontier_phi_63_64_ladder_4 = _3088;
                frontier_phi_63_64_ladder_5 = _3086;
            }
            _3207 = frontier_phi_63_64_ladder_5;
            _3209 = frontier_phi_63_64_ladder_4;
            _3211 = frontier_phi_63_64_ladder_3;
            _3213 = frontier_phi_63_64_ladder;
            _3215 = frontier_phi_63_64_ladder_2;
            _3217 = frontier_phi_63_64_ladder_1;
        }
        float _3222 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _3019 = (_3222 * _3213) + _2531;
        _3021 = (_3222 * _3215) + _2533;
        _3023 = (_3222 * _3217) + _2535;
        _3025 = ((_3207 * _945) * _3222) + _2869;
        _3027 = ((_3209 * _947) * _3222) + _2871;
        _3029 = ((_3211 * _948) * _3222) + _2873;
    }
    else
    {
        _3019 = _2531;
        _3021 = _2533;
        _3023 = _2535;
        _3025 = _2869;
        _3027 = _2871;
        _3029 = _2873;
    }
    float _5030 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _5041 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _5052 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _3046 = ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3019 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _961))) + ((_3025 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3047 = ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3021 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _961))) + ((_3027 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _3048 = ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3023 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _961))) + ((_3029 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    uint _3049 = _252 + 6u;
    float _3057 = _883 / cbSceneParam._m0[86u].x;
    float _3058 = _884 / cbSceneParam._m0[86u].y;
    vec4 _3072 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3074 = _3072.x;
    float _3075 = _3072.y;
    float _3076 = _3072.z;
    float _3077 = _3072.w;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _3111 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _3112 = _3111 / _805;
        float _3123 = _3112 * _856;
        float _3124 = _857 * _3112;
        float _3125 = (-0.0) - _3124;
        float _3127 = _3112 * _858;
        float _3129 = (cbSceneParam._m0[77u].w * _3125) / _3111;
        float _3130 = _3129 + cbSceneParam._m0[79u].w;
        float _3131 = cbSceneParam._m0[79u].w - _3124;
        float _3137 = sqrt(((_3123 * _3123) + (_3124 * _3124)) + (_3127 * _3127));
        float _3140 = (1.0 - (cbSceneParam._m0[77u].w / _3111)) * _3137;
        float _3145 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3147 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3324;
        if (abs((_3125 - _3129) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3324 = ((((_3130 > 0.0) ? exp2(_3145 * _3130) : (2.0 - exp2(_3147 * _3130))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3140;
        }
        else
        {
            float _3268 = 1.0 / cbSceneParam._m0[80u].x;
            float _3269 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : max(_3130, _3131));
            float _3270 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : min(_3130, _3131));
            float _3279 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : min(_3269, 0.0));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            _3324 = ((abs(_3137 / _3125) * cbSceneParam._m0[80u].y) * ((((_3279 - _3280) * 2.0) - ((exp2(_3145 * (isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0)))) - exp2(_3145 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))))) * _3268)) - ((exp2(_3147 * _3279) - exp2(_3147 * _3280)) * _3268))) + (_3140 * cbSceneParam._m0[80u].z);
        }
        vec4 _3326 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, 1.0), 0.0);
        float _3335 = exp2((_3324 * (-1.44269502162933349609375)) * (1.0 - _3326.w));
        float _3336 = log2(_3335);
        float _3352 = log2(_3077);
        _3149 = (exp2(_3352 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].x)) * _3326.x) / cbSceneParam._m0[78u].x)) + _3074;
        _3151 = (exp2(_3352 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].y)) * _3326.y) / cbSceneParam._m0[78u].y)) + _3075;
        _3153 = (exp2(_3352 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].z)) * _3326.z) / cbSceneParam._m0[78u].z)) + _3076;
        _3155 = _3335 * _3077;
    }
    else
    {
        _3149 = _3074;
        _3151 = _3075;
        _3153 = _3076;
        _3155 = _3077;
    }
    bool _3362;
    vec4 _3165;
    vec4 _3187;
    float _3189;
    float _3193;
    float _3194;
    float _3195;
    float _3196;
    bool _3206;
    for (;;)
    {
        _3165 = cbMatDynParam._m0[0u];
        float _3167 = roundEven(_3165.y);
        bool _3168 = _3167 == 3.0;
        float _3169 = log2(_3155);
        float _3176 = exp2(_3169 * cbSceneParam._m0[78u].x) * _3046;
        float _3177 = exp2(_3169 * cbSceneParam._m0[78u].y) * _3047;
        float _3178 = exp2(_3169 * cbSceneParam._m0[78u].z) * _3048;
        float _3185 = _872 + (-0.5);
        _3187 = cbMtdParam._m0[1u];
        _3189 = _3187.y * _3185;
        float _3192 = (_3167 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3193 = _3192 * (_3168 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3149)));
        _3194 = _3192 * (_3168 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3151)));
        _3195 = _3192 * (_3168 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3153)));
        _3196 = _3185 * 0.999000012874603271484375;
        _3206 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3206)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3196) < 0.5)
            {
                _3362 = true;
                break;
            }
        }
        uint _3303 = _921 + uint(_3165.w);
        if ((cbInstanceData._m0[_3303].w < 1.0) && ((cbInstanceData._m0[_3303].w + _3196) < 0.5))
        {
            _3362 = true;
            break;
        }
        if ((_3189 + 1.0) < _3187.x)
        {
            _3362 = true;
            break;
        }
        _3362 = false;
        break;
    }
    float _3566;
    if (_3362)
    {
        discard_state = true;
        _3566 = 0.0;
    }
    else
    {
        _3566 = cbInstanceData._m0[_3049].w;
    }
    SV_Target.x = _3193;
    SV_Target.y = _3194;
    SV_Target.z = _3195;
    SV_Target.w = _3566;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3049].w;
    discard_exit();
}


