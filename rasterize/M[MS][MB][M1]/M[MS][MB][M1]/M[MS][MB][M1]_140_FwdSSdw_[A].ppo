#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1255;
float _3659;
float _3660;
float _3661;
float _3662;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3671 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _378) + _447;
    float _459 = ((((_426.x - _445) * _378) + _445) * 2.0) + (-1.0);
    float _461 = ((((_426.y - _446) * _378) + _446) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3682 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _495 = (((_483.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _459;
    float _496 = (((_483.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _461;
    float _499 = fma(_467, _228, fma(_496, _235, _495 * _221));
    float _502 = fma(_467, _229, fma(_496, _236, _495 * _222));
    float _505 = fma(_467, _230, fma(_496, _237, _495 * _223));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _545 = (cbMtdParam._m0[19u].x + dot(vec4(_509 * _499, _509 * _502, _509 * _505, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_538 - _539) * cbMtdParam._m0[24u].z) + _539) * cbMtdParam._m0[21u].z);
    float _3693 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _553 = (_546 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) + _385;
    float _554 = (_546 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) + _386;
    float _555 = (_546 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) + _387;
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _583 = _581.x;
    float _601 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _583) * _378) + _583;
    float _605 = ((_567.x - _601) * cbMtdParam._m0[19u].z) + _601;
    float _607 = _605 - (_605 * _546);
    float _611 = (cbMtdParam._m0[19u].w * (_483.z - _456)) + _456;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _631 = (_624.x * 2.0) + (-1.0);
    float _632 = (_624.y * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3704 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _641 = ((_624.z - _611) * _546) + _611;
    float _651 = ((sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) - _467) * _546) + _467;
    float _654 = (((_631 - _495) * _546) + _495) + (cbMtdParam._m0[21u].x * _495);
    float _655 = (((_632 - _496) * _546) + _496) + (cbMtdParam._m0[21u].x * _496);
    float _660 = cbMtdParam._m0[22u].x + _483.w;
    float _663 = fma(_651, _228, fma(_655, _235, _654 * _221));
    float _666 = fma(_651, _229, fma(_655, _236, _654 * _222));
    float _669 = fma(_651, _230, fma(_655, _237, _654 * _223));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3715 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _677 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3737 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3748 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3759 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3770 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _682 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _747 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _737);
    float _748 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _737);
    float _749 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _737);
    float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
    float _754 = _747 * _753;
    float _755 = _748 * _753;
    float _756 = _749 * _753;
    vec4 _761 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _763 = _761.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _935 = sqrt(((_747 * _747) + (_748 * _748)) + (_749 * _749));
        float _941 = (cbMatDynParam._m0[5u].x * _935) + cbMatDynParam._m0[5u].y;
        float _3781 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _946 = (cbMatDynParam._m0[5u].z * _935) + cbMatDynParam._m0[5u].w;
        float _3792 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) - _942)) + _942) < ((_763 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _793 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _796 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _799 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _812 = _240 + 9u;
    uint _813 = _812 + uint(cbMatDynParam._m0[0u].w);
    float _819 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_813].x;
    float _820 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_813].y;
    float _821 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_813].z;
    float _3803 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _825 = 1.0 - _682;
    float _826 = _822 * _825;
    float _827 = _823 * _825;
    float _828 = _824 * _825;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _682;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _682;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _682;
    float _836 = _833 + 0.039999999105930328369140625;
    float _838 = _834 + 0.039999999105930328369140625;
    float _839 = _835 + 0.039999999105930328369140625;
    vec4 _848 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _852 = ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * TEXCOORD_5.w) * _848.x;
    float _853 = dot(vec3(_674, _675, _676), vec3(_754, _755, _756));
    float _856 = _853 * 2.0;
    float _860 = (_856 * _674) - _754;
    float _861 = (_856 * _675) - _755;
    float _862 = (_856 * _676) - _756;
    float _866 = abs(dot(vec3(_754, _755, _756), vec3(_674, _675, _676)));
    float _3836 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = sqrt(_677);
    float _881 = exp2((_868 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_868 * 3.0));
    float _887 = (1.0 - _881) * ((_868 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _888 = _881 * _868;
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1254;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _979 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _983 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _987 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _1012 = _916 + _674;
        float _1013 = _920 + _675;
        float _1014 = _924 + _676;
        float _1024 = fma(_1014, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012)) - _979;
        float _1025 = fma(_1014, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012)) - _983;
        float _1026 = fma(_1014, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012)) - _987;
        float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
        float _1043 = ((_1030 * _1024) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_979 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1030 * _1025) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_983 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1030 * _1026) / cbModelParam._m0[34u].z) + ((((((_987 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        float _1082 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1048.x + (-0.5));
        float _1084 = _1082 * (_1048.y + (-0.5));
        float _1085 = _1082 * (_1048.z + (-0.5));
        float _1092 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1055.x + (-0.5));
        float _1094 = _1092 * (_1055.y + (-0.5));
        float _1095 = _1092 * (_1055.z + (-0.5));
        float _1102 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1062.x + (-0.5));
        float _1104 = _1102 * (_1062.y + (-0.5));
        float _1105 = _1102 * (_1062.z + (-0.5));
        float _1112 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1069.x + (-0.5));
        float _1114 = _1112 * (_1069.y + (-0.5));
        float _1115 = _1112 * (_1069.z + (-0.5));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = _1083 * 0.5;
        float _1120 = _1093 * 0.5;
        float _1121 = _1103 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1136 = (dot(vec3(_674, _675, _676), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1146 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3884 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1148 + 1.0))) + _1153) * _1116;
        float _1163 = _1084 * 0.5;
        float _1164 = _1094 * 0.5;
        float _1165 = _1104 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_674, _675, _676), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3917 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1190 + 1.0))) + _1195) * _1117;
        float _1205 = _1085 * 0.5;
        float _1206 = _1095 * 0.5;
        float _1207 = _1105 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_674, _675, _676), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3950 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1232 + 1.0))) + _1237) * _1118;
        _1254 = _1085;
        _1256 = _1084;
        _1257 = _1083;
        _1258 = _1095;
        _1259 = _1094;
        _1260 = _1093;
        _1261 = _1105;
        _1262 = _1104;
        _1263 = _1103;
        _1264 = _1118;
        _1265 = _1117;
        _1266 = _1116;
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
    }
    else
    {
        _1254 = _1255;
        _1256 = _1255;
        _1257 = _1255;
        _1258 = _1255;
        _1259 = _1255;
        _1260 = _1255;
        _1261 = _1255;
        _1262 = _1255;
        _1263 = _1255;
        _1264 = _1255;
        _1265 = _1255;
        _1266 = _1255;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1301 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1305 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1328 = _916 + _674;
        float _1329 = _920 + _675;
        float _1330 = _924 + _676;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_674, _675, _676), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4013 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_674, _675, _676), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4046 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_674, _675, _676), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4079 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1255;
        _1567 = _1255;
        _1568 = _1255;
        _1569 = _1255;
        _1570 = _1255;
        _1571 = _1255;
        _1572 = _1255;
        _1573 = _1255;
        _1574 = _1255;
        _1575 = _1255;
        _1576 = _1255;
        _1577 = _1255;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1268)) + _1268;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1269)) + _1269;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _860 * 0.5;
    float _1635 = _861 * 0.5;
    float _1636 = _862 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1254, _1258, _1261, _1264));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _677);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_862, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860));
        float _1764 = fma(_862, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860));
        float _1767 = fma(_862, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1795 = frontier_phi_17_15_ladder;
        }
        float _2018;
        if (_1764 > 0.0)
        {
            _2018 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2018 = frontier_phi_26_22_ladder;
        }
        float _2275;
        if (_1767 > 0.0)
        {
            _2275 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2275 = frontier_phi_38_33_ladder;
        }
        float _2277 = isnan(_2018) ? _1795 : (isnan(_1795) ? _2018 : min(_1795, _2018));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1761) + _1750;
        float _2283 = (_2278 * _1764) + _1754;
        float _2284 = (_2278 * _1767) + _1758;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2285;
        float _2289 = _2285 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 > _2289) || ((_2283 < _2287) || ((_2282 < _2287) || (_2282 > _2289))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2284, cbModelParam._m0[9u].z, fma(_2283, cbModelParam._m0[9u].y, _2282 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2284, cbModelParam._m0[10u].z, fma(_2283, cbModelParam._m0[10u].y, _2282 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2284, cbModelParam._m0[11u].z, fma(_2283, cbModelParam._m0[11u].y, _2282 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_16_38_ladder = _2412.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2412.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2412.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_16_38_ladder_2;
        _1785 = frontier_phi_16_38_ladder_1;
        _1787 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_860, _861, _862), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _677);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1845 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1849 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1853 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1856 = fma(_862, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860));
        float _1859 = fma(_862, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860));
        float _1862 = fma(_862, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860));
        float _2023;
        if (_1856 > 0.0)
        {
            _2023 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2023 = frontier_phi_28_24_ladder;
        }
        float _2302;
        if (_1859 > 0.0)
        {
            _2302 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2302 = frontier_phi_40_35_ladder;
        }
        float _2515;
        if (_1862 > 0.0)
        {
            _2515 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2515 = frontier_phi_49_46_ladder;
        }
        float _2517 = isnan(_2302) ? _2023 : (isnan(_2023) ? _2302 : min(_2023, _2302));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1856) + _1845;
        float _2523 = (_2518 * _1859) + _1849;
        float _2524 = (_2518 * _1862) + _1853;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_25_49_ladder = _2723.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2723.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2723.x * cbModelParam._m0[1u].z;
        }
        _1881 = frontier_phi_25_49_ladder_2;
        _1883 = frontier_phi_25_49_ladder_1;
        _1885 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_860, _861, _862), _1792);
        _1881 = _1865.x * cbModelParam._m0[1u].z;
        _1883 = _1865.y * cbModelParam._m0[1u].z;
        _1885 = _1865.z * cbModelParam._m0[1u].z;
    }
    float _1898 = (((_887 * _836) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1881 - _1783)) + _1783);
    float _1900 = (((_887 * _838) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1883 - _1785)) + _1785);
    float _1902 = (((_887 * _839) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1885 - _1787)) + _1787);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1898 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1898 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1898 * cbSceneParam._m0[91u].x));
    vec4 _1919 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_774, _775));
    float _1921 = _1919.w;
    float _1933 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1921);
    float _1934 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1921);
    float _1935 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1921);
    uvec4 _1939 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1941 = _1939.x * 14u;
    uint _1942 = _1941 + 13u;
    float _1949 = _852 + (-1.0);
    float _1954 = (cbLight._m0[_1942].x * _1949) + 1.0;
    float _1955 = (cbLight._m0[_1942].y * _1949) + 1.0;
    float _1956 = (cbLight._m0[_1942].z * _1949) + 1.0;
    float _1957 = (cbLight._m0[_1942].w * _1949) + 1.0;
    uint _1958 = _1941 + 5u;
    float _1964 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1968 = _1941 + 4u;
    float _1977 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1981 = _1941 | 1u;
    float _1992 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_674, _675, _676));
    float _1995 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_674, _675, _676));
    float _4215 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _4226 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _2000 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _2002 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2009 = ((cbLight._m0[_1958].x * _1964) * _2002) + (((cbLight._m0[_1968].x * _1933) * _1977) * _2000);
    float _2010 = ((_1964 * cbLight._m0[_1958].y) * _2002) + (((cbLight._m0[_1968].y * _1934) * _1977) * _2000);
    float _2011 = ((_1964 * cbLight._m0[_1958].z) * _2002) + (((cbLight._m0[_1968].z * _1935) * _1977) * _2000);
    uvec4 _2015 = floatBitsToUint(cbLight._m0[_1941 + 12u]);
    bool _2017 = _2015.x == 0u;
    float _2028;
    float _2030;
    float _2032;
    if (_2017)
    {
        _2028 = _2009;
        _2030 = _2010;
        _2032 = _2011;
    }
    else
    {
        uint _2036 = _1941 + 6u;
        float _2052 = (dot(vec3(cbLight._m0[_1941 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _4237 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2055 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2028 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _2009;
        _2030 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _2010;
        _2032 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _2011;
    }
    bool _2035 = _2015.y == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2035)
    {
        _2073 = _2028;
        _2075 = _2030;
        _2077 = _2032;
    }
    else
    {
        uint _2246 = _1941 + 7u;
        float _2262 = (dot(vec3(cbLight._m0[_1941 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4253 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2265 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2073 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2028;
        _2075 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2030;
        _2077 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2032;
    }
    uint _2080 = _1941 + 8u;
    float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _677) * 0.949999988079071044921875);
    float _2094 = _2093 * _2093;
    float _2095 = cbLight._m0[_1941].x + _754;
    float _2096 = cbLight._m0[_1941].y + _755;
    float _2097 = cbLight._m0[_1941].z + _756;
    float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
    float _2102 = _2101 * _2095;
    float _2103 = _2101 * _2096;
    float _2104 = _2101 * _2097;
    float _2105 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1941].xyz));
    float _4269 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2109 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2110 = dot(vec3(_674, _675, _676), vec3(_2102, _2103, _2104));
    float _4291 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2102, _2103, _2104));
    float _4302 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2094 * _2094;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2131 = 0.959999978542327880859375 - _833;
    float _2133 = 0.959999978542327880859375 - _834;
    float _2134 = 0.959999978542327880859375 - _835;
    float _2141 = 1.0 - _2094;
    float _2152 = (0.5 / (((_2109 * ((_2108 * _2141) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2141) + _2094) * _2108))) * _2108;
    float _4313 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2154 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    uint _2168 = _1941 + 9u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _677) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_1981].x + _754;
    float _2182 = cbLight._m0[_1981].y + _755;
    float _2183 = cbLight._m0[_1981].z + _756;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1981].xyz));
    float _4324 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2195 = dot(vec3(_674, _675, _676), vec3(_2188, _2189, _2190));
    float _4335 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2188, _2189, _2190));
    float _4346 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2180 * _2180;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2214 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
    float _2221 = 1.0 - _2180;
    float _2231 = (0.5 / (((_2109 * ((_2194 * _2221) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2221) + _2180) * _2194))) * _2194;
    float _4357 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    float _2243 = (((((_2214 * _2131) + _836) * cbLight._m0[_2168].x) * _2233) * _1964) + ((((cbLight._m0[_2080].x * _1933) * ((_2130 * _2131) + _836)) * _2154) * _1977);
    float _2244 = (((((_2214 * _2133) + _838) * cbLight._m0[_2168].y) * _2233) * _1964) + ((((cbLight._m0[_2080].y * _1934) * ((_2130 * _2133) + _838)) * _2154) * _1977);
    float _2245 = (((((_2214 * _2134) + _839) * cbLight._m0[_2168].z) * _2233) * _1964) + ((((cbLight._m0[_2080].z * _1935) * ((_2130 * _2134) + _839)) * _2154) * _1977);
    float _2307;
    float _2309;
    float _2311;
    if (_2017)
    {
        _2307 = _2243;
        _2309 = _2244;
        _2311 = _2245;
    }
    else
    {
        uint _2313 = _1941 + 2u;
        uint _2317 = _1941 + 10u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _677) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _754;
        float _2334 = cbLight._m0[_2313].y + _755;
        float _2335 = cbLight._m0[_2313].z + _756;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2313].xyz));
        float _4368 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2347 = dot(vec3(_674, _675, _676), vec3(_2340, _2341, _2342));
        float _4379 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4390 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
        float _2373 = 1.0 - _2332;
        float _2383 = (0.5 / (((_2109 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2373) + _2332) * _2346))) * _2346;
        float _4401 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
        _2307 = (((((_2366 * _2131) + _836) * cbLight._m0[_2317].x) * _2385) * _2386) + _2243;
        _2309 = (((((_2366 * _2133) + _838) * cbLight._m0[_2317].y) * _2385) * _2386) + _2244;
        _2311 = (((((_2366 * _2134) + _839) * cbLight._m0[_2317].z) * _2385) * _2386) + _2245;
    }
    float _2421;
    float _2423;
    float _2425;
    if (_2035)
    {
        _2421 = _2307;
        _2423 = _2309;
        _2425 = _2311;
    }
    else
    {
        uint _2432 = _1941 + 3u;
        uint _2436 = _1941 + 11u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _677) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _754;
        float _2453 = cbLight._m0[_2432].y + _755;
        float _2454 = cbLight._m0[_2432].z + _756;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2432].xyz));
        float _4417 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2466 = dot(vec3(_674, _675, _676), vec3(_2459, _2460, _2461));
        float _4428 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4439 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
        float _2492 = 1.0 - _2451;
        float _2502 = (0.5 / (((_2109 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2492) + _2451) * _2465))) * _2465;
        float _4450 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2421 = (((((_2485 * _2131) + _836) * cbLight._m0[_2436].x) * _2504) * _2505) + _2307;
        _2423 = (((((_2485 * _2133) + _838) * cbLight._m0[_2436].y) * _2504) * _2505) + _2309;
        _2425 = (((((_2485 * _2134) + _839) * cbLight._m0[_2436].z) * _2504) * _2505) + _2311;
    }
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_1939.y == 0u)
    {
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2580;
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2580;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2580;
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.x;
        uint _2607 = uint((float(_2595.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2596))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2596)));
        float _2617 = (log2(_2583 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        uint _2621 = uint(isnan(14.0) ? _2618 : (isnan(_2618) ? 14.0 : min(_2618, 14.0)));
        uvec4 _2626 = texelFetch(g_lightClusterGridBuffer, int(((_2621 << 2u) + (_2607 << 6u)) >> 2u));
        uint _2627 = _2626.x;
        uint _2628 = _2595.z;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((((1u << ((_2628 >> 4u) & 15u)) + 4294967295u) & _2627) == 0u) || ((_2628 & 240u) == 0u))
        {
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
        }
        else
        {
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            uint _2887 = 0u;
            uint _2896;
            bool _2897;
            for (;;)
            {
                _2896 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                _2897 = _2896 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2897)
                {
                    frontier_phi_66_pred = _2881;
                    frontier_phi_66_pred_1 = _2886;
                    frontier_phi_66_pred_2 = _2885;
                    frontier_phi_66_pred_3 = _2884;
                    frontier_phi_66_pred_4 = _2883;
                    frontier_phi_66_pred_5 = _2882;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2896;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2887 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2581;
                        float _3093 = _3052.y - _2582;
                        float _3094 = _3052.z - _2583;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_793, _796, _799), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4476 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2581;
                        float _3128 = (-0.0) - _2582;
                        float _3129 = (-0.0) - _2583;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _868;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_793, _796, _799), vec3(_3134, _3135, _3136));
                        float _4492 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3169 = dot(vec3(_793, _796, _799), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4503 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4514 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4525 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2956 = (_3123 * _3071.x) + _3029;
                        _2957 = (_3123 * _3071.y) + _3030;
                        _2958 = (_3123 * _3071.z) + _3031;
                        _2953 = (_3204 * _3088.x) + _3026;
                        _2954 = (_3204 * _3088.y) + _3027;
                        _2955 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2958;
                    frontier_phi_66_pred_2 = _2957;
                    frontier_phi_66_pred_3 = _2956;
                    frontier_phi_66_pred_4 = _2955;
                    frontier_phi_66_pred_5 = _2954;
                }
                _2729 = frontier_phi_66_pred;
                _2739 = frontier_phi_66_pred_1;
                _2737 = frontier_phi_66_pred_2;
                _2735 = frontier_phi_66_pred_3;
                _2733 = frontier_phi_66_pred_4;
                _2731 = frontier_phi_66_pred_5;
                uint _2888 = _2887 + 1u;
                if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2881 = _2729;
                    _2882 = _2731;
                    _2883 = _2733;
                    _2884 = _2735;
                    _2885 = _2737;
                    _2886 = _2739;
                    _2887 = _2888;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
        }
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.z;
        uint _2745 = (_2743 >> 8u) & 15u;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((4294967295u << _2745) & _2627) == 0u)
        {
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
        }
        else
        {
            float _2874 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
            float _2875 = _2874 * _2581;
            float _2876 = _2874 * _2582;
            float _2877 = _2874 * _2583;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2745 < ((_2743 >> 12u) & 15u))
            {
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _3009 = _2728;
                float _3010 = _2730;
                float _3011 = _2732;
                float _3012 = _2734;
                float _3013 = _2736;
                float _3014 = _2738;
                uint _3015 = _2745;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3025)
                    {
                        frontier_phi_77_pred = _3014;
                        frontier_phi_77_pred_1 = _3013;
                        frontier_phi_77_pred_2 = _3012;
                        frontier_phi_77_pred_3 = _3011;
                        frontier_phi_77_pred_4 = _3010;
                        frontier_phi_77_pred_5 = _3009;
                    }
                    else
                    {
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        uint _3237 = _3024;
                        uint _3238;
                        vec4 _3263;
                        float _3264;
                        vec4 _3279;
                        vec3 _3291;
                        vec4 _3306;
                        vec4 _3322;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3248 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3237));
                            _3238 = (_3237 + 4294967295u) & _3237;
                            uint _3250 = _3248 * 40u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3264 = _3263.w;
                            uint _3266 = (_3248 * 40u) + 4u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3248 * 40u) + 8u;
                            _3291 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x));
                            uint _3293 = (_3248 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3248 * 40u) + 20u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3248 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3248 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2583, _3356.z, fma(_2582, _3356.y, _3356.x * _2581)) + _3356.w;
                            _3369 = !((fma(_2583, _3337.z, fma(_2582, _3337.y, _3337.x * _2581)) + _3337.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3263.x - _2581;
                                float _3397 = _3263.y - _2582;
                                float _3398 = _3263.z - _2583;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3264 * _3264));
                                float _4536 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3414 = sqrt(_3399) * _3279.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_793, _796, _799))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2583, _3306.z, fma(_2582, _3306.y, _3306.x * _2581)) + _3306.w) / _3368;
                                float _3428 = (fma(_2583, _3322.z, fma(_2582, _3322.y, _3322.x * _2581)) + _3322.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4552 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _868;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2875;
                                float _3458 = _3404 - _2876;
                                float _3459 = _3405 - _2877;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_793, _796, _799), vec3((-0.0) - _2875, (-0.0) - _2876, (-0.0) - _2877));
                                float _4563 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3471 = dot(vec3(_793, _796, _799), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4574 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_793, _796, _799), vec3(_3403, _3404, _3405))) + _3480;
                                float _4585 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4596 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3434 * _3279.y;
                                frontier_phi_83_pred_1 = _3434 * _3279.x;
                                frontier_phi_83_pred_2 = _3508 * _3291.z;
                                frontier_phi_83_pred_3 = _3508 * _3291.y;
                                frontier_phi_83_pred_4 = _3508 * _3291.x;
                                frontier_phi_83_pred_5 = _3434 * _3279.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3516 = frontier_phi_83_pred;
                            _3515 = frontier_phi_83_pred_1;
                            _3514 = frontier_phi_83_pred_2;
                            _3513 = frontier_phi_83_pred_3;
                            _3512 = frontier_phi_83_pred_4;
                            _3517 = frontier_phi_83_pred_5;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            _3218 = _3512 + _3231;
                            _3219 = _3513 + _3232;
                            _3220 = _3514 + _3233;
                            if (_3238 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3238;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3223;
                        frontier_phi_77_pred_1 = _3222;
                        frontier_phi_77_pred_2 = _3221;
                        frontier_phi_77_pred_3 = _3220;
                        frontier_phi_77_pred_4 = _3219;
                        frontier_phi_77_pred_5 = _3218;
                    }
                    _2860 = frontier_phi_77_pred;
                    _2858 = frontier_phi_77_pred_1;
                    _2856 = frontier_phi_77_pred_2;
                    _2854 = frontier_phi_77_pred_3;
                    _2852 = frontier_phi_77_pred_4;
                    _2850 = frontier_phi_77_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2850;
                        _3010 = _2852;
                        _3011 = _2854;
                        _3012 = _2856;
                        _3013 = _2858;
                        _3014 = _2860;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2854;
                frontier_phi_58_59_ladder_1 = _2860;
                frontier_phi_58_59_ladder_2 = _2858;
                frontier_phi_58_59_ladder_3 = _2856;
                frontier_phi_58_59_ladder_4 = _2852;
                frontier_phi_58_59_ladder_5 = _2850;
            }
            else
            {
                frontier_phi_58_59_ladder = _2732;
                frontier_phi_58_59_ladder_1 = _2738;
                frontier_phi_58_59_ladder_2 = _2736;
                frontier_phi_58_59_ladder_3 = _2734;
                frontier_phi_58_59_ladder_4 = _2730;
                frontier_phi_58_59_ladder_5 = _2728;
            }
            _2849 = frontier_phi_58_59_ladder_5;
            _2851 = frontier_phi_58_59_ladder_4;
            _2853 = frontier_phi_58_59_ladder;
            _2855 = frontier_phi_58_59_ladder_3;
            _2857 = frontier_phi_58_59_ladder_2;
            _2859 = frontier_phi_58_59_ladder_1;
        }
        float _2864 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
        _2640 = (_2864 * _2855) + _2073;
        _2642 = (_2864 * _2857) + _2075;
        _2644 = (_2864 * _2859) + _2077;
        _2646 = ((_2849 * _836) * _2864) + _2421;
        _2648 = ((_2851 * _838) * _2864) + _2423;
        _2650 = ((_2853 * _839) * _2864) + _2425;
    }
    else
    {
        _2640 = _2073;
        _2642 = _2075;
        _2644 = _2077;
        _2646 = _2421;
        _2648 = _2423;
        _2650 = _2425;
    }
    float _4612 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4623 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4634 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2667 = ((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2640 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _852))) + ((_2646 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2668 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2642 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _852))) + ((_2648 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2644 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _852))) + ((_2650 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    uint _2670 = _240 + 6u;
    float _2678 = _774 / cbSceneParam._m0[86u].x;
    float _2679 = _775 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2753 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2754 = _2753 / _696;
        float _2765 = _2754 * _747;
        float _2766 = _748 * _2754;
        float _2767 = (-0.0) - _2766;
        float _2769 = _2754 * _749;
        float _2771 = (cbSceneParam._m0[77u].w * _2767) / _2753;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2766;
        float _2779 = sqrt(((_2765 * _2765) + (_2766 * _2766)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2753)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2966;
        if (abs((_2767 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2966 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2789 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2910 = 1.0 / cbSceneParam._m0[80u].x;
            float _2911 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2912 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            float _2922 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : min(_2912, 0.0));
            _2966 = ((abs(_2779 / _2767) * cbSceneParam._m0[80u].y) * ((((_2921 - _2922) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))))) * _2910)) - ((exp2(_2789 * _2921) - exp2(_2789 * _2922)) * _2910))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _2968 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2977 = exp2((_2966 * (-1.44269502162933349609375)) * (1.0 - _2968.w));
        float _2978 = log2(_2977);
        float _2994 = log2(_2698);
        _2791 = (exp2(_2994 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].x)) * _2968.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2793 = (exp2(_2994 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].y)) * _2968.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2795 = (exp2(_2994 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].z)) * _2968.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2797 = _2977 * _2698;
    }
    else
    {
        _2791 = _2695;
        _2793 = _2696;
        _2795 = _2697;
        _2797 = _2698;
    }
    bool _3004;
    vec4 _2807;
    vec4 _2829;
    float _2831;
    float _2835;
    float _2836;
    float _2837;
    float _2838;
    bool _2848;
    for (;;)
    {
        _2807 = cbMatDynParam._m0[0u];
        float _2809 = roundEven(_2807.y);
        bool _2810 = _2809 == 3.0;
        float _2811 = log2(_2797);
        float _2818 = exp2(_2811 * cbSceneParam._m0[78u].x) * _2667;
        float _2819 = exp2(_2811 * cbSceneParam._m0[78u].y) * _2668;
        float _2820 = exp2(_2811 * cbSceneParam._m0[78u].z) * _2669;
        float _2827 = _763 + (-0.5);
        _2829 = cbMtdParam._m0[1u];
        _2831 = _2829.y * _2827;
        float _2834 = (_2809 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2835 = _2834 * (_2810 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2791)));
        _2836 = _2834 * (_2810 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2793)));
        _2837 = _2834 * (_2810 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2795)));
        _2838 = _2827 * 0.999000012874603271484375;
        _2848 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2848)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2838) < 0.5)
            {
                _3004 = true;
                break;
            }
        }
        uint _2945 = _812 + uint(_2807.w);
        if ((cbInstanceData._m0[_2945].w < 1.0) && ((cbInstanceData._m0[_2945].w + _2838) < 0.5))
        {
            _3004 = true;
            break;
        }
        if ((_2831 + 1.0) < _2829.x)
        {
            _3004 = true;
            break;
        }
        _3004 = false;
        break;
    }
    float _3209;
    if (_3004)
    {
        discard_state = true;
        _3209 = 0.0;
    }
    else
    {
        _3209 = cbInstanceData._m0[_2670].w;
    }
    SV_Target.x = _2835;
    SV_Target.y = _2836;
    SV_Target.z = _2837;
    SV_Target.w = _3209;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2670].w;
    discard_exit();
}


