#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1403;
float _4066;
float _4067;
float _4068;
float _4069;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4078 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    float _473 = _469.z;
    float _482 = ((_452.z - _473) * _398) + _473;
    float _485 = ((((_452.x - _471) * _398) + _471) * 2.0) + (-1.0);
    float _486 = ((((_452.y - _472) * _398) + _472) * 2.0) + (-1.0);
    float _487 = dot(vec2(_485, _486), vec2(_485, _486));
    float _4089 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _524 = (_485 + ((((_425.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_512.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _525 = (_486 + ((((_425.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_512.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _528 = fma(_492, _249, fma(_525, _256, _524 * _242));
    float _531 = fma(_492, _250, fma(_525, _257, _524 * _243));
    float _534 = fma(_492, _251, fma(_525, _258, _524 * _244));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _567 = _565.x;
    float _568 = 1.0 - _567;
    float _574 = (cbMtdParam._m0[19u].x + dot(vec4(_538 * _528, _538 * _531, _538 * _534, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_567 - _568) * cbMtdParam._m0[24u].z) + _568) * cbMtdParam._m0[21u].z);
    float _4100 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _577 = (-0.0) - cbMtdParam._m0[24u].x;
    float _579 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
    float _587 = _575 - ((_575 * TEXCOORD_8.x) * _580);
    float _588 = _575 - ((_575 * TEXCOORD_8.y) * _580);
    float _589 = _575 - ((_575 * TEXCOORD_8.z) * _580);
    float _596 = (_587 * (cbMtdParam._m0[17u].x - _405)) + _405;
    float _597 = (_588 * (cbMtdParam._m0[17u].y - _406)) + _406;
    float _598 = (_589 * (cbMtdParam._m0[17u].z - _407)) + _407;
    vec4 _610 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _612 = _610.x;
    float _613 = 1.0 - _612;
    float _641 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_612 - _613) * cbMtdParam._m0[24u].w) + _613) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4121 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _650 = ((((cbMtdParam._m0[10u].x - _596) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _642) + _596;
    float _651 = ((((cbMtdParam._m0[10u].y - _597) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _642) + _597;
    float _652 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _598)) * _642) + _598;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _680 = _678.x;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _680) * _398) + _680;
    float _702 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _698) * cbMtdParam._m0[19u].z) + _698;
    float _704 = _702 - (_702 * _587);
    float _706 = _704 - (_704 * _642);
    float _711 = (((_425.z - _482) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _482;
    float _715 = ((_512.z - _711) * cbMtdParam._m0[19u].w) + _711;
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _736 = (_729.x * 2.0) + (-1.0);
    float _737 = (_729.y * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _4132 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _746 = ((_729.z - _715) * _587) + _715;
    float _749 = ((cbMtdParam._m0[23u].y - _746) * _642) + _746;
    vec4 _768 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _774 = (_768.x * 2.0) + (-1.0);
    float _775 = (_768.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _4143 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _791 = ((sqrt(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) - _492) * _589) + _492;
    float _794 = (((_736 - _524) * _587) + _524) + (cbMtdParam._m0[21u].x * _524);
    float _795 = (((_737 - _525) * _588) + _525) + (cbMtdParam._m0[21u].x * _525);
    float _806 = (((_774 - _794) + (_794 * cbMtdParam._m0[22u].z)) * _642) + _794;
    float _807 = (((_775 - _795) + (_795 * cbMtdParam._m0[22u].z)) * _642) + _795;
    float _808 = (_642 * (sqrt(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) - _791)) + _791;
    float _810 = cbMtdParam._m0[22u].x + _512.w;
    float _813 = fma(_808, _249, fma(_807, _256, _806 * _242));
    float _816 = fma(_808, _250, fma(_807, _257, _806 * _243));
    float _819 = fma(_808, _251, fma(_807, _258, _806 * _244));
    float _823 = inversesqrt(dot(vec3(_813, _816, _819), vec3(_813, _816, _819)));
    float _824 = _823 * _813;
    float _825 = _823 * _816;
    float _826 = _823 * _819;
    float _4154 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _827 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4176 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4187 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4198 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4209 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _832 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _846 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _896 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _886);
    float _897 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _886);
    float _898 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _886);
    float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
    float _903 = _896 * _902;
    float _904 = _897 * _902;
    float _905 = _898 * _902;
    vec4 _910 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _912 = _910.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1084 = sqrt(((_896 * _896) + (_897 * _897)) + (_898 * _898));
        float _1090 = (cbMatDynParam._m0[5u].x * _1084) + cbMatDynParam._m0[5u].y;
        float _4220 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1095 = (cbMatDynParam._m0[5u].z * _1084) + cbMatDynParam._m0[5u].w;
        float _4231 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) - _1091)) + _1091) < ((_912 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _923 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _924 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _942 = fma(_826, cbSceneParam._m0[5u].z, fma(_825, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _824));
    float _945 = fma(_826, cbSceneParam._m0[6u].z, fma(_825, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _824));
    float _948 = fma(_826, cbSceneParam._m0[7u].z, fma(_825, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _824));
    uint _961 = _261 + 9u;
    uint _962 = _961 + uint(cbMatDynParam._m0[0u].w);
    float _968 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_962].x;
    float _969 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_962].y;
    float _970 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * cbInstanceData._m0[_962].z;
    float _4242 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _974 = 1.0 - _832;
    float _975 = _971 * _974;
    float _976 = _972 * _974;
    float _977 = _973 * _974;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _832;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _832;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _832;
    float _985 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _923, cbSceneParam._m0[86u].y * _924));
    float _1001 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * TEXCOORD_5.w) * _997.x;
    float _1002 = dot(vec3(_824, _825, _826), vec3(_903, _904, _905));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _824) - _903;
    float _1010 = (_1005 * _825) - _904;
    float _1011 = (_1005 * _826) - _905;
    float _1015 = abs(dot(vec3(_903, _904, _905), vec3(_824, _825, _826)));
    float _4275 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_827);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1036 = (1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1037 = _1030 * _1017;
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1402;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1127 = fma(_1073, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065));
        float _1131 = fma(_1073, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065));
        float _1135 = fma(_1073, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065));
        float _1160 = _1065 + _824;
        float _1161 = _1069 + _825;
        float _1162 = _1073 + _826;
        float _1172 = fma(_1162, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160)) - _1127;
        float _1173 = fma(_1162, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160)) - _1131;
        float _1174 = fma(_1162, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160)) - _1135;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1127 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1131 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[34u].z) + ((((((_1135 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1230 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1196.x + (-0.5));
        float _1232 = _1230 * (_1196.y + (-0.5));
        float _1233 = _1230 * (_1196.z + (-0.5));
        float _1240 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1203.x + (-0.5));
        float _1242 = _1240 * (_1203.y + (-0.5));
        float _1243 = _1240 * (_1203.z + (-0.5));
        float _1250 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1210.x + (-0.5));
        float _1252 = _1250 * (_1210.y + (-0.5));
        float _1253 = _1250 * (_1210.z + (-0.5));
        float _1260 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1217.x + (-0.5));
        float _1262 = _1260 * (_1217.y + (-0.5));
        float _1263 = _1260 * (_1217.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1284 = (dot(vec3(_824, _825, _826), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1294 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4323 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1296 + 1.0))) + _1301) * _1264;
        float _1311 = _1232 * 0.5;
        float _1312 = _1242 * 0.5;
        float _1313 = _1252 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_824, _825, _826), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4356 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1338 + 1.0))) + _1343) * _1265;
        float _1353 = _1233 * 0.5;
        float _1354 = _1243 * 0.5;
        float _1355 = _1253 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_824, _825, _826), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4389 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1380 + 1.0))) + _1385) * _1266;
        _1402 = _1233;
        _1404 = _1232;
        _1405 = _1231;
        _1406 = _1243;
        _1407 = _1242;
        _1408 = _1241;
        _1409 = _1253;
        _1410 = _1252;
        _1411 = _1251;
        _1412 = _1266;
        _1413 = _1265;
        _1414 = _1264;
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1403;
        _1404 = _1403;
        _1405 = _1403;
        _1406 = _1403;
        _1407 = _1403;
        _1408 = _1403;
        _1409 = _1403;
        _1410 = _1403;
        _1411 = _1403;
        _1412 = _1403;
        _1413 = _1403;
        _1414 = _1403;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1445 = fma(_1073, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065));
        float _1449 = fma(_1073, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065));
        float _1453 = fma(_1073, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065));
        float _1476 = _1065 + _824;
        float _1477 = _1069 + _825;
        float _1478 = _1073 + _826;
        float _1488 = fma(_1478, cbModelParam._m0[30u].z, fma(_1477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1476)) - _1445;
        float _1489 = fma(_1478, cbModelParam._m0[31u].z, fma(_1477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1476)) - _1449;
        float _1490 = fma(_1478, cbModelParam._m0[32u].z, fma(_1477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1476)) - _1453;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1445 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1449 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[35u].z) + ((((((_1453 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1544 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1511.x + (-0.5));
        float _1546 = _1544 * (_1511.y + (-0.5));
        float _1547 = _1544 * (_1511.z + (-0.5));
        float _1554 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1518.x + (-0.5));
        float _1556 = _1554 * (_1518.y + (-0.5));
        float _1557 = _1554 * (_1518.z + (-0.5));
        float _1564 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1525.x + (-0.5));
        float _1566 = _1564 * (_1525.y + (-0.5));
        float _1567 = _1564 * (_1525.z + (-0.5));
        float _1574 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1532.x + (-0.5));
        float _1576 = _1574 * (_1532.y + (-0.5));
        float _1577 = _1574 * (_1532.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_824, _825, _826), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4452 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1608 + 1.0))) + _1613) * _1578;
        float _1623 = _1546 * 0.5;
        float _1624 = _1556 * 0.5;
        float _1625 = _1566 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_824, _825, _826), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4485 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1650 + 1.0))) + _1655) * _1579;
        float _1665 = _1547 * 0.5;
        float _1666 = _1557 * 0.5;
        float _1667 = _1567 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_824, _825, _826), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4518 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1692 + 1.0))) + _1697) * _1580;
        _1714 = _1547;
        _1715 = _1546;
        _1716 = _1545;
        _1717 = _1557;
        _1718 = _1556;
        _1719 = _1555;
        _1720 = _1567;
        _1721 = _1566;
        _1722 = _1565;
        _1723 = _1580;
        _1724 = _1579;
        _1725 = _1578;
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
    }
    else
    {
        _1714 = _1403;
        _1715 = _1403;
        _1716 = _1403;
        _1717 = _1403;
        _1718 = _1403;
        _1719 = _1403;
        _1720 = _1403;
        _1721 = _1403;
        _1722 = _1403;
        _1723 = _1403;
        _1724 = _1403;
        _1725 = _1403;
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1415)) + _1415;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1416)) + _1416;
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1417)) + _1417;
    float _1761 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1738));
    float _1782 = _1009 * 0.5;
    float _1783 = _1010 * 0.5;
    float _1784 = _1011 * 0.5;
    float _1785 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1788 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1791 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1825;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1798 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1402, _1406, _1409, _1412));
        float _1802 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1806 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1813 = dot(vec4(cbModelParam._m0[39u]), vec4(_1782, _1783, _1784, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1836;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1827 = dot(vec4(cbModelParam._m0[40u]), vec4(_1782, _1783, _1784, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1840 = (_1836 * cbModelParam._m0[1u].x) + (_1825 * (1.0 - cbModelParam._m0[1u].x));
    float _1850 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _827);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1850 : min(cbModelParam._m0[25u].z, _1850));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1899 = fma(_1073, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065)) + cbModelParam._m0[13u].w;
        float _1903 = fma(_1073, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065)) + cbModelParam._m0[14u].w;
        float _1907 = fma(_1073, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065)) + cbModelParam._m0[15u].w;
        float _1910 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1913 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1916 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1944;
        if (_1910 > 0.0)
        {
            _1944 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1944 = frontier_phi_17_15_ladder;
        }
        float _2116;
        if (_1913 > 0.0)
        {
            _2116 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2116 = frontier_phi_26_22_ladder;
        }
        float _2411;
        if (_1916 > 0.0)
        {
            _2411 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2411 = frontier_phi_38_33_ladder;
        }
        float _2413 = isnan(_2116) ? _1944 : (isnan(_1944) ? _2116 : min(_1944, _2116));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1910) + _1899;
        float _2419 = (_2414 * _1913) + _1903;
        float _2420 = (_2414 * _1916) + _1907;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2421;
        float _2425 = _2421 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 > _2425) || ((_2419 < _2423) || ((_2418 < _2423) || (_2418 > _2425))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2420, cbModelParam._m0[9u].z, fma(_2419, cbModelParam._m0[9u].y, _2418 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2420, cbModelParam._m0[10u].z, fma(_2419, cbModelParam._m0[10u].y, _2418 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2420, cbModelParam._m0[11u].z, fma(_2419, cbModelParam._m0[11u].y, _2418 * cbModelParam._m0[11u].x))), _1851);
            frontier_phi_16_38_ladder = _2565.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2565.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2565.x * cbModelParam._m0[1u].y;
        }
        _1932 = frontier_phi_16_38_ladder_2;
        _1934 = frontier_phi_16_38_ladder_1;
        _1936 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1851);
        _1932 = _1920.x * cbModelParam._m0[1u].y;
        _1934 = _1920.y * cbModelParam._m0[1u].y;
        _1936 = _1920.z * cbModelParam._m0[1u].y;
    }
    float _1940 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _827);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1940 : min(cbModelParam._m0[25u].w, _1940));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1073, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1073, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1073, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _2009 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _2012 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2121;
        if (_2006 > 0.0)
        {
            _2121 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2121 = frontier_phi_28_24_ladder;
        }
        float _2438;
        if (_2009 > 0.0)
        {
            _2438 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2438 = frontier_phi_40_35_ladder;
        }
        float _2776;
        if (_2012 > 0.0)
        {
            _2776 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2776 = frontier_phi_50_47_ladder;
        }
        float _2778 = isnan(_2438) ? _2121 : (isnan(_2121) ? _2438 : min(_2121, _2438));
        float _2779 = isnan(_2776) ? _2778 : (isnan(_2778) ? _2776 : min(_2778, _2776));
        float _2783 = (_2779 * _2006) + _1995;
        float _2784 = (_2779 * _2009) + _1999;
        float _2785 = (_2779 * _2012) + _2003;
        float _2786 = _2779 * 9.9999997473787516355514526367188e-05;
        float _2787 = (-1.0) - _2786;
        float _2789 = _2786 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2785 > _2789) || ((_2785 < _2787) || ((_2784 > _2789) || ((_2784 < _2787) || ((_2783 < _2787) || (_2783 > _2789))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2785, cbModelParam._m0[17u].z, fma(_2784, cbModelParam._m0[17u].y, _2783 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2785, cbModelParam._m0[18u].z, fma(_2784, cbModelParam._m0[18u].y, _2783 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2785, cbModelParam._m0[19u].z, fma(_2784, cbModelParam._m0[19u].y, _2783 * cbModelParam._m0[19u].x))), _1941);
            frontier_phi_25_50_ladder = _2907.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2907.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2907.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_25_50_ladder_2;
        _2033 = frontier_phi_25_50_ladder_1;
        _2035 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1941);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2048 = (((_1036 * _985) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2050 = (((_1036 * _987) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2052 = (((_1036 * _988) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2108 = _2095 / _2107;
    float _2109 = _2099 / _2107;
    float _2110 = _2103 / _2107;
    float _2257;
    float _2258;
    float _2259;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2137 = ((uint(_2110 > cbSceneParam._m0[59u].y) + uint(_2110 > cbSceneParam._m0[59u].x)) + uint(_2110 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2138 = _2137 + 43u;
        uint _2146 = _2137 + 44u;
        uint _2154 = _2137 + 45u;
        uint _2162 = _2137 + 46u;
        float _2173 = fma(_2107, cbSceneParam._m0[_2138].w, fma(_2103, cbSceneParam._m0[_2138].z, fma(_2099, cbSceneParam._m0[_2138].y, _2095 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2107, cbSceneParam._m0[_2146].w, fma(_2103, cbSceneParam._m0[_2146].z, fma(_2099, cbSceneParam._m0[_2146].y, _2095 * cbSceneParam._m0[_2146].x)));
        float _2185 = fma(_2107, cbSceneParam._m0[_2162].w, fma(_2103, cbSceneParam._m0[_2162].z, fma(_2099, cbSceneParam._m0[_2162].y, _2095 * cbSceneParam._m0[_2162].x)));
        float _2190 = cbSceneParam._m0[33u].z * _2185;
        float _2192 = cbSceneParam._m0[33u].w * _2185;
        float _2195 = fma(_2107, cbSceneParam._m0[_2154].w, fma(_2103, cbSceneParam._m0[_2154].z, fma(_2099, cbSceneParam._m0[_2154].y, _2095 * cbSceneParam._m0[_2154].x))) / _2185;
        float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
        float _4644 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2250 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 + _2173) / _2185, (_2192 + _2177) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2173) / _2185, (_2177 - _2190) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2190) / _2185, (_2177 - _2192) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2192) / _2185, (_2190 + _2177) / _2185), _2195), 0.0)).x), vec4(0.25)));
        _2257 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
        _2258 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
        _2259 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2257 = 1.0;
        _2258 = 1.0;
        _2259 = 1.0;
    }
    float _2323;
    float _2325;
    float _2327;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2311 = fma(_2107, cbSceneParam._m0[63u].w, fma(_2103, cbSceneParam._m0[63u].z, fma(_2099, cbSceneParam._m0[63u].y, _2095 * cbSceneParam._m0[63u].x)));
        float _2312 = fma(_2107, cbSceneParam._m0[60u].w, fma(_2103, cbSceneParam._m0[60u].z, fma(_2099, cbSceneParam._m0[60u].y, _2095 * cbSceneParam._m0[60u].x))) / _2311;
        float _2313 = fma(_2107, cbSceneParam._m0[61u].w, fma(_2103, cbSceneParam._m0[61u].z, fma(_2099, cbSceneParam._m0[61u].y, _2095 * cbSceneParam._m0[61u].x))) / _2311;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2312 >= cbSceneParam._m0[64u].x) && (_2313 >= cbSceneParam._m0[64u].y)) && (_2312 <= cbSceneParam._m0[64u].z)) && (_2313 <= cbSceneParam._m0[64u].w))
        {
            float _2451 = fma(_2107, cbSceneParam._m0[62u].w, fma(_2103, cbSceneParam._m0[62u].z, fma(_2099, cbSceneParam._m0[62u].y, _2095 * cbSceneParam._m0[62u].x))) / _2311;
            float _2455 = isnan(cbSceneParam._m0[41u].w) ? _2451 : (isnan(_2451) ? cbSceneParam._m0[41u].w : max(_2451, cbSceneParam._m0[41u].w));
            float _2498 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
            float _4660 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
            float _2505 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2312, cbSceneParam._m0[33u].w + _2313), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2312, _2313 - cbSceneParam._m0[33u].z), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].z, _2313 - cbSceneParam._m0[33u].w), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2313), _2455), 0.0)).x), vec4(0.25)));
            float _2509 = 1.0 - (_2505 * cbSceneParam._m0[34u].x);
            float _2510 = 1.0 - (_2505 * cbSceneParam._m0[34u].y);
            float _2511 = 1.0 - (_2505 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
            frontier_phi_37_36_ladder_1 = isnan(_2510) ? _2258 : (isnan(_2258) ? _2510 : min(_2258, _2510));
            frontier_phi_37_36_ladder_2 = isnan(_2509) ? _2257 : (isnan(_2257) ? _2509 : min(_2257, _2509));
        }
        else
        {
            frontier_phi_37_36_ladder = _2259;
            frontier_phi_37_36_ladder_1 = _2258;
            frontier_phi_37_36_ladder_2 = _2257;
        }
        _2323 = frontier_phi_37_36_ladder_2;
        _2325 = frontier_phi_37_36_ladder_1;
        _2327 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2323 = _2257;
        _2325 = _2258;
        _2327 = _2259;
    }
    uvec4 _2332 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2334 = _2332.x * 14u;
    uint _2335 = _2334 + 13u;
    float _2342 = _1001 + (-1.0);
    float _2347 = (cbLight._m0[_2335].x * _2342) + 1.0;
    float _2348 = (cbLight._m0[_2335].y * _2342) + 1.0;
    float _2349 = (cbLight._m0[_2335].z * _2342) + 1.0;
    float _2350 = (cbLight._m0[_2335].w * _2342) + 1.0;
    uint _2351 = _2334 + 5u;
    float _2357 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2361 = _2334 + 4u;
    float _2370 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    uint _2374 = _2334 | 1u;
    float _2385 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_824, _825, _826));
    float _2388 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_824, _825, _826));
    float _4696 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _4707 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2393 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * 0.3183098733425140380859375;
    float _2395 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * 0.3183098733425140380859375;
    float _2402 = ((cbLight._m0[_2351].x * _2357) * _2395) + (((cbLight._m0[_2361].x * _2323) * _2370) * _2393);
    float _2403 = ((_2357 * cbLight._m0[_2351].y) * _2395) + (((cbLight._m0[_2361].y * _2325) * _2370) * _2393);
    float _2404 = ((_2357 * cbLight._m0[_2351].z) * _2395) + (((cbLight._m0[_2361].z * _2327) * _2370) * _2393);
    uvec4 _2408 = floatBitsToUint(cbLight._m0[_2334 + 12u]);
    bool _2410 = _2408.x == 0u;
    float _2512;
    float _2514;
    float _2516;
    if (_2410)
    {
        _2512 = _2402;
        _2514 = _2403;
        _2516 = _2404;
    }
    else
    {
        uint _2520 = _2334 + 6u;
        float _2536 = (dot(vec3(cbLight._m0[_2334 + 2u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2537 = _2536 * _2536;
        float _4718 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2538 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2539 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2512 = (((cbLight._m0[_2520].x * 0.3183098733425140380859375) * _2538) * _2539) + _2402;
        _2514 = (((cbLight._m0[_2520].y * 0.3183098733425140380859375) * _2538) * _2539) + _2403;
        _2516 = (((cbLight._m0[_2520].z * 0.3183098733425140380859375) * _2538) * _2539) + _2404;
    }
    bool _2519 = _2408.y == 0u;
    float _2574;
    float _2576;
    float _2578;
    if (_2519)
    {
        _2574 = _2512;
        _2576 = _2514;
        _2578 = _2516;
    }
    else
    {
        uint _2747 = _2334 + 7u;
        float _2763 = (dot(vec3(cbLight._m0[_2334 + 3u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2764 = _2763 * _2763;
        float _4734 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2765 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2766 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2574 = (((cbLight._m0[_2747].x * 0.3183098733425140380859375) * _2765) * _2766) + _2512;
        _2576 = (((cbLight._m0[_2747].y * 0.3183098733425140380859375) * _2765) * _2766) + _2514;
        _2578 = (((cbLight._m0[_2747].z * 0.3183098733425140380859375) * _2765) * _2766) + _2516;
    }
    uint _2581 = _2334 + 8u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _827) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2334].x + _903;
    float _2597 = cbLight._m0[_2334].y + _904;
    float _2598 = cbLight._m0[_2334].z + _905;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2334].xyz));
    float _4750 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _4761 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2610 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _2611 = dot(vec3(_824, _825, _826), vec3(_2603, _2604, _2605));
    float _4772 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2615 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2603, _2604, _2605));
    float _4783 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2619 = _2595 * _2595;
    float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
    float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
    float _2632 = 0.959999978542327880859375 - _982;
    float _2634 = 0.959999978542327880859375 - _983;
    float _2635 = 0.959999978542327880859375 - _984;
    float _2642 = 1.0 - _2595;
    float _2653 = (0.5 / (((_2610 * ((_2609 * _2642) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2642) + _2595) * _2609))) * _2609;
    float _4794 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2655 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
    uint _2669 = _2334 + 9u;
    float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _827) * 0.949999988079071044921875);
    float _2681 = _2680 * _2680;
    float _2682 = cbLight._m0[_2374].x + _903;
    float _2683 = cbLight._m0[_2374].y + _904;
    float _2684 = cbLight._m0[_2374].z + _905;
    float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
    float _2689 = _2688 * _2682;
    float _2690 = _2688 * _2683;
    float _2691 = _2688 * _2684;
    float _2692 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2374].xyz));
    float _4805 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
    float _2696 = dot(vec3(_824, _825, _826), vec3(_2689, _2690, _2691));
    float _4816 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _2700 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2689, _2690, _2691));
    float _4827 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2704 = _2681 * _2681;
    float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
    float _2715 = exp2(log2(1.0 - (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) * 5.0);
    float _2722 = 1.0 - _2681;
    float _2732 = (0.5 / (((_2610 * ((_2695 * _2722) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2722) + _2681) * _2695))) * _2695;
    float _4838 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2734 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
    float _2744 = (((((_2715 * _2632) + _985) * cbLight._m0[_2669].x) * _2734) * _2357) + ((((cbLight._m0[_2581].x * _2323) * ((_2631 * _2632) + _985)) * _2655) * _2370);
    float _2745 = (((((_2715 * _2634) + _987) * cbLight._m0[_2669].y) * _2734) * _2357) + ((((cbLight._m0[_2581].y * _2325) * ((_2631 * _2634) + _987)) * _2655) * _2370);
    float _2746 = (((((_2715 * _2635) + _988) * cbLight._m0[_2669].z) * _2734) * _2357) + ((((cbLight._m0[_2581].z * _2327) * ((_2631 * _2635) + _988)) * _2655) * _2370);
    float _2802;
    float _2804;
    float _2806;
    if (_2410)
    {
        _2802 = _2744;
        _2804 = _2745;
        _2806 = _2746;
    }
    else
    {
        uint _2808 = _2334 + 2u;
        uint _2812 = _2334 + 10u;
        float _2826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2808].w)) * _827) * 0.949999988079071044921875);
        float _2827 = _2826 * _2826;
        float _2828 = cbLight._m0[_2808].x + _903;
        float _2829 = cbLight._m0[_2808].y + _904;
        float _2830 = cbLight._m0[_2808].z + _905;
        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
        float _2835 = _2834 * _2828;
        float _2836 = _2834 * _2829;
        float _2837 = _2834 * _2830;
        float _2838 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2808].xyz));
        float _4849 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2842 = dot(vec3(_824, _825, _826), vec3(_2835, _2836, _2837));
        float _4860 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2846 = dot(vec3(cbLight._m0[_2808].xyz), vec3(_2835, _2836, _2837));
        float _4871 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2850 = _2827 * _2827;
        float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
        float _2861 = exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0);
        float _2868 = 1.0 - _2827;
        float _2878 = (0.5 / (((_2610 * ((_2841 * _2868) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2868) + _2827) * _2841))) * _2841;
        float _4882 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2880 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
        float _2881 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2802 = (((((_2861 * _2632) + _985) * cbLight._m0[_2812].x) * _2880) * _2881) + _2744;
        _2804 = (((((_2861 * _2634) + _987) * cbLight._m0[_2812].y) * _2880) * _2881) + _2745;
        _2806 = (((((_2861 * _2635) + _988) * cbLight._m0[_2812].z) * _2880) * _2881) + _2746;
    }
    float _2912;
    float _2914;
    float _2916;
    if (_2519)
    {
        _2912 = _2802;
        _2914 = _2804;
        _2916 = _2806;
    }
    else
    {
        uint _2923 = _2334 + 3u;
        uint _2927 = _2334 + 11u;
        float _2941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2923].w)) * _827) * 0.949999988079071044921875);
        float _2942 = _2941 * _2941;
        float _2943 = cbLight._m0[_2923].x + _903;
        float _2944 = cbLight._m0[_2923].y + _904;
        float _2945 = cbLight._m0[_2923].z + _905;
        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
        float _2950 = _2949 * _2943;
        float _2951 = _2949 * _2944;
        float _2952 = _2949 * _2945;
        float _2953 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2923].xyz));
        float _4898 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
        float _2957 = dot(vec3(_824, _825, _826), vec3(_2950, _2951, _2952));
        float _4909 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2960 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
        float _2961 = dot(vec3(cbLight._m0[_2923].xyz), vec3(_2950, _2951, _2952));
        float _4920 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2965 = _2942 * _2942;
        float _2969 = ((_2960 * _2960) * (_2965 + (-1.0))) + 1.0;
        float _2976 = exp2(log2(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) * 5.0);
        float _2983 = 1.0 - _2942;
        float _2993 = (0.5 / (((_2610 * ((_2956 * _2983) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2610 * _2983) + _2942) * _2956))) * _2956;
        float _4931 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2995 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2965 / ((_2969 * _2969) * 3.141590118408203125));
        float _2996 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2912 = (((((_2976 * _2632) + _985) * cbLight._m0[_2927].x) * _2995) * _2996) + _2802;
        _2914 = (((((_2976 * _2634) + _987) * cbLight._m0[_2927].y) * _2995) * _2996) + _2804;
        _2916 = (((((_2976 * _2635) + _988) * cbLight._m0[_2927].z) * _2995) * _2996) + _2806;
    }
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    if (_2332.y == 0u)
    {
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.x;
        uint _3029 = uint((float(_3017.y) * floor(float(uint(cbSceneParam._m0[85u].y * _924) / _3018))) + floor(float(uint(cbSceneParam._m0[85u].x * _923) / _3018)));
        float _3039 = (log2(_2110 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3040 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        uint _3043 = uint(isnan(14.0) ? _3040 : (isnan(_3040) ? 14.0 : min(_3040, 14.0)));
        uvec4 _3048 = texelFetch(g_lightClusterGridBuffer, int(((_3043 << 2u) + (_3029 << 6u)) >> 2u));
        uint _3049 = _3048.x;
        uint _3050 = _3017.z;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        if (((((1u << ((_3050 >> 4u) & 15u)) + 4294967295u) & _3049) == 0u) || ((_3050 & 240u) == 0u))
        {
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
        }
        else
        {
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            uint _3287 = 0u;
            uint _3296;
            bool _3297;
            for (;;)
            {
                _3296 = texelFetch(g_lightClassification, int((((_3043 << 5u) + (_3029 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                _3297 = _3296 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3297)
                {
                    frontier_phi_71_pred = _3286;
                    frontier_phi_71_pred_1 = _3285;
                    frontier_phi_71_pred_2 = _3284;
                    frontier_phi_71_pred_3 = _3283;
                    frontier_phi_71_pred_4 = _3282;
                    frontier_phi_71_pred_5 = _3281;
                }
                else
                {
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    uint _3432;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3296;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    for (;;)
                    {
                        uint _3436 = uint(findLSB(_3432)) + (_3287 << 5u);
                        uint _3433 = (_3432 + 4294967295u) & _3432;
                        uint _3438 = _3436 * 48u;
                        vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 3u)).x));
                        uint _3458 = (_3436 * 48u) + 4u;
                        vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 3u)).x));
                        uint _3477 = (_3436 * 48u) + 8u;
                        vec3 _3488 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3477)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 2u)).x));
                        float _3492 = _3452.x - _2108;
                        float _3493 = _3452.y - _2109;
                        float _3494 = _3452.z - _2110;
                        float _3495 = dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494));
                        float _3498 = inversesqrt(_3495);
                        float _3499 = _3498 * _3492;
                        float _3500 = _3498 * _3493;
                        float _3501 = _3498 * _3494;
                        float _3502 = dot(vec3(_942, _945, _948), vec3(_3499, _3500, _3501));
                        float _3507 = 1.0 - (_3495 * _3452.w);
                        float _4957 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3508 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3509 = sqrt(_3495) * _3471.w;
                        float _3512 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                        float _3513 = _3512 * _3512;
                        float _3516 = ((1.0 - _3513) * _3502) + _3513;
                        float _3519 = _3509 * _3509;
                        float _3523 = ((isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0))) * _3508) / ((_3519 * 0.699999988079071044921875) + 1.0);
                        float _3527 = (-0.0) - _2108;
                        float _3528 = (-0.0) - _2109;
                        float _3529 = (-0.0) - _2110;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3534 = _3533 * _3527;
                        float _3535 = _3533 * _3528;
                        float _3536 = _3533 * _3529;
                        float _3543 = exp2(log2(1.0 / ((_3519 * 3.5) + 5.0)) * 0.25);
                        float _3544 = 1.0 - _1017;
                        float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                        float _3552 = _3551 * _3551;
                        float _3553 = _3552 * _3552;
                        float _3554 = _3534 + _3499;
                        float _3555 = _3535 + _3500;
                        float _3556 = _3536 + _3501;
                        float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                        float _3564 = dot(vec3(_942, _945, _948), vec3(_3534, _3535, _3536));
                        float _4973 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3567 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3568 = dot(vec3(_942, _945, _948), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                        float _4984 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                        float _3576 = _3512 * _3552;
                        float _3577 = _3576 * _3576;
                        float _3580 = ((1.0 - _3577) * _3502) + _3577;
                        float _4995 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3581 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                        float _3582 = 1.0 - _3552;
                        float _3592 = (0.5 / (((_3581 * ((_3567 * _3582) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3552) * _3567))) * _3581;
                        float _5006 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                        float _3603 = (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) / ((_3575 * _3575) * ((_3519 * 2.1991131305694580078125) + 3.141590118408203125))) * _3508;
                        _3356 = (_3523 * _3471.x) + _3429;
                        _3357 = (_3523 * _3471.y) + _3430;
                        _3358 = (_3523 * _3471.z) + _3431;
                        _3353 = (_3603 * _3488.x) + _3426;
                        _3354 = (_3603 * _3488.y) + _3427;
                        _3355 = (_3603 * _3488.z) + _3428;
                        if (_3433 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3433;
                        }
                    }
                    frontier_phi_71_pred = _3358;
                    frontier_phi_71_pred_1 = _3357;
                    frontier_phi_71_pred_2 = _3356;
                    frontier_phi_71_pred_3 = _3355;
                    frontier_phi_71_pred_4 = _3354;
                    frontier_phi_71_pred_5 = _3353;
                }
                _3140 = frontier_phi_71_pred;
                _3138 = frontier_phi_71_pred_1;
                _3136 = frontier_phi_71_pred_2;
                _3134 = frontier_phi_71_pred_3;
                _3132 = frontier_phi_71_pred_4;
                _3130 = frontier_phi_71_pred_5;
                uint _3288 = _3287 + 1u;
                if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3281 = _3130;
                    _3282 = _3132;
                    _3283 = _3134;
                    _3284 = _3136;
                    _3285 = _3138;
                    _3286 = _3140;
                    _3287 = _3288;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
        }
        uvec4 _3143 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3144 = _3143.z;
        uint _3146 = (_3144 >> 8u) & 15u;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        if (((4294967295u << _3146) & _3049) == 0u)
        {
            _3249 = _3129;
            _3251 = _3131;
            _3253 = _3133;
            _3255 = _3135;
            _3257 = _3137;
            _3259 = _3139;
        }
        else
        {
            float _3274 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
            float _3275 = _3274 * _2108;
            float _3276 = _3274 * _2109;
            float _3277 = _3274 * _2110;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3146 < ((_3144 >> 12u) & 15u))
            {
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3409 = _3129;
                float _3410 = _3131;
                float _3411 = _3133;
                float _3412 = _3135;
                float _3413 = _3137;
                float _3414 = _3139;
                uint _3415 = _3146;
                uint _3424;
                bool _3425;
                for (;;)
                {
                    _3424 = texelFetch(g_lightClassification, int((((_3043 << 5u) + (_3029 << 9u)) + (_3415 << 2u)) >> 2u)).x;
                    _3425 = _3424 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3425)
                    {
                        frontier_phi_82_pred = _3414;
                        frontier_phi_82_pred_1 = _3413;
                        frontier_phi_82_pred_2 = _3412;
                        frontier_phi_82_pred_3 = _3411;
                        frontier_phi_82_pred_4 = _3410;
                        frontier_phi_82_pred_5 = _3409;
                    }
                    else
                    {
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        float _3632 = _3411;
                        float _3633 = _3412;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        uint _3636 = _3424;
                        uint _3637;
                        vec4 _3662;
                        float _3663;
                        vec4 _3678;
                        vec3 _3690;
                        vec4 _3705;
                        vec4 _3720;
                        float _3766;
                        bool _3767;
                        for (;;)
                        {
                            uint _3647 = ((_3415 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3636));
                            _3637 = (_3636 + 4294967295u) & _3636;
                            uint _3649 = _3647 * 40u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            _3663 = _3662.w;
                            uint _3665 = (_3647 * 40u) + 4u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3647 * 40u) + 8u;
                            _3690 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x));
                            uint _3692 = (_3647 * 40u) + 16u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3707 = (_3647 * 40u) + 20u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3722 = (_3647 * 40u) + 24u;
                            vec4 _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            uint _3741 = (_3647 * 40u) + 28u;
                            vec4 _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            _3766 = fma(_2110, _3754.z, fma(_2109, _3754.y, _3754.x * _2108)) + _3754.w;
                            _3767 = !((fma(_2110, _3735.z, fma(_2109, _3735.y, _3735.x * _2108)) + _3735.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3767)
                            {
                                float _3794 = _3662.x - _2108;
                                float _3795 = _3662.y - _2109;
                                float _3796 = _3662.z - _2110;
                                float _3797 = dot(vec3(_3794, _3795, _3796), vec3(_3794, _3795, _3796));
                                float _3800 = inversesqrt(_3797);
                                float _3801 = _3800 * _3794;
                                float _3802 = _3800 * _3795;
                                float _3803 = _3800 * _3796;
                                float _3807 = 1.0 - (_3797 / (_3663 * _3663));
                                float _5017 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3812 = sqrt(_3797) * _3678.w;
                                float _3814 = 1.39999997615814208984375 / (_3812 + 1.39999997615814208984375);
                                float _3815 = _3814 * _3814;
                                float _3818 = ((1.0 - _3815) * dot(vec3(_3801, _3802, _3803), vec3(_942, _945, _948))) + _3815;
                                float _3821 = _3812 * _3812;
                                float _3825 = (fma(_2110, _3705.z, fma(_2109, _3705.y, _3705.x * _2108)) + _3705.w) / _3766;
                                float _3826 = (fma(_2110, _3720.z, fma(_2109, _3720.y, _3720.x * _2108)) + _3720.w) / _3766;
                                float _3830 = 1.0 - dot(vec2(_3825, _3826), vec2(_3825, _3826));
                                float _5033 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3832 = _3831 * (((isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0))) * _3808) / ((_3821 * 0.699999988079071044921875) + 1.0));
                                float _3844 = exp2(log2(1.0 / ((_3821 * 3.5) + 5.0)) * 0.25);
                                float _3845 = 1.0 - _1017;
                                float _3852 = sqrt(1.0 - ((1.0 - (_3845 * _3845)) * (1.0 - (_3844 * _3844))));
                                float _3853 = _3852 * _3852;
                                float _3854 = _3853 * _3853;
                                float _3855 = _3801 - _3275;
                                float _3856 = _3802 - _3276;
                                float _3857 = _3803 - _3277;
                                float _3861 = inversesqrt(dot(vec3(_3855, _3856, _3857), vec3(_3855, _3856, _3857)));
                                float _3865 = dot(vec3(_942, _945, _948), vec3((-0.0) - _3275, (-0.0) - _3276, (-0.0) - _3277));
                                float _5044 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3868 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3869 = dot(vec3(_942, _945, _948), vec3(_3861 * _3855, _3861 * _3856, _3861 * _3857));
                                float _5055 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3872 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                                float _3876 = ((_3872 * _3872) * (_3854 + (-1.0))) + 1.0;
                                float _3877 = _3814 * _3853;
                                float _3878 = _3877 * _3877;
                                float _3884 = ((1.0 - _3878) * dot(vec3(_942, _945, _948), vec3(_3801, _3802, _3803))) + _3878;
                                float _5066 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3885 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                                float _3886 = 1.0 - _3853;
                                float _3896 = (0.5 / (((_3885 * ((_3868 * _3886) + _3853)) + 9.9999999392252902907785028219223e-09) + (((_3885 * _3886) + _3853) * _3868))) * _3885;
                                float _5077 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3906 = (_3831 * _3808) * (((_3854 * 3.1415927410125732421875) * (isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0)))) / ((_3876 * _3876) * ((_3821 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3832 * _3678.z;
                                frontier_phi_88_pred_1 = _3832 * _3678.y;
                                frontier_phi_88_pred_2 = _3832 * _3678.x;
                                frontier_phi_88_pred_3 = _3906 * _3690.z;
                                frontier_phi_88_pred_4 = _3906 * _3690.y;
                                frontier_phi_88_pred_5 = _3906 * _3690.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3915 = frontier_phi_88_pred;
                            _3914 = frontier_phi_88_pred_1;
                            _3913 = frontier_phi_88_pred_2;
                            _3912 = frontier_phi_88_pred_3;
                            _3911 = frontier_phi_88_pred_4;
                            _3910 = frontier_phi_88_pred_5;
                            _3620 = _3913 + _3633;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            if (_3637 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3637;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3622;
                        frontier_phi_82_pred_1 = _3621;
                        frontier_phi_82_pred_2 = _3620;
                        frontier_phi_82_pred_3 = _3619;
                        frontier_phi_82_pred_4 = _3618;
                        frontier_phi_82_pred_5 = _3617;
                    }
                    _3260 = frontier_phi_82_pred;
                    _3258 = frontier_phi_82_pred_1;
                    _3256 = frontier_phi_82_pred_2;
                    _3254 = frontier_phi_82_pred_3;
                    _3252 = frontier_phi_82_pred_4;
                    _3250 = frontier_phi_82_pred_5;
                    uint _3416 = _3415 + 1u;
                    if (_3416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3409 = _3250;
                        _3410 = _3252;
                        _3411 = _3254;
                        _3412 = _3256;
                        _3413 = _3258;
                        _3414 = _3260;
                        _3415 = _3416;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3256;
                frontier_phi_63_64_ladder_1 = _3260;
                frontier_phi_63_64_ladder_2 = _3258;
                frontier_phi_63_64_ladder_3 = _3254;
                frontier_phi_63_64_ladder_4 = _3252;
                frontier_phi_63_64_ladder_5 = _3250;
            }
            else
            {
                frontier_phi_63_64_ladder = _3135;
                frontier_phi_63_64_ladder_1 = _3139;
                frontier_phi_63_64_ladder_2 = _3137;
                frontier_phi_63_64_ladder_3 = _3133;
                frontier_phi_63_64_ladder_4 = _3131;
                frontier_phi_63_64_ladder_5 = _3129;
            }
            _3249 = frontier_phi_63_64_ladder_5;
            _3251 = frontier_phi_63_64_ladder_4;
            _3253 = frontier_phi_63_64_ladder_3;
            _3255 = frontier_phi_63_64_ladder;
            _3257 = frontier_phi_63_64_ladder_2;
            _3259 = frontier_phi_63_64_ladder_1;
        }
        float _3264 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _3062 = (_3264 * _3255) + _2574;
        _3064 = (_3264 * _3257) + _2576;
        _3066 = (_3264 * _3259) + _2578;
        _3068 = ((_3249 * _985) * _3264) + _2912;
        _3070 = ((_3251 * _987) * _3264) + _2914;
        _3072 = ((_3253 * _988) * _3264) + _2916;
    }
    else
    {
        _3062 = _2574;
        _3064 = _2576;
        _3066 = _2578;
        _3068 = _2912;
        _3070 = _2914;
        _3072 = _2916;
    }
    float _5093 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _5104 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _5115 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _3089 = ((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3062 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1001))) + ((_3068 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _3090 = ((isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_3064 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1001))) + ((_3070 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _3091 = ((isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0))) * (_3066 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1001))) + ((_3072 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    uint _3092 = _261 + 6u;
    float _3100 = _923 / cbSceneParam._m0[86u].x;
    float _3101 = _924 / cbSceneParam._m0[86u].y;
    vec4 _3115 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3100, _3101, (log2((isnan(cbSceneParam._m0[77u].w) ? _846 : (isnan(_846) ? cbSceneParam._m0[77u].w : min(_846, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3117 = _3115.x;
    float _3118 = _3115.y;
    float _3119 = _3115.z;
    float _3120 = _3115.w;
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    if (_846 > cbSceneParam._m0[78u].w)
    {
        float _3154 = isnan(_846) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _846 : min(cbSceneParam._m0[80u].w, _846));
        float _3155 = _3154 / _846;
        float _3166 = _3155 * _896;
        float _3167 = _897 * _3155;
        float _3168 = (-0.0) - _3167;
        float _3169 = _3155 * _898;
        float _3171 = (cbSceneParam._m0[77u].w * _3168) / _3154;
        float _3172 = _3171 + cbSceneParam._m0[79u].w;
        float _3173 = cbSceneParam._m0[79u].w - _3167;
        float _3179 = sqrt(((_3166 * _3166) + (_3167 * _3167)) + (_3169 * _3169));
        float _3182 = (1.0 - (cbSceneParam._m0[77u].w / _3154)) * _3179;
        float _3187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3366;
        if (abs((_3168 - _3171) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3366 = ((((_3172 > 0.0) ? exp2(_3187 * _3172) : (2.0 - exp2(_3189 * _3172))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3182;
        }
        else
        {
            float _3310 = 1.0 / cbSceneParam._m0[80u].x;
            float _3311 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : max(_3172, _3173));
            float _3312 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : min(_3172, _3173));
            float _3321 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : min(_3311, 0.0));
            float _3322 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : min(_3312, 0.0));
            _3366 = ((abs(_3179 / _3168) * cbSceneParam._m0[80u].y) * ((((_3321 - _3322) * 2.0) - ((exp2(_3187 * (isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0)))) - exp2(_3187 * (isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))))) * _3310)) - ((exp2(_3189 * _3321) - exp2(_3189 * _3322)) * _3310))) + (_3182 * cbSceneParam._m0[80u].z);
        }
        vec4 _3368 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3100, _3101, 1.0), 0.0);
        float _3377 = exp2((_3366 * (-1.44269502162933349609375)) * (1.0 - _3368.w));
        float _3378 = log2(_3377);
        float _3394 = log2(_3120);
        _3191 = (exp2(_3394 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].x)) * _3368.x) / cbSceneParam._m0[78u].x)) + _3117;
        _3193 = (exp2(_3394 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].y)) * _3368.y) / cbSceneParam._m0[78u].y)) + _3118;
        _3195 = (exp2(_3394 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].z)) * _3368.z) / cbSceneParam._m0[78u].z)) + _3119;
        _3197 = _3377 * _3120;
    }
    else
    {
        _3191 = _3117;
        _3193 = _3118;
        _3195 = _3119;
        _3197 = _3120;
    }
    bool _3404;
    vec4 _3207;
    vec4 _3229;
    float _3231;
    float _3235;
    float _3236;
    float _3237;
    float _3238;
    bool _3248;
    for (;;)
    {
        _3207 = cbMatDynParam._m0[0u];
        float _3209 = roundEven(_3207.y);
        bool _3210 = _3209 == 3.0;
        float _3211 = log2(_3197);
        float _3218 = exp2(_3211 * cbSceneParam._m0[78u].x) * _3089;
        float _3219 = exp2(_3211 * cbSceneParam._m0[78u].y) * _3090;
        float _3220 = exp2(_3211 * cbSceneParam._m0[78u].z) * _3091;
        float _3227 = _912 + (-0.5);
        _3229 = cbMtdParam._m0[1u];
        _3231 = _3229.y * _3227;
        float _3234 = (_3209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3235 = _3234 * (_3210 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3191)));
        _3236 = _3234 * (_3210 ? _3219 : (_3219 + (cbSceneParam._m0[72u].w * _3193)));
        _3237 = _3234 * (_3210 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3195)));
        _3238 = _3227 * 0.999000012874603271484375;
        _3248 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3248)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3238) < 0.5)
            {
                _3404 = true;
                break;
            }
        }
        uint _3345 = _961 + uint(_3207.w);
        if ((cbInstanceData._m0[_3345].w < 1.0) && ((cbInstanceData._m0[_3345].w + _3238) < 0.5))
        {
            _3404 = true;
            break;
        }
        if ((_3231 + 1.0) < _3229.x)
        {
            _3404 = true;
            break;
        }
        _3404 = false;
        break;
    }
    float _3608;
    if (_3404)
    {
        discard_state = true;
        _3608 = 0.0;
    }
    else
    {
        _3608 = cbInstanceData._m0[_3092].w;
    }
    SV_Target.x = _3235;
    SV_Target.y = _3236;
    SV_Target.z = _3237;
    SV_Target.w = _3608;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3092].w;
    discard_exit();
}


