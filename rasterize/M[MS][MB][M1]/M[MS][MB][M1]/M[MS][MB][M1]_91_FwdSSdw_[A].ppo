#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1335;
float _3741;
float _3742;
float _3743;
float _3744;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3753 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _392) + _440;
    float _452 = ((((_419.x - _438) * _392) + _438) * 2.0) + (-1.0);
    float _454 = ((((_419.y - _439) * _392) + _439) * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _3764 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _510 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _513 = ((isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : min(_510, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _522 = (_513 - ((((((_503 - _504) * cbMtdParam._m0[24u].z) + _504) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _513))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3785 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _530 = (_523 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _531 = (_523 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _532 = (_523 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _546 = _544.x;
    float _547 = 1.0 - _546;
    float _574 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_546 - _547) * cbMtdParam._m0[24u].w) + _547) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3796 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _583 = ((((cbMtdParam._m0[10u].x - _530) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _575) + _530;
    float _584 = ((((cbMtdParam._m0[10u].y - _531) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _575) + _531;
    float _585 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _532)) * _575) + _532;
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _613 = _611.x;
    float _631 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _613) * _392) + _613;
    float _635 = ((_597.x - _631) * cbMtdParam._m0[19u].z) + _631;
    float _637 = _635 - (_635 * _523);
    float _639 = _637 - (_637 * _575);
    float _643 = (cbMtdParam._m0[19u].w * (_476.z - _449)) + _449;
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _664 = (_657.x * 2.0) + (-1.0);
    float _665 = (_657.y * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3807 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _674 = (_523 * (_657.z - _643)) + _643;
    float _677 = ((cbMtdParam._m0[23u].y - _674) * _575) + _674;
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _702 = (_696.x * 2.0) + (-1.0);
    float _703 = (_696.y * 2.0) + (-1.0);
    float _704 = dot(vec2(_702, _703), vec2(_702, _703));
    float _3818 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _712 = (((_476.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _713 = (((_476.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _454;
    float _725 = (((_664 - _712) + (cbMtdParam._m0[21u].x * _712)) * _523) + _712;
    float _726 = (((_665 - _713) + (cbMtdParam._m0[21u].x * _713)) * _523) + _713;
    float _727 = (_523 * (sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) - _460)) + _460;
    float _738 = (((_702 - _725) + (_725 * cbMtdParam._m0[22u].z)) * _575) + _725;
    float _739 = (((_703 - _726) + (_726 * cbMtdParam._m0[22u].z)) * _575) + _726;
    float _740 = ((sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) - _727) * _575) + _727;
    float _742 = cbMtdParam._m0[22u].x + _476.w;
    float _745 = fma(_740, _242 * NORMAL.x, fma(_739, _249 * TANGENT.x, (_235 * _227) * _738));
    float _748 = fma(_740, _242 * NORMAL.y, fma(_739, _249 * TANGENT.y, (_235 * _228) * _738));
    float _751 = fma(_740, _242 * NORMAL.z, fma(_739, _249 * TANGENT.z, (_235 * _229) * _738));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3829 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _759 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3851 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3862 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3873 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3884 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _764 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _828 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _818);
    float _829 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _818);
    float _830 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _818);
    float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
    float _835 = _828 * _834;
    float _836 = _829 * _834;
    float _837 = _830 * _834;
    vec4 _842 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _844 = _842.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1016 = sqrt(((_828 * _828) + (_829 * _829)) + (_830 * _830));
        float _1022 = (cbMatDynParam._m0[5u].x * _1016) + cbMatDynParam._m0[5u].y;
        float _3895 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1027 = (cbMatDynParam._m0[5u].z * _1016) + cbMatDynParam._m0[5u].w;
        float _3906 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) - _1023)) + _1023) < ((_844 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _855 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _856 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _874 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _877 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _880 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _893 = _255 + 9u;
    uint _894 = _893 + uint(cbMatDynParam._m0[0u].w);
    float _900 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_894].x;
    float _901 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_894].y;
    float _902 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_894].z;
    float _3917 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _906 = 1.0 - _764;
    float _907 = _903 * _906;
    float _908 = _904 * _906;
    float _909 = _905 * _906;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _764;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _764;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _764;
    float _917 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    float _920 = _916 + 0.039999999105930328369140625;
    vec4 _929 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _855, cbSceneParam._m0[86u].y * _856));
    float _933 = ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * TEXCOORD_5.w) * _929.x;
    float _934 = dot(vec3(_756, _757, _758), vec3(_835, _836, _837));
    float _937 = _934 * 2.0;
    float _941 = (_937 * _756) - _835;
    float _942 = (_937 * _757) - _836;
    float _943 = (_937 * _758) - _837;
    float _947 = abs(dot(vec3(_835, _836, _837), vec3(_756, _757, _758)));
    float _3950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_759);
    float _962 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _968 = (1.0 - _962) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _969 = _962 * _949;
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1334;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1005, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997));
        float _1063 = fma(_1005, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997));
        float _1067 = fma(_1005, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997));
        float _1092 = _997 + _756;
        float _1093 = _1001 + _757;
        float _1094 = _1005 + _758;
        float _1104 = fma(_1094, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092)) - _1059;
        float _1105 = fma(_1094, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092)) - _1063;
        float _1106 = fma(_1094, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092)) - _1067;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1162 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1128.x + (-0.5));
        float _1164 = _1162 * (_1128.y + (-0.5));
        float _1165 = _1162 * (_1128.z + (-0.5));
        float _1172 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1135.x + (-0.5));
        float _1174 = _1172 * (_1135.y + (-0.5));
        float _1175 = _1172 * (_1135.z + (-0.5));
        float _1182 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1142.x + (-0.5));
        float _1184 = _1182 * (_1142.y + (-0.5));
        float _1185 = _1182 * (_1142.z + (-0.5));
        float _1192 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1149.x + (-0.5));
        float _1194 = _1192 * (_1149.y + (-0.5));
        float _1195 = _1192 * (_1149.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1216 = (dot(vec3(_756, _757, _758), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1226 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3998 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1228 + 1.0))) + _1233) * _1196;
        float _1243 = _1164 * 0.5;
        float _1244 = _1174 * 0.5;
        float _1245 = _1184 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_756, _757, _758), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4031 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1270 + 1.0))) + _1275) * _1197;
        float _1285 = _1165 * 0.5;
        float _1286 = _1175 * 0.5;
        float _1287 = _1185 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_756, _757, _758), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4064 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1312 + 1.0))) + _1317) * _1198;
        _1334 = _1165;
        _1336 = _1164;
        _1337 = _1163;
        _1338 = _1175;
        _1339 = _1174;
        _1340 = _1173;
        _1341 = _1185;
        _1342 = _1184;
        _1343 = _1183;
        _1344 = _1198;
        _1345 = _1197;
        _1346 = _1196;
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1335;
        _1336 = _1335;
        _1337 = _1335;
        _1338 = _1335;
        _1339 = _1335;
        _1340 = _1335;
        _1341 = _1335;
        _1342 = _1335;
        _1343 = _1335;
        _1344 = _1335;
        _1345 = _1335;
        _1346 = _1335;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1377 = fma(_1005, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997));
        float _1381 = fma(_1005, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997));
        float _1385 = fma(_1005, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997));
        float _1408 = _997 + _756;
        float _1409 = _1001 + _757;
        float _1410 = _1005 + _758;
        float _1420 = fma(_1410, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408)) - _1377;
        float _1421 = fma(_1410, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408)) - _1381;
        float _1422 = fma(_1410, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408)) - _1385;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1377 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1381 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[35u].z) + ((((((_1385 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1476 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1443.x + (-0.5));
        float _1478 = _1476 * (_1443.y + (-0.5));
        float _1479 = _1476 * (_1443.z + (-0.5));
        float _1486 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1450.x + (-0.5));
        float _1488 = _1486 * (_1450.y + (-0.5));
        float _1489 = _1486 * (_1450.z + (-0.5));
        float _1496 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1457.x + (-0.5));
        float _1498 = _1496 * (_1457.y + (-0.5));
        float _1499 = _1496 * (_1457.z + (-0.5));
        float _1506 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1464.x + (-0.5));
        float _1508 = _1506 * (_1464.y + (-0.5));
        float _1509 = _1506 * (_1464.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_756, _757, _758), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4127 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1540 + 1.0))) + _1545) * _1510;
        float _1555 = _1478 * 0.5;
        float _1556 = _1488 * 0.5;
        float _1557 = _1498 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_756, _757, _758), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4160 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1582 + 1.0))) + _1587) * _1511;
        float _1597 = _1479 * 0.5;
        float _1598 = _1489 * 0.5;
        float _1599 = _1499 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_756, _757, _758), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4193 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1624 + 1.0))) + _1629) * _1512;
        _1646 = _1479;
        _1647 = _1478;
        _1648 = _1477;
        _1649 = _1489;
        _1650 = _1488;
        _1651 = _1487;
        _1652 = _1499;
        _1653 = _1498;
        _1654 = _1497;
        _1655 = _1512;
        _1656 = _1511;
        _1657 = _1510;
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1335;
        _1647 = _1335;
        _1648 = _1335;
        _1649 = _1335;
        _1650 = _1335;
        _1651 = _1335;
        _1652 = _1335;
        _1653 = _1335;
        _1654 = _1335;
        _1655 = _1335;
        _1656 = _1335;
        _1657 = _1335;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1347)) + _1347;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1348)) + _1348;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1349)) + _1349;
    float _1693 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1670));
    float _1714 = _941 * 0.5;
    float _1715 = _942 * 0.5;
    float _1716 = _943 * 0.5;
    float _1717 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1720 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1723 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1757;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1730 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1334, _1338, _1341, _1344));
        float _1734 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1738 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1745 = dot(vec4(cbModelParam._m0[39u]), vec4(_1714, _1715, _1716, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1768;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1759 = dot(vec4(cbModelParam._m0[40u]), vec4(_1714, _1715, _1716, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1772 = (_1768 * cbModelParam._m0[1u].x) + (_1757 * (1.0 - cbModelParam._m0[1u].x));
    float _1782 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1782 : min(cbModelParam._m0[25u].z, _1782));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1831 = fma(_1005, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997)) + cbModelParam._m0[13u].w;
        float _1835 = fma(_1005, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997)) + cbModelParam._m0[14u].w;
        float _1839 = fma(_1005, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997)) + cbModelParam._m0[15u].w;
        float _1842 = fma(_943, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941));
        float _1845 = fma(_943, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941));
        float _1848 = fma(_943, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941));
        float _1876;
        if (_1842 > 0.0)
        {
            _1876 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1876 = frontier_phi_17_15_ladder;
        }
        float _2100;
        if (_1845 > 0.0)
        {
            _2100 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2100 = frontier_phi_26_22_ladder;
        }
        float _2357;
        if (_1848 > 0.0)
        {
            _2357 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2357 = frontier_phi_38_33_ladder;
        }
        float _2359 = isnan(_2100) ? _1876 : (isnan(_1876) ? _2100 : min(_1876, _2100));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1842) + _1831;
        float _2365 = (_2360 * _1845) + _1835;
        float _2366 = (_2360 * _1848) + _1839;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2367;
        float _2371 = _2367 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 > _2371) || ((_2365 < _2369) || ((_2364 < _2369) || (_2364 > _2371))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1783);
            frontier_phi_16_38_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1864 = frontier_phi_16_38_ladder_2;
        _1866 = frontier_phi_16_38_ladder_1;
        _1868 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_941, _942, _943), _1783);
        _1864 = _1852.x * cbModelParam._m0[1u].y;
        _1866 = _1852.y * cbModelParam._m0[1u].y;
        _1868 = _1852.z * cbModelParam._m0[1u].y;
    }
    float _1872 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1872 : min(cbModelParam._m0[25u].w, _1872));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1927 = fma(_1005, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997)) + cbModelParam._m0[21u].w;
        float _1931 = fma(_1005, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997)) + cbModelParam._m0[22u].w;
        float _1935 = fma(_1005, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997)) + cbModelParam._m0[23u].w;
        float _1938 = fma(_943, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941));
        float _1941 = fma(_943, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941));
        float _1944 = fma(_943, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941));
        float _2105;
        if (_1938 > 0.0)
        {
            _2105 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2105 = frontier_phi_28_24_ladder;
        }
        float _2384;
        if (_1941 > 0.0)
        {
            _2384 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2384 = frontier_phi_40_35_ladder;
        }
        float _2597;
        if (_1944 > 0.0)
        {
            _2597 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2597 = frontier_phi_49_46_ladder;
        }
        float _2599 = isnan(_2384) ? _2105 : (isnan(_2105) ? _2384 : min(_2105, _2384));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1938) + _1927;
        float _2605 = (_2600 * _1941) + _1931;
        float _2606 = (_2600 * _1944) + _1935;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1873);
            frontier_phi_25_49_ladder = _2805.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2805.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2805.x * cbModelParam._m0[1u].z;
        }
        _1963 = frontier_phi_25_49_ladder_2;
        _1965 = frontier_phi_25_49_ladder_1;
        _1967 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_941, _942, _943), _1873);
        _1963 = _1947.x * cbModelParam._m0[1u].z;
        _1965 = _1947.y * cbModelParam._m0[1u].z;
        _1967 = _1947.z * cbModelParam._m0[1u].z;
    }
    float _1980 = (((_968 * _917) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1982 = (((_968 * _919) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1984 = (((_968 * _920) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1987 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1980 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1980 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, _1980 * cbSceneParam._m0[91u].x));
    vec4 _2001 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_855, _856));
    float _2003 = _2001.w;
    float _2015 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2003);
    float _2016 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2003);
    float _2017 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2003);
    uvec4 _2021 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2023 = _2021.x * 14u;
    uint _2024 = _2023 + 13u;
    float _2031 = _933 + (-1.0);
    float _2036 = (cbLight._m0[_2024].x * _2031) + 1.0;
    float _2037 = (cbLight._m0[_2024].y * _2031) + 1.0;
    float _2038 = (cbLight._m0[_2024].z * _2031) + 1.0;
    float _2039 = (cbLight._m0[_2024].w * _2031) + 1.0;
    uint _2040 = _2023 + 5u;
    float _2046 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2050 = _2023 + 4u;
    float _2059 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2063 = _2023 | 1u;
    float _2074 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_756, _757, _758));
    float _2077 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_756, _757, _758));
    float _4329 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _4340 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2082 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2084 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2091 = ((cbLight._m0[_2040].x * _2046) * _2084) + (((cbLight._m0[_2050].x * _2015) * _2059) * _2082);
    float _2092 = ((_2046 * cbLight._m0[_2040].y) * _2084) + (((cbLight._m0[_2050].y * _2016) * _2059) * _2082);
    float _2093 = ((_2046 * cbLight._m0[_2040].z) * _2084) + (((cbLight._m0[_2050].z * _2017) * _2059) * _2082);
    uvec4 _2097 = floatBitsToUint(cbLight._m0[_2023 + 12u]);
    bool _2099 = _2097.x == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2099)
    {
        _2110 = _2091;
        _2112 = _2092;
        _2114 = _2093;
    }
    else
    {
        uint _2118 = _2023 + 6u;
        float _2134 = (dot(vec3(cbLight._m0[_2023 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4351 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2137 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2110 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _2091;
        _2112 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _2092;
        _2114 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _2093;
    }
    bool _2117 = _2097.y == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2117)
    {
        _2155 = _2110;
        _2157 = _2112;
        _2159 = _2114;
    }
    else
    {
        uint _2328 = _2023 + 7u;
        float _2344 = (dot(vec3(cbLight._m0[_2023 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4367 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2347 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2155 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2110;
        _2157 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2112;
        _2159 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2114;
    }
    uint _2162 = _2023 + 8u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _759) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_2023].x + _835;
    float _2178 = cbLight._m0[_2023].y + _836;
    float _2179 = cbLight._m0[_2023].z + _837;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2023].xyz));
    float _4383 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2191 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2192 = dot(vec3(_756, _757, _758), vec3(_2184, _2185, _2186));
    float _4405 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2184, _2185, _2186));
    float _4416 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2176 * _2176;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2213 = 0.959999978542327880859375 - _914;
    float _2215 = 0.959999978542327880859375 - _915;
    float _2216 = 0.959999978542327880859375 - _916;
    float _2223 = 1.0 - _2176;
    float _2234 = (0.5 / (((_2191 * ((_2190 * _2223) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2223) + _2176) * _2190))) * _2190;
    float _4427 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    uint _2250 = _2023 + 9u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _759) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2063].x + _835;
    float _2264 = cbLight._m0[_2063].y + _836;
    float _2265 = cbLight._m0[_2063].z + _837;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2063].xyz));
    float _4438 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2277 = dot(vec3(_756, _757, _758), vec3(_2270, _2271, _2272));
    float _4449 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2270, _2271, _2272));
    float _4460 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2262 * _2262;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2296 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
    float _2303 = 1.0 - _2262;
    float _2313 = (0.5 / (((_2191 * ((_2276 * _2303) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2303) + _2262) * _2276))) * _2276;
    float _4471 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    float _2325 = (((((_2296 * _2213) + _917) * cbLight._m0[_2250].x) * _2315) * _2046) + ((((cbLight._m0[_2162].x * _2015) * ((_2212 * _2213) + _917)) * _2236) * _2059);
    float _2326 = (((((_2296 * _2215) + _919) * cbLight._m0[_2250].y) * _2315) * _2046) + ((((cbLight._m0[_2162].y * _2016) * ((_2212 * _2215) + _919)) * _2236) * _2059);
    float _2327 = (((((_2296 * _2216) + _920) * cbLight._m0[_2250].z) * _2315) * _2046) + ((((cbLight._m0[_2162].z * _2017) * ((_2212 * _2216) + _920)) * _2236) * _2059);
    float _2389;
    float _2391;
    float _2393;
    if (_2099)
    {
        _2389 = _2325;
        _2391 = _2326;
        _2393 = _2327;
    }
    else
    {
        uint _2395 = _2023 + 2u;
        uint _2399 = _2023 + 10u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _759) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _835;
        float _2416 = cbLight._m0[_2395].y + _836;
        float _2417 = cbLight._m0[_2395].z + _837;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2395].xyz));
        float _4482 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2429 = dot(vec3(_756, _757, _758), vec3(_2422, _2423, _2424));
        float _4493 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4504 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
        float _2455 = 1.0 - _2414;
        float _2465 = (0.5 / (((_2191 * ((_2428 * _2455) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2455) + _2414) * _2428))) * _2428;
        float _4515 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2467 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2468 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2389 = (((((_2448 * _2213) + _917) * cbLight._m0[_2399].x) * _2467) * _2468) + _2325;
        _2391 = (((((_2448 * _2215) + _919) * cbLight._m0[_2399].y) * _2467) * _2468) + _2326;
        _2393 = (((((_2448 * _2216) + _920) * cbLight._m0[_2399].z) * _2467) * _2468) + _2327;
    }
    float _2503;
    float _2505;
    float _2507;
    if (_2117)
    {
        _2503 = _2389;
        _2505 = _2391;
        _2507 = _2393;
    }
    else
    {
        uint _2514 = _2023 + 3u;
        uint _2518 = _2023 + 11u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _759) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _835;
        float _2535 = cbLight._m0[_2514].y + _836;
        float _2536 = cbLight._m0[_2514].z + _837;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2514].xyz));
        float _4531 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2548 = dot(vec3(_756, _757, _758), vec3(_2541, _2542, _2543));
        float _4542 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4553 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2574 = 1.0 - _2533;
        float _2584 = (0.5 / (((_2191 * ((_2547 * _2574) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2574) + _2533) * _2547))) * _2547;
        float _4564 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2503 = (((((_2567 * _2213) + _917) * cbLight._m0[_2518].x) * _2586) * _2587) + _2389;
        _2505 = (((((_2567 * _2215) + _919) * cbLight._m0[_2518].y) * _2586) * _2587) + _2391;
        _2507 = (((((_2567 * _2216) + _920) * cbLight._m0[_2518].z) * _2586) * _2587) + _2393;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2021.y == 0u)
    {
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2662;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2662;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2662;
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.x;
        uint _2689 = uint((float(_2677.y) * floor(float(uint(cbSceneParam._m0[85u].y * _856) / _2678))) + floor(float(uint(cbSceneParam._m0[85u].x * _855) / _2678)));
        float _2699 = (log2(_2665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        uint _2703 = uint(isnan(14.0) ? _2700 : (isnan(_2700) ? 14.0 : min(_2700, 14.0)));
        uvec4 _2708 = texelFetch(g_lightClusterGridBuffer, int(((_2703 << 2u) + (_2689 << 6u)) >> 2u));
        uint _2709 = _2708.x;
        uint _2710 = _2677.z;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((((1u << ((_2710 >> 4u) & 15u)) + 4294967295u) & _2709) == 0u) || ((_2710 & 240u) == 0u))
        {
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
        }
        else
        {
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            uint _2969 = 0u;
            uint _2978;
            bool _2979;
            for (;;)
            {
                _2978 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                _2979 = _2978 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2979)
                {
                    frontier_phi_66_pred = _2963;
                    frontier_phi_66_pred_1 = _2968;
                    frontier_phi_66_pred_2 = _2967;
                    frontier_phi_66_pred_3 = _2966;
                    frontier_phi_66_pred_4 = _2965;
                    frontier_phi_66_pred_5 = _2964;
                }
                else
                {
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    uint _3114;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2978;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    for (;;)
                    {
                        uint _3118 = uint(findLSB(_3114)) + (_2969 << 5u);
                        uint _3115 = (_3114 + 4294967295u) & _3114;
                        uint _3120 = _3118 * 48u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 3u)).x));
                        uint _3140 = (_3118 * 48u) + 4u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3159 = (_3118 * 48u) + 8u;
                        vec3 _3170 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x));
                        float _3174 = _3134.x - _2663;
                        float _3175 = _3134.y - _2664;
                        float _3176 = _3134.z - _2665;
                        float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                        float _3180 = inversesqrt(_3177);
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3184 = dot(vec3(_874, _877, _880), vec3(_3181, _3182, _3183));
                        float _3189 = 1.0 - (_3177 * _3134.w);
                        float _4590 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3191 = sqrt(_3177) * _3153.w;
                        float _3194 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                        float _3195 = _3194 * _3194;
                        float _3198 = ((1.0 - _3195) * _3184) + _3195;
                        float _3201 = _3191 * _3191;
                        float _3205 = ((isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))) * _3190) / ((_3201 * 0.699999988079071044921875) + 1.0);
                        float _3209 = (-0.0) - _2663;
                        float _3210 = (-0.0) - _2664;
                        float _3211 = (-0.0) - _2665;
                        float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3226 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                        float _3227 = 1.0 - _949;
                        float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                        float _3235 = _3234 * _3234;
                        float _3236 = _3235 * _3235;
                        float _3237 = _3216 + _3181;
                        float _3238 = _3217 + _3182;
                        float _3239 = _3218 + _3183;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3247 = dot(vec3(_874, _877, _880), vec3(_3216, _3217, _3218));
                        float _4606 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3251 = dot(vec3(_874, _877, _880), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                        float _4617 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3254 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                        float _3259 = _3194 * _3235;
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3184) + _3260;
                        float _4628 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3265 = 1.0 - _3235;
                        float _3275 = (0.5 / (((_3264 * ((_3250 * _3265) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3235) * _3250))) * _3264;
                        float _4639 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3286 = (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3258 * _3258) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125))) * _3190;
                        _3038 = (_3205 * _3153.x) + _3111;
                        _3039 = (_3205 * _3153.y) + _3112;
                        _3040 = (_3205 * _3153.z) + _3113;
                        _3035 = (_3286 * _3170.x) + _3108;
                        _3036 = (_3286 * _3170.y) + _3109;
                        _3037 = (_3286 * _3170.z) + _3110;
                        if (_3115 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3115;
                        }
                    }
                    frontier_phi_66_pred = _3035;
                    frontier_phi_66_pred_1 = _3040;
                    frontier_phi_66_pred_2 = _3039;
                    frontier_phi_66_pred_3 = _3038;
                    frontier_phi_66_pred_4 = _3037;
                    frontier_phi_66_pred_5 = _3036;
                }
                _2811 = frontier_phi_66_pred;
                _2821 = frontier_phi_66_pred_1;
                _2819 = frontier_phi_66_pred_2;
                _2817 = frontier_phi_66_pred_3;
                _2815 = frontier_phi_66_pred_4;
                _2813 = frontier_phi_66_pred_5;
                uint _2970 = _2969 + 1u;
                if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2963 = _2811;
                    _2964 = _2813;
                    _2965 = _2815;
                    _2966 = _2817;
                    _2967 = _2819;
                    _2968 = _2821;
                    _2969 = _2970;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
        }
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.z;
        uint _2827 = (_2825 >> 8u) & 15u;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((4294967295u << _2827) & _2709) == 0u)
        {
            _2931 = _2810;
            _2933 = _2812;
            _2935 = _2814;
            _2937 = _2816;
            _2939 = _2818;
            _2941 = _2820;
        }
        else
        {
            float _2956 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
            float _2957 = _2956 * _2663;
            float _2958 = _2956 * _2664;
            float _2959 = _2956 * _2665;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2827 < ((_2825 >> 12u) & 15u))
            {
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _3091 = _2810;
                float _3092 = _2812;
                float _3093 = _2814;
                float _3094 = _2816;
                float _3095 = _2818;
                float _3096 = _2820;
                uint _3097 = _2827;
                uint _3106;
                bool _3107;
                for (;;)
                {
                    _3106 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                    _3107 = _3106 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3107)
                    {
                        frontier_phi_77_pred = _3096;
                        frontier_phi_77_pred_1 = _3095;
                        frontier_phi_77_pred_2 = _3094;
                        frontier_phi_77_pred_3 = _3093;
                        frontier_phi_77_pred_4 = _3092;
                        frontier_phi_77_pred_5 = _3091;
                    }
                    else
                    {
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        float _3315 = _3093;
                        float _3316 = _3094;
                        float _3317 = _3095;
                        float _3318 = _3096;
                        uint _3319 = _3106;
                        uint _3320;
                        vec4 _3345;
                        float _3346;
                        vec4 _3361;
                        vec3 _3373;
                        vec4 _3388;
                        vec4 _3404;
                        float _3450;
                        bool _3451;
                        for (;;)
                        {
                            uint _3330 = ((_3097 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3319));
                            _3320 = (_3319 + 4294967295u) & _3319;
                            uint _3332 = _3330 * 40u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            _3346 = _3345.w;
                            uint _3348 = (_3330 * 40u) + 4u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3330 * 40u) + 8u;
                            _3373 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x));
                            uint _3375 = (_3330 * 40u) + 16u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3391 = (_3330 * 40u) + 20u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3330 * 40u) + 24u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3425 = (_3330 * 40u) + 28u;
                            vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3450 = fma(_2665, _3438.z, fma(_2664, _3438.y, _3438.x * _2663)) + _3438.w;
                            _3451 = !((fma(_2665, _3419.z, fma(_2664, _3419.y, _3419.x * _2663)) + _3419.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3451)
                            {
                                float _3478 = _3345.x - _2663;
                                float _3479 = _3345.y - _2664;
                                float _3480 = _3345.z - _2665;
                                float _3481 = dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480));
                                float _3484 = inversesqrt(_3481);
                                float _3485 = _3484 * _3478;
                                float _3486 = _3484 * _3479;
                                float _3487 = _3484 * _3480;
                                float _3491 = 1.0 - (_3481 / (_3346 * _3346));
                                float _4650 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3496 = sqrt(_3481) * _3361.w;
                                float _3498 = 1.39999997615814208984375 / (_3496 + 1.39999997615814208984375);
                                float _3499 = _3498 * _3498;
                                float _3502 = ((1.0 - _3499) * dot(vec3(_3485, _3486, _3487), vec3(_874, _877, _880))) + _3499;
                                float _3505 = _3496 * _3496;
                                float _3509 = (fma(_2665, _3388.z, fma(_2664, _3388.y, _3388.x * _2663)) + _3388.w) / _3450;
                                float _3510 = (fma(_2665, _3404.z, fma(_2664, _3404.y, _3404.x * _2663)) + _3404.w) / _3450;
                                float _3514 = 1.0 - dot(vec2(_3509, _3510), vec2(_3509, _3510));
                                float _4666 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3516 = _3515 * (((isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0))) * _3492) / ((_3505 * 0.699999988079071044921875) + 1.0));
                                float _3528 = exp2(log2(1.0 / ((_3505 * 3.5) + 5.0)) * 0.25);
                                float _3529 = 1.0 - _949;
                                float _3536 = sqrt(1.0 - ((1.0 - (_3529 * _3529)) * (1.0 - (_3528 * _3528))));
                                float _3537 = _3536 * _3536;
                                float _3538 = _3537 * _3537;
                                float _3539 = _3485 - _2957;
                                float _3540 = _3486 - _2958;
                                float _3541 = _3487 - _2959;
                                float _3545 = inversesqrt(dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541)));
                                float _3549 = dot(vec3(_874, _877, _880), vec3((-0.0) - _2957, (-0.0) - _2958, (-0.0) - _2959));
                                float _4677 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3553 = dot(vec3(_874, _877, _880), vec3(_3545 * _3539, _3545 * _3540, _3545 * _3541));
                                float _4688 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3560 = ((_3556 * _3556) * (_3538 + (-1.0))) + 1.0;
                                float _3561 = _3498 * _3537;
                                float _3562 = _3561 * _3561;
                                float _3568 = ((1.0 - _3562) * dot(vec3(_874, _877, _880), vec3(_3485, _3486, _3487))) + _3562;
                                float _4699 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3570 = 1.0 - _3537;
                                float _3580 = (0.5 / (((_3569 * ((_3552 * _3570) + _3537)) + 9.9999999392252902907785028219223e-09) + (((_3569 * _3570) + _3537) * _3552))) * _3569;
                                float _4710 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3590 = (_3515 * _3492) * (((_3538 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3560 * _3560) * ((_3505 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3516 * _3361.y;
                                frontier_phi_83_pred_1 = _3516 * _3361.x;
                                frontier_phi_83_pred_2 = _3590 * _3373.z;
                                frontier_phi_83_pred_3 = _3590 * _3373.y;
                                frontier_phi_83_pred_4 = _3590 * _3373.x;
                                frontier_phi_83_pred_5 = _3516 * _3361.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3598 = frontier_phi_83_pred;
                            _3597 = frontier_phi_83_pred_1;
                            _3596 = frontier_phi_83_pred_2;
                            _3595 = frontier_phi_83_pred_3;
                            _3594 = frontier_phi_83_pred_4;
                            _3599 = frontier_phi_83_pred_5;
                            _3303 = _3597 + _3316;
                            _3304 = _3598 + _3317;
                            _3305 = _3599 + _3318;
                            _3300 = _3594 + _3313;
                            _3301 = _3595 + _3314;
                            _3302 = _3596 + _3315;
                            if (_3320 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3320;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3305;
                        frontier_phi_77_pred_1 = _3304;
                        frontier_phi_77_pred_2 = _3303;
                        frontier_phi_77_pred_3 = _3302;
                        frontier_phi_77_pred_4 = _3301;
                        frontier_phi_77_pred_5 = _3300;
                    }
                    _2942 = frontier_phi_77_pred;
                    _2940 = frontier_phi_77_pred_1;
                    _2938 = frontier_phi_77_pred_2;
                    _2936 = frontier_phi_77_pred_3;
                    _2934 = frontier_phi_77_pred_4;
                    _2932 = frontier_phi_77_pred_5;
                    uint _3098 = _3097 + 1u;
                    if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3091 = _2932;
                        _3092 = _2934;
                        _3093 = _2936;
                        _3094 = _2938;
                        _3095 = _2940;
                        _3096 = _2942;
                        _3097 = _3098;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2936;
                frontier_phi_58_59_ladder_1 = _2942;
                frontier_phi_58_59_ladder_2 = _2940;
                frontier_phi_58_59_ladder_3 = _2938;
                frontier_phi_58_59_ladder_4 = _2934;
                frontier_phi_58_59_ladder_5 = _2932;
            }
            else
            {
                frontier_phi_58_59_ladder = _2814;
                frontier_phi_58_59_ladder_1 = _2820;
                frontier_phi_58_59_ladder_2 = _2818;
                frontier_phi_58_59_ladder_3 = _2816;
                frontier_phi_58_59_ladder_4 = _2812;
                frontier_phi_58_59_ladder_5 = _2810;
            }
            _2931 = frontier_phi_58_59_ladder_5;
            _2933 = frontier_phi_58_59_ladder_4;
            _2935 = frontier_phi_58_59_ladder;
            _2937 = frontier_phi_58_59_ladder_3;
            _2939 = frontier_phi_58_59_ladder_2;
            _2941 = frontier_phi_58_59_ladder_1;
        }
        float _2946 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2722 = (_2946 * _2937) + _2155;
        _2724 = (_2946 * _2939) + _2157;
        _2726 = (_2946 * _2941) + _2159;
        _2728 = ((_2931 * _917) * _2946) + _2503;
        _2730 = ((_2933 * _919) * _2946) + _2505;
        _2732 = ((_2935 * _920) * _2946) + _2507;
    }
    else
    {
        _2722 = _2155;
        _2724 = _2157;
        _2726 = _2159;
        _2728 = _2503;
        _2730 = _2505;
        _2732 = _2507;
    }
    float _4726 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4737 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4748 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2749 = ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2722 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _933))) + ((_2728 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _2750 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2724 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _933))) + ((_2730 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _2751 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2726 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _933))) + ((_2732 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    uint _2752 = _255 + 6u;
    float _2760 = _855 / cbSceneParam._m0[86u].x;
    float _2761 = _856 / cbSceneParam._m0[86u].y;
    vec4 _2775 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2777 = _2775.x;
    float _2778 = _2775.y;
    float _2779 = _2775.z;
    float _2780 = _2775.w;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _2835 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _2836 = _2835 / _778;
        float _2847 = _2836 * _828;
        float _2848 = _829 * _2836;
        float _2849 = (-0.0) - _2848;
        float _2851 = _2836 * _830;
        float _2853 = (cbSceneParam._m0[77u].w * _2849) / _2835;
        float _2854 = _2853 + cbSceneParam._m0[79u].w;
        float _2855 = cbSceneParam._m0[79u].w - _2848;
        float _2861 = sqrt(((_2847 * _2847) + (_2848 * _2848)) + (_2851 * _2851));
        float _2864 = (1.0 - (cbSceneParam._m0[77u].w / _2835)) * _2861;
        float _2869 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2871 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3048;
        if (abs((_2849 - _2853) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3048 = ((((_2854 > 0.0) ? exp2(_2869 * _2854) : (2.0 - exp2(_2871 * _2854))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2864;
        }
        else
        {
            float _2992 = 1.0 / cbSceneParam._m0[80u].x;
            float _2993 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : max(_2854, _2855));
            float _2994 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : min(_2854, _2855));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            float _3004 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : min(_2994, 0.0));
            _3048 = ((abs(_2861 / _2849) * cbSceneParam._m0[80u].y) * ((((_3003 - _3004) * 2.0) - ((exp2(_2869 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0)))) - exp2(_2869 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))))) * _2992)) - ((exp2(_2871 * _3003) - exp2(_2871 * _3004)) * _2992))) + (_2864 * cbSceneParam._m0[80u].z);
        }
        vec4 _3050 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, 1.0), 0.0);
        float _3059 = exp2((_3048 * (-1.44269502162933349609375)) * (1.0 - _3050.w));
        float _3060 = log2(_3059);
        float _3076 = log2(_2780);
        _2873 = (exp2(_3076 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].x)) * _3050.x) / cbSceneParam._m0[78u].x)) + _2777;
        _2875 = (exp2(_3076 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].y)) * _3050.y) / cbSceneParam._m0[78u].y)) + _2778;
        _2877 = (exp2(_3076 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].z)) * _3050.z) / cbSceneParam._m0[78u].z)) + _2779;
        _2879 = _3059 * _2780;
    }
    else
    {
        _2873 = _2777;
        _2875 = _2778;
        _2877 = _2779;
        _2879 = _2780;
    }
    bool _3086;
    vec4 _2889;
    vec4 _2911;
    float _2913;
    float _2917;
    float _2918;
    float _2919;
    float _2920;
    bool _2930;
    for (;;)
    {
        _2889 = cbMatDynParam._m0[0u];
        float _2891 = roundEven(_2889.y);
        bool _2892 = _2891 == 3.0;
        float _2893 = log2(_2879);
        float _2900 = exp2(_2893 * cbSceneParam._m0[78u].x) * _2749;
        float _2901 = exp2(_2893 * cbSceneParam._m0[78u].y) * _2750;
        float _2902 = exp2(_2893 * cbSceneParam._m0[78u].z) * _2751;
        float _2909 = _844 + (-0.5);
        _2911 = cbMtdParam._m0[1u];
        _2913 = _2911.y * _2909;
        float _2916 = (_2891 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2917 = _2916 * (_2892 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2873)));
        _2918 = _2916 * (_2892 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2875)));
        _2919 = _2916 * (_2892 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2877)));
        _2920 = _2909 * 0.999000012874603271484375;
        _2930 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2930)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2920) < 0.5)
            {
                _3086 = true;
                break;
            }
        }
        uint _3027 = _893 + uint(_2889.w);
        if ((cbInstanceData._m0[_3027].w < 1.0) && ((cbInstanceData._m0[_3027].w + _2920) < 0.5))
        {
            _3086 = true;
            break;
        }
        if ((_2913 + 1.0) < _2911.x)
        {
            _3086 = true;
            break;
        }
        _3086 = false;
        break;
    }
    float _3291;
    if (_3086)
    {
        discard_state = true;
        _3291 = 0.0;
    }
    else
    {
        _3291 = cbInstanceData._m0[_2752].w;
    }
    SV_Target.x = _2917;
    SV_Target.y = _2918;
    SV_Target.z = _2919;
    SV_Target.w = _3291;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2752].w;
    discard_exit();
}


