#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1301;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3911 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _469 = ((_439.z - _460) * _392) + _460;
    float _472 = ((((_439.x - _458) * _392) + _458) * 2.0) + (-1.0);
    float _473 = ((((_439.y - _459) * _392) + _459) * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3922 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _513 = (_472 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_414.x * 2.0) + (-1.0)))) + (((_501.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _514 = (_473 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_414.y * 2.0) + (-1.0)))) + (((_501.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _528 = _526.x;
    float _529 = 1.0 - _528;
    float _557 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_528 - _529) * cbMtdParam._m0[24u].w) + _529) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3933 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _566 = ((((cbMtdParam._m0[10u].x - _399) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _558) + _399;
    float _567 = ((((cbMtdParam._m0[10u].y - _400) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _558) + _400;
    float _568 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _401)) * _558) + _401;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _596 = _594.x;
    float _614 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _596) * _392) + _596;
    float _618 = ((_580.x - _614) * cbMtdParam._m0[19u].z) + _614;
    float _620 = _618 - (_618 * _558);
    float _625 = (((_414.z - _469) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _469;
    float _629 = ((_501.z - _625) * cbMtdParam._m0[19u].w) + _625;
    float _633 = ((cbMtdParam._m0[23u].y - _629) * _558) + _629;
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _654 = _652.x;
    float _655 = _652.y;
    float _659 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_243, _244, _245, 0.0));
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _274) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _275) + cbTextureTilingScale._m0[18u].w));
    float _676 = _674.x;
    float _681 = fract(_674.w + cbPerFrame._m0[22u].x);
    float _683 = (1.0 - _681) * _676;
    float _688 = ((_681 + (-1.0)) + _676) * 9.0;
    float _690 = ((_676 + (-1.0)) + _681) * 9.0;
    float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _692 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _706 = (_683 * ((_674.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _691 : (isnan(_691) ? 3.0 : min(_691, 3.0))) * 3.1415927410125732421875);
    float _708 = (_683 * ((_674.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _692 : (isnan(_692) ? 3.0 : min(_692, 3.0))) * 3.1415927410125732421875);
    float _712 = inversesqrt(dot(vec3(_706, _708, 1.0), vec3(_706, _708, 1.0)));
    float _728 = (((((0.5 - _654) + ((_706 * 0.5) * _712)) * _659) + _654) * 2.0) + (-1.0);
    float _729 = (((((0.5 - _655) + ((_712 * 0.5) * _708)) * _659) + _655) * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3964 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _746 = ((((cbMtdParam._m0[22u].z * _513) - _513) + _728) * _558) + _513;
    float _747 = ((((cbMtdParam._m0[22u].z * _514) - _514) + _729) * _558) + _514;
    float _748 = (_558 * (sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _479)) + _479;
    float _750 = cbMtdParam._m0[22u].x + _501.w;
    float _753 = fma(_748, _243, fma(_747, _249 * TANGENT.x, (_235 * _227) * _746));
    float _756 = fma(_748, _244, fma(_747, _249 * TANGENT.y, (_235 * _228) * _746));
    float _759 = fma(_748, _245, fma(_747, _249 * TANGENT.z, (_235 * _229) * _746));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3975 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _767 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3997 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4008 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4019 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4030 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _772 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _870 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _873 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _876 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _890 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _896 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_890].x;
    float _897 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_890].y;
    float _898 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_890].z;
    float _4041 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _902 = 1.0 - _772;
    float _903 = _899 * _902;
    float _904 = _900 * _902;
    float _905 = _901 * _902;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _772;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _772;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _772;
    float _913 = _910 + 0.039999999105930328369140625;
    float _915 = _911 + 0.039999999105930328369140625;
    float _916 = _912 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _929 = ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * TEXCOORD_5.w) * _925.x;
    float _930 = dot(vec3(_764, _765, _766), vec3(_843, _844, _845));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _764) - _843;
    float _938 = (_933 * _765) - _844;
    float _939 = (_933 * _766) - _845;
    float _943 = abs(dot(vec3(_843, _844, _845), vec3(_764, _765, _766)));
    float _4074 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_767);
    float _957 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _963 = (1.0 - _957) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _964 = _957 * _945;
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1026 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1030 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1034 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1058 = _992 + _764;
        float _1059 = _996 + _765;
        float _1060 = _1000 + _766;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1026;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1030;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1034;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1026 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1030 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1034 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_764, _765, _766), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _4122 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_764, _765, _766), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _4155 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_764, _765, _766), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4188 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1340 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1344 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1348 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1371 = _992 + _764;
        float _1372 = _996 + _765;
        float _1373 = _1000 + _766;
        float _1383 = fma(_1373, cbModelParam._m0[30u].z, fma(_1372, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1371)) - _1340;
        float _1384 = fma(_1373, cbModelParam._m0[31u].z, fma(_1372, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1371)) - _1344;
        float _1385 = fma(_1373, cbModelParam._m0[32u].z, fma(_1372, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1371)) - _1348;
        float _1389 = inversesqrt(dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385)));
        float _1402 = ((_1389 * _1383) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1340 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1389 * _1384) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1344 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1389 * _1385) / cbModelParam._m0[35u].z) + ((((((_1348 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        float _1439 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1406.x + (-0.5));
        float _1441 = _1439 * (_1406.y + (-0.5));
        float _1442 = _1439 * (_1406.z + (-0.5));
        float _1449 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1413.x + (-0.5));
        float _1451 = _1449 * (_1413.y + (-0.5));
        float _1452 = _1449 * (_1413.z + (-0.5));
        float _1459 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1420.x + (-0.5));
        float _1461 = _1459 * (_1420.y + (-0.5));
        float _1462 = _1459 * (_1420.z + (-0.5));
        float _1469 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1427.x + (-0.5));
        float _1471 = _1469 * (_1427.y + (-0.5));
        float _1472 = _1469 * (_1427.z + (-0.5));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1440 * 0.5;
        float _1477 = _1450 * 0.5;
        float _1478 = _1460 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_764, _765, _766), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4251 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1503 + 1.0))) + _1508) * _1473;
        float _1518 = _1441 * 0.5;
        float _1519 = _1451 * 0.5;
        float _1520 = _1461 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_764, _765, _766), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4284 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1545 + 1.0))) + _1550) * _1474;
        float _1560 = _1442 * 0.5;
        float _1561 = _1452 * 0.5;
        float _1562 = _1462 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_764, _765, _766), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4317 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1587 + 1.0))) + _1592) * _1475;
        _1609 = _1442;
        _1610 = _1441;
        _1611 = _1440;
        _1612 = _1452;
        _1613 = _1451;
        _1614 = _1450;
        _1615 = _1462;
        _1616 = _1461;
        _1617 = _1460;
        _1618 = _1475;
        _1619 = _1474;
        _1620 = _1473;
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
    }
    else
    {
        _1609 = _1301;
        _1610 = _1301;
        _1611 = _1301;
        _1612 = _1301;
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = _1301;
        _1621 = 0.0;
        _1622 = 0.0;
        _1623 = 0.0;
    }
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1313)) + _1313;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1314)) + _1314;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1315)) + _1315;
    float _1656 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1633));
    float _1677 = _937 * 0.5;
    float _1678 = _938 * 0.5;
    float _1679 = _939 * 0.5;
    float _1680 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1683 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1686 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1720;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1693 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1697 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1701 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1708 = dot(vec4(cbModelParam._m0[39u]), vec4(_1677, _1678, _1679, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1731;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1722 = dot(vec4(cbModelParam._m0[40u]), vec4(_1677, _1678, _1679, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1735 = (_1731 * cbModelParam._m0[1u].x) + (_1720 * (1.0 - cbModelParam._m0[1u].x));
    float _1745 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1745 : min(cbModelParam._m0[25u].z, _1745));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1795 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1799 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1803 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1806 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1809 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1812 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1840;
        if (_1806 > 0.0)
        {
            _1840 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1840 = frontier_phi_14_12_ladder;
        }
        float _2012;
        if (_1809 > 0.0)
        {
            _2012 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2012 = frontier_phi_23_19_ladder;
        }
        float _2307;
        if (_1812 > 0.0)
        {
            _2307 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2307 = frontier_phi_35_30_ladder;
        }
        float _2309 = isnan(_2012) ? _1840 : (isnan(_1840) ? _2012 : min(_1840, _2012));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1806) + _1795;
        float _2315 = (_2310 * _1809) + _1799;
        float _2316 = (_2310 * _1812) + _1803;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2317;
        float _2321 = _2317 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 > _2321) || ((_2315 < _2319) || ((_2314 < _2319) || (_2314 > _2321))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2316, cbModelParam._m0[9u].z, fma(_2315, cbModelParam._m0[9u].y, _2314 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2316, cbModelParam._m0[10u].z, fma(_2315, cbModelParam._m0[10u].y, _2314 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2316, cbModelParam._m0[11u].z, fma(_2315, cbModelParam._m0[11u].y, _2314 * cbModelParam._m0[11u].x))), _1746);
            frontier_phi_13_35_ladder = _2461.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2461.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2461.x * cbModelParam._m0[1u].y;
        }
        _1828 = frontier_phi_13_35_ladder_2;
        _1830 = frontier_phi_13_35_ladder_1;
        _1832 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1746);
        _1828 = _1816.x * cbModelParam._m0[1u].y;
        _1830 = _1816.y * cbModelParam._m0[1u].y;
        _1832 = _1816.z * cbModelParam._m0[1u].y;
    }
    float _1836 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1836 : min(cbModelParam._m0[25u].w, _1836));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1891 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1895 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1899 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1902 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1905 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1908 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2017;
        if (_1902 > 0.0)
        {
            _2017 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2017 = frontier_phi_25_21_ladder;
        }
        float _2334;
        if (_1905 > 0.0)
        {
            _2334 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2334 = frontier_phi_37_32_ladder;
        }
        float _2672;
        if (_1908 > 0.0)
        {
            _2672 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2672 = frontier_phi_47_44_ladder;
        }
        float _2674 = isnan(_2334) ? _2017 : (isnan(_2017) ? _2334 : min(_2017, _2334));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _1902) + _1891;
        float _2680 = (_2675 * _1905) + _1895;
        float _2681 = (_2675 * _1908) + _1899;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1837);
            frontier_phi_22_47_ladder = _2803.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2803.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2803.x * cbModelParam._m0[1u].z;
        }
        _1927 = frontier_phi_22_47_ladder_2;
        _1929 = frontier_phi_22_47_ladder_1;
        _1931 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1837);
        _1927 = _1911.x * cbModelParam._m0[1u].z;
        _1929 = _1911.y * cbModelParam._m0[1u].z;
        _1931 = _1911.z * cbModelParam._m0[1u].z;
    }
    float _1944 = (((_963 * _913) + _964) * _929) * ((cbModelParam._m0[1u].w * (_1927 - _1828)) + _1828);
    float _1946 = (((_963 * _915) + _964) * _929) * ((cbModelParam._m0[1u].w * (_1929 - _1830)) + _1830);
    float _1948 = (((_963 * _916) + _964) * _929) * ((cbModelParam._m0[1u].w * (_1931 - _1832)) + _1832);
    float _1951 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1954 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1957 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, _1944 * cbSceneParam._m0[91u].x));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2004 = _1991 / _2003;
    float _2005 = _1995 / _2003;
    float _2006 = _1999 / _2003;
    float _2153;
    float _2154;
    float _2155;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2033 = ((uint(_2006 > cbSceneParam._m0[59u].y) + uint(_2006 > cbSceneParam._m0[59u].x)) + uint(_2006 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2034 = _2033 + 43u;
        uint _2042 = _2033 + 44u;
        uint _2050 = _2033 + 45u;
        uint _2058 = _2033 + 46u;
        float _2069 = fma(_2003, cbSceneParam._m0[_2034].w, fma(_1999, cbSceneParam._m0[_2034].z, fma(_1995, cbSceneParam._m0[_2034].y, _1991 * cbSceneParam._m0[_2034].x)));
        float _2073 = fma(_2003, cbSceneParam._m0[_2042].w, fma(_1999, cbSceneParam._m0[_2042].z, fma(_1995, cbSceneParam._m0[_2042].y, _1991 * cbSceneParam._m0[_2042].x)));
        float _2081 = fma(_2003, cbSceneParam._m0[_2058].w, fma(_1999, cbSceneParam._m0[_2058].z, fma(_1995, cbSceneParam._m0[_2058].y, _1991 * cbSceneParam._m0[_2058].x)));
        float _2086 = cbSceneParam._m0[33u].z * _2081;
        float _2088 = cbSceneParam._m0[33u].w * _2081;
        float _2091 = fma(_2003, cbSceneParam._m0[_2050].w, fma(_1999, cbSceneParam._m0[_2050].z, fma(_1995, cbSceneParam._m0[_2050].y, _1991 * cbSceneParam._m0[_2050].x))) / _2081;
        float _2139 = (cbSceneParam._m0[33u].x - sqrt(((_2005 * _2005) + (_2004 * _2004)) + (_2006 * _2006))) * cbSceneParam._m0[33u].y;
        float _4443 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2146 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 + _2069) / _2081, (_2088 + _2073) / _2081), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2088 + _2069) / _2081, (_2073 - _2086) / _2081), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 - _2086) / _2081, (_2073 - _2088) / _2081), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 - _2088) / _2081, (_2086 + _2073) / _2081), _2091), 0.0)).x), vec4(0.25)));
        _2153 = 1.0 - (_2146 * cbSceneParam._m0[34u].x);
        _2154 = 1.0 - (_2146 * cbSceneParam._m0[34u].y);
        _2155 = 1.0 - (_2146 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2153 = 1.0;
        _2154 = 1.0;
        _2155 = 1.0;
    }
    float _2219;
    float _2221;
    float _2223;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2207 = fma(_2003, cbSceneParam._m0[63u].w, fma(_1999, cbSceneParam._m0[63u].z, fma(_1995, cbSceneParam._m0[63u].y, _1991 * cbSceneParam._m0[63u].x)));
        float _2208 = fma(_2003, cbSceneParam._m0[60u].w, fma(_1999, cbSceneParam._m0[60u].z, fma(_1995, cbSceneParam._m0[60u].y, _1991 * cbSceneParam._m0[60u].x))) / _2207;
        float _2209 = fma(_2003, cbSceneParam._m0[61u].w, fma(_1999, cbSceneParam._m0[61u].z, fma(_1995, cbSceneParam._m0[61u].y, _1991 * cbSceneParam._m0[61u].x))) / _2207;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2208 >= cbSceneParam._m0[64u].x) && (_2209 >= cbSceneParam._m0[64u].y)) && (_2208 <= cbSceneParam._m0[64u].z)) && (_2209 <= cbSceneParam._m0[64u].w))
        {
            float _2347 = fma(_2003, cbSceneParam._m0[62u].w, fma(_1999, cbSceneParam._m0[62u].z, fma(_1995, cbSceneParam._m0[62u].y, _1991 * cbSceneParam._m0[62u].x))) / _2207;
            float _2351 = isnan(cbSceneParam._m0[41u].w) ? _2347 : (isnan(_2347) ? cbSceneParam._m0[41u].w : max(_2347, cbSceneParam._m0[41u].w));
            float _2394 = (cbSceneParam._m0[33u].x - sqrt(((_2005 * _2005) + (_2004 * _2004)) + (_2006 * _2006))) * cbSceneParam._m0[33u].y;
            float _4459 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
            float _2401 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2208, cbSceneParam._m0[33u].w + _2209), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2208, _2209 - cbSceneParam._m0[33u].z), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2208 - cbSceneParam._m0[33u].z, _2209 - cbSceneParam._m0[33u].w), _2351), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2208 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2209), _2351), 0.0)).x), vec4(0.25)));
            float _2405 = 1.0 - (_2401 * cbSceneParam._m0[34u].x);
            float _2406 = 1.0 - (_2401 * cbSceneParam._m0[34u].y);
            float _2407 = 1.0 - (_2401 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2407) ? _2155 : (isnan(_2155) ? _2407 : min(_2155, _2407));
            frontier_phi_34_33_ladder_1 = isnan(_2406) ? _2154 : (isnan(_2154) ? _2406 : min(_2154, _2406));
            frontier_phi_34_33_ladder_2 = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
        }
        else
        {
            frontier_phi_34_33_ladder = _2155;
            frontier_phi_34_33_ladder_1 = _2154;
            frontier_phi_34_33_ladder_2 = _2153;
        }
        _2219 = frontier_phi_34_33_ladder_2;
        _2221 = frontier_phi_34_33_ladder_1;
        _2223 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2219 = _2153;
        _2221 = _2154;
        _2223 = _2155;
    }
    uvec4 _2228 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2230 = _2228.x * 14u;
    uint _2231 = _2230 + 13u;
    float _2238 = _929 + (-1.0);
    float _2243 = (cbLight._m0[_2231].x * _2238) + 1.0;
    float _2244 = (cbLight._m0[_2231].y * _2238) + 1.0;
    float _2245 = (cbLight._m0[_2231].z * _2238) + 1.0;
    float _2246 = (cbLight._m0[_2231].w * _2238) + 1.0;
    uint _2247 = _2230 + 5u;
    float _2253 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
    uint _2257 = _2230 + 4u;
    float _2266 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
    uint _2270 = _2230 | 1u;
    float _2281 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_764, _765, _766));
    float _2284 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_764, _765, _766));
    float _4495 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _4506 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2289 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2291 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2298 = ((cbLight._m0[_2247].x * _2253) * _2291) + (((cbLight._m0[_2257].x * _2219) * _2266) * _2289);
    float _2299 = ((_2253 * cbLight._m0[_2247].y) * _2291) + (((cbLight._m0[_2257].y * _2221) * _2266) * _2289);
    float _2300 = ((_2253 * cbLight._m0[_2247].z) * _2291) + (((cbLight._m0[_2257].z * _2223) * _2266) * _2289);
    uvec4 _2304 = floatBitsToUint(cbLight._m0[_2230 + 12u]);
    bool _2306 = _2304.x == 0u;
    float _2408;
    float _2410;
    float _2412;
    if (_2306)
    {
        _2408 = _2298;
        _2410 = _2299;
        _2412 = _2300;
    }
    else
    {
        uint _2416 = _2230 + 6u;
        float _2432 = (dot(vec3(cbLight._m0[_2230 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4517 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2435 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2408 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2298;
        _2410 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2299;
        _2412 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2300;
    }
    bool _2415 = _2304.y == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2415)
    {
        _2470 = _2408;
        _2472 = _2410;
        _2474 = _2412;
    }
    else
    {
        uint _2643 = _2230 + 7u;
        float _2659 = (dot(vec3(cbLight._m0[_2230 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4533 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2662 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2470 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2408;
        _2472 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2410;
        _2474 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2412;
    }
    uint _2477 = _2230 + 8u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _767) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2230].x + _843;
    float _2493 = cbLight._m0[_2230].y + _844;
    float _2494 = cbLight._m0[_2230].z + _845;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2230].xyz));
    float _4549 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2506 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2507 = dot(vec3(_764, _765, _766), vec3(_2499, _2500, _2501));
    float _4571 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2499, _2500, _2501));
    float _4582 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2491 * _2491;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2528 = 0.959999978542327880859375 - _910;
    float _2530 = 0.959999978542327880859375 - _911;
    float _2531 = 0.959999978542327880859375 - _912;
    float _2538 = 1.0 - _2491;
    float _2549 = (0.5 / (((_2506 * ((_2505 * _2538) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2538) + _2491) * _2505))) * _2505;
    float _4593 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    uint _2565 = _2230 + 9u;
    float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _767) * 0.949999988079071044921875);
    float _2577 = _2576 * _2576;
    float _2578 = cbLight._m0[_2270].x + _843;
    float _2579 = cbLight._m0[_2270].y + _844;
    float _2580 = cbLight._m0[_2270].z + _845;
    float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
    float _2585 = _2584 * _2578;
    float _2586 = _2584 * _2579;
    float _2587 = _2584 * _2580;
    float _2588 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2270].xyz));
    float _4604 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2592 = dot(vec3(_764, _765, _766), vec3(_2585, _2586, _2587));
    float _4615 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2585, _2586, _2587));
    float _4626 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2577 * _2577;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2618 = 1.0 - _2577;
    float _2628 = (0.5 / (((_2506 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2618) + _2577) * _2591))) * _2591;
    float _4637 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    float _2640 = (((((_2611 * _2528) + _913) * cbLight._m0[_2565].x) * _2630) * _2253) + ((((cbLight._m0[_2477].x * _2219) * ((_2527 * _2528) + _913)) * _2551) * _2266);
    float _2641 = (((((_2611 * _2530) + _915) * cbLight._m0[_2565].y) * _2630) * _2253) + ((((cbLight._m0[_2477].y * _2221) * ((_2527 * _2530) + _915)) * _2551) * _2266);
    float _2642 = (((((_2611 * _2531) + _916) * cbLight._m0[_2565].z) * _2630) * _2253) + ((((cbLight._m0[_2477].z * _2223) * ((_2527 * _2531) + _916)) * _2551) * _2266);
    float _2698;
    float _2700;
    float _2702;
    if (_2306)
    {
        _2698 = _2640;
        _2700 = _2641;
        _2702 = _2642;
    }
    else
    {
        uint _2704 = _2230 + 2u;
        uint _2708 = _2230 + 10u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _767) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _843;
        float _2725 = cbLight._m0[_2704].y + _844;
        float _2726 = cbLight._m0[_2704].z + _845;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2704].xyz));
        float _4648 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2738 = dot(vec3(_764, _765, _766), vec3(_2731, _2732, _2733));
        float _4659 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4670 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2757 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2764 = 1.0 - _2723;
        float _2774 = (0.5 / (((_2506 * ((_2737 * _2764) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2764) + _2723) * _2737))) * _2737;
        float _4681 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2698 = (((((_2757 * _2528) + _913) * cbLight._m0[_2708].x) * _2776) * _2777) + _2640;
        _2700 = (((((_2757 * _2530) + _915) * cbLight._m0[_2708].y) * _2776) * _2777) + _2641;
        _2702 = (((((_2757 * _2531) + _916) * cbLight._m0[_2708].z) * _2776) * _2777) + _2642;
    }
    float _2808;
    float _2810;
    float _2812;
    if (_2415)
    {
        _2808 = _2698;
        _2810 = _2700;
        _2812 = _2702;
    }
    else
    {
        uint _2819 = _2230 + 3u;
        uint _2823 = _2230 + 11u;
        float _2837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2819].w)) * _767) * 0.949999988079071044921875);
        float _2838 = _2837 * _2837;
        float _2839 = cbLight._m0[_2819].x + _843;
        float _2840 = cbLight._m0[_2819].y + _844;
        float _2841 = cbLight._m0[_2819].z + _845;
        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
        float _2846 = _2845 * _2839;
        float _2847 = _2845 * _2840;
        float _2848 = _2845 * _2841;
        float _2849 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2819].xyz));
        float _4697 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2853 = dot(vec3(_764, _765, _766), vec3(_2846, _2847, _2848));
        float _4708 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2857 = dot(vec3(cbLight._m0[_2819].xyz), vec3(_2846, _2847, _2848));
        float _4719 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2861 = _2838 * _2838;
        float _2865 = ((_2856 * _2856) * (_2861 + (-1.0))) + 1.0;
        float _2872 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2879 = 1.0 - _2838;
        float _2889 = (0.5 / (((_2506 * ((_2852 * _2879) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2879) + _2838) * _2852))) * _2852;
        float _4730 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2891 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2861 / ((_2865 * _2865) * 3.141590118408203125));
        float _2892 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2808 = (((((_2872 * _2528) + _913) * cbLight._m0[_2823].x) * _2891) * _2892) + _2698;
        _2810 = (((((_2872 * _2530) + _915) * cbLight._m0[_2823].y) * _2891) * _2892) + _2700;
        _2812 = (((((_2872 * _2531) + _916) * cbLight._m0[_2823].z) * _2891) * _2892) + _2702;
    }
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_2228.y == 0u)
    {
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.x;
        uint _2925 = uint((float(_2913.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2914))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2914)));
        float _2935 = (log2(_2006 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2936 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        uint _2939 = uint(isnan(14.0) ? _2936 : (isnan(_2936) ? 14.0 : min(_2936, 14.0)));
        uvec4 _2944 = texelFetch(g_lightClusterGridBuffer, int(((_2939 << 2u) + (_2925 << 6u)) >> 2u));
        uint _2945 = _2944.x;
        uint _2946 = _2913.z;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((((1u << ((_2946 >> 4u) & 15u)) + 4294967295u) & _2945) == 0u) || ((_2946 & 240u) == 0u))
        {
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
        }
        else
        {
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            uint _3176 = 0u;
            uint _3185;
            bool _3186;
            for (;;)
            {
                _3185 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                _3186 = _3185 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3186)
                {
                    frontier_phi_66_pred = _3175;
                    frontier_phi_66_pred_1 = _3174;
                    frontier_phi_66_pred_2 = _3173;
                    frontier_phi_66_pred_3 = _3172;
                    frontier_phi_66_pred_4 = _3171;
                    frontier_phi_66_pred_5 = _3170;
                }
                else
                {
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    uint _3300;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3185;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    for (;;)
                    {
                        uint _3304 = uint(findLSB(_3300)) + (_3176 << 5u);
                        uint _3301 = (_3300 + 4294967295u) & _3300;
                        uint _3306 = _3304 * 48u;
                        vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3326 = (_3304 * 48u) + 4u;
                        vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3345 = (_3304 * 48u) + 8u;
                        vec3 _3356 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x));
                        float _3360 = _3320.x - _2004;
                        float _3361 = _3320.y - _2005;
                        float _3362 = _3320.z - _2006;
                        float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                        float _3366 = inversesqrt(_3363);
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3370 = dot(vec3(_870, _873, _876), vec3(_3367, _3368, _3369));
                        float _3375 = 1.0 - (_3363 * _3320.w);
                        float _4756 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3377 = sqrt(_3363) * _3339.w;
                        float _3380 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3370) + _3381;
                        float _3387 = _3377 * _3377;
                        float _3391 = ((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3376) / ((_3387 * 0.699999988079071044921875) + 1.0);
                        float _3395 = (-0.0) - _2004;
                        float _3396 = (-0.0) - _2005;
                        float _3397 = (-0.0) - _2006;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3411 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                        float _3412 = 1.0 - _945;
                        float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                        float _3420 = _3419 * _3419;
                        float _3421 = _3420 * _3420;
                        float _3422 = _3402 + _3367;
                        float _3423 = _3403 + _3368;
                        float _3424 = _3404 + _3369;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3432 = dot(vec3(_870, _873, _876), vec3(_3402, _3403, _3404));
                        float _4772 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3436 = dot(vec3(_870, _873, _876), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                        float _4783 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                        float _3444 = _3380 * _3420;
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3370) + _3445;
                        float _4794 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3450 = 1.0 - _3420;
                        float _3460 = (0.5 / (((_3449 * ((_3435 * _3450) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3449 * _3450) + _3420) * _3435))) * _3449;
                        float _4805 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3470 = (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3443 * _3443) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125))) * _3376;
                        _3229 = (_3391 * _3339.x) + _3297;
                        _3230 = (_3391 * _3339.y) + _3298;
                        _3231 = (_3391 * _3339.z) + _3299;
                        _3226 = (_3470 * _3356.x) + _3294;
                        _3227 = (_3470 * _3356.y) + _3295;
                        _3228 = (_3470 * _3356.z) + _3296;
                        if (_3301 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3301;
                        }
                    }
                    frontier_phi_66_pred = _3231;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                _3036 = frontier_phi_66_pred;
                _3034 = frontier_phi_66_pred_1;
                _3032 = frontier_phi_66_pred_2;
                _3030 = frontier_phi_66_pred_3;
                _3028 = frontier_phi_66_pred_4;
                _3026 = frontier_phi_66_pred_5;
                uint _3177 = _3176 + 1u;
                if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3170 = _3026;
                    _3171 = _3028;
                    _3172 = _3030;
                    _3173 = _3032;
                    _3174 = _3034;
                    _3175 = _3036;
                    _3176 = _3177;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
        }
        uvec4 _3039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3040 = _3039.z;
        uint _3042 = (_3040 >> 8u) & 15u;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((4294967295u << _3042) & _2945) == 0u)
        {
            _3138 = _3025;
            _3140 = _3027;
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
        }
        else
        {
            float _3163 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
            float _3164 = _3163 * _2004;
            float _3165 = _3163 * _2005;
            float _3166 = _3163 * _2006;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3042 < ((_3040 >> 12u) & 15u))
            {
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3277 = _3025;
                float _3278 = _3027;
                float _3279 = _3029;
                float _3280 = _3031;
                float _3281 = _3033;
                float _3282 = _3035;
                uint _3283 = _3042;
                uint _3292;
                bool _3293;
                for (;;)
                {
                    _3292 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                    _3293 = _3292 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3293)
                    {
                        frontier_phi_72_pred = _3282;
                        frontier_phi_72_pred_1 = _3281;
                        frontier_phi_72_pred_2 = _3280;
                        frontier_phi_72_pred_3 = _3279;
                        frontier_phi_72_pred_4 = _3278;
                        frontier_phi_72_pred_5 = _3277;
                    }
                    else
                    {
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3488 = _3277;
                        float _3489 = _3278;
                        float _3490 = _3279;
                        float _3491 = _3280;
                        float _3492 = _3281;
                        float _3493 = _3282;
                        uint _3494 = _3292;
                        uint _3495;
                        vec4 _3520;
                        float _3521;
                        vec4 _3536;
                        vec3 _3548;
                        vec4 _3563;
                        vec4 _3578;
                        float _3624;
                        bool _3625;
                        for (;;)
                        {
                            uint _3505 = ((_3283 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3494));
                            _3495 = (_3494 + 4294967295u) & _3494;
                            uint _3507 = _3505 * 40u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3521 = _3520.w;
                            uint _3523 = (_3505 * 40u) + 4u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3505 * 40u) + 8u;
                            _3548 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x));
                            uint _3550 = (_3505 * 40u) + 16u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3505 * 40u) + 20u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3505 * 40u) + 24u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3599 = (_3505 * 40u) + 28u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3624 = fma(_2006, _3612.z, fma(_2005, _3612.y, _3612.x * _2004)) + _3612.w;
                            _3625 = !((fma(_2006, _3593.z, fma(_2005, _3593.y, _3593.x * _2004)) + _3593.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3625)
                            {
                                float _3652 = _3520.x - _2004;
                                float _3653 = _3520.y - _2005;
                                float _3654 = _3520.z - _2006;
                                float _3655 = dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654));
                                float _3658 = inversesqrt(_3655);
                                float _3659 = _3658 * _3652;
                                float _3660 = _3658 * _3653;
                                float _3661 = _3658 * _3654;
                                float _3665 = 1.0 - (_3655 / (_3521 * _3521));
                                float _4816 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3670 = sqrt(_3655) * _3536.w;
                                float _3672 = 1.39999997615814208984375 / (_3670 + 1.39999997615814208984375);
                                float _3673 = _3672 * _3672;
                                float _3676 = ((1.0 - _3673) * dot(vec3(_3659, _3660, _3661), vec3(_870, _873, _876))) + _3673;
                                float _3679 = _3670 * _3670;
                                float _3683 = (fma(_2006, _3563.z, fma(_2005, _3563.y, _3563.x * _2004)) + _3563.w) / _3624;
                                float _3684 = (fma(_2006, _3578.z, fma(_2005, _3578.y, _3578.x * _2004)) + _3578.w) / _3624;
                                float _3688 = 1.0 - dot(vec2(_3683, _3684), vec2(_3683, _3684));
                                float _4832 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3690 = _3689 * (((isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0))) * _3666) / ((_3679 * 0.699999988079071044921875) + 1.0));
                                float _3702 = exp2(log2(1.0 / ((_3679 * 3.5) + 5.0)) * 0.25);
                                float _3703 = 1.0 - _945;
                                float _3710 = sqrt(1.0 - ((1.0 - (_3703 * _3703)) * (1.0 - (_3702 * _3702))));
                                float _3711 = _3710 * _3710;
                                float _3712 = _3711 * _3711;
                                float _3713 = _3659 - _3164;
                                float _3714 = _3660 - _3165;
                                float _3715 = _3661 - _3166;
                                float _3719 = inversesqrt(dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715)));
                                float _3723 = dot(vec3(_870, _873, _876), vec3((-0.0) - _3164, (-0.0) - _3165, (-0.0) - _3166));
                                float _4843 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3727 = dot(vec3(_870, _873, _876), vec3(_3719 * _3713, _3719 * _3714, _3719 * _3715));
                                float _4854 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3734 = ((_3730 * _3730) * (_3712 + (-1.0))) + 1.0;
                                float _3735 = _3672 * _3711;
                                float _3736 = _3735 * _3735;
                                float _3742 = ((1.0 - _3736) * dot(vec3(_870, _873, _876), vec3(_3659, _3660, _3661))) + _3736;
                                float _4865 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3744 = 1.0 - _3711;
                                float _3754 = (0.5 / (((_3743 * ((_3726 * _3744) + _3711)) + 9.9999999392252902907785028219223e-09) + (((_3743 * _3744) + _3711) * _3726))) * _3743;
                                float _4876 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3764 = (_3689 * _3666) * (((_3712 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3734 * _3734) * ((_3679 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3690 * _3536.y;
                                frontier_phi_78_pred_1 = _3690 * _3536.x;
                                frontier_phi_78_pred_2 = _3764 * _3548.z;
                                frontier_phi_78_pred_3 = _3764 * _3548.y;
                                frontier_phi_78_pred_4 = _3764 * _3548.x;
                                frontier_phi_78_pred_5 = _3690 * _3536.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_78_pred;
                            _3771 = frontier_phi_78_pred_1;
                            _3770 = frontier_phi_78_pred_2;
                            _3769 = frontier_phi_78_pred_3;
                            _3768 = frontier_phi_78_pred_4;
                            _3773 = frontier_phi_78_pred_5;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            if (_3495 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3495;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3480;
                        frontier_phi_72_pred_1 = _3479;
                        frontier_phi_72_pred_2 = _3478;
                        frontier_phi_72_pred_3 = _3477;
                        frontier_phi_72_pred_4 = _3476;
                        frontier_phi_72_pred_5 = _3475;
                    }
                    _3149 = frontier_phi_72_pred;
                    _3147 = frontier_phi_72_pred_1;
                    _3145 = frontier_phi_72_pred_2;
                    _3143 = frontier_phi_72_pred_3;
                    _3141 = frontier_phi_72_pred_4;
                    _3139 = frontier_phi_72_pred_5;
                    uint _3284 = _3283 + 1u;
                    if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3277 = _3139;
                        _3278 = _3141;
                        _3279 = _3143;
                        _3280 = _3145;
                        _3281 = _3147;
                        _3282 = _3149;
                        _3283 = _3284;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3149;
                frontier_phi_60_61_ladder_1 = _3147;
                frontier_phi_60_61_ladder_2 = _3143;
                frontier_phi_60_61_ladder_3 = _3141;
                frontier_phi_60_61_ladder_4 = _3139;
                frontier_phi_60_61_ladder_5 = _3145;
            }
            else
            {
                frontier_phi_60_61_ladder = _3035;
                frontier_phi_60_61_ladder_1 = _3033;
                frontier_phi_60_61_ladder_2 = _3029;
                frontier_phi_60_61_ladder_3 = _3027;
                frontier_phi_60_61_ladder_4 = _3025;
                frontier_phi_60_61_ladder_5 = _3031;
            }
            _3138 = frontier_phi_60_61_ladder_4;
            _3140 = frontier_phi_60_61_ladder_3;
            _3142 = frontier_phi_60_61_ladder_2;
            _3144 = frontier_phi_60_61_ladder_5;
            _3146 = frontier_phi_60_61_ladder_1;
            _3148 = frontier_phi_60_61_ladder;
        }
        float _3153 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2958 = (_3153 * _3144) + _2470;
        _2960 = (_3153 * _3146) + _2472;
        _2962 = (_3153 * _3148) + _2474;
        _2964 = ((_3138 * _913) * _3153) + _2808;
        _2966 = ((_3140 * _915) * _3153) + _2810;
        _2968 = ((_3142 * _916) * _3153) + _2812;
    }
    else
    {
        _2958 = _2470;
        _2960 = _2472;
        _2962 = _2474;
        _2964 = _2808;
        _2966 = _2810;
        _2968 = _2812;
    }
    float _4892 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4903 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4914 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    uint _2988 = _255 + 6u;
    float _2996 = _851 / cbSceneParam._m0[86u].x;
    float _2997 = _852 / cbSceneParam._m0[86u].y;
    vec4 _3011 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3013 = _3011.x;
    float _3014 = _3011.y;
    float _3015 = _3011.z;
    float _3016 = _3011.w;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _3050 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _3051 = _3050 / _786;
        float _3062 = _3051 * _836;
        float _3063 = _837 * _3051;
        float _3064 = (-0.0) - _3063;
        float _3066 = _3051 * _838;
        float _3068 = (cbSceneParam._m0[77u].w * _3064) / _3050;
        float _3069 = _3068 + cbSceneParam._m0[79u].w;
        float _3070 = cbSceneParam._m0[79u].w - _3063;
        float _3076 = sqrt(((_3062 * _3062) + (_3063 * _3063)) + (_3066 * _3066));
        float _3079 = (1.0 - (cbSceneParam._m0[77u].w / _3050)) * _3076;
        float _3084 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3086 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3239;
        if (abs((_3064 - _3068) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3239 = ((((_3069 > 0.0) ? exp2(_3084 * _3069) : (2.0 - exp2(_3086 * _3069))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3079;
        }
        else
        {
            float _3199 = 1.0 / cbSceneParam._m0[80u].x;
            float _3200 = isnan(_3070) ? _3069 : (isnan(_3069) ? _3070 : max(_3069, _3070));
            float _3201 = isnan(_3070) ? _3069 : (isnan(_3069) ? _3070 : min(_3069, _3070));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            _3239 = ((abs(_3076 / _3064) * cbSceneParam._m0[80u].y) * ((((_3210 - _3211) * 2.0) - ((exp2(_3084 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0)))) - exp2(_3084 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))))) * _3199)) - ((exp2(_3086 * _3210) - exp2(_3086 * _3211)) * _3199))) + (_3079 * cbSceneParam._m0[80u].z);
        }
        vec4 _3241 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, 1.0), 0.0);
        float _3250 = exp2((_3239 * (-1.44269502162933349609375)) * (1.0 - _3241.w));
        float _3251 = log2(_3250);
        float _3267 = log2(_3016);
        _3088 = (exp2(_3267 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].x)) * _3241.x) / cbSceneParam._m0[78u].x)) + _3013;
        _3090 = (exp2(_3267 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].y)) * _3241.y) / cbSceneParam._m0[78u].y)) + _3014;
        _3092 = (exp2(_3267 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].z)) * _3241.z) / cbSceneParam._m0[78u].z)) + _3015;
        _3094 = _3250 * _3016;
    }
    else
    {
        _3088 = _3013;
        _3090 = _3014;
        _3092 = _3015;
        _3094 = _3016;
    }
    float _3106 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3107 = _3106 == 3.0;
    float _3108 = log2(_3094);
    float _3115 = exp2(_3108 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2958 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _929))) + ((_2964 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1735)) * cbPerFrame._m0[3u].x));
    float _3116 = exp2(_3108 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2960 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _929))) + ((_2966 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1735)) * cbPerFrame._m0[3u].x));
    float _3117 = exp2(_3108 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2962 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _929))) + ((_2968 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1735)) * cbPerFrame._m0[3u].x));
    float _3126 = (_3106 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3126 * (_3107 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3088)));
    SV_Target.y = _3126 * (_3107 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.z = _3126 * (_3107 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.w = cbInstanceData._m0[_2988].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2988].w;
}


