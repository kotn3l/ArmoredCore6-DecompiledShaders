#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1353;
float _3734;
float _3735;
float _3736;
float _3737;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].y) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3746 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _400 = (_393 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _401 = (_393 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _402 = (_393 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].y) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3757 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _516 = ((_488.x - _507) * _393) + _507;
    float _517 = ((_488.y - _508) * _393) + _508;
    float _518 = ((_488.z - _509) * _393) + _509;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _543 = ((_530.z - _518) * _466) + _518;
    float _546 = ((((_530.x - _516) * _466) + _516) * 2.0) + (-1.0);
    float _548 = ((((_530.y - _517) * _466) + _517) * 2.0) + (-1.0);
    float _549 = dot(vec2(_546, _548), vec2(_546, _548));
    float _3768 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))));
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _580 = (((_568.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _546;
    float _581 = (((_568.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _548;
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _595 = _593.x;
    float _596 = 1.0 - _595;
    float _624 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_595 - _596) * cbMtdParam._m0[24u].w) + _596) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3779 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _633 = ((((cbMtdParam._m0[10u].x - _473) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _625) + _473;
    float _634 = ((((cbMtdParam._m0[10u].y - _474) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _625) + _474;
    float _635 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _475)) * _625) + _475;
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _663 = _661.x;
    float _681 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _663) * _393) + _663;
    float _699 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _681) * _466) + _681;
    float _703 = ((_647.x - _699) * cbMtdParam._m0[19u].z) + _699;
    float _705 = _703 - (_703 * _625);
    float _709 = (cbMtdParam._m0[19u].w * (_568.z - _543)) + _543;
    float _713 = ((cbMtdParam._m0[23u].y - _709) * _625) + _709;
    vec4 _732 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _738 = (_732.x * 2.0) + (-1.0);
    float _739 = (_732.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _3790 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _756 = (_625 * (((cbMtdParam._m0[22u].z * _580) - _580) + _738)) + _580;
    float _757 = (_625 * (((cbMtdParam._m0[22u].z * _581) - _581) + _739)) + _581;
    float _758 = (_625 * (sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _554)) + _554;
    float _760 = cbMtdParam._m0[22u].x + _568.w;
    float _763 = fma(_758, _242 * NORMAL.x, fma(_757, _249 * TANGENT.x, (_235 * _227) * _756));
    float _766 = fma(_758, _242 * NORMAL.y, fma(_757, _249 * TANGENT.y, (_235 * _228) * _756));
    float _769 = fma(_758, _242 * NORMAL.z, fma(_757, _249 * TANGENT.z, (_235 * _229) * _756));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    float _774 = _773 * _763;
    float _775 = _773 * _766;
    float _776 = _773 * _769;
    float _3801 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _777 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3823 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3834 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3845 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3856 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _782 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _796 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _846 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _836);
    float _847 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _836);
    float _848 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _836);
    float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
    float _853 = _846 * _852;
    float _854 = _847 * _852;
    float _855 = _848 * _852;
    vec4 _860 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _862 = _860.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1034 = sqrt(((_846 * _846) + (_847 * _847)) + (_848 * _848));
        float _1040 = (cbMatDynParam._m0[5u].x * _1034) + cbMatDynParam._m0[5u].y;
        float _3867 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1045 = (cbMatDynParam._m0[5u].z * _1034) + cbMatDynParam._m0[5u].w;
        float _3878 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) - _1041)) + _1041) < ((_862 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _892 = fma(_776, cbSceneParam._m0[5u].z, fma(_775, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _774));
    float _895 = fma(_776, cbSceneParam._m0[6u].z, fma(_775, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _774));
    float _898 = fma(_776, cbSceneParam._m0[7u].z, fma(_775, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _774));
    uint _911 = _255 + 9u;
    uint _912 = _911 + uint(cbMatDynParam._m0[0u].w);
    float _918 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_912].x;
    float _919 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_912].y;
    float _920 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_912].z;
    float _3889 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _924 = 1.0 - _782;
    float _925 = _921 * _924;
    float _926 = _922 * _924;
    float _927 = _923 * _924;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _782;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _782;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _782;
    float _935 = _932 + 0.039999999105930328369140625;
    float _937 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    vec4 _947 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _951 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * TEXCOORD_5.w) * _947.x;
    float _952 = dot(vec3(_774, _775, _776), vec3(_853, _854, _855));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _774) - _853;
    float _960 = (_955 * _775) - _854;
    float _961 = (_955 * _776) - _855;
    float _965 = abs(dot(vec3(_853, _854, _855), vec3(_774, _775, _776)));
    float _3922 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_777);
    float _980 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _986 = (1.0 - _980) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _987 = _980 * _967;
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1023, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015));
        float _1081 = fma(_1023, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015));
        float _1085 = fma(_1023, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015));
        float _1110 = _1015 + _774;
        float _1111 = _1019 + _775;
        float _1112 = _1023 + _776;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1077;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1081;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1085;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_774, _775, _776), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3970 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_774, _775, _776), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4003 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_774, _775, _776), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4036 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1394 = fma(_1023, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015));
        float _1398 = fma(_1023, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015));
        float _1402 = fma(_1023, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015));
        float _1425 = _1015 + _774;
        float _1426 = _1019 + _775;
        float _1427 = _1023 + _776;
        float _1437 = fma(_1427, cbModelParam._m0[30u].z, fma(_1426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425)) - _1394;
        float _1438 = fma(_1427, cbModelParam._m0[31u].z, fma(_1426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425)) - _1398;
        float _1439 = fma(_1427, cbModelParam._m0[32u].z, fma(_1426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425)) - _1402;
        float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
        float _1456 = ((_1443 * _1437) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1394 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1443 * _1438) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1398 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1443 * _1439) / cbModelParam._m0[35u].z) + ((((((_1402 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        float _1493 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1460.x + (-0.5));
        float _1495 = _1493 * (_1460.y + (-0.5));
        float _1496 = _1493 * (_1460.z + (-0.5));
        float _1503 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1467.x + (-0.5));
        float _1505 = _1503 * (_1467.y + (-0.5));
        float _1506 = _1503 * (_1467.z + (-0.5));
        float _1513 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1474.x + (-0.5));
        float _1515 = _1513 * (_1474.y + (-0.5));
        float _1516 = _1513 * (_1474.z + (-0.5));
        float _1523 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1481.x + (-0.5));
        float _1525 = _1523 * (_1481.y + (-0.5));
        float _1526 = _1523 * (_1481.z + (-0.5));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1494 * 0.5;
        float _1531 = _1504 * 0.5;
        float _1532 = _1514 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_774, _775, _776), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4099 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1557 + 1.0))) + _1562) * _1527;
        float _1572 = _1495 * 0.5;
        float _1573 = _1505 * 0.5;
        float _1574 = _1515 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_774, _775, _776), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4132 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1599 + 1.0))) + _1604) * _1528;
        float _1614 = _1496 * 0.5;
        float _1615 = _1506 * 0.5;
        float _1616 = _1516 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_774, _775, _776), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4165 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1641 + 1.0))) + _1646) * _1529;
        _1663 = _1496;
        _1664 = _1495;
        _1665 = _1494;
        _1666 = _1506;
        _1667 = _1505;
        _1668 = _1504;
        _1669 = _1516;
        _1670 = _1515;
        _1671 = _1514;
        _1672 = _1529;
        _1673 = _1528;
        _1674 = _1527;
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1353;
        _1664 = _1353;
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = _1353;
        _1673 = _1353;
        _1674 = _1353;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1365)) + _1365;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1366)) + _1366;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1367)) + _1367;
    float _1710 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1687));
    float _1731 = _959 * 0.5;
    float _1732 = _960 * 0.5;
    float _1733 = _961 * 0.5;
    float _1734 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1737 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1740 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1774;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1747 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1751 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1755 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1762 = dot(vec4(cbModelParam._m0[39u]), vec4(_1731, _1732, _1733, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1785;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1776 = dot(vec4(cbModelParam._m0[40u]), vec4(_1731, _1732, _1733, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1789 = (_1785 * cbModelParam._m0[1u].x) + (_1774 * (1.0 - cbModelParam._m0[1u].x));
    float _1799 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _777);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1799 : min(cbModelParam._m0[25u].z, _1799));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1023, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1023, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1023, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1863 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1866 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1894 = frontier_phi_17_15_ladder;
        }
        float _2097;
        if (_1863 > 0.0)
        {
            _2097 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2097 = frontier_phi_26_22_ladder;
        }
        float _2351;
        if (_1866 > 0.0)
        {
            _2351 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2351 = frontier_phi_38_33_ladder;
        }
        float _2353 = isnan(_2097) ? _1894 : (isnan(_1894) ? _2097 : min(_1894, _2097));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1860) + _1849;
        float _2359 = (_2354 * _1863) + _1853;
        float _2360 = (_2354 * _1866) + _1857;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2361;
        float _2365 = _2361 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 > _2365) || ((_2359 < _2363) || ((_2358 < _2363) || (_2358 > _2365))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2360, cbModelParam._m0[9u].z, fma(_2359, cbModelParam._m0[9u].y, _2358 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2360, cbModelParam._m0[10u].z, fma(_2359, cbModelParam._m0[10u].y, _2358 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2360, cbModelParam._m0[11u].z, fma(_2359, cbModelParam._m0[11u].y, _2358 * cbModelParam._m0[11u].x))), _1800);
            frontier_phi_16_38_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_16_38_ladder_2;
        _1884 = frontier_phi_16_38_ladder_1;
        _1886 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1800);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _777);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1023, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1023, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1023, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1959 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1962 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2102;
        if (_1956 > 0.0)
        {
            _2102 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2102 = frontier_phi_28_24_ladder;
        }
        float _2378;
        if (_1959 > 0.0)
        {
            _2378 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2378 = frontier_phi_40_35_ladder;
        }
        float _2591;
        if (_1962 > 0.0)
        {
            _2591 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2591 = frontier_phi_49_46_ladder;
        }
        float _2593 = isnan(_2378) ? _2102 : (isnan(_2102) ? _2378 : min(_2102, _2378));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _1956) + _1945;
        float _2599 = (_2594 * _1959) + _1949;
        float _2600 = (_2594 * _1962) + _1953;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2602 = (-1.0) - _2601;
        float _2604 = _2601 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2600 > _2604) || ((_2600 < _2602) || ((_2599 > _2604) || ((_2599 < _2602) || ((_2598 < _2602) || (_2598 > _2604))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2600, cbModelParam._m0[17u].z, fma(_2599, cbModelParam._m0[17u].y, _2598 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2600, cbModelParam._m0[18u].z, fma(_2599, cbModelParam._m0[18u].y, _2598 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2600, cbModelParam._m0[19u].z, fma(_2599, cbModelParam._m0[19u].y, _2598 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_25_49_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_25_49_ladder_2;
        _1983 = frontier_phi_25_49_ladder_1;
        _1985 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1891);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1998 = (((_986 * _935) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1981 - _1882)) + _1882);
    float _2000 = (((_986 * _937) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1983 - _1884)) + _1884);
    float _2002 = (((_986 * _938) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2000, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2000, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2000, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    uvec4 _2021 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2023 = _2021.x * 14u;
    uint _2024 = _2023 + 13u;
    float _2031 = _951 + (-1.0);
    float _2036 = (cbLight._m0[_2024].x * _2031) + 1.0;
    float _2037 = (cbLight._m0[_2024].y * _2031) + 1.0;
    float _2038 = (cbLight._m0[_2024].z * _2031) + 1.0;
    float _2039 = (cbLight._m0[_2024].w * _2031) + 1.0;
    uint _2040 = _2023 + 5u;
    float _2046 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2050 = _2023 + 4u;
    float _2056 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2060 = _2023 | 1u;
    float _2071 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_774, _775, _776));
    float _2074 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_774, _775, _776));
    float _4301 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _4312 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2079 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2081 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * 0.3183098733425140380859375;
    float _2088 = ((cbLight._m0[_2040].x * _2046) * _2081) + ((cbLight._m0[_2050].x * _2056) * _2079);
    float _2089 = ((_2046 * cbLight._m0[_2040].y) * _2081) + ((_2056 * cbLight._m0[_2050].y) * _2079);
    float _2090 = ((_2046 * cbLight._m0[_2040].z) * _2081) + ((_2056 * cbLight._m0[_2050].z) * _2079);
    uvec4 _2094 = floatBitsToUint(cbLight._m0[_2023 + 12u]);
    bool _2096 = _2094.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2096)
    {
        _2107 = _2088;
        _2109 = _2089;
        _2111 = _2090;
    }
    else
    {
        uint _2115 = _2023 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_2023 + 2u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4323 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2134 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _2088;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _2089;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _2090;
    }
    bool _2114 = _2094.y == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2114)
    {
        _2152 = _2107;
        _2154 = _2109;
        _2156 = _2111;
    }
    else
    {
        uint _2322 = _2023 + 7u;
        float _2338 = (dot(vec3(cbLight._m0[_2023 + 3u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4339 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2341 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2152 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2107;
        _2154 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2109;
        _2156 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2111;
    }
    uint _2159 = _2023 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _777) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2023].x + _853;
    float _2175 = cbLight._m0[_2023].y + _854;
    float _2176 = cbLight._m0[_2023].z + _855;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2023].xyz));
    float _4355 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2188 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2189 = dot(vec3(_774, _775, _776), vec3(_2181, _2182, _2183));
    float _4377 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2181, _2182, _2183));
    float _4388 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
    float _2210 = 0.959999978542327880859375 - _932;
    float _2212 = 0.959999978542327880859375 - _933;
    float _2213 = 0.959999978542327880859375 - _934;
    float _2220 = 1.0 - _2173;
    float _2231 = (0.5 / (((_2188 * ((_2187 * _2220) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2220) + _2173) * _2187))) * _2187;
    float _4399 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2244 = _2023 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _777) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_2060].x + _853;
    float _2258 = cbLight._m0[_2060].y + _854;
    float _2259 = cbLight._m0[_2060].z + _855;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2060].xyz));
    float _4410 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2271 = dot(vec3(_774, _775, _776), vec3(_2264, _2265, _2266));
    float _4421 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2264, _2265, _2266));
    float _4432 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2297 = 1.0 - _2256;
    float _2307 = (0.5 / (((_2188 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2297) + _2256) * _2270))) * _2270;
    float _4443 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2309 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2319 = (((((_2290 * _2210) + _935) * cbLight._m0[_2244].x) * _2309) * _2046) + (((((_2209 * _2210) + _935) * cbLight._m0[_2159].x) * _2233) * _2056);
    float _2320 = (((((_2290 * _2212) + _937) * cbLight._m0[_2244].y) * _2309) * _2046) + (((((_2209 * _2212) + _937) * cbLight._m0[_2159].y) * _2233) * _2056);
    float _2321 = (((((_2290 * _2213) + _938) * cbLight._m0[_2244].z) * _2309) * _2046) + (((((_2209 * _2213) + _938) * cbLight._m0[_2159].z) * _2233) * _2056);
    float _2383;
    float _2385;
    float _2387;
    if (_2096)
    {
        _2383 = _2319;
        _2385 = _2320;
        _2387 = _2321;
    }
    else
    {
        uint _2389 = _2023 + 2u;
        uint _2393 = _2023 + 10u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _777) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _853;
        float _2410 = cbLight._m0[_2389].y + _854;
        float _2411 = cbLight._m0[_2389].z + _855;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2389].xyz));
        float _4454 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2423 = dot(vec3(_774, _775, _776), vec3(_2416, _2417, _2418));
        float _4465 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4476 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2188 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2449) + _2408) * _2422))) * _2422;
        float _4487 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2383 = (((((_2442 * _2210) + _935) * cbLight._m0[_2393].x) * _2461) * _2462) + _2319;
        _2385 = (((((_2442 * _2212) + _937) * cbLight._m0[_2393].y) * _2461) * _2462) + _2320;
        _2387 = (((((_2442 * _2213) + _938) * cbLight._m0[_2393].z) * _2461) * _2462) + _2321;
    }
    float _2497;
    float _2499;
    float _2501;
    if (_2114)
    {
        _2497 = _2383;
        _2499 = _2385;
        _2501 = _2387;
    }
    else
    {
        uint _2508 = _2023 + 3u;
        uint _2512 = _2023 + 11u;
        float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _777) * 0.949999988079071044921875);
        float _2527 = _2526 * _2526;
        float _2528 = cbLight._m0[_2508].x + _853;
        float _2529 = cbLight._m0[_2508].y + _854;
        float _2530 = cbLight._m0[_2508].z + _855;
        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
        float _2535 = _2534 * _2528;
        float _2536 = _2534 * _2529;
        float _2537 = _2534 * _2530;
        float _2538 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2508].xyz));
        float _4503 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2542 = dot(vec3(_774, _775, _776), vec3(_2535, _2536, _2537));
        float _4514 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2546 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2535, _2536, _2537));
        float _4525 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2550 = _2527 * _2527;
        float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
        float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2568 = 1.0 - _2527;
        float _2578 = (0.5 / (((_2188 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2568) + _2527) * _2541))) * _2541;
        float _4536 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2580 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
        float _2581 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2497 = (((((_2561 * _2210) + _935) * cbLight._m0[_2512].x) * _2580) * _2581) + _2383;
        _2499 = (((((_2561 * _2212) + _937) * cbLight._m0[_2512].y) * _2580) * _2581) + _2385;
        _2501 = (((((_2561 * _2213) + _938) * cbLight._m0[_2512].z) * _2580) * _2581) + _2387;
    }
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_2021.y == 0u)
    {
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2656;
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2656;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2656;
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.x;
        uint _2683 = uint((float(_2671.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2672))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2672)));
        float _2693 = (log2(_2659 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2694 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        uint _2697 = uint(isnan(14.0) ? _2694 : (isnan(_2694) ? 14.0 : min(_2694, 14.0)));
        uvec4 _2702 = texelFetch(g_lightClusterGridBuffer, int(((_2697 << 2u) + (_2683 << 6u)) >> 2u));
        uint _2703 = _2702.x;
        uint _2704 = _2671.z;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((((1u << ((_2704 >> 4u) & 15u)) + 4294967295u) & _2703) == 0u) || ((_2704 & 240u) == 0u))
        {
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
        }
        else
        {
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            uint _2963 = 0u;
            uint _2972;
            bool _2973;
            for (;;)
            {
                _2972 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_2963 << 2u)) >> 2u)).x;
                _2973 = _2972 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2973)
                {
                    frontier_phi_66_pred = _2957;
                    frontier_phi_66_pred_1 = _2962;
                    frontier_phi_66_pred_2 = _2961;
                    frontier_phi_66_pred_3 = _2960;
                    frontier_phi_66_pred_4 = _2959;
                    frontier_phi_66_pred_5 = _2958;
                }
                else
                {
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    uint _3108;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2972;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    for (;;)
                    {
                        uint _3112 = uint(findLSB(_3108)) + (_2963 << 5u);
                        uint _3109 = (_3108 + 4294967295u) & _3108;
                        uint _3114 = _3112 * 48u;
                        vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 3u)).x));
                        uint _3134 = (_3112 * 48u) + 4u;
                        vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 3u)).x));
                        uint _3153 = (_3112 * 48u) + 8u;
                        vec3 _3164 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x));
                        float _3168 = _3128.x - _2657;
                        float _3169 = _3128.y - _2658;
                        float _3170 = _3128.z - _2659;
                        float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                        float _3174 = inversesqrt(_3171);
                        float _3175 = _3174 * _3168;
                        float _3176 = _3174 * _3169;
                        float _3177 = _3174 * _3170;
                        float _3178 = dot(vec3(_892, _895, _898), vec3(_3175, _3176, _3177));
                        float _3183 = 1.0 - (_3171 * _3128.w);
                        float _4562 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3184 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3185 = sqrt(_3171) * _3147.w;
                        float _3188 = 1.39999997615814208984375 / (_3185 + 1.39999997615814208984375);
                        float _3189 = _3188 * _3188;
                        float _3192 = ((1.0 - _3189) * _3178) + _3189;
                        float _3195 = _3185 * _3185;
                        float _3199 = ((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3184) / ((_3195 * 0.699999988079071044921875) + 1.0);
                        float _3203 = (-0.0) - _2657;
                        float _3204 = (-0.0) - _2658;
                        float _3205 = (-0.0) - _2659;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3220 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                        float _3221 = 1.0 - _967;
                        float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                        float _3229 = _3228 * _3228;
                        float _3230 = _3229 * _3229;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3241 = dot(vec3(_892, _895, _898), vec3(_3210, _3211, _3212));
                        float _4578 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3245 = dot(vec3(_892, _895, _898), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                        float _4589 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                        float _3253 = _3188 * _3229;
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3178) + _3254;
                        float _4600 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3259 = 1.0 - _3229;
                        float _3269 = (0.5 / (((_3258 * ((_3244 * _3259) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3229) * _3244))) * _3258;
                        float _4611 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3280 = (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3252 * _3252) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125))) * _3184;
                        _3032 = (_3199 * _3147.x) + _3105;
                        _3033 = (_3199 * _3147.y) + _3106;
                        _3034 = (_3199 * _3147.z) + _3107;
                        _3029 = (_3280 * _3164.x) + _3102;
                        _3030 = (_3280 * _3164.y) + _3103;
                        _3031 = (_3280 * _3164.z) + _3104;
                        if (_3109 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3109;
                        }
                    }
                    frontier_phi_66_pred = _3029;
                    frontier_phi_66_pred_1 = _3034;
                    frontier_phi_66_pred_2 = _3033;
                    frontier_phi_66_pred_3 = _3032;
                    frontier_phi_66_pred_4 = _3031;
                    frontier_phi_66_pred_5 = _3030;
                }
                _2805 = frontier_phi_66_pred;
                _2815 = frontier_phi_66_pred_1;
                _2813 = frontier_phi_66_pred_2;
                _2811 = frontier_phi_66_pred_3;
                _2809 = frontier_phi_66_pred_4;
                _2807 = frontier_phi_66_pred_5;
                uint _2964 = _2963 + 1u;
                if (_2964 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2957 = _2805;
                    _2958 = _2807;
                    _2959 = _2809;
                    _2960 = _2811;
                    _2961 = _2813;
                    _2962 = _2815;
                    _2963 = _2964;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
        }
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.z;
        uint _2821 = (_2819 >> 8u) & 15u;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((4294967295u << _2821) & _2703) == 0u)
        {
            _2925 = _2804;
            _2927 = _2806;
            _2929 = _2808;
            _2931 = _2810;
            _2933 = _2812;
            _2935 = _2814;
        }
        else
        {
            float _2950 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
            float _2951 = _2950 * _2657;
            float _2952 = _2950 * _2658;
            float _2953 = _2950 * _2659;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2821 < ((_2819 >> 12u) & 15u))
            {
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _3085 = _2804;
                float _3086 = _2806;
                float _3087 = _2808;
                float _3088 = _2810;
                float _3089 = _2812;
                float _3090 = _2814;
                uint _3091 = _2821;
                uint _3100;
                bool _3101;
                for (;;)
                {
                    _3100 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_3091 << 2u)) >> 2u)).x;
                    _3101 = _3100 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3101)
                    {
                        frontier_phi_77_pred = _3090;
                        frontier_phi_77_pred_1 = _3089;
                        frontier_phi_77_pred_2 = _3088;
                        frontier_phi_77_pred_3 = _3087;
                        frontier_phi_77_pred_4 = _3086;
                        frontier_phi_77_pred_5 = _3085;
                    }
                    else
                    {
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        uint _3313 = _3100;
                        uint _3314;
                        vec4 _3339;
                        float _3340;
                        vec4 _3355;
                        vec3 _3367;
                        vec4 _3382;
                        vec4 _3397;
                        float _3443;
                        bool _3444;
                        for (;;)
                        {
                            uint _3324 = ((_3091 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3313));
                            _3314 = (_3313 + 4294967295u) & _3313;
                            uint _3326 = _3324 * 40u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3340 = _3339.w;
                            uint _3342 = (_3324 * 40u) + 4u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3324 * 40u) + 8u;
                            _3367 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x));
                            uint _3369 = (_3324 * 40u) + 16u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3324 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3324 * 40u) + 24u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3418 = (_3324 * 40u) + 28u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3443 = fma(_2659, _3431.z, fma(_2658, _3431.y, _3431.x * _2657)) + _3431.w;
                            _3444 = !((fma(_2659, _3412.z, fma(_2658, _3412.y, _3412.x * _2657)) + _3412.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3444)
                            {
                                float _3471 = _3339.x - _2657;
                                float _3472 = _3339.y - _2658;
                                float _3473 = _3339.z - _2659;
                                float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                                float _3477 = inversesqrt(_3474);
                                float _3478 = _3477 * _3471;
                                float _3479 = _3477 * _3472;
                                float _3480 = _3477 * _3473;
                                float _3484 = 1.0 - (_3474 / (_3340 * _3340));
                                float _4622 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3489 = sqrt(_3474) * _3355.w;
                                float _3491 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                                float _3492 = _3491 * _3491;
                                float _3495 = ((1.0 - _3492) * dot(vec3(_3478, _3479, _3480), vec3(_892, _895, _898))) + _3492;
                                float _3498 = _3489 * _3489;
                                float _3502 = (fma(_2659, _3382.z, fma(_2658, _3382.y, _3382.x * _2657)) + _3382.w) / _3443;
                                float _3503 = (fma(_2659, _3397.z, fma(_2658, _3397.y, _3397.x * _2657)) + _3397.w) / _3443;
                                float _3507 = 1.0 - dot(vec2(_3502, _3503), vec2(_3502, _3503));
                                float _4638 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3509 = _3508 * (((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3485) / ((_3498 * 0.699999988079071044921875) + 1.0));
                                float _3521 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                                float _3522 = 1.0 - _967;
                                float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                                float _3530 = _3529 * _3529;
                                float _3531 = _3530 * _3530;
                                float _3532 = _3478 - _2951;
                                float _3533 = _3479 - _2952;
                                float _3534 = _3480 - _2953;
                                float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                                float _3542 = dot(vec3(_892, _895, _898), vec3((-0.0) - _2951, (-0.0) - _2952, (-0.0) - _2953));
                                float _4649 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3546 = dot(vec3(_892, _895, _898), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                                float _4660 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                                float _3554 = _3491 * _3530;
                                float _3555 = _3554 * _3554;
                                float _3561 = ((1.0 - _3555) * dot(vec3(_892, _895, _898), vec3(_3478, _3479, _3480))) + _3555;
                                float _4671 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3563 = 1.0 - _3530;
                                float _3573 = (0.5 / (((_3562 * ((_3545 * _3563) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3530) * _3545))) * _3562;
                                float _4682 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3583 = (_3508 * _3485) * (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3553 * _3553) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3509 * _3355.y;
                                frontier_phi_83_pred_1 = _3509 * _3355.x;
                                frontier_phi_83_pred_2 = _3583 * _3367.z;
                                frontier_phi_83_pred_3 = _3583 * _3367.y;
                                frontier_phi_83_pred_4 = _3583 * _3367.x;
                                frontier_phi_83_pred_5 = _3509 * _3355.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3591 = frontier_phi_83_pred;
                            _3590 = frontier_phi_83_pred_1;
                            _3589 = frontier_phi_83_pred_2;
                            _3588 = frontier_phi_83_pred_3;
                            _3587 = frontier_phi_83_pred_4;
                            _3592 = frontier_phi_83_pred_5;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            if (_3314 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3314;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3299;
                        frontier_phi_77_pred_1 = _3298;
                        frontier_phi_77_pred_2 = _3297;
                        frontier_phi_77_pred_3 = _3296;
                        frontier_phi_77_pred_4 = _3295;
                        frontier_phi_77_pred_5 = _3294;
                    }
                    _2936 = frontier_phi_77_pred;
                    _2934 = frontier_phi_77_pred_1;
                    _2932 = frontier_phi_77_pred_2;
                    _2930 = frontier_phi_77_pred_3;
                    _2928 = frontier_phi_77_pred_4;
                    _2926 = frontier_phi_77_pred_5;
                    uint _3092 = _3091 + 1u;
                    if (_3092 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3085 = _2926;
                        _3086 = _2928;
                        _3087 = _2930;
                        _3088 = _2932;
                        _3089 = _2934;
                        _3090 = _2936;
                        _3091 = _3092;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2930;
                frontier_phi_58_59_ladder_1 = _2936;
                frontier_phi_58_59_ladder_2 = _2934;
                frontier_phi_58_59_ladder_3 = _2932;
                frontier_phi_58_59_ladder_4 = _2928;
                frontier_phi_58_59_ladder_5 = _2926;
            }
            else
            {
                frontier_phi_58_59_ladder = _2808;
                frontier_phi_58_59_ladder_1 = _2814;
                frontier_phi_58_59_ladder_2 = _2812;
                frontier_phi_58_59_ladder_3 = _2810;
                frontier_phi_58_59_ladder_4 = _2806;
                frontier_phi_58_59_ladder_5 = _2804;
            }
            _2925 = frontier_phi_58_59_ladder_5;
            _2927 = frontier_phi_58_59_ladder_4;
            _2929 = frontier_phi_58_59_ladder;
            _2931 = frontier_phi_58_59_ladder_3;
            _2933 = frontier_phi_58_59_ladder_2;
            _2935 = frontier_phi_58_59_ladder_1;
        }
        float _2940 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _2716 = (_2940 * _2931) + _2152;
        _2718 = (_2940 * _2933) + _2154;
        _2720 = (_2940 * _2935) + _2156;
        _2722 = ((_2925 * _935) * _2940) + _2497;
        _2724 = ((_2927 * _937) * _2940) + _2499;
        _2726 = ((_2929 * _938) * _2940) + _2501;
    }
    else
    {
        _2716 = _2152;
        _2718 = _2154;
        _2720 = _2156;
        _2722 = _2497;
        _2724 = _2499;
        _2726 = _2501;
    }
    float _4698 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _4709 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4720 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2743 = ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2716 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _951))) + ((_2722 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    float _2744 = ((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2718 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _951))) + ((_2724 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    float _2745 = ((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2720 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _951))) + ((_2726 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    uint _2746 = _255 + 6u;
    float _2754 = _873 / cbSceneParam._m0[86u].x;
    float _2755 = _874 / cbSceneParam._m0[86u].y;
    vec4 _2769 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, (log2((isnan(cbSceneParam._m0[77u].w) ? _796 : (isnan(_796) ? cbSceneParam._m0[77u].w : min(_796, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2771 = _2769.x;
    float _2772 = _2769.y;
    float _2773 = _2769.z;
    float _2774 = _2769.w;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_796 > cbSceneParam._m0[78u].w)
    {
        float _2829 = isnan(_796) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _796 : min(cbSceneParam._m0[80u].w, _796));
        float _2830 = _2829 / _796;
        float _2841 = _2830 * _846;
        float _2842 = _847 * _2830;
        float _2843 = (-0.0) - _2842;
        float _2845 = _2830 * _848;
        float _2847 = (cbSceneParam._m0[77u].w * _2843) / _2829;
        float _2848 = _2847 + cbSceneParam._m0[79u].w;
        float _2849 = cbSceneParam._m0[79u].w - _2842;
        float _2855 = sqrt(((_2841 * _2841) + (_2842 * _2842)) + (_2845 * _2845));
        float _2858 = (1.0 - (cbSceneParam._m0[77u].w / _2829)) * _2855;
        float _2863 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2865 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3042;
        if (abs((_2843 - _2847) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3042 = ((((_2848 > 0.0) ? exp2(_2863 * _2848) : (2.0 - exp2(_2865 * _2848))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2858;
        }
        else
        {
            float _2986 = 1.0 / cbSceneParam._m0[80u].x;
            float _2987 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : max(_2848, _2849));
            float _2988 = isnan(_2849) ? _2848 : (isnan(_2848) ? _2849 : min(_2848, _2849));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            _3042 = ((abs(_2855 / _2843) * cbSceneParam._m0[80u].y) * ((((_2997 - _2998) * 2.0) - ((exp2(_2863 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0)))) - exp2(_2863 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))))) * _2986)) - ((exp2(_2865 * _2997) - exp2(_2865 * _2998)) * _2986))) + (_2858 * cbSceneParam._m0[80u].z);
        }
        vec4 _3044 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, 1.0), 0.0);
        float _3053 = exp2((_3042 * (-1.44269502162933349609375)) * (1.0 - _3044.w));
        float _3054 = log2(_3053);
        float _3070 = log2(_2774);
        _2867 = (exp2(_3070 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].x)) * _3044.x) / cbSceneParam._m0[78u].x)) + _2771;
        _2869 = (exp2(_3070 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].y)) * _3044.y) / cbSceneParam._m0[78u].y)) + _2772;
        _2871 = (exp2(_3070 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].z)) * _3044.z) / cbSceneParam._m0[78u].z)) + _2773;
        _2873 = _3053 * _2774;
    }
    else
    {
        _2867 = _2771;
        _2869 = _2772;
        _2871 = _2773;
        _2873 = _2774;
    }
    bool _3080;
    vec4 _2883;
    vec4 _2905;
    float _2907;
    float _2911;
    float _2912;
    float _2913;
    float _2914;
    bool _2924;
    for (;;)
    {
        _2883 = cbMatDynParam._m0[0u];
        float _2885 = roundEven(_2883.y);
        bool _2886 = _2885 == 3.0;
        float _2887 = log2(_2873);
        float _2894 = exp2(_2887 * cbSceneParam._m0[78u].x) * _2743;
        float _2895 = exp2(_2887 * cbSceneParam._m0[78u].y) * _2744;
        float _2896 = exp2(_2887 * cbSceneParam._m0[78u].z) * _2745;
        float _2903 = _862 + (-0.5);
        _2905 = cbMtdParam._m0[1u];
        _2907 = _2905.y * _2903;
        float _2910 = (_2885 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2911 = _2910 * (_2886 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2867)));
        _2912 = _2910 * (_2886 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2869)));
        _2913 = _2910 * (_2886 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2871)));
        _2914 = _2903 * 0.999000012874603271484375;
        _2924 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2924)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2914) < 0.5)
            {
                _3080 = true;
                break;
            }
        }
        uint _3021 = _911 + uint(_2883.w);
        if ((cbInstanceData._m0[_3021].w < 1.0) && ((cbInstanceData._m0[_3021].w + _2914) < 0.5))
        {
            _3080 = true;
            break;
        }
        if ((_2907 + 1.0) < _2905.x)
        {
            _3080 = true;
            break;
        }
        _3080 = false;
        break;
    }
    float _3285;
    if (_3080)
    {
        discard_state = true;
        _3285 = 0.0;
    }
    else
    {
        _3285 = cbInstanceData._m0[_2746].w;
    }
    SV_Target.x = _2911;
    SV_Target.y = _2912;
    SV_Target.z = _2913;
    SV_Target.w = _3285;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2746].w;
    discard_exit();
}


