#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1488;
float _4149;
float _4150;
float _4151;
float _4152;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4161 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4172 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4183 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _410 = _408.x;
    float _422 = dot(vec4(_410, _408.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _439 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_410 - _422) * cbMtdParam._m0[24u].y) + _422) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4194 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _447 = (_440 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _448 = (_440 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _449 = (_440 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    float _453 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _447;
    float _456 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _448;
    float _459 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _449;
    float _466 = ((_447 - _453) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) + _453;
    float _467 = ((_448 - _456) * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) + _456;
    float _468 = ((_449 - _459) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) + _459;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _555 = _551.z;
    float _564 = ((_534.z - _555) * _440) + _555;
    float _567 = ((((_534.x - _553) * _440) + _553) * 2.0) + (-1.0);
    float _568 = ((((_534.y - _554) * _440) + _554) * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _4205 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))));
    float _577 = _567 + ((((_507.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _578 = _568 + ((((_507.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _581 = fma(_574, _258, fma(_578, _265, _577 * _251));
    float _584 = fma(_574, _259, fma(_578, _266, _577 * _252));
    float _587 = fma(_574, _260, fma(_578, _267, _577 * _253));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _635 = _633.x;
    float _636 = 1.0 - _635;
    float _640 = ((_635 - _636) * cbMtdParam._m0[24u].z) + _636;
    float _642 = (cbMtdParam._m0[19u].x + dot(vec4(_591 * _581, _591 * _584, _591 * _587, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_640 * cbMtdParam._m0[21u].z);
    float _4216 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _645 = (-0.0) - cbMtdParam._m0[24u].x;
    float _647 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
    float _655 = _643 - ((_643 * TEXCOORD_8.x) * _648);
    float _656 = _643 - ((_643 * TEXCOORD_8.y) * _648);
    float _657 = _643 - ((_643 * TEXCOORD_8.z) * _648);
    float _664 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _668 = ((isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : min(_664, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _676 = (_668 - (((_640 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _668))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4247 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _681 = ((_655 * ((_487.x * cbMtdParam._m0[18u].x) - _466)) * _677) + _466;
    float _682 = ((_656 * ((_487.y * cbMtdParam._m0[18u].y) - _467)) * _677) + _467;
    float _683 = ((_657 * ((_487.z * cbMtdParam._m0[18u].z) - _468)) * _677) + _468;
    vec4 _695 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _697 = _695.x;
    float _698 = 1.0 - _697;
    float _723 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_697 - _698) * cbMtdParam._m0[24u].w) + _698) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4258 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _724 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _732 = ((((cbMtdParam._m0[10u].x - _681) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _724) + _681;
    float _733 = ((((cbMtdParam._m0[10u].y - _682) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _724) + _682;
    float _734 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _683)) * _724) + _683;
    vec4 _760 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _762 = _760.x;
    float _780 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _762) * _440) + _762;
    float _784 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _780) * cbMtdParam._m0[19u].z) + _780;
    float _787 = _784 - ((_677 * _655) * _784);
    float _789 = _787 - (_787 * _724);
    float _794 = (((_507.z - _564) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _564;
    vec4 _808 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _815 = (_808.x * 2.0) + (-1.0);
    float _816 = (_808.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _4269 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _826 = (((_808.z - _794) * _655) * _677) + _794;
    float _829 = ((cbMtdParam._m0[23u].y - _826) * _724) + _826;
    vec4 _848 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _854 = (_848.x * 2.0) + (-1.0);
    float _855 = (_848.y * 2.0) + (-1.0);
    float _856 = dot(vec2(_854, _855), vec2(_854, _855));
    float _4280 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _876 = (((cbMtdParam._m0[21u].x * _577) + ((_815 - _577) * _655)) * _677) + _577;
    float _877 = (((cbMtdParam._m0[21u].x * _578) + ((_816 - _578) * _656)) * _677) + _578;
    float _878 = (((sqrt(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) - _574) * _657) * _677) + _574;
    float _889 = (((_854 - _876) + (_876 * cbMtdParam._m0[22u].z)) * _724) + _876;
    float _890 = (((_855 - _877) + (_877 * cbMtdParam._m0[22u].z)) * _724) + _877;
    float _891 = ((sqrt(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) - _878) * _724) + _878;
    float _895 = cbMtdParam._m0[22u].x + _607.w;
    float _898 = fma(_891, _258, fma(_890, _265, _889 * _251));
    float _901 = fma(_891, _259, fma(_890, _266, _889 * _252));
    float _904 = fma(_891, _260, fma(_890, _267, _889 * _253));
    float _908 = inversesqrt(dot(vec3(_898, _901, _904), vec3(_898, _901, _904)));
    float _909 = _908 * _898;
    float _910 = _908 * _901;
    float _911 = _908 * _904;
    float _4291 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _912 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4313 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4324 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4335 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4346 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _917 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _931 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _981 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _971);
    float _982 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _971);
    float _983 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _971);
    float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
    float _988 = _981 * _987;
    float _989 = _982 * _987;
    float _990 = _983 * _987;
    vec4 _995 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _997 = _995.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1169 = sqrt(((_981 * _981) + (_982 * _982)) + (_983 * _983));
        float _1175 = (cbMatDynParam._m0[5u].x * _1169) + cbMatDynParam._m0[5u].y;
        float _4357 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1180 = (cbMatDynParam._m0[5u].z * _1169) + cbMatDynParam._m0[5u].w;
        float _4368 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) - _1176)) + _1176) < ((_997 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1008 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1009 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1027 = fma(_911, cbSceneParam._m0[5u].z, fma(_910, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _909));
    float _1030 = fma(_911, cbSceneParam._m0[6u].z, fma(_910, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _909));
    float _1033 = fma(_911, cbSceneParam._m0[7u].z, fma(_910, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _909));
    uint _1046 = _289 + 9u;
    uint _1047 = _1046 + uint(cbMatDynParam._m0[0u].w);
    float _1053 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_1047].x;
    float _1054 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * cbInstanceData._m0[_1047].y;
    float _1055 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * cbInstanceData._m0[_1047].z;
    float _4379 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _4401 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _1059 = 1.0 - _917;
    float _1060 = _1056 * _1059;
    float _1061 = _1057 * _1059;
    float _1062 = _1058 * _1059;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _917;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _917;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _917;
    float _1070 = _1067 + 0.039999999105930328369140625;
    float _1072 = _1068 + 0.039999999105930328369140625;
    float _1073 = _1069 + 0.039999999105930328369140625;
    vec4 _1082 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1008, cbSceneParam._m0[86u].y * _1009));
    float _1086 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * TEXCOORD_5.w) * _1082.x;
    float _1087 = dot(vec3(_909, _910, _911), vec3(_988, _989, _990));
    float _1090 = _1087 * 2.0;
    float _1094 = (_1090 * _909) - _988;
    float _1095 = (_1090 * _910) - _989;
    float _1096 = (_1090 * _911) - _990;
    float _1100 = abs(dot(vec3(_988, _989, _990), vec3(_909, _910, _911)));
    float _4412 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1102 = sqrt(_912);
    float _1115 = exp2((_1102 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1102 * 3.0));
    float _1121 = (1.0 - _1115) * ((_1102 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1122 = _1115 * _1102;
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1487;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1212 = fma(_1158, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150));
        float _1216 = fma(_1158, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150));
        float _1220 = fma(_1158, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150));
        float _1245 = _1150 + _909;
        float _1246 = _1154 + _910;
        float _1247 = _1158 + _911;
        float _1257 = fma(_1247, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1245)) - _1212;
        float _1258 = fma(_1247, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1245)) - _1216;
        float _1259 = fma(_1247, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1245)) - _1220;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1212 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1216 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[34u].z) + ((((((_1220 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1315 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1281.x + (-0.5));
        float _1317 = _1315 * (_1281.y + (-0.5));
        float _1318 = _1315 * (_1281.z + (-0.5));
        float _1325 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1288.x + (-0.5));
        float _1327 = _1325 * (_1288.y + (-0.5));
        float _1328 = _1325 * (_1288.z + (-0.5));
        float _1335 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1295.x + (-0.5));
        float _1337 = _1335 * (_1295.y + (-0.5));
        float _1338 = _1335 * (_1295.z + (-0.5));
        float _1345 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1302.x + (-0.5));
        float _1347 = _1345 * (_1302.y + (-0.5));
        float _1348 = _1345 * (_1302.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1369 = (dot(vec3(_909, _910, _911), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1379 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4460 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1381 + 1.0))) + _1386) * _1349;
        float _1396 = _1317 * 0.5;
        float _1397 = _1327 * 0.5;
        float _1398 = _1337 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_909, _910, _911), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4493 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1423 + 1.0))) + _1428) * _1350;
        float _1438 = _1318 * 0.5;
        float _1439 = _1328 * 0.5;
        float _1440 = _1338 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_909, _910, _911), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4526 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1465 + 1.0))) + _1470) * _1351;
        _1487 = _1318;
        _1489 = _1317;
        _1490 = _1316;
        _1491 = _1328;
        _1492 = _1327;
        _1493 = _1326;
        _1494 = _1338;
        _1495 = _1337;
        _1496 = _1336;
        _1497 = _1351;
        _1498 = _1350;
        _1499 = _1349;
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1488;
        _1489 = _1488;
        _1490 = _1488;
        _1491 = _1488;
        _1492 = _1488;
        _1493 = _1488;
        _1494 = _1488;
        _1495 = _1488;
        _1496 = _1488;
        _1497 = _1488;
        _1498 = _1488;
        _1499 = _1488;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1530 = fma(_1158, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150));
        float _1534 = fma(_1158, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150));
        float _1538 = fma(_1158, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150));
        float _1561 = _1150 + _909;
        float _1562 = _1154 + _910;
        float _1563 = _1158 + _911;
        float _1573 = fma(_1563, cbModelParam._m0[30u].z, fma(_1562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1561)) - _1530;
        float _1574 = fma(_1563, cbModelParam._m0[31u].z, fma(_1562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1561)) - _1534;
        float _1575 = fma(_1563, cbModelParam._m0[32u].z, fma(_1562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1561)) - _1538;
        float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
        float _1592 = ((_1579 * _1573) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1530 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1593 = ((_1579 * _1574) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1534 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1579 * _1575) / cbModelParam._m0[35u].z) + ((((((_1538 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        float _1629 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1596.x + (-0.5));
        float _1631 = _1629 * (_1596.y + (-0.5));
        float _1632 = _1629 * (_1596.z + (-0.5));
        float _1639 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1603.x + (-0.5));
        float _1641 = _1639 * (_1603.y + (-0.5));
        float _1642 = _1639 * (_1603.z + (-0.5));
        float _1649 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1610.x + (-0.5));
        float _1651 = _1649 * (_1610.y + (-0.5));
        float _1652 = _1649 * (_1610.z + (-0.5));
        float _1659 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1617.x + (-0.5));
        float _1661 = _1659 * (_1617.y + (-0.5));
        float _1662 = _1659 * (_1617.z + (-0.5));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = _1630 * 0.5;
        float _1667 = _1640 * 0.5;
        float _1668 = _1650 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_909, _910, _911), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4567 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4578 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4589 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_1693 + 1.0))) + _1698) * _1663;
        float _1708 = _1631 * 0.5;
        float _1709 = _1641 * 0.5;
        float _1710 = _1651 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_909, _910, _911), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4600 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4611 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4622 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_1735 + 1.0))) + _1740) * _1664;
        float _1750 = _1632 * 0.5;
        float _1751 = _1642 * 0.5;
        float _1752 = _1652 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_909, _910, _911), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4633 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4644 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4655 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_1777 + 1.0))) + _1782) * _1665;
        _1799 = _1632;
        _1800 = _1631;
        _1801 = _1630;
        _1802 = _1642;
        _1803 = _1641;
        _1804 = _1640;
        _1805 = _1652;
        _1806 = _1651;
        _1807 = _1650;
        _1808 = _1665;
        _1809 = _1664;
        _1810 = _1663;
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
    }
    else
    {
        _1799 = _1488;
        _1800 = _1488;
        _1801 = _1488;
        _1802 = _1488;
        _1803 = _1488;
        _1804 = _1488;
        _1805 = _1488;
        _1806 = _1488;
        _1807 = _1488;
        _1808 = _1488;
        _1809 = _1488;
        _1810 = _1488;
        _1811 = 0.0;
        _1812 = 0.0;
        _1813 = 0.0;
    }
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1500)) + _1500;
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1501)) + _1501;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1502)) + _1502;
    float _1846 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1823));
    float _1867 = _1094 * 0.5;
    float _1868 = _1095 * 0.5;
    float _1869 = _1096 * 0.5;
    float _1870 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1873 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1876 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1910;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1883 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1487, _1491, _1494, _1497));
        float _1887 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1891 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1898 = dot(vec4(cbModelParam._m0[39u]), vec4(_1867, _1868, _1869, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1921;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1912 = dot(vec4(cbModelParam._m0[40u]), vec4(_1867, _1868, _1869, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1925 = (_1921 * cbModelParam._m0[1u].x) + (_1910 * (1.0 - cbModelParam._m0[1u].x));
    float _1935 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _912);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1935 : min(cbModelParam._m0[25u].z, _1935));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1983 = fma(_1158, cbModelParam._m0[13u].z, fma(_1154, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1150)) + cbModelParam._m0[13u].w;
        float _1987 = fma(_1158, cbModelParam._m0[14u].z, fma(_1154, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1150)) + cbModelParam._m0[14u].w;
        float _1991 = fma(_1158, cbModelParam._m0[15u].z, fma(_1154, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1150)) + cbModelParam._m0[15u].w;
        float _1994 = fma(_1096, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094));
        float _1997 = fma(_1096, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094));
        float _2000 = fma(_1096, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094));
        float _2028;
        if (_1994 > 0.0)
        {
            _2028 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2028 = frontier_phi_17_15_ladder;
        }
        float _2199;
        if (_1997 > 0.0)
        {
            _2199 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2199 = frontier_phi_26_22_ladder;
        }
        float _2494;
        if (_2000 > 0.0)
        {
            _2494 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2494 = frontier_phi_38_33_ladder;
        }
        float _2496 = isnan(_2199) ? _2028 : (isnan(_2028) ? _2199 : min(_2028, _2199));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1994) + _1983;
        float _2502 = (_2497 * _1997) + _1987;
        float _2503 = (_2497 * _2000) + _1991;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2504;
        float _2508 = _2504 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 > _2508) || ((_2502 < _2506) || ((_2501 < _2506) || (_2501 > _2508))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2503, cbModelParam._m0[9u].z, fma(_2502, cbModelParam._m0[9u].y, _2501 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2503, cbModelParam._m0[10u].z, fma(_2502, cbModelParam._m0[10u].y, _2501 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2503, cbModelParam._m0[11u].z, fma(_2502, cbModelParam._m0[11u].y, _2501 * cbModelParam._m0[11u].x))), _1936);
            frontier_phi_16_38_ladder = _2648.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2648.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2648.x * cbModelParam._m0[1u].y;
        }
        _2016 = frontier_phi_16_38_ladder_2;
        _2018 = frontier_phi_16_38_ladder_1;
        _2020 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1094, _1095, _1096), _1936);
        _2016 = _2004.x * cbModelParam._m0[1u].y;
        _2018 = _2004.y * cbModelParam._m0[1u].y;
        _2020 = _2004.z * cbModelParam._m0[1u].y;
    }
    float _2024 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _912);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2024 : min(cbModelParam._m0[25u].w, _2024));
    float _2114;
    float _2116;
    float _2118;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2078 = fma(_1158, cbModelParam._m0[21u].z, fma(_1154, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1150)) + cbModelParam._m0[21u].w;
        float _2082 = fma(_1158, cbModelParam._m0[22u].z, fma(_1154, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1150)) + cbModelParam._m0[22u].w;
        float _2086 = fma(_1158, cbModelParam._m0[23u].z, fma(_1154, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1150)) + cbModelParam._m0[23u].w;
        float _2089 = fma(_1096, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094));
        float _2092 = fma(_1096, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094));
        float _2095 = fma(_1096, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094));
        float _2204;
        if (_2089 > 0.0)
        {
            _2204 = abs((1.0 - _2078) / _2089);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2078 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2204 = frontier_phi_28_24_ladder;
        }
        float _2521;
        if (_2092 > 0.0)
        {
            _2521 = abs((1.0 - _2082) / _2092);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2082 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2521 = frontier_phi_40_35_ladder;
        }
        float _2859;
        if (_2095 > 0.0)
        {
            _2859 = abs((1.0 - _2086) / _2095);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2086 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2859 = frontier_phi_50_47_ladder;
        }
        float _2861 = isnan(_2521) ? _2204 : (isnan(_2204) ? _2521 : min(_2204, _2521));
        float _2862 = isnan(_2859) ? _2861 : (isnan(_2861) ? _2859 : min(_2861, _2859));
        float _2866 = (_2862 * _2089) + _2078;
        float _2867 = (_2862 * _2092) + _2082;
        float _2868 = (_2862 * _2095) + _2086;
        float _2869 = _2862 * 9.9999997473787516355514526367188e-05;
        float _2870 = (-1.0) - _2869;
        float _2872 = _2869 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2868 > _2872) || ((_2868 < _2870) || ((_2867 > _2872) || ((_2867 < _2870) || ((_2866 < _2870) || (_2866 > _2872))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2868, cbModelParam._m0[17u].z, fma(_2867, cbModelParam._m0[17u].y, _2866 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2868, cbModelParam._m0[18u].z, fma(_2867, cbModelParam._m0[18u].y, _2866 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2868, cbModelParam._m0[19u].z, fma(_2867, cbModelParam._m0[19u].y, _2866 * cbModelParam._m0[19u].x))), _2025);
            frontier_phi_25_50_ladder = _2990.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2990.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2990.x * cbModelParam._m0[1u].z;
        }
        _2114 = frontier_phi_25_50_ladder_2;
        _2116 = frontier_phi_25_50_ladder_1;
        _2118 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1094, _1095, _1096), _2025);
        _2114 = _2098.x * cbModelParam._m0[1u].z;
        _2116 = _2098.y * cbModelParam._m0[1u].z;
        _2118 = _2098.z * cbModelParam._m0[1u].z;
    }
    float _2131 = (((_1121 * _1070) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2133 = (((_1121 * _1072) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2135 = (((_1121 * _1073) + _1122) * _1086) * ((cbModelParam._m0[1u].w * (_2118 - _2020)) + _2020);
    float _2138 = fma(_2135, cbSceneParam._m0[89u].z, fma(_2133, cbSceneParam._m0[89u].y, _2131 * cbSceneParam._m0[89u].x));
    float _2141 = fma(_2135, cbSceneParam._m0[90u].z, fma(_2133, cbSceneParam._m0[90u].y, _2131 * cbSceneParam._m0[90u].x));
    float _2144 = fma(_2135, cbSceneParam._m0[91u].z, fma(_2133, cbSceneParam._m0[91u].y, _2131 * cbSceneParam._m0[91u].x));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2191 = _2178 / _2190;
    float _2192 = _2182 / _2190;
    float _2193 = _2186 / _2190;
    float _2340;
    float _2341;
    float _2342;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2220 = ((uint(_2193 > cbSceneParam._m0[59u].y) + uint(_2193 > cbSceneParam._m0[59u].x)) + uint(_2193 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2221 = _2220 + 43u;
        uint _2229 = _2220 + 44u;
        uint _2237 = _2220 + 45u;
        uint _2245 = _2220 + 46u;
        float _2256 = fma(_2190, cbSceneParam._m0[_2221].w, fma(_2186, cbSceneParam._m0[_2221].z, fma(_2182, cbSceneParam._m0[_2221].y, _2178 * cbSceneParam._m0[_2221].x)));
        float _2260 = fma(_2190, cbSceneParam._m0[_2229].w, fma(_2186, cbSceneParam._m0[_2229].z, fma(_2182, cbSceneParam._m0[_2229].y, _2178 * cbSceneParam._m0[_2229].x)));
        float _2268 = fma(_2190, cbSceneParam._m0[_2245].w, fma(_2186, cbSceneParam._m0[_2245].z, fma(_2182, cbSceneParam._m0[_2245].y, _2178 * cbSceneParam._m0[_2245].x)));
        float _2273 = cbSceneParam._m0[33u].z * _2268;
        float _2275 = cbSceneParam._m0[33u].w * _2268;
        float _2278 = fma(_2190, cbSceneParam._m0[_2237].w, fma(_2186, cbSceneParam._m0[_2237].z, fma(_2182, cbSceneParam._m0[_2237].y, _2178 * cbSceneParam._m0[_2237].x))) / _2268;
        float _2326 = (cbSceneParam._m0[33u].x - sqrt(((_2192 * _2192) + (_2191 * _2191)) + (_2193 * _2193))) * cbSceneParam._m0[33u].y;
        float _4781 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2333 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 + _2256) / _2268, (_2275 + _2260) / _2268), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2275 + _2256) / _2268, (_2260 - _2273) / _2268), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 - _2273) / _2268, (_2260 - _2275) / _2268), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 - _2275) / _2268, (_2273 + _2260) / _2268), _2278), 0.0)).x), vec4(0.25)));
        _2340 = 1.0 - (_2333 * cbSceneParam._m0[34u].x);
        _2341 = 1.0 - (_2333 * cbSceneParam._m0[34u].y);
        _2342 = 1.0 - (_2333 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2340 = 1.0;
        _2341 = 1.0;
        _2342 = 1.0;
    }
    float _2406;
    float _2408;
    float _2410;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2394 = fma(_2190, cbSceneParam._m0[63u].w, fma(_2186, cbSceneParam._m0[63u].z, fma(_2182, cbSceneParam._m0[63u].y, _2178 * cbSceneParam._m0[63u].x)));
        float _2395 = fma(_2190, cbSceneParam._m0[60u].w, fma(_2186, cbSceneParam._m0[60u].z, fma(_2182, cbSceneParam._m0[60u].y, _2178 * cbSceneParam._m0[60u].x))) / _2394;
        float _2396 = fma(_2190, cbSceneParam._m0[61u].w, fma(_2186, cbSceneParam._m0[61u].z, fma(_2182, cbSceneParam._m0[61u].y, _2178 * cbSceneParam._m0[61u].x))) / _2394;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2395 >= cbSceneParam._m0[64u].x) && (_2396 >= cbSceneParam._m0[64u].y)) && (_2395 <= cbSceneParam._m0[64u].z)) && (_2396 <= cbSceneParam._m0[64u].w))
        {
            float _2534 = fma(_2190, cbSceneParam._m0[62u].w, fma(_2186, cbSceneParam._m0[62u].z, fma(_2182, cbSceneParam._m0[62u].y, _2178 * cbSceneParam._m0[62u].x))) / _2394;
            float _2538 = isnan(cbSceneParam._m0[41u].w) ? _2534 : (isnan(_2534) ? cbSceneParam._m0[41u].w : max(_2534, cbSceneParam._m0[41u].w));
            float _2581 = (cbSceneParam._m0[33u].x - sqrt(((_2192 * _2192) + (_2191 * _2191)) + (_2193 * _2193))) * cbSceneParam._m0[33u].y;
            float _4797 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
            float _2588 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2395, cbSceneParam._m0[33u].w + _2396), _2538), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2395, _2396 - cbSceneParam._m0[33u].z), _2538), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2395 - cbSceneParam._m0[33u].z, _2396 - cbSceneParam._m0[33u].w), _2538), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2395 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2396), _2538), 0.0)).x), vec4(0.25)));
            float _2592 = 1.0 - (_2588 * cbSceneParam._m0[34u].x);
            float _2593 = 1.0 - (_2588 * cbSceneParam._m0[34u].y);
            float _2594 = 1.0 - (_2588 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2594) ? _2342 : (isnan(_2342) ? _2594 : min(_2342, _2594));
            frontier_phi_37_36_ladder_1 = isnan(_2593) ? _2341 : (isnan(_2341) ? _2593 : min(_2341, _2593));
            frontier_phi_37_36_ladder_2 = isnan(_2592) ? _2340 : (isnan(_2340) ? _2592 : min(_2340, _2592));
        }
        else
        {
            frontier_phi_37_36_ladder = _2342;
            frontier_phi_37_36_ladder_1 = _2341;
            frontier_phi_37_36_ladder_2 = _2340;
        }
        _2406 = frontier_phi_37_36_ladder_2;
        _2408 = frontier_phi_37_36_ladder_1;
        _2410 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2406 = _2340;
        _2408 = _2341;
        _2410 = _2342;
    }
    uvec4 _2415 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2417 = _2415.x * 14u;
    uint _2418 = _2417 + 13u;
    float _2425 = _1086 + (-1.0);
    float _2430 = (cbLight._m0[_2418].x * _2425) + 1.0;
    float _2431 = (cbLight._m0[_2418].y * _2425) + 1.0;
    float _2432 = (cbLight._m0[_2418].z * _2425) + 1.0;
    float _2433 = (cbLight._m0[_2418].w * _2425) + 1.0;
    uint _2434 = _2417 + 5u;
    float _2440 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
    uint _2444 = _2417 + 4u;
    float _2453 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
    uint _2457 = _2417 | 1u;
    float _2468 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_909, _910, _911));
    float _2471 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_909, _910, _911));
    float _4833 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _4844 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2476 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * 0.3183098733425140380859375;
    float _2478 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * 0.3183098733425140380859375;
    float _2485 = ((cbLight._m0[_2434].x * _2440) * _2478) + (((cbLight._m0[_2444].x * _2406) * _2453) * _2476);
    float _2486 = ((_2440 * cbLight._m0[_2434].y) * _2478) + (((cbLight._m0[_2444].y * _2408) * _2453) * _2476);
    float _2487 = ((_2440 * cbLight._m0[_2434].z) * _2478) + (((cbLight._m0[_2444].z * _2410) * _2453) * _2476);
    uvec4 _2491 = floatBitsToUint(cbLight._m0[_2417 + 12u]);
    bool _2493 = _2491.x == 0u;
    float _2595;
    float _2597;
    float _2599;
    if (_2493)
    {
        _2595 = _2485;
        _2597 = _2486;
        _2599 = _2487;
    }
    else
    {
        uint _2603 = _2417 + 6u;
        float _2619 = (dot(vec3(cbLight._m0[_2417 + 2u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2620 = _2619 * _2619;
        float _4855 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2621 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2622 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2595 = (((cbLight._m0[_2603].x * 0.3183098733425140380859375) * _2621) * _2622) + _2485;
        _2597 = (((cbLight._m0[_2603].y * 0.3183098733425140380859375) * _2621) * _2622) + _2486;
        _2599 = (((cbLight._m0[_2603].z * 0.3183098733425140380859375) * _2621) * _2622) + _2487;
    }
    bool _2602 = _2491.y == 0u;
    float _2657;
    float _2659;
    float _2661;
    if (_2602)
    {
        _2657 = _2595;
        _2659 = _2597;
        _2661 = _2599;
    }
    else
    {
        uint _2830 = _2417 + 7u;
        float _2846 = (dot(vec3(cbLight._m0[_2417 + 3u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2847 = _2846 * _2846;
        float _4871 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2848 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2849 = isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0));
        _2657 = (((cbLight._m0[_2830].x * 0.3183098733425140380859375) * _2848) * _2849) + _2595;
        _2659 = (((cbLight._m0[_2830].y * 0.3183098733425140380859375) * _2848) * _2849) + _2597;
        _2661 = (((cbLight._m0[_2830].z * 0.3183098733425140380859375) * _2848) * _2849) + _2599;
    }
    uint _2664 = _2417 + 8u;
    float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _912) * 0.949999988079071044921875);
    float _2678 = _2677 * _2677;
    float _2679 = cbLight._m0[_2417].x + _988;
    float _2680 = cbLight._m0[_2417].y + _989;
    float _2681 = cbLight._m0[_2417].z + _990;
    float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
    float _2686 = _2685 * _2679;
    float _2687 = _2685 * _2680;
    float _2688 = _2685 * _2681;
    float _2689 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2417].xyz));
    float _4887 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _4898 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _2693 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2694 = dot(vec3(_909, _910, _911), vec3(_2686, _2687, _2688));
    float _4909 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2697 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _2698 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2686, _2687, _2688));
    float _4920 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2702 = _2678 * _2678;
    float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
    float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) * 5.0);
    float _2715 = 0.959999978542327880859375 - _1067;
    float _2717 = 0.959999978542327880859375 - _1068;
    float _2718 = 0.959999978542327880859375 - _1069;
    float _2725 = 1.0 - _2678;
    float _2736 = (0.5 / (((_2693 * ((_2692 * _2725) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _2725) + _2678) * _2692))) * _2692;
    float _4931 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2738 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
    uint _2752 = _2417 + 9u;
    float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _912) * 0.949999988079071044921875);
    float _2764 = _2763 * _2763;
    float _2765 = cbLight._m0[_2457].x + _988;
    float _2766 = cbLight._m0[_2457].y + _989;
    float _2767 = cbLight._m0[_2457].z + _990;
    float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
    float _2772 = _2771 * _2765;
    float _2773 = _2771 * _2766;
    float _2774 = _2771 * _2767;
    float _2775 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2457].xyz));
    float _4942 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2778 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
    float _2779 = dot(vec3(_909, _910, _911), vec3(_2772, _2773, _2774));
    float _4953 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2782 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
    float _2783 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2772, _2773, _2774));
    float _4964 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2787 = _2764 * _2764;
    float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
    float _2798 = exp2(log2(1.0 - (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * 5.0);
    float _2805 = 1.0 - _2764;
    float _2815 = (0.5 / (((_2693 * ((_2778 * _2805) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _2805) + _2764) * _2778))) * _2778;
    float _4975 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2817 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
    float _2827 = (((((_2798 * _2715) + _1070) * cbLight._m0[_2752].x) * _2817) * _2440) + ((((cbLight._m0[_2664].x * _2406) * ((_2714 * _2715) + _1070)) * _2738) * _2453);
    float _2828 = (((((_2798 * _2717) + _1072) * cbLight._m0[_2752].y) * _2817) * _2440) + ((((cbLight._m0[_2664].y * _2408) * ((_2714 * _2717) + _1072)) * _2738) * _2453);
    float _2829 = (((((_2798 * _2718) + _1073) * cbLight._m0[_2752].z) * _2817) * _2440) + ((((cbLight._m0[_2664].z * _2410) * ((_2714 * _2718) + _1073)) * _2738) * _2453);
    float _2885;
    float _2887;
    float _2889;
    if (_2493)
    {
        _2885 = _2827;
        _2887 = _2828;
        _2889 = _2829;
    }
    else
    {
        uint _2891 = _2417 + 2u;
        uint _2895 = _2417 + 10u;
        float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _912) * 0.949999988079071044921875);
        float _2910 = _2909 * _2909;
        float _2911 = cbLight._m0[_2891].x + _988;
        float _2912 = cbLight._m0[_2891].y + _989;
        float _2913 = cbLight._m0[_2891].z + _990;
        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
        float _2918 = _2917 * _2911;
        float _2919 = _2917 * _2912;
        float _2920 = _2917 * _2913;
        float _2921 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2891].xyz));
        float _4986 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _2925 = dot(vec3(_909, _910, _911), vec3(_2918, _2919, _2920));
        float _4997 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _2929 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_2918, _2919, _2920));
        float _5008 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2933 = _2910 * _2910;
        float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
        float _2944 = exp2(log2(1.0 - (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) * 5.0);
        float _2951 = 1.0 - _2910;
        float _2961 = (0.5 / (((_2693 * ((_2924 * _2951) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _2951) + _2910) * _2924))) * _2924;
        float _5019 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2963 = (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
        float _2964 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2885 = (((((_2944 * _2715) + _1070) * cbLight._m0[_2895].x) * _2963) * _2964) + _2827;
        _2887 = (((((_2944 * _2717) + _1072) * cbLight._m0[_2895].y) * _2963) * _2964) + _2828;
        _2889 = (((((_2944 * _2718) + _1073) * cbLight._m0[_2895].z) * _2963) * _2964) + _2829;
    }
    float _2995;
    float _2997;
    float _2999;
    if (_2602)
    {
        _2995 = _2885;
        _2997 = _2887;
        _2999 = _2889;
    }
    else
    {
        uint _3006 = _2417 + 3u;
        uint _3010 = _2417 + 11u;
        float _3024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3006].w)) * _912) * 0.949999988079071044921875);
        float _3025 = _3024 * _3024;
        float _3026 = cbLight._m0[_3006].x + _988;
        float _3027 = cbLight._m0[_3006].y + _989;
        float _3028 = cbLight._m0[_3006].z + _990;
        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
        float _3033 = _3032 * _3026;
        float _3034 = _3032 * _3027;
        float _3035 = _3032 * _3028;
        float _3036 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_3006].xyz));
        float _5035 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3039 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
        float _3040 = dot(vec3(_909, _910, _911), vec3(_3033, _3034, _3035));
        float _5046 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
        float _3044 = dot(vec3(cbLight._m0[_3006].xyz), vec3(_3033, _3034, _3035));
        float _5057 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3048 = _3025 * _3025;
        float _3052 = ((_3043 * _3043) * (_3048 + (-1.0))) + 1.0;
        float _3059 = exp2(log2(1.0 - (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) * 5.0);
        float _3066 = 1.0 - _3025;
        float _3076 = (0.5 / (((_2693 * ((_3039 * _3066) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _3066) + _3025) * _3039))) * _3039;
        float _5068 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3078 = (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3048 / ((_3052 * _3052) * 3.141590118408203125));
        float _3079 = isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0));
        _2995 = (((((_3059 * _2715) + _1070) * cbLight._m0[_3010].x) * _3078) * _3079) + _2885;
        _2997 = (((((_3059 * _2717) + _1072) * cbLight._m0[_3010].y) * _3078) * _3079) + _2887;
        _2999 = (((((_3059 * _2718) + _1073) * cbLight._m0[_3010].z) * _3078) * _3079) + _2889;
    }
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_2415.y == 0u)
    {
        uvec4 _3100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3101 = _3100.x;
        uint _3112 = uint((float(_3100.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1009) / _3101))) + floor(float(uint(cbSceneParam._m0[85u].x * _1008) / _3101)));
        float _3122 = (log2(_2193 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3123 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
        uint _3126 = uint(isnan(14.0) ? _3123 : (isnan(_3123) ? 14.0 : min(_3123, 14.0)));
        uvec4 _3131 = texelFetch(g_lightClusterGridBuffer, int(((_3126 << 2u) + (_3112 << 6u)) >> 2u));
        uint _3132 = _3131.x;
        uint _3133 = _3100.z;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        if (((((1u << ((_3133 >> 4u) & 15u)) + 4294967295u) & _3132) == 0u) || ((_3133 & 240u) == 0u))
        {
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
        }
        else
        {
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            float _3369 = 0.0;
            uint _3370 = 0u;
            uint _3379;
            bool _3380;
            for (;;)
            {
                _3379 = texelFetch(g_lightClassification, int((((_3126 << 5u) + (_3112 << 9u)) + (_3370 << 2u)) >> 2u)).x;
                _3380 = _3379 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3380)
                {
                    frontier_phi_71_pred = _3369;
                    frontier_phi_71_pred_1 = _3368;
                    frontier_phi_71_pred_2 = _3367;
                    frontier_phi_71_pred_3 = _3366;
                    frontier_phi_71_pred_4 = _3365;
                    frontier_phi_71_pred_5 = _3364;
                }
                else
                {
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    uint _3515;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3369;
                    _3515 = _3379;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    for (;;)
                    {
                        uint _3519 = uint(findLSB(_3515)) + (_3370 << 5u);
                        uint _3516 = (_3515 + 4294967295u) & _3515;
                        uint _3521 = _3519 * 48u;
                        vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3521)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 3u)).x));
                        uint _3541 = (_3519 * 48u) + 4u;
                        vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3541)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 3u)).x));
                        uint _3560 = (_3519 * 48u) + 8u;
                        vec3 _3571 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3560)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 2u)).x));
                        float _3575 = _3535.x - _2191;
                        float _3576 = _3535.y - _2192;
                        float _3577 = _3535.z - _2193;
                        float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                        float _3581 = inversesqrt(_3578);
                        float _3582 = _3581 * _3575;
                        float _3583 = _3581 * _3576;
                        float _3584 = _3581 * _3577;
                        float _3585 = dot(vec3(_1027, _1030, _1033), vec3(_3582, _3583, _3584));
                        float _3590 = 1.0 - (_3578 * _3535.w);
                        float _5094 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3591 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3592 = sqrt(_3578) * _3554.w;
                        float _3595 = 1.39999997615814208984375 / (_3592 + 1.39999997615814208984375);
                        float _3596 = _3595 * _3595;
                        float _3599 = ((1.0 - _3596) * _3585) + _3596;
                        float _3602 = _3592 * _3592;
                        float _3606 = ((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3591) / ((_3602 * 0.699999988079071044921875) + 1.0);
                        float _3610 = (-0.0) - _2191;
                        float _3611 = (-0.0) - _2192;
                        float _3612 = (-0.0) - _2193;
                        float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                        float _3617 = _3616 * _3610;
                        float _3618 = _3616 * _3611;
                        float _3619 = _3616 * _3612;
                        float _3626 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                        float _3627 = 1.0 - _1102;
                        float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                        float _3635 = _3634 * _3634;
                        float _3636 = _3635 * _3635;
                        float _3637 = _3617 + _3582;
                        float _3638 = _3618 + _3583;
                        float _3639 = _3619 + _3584;
                        float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                        float _3647 = dot(vec3(_1027, _1030, _1033), vec3(_3617, _3618, _3619));
                        float _5110 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3650 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3651 = dot(vec3(_1027, _1030, _1033), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                        float _5121 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3654 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                        float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                        float _3659 = _3595 * _3635;
                        float _3660 = _3659 * _3659;
                        float _3663 = ((1.0 - _3660) * _3585) + _3660;
                        float _5132 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3664 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                        float _3665 = 1.0 - _3635;
                        float _3675 = (0.5 / (((_3664 * ((_3650 * _3665) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3664 * _3665) + _3635) * _3650))) * _3664;
                        float _5143 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                        float _3686 = (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0)))) / ((_3658 * _3658) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125))) * _3591;
                        _3439 = (_3606 * _3554.x) + _3512;
                        _3440 = (_3606 * _3554.y) + _3513;
                        _3441 = (_3606 * _3554.z) + _3514;
                        _3436 = (_3686 * _3571.x) + _3509;
                        _3437 = (_3686 * _3571.y) + _3510;
                        _3438 = (_3686 * _3571.z) + _3511;
                        if (_3516 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3441;
                            _3515 = _3516;
                        }
                    }
                    frontier_phi_71_pred = _3441;
                    frontier_phi_71_pred_1 = _3440;
                    frontier_phi_71_pred_2 = _3439;
                    frontier_phi_71_pred_3 = _3438;
                    frontier_phi_71_pred_4 = _3437;
                    frontier_phi_71_pred_5 = _3436;
                }
                _3223 = frontier_phi_71_pred;
                _3221 = frontier_phi_71_pred_1;
                _3219 = frontier_phi_71_pred_2;
                _3217 = frontier_phi_71_pred_3;
                _3215 = frontier_phi_71_pred_4;
                _3213 = frontier_phi_71_pred_5;
                uint _3371 = _3370 + 1u;
                if (_3371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3364 = _3213;
                    _3365 = _3215;
                    _3366 = _3217;
                    _3367 = _3219;
                    _3368 = _3221;
                    _3369 = _3223;
                    _3370 = _3371;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
        }
        uvec4 _3226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3227 = _3226.z;
        uint _3229 = (_3227 >> 8u) & 15u;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        float _3342;
        if (((4294967295u << _3229) & _3132) == 0u)
        {
            _3332 = _3212;
            _3334 = _3214;
            _3336 = _3216;
            _3338 = _3218;
            _3340 = _3220;
            _3342 = _3222;
        }
        else
        {
            float _3357 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
            float _3358 = _3357 * _2191;
            float _3359 = _3357 * _2192;
            float _3360 = _3357 * _2193;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3229 < ((_3227 >> 12u) & 15u))
            {
                float _3333;
                float _3335;
                float _3337;
                float _3339;
                float _3341;
                float _3343;
                float _3492 = _3212;
                float _3493 = _3214;
                float _3494 = _3216;
                float _3495 = _3218;
                float _3496 = _3220;
                float _3497 = _3222;
                uint _3498 = _3229;
                uint _3507;
                bool _3508;
                for (;;)
                {
                    _3507 = texelFetch(g_lightClassification, int((((_3126 << 5u) + (_3112 << 9u)) + (_3498 << 2u)) >> 2u)).x;
                    _3508 = _3507 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3508)
                    {
                        frontier_phi_82_pred = _3497;
                        frontier_phi_82_pred_1 = _3496;
                        frontier_phi_82_pred_2 = _3495;
                        frontier_phi_82_pred_3 = _3494;
                        frontier_phi_82_pred_4 = _3493;
                        frontier_phi_82_pred_5 = _3492;
                    }
                    else
                    {
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        float _3716 = _3495;
                        float _3717 = _3496;
                        float _3718 = _3497;
                        uint _3719 = _3507;
                        uint _3720;
                        vec4 _3745;
                        float _3746;
                        vec4 _3761;
                        vec3 _3773;
                        vec4 _3788;
                        vec4 _3803;
                        float _3849;
                        bool _3850;
                        for (;;)
                        {
                            uint _3730 = ((_3498 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3719));
                            _3720 = (_3719 + 4294967295u) & _3719;
                            uint _3732 = _3730 * 40u;
                            _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            _3746 = _3745.w;
                            uint _3748 = (_3730 * 40u) + 4u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3763 = (_3730 * 40u) + 8u;
                            _3773 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x));
                            uint _3775 = (_3730 * 40u) + 16u;
                            _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            uint _3790 = (_3730 * 40u) + 20u;
                            _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            uint _3805 = (_3730 * 40u) + 24u;
                            vec4 _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            uint _3824 = (_3730 * 40u) + 28u;
                            vec4 _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            _3849 = fma(_2193, _3837.z, fma(_2192, _3837.y, _3837.x * _2191)) + _3837.w;
                            _3850 = !((fma(_2193, _3818.z, fma(_2192, _3818.y, _3818.x * _2191)) + _3818.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3850)
                            {
                                float _3877 = _3745.x - _2191;
                                float _3878 = _3745.y - _2192;
                                float _3879 = _3745.z - _2193;
                                float _3880 = dot(vec3(_3877, _3878, _3879), vec3(_3877, _3878, _3879));
                                float _3883 = inversesqrt(_3880);
                                float _3884 = _3883 * _3877;
                                float _3885 = _3883 * _3878;
                                float _3886 = _3883 * _3879;
                                float _3890 = 1.0 - (_3880 / (_3746 * _3746));
                                float _5154 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _3895 = sqrt(_3880) * _3761.w;
                                float _3897 = 1.39999997615814208984375 / (_3895 + 1.39999997615814208984375);
                                float _3898 = _3897 * _3897;
                                float _3901 = ((1.0 - _3898) * dot(vec3(_3884, _3885, _3886), vec3(_1027, _1030, _1033))) + _3898;
                                float _3904 = _3895 * _3895;
                                float _3908 = (fma(_2193, _3788.z, fma(_2192, _3788.y, _3788.x * _2191)) + _3788.w) / _3849;
                                float _3909 = (fma(_2193, _3803.z, fma(_2192, _3803.y, _3803.x * _2191)) + _3803.w) / _3849;
                                float _3913 = 1.0 - dot(vec2(_3908, _3909), vec2(_3908, _3909));
                                float _5170 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _3915 = _3914 * (((isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0))) * _3891) / ((_3904 * 0.699999988079071044921875) + 1.0));
                                float _3927 = exp2(log2(1.0 / ((_3904 * 3.5) + 5.0)) * 0.25);
                                float _3928 = 1.0 - _1102;
                                float _3935 = sqrt(1.0 - ((1.0 - (_3928 * _3928)) * (1.0 - (_3927 * _3927))));
                                float _3936 = _3935 * _3935;
                                float _3937 = _3936 * _3936;
                                float _3938 = _3884 - _3358;
                                float _3939 = _3885 - _3359;
                                float _3940 = _3886 - _3360;
                                float _3944 = inversesqrt(dot(vec3(_3938, _3939, _3940), vec3(_3938, _3939, _3940)));
                                float _3948 = dot(vec3(_1027, _1030, _1033), vec3((-0.0) - _3358, (-0.0) - _3359, (-0.0) - _3360));
                                float _5181 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3951 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _3952 = dot(vec3(_1027, _1030, _1033), vec3(_3944 * _3938, _3944 * _3939, _3944 * _3940));
                                float _5192 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3955 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                                float _3959 = ((_3955 * _3955) * (_3937 + (-1.0))) + 1.0;
                                float _3960 = _3897 * _3936;
                                float _3961 = _3960 * _3960;
                                float _3967 = ((1.0 - _3961) * dot(vec3(_1027, _1030, _1033), vec3(_3884, _3885, _3886))) + _3961;
                                float _5203 = isnan(0.0) ? _3967 : (isnan(_3967) ? 0.0 : max(_3967, 0.0));
                                float _3968 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                                float _3969 = 1.0 - _3936;
                                float _3979 = (0.5 / (((_3968 * ((_3951 * _3969) + _3936)) + 9.9999999392252902907785028219223e-09) + (((_3968 * _3969) + _3936) * _3951))) * _3968;
                                float _5214 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3989 = (_3914 * _3891) * (((_3937 * 3.1415927410125732421875) * (isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0)))) / ((_3959 * _3959) * ((_3904 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3915 * _3761.z;
                                frontier_phi_88_pred_1 = _3915 * _3761.y;
                                frontier_phi_88_pred_2 = _3915 * _3761.x;
                                frontier_phi_88_pred_3 = _3989 * _3773.z;
                                frontier_phi_88_pred_4 = _3989 * _3773.y;
                                frontier_phi_88_pred_5 = _3989 * _3773.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3998 = frontier_phi_88_pred;
                            _3997 = frontier_phi_88_pred_1;
                            _3996 = frontier_phi_88_pred_2;
                            _3995 = frontier_phi_88_pred_3;
                            _3994 = frontier_phi_88_pred_4;
                            _3993 = frontier_phi_88_pred_5;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3705 = _3998 + _3718;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            _3702 = _3995 + _3715;
                            if (_3720 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3720;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3705;
                        frontier_phi_82_pred_1 = _3704;
                        frontier_phi_82_pred_2 = _3703;
                        frontier_phi_82_pred_3 = _3702;
                        frontier_phi_82_pred_4 = _3701;
                        frontier_phi_82_pred_5 = _3700;
                    }
                    _3343 = frontier_phi_82_pred;
                    _3341 = frontier_phi_82_pred_1;
                    _3339 = frontier_phi_82_pred_2;
                    _3337 = frontier_phi_82_pred_3;
                    _3335 = frontier_phi_82_pred_4;
                    _3333 = frontier_phi_82_pred_5;
                    uint _3499 = _3498 + 1u;
                    if (_3499 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3492 = _3333;
                        _3493 = _3335;
                        _3494 = _3337;
                        _3495 = _3339;
                        _3496 = _3341;
                        _3497 = _3343;
                        _3498 = _3499;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3339;
                frontier_phi_63_64_ladder_1 = _3343;
                frontier_phi_63_64_ladder_2 = _3341;
                frontier_phi_63_64_ladder_3 = _3337;
                frontier_phi_63_64_ladder_4 = _3335;
                frontier_phi_63_64_ladder_5 = _3333;
            }
            else
            {
                frontier_phi_63_64_ladder = _3218;
                frontier_phi_63_64_ladder_1 = _3222;
                frontier_phi_63_64_ladder_2 = _3220;
                frontier_phi_63_64_ladder_3 = _3216;
                frontier_phi_63_64_ladder_4 = _3214;
                frontier_phi_63_64_ladder_5 = _3212;
            }
            _3332 = frontier_phi_63_64_ladder_5;
            _3334 = frontier_phi_63_64_ladder_4;
            _3336 = frontier_phi_63_64_ladder_3;
            _3338 = frontier_phi_63_64_ladder;
            _3340 = frontier_phi_63_64_ladder_2;
            _3342 = frontier_phi_63_64_ladder_1;
        }
        float _3347 = isnan(1.0) ? _1086 : (isnan(_1086) ? 1.0 : min(_1086, 1.0));
        _3145 = (_3347 * _3338) + _2657;
        _3147 = (_3347 * _3340) + _2659;
        _3149 = (_3347 * _3342) + _2661;
        _3151 = ((_3332 * _1070) * _3347) + _2995;
        _3153 = ((_3334 * _1072) * _3347) + _2997;
        _3155 = ((_3336 * _1073) * _3347) + _2999;
    }
    else
    {
        _3145 = _2657;
        _3147 = _2659;
        _3149 = _2661;
        _3151 = _2995;
        _3153 = _2997;
        _3155 = _2999;
    }
    float _5230 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _5241 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _5252 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _3172 = ((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3145 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1086))) + ((_3151 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    float _3173 = ((isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0))) * (_3147 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1086))) + ((_3153 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    float _3174 = ((isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0))) * (_3149 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1086))) + ((_3155 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1925)) * cbPerFrame._m0[3u].x);
    uint _3175 = _289 + 6u;
    float _3183 = _1008 / cbSceneParam._m0[86u].x;
    float _3184 = _1009 / cbSceneParam._m0[86u].y;
    vec4 _3198 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3183, _3184, (log2((isnan(cbSceneParam._m0[77u].w) ? _931 : (isnan(_931) ? cbSceneParam._m0[77u].w : min(_931, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3200 = _3198.x;
    float _3201 = _3198.y;
    float _3202 = _3198.z;
    float _3203 = _3198.w;
    float _3274;
    float _3276;
    float _3278;
    float _3280;
    if (_931 > cbSceneParam._m0[78u].w)
    {
        float _3237 = isnan(_931) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _931 : min(cbSceneParam._m0[80u].w, _931));
        float _3238 = _3237 / _931;
        float _3249 = _3238 * _981;
        float _3250 = _982 * _3238;
        float _3251 = (-0.0) - _3250;
        float _3252 = _3238 * _983;
        float _3254 = (cbSceneParam._m0[77u].w * _3251) / _3237;
        float _3255 = _3254 + cbSceneParam._m0[79u].w;
        float _3256 = cbSceneParam._m0[79u].w - _3250;
        float _3262 = sqrt(((_3249 * _3249) + (_3250 * _3250)) + (_3252 * _3252));
        float _3265 = (1.0 - (cbSceneParam._m0[77u].w / _3237)) * _3262;
        float _3270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3449;
        if (abs((_3251 - _3254) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3449 = ((((_3255 > 0.0) ? exp2(_3270 * _3255) : (2.0 - exp2(_3272 * _3255))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3265;
        }
        else
        {
            float _3393 = 1.0 / cbSceneParam._m0[80u].x;
            float _3394 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : max(_3255, _3256));
            float _3395 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : min(_3255, _3256));
            float _3404 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : min(_3394, 0.0));
            float _3405 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : min(_3395, 0.0));
            _3449 = ((abs(_3262 / _3251) * cbSceneParam._m0[80u].y) * ((((_3404 - _3405) * 2.0) - ((exp2(_3270 * (isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0)))) - exp2(_3270 * (isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))))) * _3393)) - ((exp2(_3272 * _3404) - exp2(_3272 * _3405)) * _3393))) + (_3265 * cbSceneParam._m0[80u].z);
        }
        vec4 _3451 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3183, _3184, 1.0), 0.0);
        float _3460 = exp2((_3449 * (-1.44269502162933349609375)) * (1.0 - _3451.w));
        float _3461 = log2(_3460);
        float _3477 = log2(_3203);
        _3274 = (exp2(_3477 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].x)) * _3451.x) / cbSceneParam._m0[78u].x)) + _3200;
        _3276 = (exp2(_3477 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].y)) * _3451.y) / cbSceneParam._m0[78u].y)) + _3201;
        _3278 = (exp2(_3477 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].z)) * _3451.z) / cbSceneParam._m0[78u].z)) + _3202;
        _3280 = _3460 * _3203;
    }
    else
    {
        _3274 = _3200;
        _3276 = _3201;
        _3278 = _3202;
        _3280 = _3203;
    }
    bool _3487;
    vec4 _3290;
    vec4 _3312;
    float _3314;
    float _3318;
    float _3319;
    float _3320;
    float _3321;
    bool _3331;
    for (;;)
    {
        _3290 = cbMatDynParam._m0[0u];
        float _3292 = roundEven(_3290.y);
        bool _3293 = _3292 == 3.0;
        float _3294 = log2(_3280);
        float _3301 = exp2(_3294 * cbSceneParam._m0[78u].x) * _3172;
        float _3302 = exp2(_3294 * cbSceneParam._m0[78u].y) * _3173;
        float _3303 = exp2(_3294 * cbSceneParam._m0[78u].z) * _3174;
        float _3310 = _997 + (-0.5);
        _3312 = cbMtdParam._m0[1u];
        _3314 = _3312.y * _3310;
        float _3317 = (_3292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3318 = _3317 * (_3293 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3274)));
        _3319 = _3317 * (_3293 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3276)));
        _3320 = _3317 * (_3293 ? _3303 : (_3303 + (cbSceneParam._m0[72u].w * _3278)));
        _3321 = _3310 * 0.999000012874603271484375;
        _3331 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3331)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3321) < 0.5)
            {
                _3487 = true;
                break;
            }
        }
        uint _3428 = _1046 + uint(_3290.w);
        if ((cbInstanceData._m0[_3428].w < 1.0) && ((cbInstanceData._m0[_3428].w + _3321) < 0.5))
        {
            _3487 = true;
            break;
        }
        if ((_3314 + 1.0) < _3312.x)
        {
            _3487 = true;
            break;
        }
        _3487 = false;
        break;
    }
    float _3691;
    if (_3487)
    {
        discard_state = true;
        _3691 = 0.0;
    }
    else
    {
        _3691 = cbInstanceData._m0[_3175].w;
    }
    SV_Target.x = _3318;
    SV_Target.y = _3319;
    SV_Target.z = _3320;
    SV_Target.w = _3691;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3175].w;
    discard_exit();
}


