#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1084;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _354 = (_345.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_353, _354), vec2(_353, _354));
    float _3694 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _361 = sqrt(1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))));
    float _366 = _353 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_319.x * 2.0) + (-1.0)));
    float _367 = _354 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_319.y * 2.0) + (-1.0)));
    float _370 = fma(_361, _220, fma(_367, _227, _366 * _213));
    float _373 = fma(_361, _221, fma(_367, _228, _366 * _214));
    float _376 = fma(_361, _222, fma(_367, _229, _366 * _215));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _426 = ((_418 - _419) * cbMtdParam._m0[24u].z) + _419;
    float _428 = (cbMtdParam._m0[19u].x + dot(vec4(_380 * _370, _380 * _373, _380 * _376, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_426 * cbMtdParam._m0[21u].z);
    float _3705 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _444 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_426 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3716 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _449 = ((_429 * ((_299.x * cbMtdParam._m0[18u].x) - _278)) * _445) + _278;
    float _450 = ((_429 * ((_299.y * cbMtdParam._m0[18u].y) - _279)) * _445) + _279;
    float _451 = ((_429 * ((_299.z * cbMtdParam._m0[18u].z) - _280)) * _445) + _280;
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _466 = _464.x;
    float _469 = _466 - ((_466 * _429) * _445);
    float _474 = (((_319.z - _349) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _349;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _494 = (_487.x * 2.0) + (-1.0);
    float _495 = (_487.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3727 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _505 = (((_487.z - _474) * _429) * _445) + _474;
    float _520 = (((cbMtdParam._m0[21u].x * _366) + ((_494 - _366) * _429)) * _445) + _366;
    float _521 = (((cbMtdParam._m0[21u].x * _367) + ((_495 - _367) * _429)) * _445) + _367;
    float _522 = (((sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) - _361) * _429) * _445) + _361;
    float _527 = cbMtdParam._m0[22u].x + _345.w;
    float _530 = fma(_522, _220, fma(_521, _227, _520 * _213));
    float _533 = fma(_522, _221, fma(_521, _228, _520 * _214));
    float _536 = fma(_522, _222, fma(_521, _229, _520 * _215));
    float _540 = inversesqrt(dot(vec3(_530, _533, _536), vec3(_530, _533, _536)));
    float _541 = _540 * _530;
    float _542 = _540 * _533;
    float _543 = _540 * _536;
    float _3738 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _544 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3760 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3771 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3782 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3793 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _549 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _563 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _614 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _604);
    float _615 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _604);
    float _616 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _604);
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _621 = _614 * _620;
    float _622 = _615 * _620;
    float _623 = _616 * _620;
    float _629 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _630 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _651 = fma(_543, cbSceneParam._m0[5u].z, fma(_542, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _541));
    float _654 = fma(_543, cbSceneParam._m0[6u].z, fma(_542, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _541));
    float _657 = fma(_543, cbSceneParam._m0[7u].z, fma(_542, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _541));
    uint _671 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _677 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) * cbInstanceData._m0[_671].x;
    float _678 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_671].y;
    float _679 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_671].z;
    float _3804 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _683 = 1.0 - _549;
    float _684 = _680 * _683;
    float _685 = _681 * _683;
    float _686 = _682 * _683;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _549;
    float _692 = (_681 + (-0.039999999105930328369140625)) * _549;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _549;
    float _694 = _691 + 0.039999999105930328369140625;
    float _696 = _692 + 0.039999999105930328369140625;
    float _697 = _693 + 0.039999999105930328369140625;
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _629, cbSceneParam._m0[86u].y * _630));
    float _710 = ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * TEXCOORD_5.w) * _706.x;
    float _711 = dot(vec3(_541, _542, _543), vec3(_621, _622, _623));
    float _714 = _711 * 2.0;
    float _718 = (_714 * _541) - _621;
    float _719 = (_714 * _542) - _622;
    float _720 = (_714 * _543) - _623;
    float _724 = abs(dot(vec3(_621, _622, _623), vec3(_541, _542, _543)));
    float _3837 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _726 = sqrt(_544);
    float _739 = exp2((_726 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_726 * 3.0));
    float _745 = (1.0 - _739) * ((_726 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _746 = _739 * _726;
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1083;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_782, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774));
        float _812 = fma(_782, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774));
        float _816 = fma(_782, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774));
        float _841 = _774 + _541;
        float _842 = _778 + _542;
        float _843 = _782 + _543;
        float _853 = fma(_843, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841)) - _808;
        float _854 = fma(_843, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841)) - _812;
        float _855 = fma(_843, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841)) - _816;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _911 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_877.x + (-0.5));
        float _913 = _911 * (_877.y + (-0.5));
        float _914 = _911 * (_877.z + (-0.5));
        float _921 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_884.x + (-0.5));
        float _923 = _921 * (_884.y + (-0.5));
        float _924 = _921 * (_884.z + (-0.5));
        float _931 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_891.x + (-0.5));
        float _933 = _931 * (_891.y + (-0.5));
        float _934 = _931 * (_891.z + (-0.5));
        float _941 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_898.x + (-0.5));
        float _943 = _941 * (_898.y + (-0.5));
        float _944 = _941 * (_898.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _965 = (dot(vec3(_541, _542, _543), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _975 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3885 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_977 + 1.0))) + _982) * _945;
        float _992 = _913 * 0.5;
        float _993 = _923 * 0.5;
        float _994 = _933 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_541, _542, _543), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3918 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1019 + 1.0))) + _1024) * _946;
        float _1034 = _914 * 0.5;
        float _1035 = _924 * 0.5;
        float _1036 = _934 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_541, _542, _543), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3951 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1061 + 1.0))) + _1066) * _947;
        _1083 = _914;
        _1085 = _913;
        _1086 = _912;
        _1087 = _924;
        _1088 = _923;
        _1089 = _922;
        _1090 = _934;
        _1091 = _933;
        _1092 = _932;
        _1093 = _947;
        _1094 = _946;
        _1095 = _945;
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _1084;
        _1085 = _1084;
        _1086 = _1084;
        _1087 = _1084;
        _1088 = _1084;
        _1089 = _1084;
        _1090 = _1084;
        _1091 = _1084;
        _1092 = _1084;
        _1093 = _1084;
        _1094 = _1084;
        _1095 = _1084;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_782, cbModelParam._m0[30u].z, fma(_778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _774));
        float _1127 = fma(_782, cbModelParam._m0[31u].z, fma(_778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _774));
        float _1131 = fma(_782, cbModelParam._m0[32u].z, fma(_778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _774));
        float _1154 = _774 + _541;
        float _1155 = _778 + _542;
        float _1156 = _782 + _543;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_541, _542, _543), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4014 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_541, _542, _543), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4047 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_541, _542, _543), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4080 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1084;
        _1393 = _1084;
        _1394 = _1084;
        _1395 = _1084;
        _1396 = _1084;
        _1397 = _1084;
        _1398 = _1084;
        _1399 = _1084;
        _1400 = _1084;
        _1401 = _1084;
        _1402 = _1084;
        _1403 = _1084;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1096)) + _1096;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1097)) + _1097;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1098)) + _1098;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _718 * 0.5;
    float _1461 = _719 * 0.5;
    float _1462 = _720 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1083, _1087, _1090, _1093));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _544);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1609;
    float _1611;
    float _1613;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1576 = fma(_782, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774)) + cbModelParam._m0[13u].w;
        float _1580 = fma(_782, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774)) + cbModelParam._m0[14u].w;
        float _1584 = fma(_782, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774)) + cbModelParam._m0[15u].w;
        float _1587 = fma(_720, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718));
        float _1590 = fma(_720, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718));
        float _1593 = fma(_720, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718));
        float _1621;
        if (_1587 > 0.0)
        {
            _1621 = abs((1.0 - _1576) / _1587);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1576 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1621 = frontier_phi_14_12_ladder;
        }
        float _1792;
        if (_1590 > 0.0)
        {
            _1792 = abs((1.0 - _1580) / _1590);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1580 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1792 = frontier_phi_23_19_ladder;
        }
        float _2088;
        if (_1593 > 0.0)
        {
            _2088 = abs((1.0 - _1584) / _1593);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1584 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2088 = frontier_phi_35_30_ladder;
        }
        float _2090 = isnan(_1792) ? _1621 : (isnan(_1621) ? _1792 : min(_1621, _1792));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1587) + _1576;
        float _2096 = (_2091 * _1590) + _1580;
        float _2097 = (_2091 * _1593) + _1584;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2100 = (-1.0) - _2098;
        float _2102 = _2098 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2097 > _2102) || ((_2097 < _2100) || ((_2096 > _2102) || ((_2096 < _2100) || ((_2095 < _2100) || (_2095 > _2102))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2097, cbModelParam._m0[9u].z, fma(_2096, cbModelParam._m0[9u].y, _2095 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2097, cbModelParam._m0[10u].z, fma(_2096, cbModelParam._m0[10u].y, _2095 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2097, cbModelParam._m0[11u].z, fma(_2096, cbModelParam._m0[11u].y, _2095 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_13_35_ladder = _2242.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2242.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2242.x * cbModelParam._m0[1u].y;
        }
        _1609 = frontier_phi_13_35_ladder_2;
        _1611 = frontier_phi_13_35_ladder_1;
        _1613 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_718, _719, _720), _1529);
        _1609 = _1597.x * cbModelParam._m0[1u].y;
        _1611 = _1597.y * cbModelParam._m0[1u].y;
        _1613 = _1597.z * cbModelParam._m0[1u].y;
    }
    float _1617 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _544);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1617 : min(cbModelParam._m0[25u].w, _1617));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1671 = fma(_782, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774)) + cbModelParam._m0[21u].w;
        float _1675 = fma(_782, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774)) + cbModelParam._m0[22u].w;
        float _1679 = fma(_782, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774)) + cbModelParam._m0[23u].w;
        float _1682 = fma(_720, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718));
        float _1685 = fma(_720, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718));
        float _1688 = fma(_720, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718));
        float _1797;
        if (_1682 > 0.0)
        {
            _1797 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1797 = frontier_phi_25_21_ladder;
        }
        float _2115;
        if (_1685 > 0.0)
        {
            _2115 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2115 = frontier_phi_37_32_ladder;
        }
        float _2453;
        if (_1688 > 0.0)
        {
            _2453 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2453 = frontier_phi_47_44_ladder;
        }
        float _2455 = isnan(_2115) ? _1797 : (isnan(_1797) ? _2115 : min(_1797, _2115));
        float _2456 = isnan(_2453) ? _2455 : (isnan(_2455) ? _2453 : min(_2455, _2453));
        float _2460 = (_2456 * _1682) + _1671;
        float _2461 = (_2456 * _1685) + _1675;
        float _2462 = (_2456 * _1688) + _1679;
        float _2463 = _2456 * 9.9999997473787516355514526367188e-05;
        float _2464 = (-1.0) - _2463;
        float _2466 = _2463 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2462 > _2466) || ((_2462 < _2464) || ((_2461 > _2466) || ((_2461 < _2464) || ((_2460 < _2464) || (_2460 > _2466))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2462, cbModelParam._m0[17u].z, fma(_2461, cbModelParam._m0[17u].y, _2460 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2462, cbModelParam._m0[18u].z, fma(_2461, cbModelParam._m0[18u].y, _2460 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2462, cbModelParam._m0[19u].z, fma(_2461, cbModelParam._m0[19u].y, _2460 * cbModelParam._m0[19u].x))), _1618);
            frontier_phi_22_47_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1707 = frontier_phi_22_47_ladder_2;
        _1709 = frontier_phi_22_47_ladder_1;
        _1711 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_718, _719, _720), _1618);
        _1707 = _1691.x * cbModelParam._m0[1u].z;
        _1709 = _1691.y * cbModelParam._m0[1u].z;
        _1711 = _1691.z * cbModelParam._m0[1u].z;
    }
    float _1724 = (((_745 * _694) + _746) * _710) * ((cbModelParam._m0[1u].w * (_1707 - _1609)) + _1609);
    float _1726 = (((_745 * _696) + _746) * _710) * ((cbModelParam._m0[1u].w * (_1709 - _1611)) + _1611);
    float _1728 = (((_745 * _697) + _746) * _710) * ((cbModelParam._m0[1u].w * (_1711 - _1613)) + _1613);
    float _1731 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1726, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1726, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1726, cbSceneParam._m0[91u].y, _1724 * cbSceneParam._m0[91u].x));
    float _1771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1775 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1784 = _1771 / _1783;
    float _1785 = _1775 / _1783;
    float _1786 = _1779 / _1783;
    float _1933;
    float _1934;
    float _1935;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1813 = ((uint(_1786 > cbSceneParam._m0[59u].y) + uint(_1786 > cbSceneParam._m0[59u].x)) + uint(_1786 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1814 = _1813 + 43u;
        uint _1822 = _1813 + 44u;
        uint _1830 = _1813 + 45u;
        uint _1838 = _1813 + 46u;
        float _1849 = fma(_1783, cbSceneParam._m0[_1814].w, fma(_1779, cbSceneParam._m0[_1814].z, fma(_1775, cbSceneParam._m0[_1814].y, _1771 * cbSceneParam._m0[_1814].x)));
        float _1853 = fma(_1783, cbSceneParam._m0[_1822].w, fma(_1779, cbSceneParam._m0[_1822].z, fma(_1775, cbSceneParam._m0[_1822].y, _1771 * cbSceneParam._m0[_1822].x)));
        float _1861 = fma(_1783, cbSceneParam._m0[_1838].w, fma(_1779, cbSceneParam._m0[_1838].z, fma(_1775, cbSceneParam._m0[_1838].y, _1771 * cbSceneParam._m0[_1838].x)));
        float _1866 = cbSceneParam._m0[33u].z * _1861;
        float _1868 = cbSceneParam._m0[33u].w * _1861;
        float _1871 = fma(_1783, cbSceneParam._m0[_1830].w, fma(_1779, cbSceneParam._m0[_1830].z, fma(_1775, cbSceneParam._m0[_1830].y, _1771 * cbSceneParam._m0[_1830].x))) / _1861;
        float _1919 = (cbSceneParam._m0[33u].x - sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786))) * cbSceneParam._m0[33u].y;
        float _4206 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1926 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1866 + _1849) / _1861, (_1868 + _1853) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 + _1849) / _1861, (_1853 - _1866) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 - _1866) / _1861, (_1853 - _1868) / _1861), _1871), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 - _1868) / _1861, (_1866 + _1853) / _1861), _1871), 0.0)).x), vec4(0.25)));
        _1933 = 1.0 - (_1926 * cbSceneParam._m0[34u].x);
        _1934 = 1.0 - (_1926 * cbSceneParam._m0[34u].y);
        _1935 = 1.0 - (_1926 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1933 = 1.0;
        _1934 = 1.0;
        _1935 = 1.0;
    }
    float _1999;
    float _2001;
    float _2003;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1987 = fma(_1783, cbSceneParam._m0[63u].w, fma(_1779, cbSceneParam._m0[63u].z, fma(_1775, cbSceneParam._m0[63u].y, _1771 * cbSceneParam._m0[63u].x)));
        float _1988 = fma(_1783, cbSceneParam._m0[60u].w, fma(_1779, cbSceneParam._m0[60u].z, fma(_1775, cbSceneParam._m0[60u].y, _1771 * cbSceneParam._m0[60u].x))) / _1987;
        float _1989 = fma(_1783, cbSceneParam._m0[61u].w, fma(_1779, cbSceneParam._m0[61u].z, fma(_1775, cbSceneParam._m0[61u].y, _1771 * cbSceneParam._m0[61u].x))) / _1987;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1988 >= cbSceneParam._m0[64u].x) && (_1989 >= cbSceneParam._m0[64u].y)) && (_1988 <= cbSceneParam._m0[64u].z)) && (_1989 <= cbSceneParam._m0[64u].w))
        {
            float _2128 = fma(_1783, cbSceneParam._m0[62u].w, fma(_1779, cbSceneParam._m0[62u].z, fma(_1775, cbSceneParam._m0[62u].y, _1771 * cbSceneParam._m0[62u].x))) / _1987;
            float _2132 = isnan(cbSceneParam._m0[41u].w) ? _2128 : (isnan(_2128) ? cbSceneParam._m0[41u].w : max(_2128, cbSceneParam._m0[41u].w));
            float _2175 = (cbSceneParam._m0[33u].x - sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786))) * cbSceneParam._m0[33u].y;
            float _4222 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
            float _2182 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1988, cbSceneParam._m0[33u].w + _1989), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1988, _1989 - cbSceneParam._m0[33u].z), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1988 - cbSceneParam._m0[33u].z, _1989 - cbSceneParam._m0[33u].w), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1988 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1989), _2132), 0.0)).x), vec4(0.25)));
            float _2186 = 1.0 - (_2182 * cbSceneParam._m0[34u].x);
            float _2187 = 1.0 - (_2182 * cbSceneParam._m0[34u].y);
            float _2188 = 1.0 - (_2182 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2188) ? _1935 : (isnan(_1935) ? _2188 : min(_1935, _2188));
            frontier_phi_34_33_ladder_1 = isnan(_2187) ? _1934 : (isnan(_1934) ? _2187 : min(_1934, _2187));
            frontier_phi_34_33_ladder_2 = isnan(_2186) ? _1933 : (isnan(_1933) ? _2186 : min(_1933, _2186));
        }
        else
        {
            frontier_phi_34_33_ladder = _1935;
            frontier_phi_34_33_ladder_1 = _1934;
            frontier_phi_34_33_ladder_2 = _1933;
        }
        _1999 = frontier_phi_34_33_ladder_2;
        _2001 = frontier_phi_34_33_ladder_1;
        _2003 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1999 = _1933;
        _2001 = _1934;
        _2003 = _1935;
    }
    uvec4 _2008 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2010 = _2008.x * 14u;
    uint _2011 = _2010 + 13u;
    float _2018 = _710 + (-1.0);
    float _2023 = (cbLight._m0[_2011].x * _2018) + 1.0;
    float _2024 = (cbLight._m0[_2011].y * _2018) + 1.0;
    float _2025 = (cbLight._m0[_2011].z * _2018) + 1.0;
    float _2026 = (cbLight._m0[_2011].w * _2018) + 1.0;
    uint _2027 = _2010 + 5u;
    float _2033 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2037 = _2010 + 4u;
    float _2047 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2051 = _2010 | 1u;
    float _2062 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_541, _542, _543));
    float _2065 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_541, _542, _543));
    float _4258 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _4269 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2070 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2072 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2079 = ((cbLight._m0[_2027].x * _2033) * _2072) + (((cbLight._m0[_2037].x * _1999) * _2047) * _2070);
    float _2080 = ((_2033 * cbLight._m0[_2027].y) * _2072) + (((cbLight._m0[_2037].y * _2001) * _2047) * _2070);
    float _2081 = ((_2033 * cbLight._m0[_2027].z) * _2072) + (((cbLight._m0[_2037].z * _2003) * _2047) * _2070);
    uvec4 _2085 = floatBitsToUint(cbLight._m0[_2010 + 12u]);
    bool _2087 = _2085.x == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2087)
    {
        _2189 = _2079;
        _2191 = _2080;
        _2193 = _2081;
    }
    else
    {
        uint _2197 = _2010 + 6u;
        float _2213 = (dot(vec3(cbLight._m0[_2010 + 2u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4280 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2216 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2189 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _2079;
        _2191 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _2080;
        _2193 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _2081;
    }
    bool _2196 = _2085.y == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2196)
    {
        _2251 = _2189;
        _2253 = _2191;
        _2255 = _2193;
    }
    else
    {
        uint _2424 = _2010 + 7u;
        float _2440 = (dot(vec3(cbLight._m0[_2010 + 3u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _2441 = _2440 * _2440;
        float _4296 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2442 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2443 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2251 = (((cbLight._m0[_2424].x * 0.3183098733425140380859375) * _2442) * _2443) + _2189;
        _2253 = (((cbLight._m0[_2424].y * 0.3183098733425140380859375) * _2442) * _2443) + _2191;
        _2255 = (((cbLight._m0[_2424].z * 0.3183098733425140380859375) * _2442) * _2443) + _2193;
    }
    uint _2258 = _2010 + 8u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _544) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2010].x + _621;
    float _2274 = cbLight._m0[_2010].y + _622;
    float _2275 = cbLight._m0[_2010].z + _623;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2010].xyz));
    float _4312 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _2287 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2288 = dot(vec3(_541, _542, _543), vec3(_2280, _2281, _2282));
    float _4334 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2280, _2281, _2282));
    float _4345 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2272 * _2272;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
    float _2309 = 0.959999978542327880859375 - _691;
    float _2311 = 0.959999978542327880859375 - _692;
    float _2312 = 0.959999978542327880859375 - _693;
    float _2319 = 1.0 - _2272;
    float _2330 = (0.5 / (((_2287 * ((_2286 * _2319) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2319) + _2272) * _2286))) * _2286;
    float _4356 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    uint _2346 = _2010 + 9u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _544) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2051].x + _621;
    float _2360 = cbLight._m0[_2051].y + _622;
    float _2361 = cbLight._m0[_2051].z + _623;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2051].xyz));
    float _4367 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2373 = dot(vec3(_541, _542, _543), vec3(_2366, _2367, _2368));
    float _4378 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2366, _2367, _2368));
    float _4389 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2358 * _2358;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
    float _2399 = 1.0 - _2358;
    float _2409 = (0.5 / (((_2287 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2399) + _2358) * _2372))) * _2372;
    float _4400 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2411 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    float _2421 = (((((_2392 * _2309) + _694) * cbLight._m0[_2346].x) * _2411) * _2033) + ((((cbLight._m0[_2258].x * _1999) * ((_2308 * _2309) + _694)) * _2332) * _2047);
    float _2422 = (((((_2392 * _2311) + _696) * cbLight._m0[_2346].y) * _2411) * _2033) + ((((cbLight._m0[_2258].y * _2001) * ((_2308 * _2311) + _696)) * _2332) * _2047);
    float _2423 = (((((_2392 * _2312) + _697) * cbLight._m0[_2346].z) * _2411) * _2033) + ((((cbLight._m0[_2258].z * _2003) * ((_2308 * _2312) + _697)) * _2332) * _2047);
    float _2479;
    float _2481;
    float _2483;
    if (_2087)
    {
        _2479 = _2421;
        _2481 = _2422;
        _2483 = _2423;
    }
    else
    {
        uint _2485 = _2010 + 2u;
        uint _2489 = _2010 + 10u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _544) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _621;
        float _2506 = cbLight._m0[_2485].y + _622;
        float _2507 = cbLight._m0[_2485].z + _623;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2485].xyz));
        float _4411 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2519 = dot(vec3(_541, _542, _543), vec3(_2512, _2513, _2514));
        float _4422 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4433 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2545 = 1.0 - _2504;
        float _2555 = (0.5 / (((_2287 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2545) + _2504) * _2518))) * _2518;
        float _4444 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2479 = (((((_2538 * _2309) + _694) * cbLight._m0[_2489].x) * _2557) * _2558) + _2421;
        _2481 = (((((_2538 * _2311) + _696) * cbLight._m0[_2489].y) * _2557) * _2558) + _2422;
        _2483 = (((((_2538 * _2312) + _697) * cbLight._m0[_2489].z) * _2557) * _2558) + _2423;
    }
    float _2589;
    float _2591;
    float _2593;
    if (_2196)
    {
        _2589 = _2479;
        _2591 = _2481;
        _2593 = _2483;
    }
    else
    {
        uint _2600 = _2010 + 3u;
        uint _2604 = _2010 + 11u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _544) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _621;
        float _2621 = cbLight._m0[_2600].y + _622;
        float _2622 = cbLight._m0[_2600].z + _623;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2600].xyz));
        float _4460 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2634 = dot(vec3(_541, _542, _543), vec3(_2627, _2628, _2629));
        float _4471 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4482 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2287 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2660) + _2619) * _2633))) * _2633;
        float _4493 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2589 = (((((_2653 * _2309) + _694) * cbLight._m0[_2604].x) * _2672) * _2673) + _2479;
        _2591 = (((((_2653 * _2311) + _696) * cbLight._m0[_2604].y) * _2672) * _2673) + _2481;
        _2593 = (((((_2653 * _2312) + _697) * cbLight._m0[_2604].z) * _2672) * _2673) + _2483;
    }
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_2008.y == 0u)
    {
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.x;
        uint _2706 = uint((float(_2694.y) * floor(float(uint(cbSceneParam._m0[85u].y * _630) / _2695))) + floor(float(uint(cbSceneParam._m0[85u].x * _629) / _2695)));
        float _2716 = (log2(_1786 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2717 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        uint _2720 = uint(isnan(14.0) ? _2717 : (isnan(_2717) ? 14.0 : min(_2717, 14.0)));
        uvec4 _2725 = texelFetch(g_lightClusterGridBuffer, int(((_2720 << 2u) + (_2706 << 6u)) >> 2u));
        uint _2726 = _2725.x;
        uint _2727 = _2694.z;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((((1u << ((_2727 >> 4u) & 15u)) + 4294967295u) & _2726) == 0u) || ((_2727 & 240u) == 0u))
        {
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
        }
        else
        {
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            uint _2957 = 0u;
            uint _2966;
            bool _2967;
            for (;;)
            {
                _2966 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                _2967 = _2966 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2967)
                {
                    frontier_phi_66_pred = _2956;
                    frontier_phi_66_pred_1 = _2955;
                    frontier_phi_66_pred_2 = _2954;
                    frontier_phi_66_pred_3 = _2953;
                    frontier_phi_66_pred_4 = _2952;
                    frontier_phi_66_pred_5 = _2951;
                }
                else
                {
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    uint _3081;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2966;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    for (;;)
                    {
                        uint _3085 = uint(findLSB(_3081)) + (_2957 << 5u);
                        uint _3082 = (_3081 + 4294967295u) & _3081;
                        uint _3087 = _3085 * 48u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3107 = (_3085 * 48u) + 4u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3126 = (_3085 * 48u) + 8u;
                        vec3 _3137 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x));
                        float _3141 = _3101.x - _1784;
                        float _3142 = _3101.y - _1785;
                        float _3143 = _3101.z - _1786;
                        float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                        float _3147 = inversesqrt(_3144);
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3151 = dot(vec3(_651, _654, _657), vec3(_3148, _3149, _3150));
                        float _3156 = 1.0 - (_3144 * _3101.w);
                        float _4519 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3158 = sqrt(_3144) * _3120.w;
                        float _3161 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3151) + _3162;
                        float _3168 = _3158 * _3158;
                        float _3172 = ((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3157) / ((_3168 * 0.699999988079071044921875) + 1.0);
                        float _3176 = (-0.0) - _1784;
                        float _3177 = (-0.0) - _1785;
                        float _3178 = (-0.0) - _1786;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3192 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                        float _3193 = 1.0 - _726;
                        float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                        float _3201 = _3200 * _3200;
                        float _3202 = _3201 * _3201;
                        float _3203 = _3183 + _3148;
                        float _3204 = _3184 + _3149;
                        float _3205 = _3185 + _3150;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3213 = dot(vec3(_651, _654, _657), vec3(_3183, _3184, _3185));
                        float _4535 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3217 = dot(vec3(_651, _654, _657), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                        float _4546 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                        float _3225 = _3161 * _3201;
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3151) + _3226;
                        float _4557 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3231 = 1.0 - _3201;
                        float _3241 = (0.5 / (((_3230 * ((_3216 * _3231) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3201) * _3216))) * _3230;
                        float _4568 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3252 = (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3224 * _3224) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125))) * _3157;
                        _3010 = (_3172 * _3120.x) + _3078;
                        _3011 = (_3172 * _3120.y) + _3079;
                        _3012 = (_3172 * _3120.z) + _3080;
                        _3007 = (_3252 * _3137.x) + _3075;
                        _3008 = (_3252 * _3137.y) + _3076;
                        _3009 = (_3252 * _3137.z) + _3077;
                        if (_3082 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3082;
                        }
                    }
                    frontier_phi_66_pred = _3012;
                    frontier_phi_66_pred_1 = _3011;
                    frontier_phi_66_pred_2 = _3010;
                    frontier_phi_66_pred_3 = _3009;
                    frontier_phi_66_pred_4 = _3008;
                    frontier_phi_66_pred_5 = _3007;
                }
                _2817 = frontier_phi_66_pred;
                _2815 = frontier_phi_66_pred_1;
                _2813 = frontier_phi_66_pred_2;
                _2811 = frontier_phi_66_pred_3;
                _2809 = frontier_phi_66_pred_4;
                _2807 = frontier_phi_66_pred_5;
                uint _2958 = _2957 + 1u;
                if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2951 = _2807;
                    _2952 = _2809;
                    _2953 = _2811;
                    _2954 = _2813;
                    _2955 = _2815;
                    _2956 = _2817;
                    _2957 = _2958;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
        }
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.z;
        uint _2823 = (_2821 >> 8u) & 15u;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((4294967295u << _2823) & _2726) == 0u)
        {
            _2919 = _2806;
            _2921 = _2808;
            _2923 = _2810;
            _2925 = _2812;
            _2927 = _2814;
            _2929 = _2816;
        }
        else
        {
            float _2944 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
            float _2945 = _2944 * _1784;
            float _2946 = _2944 * _1785;
            float _2947 = _2944 * _1786;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2823 < ((_2821 >> 12u) & 15u))
            {
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _3058 = _2806;
                float _3059 = _2808;
                float _3060 = _2810;
                float _3061 = _2812;
                float _3062 = _2814;
                float _3063 = _2816;
                uint _3064 = _2823;
                uint _3073;
                bool _3074;
                for (;;)
                {
                    _3073 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                    _3074 = _3073 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3074)
                    {
                        frontier_phi_72_pred = _3063;
                        frontier_phi_72_pred_1 = _3062;
                        frontier_phi_72_pred_2 = _3061;
                        frontier_phi_72_pred_3 = _3060;
                        frontier_phi_72_pred_4 = _3059;
                        frontier_phi_72_pred_5 = _3058;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3270 = _3058;
                        float _3271 = _3059;
                        float _3272 = _3060;
                        float _3273 = _3061;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        uint _3276 = _3073;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3346;
                        vec4 _3361;
                        float _3407;
                        bool _3408;
                        for (;;)
                        {
                            uint _3287 = ((_3064 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3333 = (_3287 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3287 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3287 * 40u) + 24u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3382 = (_3287 * 40u) + 28u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3407 = fma(_1786, _3395.z, fma(_1785, _3395.y, _3395.x * _1784)) + _3395.w;
                            _3408 = !((fma(_1786, _3376.z, fma(_1785, _3376.y, _3376.x * _1784)) + _3376.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3408)
                            {
                                float _3435 = _3302.x - _1784;
                                float _3436 = _3302.y - _1785;
                                float _3437 = _3302.z - _1786;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3303 * _3303));
                                float _4579 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3453 = sqrt(_3438) * _3318.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3459 = ((1.0 - _3456) * dot(vec3(_3442, _3443, _3444), vec3(_651, _654, _657))) + _3456;
                                float _3462 = _3453 * _3453;
                                float _3466 = (fma(_1786, _3346.z, fma(_1785, _3346.y, _3346.x * _1784)) + _3346.w) / _3407;
                                float _3467 = (fma(_1786, _3361.z, fma(_1785, _3361.y, _3361.x * _1784)) + _3361.w) / _3407;
                                float _3471 = 1.0 - dot(vec2(_3466, _3467), vec2(_3466, _3467));
                                float _4595 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3473 = _3472 * (((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3449) / ((_3462 * 0.699999988079071044921875) + 1.0));
                                float _3485 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                                float _3486 = 1.0 - _726;
                                float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                                float _3494 = _3493 * _3493;
                                float _3495 = _3494 * _3494;
                                float _3496 = _3442 - _2945;
                                float _3497 = _3443 - _2946;
                                float _3498 = _3444 - _2947;
                                float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                                float _3506 = dot(vec3(_651, _654, _657), vec3((-0.0) - _2945, (-0.0) - _2946, (-0.0) - _2947));
                                float _4606 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3510 = dot(vec3(_651, _654, _657), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                                float _4617 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                                float _3518 = _3455 * _3494;
                                float _3519 = _3518 * _3518;
                                float _3525 = ((1.0 - _3519) * dot(vec3(_651, _654, _657), vec3(_3442, _3443, _3444))) + _3519;
                                float _4628 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3527 = 1.0 - _3494;
                                float _3537 = (0.5 / (((_3526 * ((_3509 * _3527) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3494) * _3509))) * _3526;
                                float _4639 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3547 = (_3472 * _3449) * (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3517 * _3517) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3473 * _3318.y;
                                frontier_phi_78_pred_1 = _3473 * _3318.x;
                                frontier_phi_78_pred_2 = _3547 * _3330.z;
                                frontier_phi_78_pred_3 = _3547 * _3330.y;
                                frontier_phi_78_pred_4 = _3547 * _3330.x;
                                frontier_phi_78_pred_5 = _3473 * _3318.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3555 = frontier_phi_78_pred;
                            _3554 = frontier_phi_78_pred_1;
                            _3553 = frontier_phi_78_pred_2;
                            _3552 = frontier_phi_78_pred_3;
                            _3551 = frontier_phi_78_pred_4;
                            _3556 = frontier_phi_78_pred_5;
                            _3260 = _3554 + _3273;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            _3257 = _3551 + _3270;
                            _3258 = _3552 + _3271;
                            _3259 = _3553 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3262;
                        frontier_phi_72_pred_1 = _3261;
                        frontier_phi_72_pred_2 = _3260;
                        frontier_phi_72_pred_3 = _3259;
                        frontier_phi_72_pred_4 = _3258;
                        frontier_phi_72_pred_5 = _3257;
                    }
                    _2930 = frontier_phi_72_pred;
                    _2928 = frontier_phi_72_pred_1;
                    _2926 = frontier_phi_72_pred_2;
                    _2924 = frontier_phi_72_pred_3;
                    _2922 = frontier_phi_72_pred_4;
                    _2920 = frontier_phi_72_pred_5;
                    uint _3065 = _3064 + 1u;
                    if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3058 = _2920;
                        _3059 = _2922;
                        _3060 = _2924;
                        _3061 = _2926;
                        _3062 = _2928;
                        _3063 = _2930;
                        _3064 = _3065;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2930;
                frontier_phi_60_61_ladder_1 = _2928;
                frontier_phi_60_61_ladder_2 = _2924;
                frontier_phi_60_61_ladder_3 = _2922;
                frontier_phi_60_61_ladder_4 = _2920;
                frontier_phi_60_61_ladder_5 = _2926;
            }
            else
            {
                frontier_phi_60_61_ladder = _2816;
                frontier_phi_60_61_ladder_1 = _2814;
                frontier_phi_60_61_ladder_2 = _2810;
                frontier_phi_60_61_ladder_3 = _2808;
                frontier_phi_60_61_ladder_4 = _2806;
                frontier_phi_60_61_ladder_5 = _2812;
            }
            _2919 = frontier_phi_60_61_ladder_4;
            _2921 = frontier_phi_60_61_ladder_3;
            _2923 = frontier_phi_60_61_ladder_2;
            _2925 = frontier_phi_60_61_ladder_5;
            _2927 = frontier_phi_60_61_ladder_1;
            _2929 = frontier_phi_60_61_ladder;
        }
        float _2934 = isnan(1.0) ? _710 : (isnan(_710) ? 1.0 : min(_710, 1.0));
        _2739 = (_2934 * _2925) + _2251;
        _2741 = (_2934 * _2927) + _2253;
        _2743 = (_2934 * _2929) + _2255;
        _2745 = ((_2919 * _694) * _2934) + _2589;
        _2747 = ((_2921 * _696) * _2934) + _2591;
        _2749 = ((_2923 * _697) * _2934) + _2593;
    }
    else
    {
        _2739 = _2251;
        _2741 = _2253;
        _2743 = _2255;
        _2745 = _2589;
        _2747 = _2591;
        _2749 = _2593;
    }
    float _4655 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4666 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4677 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    uint _2769 = _232 + 6u;
    float _2777 = _629 / cbSceneParam._m0[86u].x;
    float _2778 = _630 / cbSceneParam._m0[86u].y;
    vec4 _2792 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, (log2((isnan(cbSceneParam._m0[77u].w) ? _563 : (isnan(_563) ? cbSceneParam._m0[77u].w : min(_563, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2794 = _2792.x;
    float _2795 = _2792.y;
    float _2796 = _2792.z;
    float _2797 = _2792.w;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_563 > cbSceneParam._m0[78u].w)
    {
        float _2831 = isnan(_563) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _563 : min(cbSceneParam._m0[80u].w, _563));
        float _2832 = _2831 / _563;
        float _2843 = _2832 * _614;
        float _2844 = _615 * _2832;
        float _2845 = (-0.0) - _2844;
        float _2847 = _2832 * _616;
        float _2849 = (cbSceneParam._m0[77u].w * _2845) / _2831;
        float _2850 = _2849 + cbSceneParam._m0[79u].w;
        float _2851 = cbSceneParam._m0[79u].w - _2844;
        float _2857 = sqrt(((_2843 * _2843) + (_2844 * _2844)) + (_2847 * _2847));
        float _2860 = (1.0 - (cbSceneParam._m0[77u].w / _2831)) * _2857;
        float _2865 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2867 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3020;
        if (abs((_2845 - _2849) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3020 = ((((_2850 > 0.0) ? exp2(_2865 * _2850) : (2.0 - exp2(_2867 * _2850))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2860;
        }
        else
        {
            float _2980 = 1.0 / cbSceneParam._m0[80u].x;
            float _2981 = isnan(_2851) ? _2850 : (isnan(_2850) ? _2851 : max(_2850, _2851));
            float _2982 = isnan(_2851) ? _2850 : (isnan(_2850) ? _2851 : min(_2850, _2851));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            _3020 = ((abs(_2857 / _2845) * cbSceneParam._m0[80u].y) * ((((_2991 - _2992) * 2.0) - ((exp2(_2865 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0)))) - exp2(_2865 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))))) * _2980)) - ((exp2(_2867 * _2991) - exp2(_2867 * _2992)) * _2980))) + (_2860 * cbSceneParam._m0[80u].z);
        }
        vec4 _3022 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, 1.0), 0.0);
        float _3031 = exp2((_3020 * (-1.44269502162933349609375)) * (1.0 - _3022.w));
        float _3032 = log2(_3031);
        float _3048 = log2(_2797);
        _2869 = (exp2(_3048 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].x)) * _3022.x) / cbSceneParam._m0[78u].x)) + _2794;
        _2871 = (exp2(_3048 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].y)) * _3022.y) / cbSceneParam._m0[78u].y)) + _2795;
        _2873 = (exp2(_3048 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].z)) * _3022.z) / cbSceneParam._m0[78u].z)) + _2796;
        _2875 = _3031 * _2797;
    }
    else
    {
        _2869 = _2794;
        _2871 = _2795;
        _2873 = _2796;
        _2875 = _2797;
    }
    float _2887 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2888 = _2887 == 3.0;
    float _2889 = log2(_2875);
    float _2896 = exp2(_2889 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2739 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _710))) + ((_2745 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1518)) * cbPerFrame._m0[3u].x));
    float _2897 = exp2(_2889 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2741 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _710))) + ((_2747 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1518)) * cbPerFrame._m0[3u].x));
    float _2898 = exp2(_2889 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2743 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _710))) + ((_2749 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1518)) * cbPerFrame._m0[3u].x));
    float _2907 = (_2887 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2907 * (_2888 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.y = _2907 * (_2888 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.z = _2907 * (_2888 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.w = cbInstanceData._m0[_2769].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2769].w;
}


