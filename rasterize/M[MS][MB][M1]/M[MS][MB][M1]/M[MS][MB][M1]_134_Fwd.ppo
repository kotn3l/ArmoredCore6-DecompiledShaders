#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1392;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3717 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3728 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3739 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3750 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) + _451;
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _554 = ((_524.z - _545) * _432) + _545;
    float _557 = ((((_524.x - _543) * _432) + _543) * 2.0) + (-1.0);
    float _558 = ((((_524.y - _544) * _432) + _544) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3761 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _604 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _607 = ((isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : min(_604, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _616 = (_607 - ((((((_597 - _598) * cbMtdParam._m0[24u].z) + _598) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _607))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3782 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _624 = (_617 * ((_479.x * cbMtdParam._m0[18u].x) - _458)) + _458;
    float _625 = (_617 * ((_479.y * cbMtdParam._m0[18u].y) - _459)) + _459;
    float _626 = (_617 * ((_479.z * cbMtdParam._m0[18u].z) - _460)) + _460;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _640 = _638.x;
    float _641 = 1.0 - _640;
    float _666 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_640 - _641) * cbMtdParam._m0[24u].w) + _641) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3793 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _675 = ((((cbMtdParam._m0[10u].x - _624) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _667) + _624;
    float _676 = ((((cbMtdParam._m0[10u].y - _625) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _667) + _625;
    float _677 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _626)) * _667) + _626;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _705 = _703.x;
    float _723 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _705) * _432) + _705;
    float _727 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _723) * cbMtdParam._m0[19u].z) + _723;
    float _729 = _727 - (_727 * _617);
    float _731 = _729 - (_729 * _667);
    float _736 = (((_499.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    vec4 _750 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _757 = (_750.x * 2.0) + (-1.0);
    float _758 = (_750.y * 2.0) + (-1.0);
    float _759 = dot(vec2(_757, _758), vec2(_757, _758));
    float _3804 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _767 = (_617 * (_750.z - _736)) + _736;
    float _770 = ((cbMtdParam._m0[23u].y - _767) * _667) + _767;
    vec4 _789 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _795 = (_789.x * 2.0) + (-1.0);
    float _796 = (_789.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _3815 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _807 = _557 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_499.x * 2.0) + (-1.0)));
    float _808 = _558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_499.y * 2.0) + (-1.0)));
    float _820 = (((_757 - _807) + (cbMtdParam._m0[21u].x * _807)) * _617) + _807;
    float _821 = (((_758 - _808) + (cbMtdParam._m0[21u].x * _808)) * _617) + _808;
    float _822 = (_617 * (sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) - _564)) + _564;
    float _833 = (((_795 - _820) + (_820 * cbMtdParam._m0[22u].z)) * _667) + _820;
    float _834 = (((_796 - _821) + (_821 * cbMtdParam._m0[22u].z)) * _667) + _821;
    float _835 = ((sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) - _822) * _667) + _822;
    float _839 = cbMtdParam._m0[22u].x + _577.w;
    float _842 = fma(_835, _249 * NORMAL.x, fma(_834, _256 * TANGENT.x, (_242 * _234) * _833));
    float _845 = fma(_835, _249 * NORMAL.y, fma(_834, _256 * TANGENT.y, (_242 * _235) * _833));
    float _848 = fma(_835, _249 * NORMAL.z, fma(_834, _256 * TANGENT.z, (_242 * _236) * _833));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _3826 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _856 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _3848 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3859 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3870 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3881 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _861 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _875 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _925 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _915);
    float _926 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _915);
    float _927 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _915);
    float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
    float _932 = _925 * _931;
    float _933 = _926 * _931;
    float _934 = _927 * _931;
    float _940 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _941 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _959 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _962 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _965 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _979 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _985 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_979].x;
    float _986 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_979].y;
    float _987 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_979].z;
    float _3892 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _990 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _991 = 1.0 - _861;
    float _992 = _988 * _991;
    float _993 = _989 * _991;
    float _994 = _990 * _991;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _861;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _861;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _861;
    float _1002 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    float _1005 = _1001 + 0.039999999105930328369140625;
    vec4 _1014 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _940, cbSceneParam._m0[86u].y * _941));
    float _1018 = ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * TEXCOORD_5.w) * _1014.x;
    float _1019 = dot(vec3(_853, _854, _855), vec3(_932, _933, _934));
    float _1022 = _1019 * 2.0;
    float _1026 = (_1022 * _853) - _932;
    float _1027 = (_1022 * _854) - _933;
    float _1028 = (_1022 * _855) - _934;
    float _1032 = abs(dot(vec3(_932, _933, _934), vec3(_853, _854, _855)));
    float _3925 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1034 = sqrt(_856);
    float _1047 = exp2((_1034 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1034 * 3.0));
    float _1053 = (1.0 - _1047) * ((_1034 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1054 = _1047 * _1034;
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1391;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1116 = fma(_1090, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082));
        float _1120 = fma(_1090, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082));
        float _1124 = fma(_1090, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082));
        float _1149 = _1082 + _853;
        float _1150 = _1086 + _854;
        float _1151 = _1090 + _855;
        float _1161 = fma(_1151, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1149)) - _1116;
        float _1162 = fma(_1151, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1149)) - _1120;
        float _1163 = fma(_1151, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1149)) - _1124;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1116 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1120 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[34u].z) + ((((((_1124 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1219 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1185.x + (-0.5));
        float _1221 = _1219 * (_1185.y + (-0.5));
        float _1222 = _1219 * (_1185.z + (-0.5));
        float _1229 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1192.x + (-0.5));
        float _1231 = _1229 * (_1192.y + (-0.5));
        float _1232 = _1229 * (_1192.z + (-0.5));
        float _1239 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1199.x + (-0.5));
        float _1241 = _1239 * (_1199.y + (-0.5));
        float _1242 = _1239 * (_1199.z + (-0.5));
        float _1249 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1206.x + (-0.5));
        float _1251 = _1249 * (_1206.y + (-0.5));
        float _1252 = _1249 * (_1206.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1273 = (dot(vec3(_853, _854, _855), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1283 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3973 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1285 + 1.0))) + _1290) * _1253;
        float _1300 = _1221 * 0.5;
        float _1301 = _1231 * 0.5;
        float _1302 = _1241 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_853, _854, _855), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4006 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1327 + 1.0))) + _1332) * _1254;
        float _1342 = _1222 * 0.5;
        float _1343 = _1232 * 0.5;
        float _1344 = _1242 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_853, _854, _855), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4039 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1369 + 1.0))) + _1374) * _1255;
        _1391 = _1222;
        _1393 = _1221;
        _1394 = _1220;
        _1395 = _1232;
        _1396 = _1231;
        _1397 = _1230;
        _1398 = _1242;
        _1399 = _1241;
        _1400 = _1240;
        _1401 = _1255;
        _1402 = _1254;
        _1403 = _1253;
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1392;
        _1393 = _1392;
        _1394 = _1392;
        _1395 = _1392;
        _1396 = _1392;
        _1397 = _1392;
        _1398 = _1392;
        _1399 = _1392;
        _1400 = _1392;
        _1401 = _1392;
        _1402 = _1392;
        _1403 = _1392;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1431 = fma(_1090, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082));
        float _1435 = fma(_1090, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082));
        float _1439 = fma(_1090, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082));
        float _1462 = _1082 + _853;
        float _1463 = _1086 + _854;
        float _1464 = _1090 + _855;
        float _1474 = fma(_1464, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1462)) - _1431;
        float _1475 = fma(_1464, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1462)) - _1435;
        float _1476 = fma(_1464, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1462)) - _1439;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1493 = ((_1480 * _1474) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1431 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1480 * _1475) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1435 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1480 * _1476) / cbModelParam._m0[35u].z) + ((((((_1439 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        float _1530 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1497.x + (-0.5));
        float _1532 = _1530 * (_1497.y + (-0.5));
        float _1533 = _1530 * (_1497.z + (-0.5));
        float _1540 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1504.x + (-0.5));
        float _1542 = _1540 * (_1504.y + (-0.5));
        float _1543 = _1540 * (_1504.z + (-0.5));
        float _1550 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1511.x + (-0.5));
        float _1552 = _1550 * (_1511.y + (-0.5));
        float _1553 = _1550 * (_1511.z + (-0.5));
        float _1560 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1518.x + (-0.5));
        float _1562 = _1560 * (_1518.y + (-0.5));
        float _1563 = _1560 * (_1518.z + (-0.5));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1531 * 0.5;
        float _1568 = _1541 * 0.5;
        float _1569 = _1551 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_853, _854, _855), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4102 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1594 + 1.0))) + _1599) * _1564;
        float _1609 = _1532 * 0.5;
        float _1610 = _1542 * 0.5;
        float _1611 = _1552 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_853, _854, _855), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4135 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1636 + 1.0))) + _1641) * _1565;
        float _1651 = _1533 * 0.5;
        float _1652 = _1543 * 0.5;
        float _1653 = _1553 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_853, _854, _855), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4168 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1678 + 1.0))) + _1683) * _1566;
        _1700 = _1533;
        _1701 = _1532;
        _1702 = _1531;
        _1703 = _1543;
        _1704 = _1542;
        _1705 = _1541;
        _1706 = _1553;
        _1707 = _1552;
        _1708 = _1551;
        _1709 = _1566;
        _1710 = _1565;
        _1711 = _1564;
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
    }
    else
    {
        _1700 = _1392;
        _1701 = _1392;
        _1702 = _1392;
        _1703 = _1392;
        _1704 = _1392;
        _1705 = _1392;
        _1706 = _1392;
        _1707 = _1392;
        _1708 = _1392;
        _1709 = _1392;
        _1710 = _1392;
        _1711 = _1392;
        _1712 = 0.0;
        _1713 = 0.0;
        _1714 = 0.0;
    }
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1404)) + _1404;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1405)) + _1405;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1406)) + _1406;
    float _1747 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1724));
    float _1768 = _1026 * 0.5;
    float _1769 = _1027 * 0.5;
    float _1770 = _1028 * 0.5;
    float _1771 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1774 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1777 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1811;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1784 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1391, _1395, _1398, _1401));
        float _1788 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1792 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1799 = dot(vec4(cbModelParam._m0[39u]), vec4(_1768, _1769, _1770, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1822;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1813 = dot(vec4(cbModelParam._m0[40u]), vec4(_1768, _1769, _1770, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1826 = (_1822 * cbModelParam._m0[1u].x) + (_1811 * (1.0 - cbModelParam._m0[1u].x));
    float _1836 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1836 : min(cbModelParam._m0[25u].z, _1836));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1884 = fma(_1090, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082)) + cbModelParam._m0[13u].w;
        float _1888 = fma(_1090, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082)) + cbModelParam._m0[14u].w;
        float _1892 = fma(_1090, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082)) + cbModelParam._m0[15u].w;
        float _1895 = fma(_1028, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026));
        float _1898 = fma(_1028, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026));
        float _1901 = fma(_1028, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026));
        float _1929;
        if (_1895 > 0.0)
        {
            _1929 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1929 = frontier_phi_14_12_ladder;
        }
        float _2131;
        if (_1898 > 0.0)
        {
            _2131 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2131 = frontier_phi_23_19_ladder;
        }
        float _2385;
        if (_1901 > 0.0)
        {
            _2385 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2385 = frontier_phi_35_30_ladder;
        }
        float _2387 = isnan(_2131) ? _1929 : (isnan(_1929) ? _2131 : min(_1929, _2131));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1895) + _1884;
        float _2393 = (_2388 * _1898) + _1888;
        float _2394 = (_2388 * _1901) + _1892;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1837);
            frontier_phi_13_35_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1917 = frontier_phi_13_35_ladder_2;
        _1919 = frontier_phi_13_35_ladder_1;
        _1921 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1026, _1027, _1028), _1837);
        _1917 = _1905.x * cbModelParam._m0[1u].y;
        _1919 = _1905.y * cbModelParam._m0[1u].y;
        _1921 = _1905.z * cbModelParam._m0[1u].y;
    }
    float _1925 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1925 : min(cbModelParam._m0[25u].w, _1925));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1090, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1090, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1090, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_1028, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026));
        float _1993 = fma(_1028, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026));
        float _1996 = fma(_1028, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026));
        float _2136;
        if (_1990 > 0.0)
        {
            _2136 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2136 = frontier_phi_25_21_ladder;
        }
        float _2412;
        if (_1993 > 0.0)
        {
            _2412 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2412 = frontier_phi_37_32_ladder;
        }
        float _2625;
        if (_1996 > 0.0)
        {
            _2625 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2625 = frontier_phi_46_43_ladder;
        }
        float _2627 = isnan(_2412) ? _2136 : (isnan(_2136) ? _2412 : min(_2136, _2412));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _1990) + _1979;
        float _2633 = (_2628 * _1993) + _1983;
        float _2634 = (_2628 * _1996) + _1987;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2635;
        float _2638 = _2635 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2634 > _2638) || ((_2634 < _2636) || ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 < _2636) || (_2632 > _2638))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2634, cbModelParam._m0[17u].z, fma(_2633, cbModelParam._m0[17u].y, _2632 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2634, cbModelParam._m0[18u].z, fma(_2633, cbModelParam._m0[18u].y, _2632 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2634, cbModelParam._m0[19u].z, fma(_2633, cbModelParam._m0[19u].y, _2632 * cbModelParam._m0[19u].x))), _1926);
            frontier_phi_22_46_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_22_46_ladder_2;
        _2017 = frontier_phi_22_46_ladder_1;
        _2019 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1026, _1027, _1028), _1926);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2032 = (((_1053 * _1002) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2034 = (((_1053 * _1004) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2036 = (((_1053 * _1005) + _1054) * _1018) * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _1018 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2090 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2094 = _2057 | 1u;
    float _2105 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_853, _854, _855));
    float _2108 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_853, _854, _855));
    float _4304 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _4315 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2113 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2115 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2122 = ((cbLight._m0[_2074].x * _2080) * _2115) + ((cbLight._m0[_2084].x * _2090) * _2113);
    float _2123 = ((_2080 * cbLight._m0[_2074].y) * _2115) + ((_2090 * cbLight._m0[_2084].y) * _2113);
    float _2124 = ((_2080 * cbLight._m0[_2074].z) * _2115) + ((_2090 * cbLight._m0[_2084].z) * _2113);
    uvec4 _2128 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2130 = _2128.x == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2130)
    {
        _2141 = _2122;
        _2143 = _2123;
        _2145 = _2124;
    }
    else
    {
        uint _2149 = _2057 + 6u;
        float _2165 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4326 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2168 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2141 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _2122;
        _2143 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _2123;
        _2145 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _2124;
    }
    bool _2148 = _2128.y == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2148)
    {
        _2186 = _2141;
        _2188 = _2143;
        _2190 = _2145;
    }
    else
    {
        uint _2356 = _2057 + 7u;
        float _2372 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4342 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2375 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2186 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2141;
        _2188 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2143;
        _2190 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2145;
    }
    uint _2193 = _2057 + 8u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _856) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2057].x + _932;
    float _2209 = cbLight._m0[_2057].y + _933;
    float _2210 = cbLight._m0[_2057].z + _934;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2057].xyz));
    float _4358 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2222 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2223 = dot(vec3(_853, _854, _855), vec3(_2215, _2216, _2217));
    float _4380 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2215, _2216, _2217));
    float _4391 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2207 * _2207;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
    float _2244 = 0.959999978542327880859375 - _999;
    float _2246 = 0.959999978542327880859375 - _1000;
    float _2247 = 0.959999978542327880859375 - _1001;
    float _2254 = 1.0 - _2207;
    float _2265 = (0.5 / (((_2222 * ((_2221 * _2254) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2254) + _2207) * _2221))) * _2221;
    float _4402 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2267 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    uint _2278 = _2057 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _856) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2094].x + _932;
    float _2292 = cbLight._m0[_2094].y + _933;
    float _2293 = cbLight._m0[_2094].z + _934;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2094].xyz));
    float _4413 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2305 = dot(vec3(_853, _854, _855), vec3(_2298, _2299, _2300));
    float _4424 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2298, _2299, _2300));
    float _4435 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2331 = 1.0 - _2290;
    float _2341 = (0.5 / (((_2222 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2331) + _2290) * _2304))) * _2304;
    float _4446 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2353 = (((((_2324 * _2244) + _1002) * cbLight._m0[_2278].x) * _2343) * _2080) + (((((_2243 * _2244) + _1002) * cbLight._m0[_2193].x) * _2267) * _2090);
    float _2354 = (((((_2324 * _2246) + _1004) * cbLight._m0[_2278].y) * _2343) * _2080) + (((((_2243 * _2246) + _1004) * cbLight._m0[_2193].y) * _2267) * _2090);
    float _2355 = (((((_2324 * _2247) + _1005) * cbLight._m0[_2278].z) * _2343) * _2080) + (((((_2243 * _2247) + _1005) * cbLight._m0[_2193].z) * _2267) * _2090);
    float _2417;
    float _2419;
    float _2421;
    if (_2130)
    {
        _2417 = _2353;
        _2419 = _2354;
        _2421 = _2355;
    }
    else
    {
        uint _2423 = _2057 + 2u;
        uint _2427 = _2057 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _856) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _932;
        float _2444 = cbLight._m0[_2423].y + _933;
        float _2445 = cbLight._m0[_2423].z + _934;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2423].xyz));
        float _4457 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2457 = dot(vec3(_853, _854, _855), vec3(_2450, _2451, _2452));
        float _4468 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4479 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2222 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2483) + _2442) * _2456))) * _2456;
        float _4490 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2417 = (((((_2476 * _2244) + _1002) * cbLight._m0[_2427].x) * _2495) * _2496) + _2353;
        _2419 = (((((_2476 * _2246) + _1004) * cbLight._m0[_2427].y) * _2495) * _2496) + _2354;
        _2421 = (((((_2476 * _2247) + _1005) * cbLight._m0[_2427].z) * _2495) * _2496) + _2355;
    }
    float _2531;
    float _2533;
    float _2535;
    if (_2148)
    {
        _2531 = _2417;
        _2533 = _2419;
        _2535 = _2421;
    }
    else
    {
        uint _2542 = _2057 + 3u;
        uint _2546 = _2057 + 11u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _856) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _932;
        float _2563 = cbLight._m0[_2542].y + _933;
        float _2564 = cbLight._m0[_2542].z + _934;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2542].xyz));
        float _4506 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2576 = dot(vec3(_853, _854, _855), vec3(_2569, _2570, _2571));
        float _4517 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4528 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
        float _2602 = 1.0 - _2561;
        float _2612 = (0.5 / (((_2222 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2602) + _2561) * _2575))) * _2575;
        float _4539 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2531 = (((((_2595 * _2244) + _1002) * cbLight._m0[_2546].x) * _2614) * _2615) + _2417;
        _2533 = (((((_2595 * _2246) + _1004) * cbLight._m0[_2546].y) * _2614) * _2615) + _2419;
        _2535 = (((((_2595 * _2247) + _1005) * cbLight._m0[_2546].z) * _2614) * _2615) + _2421;
    }
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_2055.y == 0u)
    {
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2690;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2690;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2690;
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _941) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _940) / _2706)));
        float _2727 = (log2(_2693 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            uint _2989 = 0u;
            uint _2998;
            bool _2999;
            for (;;)
            {
                _2998 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                _2999 = _2998 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2999)
                {
                    frontier_phi_61_pred = _2983;
                    frontier_phi_61_pred_1 = _2988;
                    frontier_phi_61_pred_2 = _2987;
                    frontier_phi_61_pred_3 = _2986;
                    frontier_phi_61_pred_4 = _2985;
                    frontier_phi_61_pred_5 = _2984;
                }
                else
                {
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    uint _3113;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2998;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    for (;;)
                    {
                        uint _3117 = uint(findLSB(_3113)) + (_2989 << 5u);
                        uint _3114 = (_3113 + 4294967295u) & _3113;
                        uint _3119 = _3117 * 48u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3139 = (_3117 * 48u) + 4u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3158 = (_3117 * 48u) + 8u;
                        vec3 _3169 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x));
                        float _3173 = _3133.x - _2691;
                        float _3174 = _3133.y - _2692;
                        float _3175 = _3133.z - _2693;
                        float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                        float _3179 = inversesqrt(_3176);
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3183 = dot(vec3(_959, _962, _965), vec3(_3180, _3181, _3182));
                        float _3188 = 1.0 - (_3176 * _3133.w);
                        float _4565 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3190 = sqrt(_3176) * _3152.w;
                        float _3193 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3183) + _3194;
                        float _3200 = _3190 * _3190;
                        float _3204 = ((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3189) / ((_3200 * 0.699999988079071044921875) + 1.0);
                        float _3208 = (-0.0) - _2691;
                        float _3209 = (-0.0) - _2692;
                        float _3210 = (-0.0) - _2693;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3225 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                        float _3226 = 1.0 - _1034;
                        float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                        float _3234 = _3233 * _3233;
                        float _3235 = _3234 * _3234;
                        float _3236 = _3215 + _3180;
                        float _3237 = _3216 + _3181;
                        float _3238 = _3217 + _3182;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3246 = dot(vec3(_959, _962, _965), vec3(_3215, _3216, _3217));
                        float _4581 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3250 = dot(vec3(_959, _962, _965), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                        float _4592 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                        float _3258 = _3193 * _3234;
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3183) + _3259;
                        float _4603 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3264 = 1.0 - _3234;
                        float _3274 = (0.5 / (((_3263 * ((_3249 * _3264) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3234) * _3249))) * _3263;
                        float _4614 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3285 = (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3257 * _3257) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125))) * _3189;
                        _3042 = (_3204 * _3152.x) + _3110;
                        _3043 = (_3204 * _3152.y) + _3111;
                        _3044 = (_3204 * _3152.z) + _3112;
                        _3039 = (_3285 * _3169.x) + _3107;
                        _3040 = (_3285 * _3169.y) + _3108;
                        _3041 = (_3285 * _3169.z) + _3109;
                        if (_3114 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3114;
                        }
                    }
                    frontier_phi_61_pred = _3039;
                    frontier_phi_61_pred_1 = _3044;
                    frontier_phi_61_pred_2 = _3043;
                    frontier_phi_61_pred_3 = _3042;
                    frontier_phi_61_pred_4 = _3041;
                    frontier_phi_61_pred_5 = _3040;
                }
                _2839 = frontier_phi_61_pred;
                _2849 = frontier_phi_61_pred_1;
                _2847 = frontier_phi_61_pred_2;
                _2845 = frontier_phi_61_pred_3;
                _2843 = frontier_phi_61_pred_4;
                _2841 = frontier_phi_61_pred_5;
                uint _2990 = _2989 + 1u;
                if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2983 = _2839;
                    _2984 = _2841;
                    _2985 = _2843;
                    _2986 = _2845;
                    _2987 = _2847;
                    _2988 = _2849;
                    _2989 = _2990;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((4294967295u << _2855) & _2737) == 0u)
        {
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
            _2961 = _2848;
        }
        else
        {
            float _2976 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
            float _2977 = _2976 * _2691;
            float _2978 = _2976 * _2692;
            float _2979 = _2976 * _2693;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _3090 = _2838;
                float _3091 = _2840;
                float _3092 = _2842;
                float _3093 = _2844;
                float _3094 = _2846;
                float _3095 = _2848;
                uint _3096 = _2855;
                uint _3105;
                bool _3106;
                for (;;)
                {
                    _3105 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                    _3106 = _3105 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3106)
                    {
                        frontier_phi_67_pred = _3093;
                        frontier_phi_67_pred_1 = _3094;
                        frontier_phi_67_pred_2 = _3095;
                        frontier_phi_67_pred_3 = _3092;
                        frontier_phi_67_pred_4 = _3091;
                        frontier_phi_67_pred_5 = _3090;
                    }
                    else
                    {
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3303 = _3090;
                        float _3304 = _3091;
                        float _3305 = _3092;
                        float _3306 = _3093;
                        float _3307 = _3094;
                        float _3308 = _3095;
                        uint _3309 = _3105;
                        uint _3310;
                        vec4 _3335;
                        float _3336;
                        vec4 _3351;
                        vec3 _3363;
                        vec4 _3378;
                        vec4 _3393;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3320 = ((_3096 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3309));
                            _3310 = (_3309 + 4294967295u) & _3309;
                            uint _3322 = _3320 * 40u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3336 = _3335.w;
                            uint _3338 = (_3320 * 40u) + 4u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3320 * 40u) + 8u;
                            _3363 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x));
                            uint _3365 = (_3320 * 40u) + 16u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3320 * 40u) + 20u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3320 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3320 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_2693, _3427.z, fma(_2692, _3427.y, _3427.x * _2691)) + _3427.w;
                            _3440 = !((fma(_2693, _3408.z, fma(_2692, _3408.y, _3408.x * _2691)) + _3408.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3335.x - _2691;
                                float _3468 = _3335.y - _2692;
                                float _3469 = _3335.z - _2693;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3336 * _3336));
                                float _4625 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3485 = sqrt(_3470) * _3351.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_959, _962, _965))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_2693, _3378.z, fma(_2692, _3378.y, _3378.x * _2691)) + _3378.w) / _3439;
                                float _3499 = (fma(_2693, _3393.z, fma(_2692, _3393.y, _3393.x * _2691)) + _3393.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4641 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _1034;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2977;
                                float _3529 = _3475 - _2978;
                                float _3530 = _3476 - _2979;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_959, _962, _965), vec3((-0.0) - _2977, (-0.0) - _2978, (-0.0) - _2979));
                                float _4652 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3542 = dot(vec3(_959, _962, _965), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4663 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_959, _962, _965), vec3(_3474, _3475, _3476))) + _3551;
                                float _4674 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4685 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3579 * _3363.x;
                                frontier_phi_73_pred_1 = _3579 * _3363.y;
                                frontier_phi_73_pred_2 = _3505 * _3351.z;
                                frontier_phi_73_pred_3 = _3505 * _3351.y;
                                frontier_phi_73_pred_4 = _3505 * _3351.x;
                                frontier_phi_73_pred_5 = _3579 * _3363.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3583 = frontier_phi_73_pred;
                            _3584 = frontier_phi_73_pred_1;
                            _3588 = frontier_phi_73_pred_2;
                            _3587 = frontier_phi_73_pred_3;
                            _3586 = frontier_phi_73_pred_4;
                            _3585 = frontier_phi_73_pred_5;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            if (_3310 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3310;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3293;
                        frontier_phi_67_pred_1 = _3294;
                        frontier_phi_67_pred_2 = _3295;
                        frontier_phi_67_pred_3 = _3292;
                        frontier_phi_67_pred_4 = _3291;
                        frontier_phi_67_pred_5 = _3290;
                    }
                    _2958 = frontier_phi_67_pred;
                    _2960 = frontier_phi_67_pred_1;
                    _2962 = frontier_phi_67_pred_2;
                    _2956 = frontier_phi_67_pred_3;
                    _2954 = frontier_phi_67_pred_4;
                    _2952 = frontier_phi_67_pred_5;
                    uint _3097 = _3096 + 1u;
                    if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3090 = _2952;
                        _3091 = _2954;
                        _3092 = _2956;
                        _3093 = _2958;
                        _3094 = _2960;
                        _3095 = _2962;
                        _3096 = _3097;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2960;
                frontier_phi_55_56_ladder_1 = _2962;
                frontier_phi_55_56_ladder_2 = _2958;
                frontier_phi_55_56_ladder_3 = _2956;
                frontier_phi_55_56_ladder_4 = _2954;
                frontier_phi_55_56_ladder_5 = _2952;
            }
            else
            {
                frontier_phi_55_56_ladder = _2846;
                frontier_phi_55_56_ladder_1 = _2848;
                frontier_phi_55_56_ladder_2 = _2844;
                frontier_phi_55_56_ladder_3 = _2842;
                frontier_phi_55_56_ladder_4 = _2840;
                frontier_phi_55_56_ladder_5 = _2838;
            }
            _2951 = frontier_phi_55_56_ladder_5;
            _2953 = frontier_phi_55_56_ladder_4;
            _2955 = frontier_phi_55_56_ladder_3;
            _2957 = frontier_phi_55_56_ladder_2;
            _2959 = frontier_phi_55_56_ladder;
            _2961 = frontier_phi_55_56_ladder_1;
        }
        float _2966 = isnan(1.0) ? _1018 : (isnan(_1018) ? 1.0 : min(_1018, 1.0));
        _2750 = (_2966 * _2957) + _2186;
        _2752 = (_2966 * _2959) + _2188;
        _2754 = (_2966 * _2961) + _2190;
        _2756 = ((_2951 * _1002) * _2966) + _2531;
        _2758 = ((_2953 * _1004) * _2966) + _2533;
        _2760 = ((_2955 * _1005) * _2966) + _2535;
    }
    else
    {
        _2750 = _2186;
        _2752 = _2188;
        _2754 = _2190;
        _2756 = _2531;
        _2758 = _2533;
        _2760 = _2535;
    }
    float _4701 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4712 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _4723 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    uint _2780 = _281 + 6u;
    float _2788 = _940 / cbSceneParam._m0[86u].x;
    float _2789 = _941 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _875 : (isnan(_875) ? cbSceneParam._m0[77u].w : min(_875, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_875 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_875) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _875 : min(cbSceneParam._m0[80u].w, _875));
        float _2864 = _2863 / _875;
        float _2875 = _2864 * _925;
        float _2876 = _926 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2879 = _2864 * _927;
        float _2881 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2882 = _2881 + cbSceneParam._m0[79u].w;
        float _2883 = cbSceneParam._m0[79u].w - _2876;
        float _2889 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2879 * _2879));
        float _2892 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2889;
        float _2897 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2899 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3052;
        if (abs((_2877 - _2881) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3052 = ((((_2882 > 0.0) ? exp2(_2897 * _2882) : (2.0 - exp2(_2899 * _2882))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2892;
        }
        else
        {
            float _3012 = 1.0 / cbSceneParam._m0[80u].x;
            float _3013 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : max(_2882, _2883));
            float _3014 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : min(_2882, _2883));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            _3052 = ((abs(_2889 / _2877) * cbSceneParam._m0[80u].y) * ((((_3023 - _3024) * 2.0) - ((exp2(_2897 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0)))) - exp2(_2897 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))))) * _3012)) - ((exp2(_2899 * _3023) - exp2(_2899 * _3024)) * _3012))) + (_2892 * cbSceneParam._m0[80u].z);
        }
        vec4 _3054 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3063 = exp2((_3052 * (-1.44269502162933349609375)) * (1.0 - _3054.w));
        float _3064 = log2(_3063);
        float _3080 = log2(_2808);
        _2901 = (exp2(_3080 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].x)) * _3054.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2903 = (exp2(_3080 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].y)) * _3054.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2905 = (exp2(_3080 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].z)) * _3054.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2907 = _3063 * _2808;
    }
    else
    {
        _2901 = _2805;
        _2903 = _2806;
        _2905 = _2807;
        _2907 = _2808;
    }
    float _2919 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2920 = _2919 == 3.0;
    float _2921 = log2(_2907);
    float _2928 = exp2(_2921 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2750 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1018))) + ((_2756 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _2929 = exp2(_2921 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2752 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1018))) + ((_2758 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _2930 = exp2(_2921 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2754 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1018))) + ((_2760 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1826)) * cbPerFrame._m0[3u].x));
    float _2939 = (_2919 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2939 * (_2920 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.y = _2939 * (_2920 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2903)));
    SV_Target.z = _2939 * (_2920 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.w = cbInstanceData._m0[_2780].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
}


