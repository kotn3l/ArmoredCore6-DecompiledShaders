#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1431;
float _4092;
float _4093;
float _4094;
float _4095;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[24u].y) + _384) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4104 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _409 = (_402 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _410 = (_402 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _411 = (_402 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    float _498 = _494.z;
    float _507 = ((_477.z - _498) * _402) + _498;
    float _510 = ((((_477.x - _496) * _402) + _496) * 2.0) + (-1.0);
    float _511 = ((((_477.y - _497) * _402) + _497) * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _4115 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _517 = sqrt(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))));
    float _520 = _510 + ((((_450.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _521 = _511 + ((((_450.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _524 = fma(_517, _253, fma(_521, _260, _520 * _246));
    float _527 = fma(_517, _254, fma(_521, _261, _520 * _247));
    float _530 = fma(_517, _255, fma(_521, _262, _520 * _248));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _583 = ((_578 - _579) * cbMtdParam._m0[24u].z) + _579;
    float _585 = (cbMtdParam._m0[19u].x + dot(vec4(_534 * _524, _534 * _527, _534 * _530, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_583 * cbMtdParam._m0[21u].z);
    float _4126 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _588 = (-0.0) - cbMtdParam._m0[24u].x;
    float _590 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
    float _598 = _586 - ((_586 * TEXCOORD_8.x) * _591);
    float _599 = _586 - ((_586 * TEXCOORD_8.y) * _591);
    float _600 = _586 - ((_586 * TEXCOORD_8.z) * _591);
    float _607 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _611 = ((isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : min(_607, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _619 = (_611 - (((_583 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _611))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4157 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _624 = ((_598 * ((_430.x * cbMtdParam._m0[18u].x) - _409)) * _620) + _409;
    float _625 = ((_599 * ((_430.y * cbMtdParam._m0[18u].y) - _410)) * _620) + _410;
    float _626 = ((_600 * ((_430.z * cbMtdParam._m0[18u].z) - _411)) * _620) + _411;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _640 = _638.x;
    float _641 = 1.0 - _640;
    float _668 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_640 - _641) * cbMtdParam._m0[24u].w) + _641) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4168 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _677 = ((((cbMtdParam._m0[10u].x - _624) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _669) + _624;
    float _678 = ((((cbMtdParam._m0[10u].y - _625) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _669) + _625;
    float _679 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _626)) * _669) + _626;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _707 = _705.x;
    float _725 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _707) * _402) + _707;
    float _729 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _725) * cbMtdParam._m0[19u].z) + _725;
    float _732 = _729 - ((_620 * _598) * _729);
    float _734 = _732 - (_732 * _669);
    float _739 = (((_450.z - _507) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _507;
    vec4 _753 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _760 = (_753.x * 2.0) + (-1.0);
    float _761 = (_753.y * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _4179 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _771 = (((_753.z - _739) * _598) * _620) + _739;
    float _774 = ((cbMtdParam._m0[23u].y - _771) * _669) + _771;
    vec4 _793 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _799 = (_793.x * 2.0) + (-1.0);
    float _800 = (_793.y * 2.0) + (-1.0);
    float _801 = dot(vec2(_799, _800), vec2(_799, _800));
    float _4190 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _821 = (((cbMtdParam._m0[21u].x * _520) + ((_760 - _520) * _598)) * _620) + _520;
    float _822 = (((cbMtdParam._m0[21u].x * _521) + ((_761 - _521) * _599)) * _620) + _521;
    float _823 = (((sqrt(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) - _517) * _600) * _620) + _517;
    float _834 = (((_799 - _821) + (_821 * cbMtdParam._m0[22u].z)) * _669) + _821;
    float _835 = (((_800 - _822) + (_822 * cbMtdParam._m0[22u].z)) * _669) + _822;
    float _836 = ((sqrt(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) - _823) * _669) + _823;
    float _838 = cbMtdParam._m0[22u].x + _550.w;
    float _841 = fma(_836, _253, fma(_835, _260, _834 * _246));
    float _844 = fma(_836, _254, fma(_835, _261, _834 * _247));
    float _847 = fma(_836, _255, fma(_835, _262, _834 * _248));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _4201 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _855 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4223 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4234 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4245 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4256 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _860 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _924 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _914);
    float _925 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _914);
    float _926 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _914);
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _924 * _930;
    float _932 = _925 * _930;
    float _933 = _926 * _930;
    vec4 _938 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _940 = _938.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1112 = sqrt(((_924 * _924) + (_925 * _925)) + (_926 * _926));
        float _1118 = (cbMatDynParam._m0[5u].x * _1112) + cbMatDynParam._m0[5u].y;
        float _4267 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1123 = (cbMatDynParam._m0[5u].z * _1112) + cbMatDynParam._m0[5u].w;
        float _4278 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) - _1119)) + _1119) < ((_940 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _973 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _976 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _989 = _265 + 9u;
    uint _990 = _989 + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * cbInstanceData._m0[_990].z;
    float _4289 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _4311 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _1002 = 1.0 - _860;
    float _1003 = _999 * _1002;
    float _1004 = _1000 * _1002;
    float _1005 = _1001 * _1002;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _860;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _860;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _860;
    float _1013 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    vec4 _1025 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1029 = ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * TEXCOORD_5.w) * _1025.x;
    float _1030 = dot(vec3(_852, _853, _854), vec3(_931, _932, _933));
    float _1033 = _1030 * 2.0;
    float _1037 = (_1033 * _852) - _931;
    float _1038 = (_1033 * _853) - _932;
    float _1039 = (_1033 * _854) - _933;
    float _1043 = abs(dot(vec3(_931, _932, _933), vec3(_852, _853, _854)));
    float _4322 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1045 = sqrt(_855);
    float _1058 = exp2((_1045 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1045 * 3.0));
    float _1064 = (1.0 - _1058) * ((_1045 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1065 = _1058 * _1045;
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1159 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1163 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1188 = _1093 + _852;
        float _1189 = _1097 + _853;
        float _1190 = _1101 + _854;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_852, _853, _854), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4370 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_852, _853, _854), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4403 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_852, _853, _854), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4436 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1473 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1477 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1481 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1504 = _1093 + _852;
        float _1505 = _1097 + _853;
        float _1506 = _1101 + _854;
        float _1516 = fma(_1506, cbModelParam._m0[30u].z, fma(_1505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1504)) - _1473;
        float _1517 = fma(_1506, cbModelParam._m0[31u].z, fma(_1505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1504)) - _1477;
        float _1518 = fma(_1506, cbModelParam._m0[32u].z, fma(_1505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1504)) - _1481;
        float _1522 = inversesqrt(dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518)));
        float _1535 = ((_1522 * _1516) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1473 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1522 * _1517) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1477 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1522 * _1518) / cbModelParam._m0[35u].z) + ((((((_1481 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        float _1572 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1539.x + (-0.5));
        float _1574 = _1572 * (_1539.y + (-0.5));
        float _1575 = _1572 * (_1539.z + (-0.5));
        float _1582 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1546.x + (-0.5));
        float _1584 = _1582 * (_1546.y + (-0.5));
        float _1585 = _1582 * (_1546.z + (-0.5));
        float _1592 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1553.x + (-0.5));
        float _1594 = _1592 * (_1553.y + (-0.5));
        float _1595 = _1592 * (_1553.z + (-0.5));
        float _1602 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1560.x + (-0.5));
        float _1604 = _1602 * (_1560.y + (-0.5));
        float _1605 = _1602 * (_1560.z + (-0.5));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = _1573 * 0.5;
        float _1610 = _1583 * 0.5;
        float _1611 = _1593 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_852, _853, _854), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4499 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1636 + 1.0))) + _1641) * _1606;
        float _1651 = _1574 * 0.5;
        float _1652 = _1584 * 0.5;
        float _1653 = _1594 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_852, _853, _854), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4510 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4521 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4532 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_1678 + 1.0))) + _1683) * _1607;
        float _1693 = _1575 * 0.5;
        float _1694 = _1585 * 0.5;
        float _1695 = _1595 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_852, _853, _854), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4543 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4554 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4565 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_1720 + 1.0))) + _1725) * _1608;
        _1742 = _1575;
        _1743 = _1574;
        _1744 = _1573;
        _1745 = _1585;
        _1746 = _1584;
        _1747 = _1583;
        _1748 = _1595;
        _1749 = _1594;
        _1750 = _1593;
        _1751 = _1608;
        _1752 = _1607;
        _1753 = _1606;
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
    }
    else
    {
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = _1431;
        _1752 = _1431;
        _1753 = _1431;
        _1754 = 0.0;
        _1755 = 0.0;
        _1756 = 0.0;
    }
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1443)) + _1443;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1444)) + _1444;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1445)) + _1445;
    float _1789 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1766));
    float _1810 = _1037 * 0.5;
    float _1811 = _1038 * 0.5;
    float _1812 = _1039 * 0.5;
    float _1813 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1816 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1819 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1853;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1826 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1830 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1834 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1841 = dot(vec4(cbModelParam._m0[39u]), vec4(_1810, _1811, _1812, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1864;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1855 = dot(vec4(cbModelParam._m0[40u]), vec4(_1810, _1811, _1812, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1868 = (_1864 * cbModelParam._m0[1u].x) + (_1853 * (1.0 - cbModelParam._m0[1u].x));
    float _1878 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1878 : min(cbModelParam._m0[25u].z, _1878));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1926 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1930 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1934 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1937 = fma(_1039, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037));
        float _1940 = fma(_1039, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037));
        float _1943 = fma(_1039, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037));
        float _1971;
        if (_1937 > 0.0)
        {
            _1971 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1971 = frontier_phi_17_15_ladder;
        }
        float _2142;
        if (_1940 > 0.0)
        {
            _2142 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2142 = frontier_phi_26_22_ladder;
        }
        float _2437;
        if (_1943 > 0.0)
        {
            _2437 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2437 = frontier_phi_38_33_ladder;
        }
        float _2439 = isnan(_2142) ? _1971 : (isnan(_1971) ? _2142 : min(_1971, _2142));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1937) + _1926;
        float _2445 = (_2440 * _1940) + _1930;
        float _2446 = (_2440 * _1943) + _1934;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2447;
        float _2451 = _2447 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 > _2451) || ((_2445 < _2449) || ((_2444 < _2449) || (_2444 > _2451))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2446, cbModelParam._m0[9u].z, fma(_2445, cbModelParam._m0[9u].y, _2444 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2446, cbModelParam._m0[10u].z, fma(_2445, cbModelParam._m0[10u].y, _2444 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2446, cbModelParam._m0[11u].z, fma(_2445, cbModelParam._m0[11u].y, _2444 * cbModelParam._m0[11u].x))), _1879);
            frontier_phi_16_38_ladder = _2591.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2591.x * cbModelParam._m0[1u].y;
        }
        _1959 = frontier_phi_16_38_ladder_2;
        _1961 = frontier_phi_16_38_ladder_1;
        _1963 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1037, _1038, _1039), _1879);
        _1959 = _1947.x * cbModelParam._m0[1u].y;
        _1961 = _1947.y * cbModelParam._m0[1u].y;
        _1963 = _1947.z * cbModelParam._m0[1u].y;
    }
    float _1967 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1967 : min(cbModelParam._m0[25u].w, _1967));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2021 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _2025 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _2029 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2032 = fma(_1039, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037));
        float _2035 = fma(_1039, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037));
        float _2038 = fma(_1039, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037));
        float _2147;
        if (_2032 > 0.0)
        {
            _2147 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2147 = frontier_phi_28_24_ladder;
        }
        float _2464;
        if (_2035 > 0.0)
        {
            _2464 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2464 = frontier_phi_40_35_ladder;
        }
        float _2802;
        if (_2038 > 0.0)
        {
            _2802 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2802 = frontier_phi_50_47_ladder;
        }
        float _2804 = isnan(_2464) ? _2147 : (isnan(_2147) ? _2464 : min(_2147, _2464));
        float _2805 = isnan(_2802) ? _2804 : (isnan(_2804) ? _2802 : min(_2804, _2802));
        float _2809 = (_2805 * _2032) + _2021;
        float _2810 = (_2805 * _2035) + _2025;
        float _2811 = (_2805 * _2038) + _2029;
        float _2812 = _2805 * 9.9999997473787516355514526367188e-05;
        float _2813 = (-1.0) - _2812;
        float _2815 = _2812 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2811 > _2815) || ((_2811 < _2813) || ((_2810 > _2815) || ((_2810 < _2813) || ((_2809 < _2813) || (_2809 > _2815))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2811, cbModelParam._m0[17u].z, fma(_2810, cbModelParam._m0[17u].y, _2809 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2811, cbModelParam._m0[18u].z, fma(_2810, cbModelParam._m0[18u].y, _2809 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2811, cbModelParam._m0[19u].z, fma(_2810, cbModelParam._m0[19u].y, _2809 * cbModelParam._m0[19u].x))), _1968);
            frontier_phi_25_50_ladder = _2933.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2933.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2933.x * cbModelParam._m0[1u].z;
        }
        _2057 = frontier_phi_25_50_ladder_2;
        _2059 = frontier_phi_25_50_ladder_1;
        _2061 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1037, _1038, _1039), _1968);
        _2057 = _2041.x * cbModelParam._m0[1u].z;
        _2059 = _2041.y * cbModelParam._m0[1u].z;
        _2061 = _2041.z * cbModelParam._m0[1u].z;
    }
    float _2074 = (((_1064 * _1013) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2076 = (((_1064 * _1015) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2059 - _1961)) + _1961);
    float _2078 = (((_1064 * _1016) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2061 - _1963)) + _1963);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2074 * cbSceneParam._m0[91u].x));
    float _2121 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2134 = _2121 / _2133;
    float _2135 = _2125 / _2133;
    float _2136 = _2129 / _2133;
    float _2283;
    float _2284;
    float _2285;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2163 = ((uint(_2136 > cbSceneParam._m0[59u].y) + uint(_2136 > cbSceneParam._m0[59u].x)) + uint(_2136 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2164 = _2163 + 43u;
        uint _2172 = _2163 + 44u;
        uint _2180 = _2163 + 45u;
        uint _2188 = _2163 + 46u;
        float _2199 = fma(_2133, cbSceneParam._m0[_2164].w, fma(_2129, cbSceneParam._m0[_2164].z, fma(_2125, cbSceneParam._m0[_2164].y, _2121 * cbSceneParam._m0[_2164].x)));
        float _2203 = fma(_2133, cbSceneParam._m0[_2172].w, fma(_2129, cbSceneParam._m0[_2172].z, fma(_2125, cbSceneParam._m0[_2172].y, _2121 * cbSceneParam._m0[_2172].x)));
        float _2211 = fma(_2133, cbSceneParam._m0[_2188].w, fma(_2129, cbSceneParam._m0[_2188].z, fma(_2125, cbSceneParam._m0[_2188].y, _2121 * cbSceneParam._m0[_2188].x)));
        float _2216 = cbSceneParam._m0[33u].z * _2211;
        float _2218 = cbSceneParam._m0[33u].w * _2211;
        float _2221 = fma(_2133, cbSceneParam._m0[_2180].w, fma(_2129, cbSceneParam._m0[_2180].z, fma(_2125, cbSceneParam._m0[_2180].y, _2121 * cbSceneParam._m0[_2180].x))) / _2211;
        float _2269 = (cbSceneParam._m0[33u].x - sqrt(((_2135 * _2135) + (_2134 * _2134)) + (_2136 * _2136))) * cbSceneParam._m0[33u].y;
        float _4691 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2276 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 + _2199) / _2211, (_2218 + _2203) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 + _2199) / _2211, (_2203 - _2216) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 - _2216) / _2211, (_2203 - _2218) / _2211), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 - _2218) / _2211, (_2216 + _2203) / _2211), _2221), 0.0)).x), vec4(0.25)));
        _2283 = 1.0 - (_2276 * cbSceneParam._m0[34u].x);
        _2284 = 1.0 - (_2276 * cbSceneParam._m0[34u].y);
        _2285 = 1.0 - (_2276 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2283 = 1.0;
        _2284 = 1.0;
        _2285 = 1.0;
    }
    float _2349;
    float _2351;
    float _2353;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2337 = fma(_2133, cbSceneParam._m0[63u].w, fma(_2129, cbSceneParam._m0[63u].z, fma(_2125, cbSceneParam._m0[63u].y, _2121 * cbSceneParam._m0[63u].x)));
        float _2338 = fma(_2133, cbSceneParam._m0[60u].w, fma(_2129, cbSceneParam._m0[60u].z, fma(_2125, cbSceneParam._m0[60u].y, _2121 * cbSceneParam._m0[60u].x))) / _2337;
        float _2339 = fma(_2133, cbSceneParam._m0[61u].w, fma(_2129, cbSceneParam._m0[61u].z, fma(_2125, cbSceneParam._m0[61u].y, _2121 * cbSceneParam._m0[61u].x))) / _2337;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2338 >= cbSceneParam._m0[64u].x) && (_2339 >= cbSceneParam._m0[64u].y)) && (_2338 <= cbSceneParam._m0[64u].z)) && (_2339 <= cbSceneParam._m0[64u].w))
        {
            float _2477 = fma(_2133, cbSceneParam._m0[62u].w, fma(_2129, cbSceneParam._m0[62u].z, fma(_2125, cbSceneParam._m0[62u].y, _2121 * cbSceneParam._m0[62u].x))) / _2337;
            float _2481 = isnan(cbSceneParam._m0[41u].w) ? _2477 : (isnan(_2477) ? cbSceneParam._m0[41u].w : max(_2477, cbSceneParam._m0[41u].w));
            float _2524 = (cbSceneParam._m0[33u].x - sqrt(((_2135 * _2135) + (_2134 * _2134)) + (_2136 * _2136))) * cbSceneParam._m0[33u].y;
            float _4707 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
            float _2531 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2338, cbSceneParam._m0[33u].w + _2339), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2338, _2339 - cbSceneParam._m0[33u].z), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2338 - cbSceneParam._m0[33u].z, _2339 - cbSceneParam._m0[33u].w), _2481), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2338 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2339), _2481), 0.0)).x), vec4(0.25)));
            float _2535 = 1.0 - (_2531 * cbSceneParam._m0[34u].x);
            float _2536 = 1.0 - (_2531 * cbSceneParam._m0[34u].y);
            float _2537 = 1.0 - (_2531 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
            frontier_phi_37_36_ladder_1 = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
            frontier_phi_37_36_ladder_2 = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
        }
        else
        {
            frontier_phi_37_36_ladder = _2285;
            frontier_phi_37_36_ladder_1 = _2284;
            frontier_phi_37_36_ladder_2 = _2283;
        }
        _2349 = frontier_phi_37_36_ladder_2;
        _2351 = frontier_phi_37_36_ladder_1;
        _2353 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2349 = _2283;
        _2351 = _2284;
        _2353 = _2285;
    }
    uvec4 _2358 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2360 = _2358.x * 14u;
    uint _2361 = _2360 + 13u;
    float _2368 = _1029 + (-1.0);
    float _2373 = (cbLight._m0[_2361].x * _2368) + 1.0;
    float _2374 = (cbLight._m0[_2361].y * _2368) + 1.0;
    float _2375 = (cbLight._m0[_2361].z * _2368) + 1.0;
    float _2376 = (cbLight._m0[_2361].w * _2368) + 1.0;
    uint _2377 = _2360 + 5u;
    float _2383 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
    uint _2387 = _2360 + 4u;
    float _2396 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2400 = _2360 | 1u;
    float _2411 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_852, _853, _854));
    float _2414 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_852, _853, _854));
    float _4743 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _4754 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2419 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * 0.3183098733425140380859375;
    float _2421 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * 0.3183098733425140380859375;
    float _2428 = ((cbLight._m0[_2377].x * _2383) * _2421) + (((cbLight._m0[_2387].x * _2349) * _2396) * _2419);
    float _2429 = ((_2383 * cbLight._m0[_2377].y) * _2421) + (((cbLight._m0[_2387].y * _2351) * _2396) * _2419);
    float _2430 = ((_2383 * cbLight._m0[_2377].z) * _2421) + (((cbLight._m0[_2387].z * _2353) * _2396) * _2419);
    uvec4 _2434 = floatBitsToUint(cbLight._m0[_2360 + 12u]);
    bool _2436 = _2434.x == 0u;
    float _2538;
    float _2540;
    float _2542;
    if (_2436)
    {
        _2538 = _2428;
        _2540 = _2429;
        _2542 = _2430;
    }
    else
    {
        uint _2546 = _2360 + 6u;
        float _2562 = (dot(vec3(cbLight._m0[_2360 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2563 = _2562 * _2562;
        float _4765 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2564 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2565 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2538 = (((cbLight._m0[_2546].x * 0.3183098733425140380859375) * _2564) * _2565) + _2428;
        _2540 = (((cbLight._m0[_2546].y * 0.3183098733425140380859375) * _2564) * _2565) + _2429;
        _2542 = (((cbLight._m0[_2546].z * 0.3183098733425140380859375) * _2564) * _2565) + _2430;
    }
    bool _2545 = _2434.y == 0u;
    float _2600;
    float _2602;
    float _2604;
    if (_2545)
    {
        _2600 = _2538;
        _2602 = _2540;
        _2604 = _2542;
    }
    else
    {
        uint _2773 = _2360 + 7u;
        float _2789 = (dot(vec3(cbLight._m0[_2360 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2790 = _2789 * _2789;
        float _4781 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2791 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2792 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2600 = (((cbLight._m0[_2773].x * 0.3183098733425140380859375) * _2791) * _2792) + _2538;
        _2602 = (((cbLight._m0[_2773].y * 0.3183098733425140380859375) * _2791) * _2792) + _2540;
        _2604 = (((cbLight._m0[_2773].z * 0.3183098733425140380859375) * _2791) * _2792) + _2542;
    }
    uint _2607 = _2360 + 8u;
    float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _855) * 0.949999988079071044921875);
    float _2621 = _2620 * _2620;
    float _2622 = cbLight._m0[_2360].x + _931;
    float _2623 = cbLight._m0[_2360].y + _932;
    float _2624 = cbLight._m0[_2360].z + _933;
    float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
    float _2629 = _2628 * _2622;
    float _2630 = _2628 * _2623;
    float _2631 = _2628 * _2624;
    float _2632 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2360].xyz));
    float _4797 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _4808 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2636 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
    float _2637 = dot(vec3(_852, _853, _854), vec3(_2629, _2630, _2631));
    float _4819 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2629, _2630, _2631));
    float _4830 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2621 * _2621;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
    float _2658 = 0.959999978542327880859375 - _1010;
    float _2660 = 0.959999978542327880859375 - _1011;
    float _2661 = 0.959999978542327880859375 - _1012;
    float _2668 = 1.0 - _2621;
    float _2679 = (0.5 / (((_2636 * ((_2635 * _2668) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2668) + _2621) * _2635))) * _2635;
    float _4841 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2681 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    uint _2695 = _2360 + 9u;
    float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _855) * 0.949999988079071044921875);
    float _2707 = _2706 * _2706;
    float _2708 = cbLight._m0[_2400].x + _931;
    float _2709 = cbLight._m0[_2400].y + _932;
    float _2710 = cbLight._m0[_2400].z + _933;
    float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
    float _2715 = _2714 * _2708;
    float _2716 = _2714 * _2709;
    float _2717 = _2714 * _2710;
    float _2718 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2400].xyz));
    float _4852 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
    float _2722 = dot(vec3(_852, _853, _854), vec3(_2715, _2716, _2717));
    float _4863 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2725 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
    float _2726 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2715, _2716, _2717));
    float _4874 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2730 = _2707 * _2707;
    float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
    float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
    float _2748 = 1.0 - _2707;
    float _2758 = (0.5 / (((_2636 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2748) + _2707) * _2721))) * _2721;
    float _4885 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2760 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
    float _2770 = (((((_2741 * _2658) + _1013) * cbLight._m0[_2695].x) * _2760) * _2383) + ((((cbLight._m0[_2607].x * _2349) * ((_2657 * _2658) + _1013)) * _2681) * _2396);
    float _2771 = (((((_2741 * _2660) + _1015) * cbLight._m0[_2695].y) * _2760) * _2383) + ((((cbLight._m0[_2607].y * _2351) * ((_2657 * _2660) + _1015)) * _2681) * _2396);
    float _2772 = (((((_2741 * _2661) + _1016) * cbLight._m0[_2695].z) * _2760) * _2383) + ((((cbLight._m0[_2607].z * _2353) * ((_2657 * _2661) + _1016)) * _2681) * _2396);
    float _2828;
    float _2830;
    float _2832;
    if (_2436)
    {
        _2828 = _2770;
        _2830 = _2771;
        _2832 = _2772;
    }
    else
    {
        uint _2834 = _2360 + 2u;
        uint _2838 = _2360 + 10u;
        float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2834].w)) * _855) * 0.949999988079071044921875);
        float _2853 = _2852 * _2852;
        float _2854 = cbLight._m0[_2834].x + _931;
        float _2855 = cbLight._m0[_2834].y + _932;
        float _2856 = cbLight._m0[_2834].z + _933;
        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
        float _2861 = _2860 * _2854;
        float _2862 = _2860 * _2855;
        float _2863 = _2860 * _2856;
        float _2864 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2834].xyz));
        float _4896 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _2868 = dot(vec3(_852, _853, _854), vec3(_2861, _2862, _2863));
        float _4907 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
        float _2872 = dot(vec3(cbLight._m0[_2834].xyz), vec3(_2861, _2862, _2863));
        float _4918 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2876 = _2853 * _2853;
        float _2880 = ((_2871 * _2871) * (_2876 + (-1.0))) + 1.0;
        float _2887 = exp2(log2(1.0 - (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) * 5.0);
        float _2894 = 1.0 - _2853;
        float _2904 = (0.5 / (((_2636 * ((_2867 * _2894) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _2894) + _2853) * _2867))) * _2867;
        float _4929 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2906 = (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2876 / ((_2880 * _2880) * 3.141590118408203125));
        float _2907 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2828 = (((((_2887 * _2658) + _1013) * cbLight._m0[_2838].x) * _2906) * _2907) + _2770;
        _2830 = (((((_2887 * _2660) + _1015) * cbLight._m0[_2838].y) * _2906) * _2907) + _2771;
        _2832 = (((((_2887 * _2661) + _1016) * cbLight._m0[_2838].z) * _2906) * _2907) + _2772;
    }
    float _2938;
    float _2940;
    float _2942;
    if (_2545)
    {
        _2938 = _2828;
        _2940 = _2830;
        _2942 = _2832;
    }
    else
    {
        uint _2949 = _2360 + 3u;
        uint _2953 = _2360 + 11u;
        float _2967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2949].w)) * _855) * 0.949999988079071044921875);
        float _2968 = _2967 * _2967;
        float _2969 = cbLight._m0[_2949].x + _931;
        float _2970 = cbLight._m0[_2949].y + _932;
        float _2971 = cbLight._m0[_2949].z + _933;
        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
        float _2976 = _2975 * _2969;
        float _2977 = _2975 * _2970;
        float _2978 = _2975 * _2971;
        float _2979 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2949].xyz));
        float _4945 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2982 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
        float _2983 = dot(vec3(_852, _853, _854), vec3(_2976, _2977, _2978));
        float _4956 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2986 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _2987 = dot(vec3(cbLight._m0[_2949].xyz), vec3(_2976, _2977, _2978));
        float _4967 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2991 = _2968 * _2968;
        float _2995 = ((_2986 * _2986) * (_2991 + (-1.0))) + 1.0;
        float _3002 = exp2(log2(1.0 - (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) * 5.0);
        float _3009 = 1.0 - _2968;
        float _3019 = (0.5 / (((_2636 * ((_2982 * _3009) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2636 * _3009) + _2968) * _2982))) * _2982;
        float _4978 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3021 = (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2991 / ((_2995 * _2995) * 3.141590118408203125));
        float _3022 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2938 = (((((_3002 * _2658) + _1013) * cbLight._m0[_2953].x) * _3021) * _3022) + _2828;
        _2940 = (((((_3002 * _2660) + _1015) * cbLight._m0[_2953].y) * _3021) * _3022) + _2830;
        _2942 = (((((_3002 * _2661) + _1016) * cbLight._m0[_2953].z) * _3021) * _3022) + _2832;
    }
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_2358.y == 0u)
    {
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.x;
        uint _3055 = uint((float(_3043.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _3044))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _3044)));
        float _3065 = (log2(_2136 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3066 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        uint _3069 = uint(isnan(14.0) ? _3066 : (isnan(_3066) ? 14.0 : min(_3066, 14.0)));
        uvec4 _3074 = texelFetch(g_lightClusterGridBuffer, int(((_3069 << 2u) + (_3055 << 6u)) >> 2u));
        uint _3075 = _3074.x;
        uint _3076 = _3043.z;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        if (((((1u << ((_3076 >> 4u) & 15u)) + 4294967295u) & _3075) == 0u) || ((_3076 & 240u) == 0u))
        {
            _3155 = 0.0;
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
        }
        else
        {
            float _3156;
            float _3158;
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            uint _3313 = 0u;
            uint _3322;
            bool _3323;
            for (;;)
            {
                _3322 = texelFetch(g_lightClassification, int((((_3069 << 5u) + (_3055 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                _3323 = _3322 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3323)
                {
                    frontier_phi_71_pred = _3312;
                    frontier_phi_71_pred_1 = _3311;
                    frontier_phi_71_pred_2 = _3310;
                    frontier_phi_71_pred_3 = _3309;
                    frontier_phi_71_pred_4 = _3308;
                    frontier_phi_71_pred_5 = _3307;
                }
                else
                {
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    uint _3458;
                    _3452 = _3307;
                    _3453 = _3308;
                    _3454 = _3309;
                    _3455 = _3310;
                    _3456 = _3311;
                    _3457 = _3312;
                    _3458 = _3322;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    for (;;)
                    {
                        uint _3462 = uint(findLSB(_3458)) + (_3313 << 5u);
                        uint _3459 = (_3458 + 4294967295u) & _3458;
                        uint _3464 = _3462 * 48u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3464)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 3u)).x));
                        uint _3484 = (_3462 * 48u) + 4u;
                        vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 3u)).x));
                        uint _3503 = (_3462 * 48u) + 8u;
                        vec3 _3514 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3503)).x, texelFetch(g_PointLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3503 + 2u)).x));
                        float _3518 = _3478.x - _2134;
                        float _3519 = _3478.y - _2135;
                        float _3520 = _3478.z - _2136;
                        float _3521 = dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520));
                        float _3524 = inversesqrt(_3521);
                        float _3525 = _3524 * _3518;
                        float _3526 = _3524 * _3519;
                        float _3527 = _3524 * _3520;
                        float _3528 = dot(vec3(_970, _973, _976), vec3(_3525, _3526, _3527));
                        float _3533 = 1.0 - (_3521 * _3478.w);
                        float _5004 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3534 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                        float _3535 = sqrt(_3521) * _3497.w;
                        float _3538 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3528) + _3539;
                        float _3545 = _3535 * _3535;
                        float _3549 = ((isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0))) * _3534) / ((_3545 * 0.699999988079071044921875) + 1.0);
                        float _3553 = (-0.0) - _2134;
                        float _3554 = (-0.0) - _2135;
                        float _3555 = (-0.0) - _2136;
                        float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                        float _3560 = _3559 * _3553;
                        float _3561 = _3559 * _3554;
                        float _3562 = _3559 * _3555;
                        float _3569 = exp2(log2(1.0 / ((_3545 * 3.5) + 5.0)) * 0.25);
                        float _3570 = 1.0 - _1045;
                        float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                        float _3578 = _3577 * _3577;
                        float _3579 = _3578 * _3578;
                        float _3580 = _3560 + _3525;
                        float _3581 = _3561 + _3526;
                        float _3582 = _3562 + _3527;
                        float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                        float _3590 = dot(vec3(_970, _973, _976), vec3(_3560, _3561, _3562));
                        float _5020 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3593 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                        float _3594 = dot(vec3(_970, _973, _976), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                        float _5031 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                        float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                        float _3602 = _3538 * _3578;
                        float _3603 = _3602 * _3602;
                        float _3606 = ((1.0 - _3603) * _3528) + _3603;
                        float _5042 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                        float _3608 = 1.0 - _3578;
                        float _3618 = (0.5 / (((_3607 * ((_3593 * _3608) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3578) * _3593))) * _3607;
                        float _5053 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3629 = (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) / ((_3601 * _3601) * ((_3545 * 2.1991131305694580078125) + 3.141590118408203125))) * _3534;
                        _3382 = (_3549 * _3497.x) + _3455;
                        _3383 = (_3549 * _3497.y) + _3456;
                        _3384 = (_3549 * _3497.z) + _3457;
                        _3379 = (_3629 * _3514.x) + _3452;
                        _3380 = (_3629 * _3514.y) + _3453;
                        _3381 = (_3629 * _3514.z) + _3454;
                        if (_3459 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3452 = _3379;
                            _3453 = _3380;
                            _3454 = _3381;
                            _3455 = _3382;
                            _3456 = _3383;
                            _3457 = _3384;
                            _3458 = _3459;
                        }
                    }
                    frontier_phi_71_pred = _3384;
                    frontier_phi_71_pred_1 = _3383;
                    frontier_phi_71_pred_2 = _3382;
                    frontier_phi_71_pred_3 = _3381;
                    frontier_phi_71_pred_4 = _3380;
                    frontier_phi_71_pred_5 = _3379;
                }
                _3166 = frontier_phi_71_pred;
                _3164 = frontier_phi_71_pred_1;
                _3162 = frontier_phi_71_pred_2;
                _3160 = frontier_phi_71_pred_3;
                _3158 = frontier_phi_71_pred_4;
                _3156 = frontier_phi_71_pred_5;
                uint _3314 = _3313 + 1u;
                if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3307 = _3156;
                    _3308 = _3158;
                    _3309 = _3160;
                    _3310 = _3162;
                    _3311 = _3164;
                    _3312 = _3166;
                    _3313 = _3314;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3155 = _3156;
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
        }
        uvec4 _3169 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3170 = _3169.z;
        uint _3172 = (_3170 >> 8u) & 15u;
        float _3275;
        float _3277;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        if (((4294967295u << _3172) & _3075) == 0u)
        {
            _3275 = _3155;
            _3277 = _3157;
            _3279 = _3159;
            _3281 = _3161;
            _3283 = _3163;
            _3285 = _3165;
        }
        else
        {
            float _3300 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
            float _3301 = _3300 * _2134;
            float _3302 = _3300 * _2135;
            float _3303 = _3300 * _2136;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3172 < ((_3170 >> 12u) & 15u))
            {
                float _3276;
                float _3278;
                float _3280;
                float _3282;
                float _3284;
                float _3286;
                float _3435 = _3155;
                float _3436 = _3157;
                float _3437 = _3159;
                float _3438 = _3161;
                float _3439 = _3163;
                float _3440 = _3165;
                uint _3441 = _3172;
                uint _3450;
                bool _3451;
                for (;;)
                {
                    _3450 = texelFetch(g_lightClassification, int((((_3069 << 5u) + (_3055 << 9u)) + (_3441 << 2u)) >> 2u)).x;
                    _3451 = _3450 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3451)
                    {
                        frontier_phi_82_pred = _3440;
                        frontier_phi_82_pred_1 = _3439;
                        frontier_phi_82_pred_2 = _3438;
                        frontier_phi_82_pred_3 = _3437;
                        frontier_phi_82_pred_4 = _3436;
                        frontier_phi_82_pred_5 = _3435;
                    }
                    else
                    {
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3656 = _3435;
                        float _3657 = _3436;
                        float _3658 = _3437;
                        float _3659 = _3438;
                        float _3660 = _3439;
                        float _3661 = _3440;
                        uint _3662 = _3450;
                        uint _3663;
                        vec4 _3688;
                        float _3689;
                        vec4 _3704;
                        vec3 _3716;
                        vec4 _3731;
                        vec4 _3746;
                        float _3792;
                        bool _3793;
                        for (;;)
                        {
                            uint _3673 = ((_3441 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3662));
                            _3663 = (_3662 + 4294967295u) & _3662;
                            uint _3675 = _3673 * 40u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            _3689 = _3688.w;
                            uint _3691 = (_3673 * 40u) + 4u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3706 = (_3673 * 40u) + 8u;
                            _3716 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x));
                            uint _3718 = (_3673 * 40u) + 16u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3673 * 40u) + 20u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3748 = (_3673 * 40u) + 24u;
                            vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3767 = (_3673 * 40u) + 28u;
                            vec4 _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            _3792 = fma(_2136, _3780.z, fma(_2135, _3780.y, _3780.x * _2134)) + _3780.w;
                            _3793 = !((fma(_2136, _3761.z, fma(_2135, _3761.y, _3761.x * _2134)) + _3761.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3793)
                            {
                                float _3820 = _3688.x - _2134;
                                float _3821 = _3688.y - _2135;
                                float _3822 = _3688.z - _2136;
                                float _3823 = dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822));
                                float _3826 = inversesqrt(_3823);
                                float _3827 = _3826 * _3820;
                                float _3828 = _3826 * _3821;
                                float _3829 = _3826 * _3822;
                                float _3833 = 1.0 - (_3823 / (_3689 * _3689));
                                float _5064 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                                float _3838 = sqrt(_3823) * _3704.w;
                                float _3840 = 1.39999997615814208984375 / (_3838 + 1.39999997615814208984375);
                                float _3841 = _3840 * _3840;
                                float _3844 = ((1.0 - _3841) * dot(vec3(_3827, _3828, _3829), vec3(_970, _973, _976))) + _3841;
                                float _3847 = _3838 * _3838;
                                float _3851 = (fma(_2136, _3731.z, fma(_2135, _3731.y, _3731.x * _2134)) + _3731.w) / _3792;
                                float _3852 = (fma(_2136, _3746.z, fma(_2135, _3746.y, _3746.x * _2134)) + _3746.w) / _3792;
                                float _3856 = 1.0 - dot(vec2(_3851, _3852), vec2(_3851, _3852));
                                float _5080 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3858 = _3857 * (((isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0))) * _3834) / ((_3847 * 0.699999988079071044921875) + 1.0));
                                float _3870 = exp2(log2(1.0 / ((_3847 * 3.5) + 5.0)) * 0.25);
                                float _3871 = 1.0 - _1045;
                                float _3878 = sqrt(1.0 - ((1.0 - (_3871 * _3871)) * (1.0 - (_3870 * _3870))));
                                float _3879 = _3878 * _3878;
                                float _3880 = _3879 * _3879;
                                float _3881 = _3827 - _3301;
                                float _3882 = _3828 - _3302;
                                float _3883 = _3829 - _3303;
                                float _3887 = inversesqrt(dot(vec3(_3881, _3882, _3883), vec3(_3881, _3882, _3883)));
                                float _3891 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3301, (-0.0) - _3302, (-0.0) - _3303));
                                float _5091 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3894 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                                float _3895 = dot(vec3(_970, _973, _976), vec3(_3887 * _3881, _3887 * _3882, _3887 * _3883));
                                float _5102 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3898 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                                float _3902 = ((_3898 * _3898) * (_3880 + (-1.0))) + 1.0;
                                float _3903 = _3840 * _3879;
                                float _3904 = _3903 * _3903;
                                float _3910 = ((1.0 - _3904) * dot(vec3(_970, _973, _976), vec3(_3827, _3828, _3829))) + _3904;
                                float _5113 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3911 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                                float _3912 = 1.0 - _3879;
                                float _3922 = (0.5 / (((_3911 * ((_3894 * _3912) + _3879)) + 9.9999999392252902907785028219223e-09) + (((_3911 * _3912) + _3879) * _3894))) * _3911;
                                float _5124 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3932 = (_3857 * _3834) * (((_3880 * 3.1415927410125732421875) * (isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0)))) / ((_3902 * _3902) * ((_3847 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3858 * _3704.z;
                                frontier_phi_88_pred_1 = _3858 * _3704.y;
                                frontier_phi_88_pred_2 = _3858 * _3704.x;
                                frontier_phi_88_pred_3 = _3932 * _3716.z;
                                frontier_phi_88_pred_4 = _3932 * _3716.y;
                                frontier_phi_88_pred_5 = _3932 * _3716.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3941 = frontier_phi_88_pred;
                            _3940 = frontier_phi_88_pred_1;
                            _3939 = frontier_phi_88_pred_2;
                            _3938 = frontier_phi_88_pred_3;
                            _3937 = frontier_phi_88_pred_4;
                            _3936 = frontier_phi_88_pred_5;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            if (_3663 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3663;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3648;
                        frontier_phi_82_pred_1 = _3647;
                        frontier_phi_82_pred_2 = _3646;
                        frontier_phi_82_pred_3 = _3645;
                        frontier_phi_82_pred_4 = _3644;
                        frontier_phi_82_pred_5 = _3643;
                    }
                    _3286 = frontier_phi_82_pred;
                    _3284 = frontier_phi_82_pred_1;
                    _3282 = frontier_phi_82_pred_2;
                    _3280 = frontier_phi_82_pred_3;
                    _3278 = frontier_phi_82_pred_4;
                    _3276 = frontier_phi_82_pred_5;
                    uint _3442 = _3441 + 1u;
                    if (_3442 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3435 = _3276;
                        _3436 = _3278;
                        _3437 = _3280;
                        _3438 = _3282;
                        _3439 = _3284;
                        _3440 = _3286;
                        _3441 = _3442;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3282;
                frontier_phi_63_64_ladder_1 = _3286;
                frontier_phi_63_64_ladder_2 = _3284;
                frontier_phi_63_64_ladder_3 = _3280;
                frontier_phi_63_64_ladder_4 = _3278;
                frontier_phi_63_64_ladder_5 = _3276;
            }
            else
            {
                frontier_phi_63_64_ladder = _3161;
                frontier_phi_63_64_ladder_1 = _3165;
                frontier_phi_63_64_ladder_2 = _3163;
                frontier_phi_63_64_ladder_3 = _3159;
                frontier_phi_63_64_ladder_4 = _3157;
                frontier_phi_63_64_ladder_5 = _3155;
            }
            _3275 = frontier_phi_63_64_ladder_5;
            _3277 = frontier_phi_63_64_ladder_4;
            _3279 = frontier_phi_63_64_ladder_3;
            _3281 = frontier_phi_63_64_ladder;
            _3283 = frontier_phi_63_64_ladder_2;
            _3285 = frontier_phi_63_64_ladder_1;
        }
        float _3290 = isnan(1.0) ? _1029 : (isnan(_1029) ? 1.0 : min(_1029, 1.0));
        _3088 = (_3290 * _3281) + _2600;
        _3090 = (_3290 * _3283) + _2602;
        _3092 = (_3290 * _3285) + _2604;
        _3094 = ((_3275 * _1013) * _3290) + _2938;
        _3096 = ((_3277 * _1015) * _3290) + _2940;
        _3098 = ((_3279 * _1016) * _3290) + _2942;
    }
    else
    {
        _3088 = _2600;
        _3090 = _2602;
        _3092 = _2604;
        _3094 = _2938;
        _3096 = _2940;
        _3098 = _2942;
    }
    float _5140 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _5151 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _5162 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _3115 = ((isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0))) * (_3088 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1029))) + ((_3094 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _3116 = ((isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0))) * (_3090 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1029))) + ((_3096 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _3117 = ((isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0))) * (_3092 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1029))) + ((_3098 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    uint _3118 = _265 + 6u;
    float _3126 = _951 / cbSceneParam._m0[86u].x;
    float _3127 = _952 / cbSceneParam._m0[86u].y;
    vec4 _3141 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3126, _3127, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3143 = _3141.x;
    float _3144 = _3141.y;
    float _3145 = _3141.z;
    float _3146 = _3141.w;
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _3180 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _3181 = _3180 / _874;
        float _3192 = _3181 * _924;
        float _3193 = _925 * _3181;
        float _3194 = (-0.0) - _3193;
        float _3195 = _3181 * _926;
        float _3197 = (cbSceneParam._m0[77u].w * _3194) / _3180;
        float _3198 = _3197 + cbSceneParam._m0[79u].w;
        float _3199 = cbSceneParam._m0[79u].w - _3193;
        float _3205 = sqrt(((_3192 * _3192) + (_3193 * _3193)) + (_3195 * _3195));
        float _3208 = (1.0 - (cbSceneParam._m0[77u].w / _3180)) * _3205;
        float _3213 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3215 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3392;
        if (abs((_3194 - _3197) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3392 = ((((_3198 > 0.0) ? exp2(_3213 * _3198) : (2.0 - exp2(_3215 * _3198))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3208;
        }
        else
        {
            float _3336 = 1.0 / cbSceneParam._m0[80u].x;
            float _3337 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : max(_3198, _3199));
            float _3338 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : min(_3198, _3199));
            float _3347 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : min(_3337, 0.0));
            float _3348 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : min(_3338, 0.0));
            _3392 = ((abs(_3205 / _3194) * cbSceneParam._m0[80u].y) * ((((_3347 - _3348) * 2.0) - ((exp2(_3213 * (isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0)))) - exp2(_3213 * (isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))))) * _3336)) - ((exp2(_3215 * _3347) - exp2(_3215 * _3348)) * _3336))) + (_3208 * cbSceneParam._m0[80u].z);
        }
        vec4 _3394 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3126, _3127, 1.0), 0.0);
        float _3403 = exp2((_3392 * (-1.44269502162933349609375)) * (1.0 - _3394.w));
        float _3404 = log2(_3403);
        float _3420 = log2(_3146);
        _3217 = (exp2(_3420 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].x)) * _3394.x) / cbSceneParam._m0[78u].x)) + _3143;
        _3219 = (exp2(_3420 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].y)) * _3394.y) / cbSceneParam._m0[78u].y)) + _3144;
        _3221 = (exp2(_3420 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].z)) * _3394.z) / cbSceneParam._m0[78u].z)) + _3145;
        _3223 = _3403 * _3146;
    }
    else
    {
        _3217 = _3143;
        _3219 = _3144;
        _3221 = _3145;
        _3223 = _3146;
    }
    bool _3430;
    vec4 _3233;
    vec4 _3255;
    float _3257;
    float _3261;
    float _3262;
    float _3263;
    float _3264;
    bool _3274;
    for (;;)
    {
        _3233 = cbMatDynParam._m0[0u];
        float _3235 = roundEven(_3233.y);
        bool _3236 = _3235 == 3.0;
        float _3237 = log2(_3223);
        float _3244 = exp2(_3237 * cbSceneParam._m0[78u].x) * _3115;
        float _3245 = exp2(_3237 * cbSceneParam._m0[78u].y) * _3116;
        float _3246 = exp2(_3237 * cbSceneParam._m0[78u].z) * _3117;
        float _3253 = _940 + (-0.5);
        _3255 = cbMtdParam._m0[1u];
        _3257 = _3255.y * _3253;
        float _3260 = (_3235 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3261 = _3260 * (_3236 ? _3244 : (_3244 + (cbSceneParam._m0[72u].w * _3217)));
        _3262 = _3260 * (_3236 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3219)));
        _3263 = _3260 * (_3236 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3221)));
        _3264 = _3253 * 0.999000012874603271484375;
        _3274 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3274)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3264) < 0.5)
            {
                _3430 = true;
                break;
            }
        }
        uint _3371 = _989 + uint(_3233.w);
        if ((cbInstanceData._m0[_3371].w < 1.0) && ((cbInstanceData._m0[_3371].w + _3264) < 0.5))
        {
            _3430 = true;
            break;
        }
        if ((_3257 + 1.0) < _3255.x)
        {
            _3430 = true;
            break;
        }
        _3430 = false;
        break;
    }
    float _3634;
    if (_3430)
    {
        discard_state = true;
        _3634 = 0.0;
    }
    else
    {
        _3634 = cbInstanceData._m0[_3118].w;
    }
    SV_Target.x = _3261;
    SV_Target.y = _3262;
    SV_Target.z = _3263;
    SV_Target.w = _3634;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3118].w;
    discard_exit();
}


