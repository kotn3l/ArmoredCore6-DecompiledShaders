#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1364;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3973 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _480 = ((_450.z - _471) * _396) + _471;
    float _483 = ((((_450.x - _469) * _396) + _469) * 2.0) + (-1.0);
    float _484 = ((((_450.y - _470) * _396) + _470) * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3984 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))));
    float _493 = _483 + ((((_423.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _494 = _484 + ((((_423.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _497 = fma(_490, _247, fma(_494, _254, _493 * _240));
    float _500 = fma(_490, _248, fma(_494, _255, _493 * _241));
    float _503 = fma(_490, _249, fma(_494, _256, _493 * _242));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _551 = _549.x;
    float _552 = 1.0 - _551;
    float _556 = ((_551 - _552) * cbMtdParam._m0[24u].z) + _552;
    float _558 = (cbMtdParam._m0[19u].x + dot(vec4(_507 * _497, _507 * _500, _507 * _503, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_556 * cbMtdParam._m0[21u].z);
    float _3995 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _561 = (-0.0) - cbMtdParam._m0[24u].x;
    float _563 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
    float _571 = _559 - ((_559 * TEXCOORD_8.x) * _564);
    float _572 = _559 - ((_559 * TEXCOORD_8.y) * _564);
    float _573 = _559 - ((_559 * TEXCOORD_8.z) * _564);
    float _580 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _584 = ((isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : min(_580, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _592 = (_584 - (((_556 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _584))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4026 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _597 = ((_571 * (cbMtdParam._m0[17u].x - _403)) * _593) + _403;
    float _598 = ((_572 * (cbMtdParam._m0[17u].y - _404)) * _593) + _404;
    float _599 = ((_573 * (cbMtdParam._m0[17u].z - _405)) * _593) + _405;
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _641 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_613 - _614) * cbMtdParam._m0[24u].w) + _614) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4037 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _650 = ((((cbMtdParam._m0[10u].x - _597) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _642) + _597;
    float _651 = ((((cbMtdParam._m0[10u].y - _598) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _642) + _598;
    float _652 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _599)) * _642) + _599;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _680 = _678.x;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _680) * _396) + _680;
    float _702 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _698) * cbMtdParam._m0[19u].z) + _698;
    float _705 = _702 - ((_593 * _571) * _702);
    float _707 = _705 - (_705 * _642);
    float _712 = (((_423.z - _480) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _480;
    vec4 _726 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _733 = (_726.x * 2.0) + (-1.0);
    float _734 = (_726.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4048 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _744 = (((_726.z - _712) * _571) * _593) + _712;
    float _747 = ((cbMtdParam._m0[23u].y - _744) * _642) + _744;
    vec4 _766 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _772 = (_766.x * 2.0) + (-1.0);
    float _773 = (_766.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _4059 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _794 = (((cbMtdParam._m0[21u].x * _493) + ((_733 - _493) * _571)) * _593) + _493;
    float _795 = (((cbMtdParam._m0[21u].x * _494) + ((_734 - _494) * _572)) * _593) + _494;
    float _796 = (((sqrt(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) - _490) * _573) * _593) + _490;
    float _807 = (((_772 - _794) + (_794 * cbMtdParam._m0[22u].z)) * _642) + _794;
    float _808 = (((_773 - _795) + (_795 * cbMtdParam._m0[22u].z)) * _642) + _795;
    float _809 = ((sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) - _796) * _642) + _796;
    float _811 = cbMtdParam._m0[22u].x + _523.w;
    float _814 = fma(_809, _247, fma(_808, _254, _807 * _240));
    float _817 = fma(_809, _248, fma(_808, _255, _807 * _241));
    float _820 = fma(_809, _249, fma(_808, _256, _807 * _242));
    float _824 = inversesqrt(dot(vec3(_814, _817, _820), vec3(_814, _817, _820)));
    float _825 = _824 * _814;
    float _826 = _824 * _817;
    float _827 = _824 * _820;
    float _4070 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _828 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4092 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4103 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4114 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4125 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _833 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _847 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _897 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _887);
    float _898 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _887);
    float _899 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _887);
    float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
    float _904 = _897 * _903;
    float _905 = _898 * _903;
    float _906 = _899 * _903;
    float _912 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _913 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _931 = fma(_827, cbSceneParam._m0[5u].z, fma(_826, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _825));
    float _934 = fma(_827, cbSceneParam._m0[6u].z, fma(_826, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _825));
    float _937 = fma(_827, cbSceneParam._m0[7u].z, fma(_826, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _825));
    uint _951 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _957 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_951].x;
    float _958 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_951].y;
    float _959 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_951].z;
    float _4136 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _963 = 1.0 - _833;
    float _964 = _960 * _963;
    float _965 = _961 * _963;
    float _966 = _962 * _963;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _833;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _833;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _833;
    float _974 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    float _977 = _973 + 0.039999999105930328369140625;
    vec4 _986 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _912, cbSceneParam._m0[86u].y * _913));
    float _990 = ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * TEXCOORD_5.w) * _986.x;
    float _991 = dot(vec3(_825, _826, _827), vec3(_904, _905, _906));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _825) - _904;
    float _999 = (_994 * _826) - _905;
    float _1000 = (_994 * _827) - _906;
    float _1004 = abs(dot(vec3(_904, _905, _906), vec3(_825, _826, _827)));
    float _4169 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_828);
    float _1019 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1025 = (1.0 - _1019) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1026 = _1019 * _1006;
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1363;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1088 = fma(_1062, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054));
        float _1092 = fma(_1062, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054));
        float _1096 = fma(_1062, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054));
        float _1121 = _1054 + _825;
        float _1122 = _1058 + _826;
        float _1123 = _1062 + _827;
        float _1133 = fma(_1123, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121)) - _1088;
        float _1134 = fma(_1123, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121)) - _1092;
        float _1135 = fma(_1123, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121)) - _1096;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1088 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1092 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[34u].z) + ((((((_1096 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1191 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1157.x + (-0.5));
        float _1193 = _1191 * (_1157.y + (-0.5));
        float _1194 = _1191 * (_1157.z + (-0.5));
        float _1201 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1164.x + (-0.5));
        float _1203 = _1201 * (_1164.y + (-0.5));
        float _1204 = _1201 * (_1164.z + (-0.5));
        float _1211 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1171.x + (-0.5));
        float _1213 = _1211 * (_1171.y + (-0.5));
        float _1214 = _1211 * (_1171.z + (-0.5));
        float _1221 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1178.x + (-0.5));
        float _1223 = _1221 * (_1178.y + (-0.5));
        float _1224 = _1221 * (_1178.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1245 = (dot(vec3(_825, _826, _827), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1255 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4217 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1257 + 1.0))) + _1262) * _1225;
        float _1272 = _1193 * 0.5;
        float _1273 = _1203 * 0.5;
        float _1274 = _1213 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_825, _826, _827), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4250 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1299 + 1.0))) + _1304) * _1226;
        float _1314 = _1194 * 0.5;
        float _1315 = _1204 * 0.5;
        float _1316 = _1214 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_825, _826, _827), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4283 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1341 + 1.0))) + _1346) * _1227;
        _1363 = _1194;
        _1365 = _1193;
        _1366 = _1192;
        _1367 = _1204;
        _1368 = _1203;
        _1369 = _1202;
        _1370 = _1214;
        _1371 = _1213;
        _1372 = _1212;
        _1373 = _1227;
        _1374 = _1226;
        _1375 = _1225;
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1364;
        _1365 = _1364;
        _1366 = _1364;
        _1367 = _1364;
        _1368 = _1364;
        _1369 = _1364;
        _1370 = _1364;
        _1371 = _1364;
        _1372 = _1364;
        _1373 = _1364;
        _1374 = _1364;
        _1375 = _1364;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1403 = fma(_1062, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054));
        float _1407 = fma(_1062, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054));
        float _1411 = fma(_1062, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054));
        float _1434 = _1054 + _825;
        float _1435 = _1058 + _826;
        float _1436 = _1062 + _827;
        float _1446 = fma(_1436, cbModelParam._m0[30u].z, fma(_1435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1434)) - _1403;
        float _1447 = fma(_1436, cbModelParam._m0[31u].z, fma(_1435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1434)) - _1407;
        float _1448 = fma(_1436, cbModelParam._m0[32u].z, fma(_1435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1434)) - _1411;
        float _1452 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
        float _1465 = ((_1452 * _1446) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1403 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1452 * _1447) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1407 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1452 * _1448) / cbModelParam._m0[35u].z) + ((((((_1411 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        float _1502 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1469.x + (-0.5));
        float _1504 = _1502 * (_1469.y + (-0.5));
        float _1505 = _1502 * (_1469.z + (-0.5));
        float _1512 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1476.x + (-0.5));
        float _1514 = _1512 * (_1476.y + (-0.5));
        float _1515 = _1512 * (_1476.z + (-0.5));
        float _1522 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1483.x + (-0.5));
        float _1524 = _1522 * (_1483.y + (-0.5));
        float _1525 = _1522 * (_1483.z + (-0.5));
        float _1532 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1490.x + (-0.5));
        float _1534 = _1532 * (_1490.y + (-0.5));
        float _1535 = _1532 * (_1490.z + (-0.5));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = _1503 * 0.5;
        float _1540 = _1513 * 0.5;
        float _1541 = _1523 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_825, _826, _827), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4346 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1566 + 1.0))) + _1571) * _1536;
        float _1581 = _1504 * 0.5;
        float _1582 = _1514 * 0.5;
        float _1583 = _1524 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_825, _826, _827), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4379 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1608 + 1.0))) + _1613) * _1537;
        float _1623 = _1505 * 0.5;
        float _1624 = _1515 * 0.5;
        float _1625 = _1525 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_825, _826, _827), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4412 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1650 + 1.0))) + _1655) * _1538;
        _1672 = _1505;
        _1673 = _1504;
        _1674 = _1503;
        _1675 = _1515;
        _1676 = _1514;
        _1677 = _1513;
        _1678 = _1525;
        _1679 = _1524;
        _1680 = _1523;
        _1681 = _1538;
        _1682 = _1537;
        _1683 = _1536;
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
    }
    else
    {
        _1672 = _1364;
        _1673 = _1364;
        _1674 = _1364;
        _1675 = _1364;
        _1676 = _1364;
        _1677 = _1364;
        _1678 = _1364;
        _1679 = _1364;
        _1680 = _1364;
        _1681 = _1364;
        _1682 = _1364;
        _1683 = _1364;
        _1684 = 0.0;
        _1685 = 0.0;
        _1686 = 0.0;
    }
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1376)) + _1376;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1377)) + _1377;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1378)) + _1378;
    float _1719 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1696));
    float _1740 = _998 * 0.5;
    float _1741 = _999 * 0.5;
    float _1742 = _1000 * 0.5;
    float _1743 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1746 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1749 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1783;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1756 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1363, _1367, _1370, _1373));
        float _1760 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1764 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1771 = dot(vec4(cbModelParam._m0[39u]), vec4(_1740, _1741, _1742, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1794;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1785 = dot(vec4(cbModelParam._m0[40u]), vec4(_1740, _1741, _1742, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1798 = (_1794 * cbModelParam._m0[1u].x) + (_1783 * (1.0 - cbModelParam._m0[1u].x));
    float _1808 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _828);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1808 : min(cbModelParam._m0[25u].z, _1808));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1062, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1062, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1062, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1871 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1874 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1902 = frontier_phi_14_12_ladder;
        }
        float _2074;
        if (_1871 > 0.0)
        {
            _2074 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2074 = frontier_phi_23_19_ladder;
        }
        float _2369;
        if (_1874 > 0.0)
        {
            _2369 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2369 = frontier_phi_35_30_ladder;
        }
        float _2371 = isnan(_2074) ? _1902 : (isnan(_1902) ? _2074 : min(_1902, _2074));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1868) + _1857;
        float _2377 = (_2372 * _1871) + _1861;
        float _2378 = (_2372 * _1874) + _1865;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2379;
        float _2383 = _2379 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 > _2383) || ((_2377 < _2381) || ((_2376 < _2381) || (_2376 > _2383))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2378, cbModelParam._m0[9u].z, fma(_2377, cbModelParam._m0[9u].y, _2376 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2378, cbModelParam._m0[10u].z, fma(_2377, cbModelParam._m0[10u].y, _2376 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2378, cbModelParam._m0[11u].z, fma(_2377, cbModelParam._m0[11u].y, _2376 * cbModelParam._m0[11u].x))), _1809);
            frontier_phi_13_35_ladder = _2523.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2523.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2523.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_13_35_ladder_2;
        _1892 = frontier_phi_13_35_ladder_1;
        _1894 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1809);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _828);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1062, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1062, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1062, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1967 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _1970 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2079;
        if (_1964 > 0.0)
        {
            _2079 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2079 = frontier_phi_25_21_ladder;
        }
        float _2396;
        if (_1967 > 0.0)
        {
            _2396 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2396 = frontier_phi_37_32_ladder;
        }
        float _2734;
        if (_1970 > 0.0)
        {
            _2734 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2734 = frontier_phi_47_44_ladder;
        }
        float _2736 = isnan(_2396) ? _2079 : (isnan(_2079) ? _2396 : min(_2079, _2396));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _1964) + _1953;
        float _2742 = (_2737 * _1967) + _1957;
        float _2743 = (_2737 * _1970) + _1961;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_22_47_ladder = _2865.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2865.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2865.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_22_47_ladder_2;
        _1991 = frontier_phi_22_47_ladder_1;
        _1993 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1899);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2006 = (((_1025 * _974) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2008 = (((_1025 * _976) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2010 = (((_1025 * _977) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2066 = _2053 / _2065;
    float _2067 = _2057 / _2065;
    float _2068 = _2061 / _2065;
    float _2215;
    float _2216;
    float _2217;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2095 = ((uint(_2068 > cbSceneParam._m0[59u].y) + uint(_2068 > cbSceneParam._m0[59u].x)) + uint(_2068 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2096 = _2095 + 43u;
        uint _2104 = _2095 + 44u;
        uint _2112 = _2095 + 45u;
        uint _2120 = _2095 + 46u;
        float _2131 = fma(_2065, cbSceneParam._m0[_2096].w, fma(_2061, cbSceneParam._m0[_2096].z, fma(_2057, cbSceneParam._m0[_2096].y, _2053 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2065, cbSceneParam._m0[_2104].w, fma(_2061, cbSceneParam._m0[_2104].z, fma(_2057, cbSceneParam._m0[_2104].y, _2053 * cbSceneParam._m0[_2104].x)));
        float _2143 = fma(_2065, cbSceneParam._m0[_2120].w, fma(_2061, cbSceneParam._m0[_2120].z, fma(_2057, cbSceneParam._m0[_2120].y, _2053 * cbSceneParam._m0[_2120].x)));
        float _2148 = cbSceneParam._m0[33u].z * _2143;
        float _2150 = cbSceneParam._m0[33u].w * _2143;
        float _2153 = fma(_2065, cbSceneParam._m0[_2112].w, fma(_2061, cbSceneParam._m0[_2112].z, fma(_2057, cbSceneParam._m0[_2112].y, _2053 * cbSceneParam._m0[_2112].x))) / _2143;
        float _2201 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
        float _4538 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2208 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2131) / _2143, (_2150 + _2135) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 + _2131) / _2143, (_2135 - _2148) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2148) / _2143, (_2135 - _2150) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2150) / _2143, (_2148 + _2135) / _2143), _2153), 0.0)).x), vec4(0.25)));
        _2215 = 1.0 - (_2208 * cbSceneParam._m0[34u].x);
        _2216 = 1.0 - (_2208 * cbSceneParam._m0[34u].y);
        _2217 = 1.0 - (_2208 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2215 = 1.0;
        _2216 = 1.0;
        _2217 = 1.0;
    }
    float _2281;
    float _2283;
    float _2285;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2269 = fma(_2065, cbSceneParam._m0[63u].w, fma(_2061, cbSceneParam._m0[63u].z, fma(_2057, cbSceneParam._m0[63u].y, _2053 * cbSceneParam._m0[63u].x)));
        float _2270 = fma(_2065, cbSceneParam._m0[60u].w, fma(_2061, cbSceneParam._m0[60u].z, fma(_2057, cbSceneParam._m0[60u].y, _2053 * cbSceneParam._m0[60u].x))) / _2269;
        float _2271 = fma(_2065, cbSceneParam._m0[61u].w, fma(_2061, cbSceneParam._m0[61u].z, fma(_2057, cbSceneParam._m0[61u].y, _2053 * cbSceneParam._m0[61u].x))) / _2269;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2270 >= cbSceneParam._m0[64u].x) && (_2271 >= cbSceneParam._m0[64u].y)) && (_2270 <= cbSceneParam._m0[64u].z)) && (_2271 <= cbSceneParam._m0[64u].w))
        {
            float _2409 = fma(_2065, cbSceneParam._m0[62u].w, fma(_2061, cbSceneParam._m0[62u].z, fma(_2057, cbSceneParam._m0[62u].y, _2053 * cbSceneParam._m0[62u].x))) / _2269;
            float _2413 = isnan(cbSceneParam._m0[41u].w) ? _2409 : (isnan(_2409) ? cbSceneParam._m0[41u].w : max(_2409, cbSceneParam._m0[41u].w));
            float _2456 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
            float _4554 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
            float _2463 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2270, cbSceneParam._m0[33u].w + _2271), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2270, _2271 - cbSceneParam._m0[33u].z), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].z, _2271 - cbSceneParam._m0[33u].w), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2271), _2413), 0.0)).x), vec4(0.25)));
            float _2467 = 1.0 - (_2463 * cbSceneParam._m0[34u].x);
            float _2468 = 1.0 - (_2463 * cbSceneParam._m0[34u].y);
            float _2469 = 1.0 - (_2463 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_34_33_ladder_1 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
            frontier_phi_34_33_ladder_2 = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
        }
        else
        {
            frontier_phi_34_33_ladder = _2217;
            frontier_phi_34_33_ladder_1 = _2216;
            frontier_phi_34_33_ladder_2 = _2215;
        }
        _2281 = frontier_phi_34_33_ladder_2;
        _2283 = frontier_phi_34_33_ladder_1;
        _2285 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2281 = _2215;
        _2283 = _2216;
        _2285 = _2217;
    }
    uvec4 _2290 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2292 = _2290.x * 14u;
    uint _2293 = _2292 + 13u;
    float _2300 = _990 + (-1.0);
    float _2305 = (cbLight._m0[_2293].x * _2300) + 1.0;
    float _2306 = (cbLight._m0[_2293].y * _2300) + 1.0;
    float _2307 = (cbLight._m0[_2293].z * _2300) + 1.0;
    float _2308 = (cbLight._m0[_2293].w * _2300) + 1.0;
    uint _2309 = _2292 + 5u;
    float _2315 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2319 = _2292 + 4u;
    float _2328 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2332 = _2292 | 1u;
    float _2343 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_825, _826, _827));
    float _2346 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_825, _826, _827));
    float _4590 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _4601 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.3183098733425140380859375;
    float _2353 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2360 = ((cbLight._m0[_2309].x * _2315) * _2353) + (((cbLight._m0[_2319].x * _2281) * _2328) * _2351);
    float _2361 = ((_2315 * cbLight._m0[_2309].y) * _2353) + (((cbLight._m0[_2319].y * _2283) * _2328) * _2351);
    float _2362 = ((_2315 * cbLight._m0[_2309].z) * _2353) + (((cbLight._m0[_2319].z * _2285) * _2328) * _2351);
    uvec4 _2366 = floatBitsToUint(cbLight._m0[_2292 + 12u]);
    bool _2368 = _2366.x == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2368)
    {
        _2470 = _2360;
        _2472 = _2361;
        _2474 = _2362;
    }
    else
    {
        uint _2478 = _2292 + 6u;
        float _2494 = (dot(vec3(cbLight._m0[_2292 + 2u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2495 = _2494 * _2494;
        float _4612 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2496 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2497 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2470 = (((cbLight._m0[_2478].x * 0.3183098733425140380859375) * _2496) * _2497) + _2360;
        _2472 = (((cbLight._m0[_2478].y * 0.3183098733425140380859375) * _2496) * _2497) + _2361;
        _2474 = (((cbLight._m0[_2478].z * 0.3183098733425140380859375) * _2496) * _2497) + _2362;
    }
    bool _2477 = _2366.y == 0u;
    float _2532;
    float _2534;
    float _2536;
    if (_2477)
    {
        _2532 = _2470;
        _2534 = _2472;
        _2536 = _2474;
    }
    else
    {
        uint _2705 = _2292 + 7u;
        float _2721 = (dot(vec3(cbLight._m0[_2292 + 3u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2722 = _2721 * _2721;
        float _4628 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2723 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2724 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2532 = (((cbLight._m0[_2705].x * 0.3183098733425140380859375) * _2723) * _2724) + _2470;
        _2534 = (((cbLight._m0[_2705].y * 0.3183098733425140380859375) * _2723) * _2724) + _2472;
        _2536 = (((cbLight._m0[_2705].z * 0.3183098733425140380859375) * _2723) * _2724) + _2474;
    }
    uint _2539 = _2292 + 8u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _828) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2292].x + _904;
    float _2555 = cbLight._m0[_2292].y + _905;
    float _2556 = cbLight._m0[_2292].z + _906;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2292].xyz));
    float _4644 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _4655 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2568 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2569 = dot(vec3(_825, _826, _827), vec3(_2561, _2562, _2563));
    float _4666 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2561, _2562, _2563));
    float _4677 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2553 * _2553;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
    float _2590 = 0.959999978542327880859375 - _971;
    float _2592 = 0.959999978542327880859375 - _972;
    float _2593 = 0.959999978542327880859375 - _973;
    float _2600 = 1.0 - _2553;
    float _2611 = (0.5 / (((_2568 * ((_2567 * _2600) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2600) + _2553) * _2567))) * _2567;
    float _4688 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    uint _2627 = _2292 + 9u;
    float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _828) * 0.949999988079071044921875);
    float _2639 = _2638 * _2638;
    float _2640 = cbLight._m0[_2332].x + _904;
    float _2641 = cbLight._m0[_2332].y + _905;
    float _2642 = cbLight._m0[_2332].z + _906;
    float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
    float _2647 = _2646 * _2640;
    float _2648 = _2646 * _2641;
    float _2649 = _2646 * _2642;
    float _2650 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2332].xyz));
    float _4699 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2654 = dot(vec3(_825, _826, _827), vec3(_2647, _2648, _2649));
    float _4710 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2658 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2647, _2648, _2649));
    float _4721 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = _2639 * _2639;
    float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
    float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
    float _2680 = 1.0 - _2639;
    float _2690 = (0.5 / (((_2568 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2680) + _2639) * _2653))) * _2653;
    float _4732 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
    float _2702 = (((((_2673 * _2590) + _974) * cbLight._m0[_2627].x) * _2692) * _2315) + ((((cbLight._m0[_2539].x * _2281) * ((_2589 * _2590) + _974)) * _2613) * _2328);
    float _2703 = (((((_2673 * _2592) + _976) * cbLight._m0[_2627].y) * _2692) * _2315) + ((((cbLight._m0[_2539].y * _2283) * ((_2589 * _2592) + _976)) * _2613) * _2328);
    float _2704 = (((((_2673 * _2593) + _977) * cbLight._m0[_2627].z) * _2692) * _2315) + ((((cbLight._m0[_2539].z * _2285) * ((_2589 * _2593) + _977)) * _2613) * _2328);
    float _2760;
    float _2762;
    float _2764;
    if (_2368)
    {
        _2760 = _2702;
        _2762 = _2703;
        _2764 = _2704;
    }
    else
    {
        uint _2766 = _2292 + 2u;
        uint _2770 = _2292 + 10u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _828) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _904;
        float _2787 = cbLight._m0[_2766].y + _905;
        float _2788 = cbLight._m0[_2766].z + _906;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2766].xyz));
        float _4743 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2800 = dot(vec3(_825, _826, _827), vec3(_2793, _2794, _2795));
        float _4754 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4765 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2819 = exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0);
        float _2826 = 1.0 - _2785;
        float _2836 = (0.5 / (((_2568 * ((_2799 * _2826) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2826) + _2785) * _2799))) * _2799;
        float _4776 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2838 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2839 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2760 = (((((_2819 * _2590) + _974) * cbLight._m0[_2770].x) * _2838) * _2839) + _2702;
        _2762 = (((((_2819 * _2592) + _976) * cbLight._m0[_2770].y) * _2838) * _2839) + _2703;
        _2764 = (((((_2819 * _2593) + _977) * cbLight._m0[_2770].z) * _2838) * _2839) + _2704;
    }
    float _2870;
    float _2872;
    float _2874;
    if (_2477)
    {
        _2870 = _2760;
        _2872 = _2762;
        _2874 = _2764;
    }
    else
    {
        uint _2881 = _2292 + 3u;
        uint _2885 = _2292 + 11u;
        float _2899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2881].w)) * _828) * 0.949999988079071044921875);
        float _2900 = _2899 * _2899;
        float _2901 = cbLight._m0[_2881].x + _904;
        float _2902 = cbLight._m0[_2881].y + _905;
        float _2903 = cbLight._m0[_2881].z + _906;
        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
        float _2908 = _2907 * _2901;
        float _2909 = _2907 * _2902;
        float _2910 = _2907 * _2903;
        float _2911 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2881].xyz));
        float _4792 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2915 = dot(vec3(_825, _826, _827), vec3(_2908, _2909, _2910));
        float _4803 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2919 = dot(vec3(cbLight._m0[_2881].xyz), vec3(_2908, _2909, _2910));
        float _4814 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2923 = _2900 * _2900;
        float _2927 = ((_2918 * _2918) * (_2923 + (-1.0))) + 1.0;
        float _2934 = exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0);
        float _2941 = 1.0 - _2900;
        float _2951 = (0.5 / (((_2568 * ((_2914 * _2941) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2941) + _2900) * _2914))) * _2914;
        float _4825 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2953 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2923 / ((_2927 * _2927) * 3.141590118408203125));
        float _2954 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2870 = (((((_2934 * _2590) + _974) * cbLight._m0[_2885].x) * _2953) * _2954) + _2760;
        _2872 = (((((_2934 * _2592) + _976) * cbLight._m0[_2885].y) * _2953) * _2954) + _2762;
        _2874 = (((((_2934 * _2593) + _977) * cbLight._m0[_2885].z) * _2953) * _2954) + _2764;
    }
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_2290.y == 0u)
    {
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.x;
        uint _2987 = uint((float(_2975.y) * floor(float(uint(cbSceneParam._m0[85u].y * _913) / _2976))) + floor(float(uint(cbSceneParam._m0[85u].x * _912) / _2976)));
        float _2997 = (log2(_2068 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2998 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        uint _3001 = uint(isnan(14.0) ? _2998 : (isnan(_2998) ? 14.0 : min(_2998, 14.0)));
        uvec4 _3006 = texelFetch(g_lightClusterGridBuffer, int(((_3001 << 2u) + (_2987 << 6u)) >> 2u));
        uint _3007 = _3006.x;
        uint _3008 = _2975.z;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((((1u << ((_3008 >> 4u) & 15u)) + 4294967295u) & _3007) == 0u) || ((_3008 & 240u) == 0u))
        {
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
        }
        else
        {
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            uint _3237 = 0u;
            uint _3246;
            bool _3247;
            for (;;)
            {
                _3246 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                _3247 = _3246 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3247)
                {
                    frontier_phi_66_pred = _3236;
                    frontier_phi_66_pred_1 = _3235;
                    frontier_phi_66_pred_2 = _3234;
                    frontier_phi_66_pred_3 = _3233;
                    frontier_phi_66_pred_4 = _3232;
                    frontier_phi_66_pred_5 = _3231;
                }
                else
                {
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    uint _3361;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3246;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    for (;;)
                    {
                        uint _3365 = uint(findLSB(_3361)) + (_3237 << 5u);
                        uint _3362 = (_3361 + 4294967295u) & _3361;
                        uint _3367 = _3365 * 48u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3387 = (_3365 * 48u) + 4u;
                        vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3406 = (_3365 * 48u) + 8u;
                        vec3 _3417 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x));
                        float _3421 = _3381.x - _2066;
                        float _3422 = _3381.y - _2067;
                        float _3423 = _3381.z - _2068;
                        float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                        float _3427 = inversesqrt(_3424);
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3431 = dot(vec3(_931, _934, _937), vec3(_3428, _3429, _3430));
                        float _3436 = 1.0 - (_3424 * _3381.w);
                        float _4851 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3437 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3438 = sqrt(_3424) * _3400.w;
                        float _3441 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3431) + _3442;
                        float _3448 = _3438 * _3438;
                        float _3452 = ((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3437) / ((_3448 * 0.699999988079071044921875) + 1.0);
                        float _3456 = (-0.0) - _2066;
                        float _3457 = (-0.0) - _2067;
                        float _3458 = (-0.0) - _2068;
                        float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3472 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                        float _3473 = 1.0 - _1006;
                        float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                        float _3481 = _3480 * _3480;
                        float _3482 = _3481 * _3481;
                        float _3483 = _3463 + _3428;
                        float _3484 = _3464 + _3429;
                        float _3485 = _3465 + _3430;
                        float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                        float _3493 = dot(vec3(_931, _934, _937), vec3(_3463, _3464, _3465));
                        float _4867 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3496 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3497 = dot(vec3(_931, _934, _937), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                        float _4878 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3500 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                        float _3505 = _3441 * _3481;
                        float _3506 = _3505 * _3505;
                        float _3509 = ((1.0 - _3506) * _3431) + _3506;
                        float _4889 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3510 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3511 = 1.0 - _3481;
                        float _3521 = (0.5 / (((_3510 * ((_3496 * _3511) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3481) * _3496))) * _3510;
                        float _4900 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3532 = (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3504 * _3504) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125))) * _3437;
                        _3290 = (_3452 * _3400.x) + _3358;
                        _3291 = (_3452 * _3400.y) + _3359;
                        _3292 = (_3452 * _3400.z) + _3360;
                        _3287 = (_3532 * _3417.x) + _3355;
                        _3288 = (_3532 * _3417.y) + _3356;
                        _3289 = (_3532 * _3417.z) + _3357;
                        if (_3362 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3362;
                        }
                    }
                    frontier_phi_66_pred = _3292;
                    frontier_phi_66_pred_1 = _3291;
                    frontier_phi_66_pred_2 = _3290;
                    frontier_phi_66_pred_3 = _3289;
                    frontier_phi_66_pred_4 = _3288;
                    frontier_phi_66_pred_5 = _3287;
                }
                _3098 = frontier_phi_66_pred;
                _3096 = frontier_phi_66_pred_1;
                _3094 = frontier_phi_66_pred_2;
                _3092 = frontier_phi_66_pred_3;
                _3090 = frontier_phi_66_pred_4;
                _3088 = frontier_phi_66_pred_5;
                uint _3238 = _3237 + 1u;
                if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3231 = _3088;
                    _3232 = _3090;
                    _3233 = _3092;
                    _3234 = _3094;
                    _3235 = _3096;
                    _3236 = _3098;
                    _3237 = _3238;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
        }
        uvec4 _3101 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3102 = _3101.z;
        uint _3104 = (_3102 >> 8u) & 15u;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        if (((4294967295u << _3104) & _3007) == 0u)
        {
            _3199 = _3087;
            _3201 = _3089;
            _3203 = _3091;
            _3205 = _3093;
            _3207 = _3095;
            _3209 = _3097;
        }
        else
        {
            float _3224 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
            float _3225 = _3224 * _2066;
            float _3226 = _3224 * _2067;
            float _3227 = _3224 * _2068;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3104 < ((_3102 >> 12u) & 15u))
            {
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3338 = _3087;
                float _3339 = _3089;
                float _3340 = _3091;
                float _3341 = _3093;
                float _3342 = _3095;
                float _3343 = _3097;
                uint _3344 = _3104;
                uint _3353;
                bool _3354;
                for (;;)
                {
                    _3353 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                    _3354 = _3353 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3354)
                    {
                        frontier_phi_72_pred = _3343;
                        frontier_phi_72_pred_1 = _3342;
                        frontier_phi_72_pred_2 = _3341;
                        frontier_phi_72_pred_3 = _3340;
                        frontier_phi_72_pred_4 = _3339;
                        frontier_phi_72_pred_5 = _3338;
                    }
                    else
                    {
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3550 = _3338;
                        float _3551 = _3339;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        float _3554 = _3342;
                        float _3555 = _3343;
                        uint _3556 = _3353;
                        uint _3557;
                        vec4 _3582;
                        float _3583;
                        vec4 _3598;
                        vec3 _3610;
                        vec4 _3625;
                        vec4 _3640;
                        float _3686;
                        bool _3687;
                        for (;;)
                        {
                            uint _3567 = ((_3344 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3556));
                            _3557 = (_3556 + 4294967295u) & _3556;
                            uint _3569 = _3567 * 40u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3583 = _3582.w;
                            uint _3585 = (_3567 * 40u) + 4u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3567 * 40u) + 8u;
                            _3610 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x));
                            uint _3612 = (_3567 * 40u) + 16u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3567 * 40u) + 20u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3567 * 40u) + 24u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3661 = (_3567 * 40u) + 28u;
                            vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            _3686 = fma(_2068, _3674.z, fma(_2067, _3674.y, _3674.x * _2066)) + _3674.w;
                            _3687 = !((fma(_2068, _3655.z, fma(_2067, _3655.y, _3655.x * _2066)) + _3655.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3687)
                            {
                                float _3714 = _3582.x - _2066;
                                float _3715 = _3582.y - _2067;
                                float _3716 = _3582.z - _2068;
                                float _3717 = dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716));
                                float _3720 = inversesqrt(_3717);
                                float _3721 = _3720 * _3714;
                                float _3722 = _3720 * _3715;
                                float _3723 = _3720 * _3716;
                                float _3727 = 1.0 - (_3717 / (_3583 * _3583));
                                float _4911 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3728 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3732 = sqrt(_3717) * _3598.w;
                                float _3734 = 1.39999997615814208984375 / (_3732 + 1.39999997615814208984375);
                                float _3735 = _3734 * _3734;
                                float _3738 = ((1.0 - _3735) * dot(vec3(_3721, _3722, _3723), vec3(_931, _934, _937))) + _3735;
                                float _3741 = _3732 * _3732;
                                float _3745 = (fma(_2068, _3625.z, fma(_2067, _3625.y, _3625.x * _2066)) + _3625.w) / _3686;
                                float _3746 = (fma(_2068, _3640.z, fma(_2067, _3640.y, _3640.x * _2066)) + _3640.w) / _3686;
                                float _3750 = 1.0 - dot(vec2(_3745, _3746), vec2(_3745, _3746));
                                float _4927 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3752 = _3751 * (((isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0))) * _3728) / ((_3741 * 0.699999988079071044921875) + 1.0));
                                float _3764 = exp2(log2(1.0 / ((_3741 * 3.5) + 5.0)) * 0.25);
                                float _3765 = 1.0 - _1006;
                                float _3772 = sqrt(1.0 - ((1.0 - (_3765 * _3765)) * (1.0 - (_3764 * _3764))));
                                float _3773 = _3772 * _3772;
                                float _3774 = _3773 * _3773;
                                float _3775 = _3721 - _3225;
                                float _3776 = _3722 - _3226;
                                float _3777 = _3723 - _3227;
                                float _3781 = inversesqrt(dot(vec3(_3775, _3776, _3777), vec3(_3775, _3776, _3777)));
                                float _3785 = dot(vec3(_931, _934, _937), vec3((-0.0) - _3225, (-0.0) - _3226, (-0.0) - _3227));
                                float _4938 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3788 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3789 = dot(vec3(_931, _934, _937), vec3(_3781 * _3775, _3781 * _3776, _3781 * _3777));
                                float _4949 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3796 = ((_3792 * _3792) * (_3774 + (-1.0))) + 1.0;
                                float _3797 = _3734 * _3773;
                                float _3798 = _3797 * _3797;
                                float _3804 = ((1.0 - _3798) * dot(vec3(_931, _934, _937), vec3(_3721, _3722, _3723))) + _3798;
                                float _4960 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3806 = 1.0 - _3773;
                                float _3816 = (0.5 / (((_3805 * ((_3788 * _3806) + _3773)) + 9.9999999392252902907785028219223e-09) + (((_3805 * _3806) + _3773) * _3788))) * _3805;
                                float _4971 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3826 = (_3751 * _3728) * (((_3774 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3796 * _3796) * ((_3741 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3752 * _3598.y;
                                frontier_phi_78_pred_1 = _3752 * _3598.x;
                                frontier_phi_78_pred_2 = _3826 * _3610.z;
                                frontier_phi_78_pred_3 = _3826 * _3610.y;
                                frontier_phi_78_pred_4 = _3826 * _3610.x;
                                frontier_phi_78_pred_5 = _3752 * _3598.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3834 = frontier_phi_78_pred;
                            _3833 = frontier_phi_78_pred_1;
                            _3832 = frontier_phi_78_pred_2;
                            _3831 = frontier_phi_78_pred_3;
                            _3830 = frontier_phi_78_pred_4;
                            _3835 = frontier_phi_78_pred_5;
                            _3540 = _3833 + _3553;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            if (_3557 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3557;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3542;
                        frontier_phi_72_pred_1 = _3541;
                        frontier_phi_72_pred_2 = _3540;
                        frontier_phi_72_pred_3 = _3539;
                        frontier_phi_72_pred_4 = _3538;
                        frontier_phi_72_pred_5 = _3537;
                    }
                    _3210 = frontier_phi_72_pred;
                    _3208 = frontier_phi_72_pred_1;
                    _3206 = frontier_phi_72_pred_2;
                    _3204 = frontier_phi_72_pred_3;
                    _3202 = frontier_phi_72_pred_4;
                    _3200 = frontier_phi_72_pred_5;
                    uint _3345 = _3344 + 1u;
                    if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3338 = _3200;
                        _3339 = _3202;
                        _3340 = _3204;
                        _3341 = _3206;
                        _3342 = _3208;
                        _3343 = _3210;
                        _3344 = _3345;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3210;
                frontier_phi_60_61_ladder_1 = _3208;
                frontier_phi_60_61_ladder_2 = _3204;
                frontier_phi_60_61_ladder_3 = _3202;
                frontier_phi_60_61_ladder_4 = _3200;
                frontier_phi_60_61_ladder_5 = _3206;
            }
            else
            {
                frontier_phi_60_61_ladder = _3097;
                frontier_phi_60_61_ladder_1 = _3095;
                frontier_phi_60_61_ladder_2 = _3091;
                frontier_phi_60_61_ladder_3 = _3089;
                frontier_phi_60_61_ladder_4 = _3087;
                frontier_phi_60_61_ladder_5 = _3093;
            }
            _3199 = frontier_phi_60_61_ladder_4;
            _3201 = frontier_phi_60_61_ladder_3;
            _3203 = frontier_phi_60_61_ladder_2;
            _3205 = frontier_phi_60_61_ladder_5;
            _3207 = frontier_phi_60_61_ladder_1;
            _3209 = frontier_phi_60_61_ladder;
        }
        float _3214 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _3020 = (_3214 * _3205) + _2532;
        _3022 = (_3214 * _3207) + _2534;
        _3024 = (_3214 * _3209) + _2536;
        _3026 = ((_3199 * _974) * _3214) + _2870;
        _3028 = ((_3201 * _976) * _3214) + _2872;
        _3030 = ((_3203 * _977) * _3214) + _2874;
    }
    else
    {
        _3020 = _2532;
        _3022 = _2534;
        _3024 = _2536;
        _3026 = _2870;
        _3028 = _2872;
        _3030 = _2874;
    }
    float _4987 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4998 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _5009 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    uint _3050 = _259 + 6u;
    float _3058 = _912 / cbSceneParam._m0[86u].x;
    float _3059 = _913 / cbSceneParam._m0[86u].y;
    vec4 _3073 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, (log2((isnan(cbSceneParam._m0[77u].w) ? _847 : (isnan(_847) ? cbSceneParam._m0[77u].w : min(_847, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3075 = _3073.x;
    float _3076 = _3073.y;
    float _3077 = _3073.z;
    float _3078 = _3073.w;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_847 > cbSceneParam._m0[78u].w)
    {
        float _3112 = isnan(_847) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _847 : min(cbSceneParam._m0[80u].w, _847));
        float _3113 = _3112 / _847;
        float _3124 = _3113 * _897;
        float _3125 = _898 * _3113;
        float _3126 = (-0.0) - _3125;
        float _3127 = _3113 * _899;
        float _3129 = (cbSceneParam._m0[77u].w * _3126) / _3112;
        float _3130 = _3129 + cbSceneParam._m0[79u].w;
        float _3131 = cbSceneParam._m0[79u].w - _3125;
        float _3137 = sqrt(((_3124 * _3124) + (_3125 * _3125)) + (_3127 * _3127));
        float _3140 = (1.0 - (cbSceneParam._m0[77u].w / _3112)) * _3137;
        float _3145 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3147 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3300;
        if (abs((_3126 - _3129) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3300 = ((((_3130 > 0.0) ? exp2(_3145 * _3130) : (2.0 - exp2(_3147 * _3130))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3140;
        }
        else
        {
            float _3260 = 1.0 / cbSceneParam._m0[80u].x;
            float _3261 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : max(_3130, _3131));
            float _3262 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : min(_3130, _3131));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            _3300 = ((abs(_3137 / _3126) * cbSceneParam._m0[80u].y) * ((((_3271 - _3272) * 2.0) - ((exp2(_3145 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0)))) - exp2(_3145 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))))) * _3260)) - ((exp2(_3147 * _3271) - exp2(_3147 * _3272)) * _3260))) + (_3140 * cbSceneParam._m0[80u].z);
        }
        vec4 _3302 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, 1.0), 0.0);
        float _3311 = exp2((_3300 * (-1.44269502162933349609375)) * (1.0 - _3302.w));
        float _3312 = log2(_3311);
        float _3328 = log2(_3078);
        _3149 = (exp2(_3328 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].x)) * _3302.x) / cbSceneParam._m0[78u].x)) + _3075;
        _3151 = (exp2(_3328 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].y)) * _3302.y) / cbSceneParam._m0[78u].y)) + _3076;
        _3153 = (exp2(_3328 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].z)) * _3302.z) / cbSceneParam._m0[78u].z)) + _3077;
        _3155 = _3311 * _3078;
    }
    else
    {
        _3149 = _3075;
        _3151 = _3076;
        _3153 = _3077;
        _3155 = _3078;
    }
    float _3167 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3168 = _3167 == 3.0;
    float _3169 = log2(_3155);
    float _3176 = exp2(_3169 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_3020 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _990))) + ((_3026 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1798)) * cbPerFrame._m0[3u].x));
    float _3177 = exp2(_3169 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_3022 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _990))) + ((_3028 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1798)) * cbPerFrame._m0[3u].x));
    float _3178 = exp2(_3169 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3024 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _990))) + ((_3030 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1798)) * cbPerFrame._m0[3u].x));
    float _3187 = (_3167 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3187 * (_3168 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3149)));
    SV_Target.y = _3187 * (_3168 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3151)));
    SV_Target.z = _3187 * (_3168 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3153)));
    SV_Target.w = cbInstanceData._m0[_3050].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3050].w;
}


