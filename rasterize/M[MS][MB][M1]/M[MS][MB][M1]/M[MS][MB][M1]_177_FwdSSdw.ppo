#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1349;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].y) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3700 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _404 = (_397 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _405 = (_397 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _406 = (_397 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].y) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3711 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _535 = _531.z;
    float _542 = ((_514.x - _533) * _397) + _533;
    float _543 = ((_514.y - _534) * _397) + _534;
    float _544 = ((_514.z - _535) * _397) + _535;
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _569 = ((_556.z - _544) * _470) + _544;
    float _572 = ((((_556.x - _542) * _470) + _542) * 2.0) + (-1.0);
    float _573 = ((((_556.y - _543) * _470) + _543) * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _3722 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _579 = sqrt(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))));
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _611 = (_572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_491.x * 2.0) + (-1.0)))) + (((_599.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _612 = (_573 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_491.y * 2.0) + (-1.0)))) + (((_599.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _626 = _624.x;
    float _627 = 1.0 - _626;
    float _655 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_626 - _627) * cbMtdParam._m0[24u].w) + _627) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3733 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _656 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _664 = ((((cbMtdParam._m0[10u].x - _477) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _656) + _477;
    float _665 = ((((cbMtdParam._m0[10u].y - _478) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _656) + _478;
    float _666 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _479)) * _656) + _479;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _694 = _692.x;
    float _712 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _694) * _397) + _694;
    float _730 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _712) * _470) + _712;
    float _734 = ((_678.x - _730) * cbMtdParam._m0[19u].z) + _730;
    float _736 = _734 - (_734 * _656);
    float _741 = (((_491.z - _569) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _569;
    float _745 = ((_599.z - _741) * cbMtdParam._m0[19u].w) + _741;
    float _749 = ((cbMtdParam._m0[23u].y - _745) * _656) + _745;
    vec4 _768 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _774 = (_768.x * 2.0) + (-1.0);
    float _775 = (_768.y * 2.0) + (-1.0);
    float _776 = dot(vec2(_774, _775), vec2(_774, _775));
    float _3744 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _792 = (_656 * (((cbMtdParam._m0[22u].z * _611) - _611) + _774)) + _611;
    float _793 = (_656 * (((cbMtdParam._m0[22u].z * _612) - _612) + _775)) + _612;
    float _794 = (_656 * (sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) - _579)) + _579;
    float _796 = cbMtdParam._m0[22u].x + _599.w;
    float _799 = fma(_794, _246 * NORMAL.x, fma(_793, _253 * TANGENT.x, (_239 * _231) * _792));
    float _802 = fma(_794, _246 * NORMAL.y, fma(_793, _253 * TANGENT.y, (_239 * _232) * _792));
    float _805 = fma(_794, _246 * NORMAL.z, fma(_793, _253 * TANGENT.z, (_239 * _233) * _792));
    float _809 = inversesqrt(dot(vec3(_799, _802, _805), vec3(_799, _802, _805)));
    float _810 = _809 * _799;
    float _811 = _809 * _802;
    float _812 = _809 * _805;
    float _3755 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _813 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _3777 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3788 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3799 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3810 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _818 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _882 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _872);
    float _883 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _872);
    float _884 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _872);
    float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
    float _889 = _882 * _888;
    float _890 = _883 * _888;
    float _891 = _884 * _888;
    float _897 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _898 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _916 = fma(_812, cbSceneParam._m0[5u].z, fma(_811, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _810));
    float _919 = fma(_812, cbSceneParam._m0[6u].z, fma(_811, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _810));
    float _922 = fma(_812, cbSceneParam._m0[7u].z, fma(_811, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _810));
    uint _936 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_936].z;
    float _3821 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _948 = 1.0 - _818;
    float _949 = _945 * _948;
    float _950 = _946 * _948;
    float _951 = _947 * _948;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _818;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _818;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _818;
    float _959 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    vec4 _971 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _897, cbSceneParam._m0[86u].y * _898));
    float _975 = ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * TEXCOORD_5.w) * _971.x;
    float _976 = dot(vec3(_810, _811, _812), vec3(_889, _890, _891));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _810) - _889;
    float _984 = (_979 * _811) - _890;
    float _985 = (_979 * _812) - _891;
    float _989 = abs(dot(vec3(_889, _890, _891), vec3(_810, _811, _812)));
    float _3854 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_813);
    float _1004 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1010 = (1.0 - _1004) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1011 = _1004 * _991;
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1348;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1077 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1081 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1106 = _1039 + _810;
        float _1107 = _1043 + _811;
        float _1108 = _1047 + _812;
        float _1118 = fma(_1108, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106)) - _1073;
        float _1119 = fma(_1108, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106)) - _1077;
        float _1120 = fma(_1108, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106)) - _1081;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1073 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1077 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[34u].z) + ((((((_1081 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1176 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1142.x + (-0.5));
        float _1178 = _1176 * (_1142.y + (-0.5));
        float _1179 = _1176 * (_1142.z + (-0.5));
        float _1186 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1149.x + (-0.5));
        float _1188 = _1186 * (_1149.y + (-0.5));
        float _1189 = _1186 * (_1149.z + (-0.5));
        float _1196 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1156.x + (-0.5));
        float _1198 = _1196 * (_1156.y + (-0.5));
        float _1199 = _1196 * (_1156.z + (-0.5));
        float _1206 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1163.x + (-0.5));
        float _1208 = _1206 * (_1163.y + (-0.5));
        float _1209 = _1206 * (_1163.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1230 = (dot(vec3(_810, _811, _812), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1240 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3902 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1242 + 1.0))) + _1247) * _1210;
        float _1257 = _1178 * 0.5;
        float _1258 = _1188 * 0.5;
        float _1259 = _1198 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_810, _811, _812), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3935 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1284 + 1.0))) + _1289) * _1211;
        float _1299 = _1179 * 0.5;
        float _1300 = _1189 * 0.5;
        float _1301 = _1199 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_810, _811, _812), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3968 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1326 + 1.0))) + _1331) * _1212;
        _1348 = _1179;
        _1350 = _1178;
        _1351 = _1177;
        _1352 = _1189;
        _1353 = _1188;
        _1354 = _1187;
        _1355 = _1199;
        _1356 = _1198;
        _1357 = _1197;
        _1358 = _1212;
        _1359 = _1211;
        _1360 = _1210;
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1349;
        _1350 = _1349;
        _1351 = _1349;
        _1352 = _1349;
        _1353 = _1349;
        _1354 = _1349;
        _1355 = _1349;
        _1356 = _1349;
        _1357 = _1349;
        _1358 = _1349;
        _1359 = _1349;
        _1360 = _1349;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1391 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1395 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1418 = _1039 + _810;
        float _1419 = _1043 + _811;
        float _1420 = _1047 + _812;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_810, _811, _812), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4031 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_810, _811, _812), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4064 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_810, _811, _812), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4097 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1349;
        _1657 = _1349;
        _1658 = _1349;
        _1659 = _1349;
        _1660 = _1349;
        _1661 = _1349;
        _1662 = _1349;
        _1663 = _1349;
        _1664 = _1349;
        _1665 = _1349;
        _1666 = _1349;
        _1667 = _1349;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1361)) + _1361;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1362)) + _1362;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1363)) + _1363;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _983 * 0.5;
    float _1725 = _984 * 0.5;
    float _1726 = _985 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1348, _1352, _1355, _1358));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _813);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1842 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1846 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1850 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1853 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1856 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1859 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1887;
        if (_1853 > 0.0)
        {
            _1887 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1887 = frontier_phi_14_12_ladder;
        }
        float _2111;
        if (_1856 > 0.0)
        {
            _2111 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2111 = frontier_phi_23_19_ladder;
        }
        float _2368;
        if (_1859 > 0.0)
        {
            _2368 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2368 = frontier_phi_35_30_ladder;
        }
        float _2370 = isnan(_2111) ? _1887 : (isnan(_1887) ? _2111 : min(_1887, _2111));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1853) + _1842;
        float _2376 = (_2371 * _1856) + _1846;
        float _2377 = (_2371 * _1859) + _1850;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2380 = (-1.0) - _2378;
        float _2382 = _2378 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2377 > _2382) || ((_2377 < _2380) || ((_2376 > _2382) || ((_2376 < _2380) || ((_2375 < _2380) || (_2375 > _2382))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2377, cbModelParam._m0[9u].z, fma(_2376, cbModelParam._m0[9u].y, _2375 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2377, cbModelParam._m0[10u].z, fma(_2376, cbModelParam._m0[10u].y, _2375 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2377, cbModelParam._m0[11u].z, fma(_2376, cbModelParam._m0[11u].y, _2375 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_13_35_ladder = _2505.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2505.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2505.x * cbModelParam._m0[1u].y;
        }
        _1875 = frontier_phi_13_35_ladder_2;
        _1877 = frontier_phi_13_35_ladder_1;
        _1879 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1793);
        _1875 = _1863.x * cbModelParam._m0[1u].y;
        _1877 = _1863.y * cbModelParam._m0[1u].y;
        _1879 = _1863.z * cbModelParam._m0[1u].y;
    }
    float _1883 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _813);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1883 : min(cbModelParam._m0[25u].w, _1883));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1938 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1942 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1946 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1949 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1952 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1955 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2116;
        if (_1949 > 0.0)
        {
            _2116 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2116 = frontier_phi_25_21_ladder;
        }
        float _2395;
        if (_1952 > 0.0)
        {
            _2395 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2395 = frontier_phi_37_32_ladder;
        }
        float _2608;
        if (_1955 > 0.0)
        {
            _2608 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2608 = frontier_phi_46_43_ladder;
        }
        float _2610 = isnan(_2395) ? _2116 : (isnan(_2116) ? _2395 : min(_2116, _2395));
        float _2611 = isnan(_2608) ? _2610 : (isnan(_2610) ? _2608 : min(_2610, _2608));
        float _2615 = (_2611 * _1949) + _1938;
        float _2616 = (_2611 * _1952) + _1942;
        float _2617 = (_2611 * _1955) + _1946;
        float _2618 = _2611 * 9.9999997473787516355514526367188e-05;
        float _2619 = (-1.0) - _2618;
        float _2621 = _2618 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2617 > _2621) || ((_2617 < _2619) || ((_2616 > _2621) || ((_2616 < _2619) || ((_2615 < _2619) || (_2615 > _2621))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2617, cbModelParam._m0[17u].z, fma(_2616, cbModelParam._m0[17u].y, _2615 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2617, cbModelParam._m0[18u].z, fma(_2616, cbModelParam._m0[18u].y, _2615 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2617, cbModelParam._m0[19u].z, fma(_2616, cbModelParam._m0[19u].y, _2615 * cbModelParam._m0[19u].x))), _1884);
            frontier_phi_22_46_ladder = _2816.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2816.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2816.x * cbModelParam._m0[1u].z;
        }
        _1974 = frontier_phi_22_46_ladder_2;
        _1976 = frontier_phi_22_46_ladder_1;
        _1978 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1958 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1884);
        _1974 = _1958.x * cbModelParam._m0[1u].z;
        _1976 = _1958.y * cbModelParam._m0[1u].z;
        _1978 = _1958.z * cbModelParam._m0[1u].z;
    }
    float _1991 = (((_1010 * _959) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1993 = (((_1010 * _961) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1995 = (((_1010 * _962) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1998 = fma(_1995, cbSceneParam._m0[89u].z, fma(_1993, cbSceneParam._m0[89u].y, _1991 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1995, cbSceneParam._m0[90u].z, fma(_1993, cbSceneParam._m0[90u].y, _1991 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1995, cbSceneParam._m0[91u].z, fma(_1993, cbSceneParam._m0[91u].y, _1991 * cbSceneParam._m0[91u].x));
    vec4 _2012 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_897, _898));
    float _2014 = _2012.w;
    float _2026 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2014);
    float _2027 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2014);
    float _2028 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2014);
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _975 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2070 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2074 = _2034 | 1u;
    float _2085 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_810, _811, _812));
    float _2088 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_810, _811, _812));
    float _4233 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _4244 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _2095 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2102 = ((cbLight._m0[_2051].x * _2057) * _2095) + (((cbLight._m0[_2061].x * _2026) * _2070) * _2093);
    float _2103 = ((_2057 * cbLight._m0[_2051].y) * _2095) + (((cbLight._m0[_2061].y * _2027) * _2070) * _2093);
    float _2104 = ((_2057 * cbLight._m0[_2051].z) * _2095) + (((cbLight._m0[_2061].z * _2028) * _2070) * _2093);
    uvec4 _2108 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2110 = _2108.x == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2110)
    {
        _2121 = _2102;
        _2123 = _2103;
        _2125 = _2104;
    }
    else
    {
        uint _2129 = _2034 + 6u;
        float _2145 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4255 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2148 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2121 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _2102;
        _2123 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _2103;
        _2125 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _2104;
    }
    bool _2128 = _2108.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2128)
    {
        _2166 = _2121;
        _2168 = _2123;
        _2170 = _2125;
    }
    else
    {
        uint _2339 = _2034 + 7u;
        float _2355 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_810, _811, _812)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4271 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2358 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2166 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2121;
        _2168 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2123;
        _2170 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2125;
    }
    uint _2173 = _2034 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _813) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_2034].x + _889;
    float _2189 = cbLight._m0[_2034].y + _890;
    float _2190 = cbLight._m0[_2034].z + _891;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2034].xyz));
    float _4287 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2202 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2203 = dot(vec3(_810, _811, _812), vec3(_2195, _2196, _2197));
    float _4309 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2195, _2196, _2197));
    float _4320 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
    float _2224 = 0.959999978542327880859375 - _956;
    float _2226 = 0.959999978542327880859375 - _957;
    float _2227 = 0.959999978542327880859375 - _958;
    float _2234 = 1.0 - _2187;
    float _2245 = (0.5 / (((_2202 * ((_2201 * _2234) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2234) + _2187) * _2201))) * _2201;
    float _4331 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2261 = _2034 + 9u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _813) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2074].x + _889;
    float _2275 = cbLight._m0[_2074].y + _890;
    float _2276 = cbLight._m0[_2074].z + _891;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2074].xyz));
    float _4342 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2288 = dot(vec3(_810, _811, _812), vec3(_2281, _2282, _2283));
    float _4353 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2281, _2282, _2283));
    float _4364 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2273 * _2273;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2307 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
    float _2314 = 1.0 - _2273;
    float _2324 = (0.5 / (((_2202 * ((_2287 * _2314) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2314) + _2273) * _2287))) * _2287;
    float _4375 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2326 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    float _2336 = (((((_2307 * _2224) + _959) * cbLight._m0[_2261].x) * _2326) * _2057) + ((((cbLight._m0[_2173].x * _2026) * ((_2223 * _2224) + _959)) * _2247) * _2070);
    float _2337 = (((((_2307 * _2226) + _961) * cbLight._m0[_2261].y) * _2326) * _2057) + ((((cbLight._m0[_2173].y * _2027) * ((_2223 * _2226) + _961)) * _2247) * _2070);
    float _2338 = (((((_2307 * _2227) + _962) * cbLight._m0[_2261].z) * _2326) * _2057) + ((((cbLight._m0[_2173].z * _2028) * ((_2223 * _2227) + _962)) * _2247) * _2070);
    float _2400;
    float _2402;
    float _2404;
    if (_2110)
    {
        _2400 = _2336;
        _2402 = _2337;
        _2404 = _2338;
    }
    else
    {
        uint _2406 = _2034 + 2u;
        uint _2410 = _2034 + 10u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _813) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _889;
        float _2427 = cbLight._m0[_2406].y + _890;
        float _2428 = cbLight._m0[_2406].z + _891;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2406].xyz));
        float _4386 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2440 = dot(vec3(_810, _811, _812), vec3(_2433, _2434, _2435));
        float _4397 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4408 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2459 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
        float _2466 = 1.0 - _2425;
        float _2476 = (0.5 / (((_2202 * ((_2439 * _2466) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2466) + _2425) * _2439))) * _2439;
        float _4419 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2478 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2479 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2400 = (((((_2459 * _2224) + _959) * cbLight._m0[_2410].x) * _2478) * _2479) + _2336;
        _2402 = (((((_2459 * _2226) + _961) * cbLight._m0[_2410].y) * _2478) * _2479) + _2337;
        _2404 = (((((_2459 * _2227) + _962) * cbLight._m0[_2410].z) * _2478) * _2479) + _2338;
    }
    float _2514;
    float _2516;
    float _2518;
    if (_2128)
    {
        _2514 = _2400;
        _2516 = _2402;
        _2518 = _2404;
    }
    else
    {
        uint _2525 = _2034 + 3u;
        uint _2529 = _2034 + 11u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _813) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _889;
        float _2546 = cbLight._m0[_2525].y + _890;
        float _2547 = cbLight._m0[_2525].z + _891;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_810, _811, _812), vec3(cbLight._m0[_2525].xyz));
        float _4435 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2559 = dot(vec3(_810, _811, _812), vec3(_2552, _2553, _2554));
        float _4446 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4457 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2585 = 1.0 - _2544;
        float _2595 = (0.5 / (((_2202 * ((_2558 * _2585) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2585) + _2544) * _2558))) * _2558;
        float _4468 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2514 = (((((_2578 * _2224) + _959) * cbLight._m0[_2529].x) * _2597) * _2598) + _2400;
        _2516 = (((((_2578 * _2226) + _961) * cbLight._m0[_2529].y) * _2597) * _2598) + _2402;
        _2518 = (((((_2578 * _2227) + _962) * cbLight._m0[_2529].z) * _2597) * _2598) + _2404;
    }
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    if (_2032.y == 0u)
    {
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2673;
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2673;
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2673;
        uvec4 _2688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2689 = _2688.x;
        uint _2700 = uint((float(_2688.y) * floor(float(uint(cbSceneParam._m0[85u].y * _898) / _2689))) + floor(float(uint(cbSceneParam._m0[85u].x * _897) / _2689)));
        float _2710 = (log2(_2676 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2711 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        uint _2714 = uint(isnan(14.0) ? _2711 : (isnan(_2711) ? 14.0 : min(_2711, 14.0)));
        uvec4 _2719 = texelFetch(g_lightClusterGridBuffer, int(((_2714 << 2u) + (_2700 << 6u)) >> 2u));
        uint _2720 = _2719.x;
        uint _2721 = _2688.z;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((((1u << ((_2721 >> 4u) & 15u)) + 4294967295u) & _2720) == 0u) || ((_2721 & 240u) == 0u))
        {
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
        }
        else
        {
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2714 << 5u) + (_2700 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2982)
                {
                    frontier_phi_61_pred = _2966;
                    frontier_phi_61_pred_1 = _2971;
                    frontier_phi_61_pred_2 = _2970;
                    frontier_phi_61_pred_3 = _2969;
                    frontier_phi_61_pred_4 = _2968;
                    frontier_phi_61_pred_5 = _2967;
                }
                else
                {
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    uint _3096;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2981;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    for (;;)
                    {
                        uint _3100 = uint(findLSB(_3096)) + (_2972 << 5u);
                        uint _3097 = (_3096 + 4294967295u) & _3096;
                        uint _3102 = _3100 * 48u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3122 = (_3100 * 48u) + 4u;
                        vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3141 = (_3100 * 48u) + 8u;
                        vec3 _3152 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x));
                        float _3156 = _3116.x - _2674;
                        float _3157 = _3116.y - _2675;
                        float _3158 = _3116.z - _2676;
                        float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                        float _3162 = inversesqrt(_3159);
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3166 = dot(vec3(_916, _919, _922), vec3(_3163, _3164, _3165));
                        float _3171 = 1.0 - (_3159 * _3116.w);
                        float _4494 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3173 = sqrt(_3159) * _3135.w;
                        float _3176 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3166) + _3177;
                        float _3183 = _3173 * _3173;
                        float _3187 = ((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3172) / ((_3183 * 0.699999988079071044921875) + 1.0);
                        float _3191 = (-0.0) - _2674;
                        float _3192 = (-0.0) - _2675;
                        float _3193 = (-0.0) - _2676;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3208 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                        float _3209 = 1.0 - _991;
                        float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                        float _3217 = _3216 * _3216;
                        float _3218 = _3217 * _3217;
                        float _3219 = _3198 + _3163;
                        float _3220 = _3199 + _3164;
                        float _3221 = _3200 + _3165;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3229 = dot(vec3(_916, _919, _922), vec3(_3198, _3199, _3200));
                        float _4510 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3233 = dot(vec3(_916, _919, _922), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                        float _4521 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                        float _3241 = _3176 * _3217;
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3166) + _3242;
                        float _4532 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3247 = 1.0 - _3217;
                        float _3257 = (0.5 / (((_3246 * ((_3232 * _3247) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3217) * _3232))) * _3246;
                        float _4543 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3268 = (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3240 * _3240) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125))) * _3172;
                        _3025 = (_3187 * _3135.x) + _3093;
                        _3026 = (_3187 * _3135.y) + _3094;
                        _3027 = (_3187 * _3135.z) + _3095;
                        _3022 = (_3268 * _3152.x) + _3090;
                        _3023 = (_3268 * _3152.y) + _3091;
                        _3024 = (_3268 * _3152.z) + _3092;
                        if (_3097 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3097;
                        }
                    }
                    frontier_phi_61_pred = _3022;
                    frontier_phi_61_pred_1 = _3027;
                    frontier_phi_61_pred_2 = _3026;
                    frontier_phi_61_pred_3 = _3025;
                    frontier_phi_61_pred_4 = _3024;
                    frontier_phi_61_pred_5 = _3023;
                }
                _2822 = frontier_phi_61_pred;
                _2832 = frontier_phi_61_pred_1;
                _2830 = frontier_phi_61_pred_2;
                _2828 = frontier_phi_61_pred_3;
                _2826 = frontier_phi_61_pred_4;
                _2824 = frontier_phi_61_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2822;
                    _2967 = _2824;
                    _2968 = _2826;
                    _2969 = _2828;
                    _2970 = _2830;
                    _2971 = _2832;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
        }
        uvec4 _2835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2836 = _2835.z;
        uint _2838 = (_2836 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2838) & _2720) == 0u)
        {
            _2934 = _2821;
            _2936 = _2823;
            _2938 = _2825;
            _2940 = _2827;
            _2942 = _2829;
            _2944 = _2831;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
            float _2960 = _2959 * _2674;
            float _2961 = _2959 * _2675;
            float _2962 = _2959 * _2676;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2838 < ((_2836 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3073 = _2821;
                float _3074 = _2823;
                float _3075 = _2825;
                float _3076 = _2827;
                float _3077 = _2829;
                float _3078 = _2831;
                uint _3079 = _2838;
                uint _3088;
                bool _3089;
                for (;;)
                {
                    _3088 = texelFetch(g_lightClassification, int((((_2714 << 5u) + (_2700 << 9u)) + (_3079 << 2u)) >> 2u)).x;
                    _3089 = _3088 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3089)
                    {
                        frontier_phi_67_pred = _3076;
                        frontier_phi_67_pred_1 = _3077;
                        frontier_phi_67_pred_2 = _3078;
                        frontier_phi_67_pred_3 = _3075;
                        frontier_phi_67_pred_4 = _3074;
                        frontier_phi_67_pred_5 = _3073;
                    }
                    else
                    {
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3286 = _3073;
                        float _3287 = _3074;
                        float _3288 = _3075;
                        float _3289 = _3076;
                        float _3290 = _3077;
                        float _3291 = _3078;
                        uint _3292 = _3088;
                        uint _3293;
                        vec4 _3318;
                        float _3319;
                        vec4 _3334;
                        vec3 _3346;
                        vec4 _3361;
                        vec4 _3376;
                        float _3422;
                        bool _3423;
                        for (;;)
                        {
                            uint _3303 = ((_3079 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3292));
                            _3293 = (_3292 + 4294967295u) & _3292;
                            uint _3305 = _3303 * 40u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            _3319 = _3318.w;
                            uint _3321 = (_3303 * 40u) + 4u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3303 * 40u) + 8u;
                            _3346 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x));
                            uint _3348 = (_3303 * 40u) + 16u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3303 * 40u) + 20u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3303 * 40u) + 24u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3397 = (_3303 * 40u) + 28u;
                            vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3422 = fma(_2676, _3410.z, fma(_2675, _3410.y, _3410.x * _2674)) + _3410.w;
                            _3423 = !((fma(_2676, _3391.z, fma(_2675, _3391.y, _3391.x * _2674)) + _3391.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3423)
                            {
                                float _3450 = _3318.x - _2674;
                                float _3451 = _3318.y - _2675;
                                float _3452 = _3318.z - _2676;
                                float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                                float _3456 = inversesqrt(_3453);
                                float _3457 = _3456 * _3450;
                                float _3458 = _3456 * _3451;
                                float _3459 = _3456 * _3452;
                                float _3463 = 1.0 - (_3453 / (_3319 * _3319));
                                float _4554 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3468 = sqrt(_3453) * _3334.w;
                                float _3470 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                                float _3471 = _3470 * _3470;
                                float _3474 = ((1.0 - _3471) * dot(vec3(_3457, _3458, _3459), vec3(_916, _919, _922))) + _3471;
                                float _3477 = _3468 * _3468;
                                float _3481 = (fma(_2676, _3361.z, fma(_2675, _3361.y, _3361.x * _2674)) + _3361.w) / _3422;
                                float _3482 = (fma(_2676, _3376.z, fma(_2675, _3376.y, _3376.x * _2674)) + _3376.w) / _3422;
                                float _3486 = 1.0 - dot(vec2(_3481, _3482), vec2(_3481, _3482));
                                float _4570 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3488 = _3487 * (((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3464) / ((_3477 * 0.699999988079071044921875) + 1.0));
                                float _3500 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                                float _3501 = 1.0 - _991;
                                float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                                float _3509 = _3508 * _3508;
                                float _3510 = _3509 * _3509;
                                float _3511 = _3457 - _2960;
                                float _3512 = _3458 - _2961;
                                float _3513 = _3459 - _2962;
                                float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                                float _3521 = dot(vec3(_916, _919, _922), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4581 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3525 = dot(vec3(_916, _919, _922), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                                float _4592 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                                float _3533 = _3470 * _3509;
                                float _3534 = _3533 * _3533;
                                float _3540 = ((1.0 - _3534) * dot(vec3(_916, _919, _922), vec3(_3457, _3458, _3459))) + _3534;
                                float _4603 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3542 = 1.0 - _3509;
                                float _3552 = (0.5 / (((_3541 * ((_3524 * _3542) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3509) * _3524))) * _3541;
                                float _4614 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3562 = (_3487 * _3464) * (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3532 * _3532) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3562 * _3346.x;
                                frontier_phi_73_pred_1 = _3562 * _3346.y;
                                frontier_phi_73_pred_2 = _3488 * _3334.z;
                                frontier_phi_73_pred_3 = _3488 * _3334.y;
                                frontier_phi_73_pred_4 = _3488 * _3334.x;
                                frontier_phi_73_pred_5 = _3562 * _3346.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_73_pred;
                            _3567 = frontier_phi_73_pred_1;
                            _3571 = frontier_phi_73_pred_2;
                            _3570 = frontier_phi_73_pred_3;
                            _3569 = frontier_phi_73_pred_4;
                            _3568 = frontier_phi_73_pred_5;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3275 = _3568 + _3288;
                            if (_3293 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3293;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3276;
                        frontier_phi_67_pred_1 = _3277;
                        frontier_phi_67_pred_2 = _3278;
                        frontier_phi_67_pred_3 = _3275;
                        frontier_phi_67_pred_4 = _3274;
                        frontier_phi_67_pred_5 = _3273;
                    }
                    _2941 = frontier_phi_67_pred;
                    _2943 = frontier_phi_67_pred_1;
                    _2945 = frontier_phi_67_pred_2;
                    _2939 = frontier_phi_67_pred_3;
                    _2937 = frontier_phi_67_pred_4;
                    _2935 = frontier_phi_67_pred_5;
                    uint _3080 = _3079 + 1u;
                    if (_3080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3073 = _2935;
                        _3074 = _2937;
                        _3075 = _2939;
                        _3076 = _2941;
                        _3077 = _2943;
                        _3078 = _2945;
                        _3079 = _3080;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2943;
                frontier_phi_55_56_ladder_1 = _2945;
                frontier_phi_55_56_ladder_2 = _2941;
                frontier_phi_55_56_ladder_3 = _2939;
                frontier_phi_55_56_ladder_4 = _2937;
                frontier_phi_55_56_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_55_56_ladder = _2829;
                frontier_phi_55_56_ladder_1 = _2831;
                frontier_phi_55_56_ladder_2 = _2827;
                frontier_phi_55_56_ladder_3 = _2825;
                frontier_phi_55_56_ladder_4 = _2823;
                frontier_phi_55_56_ladder_5 = _2821;
            }
            _2934 = frontier_phi_55_56_ladder_5;
            _2936 = frontier_phi_55_56_ladder_4;
            _2938 = frontier_phi_55_56_ladder_3;
            _2940 = frontier_phi_55_56_ladder_2;
            _2942 = frontier_phi_55_56_ladder;
            _2944 = frontier_phi_55_56_ladder_1;
        }
        float _2949 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _2733 = (_2949 * _2940) + _2166;
        _2735 = (_2949 * _2942) + _2168;
        _2737 = (_2949 * _2944) + _2170;
        _2739 = ((_2934 * _959) * _2949) + _2514;
        _2741 = ((_2936 * _961) * _2949) + _2516;
        _2743 = ((_2938 * _962) * _2949) + _2518;
    }
    else
    {
        _2733 = _2166;
        _2735 = _2168;
        _2737 = _2170;
        _2739 = _2514;
        _2741 = _2516;
        _2743 = _2518;
    }
    float _4630 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4641 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4652 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    uint _2763 = _259 + 6u;
    float _2771 = _897 / cbSceneParam._m0[86u].x;
    float _2772 = _898 / cbSceneParam._m0[86u].y;
    vec4 _2786 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2788 = _2786.x;
    float _2789 = _2786.y;
    float _2790 = _2786.z;
    float _2791 = _2786.w;
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _2846 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _2847 = _2846 / _832;
        float _2858 = _2847 * _882;
        float _2859 = _883 * _2847;
        float _2860 = (-0.0) - _2859;
        float _2862 = _2847 * _884;
        float _2864 = (cbSceneParam._m0[77u].w * _2860) / _2846;
        float _2865 = _2864 + cbSceneParam._m0[79u].w;
        float _2866 = cbSceneParam._m0[79u].w - _2859;
        float _2872 = sqrt(((_2858 * _2858) + (_2859 * _2859)) + (_2862 * _2862));
        float _2875 = (1.0 - (cbSceneParam._m0[77u].w / _2846)) * _2872;
        float _2880 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2882 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3035;
        if (abs((_2860 - _2864) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3035 = ((((_2865 > 0.0) ? exp2(_2880 * _2865) : (2.0 - exp2(_2882 * _2865))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2875;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2866) ? _2865 : (isnan(_2865) ? _2866 : max(_2865, _2866));
            float _2997 = isnan(_2866) ? _2865 : (isnan(_2865) ? _2866 : min(_2865, _2866));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3035 = ((abs(_2872 / _2860) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2880 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2880 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2882 * _3006) - exp2(_2882 * _3007)) * _2995))) + (_2875 * cbSceneParam._m0[80u].z);
        }
        vec4 _3037 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, 1.0), 0.0);
        float _3046 = exp2((_3035 * (-1.44269502162933349609375)) * (1.0 - _3037.w));
        float _3047 = log2(_3046);
        float _3063 = log2(_2791);
        _2884 = (exp2(_3063 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].x)) * _3037.x) / cbSceneParam._m0[78u].x)) + _2788;
        _2886 = (exp2(_3063 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].y)) * _3037.y) / cbSceneParam._m0[78u].y)) + _2789;
        _2888 = (exp2(_3063 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].z)) * _3037.z) / cbSceneParam._m0[78u].z)) + _2790;
        _2890 = _3046 * _2791;
    }
    else
    {
        _2884 = _2788;
        _2886 = _2789;
        _2888 = _2790;
        _2890 = _2791;
    }
    float _2902 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2903 = _2902 == 3.0;
    float _2904 = log2(_2890);
    float _2911 = exp2(_2904 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2733 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _975))) + ((_2739 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2912 = exp2(_2904 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2735 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _975))) + ((_2741 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2913 = exp2(_2904 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2737 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _975))) + ((_2743 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2922 = (_2902 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2922 * (_2903 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2884)));
    SV_Target.y = _2922 * (_2903 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2886)));
    SV_Target.z = _2922 * (_2903 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2888)));
    SV_Target.w = cbInstanceData._m0[_2763].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2763].w;
}


