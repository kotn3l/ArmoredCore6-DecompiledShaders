#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1382;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3991 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _480 = ((_450.z - _471) * _396) + _471;
    float _483 = ((((_450.x - _469) * _396) + _469) * 2.0) + (-1.0);
    float _484 = ((((_450.y - _470) * _396) + _470) * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _4002 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _522 = (_483 + ((((_423.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_510.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _523 = (_484 + ((((_423.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_510.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _526 = fma(_490, _247, fma(_523, _254, _522 * _240));
    float _529 = fma(_490, _248, fma(_523, _255, _522 * _241));
    float _532 = fma(_490, _249, fma(_523, _256, _522 * _242));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _570 = ((_565 - _566) * cbMtdParam._m0[24u].z) + _566;
    float _572 = (cbMtdParam._m0[19u].x + dot(vec4(_536 * _526, _536 * _529, _536 * _532, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_570 * cbMtdParam._m0[21u].z);
    float _4013 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _575 = (-0.0) - cbMtdParam._m0[24u].x;
    float _577 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
    float _585 = _573 - ((_573 * TEXCOORD_8.x) * _578);
    float _586 = _573 - ((_573 * TEXCOORD_8.y) * _578);
    float _587 = _573 - ((_573 * TEXCOORD_8.z) * _578);
    float _594 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _598 = ((isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : min(_594, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _606 = (_598 - (((_570 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _598))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4044 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _611 = ((_585 * (cbMtdParam._m0[17u].x - _403)) * _607) + _403;
    float _612 = ((_586 * (cbMtdParam._m0[17u].y - _404)) * _607) + _404;
    float _613 = ((_587 * (cbMtdParam._m0[17u].z - _405)) * _607) + _405;
    vec4 _625 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _655 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_627 - _628) * cbMtdParam._m0[24u].w) + _628) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4055 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _656 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _664 = ((((cbMtdParam._m0[10u].x - _611) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _656) + _611;
    float _665 = ((((cbMtdParam._m0[10u].y - _612) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _656) + _612;
    float _666 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _613)) * _656) + _613;
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _694 = _692.x;
    float _712 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _694) * _396) + _694;
    float _716 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _712) * cbMtdParam._m0[19u].z) + _712;
    float _719 = _716 - ((_607 * _585) * _716);
    float _721 = _719 - (_719 * _656);
    float _726 = (((_423.z - _480) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _480;
    float _730 = ((_510.z - _726) * cbMtdParam._m0[19u].w) + _726;
    vec4 _744 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _751 = (_744.x * 2.0) + (-1.0);
    float _752 = (_744.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4066 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _762 = (((_744.z - _730) * _585) * _607) + _730;
    float _765 = ((cbMtdParam._m0[23u].y - _762) * _656) + _762;
    vec4 _784 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _790 = (_784.x * 2.0) + (-1.0);
    float _791 = (_784.y * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _4077 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _812 = (((cbMtdParam._m0[21u].x * _522) + ((_751 - _522) * _585)) * _607) + _522;
    float _813 = (((cbMtdParam._m0[21u].x * _523) + ((_752 - _523) * _586)) * _607) + _523;
    float _814 = (((sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) - _490) * _587) * _607) + _490;
    float _825 = (((_790 - _812) + (_812 * cbMtdParam._m0[22u].z)) * _656) + _812;
    float _826 = (((_791 - _813) + (_813 * cbMtdParam._m0[22u].z)) * _656) + _813;
    float _827 = ((sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) - _814) * _656) + _814;
    float _829 = cbMtdParam._m0[22u].x + _510.w;
    float _832 = fma(_827, _247, fma(_826, _254, _825 * _240));
    float _835 = fma(_827, _248, fma(_826, _255, _825 * _241));
    float _838 = fma(_827, _249, fma(_826, _256, _825 * _242));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _4088 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _846 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4110 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4121 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4132 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4143 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _851 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _952 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _955 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _969 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _975 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_969].x;
    float _976 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_969].y;
    float _977 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_969].z;
    float _4154 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _981 = 1.0 - _851;
    float _982 = _978 * _981;
    float _983 = _979 * _981;
    float _984 = _980 * _981;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _851;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _851;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _851;
    float _992 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _1008 = ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * TEXCOORD_5.w) * _1004.x;
    float _1009 = dot(vec3(_843, _844, _845), vec3(_922, _923, _924));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _843) - _922;
    float _1017 = (_1012 * _844) - _923;
    float _1018 = (_1012 * _845) - _924;
    float _1022 = abs(dot(vec3(_922, _923, _924), vec3(_843, _844, _845)));
    float _4187 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_846);
    float _1037 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1043 = (1.0 - _1037) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1044 = _1037 * _1024;
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1110 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1114 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1139 = _1072 + _843;
        float _1140 = _1076 + _844;
        float _1141 = _1080 + _845;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_843, _844, _845), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4235 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_843, _844, _845), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4268 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_843, _844, _845), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4301 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1421 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1425 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1429 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1452 = _1072 + _843;
        float _1453 = _1076 + _844;
        float _1454 = _1080 + _845;
        float _1464 = fma(_1454, cbModelParam._m0[30u].z, fma(_1453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1452)) - _1421;
        float _1465 = fma(_1454, cbModelParam._m0[31u].z, fma(_1453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1452)) - _1425;
        float _1466 = fma(_1454, cbModelParam._m0[32u].z, fma(_1453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1452)) - _1429;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1421 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1425 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[35u].z) + ((((((_1429 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1520 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1487.x + (-0.5));
        float _1522 = _1520 * (_1487.y + (-0.5));
        float _1523 = _1520 * (_1487.z + (-0.5));
        float _1530 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1494.x + (-0.5));
        float _1532 = _1530 * (_1494.y + (-0.5));
        float _1533 = _1530 * (_1494.z + (-0.5));
        float _1540 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1501.x + (-0.5));
        float _1542 = _1540 * (_1501.y + (-0.5));
        float _1543 = _1540 * (_1501.z + (-0.5));
        float _1550 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1508.x + (-0.5));
        float _1552 = _1550 * (_1508.y + (-0.5));
        float _1553 = _1550 * (_1508.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_843, _844, _845), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4364 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1584 + 1.0))) + _1589) * _1554;
        float _1599 = _1522 * 0.5;
        float _1600 = _1532 * 0.5;
        float _1601 = _1542 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_843, _844, _845), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4397 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1626 + 1.0))) + _1631) * _1555;
        float _1641 = _1523 * 0.5;
        float _1642 = _1533 * 0.5;
        float _1643 = _1543 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_843, _844, _845), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4430 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1668 + 1.0))) + _1673) * _1556;
        _1690 = _1523;
        _1691 = _1522;
        _1692 = _1521;
        _1693 = _1533;
        _1694 = _1532;
        _1695 = _1531;
        _1696 = _1543;
        _1697 = _1542;
        _1698 = _1541;
        _1699 = _1556;
        _1700 = _1555;
        _1701 = _1554;
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1382;
        _1691 = _1382;
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = 0.0;
        _1703 = 0.0;
        _1704 = 0.0;
    }
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1394)) + _1394;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1395)) + _1395;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1396)) + _1396;
    float _1737 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1714));
    float _1758 = _1016 * 0.5;
    float _1759 = _1017 * 0.5;
    float _1760 = _1018 * 0.5;
    float _1761 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1764 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1767 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1801;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1774 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1778 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1782 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1789 = dot(vec4(cbModelParam._m0[39u]), vec4(_1758, _1759, _1760, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1812;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1803 = dot(vec4(cbModelParam._m0[40u]), vec4(_1758, _1759, _1760, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1816 = (_1812 * cbModelParam._m0[1u].x) + (_1801 * (1.0 - cbModelParam._m0[1u].x));
    float _1826 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _846);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1826 : min(cbModelParam._m0[25u].z, _1826));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1875 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1879 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1883 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1886 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1889 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1892 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1920;
        if (_1886 > 0.0)
        {
            _1920 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1920 = frontier_phi_14_12_ladder;
        }
        float _2092;
        if (_1889 > 0.0)
        {
            _2092 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2092 = frontier_phi_23_19_ladder;
        }
        float _2387;
        if (_1892 > 0.0)
        {
            _2387 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2387 = frontier_phi_35_30_ladder;
        }
        float _2389 = isnan(_2092) ? _1920 : (isnan(_1920) ? _2092 : min(_1920, _2092));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1886) + _1875;
        float _2395 = (_2390 * _1889) + _1879;
        float _2396 = (_2390 * _1892) + _1883;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1827);
            frontier_phi_13_35_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1908 = frontier_phi_13_35_ladder_2;
        _1910 = frontier_phi_13_35_ladder_1;
        _1912 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1827);
        _1908 = _1896.x * cbModelParam._m0[1u].y;
        _1910 = _1896.y * cbModelParam._m0[1u].y;
        _1912 = _1896.z * cbModelParam._m0[1u].y;
    }
    float _1916 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _846);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1916 : min(cbModelParam._m0[25u].w, _1916));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1971 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _1975 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _1979 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _1982 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _1985 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _1988 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2097;
        if (_1982 > 0.0)
        {
            _2097 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2097 = frontier_phi_25_21_ladder;
        }
        float _2414;
        if (_1985 > 0.0)
        {
            _2414 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2414 = frontier_phi_37_32_ladder;
        }
        float _2752;
        if (_1988 > 0.0)
        {
            _2752 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2752 = frontier_phi_47_44_ladder;
        }
        float _2754 = isnan(_2414) ? _2097 : (isnan(_2097) ? _2414 : min(_2097, _2414));
        float _2755 = isnan(_2752) ? _2754 : (isnan(_2754) ? _2752 : min(_2754, _2752));
        float _2759 = (_2755 * _1982) + _1971;
        float _2760 = (_2755 * _1985) + _1975;
        float _2761 = (_2755 * _1988) + _1979;
        float _2762 = _2755 * 9.9999997473787516355514526367188e-05;
        float _2763 = (-1.0) - _2762;
        float _2765 = _2762 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2761 > _2765) || ((_2761 < _2763) || ((_2760 > _2765) || ((_2760 < _2763) || ((_2759 < _2763) || (_2759 > _2765))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2761, cbModelParam._m0[17u].z, fma(_2760, cbModelParam._m0[17u].y, _2759 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2761, cbModelParam._m0[18u].z, fma(_2760, cbModelParam._m0[18u].y, _2759 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2761, cbModelParam._m0[19u].z, fma(_2760, cbModelParam._m0[19u].y, _2759 * cbModelParam._m0[19u].x))), _1917);
            frontier_phi_22_47_ladder = _2883.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2883.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2883.x * cbModelParam._m0[1u].z;
        }
        _2007 = frontier_phi_22_47_ladder_2;
        _2009 = frontier_phi_22_47_ladder_1;
        _2011 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1917);
        _2007 = _1991.x * cbModelParam._m0[1u].z;
        _2009 = _1991.y * cbModelParam._m0[1u].z;
        _2011 = _1991.z * cbModelParam._m0[1u].z;
    }
    float _2024 = (((_1043 * _992) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2026 = (((_1043 * _994) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2028 = (((_1043 * _995) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2031 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2024 * cbSceneParam._m0[91u].x));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2084 = _2071 / _2083;
    float _2085 = _2075 / _2083;
    float _2086 = _2079 / _2083;
    float _2233;
    float _2234;
    float _2235;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2113 = ((uint(_2086 > cbSceneParam._m0[59u].y) + uint(_2086 > cbSceneParam._m0[59u].x)) + uint(_2086 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2114 = _2113 + 43u;
        uint _2122 = _2113 + 44u;
        uint _2130 = _2113 + 45u;
        uint _2138 = _2113 + 46u;
        float _2149 = fma(_2083, cbSceneParam._m0[_2114].w, fma(_2079, cbSceneParam._m0[_2114].z, fma(_2075, cbSceneParam._m0[_2114].y, _2071 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2083, cbSceneParam._m0[_2122].w, fma(_2079, cbSceneParam._m0[_2122].z, fma(_2075, cbSceneParam._m0[_2122].y, _2071 * cbSceneParam._m0[_2122].x)));
        float _2161 = fma(_2083, cbSceneParam._m0[_2138].w, fma(_2079, cbSceneParam._m0[_2138].z, fma(_2075, cbSceneParam._m0[_2138].y, _2071 * cbSceneParam._m0[_2138].x)));
        float _2166 = cbSceneParam._m0[33u].z * _2161;
        float _2168 = cbSceneParam._m0[33u].w * _2161;
        float _2171 = fma(_2083, cbSceneParam._m0[_2130].w, fma(_2079, cbSceneParam._m0[_2130].z, fma(_2075, cbSceneParam._m0[_2130].y, _2071 * cbSceneParam._m0[_2130].x))) / _2161;
        float _2219 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
        float _4556 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2226 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2166 + _2149) / _2161, (_2168 + _2153) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2149) / _2161, (_2153 - _2166) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2166) / _2161, (_2153 - _2168) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2168) / _2161, (_2166 + _2153) / _2161), _2171), 0.0)).x), vec4(0.25)));
        _2233 = 1.0 - (_2226 * cbSceneParam._m0[34u].x);
        _2234 = 1.0 - (_2226 * cbSceneParam._m0[34u].y);
        _2235 = 1.0 - (_2226 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2233 = 1.0;
        _2234 = 1.0;
        _2235 = 1.0;
    }
    float _2299;
    float _2301;
    float _2303;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2287 = fma(_2083, cbSceneParam._m0[63u].w, fma(_2079, cbSceneParam._m0[63u].z, fma(_2075, cbSceneParam._m0[63u].y, _2071 * cbSceneParam._m0[63u].x)));
        float _2288 = fma(_2083, cbSceneParam._m0[60u].w, fma(_2079, cbSceneParam._m0[60u].z, fma(_2075, cbSceneParam._m0[60u].y, _2071 * cbSceneParam._m0[60u].x))) / _2287;
        float _2289 = fma(_2083, cbSceneParam._m0[61u].w, fma(_2079, cbSceneParam._m0[61u].z, fma(_2075, cbSceneParam._m0[61u].y, _2071 * cbSceneParam._m0[61u].x))) / _2287;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2288 >= cbSceneParam._m0[64u].x) && (_2289 >= cbSceneParam._m0[64u].y)) && (_2288 <= cbSceneParam._m0[64u].z)) && (_2289 <= cbSceneParam._m0[64u].w))
        {
            float _2427 = fma(_2083, cbSceneParam._m0[62u].w, fma(_2079, cbSceneParam._m0[62u].z, fma(_2075, cbSceneParam._m0[62u].y, _2071 * cbSceneParam._m0[62u].x))) / _2287;
            float _2431 = isnan(cbSceneParam._m0[41u].w) ? _2427 : (isnan(_2427) ? cbSceneParam._m0[41u].w : max(_2427, cbSceneParam._m0[41u].w));
            float _2474 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
            float _4572 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
            float _2481 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2288, cbSceneParam._m0[33u].w + _2289), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2288, _2289 - cbSceneParam._m0[33u].z), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].z, _2289 - cbSceneParam._m0[33u].w), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2289), _2431), 0.0)).x), vec4(0.25)));
            float _2485 = 1.0 - (_2481 * cbSceneParam._m0[34u].x);
            float _2486 = 1.0 - (_2481 * cbSceneParam._m0[34u].y);
            float _2487 = 1.0 - (_2481 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_34_33_ladder_1 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_34_33_ladder_2 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
        }
        else
        {
            frontier_phi_34_33_ladder = _2235;
            frontier_phi_34_33_ladder_1 = _2234;
            frontier_phi_34_33_ladder_2 = _2233;
        }
        _2299 = frontier_phi_34_33_ladder_2;
        _2301 = frontier_phi_34_33_ladder_1;
        _2303 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2299 = _2233;
        _2301 = _2234;
        _2303 = _2235;
    }
    uvec4 _2308 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2310 = _2308.x * 14u;
    uint _2311 = _2310 + 13u;
    float _2318 = _1008 + (-1.0);
    float _2323 = (cbLight._m0[_2311].x * _2318) + 1.0;
    float _2324 = (cbLight._m0[_2311].y * _2318) + 1.0;
    float _2325 = (cbLight._m0[_2311].z * _2318) + 1.0;
    float _2326 = (cbLight._m0[_2311].w * _2318) + 1.0;
    uint _2327 = _2310 + 5u;
    float _2333 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2337 = _2310 + 4u;
    float _2346 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2350 = _2310 | 1u;
    float _2361 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_843, _844, _845));
    float _2364 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_843, _844, _845));
    float _4608 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _4619 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2369 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * 0.3183098733425140380859375;
    float _2371 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * 0.3183098733425140380859375;
    float _2378 = ((cbLight._m0[_2327].x * _2333) * _2371) + (((cbLight._m0[_2337].x * _2299) * _2346) * _2369);
    float _2379 = ((_2333 * cbLight._m0[_2327].y) * _2371) + (((cbLight._m0[_2337].y * _2301) * _2346) * _2369);
    float _2380 = ((_2333 * cbLight._m0[_2327].z) * _2371) + (((cbLight._m0[_2337].z * _2303) * _2346) * _2369);
    uvec4 _2384 = floatBitsToUint(cbLight._m0[_2310 + 12u]);
    bool _2386 = _2384.x == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2386)
    {
        _2488 = _2378;
        _2490 = _2379;
        _2492 = _2380;
    }
    else
    {
        uint _2496 = _2310 + 6u;
        float _2512 = (dot(vec3(cbLight._m0[_2310 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2513 = _2512 * _2512;
        float _4630 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2514 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2515 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2488 = (((cbLight._m0[_2496].x * 0.3183098733425140380859375) * _2514) * _2515) + _2378;
        _2490 = (((cbLight._m0[_2496].y * 0.3183098733425140380859375) * _2514) * _2515) + _2379;
        _2492 = (((cbLight._m0[_2496].z * 0.3183098733425140380859375) * _2514) * _2515) + _2380;
    }
    bool _2495 = _2384.y == 0u;
    float _2550;
    float _2552;
    float _2554;
    if (_2495)
    {
        _2550 = _2488;
        _2552 = _2490;
        _2554 = _2492;
    }
    else
    {
        uint _2723 = _2310 + 7u;
        float _2739 = (dot(vec3(cbLight._m0[_2310 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2740 = _2739 * _2739;
        float _4646 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2741 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2742 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2550 = (((cbLight._m0[_2723].x * 0.3183098733425140380859375) * _2741) * _2742) + _2488;
        _2552 = (((cbLight._m0[_2723].y * 0.3183098733425140380859375) * _2741) * _2742) + _2490;
        _2554 = (((cbLight._m0[_2723].z * 0.3183098733425140380859375) * _2741) * _2742) + _2492;
    }
    uint _2557 = _2310 + 8u;
    float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _846) * 0.949999988079071044921875);
    float _2571 = _2570 * _2570;
    float _2572 = cbLight._m0[_2310].x + _922;
    float _2573 = cbLight._m0[_2310].y + _923;
    float _2574 = cbLight._m0[_2310].z + _924;
    float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
    float _2579 = _2578 * _2572;
    float _2580 = _2578 * _2573;
    float _2581 = _2578 * _2574;
    float _2582 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2310].xyz));
    float _4662 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _4673 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2586 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2587 = dot(vec3(_843, _844, _845), vec3(_2579, _2580, _2581));
    float _4684 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2579, _2580, _2581));
    float _4695 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2571 * _2571;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
    float _2608 = 0.959999978542327880859375 - _989;
    float _2610 = 0.959999978542327880859375 - _990;
    float _2611 = 0.959999978542327880859375 - _991;
    float _2618 = 1.0 - _2571;
    float _2629 = (0.5 / (((_2586 * ((_2585 * _2618) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2618) + _2571) * _2585))) * _2585;
    float _4706 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2631 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    uint _2645 = _2310 + 9u;
    float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _846) * 0.949999988079071044921875);
    float _2657 = _2656 * _2656;
    float _2658 = cbLight._m0[_2350].x + _922;
    float _2659 = cbLight._m0[_2350].y + _923;
    float _2660 = cbLight._m0[_2350].z + _924;
    float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
    float _2665 = _2664 * _2658;
    float _2666 = _2664 * _2659;
    float _2667 = _2664 * _2660;
    float _2668 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2350].xyz));
    float _4717 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _2672 = dot(vec3(_843, _844, _845), vec3(_2665, _2666, _2667));
    float _4728 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2676 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2665, _2666, _2667));
    float _4739 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2680 = _2657 * _2657;
    float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
    float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
    float _2698 = 1.0 - _2657;
    float _2708 = (0.5 / (((_2586 * ((_2671 * _2698) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2698) + _2657) * _2671))) * _2671;
    float _4750 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2710 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
    float _2720 = (((((_2691 * _2608) + _992) * cbLight._m0[_2645].x) * _2710) * _2333) + ((((cbLight._m0[_2557].x * _2299) * ((_2607 * _2608) + _992)) * _2631) * _2346);
    float _2721 = (((((_2691 * _2610) + _994) * cbLight._m0[_2645].y) * _2710) * _2333) + ((((cbLight._m0[_2557].y * _2301) * ((_2607 * _2610) + _994)) * _2631) * _2346);
    float _2722 = (((((_2691 * _2611) + _995) * cbLight._m0[_2645].z) * _2710) * _2333) + ((((cbLight._m0[_2557].z * _2303) * ((_2607 * _2611) + _995)) * _2631) * _2346);
    float _2778;
    float _2780;
    float _2782;
    if (_2386)
    {
        _2778 = _2720;
        _2780 = _2721;
        _2782 = _2722;
    }
    else
    {
        uint _2784 = _2310 + 2u;
        uint _2788 = _2310 + 10u;
        float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2784].w)) * _846) * 0.949999988079071044921875);
        float _2803 = _2802 * _2802;
        float _2804 = cbLight._m0[_2784].x + _922;
        float _2805 = cbLight._m0[_2784].y + _923;
        float _2806 = cbLight._m0[_2784].z + _924;
        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
        float _2811 = _2810 * _2804;
        float _2812 = _2810 * _2805;
        float _2813 = _2810 * _2806;
        float _2814 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2784].xyz));
        float _4761 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2818 = dot(vec3(_843, _844, _845), vec3(_2811, _2812, _2813));
        float _4772 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2822 = dot(vec3(cbLight._m0[_2784].xyz), vec3(_2811, _2812, _2813));
        float _4783 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2826 = _2803 * _2803;
        float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
        float _2837 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
        float _2844 = 1.0 - _2803;
        float _2854 = (0.5 / (((_2586 * ((_2817 * _2844) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2844) + _2803) * _2817))) * _2817;
        float _4794 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2856 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
        float _2857 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2778 = (((((_2837 * _2608) + _992) * cbLight._m0[_2788].x) * _2856) * _2857) + _2720;
        _2780 = (((((_2837 * _2610) + _994) * cbLight._m0[_2788].y) * _2856) * _2857) + _2721;
        _2782 = (((((_2837 * _2611) + _995) * cbLight._m0[_2788].z) * _2856) * _2857) + _2722;
    }
    float _2888;
    float _2890;
    float _2892;
    if (_2495)
    {
        _2888 = _2778;
        _2890 = _2780;
        _2892 = _2782;
    }
    else
    {
        uint _2899 = _2310 + 3u;
        uint _2903 = _2310 + 11u;
        float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _846) * 0.949999988079071044921875);
        float _2918 = _2917 * _2917;
        float _2919 = cbLight._m0[_2899].x + _922;
        float _2920 = cbLight._m0[_2899].y + _923;
        float _2921 = cbLight._m0[_2899].z + _924;
        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
        float _2926 = _2925 * _2919;
        float _2927 = _2925 * _2920;
        float _2928 = _2925 * _2921;
        float _2929 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2899].xyz));
        float _4810 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2933 = dot(vec3(_843, _844, _845), vec3(_2926, _2927, _2928));
        float _4821 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2937 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_2926, _2927, _2928));
        float _4832 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2941 = _2918 * _2918;
        float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
        float _2952 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
        float _2959 = 1.0 - _2918;
        float _2969 = (0.5 / (((_2586 * ((_2932 * _2959) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2959) + _2918) * _2932))) * _2932;
        float _4843 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2971 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
        float _2972 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2888 = (((((_2952 * _2608) + _992) * cbLight._m0[_2903].x) * _2971) * _2972) + _2778;
        _2890 = (((((_2952 * _2610) + _994) * cbLight._m0[_2903].y) * _2971) * _2972) + _2780;
        _2892 = (((((_2952 * _2611) + _995) * cbLight._m0[_2903].z) * _2971) * _2972) + _2782;
    }
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_2308.y == 0u)
    {
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.x;
        uint _3005 = uint((float(_2993.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _2994))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _2994)));
        float _3015 = (log2(_2086 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3016 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        uint _3019 = uint(isnan(14.0) ? _3016 : (isnan(_3016) ? 14.0 : min(_3016, 14.0)));
        uvec4 _3024 = texelFetch(g_lightClusterGridBuffer, int(((_3019 << 2u) + (_3005 << 6u)) >> 2u));
        uint _3025 = _3024.x;
        uint _3026 = _2993.z;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        if (((((1u << ((_3026 >> 4u) & 15u)) + 4294967295u) & _3025) == 0u) || ((_3026 & 240u) == 0u))
        {
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
        }
        else
        {
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            uint _3255 = 0u;
            uint _3264;
            bool _3265;
            for (;;)
            {
                _3264 = texelFetch(g_lightClassification, int((((_3019 << 5u) + (_3005 << 9u)) + (_3255 << 2u)) >> 2u)).x;
                _3265 = _3264 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3265)
                {
                    frontier_phi_66_pred = _3254;
                    frontier_phi_66_pred_1 = _3253;
                    frontier_phi_66_pred_2 = _3252;
                    frontier_phi_66_pred_3 = _3251;
                    frontier_phi_66_pred_4 = _3250;
                    frontier_phi_66_pred_5 = _3249;
                }
                else
                {
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    uint _3379;
                    _3373 = _3249;
                    _3374 = _3250;
                    _3375 = _3251;
                    _3376 = _3252;
                    _3377 = _3253;
                    _3378 = _3254;
                    _3379 = _3264;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    for (;;)
                    {
                        uint _3383 = uint(findLSB(_3379)) + (_3255 << 5u);
                        uint _3380 = (_3379 + 4294967295u) & _3379;
                        uint _3385 = _3383 * 48u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3405 = (_3383 * 48u) + 4u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3424 = (_3383 * 48u) + 8u;
                        vec3 _3435 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x));
                        float _3439 = _3399.x - _2084;
                        float _3440 = _3399.y - _2085;
                        float _3441 = _3399.z - _2086;
                        float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                        float _3445 = inversesqrt(_3442);
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3449 = dot(vec3(_949, _952, _955), vec3(_3446, _3447, _3448));
                        float _3454 = 1.0 - (_3442 * _3399.w);
                        float _4869 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3456 = sqrt(_3442) * _3418.w;
                        float _3459 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3449) + _3460;
                        float _3466 = _3456 * _3456;
                        float _3470 = ((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3455) / ((_3466 * 0.699999988079071044921875) + 1.0);
                        float _3474 = (-0.0) - _2084;
                        float _3475 = (-0.0) - _2085;
                        float _3476 = (-0.0) - _2086;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3490 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _1024;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3481 + _3446;
                        float _3502 = _3482 + _3447;
                        float _3503 = _3483 + _3448;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_949, _952, _955), vec3(_3481, _3482, _3483));
                        float _4885 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3515 = dot(vec3(_949, _952, _955), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4896 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3459 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3449) + _3524;
                        float _4907 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4918 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) / ((_3522 * _3522) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125))) * _3455;
                        _3308 = (_3470 * _3418.x) + _3376;
                        _3309 = (_3470 * _3418.y) + _3377;
                        _3310 = (_3470 * _3418.z) + _3378;
                        _3305 = (_3550 * _3435.x) + _3373;
                        _3306 = (_3550 * _3435.y) + _3374;
                        _3307 = (_3550 * _3435.z) + _3375;
                        if (_3380 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3373 = _3305;
                            _3374 = _3306;
                            _3375 = _3307;
                            _3376 = _3308;
                            _3377 = _3309;
                            _3378 = _3310;
                            _3379 = _3380;
                        }
                    }
                    frontier_phi_66_pred = _3310;
                    frontier_phi_66_pred_1 = _3309;
                    frontier_phi_66_pred_2 = _3308;
                    frontier_phi_66_pred_3 = _3307;
                    frontier_phi_66_pred_4 = _3306;
                    frontier_phi_66_pred_5 = _3305;
                }
                _3116 = frontier_phi_66_pred;
                _3114 = frontier_phi_66_pred_1;
                _3112 = frontier_phi_66_pred_2;
                _3110 = frontier_phi_66_pred_3;
                _3108 = frontier_phi_66_pred_4;
                _3106 = frontier_phi_66_pred_5;
                uint _3256 = _3255 + 1u;
                if (_3256 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3249 = _3106;
                    _3250 = _3108;
                    _3251 = _3110;
                    _3252 = _3112;
                    _3253 = _3114;
                    _3254 = _3116;
                    _3255 = _3256;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
        }
        uvec4 _3119 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3120 = _3119.z;
        uint _3122 = (_3120 >> 8u) & 15u;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        if (((4294967295u << _3122) & _3025) == 0u)
        {
            _3217 = _3105;
            _3219 = _3107;
            _3221 = _3109;
            _3223 = _3111;
            _3225 = _3113;
            _3227 = _3115;
        }
        else
        {
            float _3242 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
            float _3243 = _3242 * _2084;
            float _3244 = _3242 * _2085;
            float _3245 = _3242 * _2086;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3122 < ((_3120 >> 12u) & 15u))
            {
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3356 = _3105;
                float _3357 = _3107;
                float _3358 = _3109;
                float _3359 = _3111;
                float _3360 = _3113;
                float _3361 = _3115;
                uint _3362 = _3122;
                uint _3371;
                bool _3372;
                for (;;)
                {
                    _3371 = texelFetch(g_lightClassification, int((((_3019 << 5u) + (_3005 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                    _3372 = _3371 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3372)
                    {
                        frontier_phi_72_pred = _3361;
                        frontier_phi_72_pred_1 = _3360;
                        frontier_phi_72_pred_2 = _3359;
                        frontier_phi_72_pred_3 = _3358;
                        frontier_phi_72_pred_4 = _3357;
                        frontier_phi_72_pred_5 = _3356;
                    }
                    else
                    {
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3568 = _3356;
                        float _3569 = _3357;
                        float _3570 = _3358;
                        float _3571 = _3359;
                        float _3572 = _3360;
                        float _3573 = _3361;
                        uint _3574 = _3371;
                        uint _3575;
                        vec4 _3600;
                        float _3601;
                        vec4 _3616;
                        vec3 _3628;
                        vec4 _3643;
                        vec4 _3658;
                        float _3704;
                        bool _3705;
                        for (;;)
                        {
                            uint _3585 = ((_3362 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3574));
                            _3575 = (_3574 + 4294967295u) & _3574;
                            uint _3587 = _3585 * 40u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            _3601 = _3600.w;
                            uint _3603 = (_3585 * 40u) + 4u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3585 * 40u) + 8u;
                            _3628 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x));
                            uint _3630 = (_3585 * 40u) + 16u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3645 = (_3585 * 40u) + 20u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3585 * 40u) + 24u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3679 = (_3585 * 40u) + 28u;
                            vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            _3704 = fma(_2086, _3692.z, fma(_2085, _3692.y, _3692.x * _2084)) + _3692.w;
                            _3705 = !((fma(_2086, _3673.z, fma(_2085, _3673.y, _3673.x * _2084)) + _3673.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3705)
                            {
                                float _3732 = _3600.x - _2084;
                                float _3733 = _3600.y - _2085;
                                float _3734 = _3600.z - _2086;
                                float _3735 = dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734));
                                float _3738 = inversesqrt(_3735);
                                float _3739 = _3738 * _3732;
                                float _3740 = _3738 * _3733;
                                float _3741 = _3738 * _3734;
                                float _3745 = 1.0 - (_3735 / (_3601 * _3601));
                                float _4929 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3750 = sqrt(_3735) * _3616.w;
                                float _3752 = 1.39999997615814208984375 / (_3750 + 1.39999997615814208984375);
                                float _3753 = _3752 * _3752;
                                float _3756 = ((1.0 - _3753) * dot(vec3(_3739, _3740, _3741), vec3(_949, _952, _955))) + _3753;
                                float _3759 = _3750 * _3750;
                                float _3763 = (fma(_2086, _3643.z, fma(_2085, _3643.y, _3643.x * _2084)) + _3643.w) / _3704;
                                float _3764 = (fma(_2086, _3658.z, fma(_2085, _3658.y, _3658.x * _2084)) + _3658.w) / _3704;
                                float _3768 = 1.0 - dot(vec2(_3763, _3764), vec2(_3763, _3764));
                                float _4945 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3770 = _3769 * (((isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0))) * _3746) / ((_3759 * 0.699999988079071044921875) + 1.0));
                                float _3782 = exp2(log2(1.0 / ((_3759 * 3.5) + 5.0)) * 0.25);
                                float _3783 = 1.0 - _1024;
                                float _3790 = sqrt(1.0 - ((1.0 - (_3783 * _3783)) * (1.0 - (_3782 * _3782))));
                                float _3791 = _3790 * _3790;
                                float _3792 = _3791 * _3791;
                                float _3793 = _3739 - _3243;
                                float _3794 = _3740 - _3244;
                                float _3795 = _3741 - _3245;
                                float _3799 = inversesqrt(dot(vec3(_3793, _3794, _3795), vec3(_3793, _3794, _3795)));
                                float _3803 = dot(vec3(_949, _952, _955), vec3((-0.0) - _3243, (-0.0) - _3244, (-0.0) - _3245));
                                float _4956 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3806 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3807 = dot(vec3(_949, _952, _955), vec3(_3799 * _3793, _3799 * _3794, _3799 * _3795));
                                float _4967 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3814 = ((_3810 * _3810) * (_3792 + (-1.0))) + 1.0;
                                float _3815 = _3752 * _3791;
                                float _3816 = _3815 * _3815;
                                float _3822 = ((1.0 - _3816) * dot(vec3(_949, _952, _955), vec3(_3739, _3740, _3741))) + _3816;
                                float _4978 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3823 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3824 = 1.0 - _3791;
                                float _3834 = (0.5 / (((_3823 * ((_3806 * _3824) + _3791)) + 9.9999999392252902907785028219223e-09) + (((_3823 * _3824) + _3791) * _3806))) * _3823;
                                float _4989 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3844 = (_3769 * _3746) * (((_3792 * 3.1415927410125732421875) * (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) / ((_3814 * _3814) * ((_3759 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3770 * _3616.y;
                                frontier_phi_78_pred_1 = _3770 * _3616.x;
                                frontier_phi_78_pred_2 = _3844 * _3628.z;
                                frontier_phi_78_pred_3 = _3844 * _3628.y;
                                frontier_phi_78_pred_4 = _3844 * _3628.x;
                                frontier_phi_78_pred_5 = _3770 * _3616.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3852 = frontier_phi_78_pred;
                            _3851 = frontier_phi_78_pred_1;
                            _3850 = frontier_phi_78_pred_2;
                            _3849 = frontier_phi_78_pred_3;
                            _3848 = frontier_phi_78_pred_4;
                            _3853 = frontier_phi_78_pred_5;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            if (_3575 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3575;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3560;
                        frontier_phi_72_pred_1 = _3559;
                        frontier_phi_72_pred_2 = _3558;
                        frontier_phi_72_pred_3 = _3557;
                        frontier_phi_72_pred_4 = _3556;
                        frontier_phi_72_pred_5 = _3555;
                    }
                    _3228 = frontier_phi_72_pred;
                    _3226 = frontier_phi_72_pred_1;
                    _3224 = frontier_phi_72_pred_2;
                    _3222 = frontier_phi_72_pred_3;
                    _3220 = frontier_phi_72_pred_4;
                    _3218 = frontier_phi_72_pred_5;
                    uint _3363 = _3362 + 1u;
                    if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3356 = _3218;
                        _3357 = _3220;
                        _3358 = _3222;
                        _3359 = _3224;
                        _3360 = _3226;
                        _3361 = _3228;
                        _3362 = _3363;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3228;
                frontier_phi_60_61_ladder_1 = _3226;
                frontier_phi_60_61_ladder_2 = _3222;
                frontier_phi_60_61_ladder_3 = _3220;
                frontier_phi_60_61_ladder_4 = _3218;
                frontier_phi_60_61_ladder_5 = _3224;
            }
            else
            {
                frontier_phi_60_61_ladder = _3115;
                frontier_phi_60_61_ladder_1 = _3113;
                frontier_phi_60_61_ladder_2 = _3109;
                frontier_phi_60_61_ladder_3 = _3107;
                frontier_phi_60_61_ladder_4 = _3105;
                frontier_phi_60_61_ladder_5 = _3111;
            }
            _3217 = frontier_phi_60_61_ladder_4;
            _3219 = frontier_phi_60_61_ladder_3;
            _3221 = frontier_phi_60_61_ladder_2;
            _3223 = frontier_phi_60_61_ladder_5;
            _3225 = frontier_phi_60_61_ladder_1;
            _3227 = frontier_phi_60_61_ladder;
        }
        float _3232 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _3038 = (_3232 * _3223) + _2550;
        _3040 = (_3232 * _3225) + _2552;
        _3042 = (_3232 * _3227) + _2554;
        _3044 = ((_3217 * _992) * _3232) + _2888;
        _3046 = ((_3219 * _994) * _3232) + _2890;
        _3048 = ((_3221 * _995) * _3232) + _2892;
    }
    else
    {
        _3038 = _2550;
        _3040 = _2552;
        _3042 = _2554;
        _3044 = _2888;
        _3046 = _2890;
        _3048 = _2892;
    }
    float _5005 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _5016 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _5027 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    uint _3068 = _259 + 6u;
    float _3076 = _930 / cbSceneParam._m0[86u].x;
    float _3077 = _931 / cbSceneParam._m0[86u].y;
    vec4 _3091 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3076, _3077, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3093 = _3091.x;
    float _3094 = _3091.y;
    float _3095 = _3091.z;
    float _3096 = _3091.w;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _3130 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _3131 = _3130 / _865;
        float _3142 = _3131 * _915;
        float _3143 = _916 * _3131;
        float _3144 = (-0.0) - _3143;
        float _3145 = _3131 * _917;
        float _3147 = (cbSceneParam._m0[77u].w * _3144) / _3130;
        float _3148 = _3147 + cbSceneParam._m0[79u].w;
        float _3149 = cbSceneParam._m0[79u].w - _3143;
        float _3155 = sqrt(((_3142 * _3142) + (_3143 * _3143)) + (_3145 * _3145));
        float _3158 = (1.0 - (cbSceneParam._m0[77u].w / _3130)) * _3155;
        float _3163 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3165 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3318;
        if (abs((_3144 - _3147) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3318 = ((((_3148 > 0.0) ? exp2(_3163 * _3148) : (2.0 - exp2(_3165 * _3148))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3158;
        }
        else
        {
            float _3278 = 1.0 / cbSceneParam._m0[80u].x;
            float _3279 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : max(_3148, _3149));
            float _3280 = isnan(_3149) ? _3148 : (isnan(_3148) ? _3149 : min(_3148, _3149));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            float _3290 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : min(_3280, 0.0));
            _3318 = ((abs(_3155 / _3144) * cbSceneParam._m0[80u].y) * ((((_3289 - _3290) * 2.0) - ((exp2(_3163 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0)))) - exp2(_3163 * (isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))))) * _3278)) - ((exp2(_3165 * _3289) - exp2(_3165 * _3290)) * _3278))) + (_3158 * cbSceneParam._m0[80u].z);
        }
        vec4 _3320 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3076, _3077, 1.0), 0.0);
        float _3329 = exp2((_3318 * (-1.44269502162933349609375)) * (1.0 - _3320.w));
        float _3330 = log2(_3329);
        float _3346 = log2(_3096);
        _3167 = (exp2(_3346 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].x)) * _3320.x) / cbSceneParam._m0[78u].x)) + _3093;
        _3169 = (exp2(_3346 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].y)) * _3320.y) / cbSceneParam._m0[78u].y)) + _3094;
        _3171 = (exp2(_3346 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].z)) * _3320.z) / cbSceneParam._m0[78u].z)) + _3095;
        _3173 = _3329 * _3096;
    }
    else
    {
        _3167 = _3093;
        _3169 = _3094;
        _3171 = _3095;
        _3173 = _3096;
    }
    float _3185 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3186 = _3185 == 3.0;
    float _3187 = log2(_3173);
    float _3194 = exp2(_3187 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_3038 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1008))) + ((_3044 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3195 = exp2(_3187 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_3040 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1008))) + ((_3046 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3196 = exp2(_3187 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3042 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1008))) + ((_3048 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3205 = (_3185 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3205 * (_3186 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3167)));
    SV_Target.y = _3205 * (_3186 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3169)));
    SV_Target.z = _3205 * (_3186 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3171)));
    SV_Target.w = cbInstanceData._m0[_3068].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3068].w;
}


