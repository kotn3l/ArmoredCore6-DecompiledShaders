#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1439;
float _3819;
float _3820;
float _3821;
float _3822;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].y) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3831 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _406 = (_399 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _407 = (_399 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _408 = (_399 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].y) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3842 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _527 = ((_499.x - _518) * _399) + _518;
    float _528 = ((_499.y - _519) * _399) + _519;
    float _529 = ((_499.z - _520) * _399) + _520;
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _554 = ((_541.z - _529) * _472) + _529;
    float _557 = ((((_541.x - _527) * _472) + _527) * 2.0) + (-1.0);
    float _559 = ((((_541.y - _528) * _472) + _528) * 2.0) + (-1.0);
    float _560 = dot(vec2(_557, _559), vec2(_557, _559));
    float _3853 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _605 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _608 = ((isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : min(_605, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _617 = (_608 - ((((((_598 - _599) * cbMtdParam._m0[24u].z) + _599) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _608))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3874 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _625 = (_618 * (cbMtdParam._m0[17u].x - _479)) + _479;
    float _626 = (_618 * (cbMtdParam._m0[17u].y - _480)) + _480;
    float _627 = (_618 * (cbMtdParam._m0[17u].z - _481)) + _481;
    vec4 _639 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _641 = _639.x;
    float _642 = 1.0 - _641;
    float _669 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_641 - _642) * cbMtdParam._m0[24u].w) + _642) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3885 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _678 = ((((cbMtdParam._m0[10u].x - _625) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _670) + _625;
    float _679 = ((((cbMtdParam._m0[10u].y - _626) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _670) + _626;
    float _680 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _627)) * _670) + _627;
    vec4 _706 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _708 = _706.x;
    float _726 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _708) * _399) + _708;
    float _743 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _726) * _472) + _726;
    float _747 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _743) * cbMtdParam._m0[19u].z) + _743;
    float _749 = _747 - (_747 * _618);
    float _751 = _749 - (_749 * _670);
    vec4 _765 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _772 = (_765.x * 2.0) + (-1.0);
    float _773 = (_765.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3896 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _782 = (_618 * (_765.z - _554)) + _554;
    float _785 = ((cbMtdParam._m0[23u].y - _782) * _670) + _782;
    vec4 _804 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _810 = (_804.x * 2.0) + (-1.0);
    float _811 = (_804.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _3907 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _829 = (((_772 - _557) + (cbMtdParam._m0[21u].x * _557)) * _618) + _557;
    float _830 = (((_773 - _559) + (cbMtdParam._m0[21u].x * _559)) * _618) + _559;
    float _831 = (_618 * (sqrt(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) - _565)) + _565;
    float _842 = (((_810 - _829) + (_829 * cbMtdParam._m0[22u].z)) * _670) + _829;
    float _843 = (((_811 - _830) + (_830 * cbMtdParam._m0[22u].z)) * _670) + _830;
    float _844 = ((sqrt(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) - _831) * _670) + _831;
    float _846 = cbMtdParam._m0[22u].x + _578.w;
    float _849 = fma(_844, _248 * NORMAL.x, fma(_843, _255 * TANGENT.x, (_241 * _233) * _842));
    float _852 = fma(_844, _248 * NORMAL.y, fma(_843, _255 * TANGENT.y, (_241 * _234) * _842));
    float _855 = fma(_844, _248 * NORMAL.z, fma(_843, _255 * TANGENT.z, (_241 * _235) * _842));
    float _859 = inversesqrt(dot(vec3(_849, _852, _855), vec3(_849, _852, _855)));
    float _860 = _859 * _849;
    float _861 = _859 * _852;
    float _862 = _859 * _855;
    float _3918 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _863 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _3940 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3951 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3962 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3973 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _868 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    vec4 _946 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _948 = _946.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1120 = sqrt(((_932 * _932) + (_933 * _933)) + (_934 * _934));
        float _1126 = (cbMatDynParam._m0[5u].x * _1120) + cbMatDynParam._m0[5u].y;
        float _3984 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1131 = (cbMatDynParam._m0[5u].z * _1120) + cbMatDynParam._m0[5u].w;
        float _3995 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) - _1127)) + _1127) < ((_948 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _978 = fma(_862, cbSceneParam._m0[5u].z, fma(_861, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _860));
    float _981 = fma(_862, cbSceneParam._m0[6u].z, fma(_861, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _860));
    float _984 = fma(_862, cbSceneParam._m0[7u].z, fma(_861, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _860));
    uint _997 = _261 + 9u;
    uint _998 = _997 + uint(cbMatDynParam._m0[0u].w);
    float _1004 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_998].x;
    float _1005 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * cbInstanceData._m0[_998].y;
    float _1006 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * cbInstanceData._m0[_998].z;
    float _4006 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1010 = 1.0 - _868;
    float _1011 = _1007 * _1010;
    float _1012 = _1008 * _1010;
    float _1013 = _1009 * _1010;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _868;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _868;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _868;
    float _1021 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    vec4 _1033 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1037 = ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * TEXCOORD_5.w) * _1033.x;
    float _1038 = dot(vec3(_860, _861, _862), vec3(_939, _940, _941));
    float _1041 = _1038 * 2.0;
    float _1045 = (_1041 * _860) - _939;
    float _1046 = (_1041 * _861) - _940;
    float _1047 = (_1041 * _862) - _941;
    float _1051 = abs(dot(vec3(_939, _940, _941), vec3(_860, _861, _862)));
    float _4039 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1053 = sqrt(_863);
    float _1066 = exp2((_1053 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1053 * 3.0));
    float _1072 = (1.0 - _1066) * ((_1053 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1073 = _1066 * _1053;
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1438;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1163 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1167 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1171 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1196 = _1101 + _860;
        float _1197 = _1105 + _861;
        float _1198 = _1109 + _862;
        float _1208 = fma(_1198, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196)) - _1163;
        float _1209 = fma(_1198, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196)) - _1167;
        float _1210 = fma(_1198, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196)) - _1171;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1163 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1167 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[34u].z) + ((((((_1171 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1266 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1232.x + (-0.5));
        float _1268 = _1266 * (_1232.y + (-0.5));
        float _1269 = _1266 * (_1232.z + (-0.5));
        float _1276 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1239.x + (-0.5));
        float _1278 = _1276 * (_1239.y + (-0.5));
        float _1279 = _1276 * (_1239.z + (-0.5));
        float _1286 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1246.x + (-0.5));
        float _1288 = _1286 * (_1246.y + (-0.5));
        float _1289 = _1286 * (_1246.z + (-0.5));
        float _1296 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1253.x + (-0.5));
        float _1298 = _1296 * (_1253.y + (-0.5));
        float _1299 = _1296 * (_1253.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1320 = (dot(vec3(_860, _861, _862), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1330 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4087 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1332 + 1.0))) + _1337) * _1300;
        float _1347 = _1268 * 0.5;
        float _1348 = _1278 * 0.5;
        float _1349 = _1288 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_860, _861, _862), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4120 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1374 + 1.0))) + _1379) * _1301;
        float _1389 = _1269 * 0.5;
        float _1390 = _1279 * 0.5;
        float _1391 = _1289 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_860, _861, _862), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4153 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1416 + 1.0))) + _1421) * _1302;
        _1438 = _1269;
        _1440 = _1268;
        _1441 = _1267;
        _1442 = _1279;
        _1443 = _1278;
        _1444 = _1277;
        _1445 = _1289;
        _1446 = _1288;
        _1447 = _1287;
        _1448 = _1302;
        _1449 = _1301;
        _1450 = _1300;
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1439;
        _1440 = _1439;
        _1441 = _1439;
        _1442 = _1439;
        _1443 = _1439;
        _1444 = _1439;
        _1445 = _1439;
        _1446 = _1439;
        _1447 = _1439;
        _1448 = _1439;
        _1449 = _1439;
        _1450 = _1439;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1480 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1484 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1488 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1511 = _1101 + _860;
        float _1512 = _1105 + _861;
        float _1513 = _1109 + _862;
        float _1523 = fma(_1513, cbModelParam._m0[30u].z, fma(_1512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1511)) - _1480;
        float _1524 = fma(_1513, cbModelParam._m0[31u].z, fma(_1512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1511)) - _1484;
        float _1525 = fma(_1513, cbModelParam._m0[32u].z, fma(_1512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1511)) - _1488;
        float _1529 = inversesqrt(dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525)));
        float _1542 = ((_1529 * _1523) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1480 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1529 * _1524) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1484 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1529 * _1525) / cbModelParam._m0[35u].z) + ((((((_1488 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        float _1579 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1546.x + (-0.5));
        float _1581 = _1579 * (_1546.y + (-0.5));
        float _1582 = _1579 * (_1546.z + (-0.5));
        float _1589 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1553.x + (-0.5));
        float _1591 = _1589 * (_1553.y + (-0.5));
        float _1592 = _1589 * (_1553.z + (-0.5));
        float _1599 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1560.x + (-0.5));
        float _1601 = _1599 * (_1560.y + (-0.5));
        float _1602 = _1599 * (_1560.z + (-0.5));
        float _1609 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1567.x + (-0.5));
        float _1611 = _1609 * (_1567.y + (-0.5));
        float _1612 = _1609 * (_1567.z + (-0.5));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = _1580 * 0.5;
        float _1617 = _1590 * 0.5;
        float _1618 = _1600 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_860, _861, _862), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4216 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1643 + 1.0))) + _1648) * _1613;
        float _1658 = _1581 * 0.5;
        float _1659 = _1591 * 0.5;
        float _1660 = _1601 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_860, _861, _862), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4249 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1685 + 1.0))) + _1690) * _1614;
        float _1700 = _1582 * 0.5;
        float _1701 = _1592 * 0.5;
        float _1702 = _1602 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_860, _861, _862), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4282 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1727 + 1.0))) + _1732) * _1615;
        _1749 = _1582;
        _1750 = _1581;
        _1751 = _1580;
        _1752 = _1592;
        _1753 = _1591;
        _1754 = _1590;
        _1755 = _1602;
        _1756 = _1601;
        _1757 = _1600;
        _1758 = _1615;
        _1759 = _1614;
        _1760 = _1613;
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
    }
    else
    {
        _1749 = _1439;
        _1750 = _1439;
        _1751 = _1439;
        _1752 = _1439;
        _1753 = _1439;
        _1754 = _1439;
        _1755 = _1439;
        _1756 = _1439;
        _1757 = _1439;
        _1758 = _1439;
        _1759 = _1439;
        _1760 = _1439;
        _1761 = 0.0;
        _1762 = 0.0;
        _1763 = 0.0;
    }
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1451)) + _1451;
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1452)) + _1452;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1453)) + _1453;
    float _1796 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1774, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1774, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1774, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1773));
    float _1817 = _1045 * 0.5;
    float _1818 = _1046 * 0.5;
    float _1819 = _1047 * 0.5;
    float _1820 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1823 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1826 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1860;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1833 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1438, _1442, _1445, _1448));
        float _1837 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1841 = dot(vec4(_1817, _1818, _1819, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1848 = dot(vec4(cbModelParam._m0[39u]), vec4(_1817, _1818, _1819, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1871;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1862 = dot(vec4(cbModelParam._m0[40u]), vec4(_1817, _1818, _1819, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1862) ? 0.0 : (isnan(0.0) ? _1862 : max(0.0, _1862))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1875 = (_1871 * cbModelParam._m0[1u].x) + (_1860 * (1.0 - cbModelParam._m0[1u].x));
    float _1885 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _863);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1885 : min(cbModelParam._m0[25u].z, _1885));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1047, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045));
        float _1948 = fma(_1047, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045));
        float _1951 = fma(_1047, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1979 = frontier_phi_17_15_ladder;
        }
        float _2182;
        if (_1948 > 0.0)
        {
            _2182 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2182 = frontier_phi_26_22_ladder;
        }
        float _2436;
        if (_1951 > 0.0)
        {
            _2436 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2436 = frontier_phi_38_33_ladder;
        }
        float _2438 = isnan(_2182) ? _1979 : (isnan(_1979) ? _2182 : min(_1979, _2182));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1945) + _1934;
        float _2444 = (_2439 * _1948) + _1938;
        float _2445 = (_2439 * _1951) + _1942;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1886);
            frontier_phi_16_38_ladder = _2573.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2573.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2573.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_16_38_ladder_2;
        _1969 = frontier_phi_16_38_ladder_1;
        _1971 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1045, _1046, _1047), _1886);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _863);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2030 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2034 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2038 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2041 = fma(_1047, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045));
        float _2044 = fma(_1047, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045));
        float _2047 = fma(_1047, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045));
        float _2187;
        if (_2041 > 0.0)
        {
            _2187 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2187 = frontier_phi_28_24_ladder;
        }
        float _2463;
        if (_2044 > 0.0)
        {
            _2463 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2463 = frontier_phi_40_35_ladder;
        }
        float _2676;
        if (_2047 > 0.0)
        {
            _2676 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2676 = frontier_phi_49_46_ladder;
        }
        float _2678 = isnan(_2463) ? _2187 : (isnan(_2187) ? _2463 : min(_2187, _2463));
        float _2679 = isnan(_2676) ? _2678 : (isnan(_2678) ? _2676 : min(_2678, _2676));
        float _2683 = (_2679 * _2041) + _2030;
        float _2684 = (_2679 * _2044) + _2034;
        float _2685 = (_2679 * _2047) + _2038;
        float _2686 = _2679 * 9.9999997473787516355514526367188e-05;
        float _2687 = (-1.0) - _2686;
        float _2689 = _2686 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2685 > _2689) || ((_2685 < _2687) || ((_2684 > _2689) || ((_2684 < _2687) || ((_2683 < _2687) || (_2683 > _2689))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2685, cbModelParam._m0[17u].z, fma(_2684, cbModelParam._m0[17u].y, _2683 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2685, cbModelParam._m0[18u].z, fma(_2684, cbModelParam._m0[18u].y, _2683 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2685, cbModelParam._m0[19u].z, fma(_2684, cbModelParam._m0[19u].y, _2683 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_25_49_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2066 = frontier_phi_25_49_ladder_2;
        _2068 = frontier_phi_25_49_ladder_1;
        _2070 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1045, _1046, _1047), _1976);
        _2066 = _2050.x * cbModelParam._m0[1u].z;
        _2068 = _2050.y * cbModelParam._m0[1u].z;
        _2070 = _2050.z * cbModelParam._m0[1u].z;
    }
    float _2083 = (((_1072 * _1021) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2085 = (((_1072 * _1023) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2087 = (((_1072 * _1024) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2090 = fma(_2087, cbSceneParam._m0[89u].z, fma(_2085, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2093 = fma(_2087, cbSceneParam._m0[90u].z, fma(_2085, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2096 = fma(_2087, cbSceneParam._m0[91u].z, fma(_2085, cbSceneParam._m0[91u].y, _2083 * cbSceneParam._m0[91u].x));
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _1037 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2141 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2145 = _2108 | 1u;
    float _2156 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_860, _861, _862));
    float _2159 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_860, _861, _862));
    float _4418 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _4429 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2164 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * 0.3183098733425140380859375;
    float _2166 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * 0.3183098733425140380859375;
    float _2173 = ((cbLight._m0[_2125].x * _2131) * _2166) + ((cbLight._m0[_2135].x * _2141) * _2164);
    float _2174 = ((_2131 * cbLight._m0[_2125].y) * _2166) + ((_2141 * cbLight._m0[_2135].y) * _2164);
    float _2175 = ((_2131 * cbLight._m0[_2125].z) * _2166) + ((_2141 * cbLight._m0[_2135].z) * _2164);
    uvec4 _2179 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2181 = _2179.x == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2181)
    {
        _2192 = _2173;
        _2194 = _2174;
        _2196 = _2175;
    }
    else
    {
        uint _2200 = _2108 + 6u;
        float _2216 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4440 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2219 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2192 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _2173;
        _2194 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _2174;
        _2196 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _2175;
    }
    bool _2199 = _2179.y == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2199)
    {
        _2237 = _2192;
        _2239 = _2194;
        _2241 = _2196;
    }
    else
    {
        uint _2407 = _2108 + 7u;
        float _2423 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_860, _861, _862)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4456 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2426 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2237 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2192;
        _2239 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2194;
        _2241 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2196;
    }
    uint _2244 = _2108 + 8u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _863) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2108].x + _939;
    float _2260 = cbLight._m0[_2108].y + _940;
    float _2261 = cbLight._m0[_2108].z + _941;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2108].xyz));
    float _4472 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _4483 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _2273 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2274 = dot(vec3(_860, _861, _862), vec3(_2266, _2267, _2268));
    float _4494 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2266, _2267, _2268));
    float _4505 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2258 * _2258;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
    float _2295 = 0.959999978542327880859375 - _1018;
    float _2297 = 0.959999978542327880859375 - _1019;
    float _2298 = 0.959999978542327880859375 - _1020;
    float _2305 = 1.0 - _2258;
    float _2316 = (0.5 / (((_2273 * ((_2272 * _2305) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2305) + _2258) * _2272))) * _2272;
    float _4516 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    uint _2329 = _2108 + 9u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _863) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2145].x + _939;
    float _2343 = cbLight._m0[_2145].y + _940;
    float _2344 = cbLight._m0[_2145].z + _941;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2145].xyz));
    float _4527 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2356 = dot(vec3(_860, _861, _862), vec3(_2349, _2350, _2351));
    float _4538 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2349, _2350, _2351));
    float _4549 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2341 * _2341;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
    float _2382 = 1.0 - _2341;
    float _2392 = (0.5 / (((_2273 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2382) + _2341) * _2355))) * _2355;
    float _4560 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    float _2404 = (((((_2375 * _2295) + _1021) * cbLight._m0[_2329].x) * _2394) * _2131) + (((((_2294 * _2295) + _1021) * cbLight._m0[_2244].x) * _2318) * _2141);
    float _2405 = (((((_2375 * _2297) + _1023) * cbLight._m0[_2329].y) * _2394) * _2131) + (((((_2294 * _2297) + _1023) * cbLight._m0[_2244].y) * _2318) * _2141);
    float _2406 = (((((_2375 * _2298) + _1024) * cbLight._m0[_2329].z) * _2394) * _2131) + (((((_2294 * _2298) + _1024) * cbLight._m0[_2244].z) * _2318) * _2141);
    float _2468;
    float _2470;
    float _2472;
    if (_2181)
    {
        _2468 = _2404;
        _2470 = _2405;
        _2472 = _2406;
    }
    else
    {
        uint _2474 = _2108 + 2u;
        uint _2478 = _2108 + 10u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _863) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _939;
        float _2495 = cbLight._m0[_2474].y + _940;
        float _2496 = cbLight._m0[_2474].z + _941;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2474].xyz));
        float _4571 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2508 = dot(vec3(_860, _861, _862), vec3(_2501, _2502, _2503));
        float _4582 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4593 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2273 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2534) + _2493) * _2507))) * _2507;
        float _4604 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2468 = (((((_2527 * _2295) + _1021) * cbLight._m0[_2478].x) * _2546) * _2547) + _2404;
        _2470 = (((((_2527 * _2297) + _1023) * cbLight._m0[_2478].y) * _2546) * _2547) + _2405;
        _2472 = (((((_2527 * _2298) + _1024) * cbLight._m0[_2478].z) * _2546) * _2547) + _2406;
    }
    float _2582;
    float _2584;
    float _2586;
    if (_2199)
    {
        _2582 = _2468;
        _2584 = _2470;
        _2586 = _2472;
    }
    else
    {
        uint _2593 = _2108 + 3u;
        uint _2597 = _2108 + 11u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _863) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _939;
        float _2614 = cbLight._m0[_2593].y + _940;
        float _2615 = cbLight._m0[_2593].z + _941;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_860, _861, _862), vec3(cbLight._m0[_2593].xyz));
        float _4620 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2627 = dot(vec3(_860, _861, _862), vec3(_2620, _2621, _2622));
        float _4631 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4642 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2273 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2653) + _2612) * _2626))) * _2626;
        float _4653 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2582 = (((((_2646 * _2295) + _1021) * cbLight._m0[_2597].x) * _2665) * _2666) + _2468;
        _2584 = (((((_2646 * _2297) + _1023) * cbLight._m0[_2597].y) * _2665) * _2666) + _2470;
        _2586 = (((((_2646 * _2298) + _1024) * cbLight._m0[_2597].z) * _2665) * _2666) + _2472;
    }
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_2106.y == 0u)
    {
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2741;
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2741;
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2741;
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.x;
        uint _2768 = uint((float(_2756.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2757))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2757)));
        float _2778 = (log2(_2744 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2779 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        uint _2782 = uint(isnan(14.0) ? _2779 : (isnan(_2779) ? 14.0 : min(_2779, 14.0)));
        uvec4 _2787 = texelFetch(g_lightClusterGridBuffer, int(((_2782 << 2u) + (_2768 << 6u)) >> 2u));
        uint _2788 = _2787.x;
        uint _2789 = _2756.z;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((((1u << ((_2789 >> 4u) & 15u)) + 4294967295u) & _2788) == 0u) || ((_2789 & 240u) == 0u))
        {
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
        }
        else
        {
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3058)
                {
                    frontier_phi_66_pred = _3042;
                    frontier_phi_66_pred_1 = _3047;
                    frontier_phi_66_pred_2 = _3046;
                    frontier_phi_66_pred_3 = _3045;
                    frontier_phi_66_pred_4 = _3044;
                    frontier_phi_66_pred_5 = _3043;
                }
                else
                {
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    uint _3193;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3057;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    for (;;)
                    {
                        uint _3197 = uint(findLSB(_3193)) + (_3048 << 5u);
                        uint _3194 = (_3193 + 4294967295u) & _3193;
                        uint _3199 = _3197 * 48u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3219 = (_3197 * 48u) + 4u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3238 = (_3197 * 48u) + 8u;
                        vec3 _3249 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x));
                        float _3253 = _3213.x - _2742;
                        float _3254 = _3213.y - _2743;
                        float _3255 = _3213.z - _2744;
                        float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                        float _3259 = inversesqrt(_3256);
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3263 = dot(vec3(_978, _981, _984), vec3(_3260, _3261, _3262));
                        float _3268 = 1.0 - (_3256 * _3213.w);
                        float _4679 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3270 = sqrt(_3256) * _3232.w;
                        float _3273 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3263) + _3274;
                        float _3280 = _3270 * _3270;
                        float _3284 = ((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3269) / ((_3280 * 0.699999988079071044921875) + 1.0);
                        float _3288 = (-0.0) - _2742;
                        float _3289 = (-0.0) - _2743;
                        float _3290 = (-0.0) - _2744;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3305 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                        float _3306 = 1.0 - _1053;
                        float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                        float _3314 = _3313 * _3313;
                        float _3315 = _3314 * _3314;
                        float _3316 = _3295 + _3260;
                        float _3317 = _3296 + _3261;
                        float _3318 = _3297 + _3262;
                        float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                        float _3326 = dot(vec3(_978, _981, _984), vec3(_3295, _3296, _3297));
                        float _4695 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                        float _3330 = dot(vec3(_978, _981, _984), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                        float _4706 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3333 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                        float _3338 = _3273 * _3314;
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3263) + _3339;
                        float _4717 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3344 = 1.0 - _3314;
                        float _3354 = (0.5 / (((_3343 * ((_3329 * _3344) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3314) * _3329))) * _3343;
                        float _4728 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3365 = (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3337 * _3337) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125))) * _3269;
                        _3117 = (_3284 * _3232.x) + _3190;
                        _3118 = (_3284 * _3232.y) + _3191;
                        _3119 = (_3284 * _3232.z) + _3192;
                        _3114 = (_3365 * _3249.x) + _3187;
                        _3115 = (_3365 * _3249.y) + _3188;
                        _3116 = (_3365 * _3249.z) + _3189;
                        if (_3194 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3194;
                        }
                    }
                    frontier_phi_66_pred = _3114;
                    frontier_phi_66_pred_1 = _3119;
                    frontier_phi_66_pred_2 = _3118;
                    frontier_phi_66_pred_3 = _3117;
                    frontier_phi_66_pred_4 = _3116;
                    frontier_phi_66_pred_5 = _3115;
                }
                _2890 = frontier_phi_66_pred;
                _2900 = frontier_phi_66_pred_1;
                _2898 = frontier_phi_66_pred_2;
                _2896 = frontier_phi_66_pred_3;
                _2894 = frontier_phi_66_pred_4;
                _2892 = frontier_phi_66_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2890;
                    _3043 = _2892;
                    _3044 = _2894;
                    _3045 = _2896;
                    _3046 = _2898;
                    _3047 = _2900;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
        }
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.z;
        uint _2906 = (_2904 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2906) & _2788) == 0u)
        {
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
            _3016 = _2895;
            _3018 = _2897;
            _3020 = _2899;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
            float _3036 = _3035 * _2742;
            float _3037 = _3035 * _2743;
            float _3038 = _3035 * _2744;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2906 < ((_2904 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3170 = _2889;
                float _3171 = _2891;
                float _3172 = _2893;
                float _3173 = _2895;
                float _3174 = _2897;
                float _3175 = _2899;
                uint _3176 = _2906;
                uint _3185;
                bool _3186;
                for (;;)
                {
                    _3185 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                    _3186 = _3185 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3186)
                    {
                        frontier_phi_77_pred = _3175;
                        frontier_phi_77_pred_1 = _3174;
                        frontier_phi_77_pred_2 = _3173;
                        frontier_phi_77_pred_3 = _3172;
                        frontier_phi_77_pred_4 = _3171;
                        frontier_phi_77_pred_5 = _3170;
                    }
                    else
                    {
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        float _3394 = _3172;
                        float _3395 = _3173;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        uint _3398 = _3185;
                        uint _3399;
                        vec4 _3424;
                        float _3425;
                        vec4 _3440;
                        vec3 _3452;
                        vec4 _3467;
                        vec4 _3482;
                        float _3528;
                        bool _3529;
                        for (;;)
                        {
                            uint _3409 = ((_3176 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3398));
                            _3399 = (_3398 + 4294967295u) & _3398;
                            uint _3411 = _3409 * 40u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3425 = _3424.w;
                            uint _3427 = (_3409 * 40u) + 4u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3409 * 40u) + 8u;
                            _3452 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x));
                            uint _3454 = (_3409 * 40u) + 16u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3409 * 40u) + 20u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3409 * 40u) + 24u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3503 = (_3409 * 40u) + 28u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3528 = fma(_2744, _3516.z, fma(_2743, _3516.y, _3516.x * _2742)) + _3516.w;
                            _3529 = !((fma(_2744, _3497.z, fma(_2743, _3497.y, _3497.x * _2742)) + _3497.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3529)
                            {
                                float _3556 = _3424.x - _2742;
                                float _3557 = _3424.y - _2743;
                                float _3558 = _3424.z - _2744;
                                float _3559 = dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558));
                                float _3562 = inversesqrt(_3559);
                                float _3563 = _3562 * _3556;
                                float _3564 = _3562 * _3557;
                                float _3565 = _3562 * _3558;
                                float _3569 = 1.0 - (_3559 / (_3425 * _3425));
                                float _4739 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3574 = sqrt(_3559) * _3440.w;
                                float _3576 = 1.39999997615814208984375 / (_3574 + 1.39999997615814208984375);
                                float _3577 = _3576 * _3576;
                                float _3580 = ((1.0 - _3577) * dot(vec3(_3563, _3564, _3565), vec3(_978, _981, _984))) + _3577;
                                float _3583 = _3574 * _3574;
                                float _3587 = (fma(_2744, _3467.z, fma(_2743, _3467.y, _3467.x * _2742)) + _3467.w) / _3528;
                                float _3588 = (fma(_2744, _3482.z, fma(_2743, _3482.y, _3482.x * _2742)) + _3482.w) / _3528;
                                float _3592 = 1.0 - dot(vec2(_3587, _3588), vec2(_3587, _3588));
                                float _4755 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3594 = _3593 * (((isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0))) * _3570) / ((_3583 * 0.699999988079071044921875) + 1.0));
                                float _3606 = exp2(log2(1.0 / ((_3583 * 3.5) + 5.0)) * 0.25);
                                float _3607 = 1.0 - _1053;
                                float _3614 = sqrt(1.0 - ((1.0 - (_3607 * _3607)) * (1.0 - (_3606 * _3606))));
                                float _3615 = _3614 * _3614;
                                float _3616 = _3615 * _3615;
                                float _3617 = _3563 - _3036;
                                float _3618 = _3564 - _3037;
                                float _3619 = _3565 - _3038;
                                float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                                float _3627 = dot(vec3(_978, _981, _984), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4766 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3631 = dot(vec3(_978, _981, _984), vec3(_3623 * _3617, _3623 * _3618, _3623 * _3619));
                                float _4777 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3638 = ((_3634 * _3634) * (_3616 + (-1.0))) + 1.0;
                                float _3639 = _3576 * _3615;
                                float _3640 = _3639 * _3639;
                                float _3646 = ((1.0 - _3640) * dot(vec3(_978, _981, _984), vec3(_3563, _3564, _3565))) + _3640;
                                float _4788 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3648 = 1.0 - _3615;
                                float _3658 = (0.5 / (((_3647 * ((_3630 * _3648) + _3615)) + 9.9999999392252902907785028219223e-09) + (((_3647 * _3648) + _3615) * _3630))) * _3647;
                                float _4799 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3668 = (_3593 * _3570) * (((_3616 * 3.1415927410125732421875) * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) / ((_3638 * _3638) * ((_3583 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3594 * _3440.y;
                                frontier_phi_83_pred_1 = _3594 * _3440.x;
                                frontier_phi_83_pred_2 = _3668 * _3452.z;
                                frontier_phi_83_pred_3 = _3668 * _3452.y;
                                frontier_phi_83_pred_4 = _3668 * _3452.x;
                                frontier_phi_83_pred_5 = _3594 * _3440.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_83_pred;
                            _3675 = frontier_phi_83_pred_1;
                            _3674 = frontier_phi_83_pred_2;
                            _3673 = frontier_phi_83_pred_3;
                            _3672 = frontier_phi_83_pred_4;
                            _3677 = frontier_phi_83_pred_5;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            if (_3399 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3399;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3384;
                        frontier_phi_77_pred_1 = _3383;
                        frontier_phi_77_pred_2 = _3382;
                        frontier_phi_77_pred_3 = _3381;
                        frontier_phi_77_pred_4 = _3380;
                        frontier_phi_77_pred_5 = _3379;
                    }
                    _3021 = frontier_phi_77_pred;
                    _3019 = frontier_phi_77_pred_1;
                    _3017 = frontier_phi_77_pred_2;
                    _3015 = frontier_phi_77_pred_3;
                    _3013 = frontier_phi_77_pred_4;
                    _3011 = frontier_phi_77_pred_5;
                    uint _3177 = _3176 + 1u;
                    if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3170 = _3011;
                        _3171 = _3013;
                        _3172 = _3015;
                        _3173 = _3017;
                        _3174 = _3019;
                        _3175 = _3021;
                        _3176 = _3177;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3015;
                frontier_phi_58_59_ladder_1 = _3021;
                frontier_phi_58_59_ladder_2 = _3019;
                frontier_phi_58_59_ladder_3 = _3017;
                frontier_phi_58_59_ladder_4 = _3013;
                frontier_phi_58_59_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_58_59_ladder = _2893;
                frontier_phi_58_59_ladder_1 = _2899;
                frontier_phi_58_59_ladder_2 = _2897;
                frontier_phi_58_59_ladder_3 = _2895;
                frontier_phi_58_59_ladder_4 = _2891;
                frontier_phi_58_59_ladder_5 = _2889;
            }
            _3010 = frontier_phi_58_59_ladder_5;
            _3012 = frontier_phi_58_59_ladder_4;
            _3014 = frontier_phi_58_59_ladder;
            _3016 = frontier_phi_58_59_ladder_3;
            _3018 = frontier_phi_58_59_ladder_2;
            _3020 = frontier_phi_58_59_ladder_1;
        }
        float _3025 = isnan(1.0) ? _1037 : (isnan(_1037) ? 1.0 : min(_1037, 1.0));
        _2801 = (_3025 * _3016) + _2237;
        _2803 = (_3025 * _3018) + _2239;
        _2805 = (_3025 * _3020) + _2241;
        _2807 = ((_3010 * _1021) * _3025) + _2582;
        _2809 = ((_3012 * _1023) * _3025) + _2584;
        _2811 = ((_3014 * _1024) * _3025) + _2586;
    }
    else
    {
        _2801 = _2237;
        _2803 = _2239;
        _2805 = _2241;
        _2807 = _2582;
        _2809 = _2584;
        _2811 = _2586;
    }
    float _4815 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4826 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4837 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2828 = ((isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2801 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1037))) + ((_2807 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _2829 = ((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2803 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1037))) + ((_2809 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    float _2830 = ((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2805 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1037))) + ((_2811 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1875)) * cbPerFrame._m0[3u].x);
    uint _2831 = _261 + 6u;
    float _2839 = _959 / cbSceneParam._m0[86u].x;
    float _2840 = _960 / cbSceneParam._m0[86u].y;
    vec4 _2854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2856 = _2854.x;
    float _2857 = _2854.y;
    float _2858 = _2854.z;
    float _2859 = _2854.w;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _2914 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _2915 = _2914 / _882;
        float _2926 = _2915 * _932;
        float _2927 = _933 * _2915;
        float _2928 = (-0.0) - _2927;
        float _2930 = _2915 * _934;
        float _2932 = (cbSceneParam._m0[77u].w * _2928) / _2914;
        float _2933 = _2932 + cbSceneParam._m0[79u].w;
        float _2934 = cbSceneParam._m0[79u].w - _2927;
        float _2940 = sqrt(((_2926 * _2926) + (_2927 * _2927)) + (_2930 * _2930));
        float _2943 = (1.0 - (cbSceneParam._m0[77u].w / _2914)) * _2940;
        float _2948 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2950 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3127;
        if (abs((_2928 - _2932) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3127 = ((((_2933 > 0.0) ? exp2(_2948 * _2933) : (2.0 - exp2(_2950 * _2933))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2943;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : max(_2933, _2934));
            float _3073 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : min(_2933, _2934));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3127 = ((abs(_2940 / _2928) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2948 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2948 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2950 * _3082) - exp2(_2950 * _3083)) * _3071))) + (_2943 * cbSceneParam._m0[80u].z);
        }
        vec4 _3129 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, 1.0), 0.0);
        float _3138 = exp2((_3127 * (-1.44269502162933349609375)) * (1.0 - _3129.w));
        float _3139 = log2(_3138);
        float _3155 = log2(_2859);
        _2952 = (exp2(_3155 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].x)) * _3129.x) / cbSceneParam._m0[78u].x)) + _2856;
        _2954 = (exp2(_3155 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].y)) * _3129.y) / cbSceneParam._m0[78u].y)) + _2857;
        _2956 = (exp2(_3155 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].z)) * _3129.z) / cbSceneParam._m0[78u].z)) + _2858;
        _2958 = _3138 * _2859;
    }
    else
    {
        _2952 = _2856;
        _2954 = _2857;
        _2956 = _2858;
        _2958 = _2859;
    }
    bool _3165;
    vec4 _2968;
    vec4 _2990;
    float _2992;
    float _2996;
    float _2997;
    float _2998;
    float _2999;
    bool _3009;
    for (;;)
    {
        _2968 = cbMatDynParam._m0[0u];
        float _2970 = roundEven(_2968.y);
        bool _2971 = _2970 == 3.0;
        float _2972 = log2(_2958);
        float _2979 = exp2(_2972 * cbSceneParam._m0[78u].x) * _2828;
        float _2980 = exp2(_2972 * cbSceneParam._m0[78u].y) * _2829;
        float _2981 = exp2(_2972 * cbSceneParam._m0[78u].z) * _2830;
        float _2988 = _948 + (-0.5);
        _2990 = cbMtdParam._m0[1u];
        _2992 = _2990.y * _2988;
        float _2995 = (_2970 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2996 = _2995 * (_2971 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2952)));
        _2997 = _2995 * (_2971 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2954)));
        _2998 = _2995 * (_2971 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2956)));
        _2999 = _2988 * 0.999000012874603271484375;
        _3009 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3009)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _2999) < 0.5)
            {
                _3165 = true;
                break;
            }
        }
        uint _3106 = _997 + uint(_2968.w);
        if ((cbInstanceData._m0[_3106].w < 1.0) && ((cbInstanceData._m0[_3106].w + _2999) < 0.5))
        {
            _3165 = true;
            break;
        }
        if ((_2992 + 1.0) < _2990.x)
        {
            _3165 = true;
            break;
        }
        _3165 = false;
        break;
    }
    float _3370;
    if (_3165)
    {
        discard_state = true;
        _3370 = 0.0;
    }
    else
    {
        _3370 = cbInstanceData._m0[_2831].w;
    }
    SV_Target.x = _2996;
    SV_Target.y = _2997;
    SV_Target.z = _2998;
    SV_Target.w = _3370;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2831].w;
    discard_exit();
}


