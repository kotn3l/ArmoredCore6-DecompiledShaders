#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1105;
float _3486;
float _3487;
float _3488;
float _3489;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _352 = (_343.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_351, _352), vec2(_351, _352));
    float _3498 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))));
    float _364 = _351 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_317.x * 2.0) + (-1.0)));
    float _365 = _352 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_317.y * 2.0) + (-1.0)));
    float _368 = fma(_359, _218, fma(_365, _225, _364 * _211));
    float _371 = fma(_359, _219, fma(_365, _226, _364 * _212));
    float _374 = fma(_359, _220, fma(_365, _227, _364 * _213));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _426 = (cbMtdParam._m0[19u].x + dot(vec4(_378 * _368, _378 * _371, _378 * _374, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_416 - _417) * cbMtdParam._m0[24u].z) + _417) * cbMtdParam._m0[21u].z);
    float _3509 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _434 = (_427 * ((_297.x * cbMtdParam._m0[18u].x) - _276)) + _276;
    float _435 = (_427 * ((_297.y * cbMtdParam._m0[18u].y) - _277)) + _277;
    float _436 = (_427 * ((_297.z * cbMtdParam._m0[18u].z) - _278)) + _278;
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _451 = _449.x;
    float _453 = _451 - (_451 * _427);
    float _458 = (((_317.z - _347) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _347;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _478 = (_471.x * 2.0) + (-1.0);
    float _479 = (_471.y * 2.0) + (-1.0);
    float _480 = dot(vec2(_478, _479), vec2(_478, _479));
    float _3520 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _488 = ((_471.z - _458) * _427) + _458;
    float _498 = ((sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) - _359) * _427) + _359;
    float _501 = (((_478 - _364) * _427) + _364) + (cbMtdParam._m0[21u].x * _364);
    float _502 = (((_479 - _365) * _427) + _365) + (cbMtdParam._m0[21u].x * _365);
    float _507 = cbMtdParam._m0[22u].x + _343.w;
    float _510 = fma(_498, _218, fma(_502, _225, _501 * _211));
    float _513 = fma(_498, _219, fma(_502, _226, _501 * _212));
    float _516 = fma(_498, _220, fma(_502, _227, _501 * _213));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _3531 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _524 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3553 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3564 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3575 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3586 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _529 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _594 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _584);
    float _595 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _584);
    float _596 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _584);
    float _600 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
    float _601 = _594 * _600;
    float _602 = _595 * _600;
    float _603 = _596 * _600;
    vec4 _608 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _610 = _608.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _785 = sqrt(((_594 * _594) + (_595 * _595)) + (_596 * _596));
        float _791 = (cbMatDynParam._m0[5u].x * _785) + cbMatDynParam._m0[5u].y;
        float _3597 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _796 = (cbMatDynParam._m0[5u].z * _785) + cbMatDynParam._m0[5u].w;
        float _3608 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) - _792)) + _792) < ((_610 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _622 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _623 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _643 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _646 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _649 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    uint _662 = _230 + 9u;
    uint _663 = _662 + uint(cbMatDynParam._m0[0u].w);
    float _669 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_663].x;
    float _670 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_663].y;
    float _671 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_663].z;
    float _3619 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _675 = 1.0 - _529;
    float _676 = _672 * _675;
    float _677 = _673 * _675;
    float _678 = _674 * _675;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _529;
    float _684 = (_673 + (-0.039999999105930328369140625)) * _529;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _529;
    float _686 = _683 + 0.039999999105930328369140625;
    float _688 = _684 + 0.039999999105930328369140625;
    float _689 = _685 + 0.039999999105930328369140625;
    vec4 _698 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _622, cbSceneParam._m0[86u].y * _623));
    float _702 = ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * TEXCOORD_5.w) * _698.x;
    float _703 = dot(vec3(_521, _522, _523), vec3(_601, _602, _603));
    float _706 = _703 * 2.0;
    float _710 = (_706 * _521) - _601;
    float _711 = (_706 * _522) - _602;
    float _712 = (_706 * _523) - _603;
    float _716 = abs(dot(vec3(_601, _602, _603), vec3(_521, _522, _523)));
    float _3652 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _718 = sqrt(_524);
    float _731 = exp2((_718 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_718 * 3.0));
    float _737 = (1.0 - _731) * ((_718 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _738 = _731 * _718;
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1104;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _829 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _833 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _837 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _862 = _766 + _521;
        float _863 = _770 + _522;
        float _864 = _774 + _523;
        float _874 = fma(_864, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862)) - _829;
        float _875 = fma(_864, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862)) - _833;
        float _876 = fma(_864, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862)) - _837;
        float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
        float _893 = ((_880 * _874) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_829 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_880 * _875) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_833 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_880 * _876) / cbModelParam._m0[34u].z) + ((((((_837 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        float _932 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_898.x + (-0.5));
        float _934 = _932 * (_898.y + (-0.5));
        float _935 = _932 * (_898.z + (-0.5));
        float _942 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_905.x + (-0.5));
        float _944 = _942 * (_905.y + (-0.5));
        float _945 = _942 * (_905.z + (-0.5));
        float _952 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_912.x + (-0.5));
        float _954 = _952 * (_912.y + (-0.5));
        float _955 = _952 * (_912.z + (-0.5));
        float _962 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_919.x + (-0.5));
        float _964 = _962 * (_919.y + (-0.5));
        float _965 = _962 * (_919.z + (-0.5));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = _933 * 0.5;
        float _970 = _943 * 0.5;
        float _971 = _953 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _986 = (dot(vec3(_521, _522, _523), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _996 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3700 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_998 + 1.0))) + _1003) * _966;
        float _1013 = _934 * 0.5;
        float _1014 = _944 * 0.5;
        float _1015 = _954 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_521, _522, _523), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3733 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1040 + 1.0))) + _1045) * _967;
        float _1055 = _935 * 0.5;
        float _1056 = _945 * 0.5;
        float _1057 = _955 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_521, _522, _523), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3766 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1082 + 1.0))) + _1087) * _968;
        _1104 = _935;
        _1106 = _934;
        _1107 = _933;
        _1108 = _945;
        _1109 = _944;
        _1110 = _943;
        _1111 = _955;
        _1112 = _954;
        _1113 = _953;
        _1114 = _968;
        _1115 = _967;
        _1116 = _966;
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
    }
    else
    {
        _1104 = _1105;
        _1106 = _1105;
        _1107 = _1105;
        _1108 = _1105;
        _1109 = _1105;
        _1110 = _1105;
        _1111 = _1105;
        _1112 = _1105;
        _1113 = _1105;
        _1114 = _1105;
        _1115 = _1105;
        _1116 = _1105;
        _1117 = 0.0;
        _1118 = 0.0;
        _1119 = 0.0;
    }
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1147 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1151 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1155 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1178 = _766 + _521;
        float _1179 = _770 + _522;
        float _1180 = _774 + _523;
        float _1190 = fma(_1180, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178)) - _1147;
        float _1191 = fma(_1180, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178)) - _1151;
        float _1192 = fma(_1180, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178)) - _1155;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1147 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1151 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[35u].z) + ((((((_1155 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1246 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1213.x + (-0.5));
        float _1248 = _1246 * (_1213.y + (-0.5));
        float _1249 = _1246 * (_1213.z + (-0.5));
        float _1256 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1220.x + (-0.5));
        float _1258 = _1256 * (_1220.y + (-0.5));
        float _1259 = _1256 * (_1220.z + (-0.5));
        float _1266 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1227.x + (-0.5));
        float _1268 = _1266 * (_1227.y + (-0.5));
        float _1269 = _1266 * (_1227.z + (-0.5));
        float _1276 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1234.x + (-0.5));
        float _1278 = _1276 * (_1234.y + (-0.5));
        float _1279 = _1276 * (_1234.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_521, _522, _523), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3829 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1310 + 1.0))) + _1315) * _1280;
        float _1325 = _1248 * 0.5;
        float _1326 = _1258 * 0.5;
        float _1327 = _1268 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_521, _522, _523), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3862 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1352 + 1.0))) + _1357) * _1281;
        float _1367 = _1249 * 0.5;
        float _1368 = _1259 * 0.5;
        float _1369 = _1269 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_521, _522, _523), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3895 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1394 + 1.0))) + _1399) * _1282;
        _1416 = _1249;
        _1417 = _1248;
        _1418 = _1247;
        _1419 = _1259;
        _1420 = _1258;
        _1421 = _1257;
        _1422 = _1269;
        _1423 = _1268;
        _1424 = _1267;
        _1425 = _1282;
        _1426 = _1281;
        _1427 = _1280;
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1105;
        _1417 = _1105;
        _1418 = _1105;
        _1419 = _1105;
        _1420 = _1105;
        _1421 = _1105;
        _1422 = _1105;
        _1423 = _1105;
        _1424 = _1105;
        _1425 = _1105;
        _1426 = _1105;
        _1427 = _1105;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1117)) + _1117;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1118)) + _1118;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1119)) + _1119;
    float _1463 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1440));
    float _1484 = _710 * 0.5;
    float _1485 = _711 * 0.5;
    float _1486 = _712 * 0.5;
    float _1487 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1490 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1493 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1527;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1500 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1104, _1108, _1111, _1114));
        float _1504 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1508 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1515 = dot(vec4(cbModelParam._m0[39u]), vec4(_1484, _1485, _1486, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1538;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1529 = dot(vec4(cbModelParam._m0[40u]), vec4(_1484, _1485, _1486, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1542 = (_1538 * cbModelParam._m0[1u].x) + (_1527 * (1.0 - cbModelParam._m0[1u].x));
    float _1552 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1552 : min(cbModelParam._m0[25u].z, _1552));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1600 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1604 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1608 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1611 = fma(_712, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710));
        float _1614 = fma(_712, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710));
        float _1617 = fma(_712, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710));
        float _1645;
        if (_1611 > 0.0)
        {
            _1645 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1645 = frontier_phi_17_15_ladder;
        }
        float _1848;
        if (_1614 > 0.0)
        {
            _1848 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1848 = frontier_phi_26_22_ladder;
        }
        float _2102;
        if (_1617 > 0.0)
        {
            _2102 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2102 = frontier_phi_38_33_ladder;
        }
        float _2104 = isnan(_1848) ? _1645 : (isnan(_1645) ? _1848 : min(_1645, _1848));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1611) + _1600;
        float _2110 = (_2105 * _1614) + _1604;
        float _2111 = (_2105 * _1617) + _1608;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2112;
        float _2116 = _2112 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 > _2116) || ((_2110 < _2114) || ((_2109 < _2114) || (_2109 > _2116))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2111, cbModelParam._m0[9u].z, fma(_2110, cbModelParam._m0[9u].y, _2109 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2111, cbModelParam._m0[10u].z, fma(_2110, cbModelParam._m0[10u].y, _2109 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2111, cbModelParam._m0[11u].z, fma(_2110, cbModelParam._m0[11u].y, _2109 * cbModelParam._m0[11u].x))), _1553);
            frontier_phi_16_38_ladder = _2239.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2239.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2239.x * cbModelParam._m0[1u].y;
        }
        _1633 = frontier_phi_16_38_ladder_2;
        _1635 = frontier_phi_16_38_ladder_1;
        _1637 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_710, _711, _712), _1553);
        _1633 = _1621.x * cbModelParam._m0[1u].y;
        _1635 = _1621.y * cbModelParam._m0[1u].y;
        _1637 = _1621.z * cbModelParam._m0[1u].y;
    }
    float _1641 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1641 : min(cbModelParam._m0[25u].w, _1641));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1695 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1699 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1703 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1706 = fma(_712, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710));
        float _1709 = fma(_712, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710));
        float _1712 = fma(_712, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710));
        float _1853;
        if (_1706 > 0.0)
        {
            _1853 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1853 = frontier_phi_28_24_ladder;
        }
        float _2129;
        if (_1709 > 0.0)
        {
            _2129 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2129 = frontier_phi_40_35_ladder;
        }
        float _2342;
        if (_1712 > 0.0)
        {
            _2342 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2342 = frontier_phi_49_46_ladder;
        }
        float _2344 = isnan(_2129) ? _1853 : (isnan(_1853) ? _2129 : min(_1853, _2129));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1706) + _1695;
        float _2350 = (_2345 * _1709) + _1699;
        float _2351 = (_2345 * _1712) + _1703;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2352;
        float _2355 = _2352 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2351 > _2355) || ((_2351 < _2353) || ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 < _2353) || (_2349 > _2355))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2351, cbModelParam._m0[17u].z, fma(_2350, cbModelParam._m0[17u].y, _2349 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2351, cbModelParam._m0[18u].z, fma(_2350, cbModelParam._m0[18u].y, _2349 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2351, cbModelParam._m0[19u].z, fma(_2350, cbModelParam._m0[19u].y, _2349 * cbModelParam._m0[19u].x))), _1642);
            frontier_phi_25_49_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1731 = frontier_phi_25_49_ladder_2;
        _1733 = frontier_phi_25_49_ladder_1;
        _1735 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_710, _711, _712), _1642);
        _1731 = _1715.x * cbModelParam._m0[1u].z;
        _1733 = _1715.y * cbModelParam._m0[1u].z;
        _1735 = _1715.z * cbModelParam._m0[1u].z;
    }
    float _1748 = (((_737 * _686) + _738) * _702) * ((cbModelParam._m0[1u].w * (_1731 - _1633)) + _1633);
    float _1750 = (((_737 * _688) + _738) * _702) * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1752 = (((_737 * _689) + _738) * _702) * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1748 * cbSceneParam._m0[91u].x));
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1781 = _702 + (-1.0);
    float _1786 = (cbLight._m0[_1774].x * _1781) + 1.0;
    float _1787 = (cbLight._m0[_1774].y * _1781) + 1.0;
    float _1788 = (cbLight._m0[_1774].z * _1781) + 1.0;
    float _1789 = (cbLight._m0[_1774].w * _1781) + 1.0;
    uint _1790 = _1773 + 5u;
    float _1796 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1800 = _1773 + 4u;
    float _1807 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1811 = _1773 | 1u;
    float _1822 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_521, _522, _523));
    float _1825 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_521, _522, _523));
    float _4031 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _4042 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1830 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1832 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1839 = ((cbLight._m0[_1790].x * _1796) * _1832) + ((cbLight._m0[_1800].x * _1807) * _1830);
    float _1840 = ((_1796 * cbLight._m0[_1790].y) * _1832) + ((_1807 * cbLight._m0[_1800].y) * _1830);
    float _1841 = ((_1796 * cbLight._m0[_1790].z) * _1832) + ((_1807 * cbLight._m0[_1800].z) * _1830);
    uvec4 _1845 = floatBitsToUint(cbLight._m0[_1773 + 12u]);
    bool _1847 = _1845.x == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1847)
    {
        _1858 = _1839;
        _1860 = _1840;
        _1862 = _1841;
    }
    else
    {
        uint _1866 = _1773 + 6u;
        float _1882 = (dot(vec3(cbLight._m0[_1773 + 2u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _1883 = _1882 * _1882;
        float _4053 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1885 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1858 = (((cbLight._m0[_1866].x * 0.3183098733425140380859375) * _1884) * _1885) + _1839;
        _1860 = (((cbLight._m0[_1866].y * 0.3183098733425140380859375) * _1884) * _1885) + _1840;
        _1862 = (((cbLight._m0[_1866].z * 0.3183098733425140380859375) * _1884) * _1885) + _1841;
    }
    bool _1865 = _1845.y == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1865)
    {
        _1903 = _1858;
        _1905 = _1860;
        _1907 = _1862;
    }
    else
    {
        uint _2073 = _1773 + 7u;
        float _2089 = (dot(vec3(cbLight._m0[_1773 + 3u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2090 = _2089 * _2089;
        float _4069 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2092 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1903 = (((cbLight._m0[_2073].x * 0.3183098733425140380859375) * _2091) * _2092) + _1858;
        _1905 = (((cbLight._m0[_2073].y * 0.3183098733425140380859375) * _2091) * _2092) + _1860;
        _1907 = (((cbLight._m0[_2073].z * 0.3183098733425140380859375) * _2091) * _2092) + _1862;
    }
    uint _1910 = _1773 + 8u;
    float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _524) * 0.949999988079071044921875);
    float _1924 = _1923 * _1923;
    float _1925 = cbLight._m0[_1773].x + _601;
    float _1926 = cbLight._m0[_1773].y + _602;
    float _1927 = cbLight._m0[_1773].z + _603;
    float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
    float _1932 = _1931 * _1925;
    float _1933 = _1931 * _1926;
    float _1934 = _1931 * _1927;
    float _1935 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1773].xyz));
    float _4085 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _1939 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _1940 = dot(vec3(_521, _522, _523), vec3(_1932, _1933, _1934));
    float _4107 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1932, _1933, _1934));
    float _4118 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1948 = _1924 * _1924;
    float _1952 = ((_1943 * _1943) * (_1948 + (-1.0))) + 1.0;
    float _1960 = exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0);
    float _1961 = 0.959999978542327880859375 - _683;
    float _1963 = 0.959999978542327880859375 - _684;
    float _1964 = 0.959999978542327880859375 - _685;
    float _1971 = 1.0 - _1924;
    float _1982 = (0.5 / (((_1939 * ((_1938 * _1971) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _1971) + _1924) * _1938))) * _1938;
    float _4129 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1984 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1948 / ((_1952 * _1952) * 3.141590118408203125));
    uint _1995 = _1773 + 9u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _524) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1811].x + _601;
    float _2009 = cbLight._m0[_1811].y + _602;
    float _2010 = cbLight._m0[_1811].z + _603;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1811].xyz));
    float _4140 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2022 = dot(vec3(_521, _522, _523), vec3(_2015, _2016, _2017));
    float _4151 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_2015, _2016, _2017));
    float _4162 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2030 = _2007 * _2007;
    float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
    float _2041 = exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0);
    float _2048 = 1.0 - _2007;
    float _2058 = (0.5 / (((_1939 * ((_2021 * _2048) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2048) + _2007) * _2021))) * _2021;
    float _4173 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
    float _2070 = (((((_2041 * _1961) + _686) * cbLight._m0[_1995].x) * _2060) * _1796) + (((((_1960 * _1961) + _686) * cbLight._m0[_1910].x) * _1984) * _1807);
    float _2071 = (((((_2041 * _1963) + _688) * cbLight._m0[_1995].y) * _2060) * _1796) + (((((_1960 * _1963) + _688) * cbLight._m0[_1910].y) * _1984) * _1807);
    float _2072 = (((((_2041 * _1964) + _689) * cbLight._m0[_1995].z) * _2060) * _1796) + (((((_1960 * _1964) + _689) * cbLight._m0[_1910].z) * _1984) * _1807);
    float _2134;
    float _2136;
    float _2138;
    if (_1847)
    {
        _2134 = _2070;
        _2136 = _2071;
        _2138 = _2072;
    }
    else
    {
        uint _2140 = _1773 + 2u;
        uint _2144 = _1773 + 10u;
        float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _524) * 0.949999988079071044921875);
        float _2159 = _2158 * _2158;
        float _2160 = cbLight._m0[_2140].x + _601;
        float _2161 = cbLight._m0[_2140].y + _602;
        float _2162 = cbLight._m0[_2140].z + _603;
        float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
        float _2167 = _2166 * _2160;
        float _2168 = _2166 * _2161;
        float _2169 = _2166 * _2162;
        float _2170 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2140].xyz));
        float _4184 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2174 = dot(vec3(_521, _522, _523), vec3(_2167, _2168, _2169));
        float _4195 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2178 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2167, _2168, _2169));
        float _4206 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2182 = _2159 * _2159;
        float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
        float _2193 = exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0);
        float _2200 = 1.0 - _2159;
        float _2210 = (0.5 / (((_1939 * ((_2173 * _2200) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2200) + _2159) * _2173))) * _2173;
        float _4217 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2212 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
        float _2213 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2134 = (((((_2193 * _1961) + _686) * cbLight._m0[_2144].x) * _2212) * _2213) + _2070;
        _2136 = (((((_2193 * _1963) + _688) * cbLight._m0[_2144].y) * _2212) * _2213) + _2071;
        _2138 = (((((_2193 * _1964) + _689) * cbLight._m0[_2144].z) * _2212) * _2213) + _2072;
    }
    float _2248;
    float _2250;
    float _2252;
    if (_1865)
    {
        _2248 = _2134;
        _2250 = _2136;
        _2252 = _2138;
    }
    else
    {
        uint _2259 = _1773 + 3u;
        uint _2263 = _1773 + 11u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _524) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _601;
        float _2280 = cbLight._m0[_2259].y + _602;
        float _2281 = cbLight._m0[_2259].z + _603;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2259].xyz));
        float _4233 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2293 = dot(vec3(_521, _522, _523), vec3(_2286, _2287, _2288));
        float _4244 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4255 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
        float _2319 = 1.0 - _2278;
        float _2329 = (0.5 / (((_1939 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2319) + _2278) * _2292))) * _2292;
        float _4266 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2248 = (((((_2312 * _1961) + _686) * cbLight._m0[_2263].x) * _2331) * _2332) + _2134;
        _2250 = (((((_2312 * _1963) + _688) * cbLight._m0[_2263].y) * _2331) * _2332) + _2136;
        _2252 = (((((_2312 * _1964) + _689) * cbLight._m0[_2263].z) * _2331) * _2332) + _2138;
    }
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_1771.y == 0u)
    {
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2407;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2407;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2407;
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.x;
        uint _2434 = uint((float(_2422.y) * floor(float(uint(cbSceneParam._m0[85u].y * _623) / _2423))) + floor(float(uint(cbSceneParam._m0[85u].x * _622) / _2423)));
        float _2444 = (log2(_2410 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2445 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        uint _2448 = uint(isnan(14.0) ? _2445 : (isnan(_2445) ? 14.0 : min(_2445, 14.0)));
        uvec4 _2453 = texelFetch(g_lightClusterGridBuffer, int(((_2448 << 2u) + (_2434 << 6u)) >> 2u));
        uint _2454 = _2453.x;
        uint _2455 = _2422.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2455 >> 4u) & 15u)) + 4294967295u) & _2454) == 0u) || ((_2455 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            uint _2714 = 0u;
            uint _2723;
            bool _2724;
            for (;;)
            {
                _2723 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                _2724 = _2723 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2724)
                {
                    frontier_phi_66_pred = _2708;
                    frontier_phi_66_pred_1 = _2713;
                    frontier_phi_66_pred_2 = _2712;
                    frontier_phi_66_pred_3 = _2711;
                    frontier_phi_66_pred_4 = _2710;
                    frontier_phi_66_pred_5 = _2709;
                }
                else
                {
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    uint _2859;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2723;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    for (;;)
                    {
                        uint _2863 = uint(findLSB(_2859)) + (_2714 << 5u);
                        uint _2860 = (_2859 + 4294967295u) & _2859;
                        uint _2865 = _2863 * 48u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2885 = (_2863 * 48u) + 4u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2904 = (_2863 * 48u) + 8u;
                        vec3 _2915 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x));
                        float _2919 = _2879.x - _2408;
                        float _2920 = _2879.y - _2409;
                        float _2921 = _2879.z - _2410;
                        float _2922 = dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921));
                        float _2925 = inversesqrt(_2922);
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2929 = dot(vec3(_643, _646, _649), vec3(_2926, _2927, _2928));
                        float _2934 = 1.0 - (_2922 * _2879.w);
                        float _4292 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _2936 = sqrt(_2922) * _2898.w;
                        float _2939 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2929) + _2940;
                        float _2946 = _2936 * _2936;
                        float _2950 = ((isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))) * _2935) / ((_2946 * 0.699999988079071044921875) + 1.0);
                        float _2954 = (-0.0) - _2408;
                        float _2955 = (-0.0) - _2409;
                        float _2956 = (-0.0) - _2410;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2971 = exp2(log2(1.0 / ((_2946 * 3.5) + 5.0)) * 0.25);
                        float _2972 = 1.0 - _718;
                        float _2979 = sqrt(1.0 - ((1.0 - (_2972 * _2972)) * (1.0 - (_2971 * _2971))));
                        float _2980 = _2979 * _2979;
                        float _2981 = _2980 * _2980;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2992 = dot(vec3(_643, _646, _649), vec3(_2961, _2962, _2963));
                        float _4308 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2995 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _2996 = dot(vec3(_643, _646, _649), vec3(_2988 * _2982, _2988 * _2983, _2988 * _2984));
                        float _4319 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3003 = ((_2999 * _2999) * (_2981 + (-1.0))) + 1.0;
                        float _3004 = _2939 * _2980;
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2929) + _3005;
                        float _4330 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3010 = 1.0 - _2980;
                        float _3020 = (0.5 / (((_3009 * ((_2995 * _3010) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_3009 * _3010) + _2980) * _2995))) * _3009;
                        float _4341 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3031 = (((_2981 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3003 * _3003) * ((_2946 * 2.1991131305694580078125) + 3.141590118408203125))) * _2935;
                        _2783 = (_2950 * _2898.x) + _2856;
                        _2784 = (_2950 * _2898.y) + _2857;
                        _2785 = (_2950 * _2898.z) + _2858;
                        _2780 = (_3031 * _2915.x) + _2853;
                        _2781 = (_3031 * _2915.y) + _2854;
                        _2782 = (_3031 * _2915.z) + _2855;
                        if (_2860 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2860;
                        }
                    }
                    frontier_phi_66_pred = _2780;
                    frontier_phi_66_pred_1 = _2785;
                    frontier_phi_66_pred_2 = _2784;
                    frontier_phi_66_pred_3 = _2783;
                    frontier_phi_66_pred_4 = _2782;
                    frontier_phi_66_pred_5 = _2781;
                }
                _2556 = frontier_phi_66_pred;
                _2566 = frontier_phi_66_pred_1;
                _2564 = frontier_phi_66_pred_2;
                _2562 = frontier_phi_66_pred_3;
                _2560 = frontier_phi_66_pred_4;
                _2558 = frontier_phi_66_pred_5;
                uint _2715 = _2714 + 1u;
                if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2708 = _2556;
                    _2709 = _2558;
                    _2710 = _2560;
                    _2711 = _2562;
                    _2712 = _2564;
                    _2713 = _2566;
                    _2714 = _2715;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        if (((4294967295u << _2572) & _2454) == 0u)
        {
            _2676 = _2555;
            _2678 = _2557;
            _2680 = _2559;
            _2682 = _2561;
            _2684 = _2563;
            _2686 = _2565;
        }
        else
        {
            float _2701 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
            float _2702 = _2701 * _2408;
            float _2703 = _2701 * _2409;
            float _2704 = _2701 * _2410;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2836 = _2555;
                float _2837 = _2557;
                float _2838 = _2559;
                float _2839 = _2561;
                float _2840 = _2563;
                float _2841 = _2565;
                uint _2842 = _2572;
                uint _2851;
                bool _2852;
                for (;;)
                {
                    _2851 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                    _2852 = _2851 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2852)
                    {
                        frontier_phi_77_pred = _2841;
                        frontier_phi_77_pred_1 = _2840;
                        frontier_phi_77_pred_2 = _2839;
                        frontier_phi_77_pred_3 = _2838;
                        frontier_phi_77_pred_4 = _2837;
                        frontier_phi_77_pred_5 = _2836;
                    }
                    else
                    {
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        uint _3064 = _2851;
                        uint _3065;
                        vec4 _3090;
                        float _3091;
                        vec4 _3106;
                        vec3 _3118;
                        vec4 _3134;
                        vec4 _3149;
                        float _3195;
                        bool _3196;
                        for (;;)
                        {
                            uint _3075 = ((_2842 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3064));
                            _3065 = (_3064 + 4294967295u) & _3064;
                            uint _3077 = _3075 * 40u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3091 = _3090.w;
                            uint _3093 = (_3075 * 40u) + 4u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3108 = (_3075 * 40u) + 8u;
                            _3118 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x));
                            uint _3121 = (_3075 * 40u) + 16u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3075 * 40u) + 20u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3075 * 40u) + 24u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3170 = (_3075 * 40u) + 28u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3195 = fma(_2410, _3183.z, fma(_2409, _3183.y, _3183.x * _2408)) + _3183.w;
                            _3196 = !((fma(_2410, _3164.z, fma(_2409, _3164.y, _3164.x * _2408)) + _3164.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3196)
                            {
                                float _3223 = _3090.x - _2408;
                                float _3224 = _3090.y - _2409;
                                float _3225 = _3090.z - _2410;
                                float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                                float _3229 = inversesqrt(_3226);
                                float _3230 = _3229 * _3223;
                                float _3231 = _3229 * _3224;
                                float _3232 = _3229 * _3225;
                                float _3236 = 1.0 - (_3226 / (_3091 * _3091));
                                float _4352 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3241 = sqrt(_3226) * _3106.w;
                                float _3243 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                                float _3244 = _3243 * _3243;
                                float _3247 = ((1.0 - _3244) * dot(vec3(_3230, _3231, _3232), vec3(_643, _646, _649))) + _3244;
                                float _3250 = _3241 * _3241;
                                float _3254 = (fma(_2410, _3134.z, fma(_2409, _3134.y, _3134.x * _2408)) + _3134.w) / _3195;
                                float _3255 = (fma(_2410, _3149.z, fma(_2409, _3149.y, _3149.x * _2408)) + _3149.w) / _3195;
                                float _3259 = 1.0 - dot(vec2(_3254, _3255), vec2(_3254, _3255));
                                float _4368 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3261 = _3260 * (((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3237) / ((_3250 * 0.699999988079071044921875) + 1.0));
                                float _3273 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                                float _3274 = 1.0 - _718;
                                float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                                float _3282 = _3281 * _3281;
                                float _3283 = _3282 * _3282;
                                float _3284 = _3230 - _2702;
                                float _3285 = _3231 - _2703;
                                float _3286 = _3232 - _2704;
                                float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                                float _3294 = dot(vec3(_643, _646, _649), vec3((-0.0) - _2702, (-0.0) - _2703, (-0.0) - _2704));
                                float _4379 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3298 = dot(vec3(_643, _646, _649), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                                float _4390 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                                float _3306 = _3243 * _3282;
                                float _3307 = _3306 * _3306;
                                float _3313 = ((1.0 - _3307) * dot(vec3(_643, _646, _649), vec3(_3230, _3231, _3232))) + _3307;
                                float _4401 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3315 = 1.0 - _3282;
                                float _3325 = (0.5 / (((_3314 * ((_3297 * _3315) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3282) * _3297))) * _3314;
                                float _4412 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3335 = (_3260 * _3237) * (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_3305 * _3305) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3261 * _3106.y;
                                frontier_phi_83_pred_1 = _3261 * _3106.x;
                                frontier_phi_83_pred_2 = _3335 * _3118.z;
                                frontier_phi_83_pred_3 = _3335 * _3118.y;
                                frontier_phi_83_pred_4 = _3335 * _3118.x;
                                frontier_phi_83_pred_5 = _3261 * _3106.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3343 = frontier_phi_83_pred;
                            _3342 = frontier_phi_83_pred_1;
                            _3341 = frontier_phi_83_pred_2;
                            _3340 = frontier_phi_83_pred_3;
                            _3339 = frontier_phi_83_pred_4;
                            _3344 = frontier_phi_83_pred_5;
                            _3048 = _3342 + _3061;
                            _3049 = _3343 + _3062;
                            _3050 = _3344 + _3063;
                            _3045 = _3339 + _3058;
                            _3046 = _3340 + _3059;
                            _3047 = _3341 + _3060;
                            if (_3065 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3065;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3050;
                        frontier_phi_77_pred_1 = _3049;
                        frontier_phi_77_pred_2 = _3048;
                        frontier_phi_77_pred_3 = _3047;
                        frontier_phi_77_pred_4 = _3046;
                        frontier_phi_77_pred_5 = _3045;
                    }
                    _2687 = frontier_phi_77_pred;
                    _2685 = frontier_phi_77_pred_1;
                    _2683 = frontier_phi_77_pred_2;
                    _2681 = frontier_phi_77_pred_3;
                    _2679 = frontier_phi_77_pred_4;
                    _2677 = frontier_phi_77_pred_5;
                    uint _2843 = _2842 + 1u;
                    if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2836 = _2677;
                        _2837 = _2679;
                        _2838 = _2681;
                        _2839 = _2683;
                        _2840 = _2685;
                        _2841 = _2687;
                        _2842 = _2843;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2681;
                frontier_phi_58_59_ladder_1 = _2687;
                frontier_phi_58_59_ladder_2 = _2685;
                frontier_phi_58_59_ladder_3 = _2683;
                frontier_phi_58_59_ladder_4 = _2679;
                frontier_phi_58_59_ladder_5 = _2677;
            }
            else
            {
                frontier_phi_58_59_ladder = _2559;
                frontier_phi_58_59_ladder_1 = _2565;
                frontier_phi_58_59_ladder_2 = _2563;
                frontier_phi_58_59_ladder_3 = _2561;
                frontier_phi_58_59_ladder_4 = _2557;
                frontier_phi_58_59_ladder_5 = _2555;
            }
            _2676 = frontier_phi_58_59_ladder_5;
            _2678 = frontier_phi_58_59_ladder_4;
            _2680 = frontier_phi_58_59_ladder;
            _2682 = frontier_phi_58_59_ladder_3;
            _2684 = frontier_phi_58_59_ladder_2;
            _2686 = frontier_phi_58_59_ladder_1;
        }
        float _2691 = isnan(1.0) ? _702 : (isnan(_702) ? 1.0 : min(_702, 1.0));
        _2467 = (_2691 * _2682) + _1903;
        _2469 = (_2691 * _2684) + _1905;
        _2471 = (_2691 * _2686) + _1907;
        _2473 = ((_2676 * _686) * _2691) + _2248;
        _2475 = ((_2678 * _688) * _2691) + _2250;
        _2477 = ((_2680 * _689) * _2691) + _2252;
    }
    else
    {
        _2467 = _1903;
        _2469 = _1905;
        _2471 = _1907;
        _2473 = _2248;
        _2475 = _2250;
        _2477 = _2252;
    }
    float _4428 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4439 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4450 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _2494 = ((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2467 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _702))) + ((_2473 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1542)) * cbPerFrame._m0[3u].x);
    float _2495 = ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2469 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _702))) + ((_2475 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1542)) * cbPerFrame._m0[3u].x);
    float _2496 = ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2471 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _702))) + ((_2477 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1542)) * cbPerFrame._m0[3u].x);
    uint _2497 = _230 + 6u;
    float _2505 = _622 / cbSceneParam._m0[86u].x;
    float _2506 = _623 / cbSceneParam._m0[86u].y;
    vec4 _2520 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2522 = _2520.x;
    float _2523 = _2520.y;
    float _2524 = _2520.z;
    float _2525 = _2520.w;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2581 = _2580 / _543;
        float _2592 = _2581 * _594;
        float _2593 = _595 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2596 = _2581 * _596;
        float _2598 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2599 = _2598 + cbSceneParam._m0[79u].w;
        float _2600 = cbSceneParam._m0[79u].w - _2593;
        float _2606 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2596 * _2596));
        float _2609 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2606;
        float _2614 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2616 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2793;
        if (abs((_2594 - _2598) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2793 = ((((_2599 > 0.0) ? exp2(_2614 * _2599) : (2.0 - exp2(_2616 * _2599))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2609;
        }
        else
        {
            float _2737 = 1.0 / cbSceneParam._m0[80u].x;
            float _2738 = isnan(_2600) ? _2599 : (isnan(_2599) ? _2600 : max(_2599, _2600));
            float _2739 = isnan(_2600) ? _2599 : (isnan(_2599) ? _2600 : min(_2599, _2600));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            _2793 = ((abs(_2606 / _2594) * cbSceneParam._m0[80u].y) * ((((_2748 - _2749) * 2.0) - ((exp2(_2614 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0)))) - exp2(_2614 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))))) * _2737)) - ((exp2(_2616 * _2748) - exp2(_2616 * _2749)) * _2737))) + (_2609 * cbSceneParam._m0[80u].z);
        }
        vec4 _2795 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, 1.0), 0.0);
        float _2804 = exp2((_2793 * (-1.44269502162933349609375)) * (1.0 - _2795.w));
        float _2805 = log2(_2804);
        float _2821 = log2(_2525);
        _2618 = (exp2(_2821 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].x)) * _2795.x) / cbSceneParam._m0[78u].x)) + _2522;
        _2620 = (exp2(_2821 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].y)) * _2795.y) / cbSceneParam._m0[78u].y)) + _2523;
        _2622 = (exp2(_2821 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].z)) * _2795.z) / cbSceneParam._m0[78u].z)) + _2524;
        _2624 = _2804 * _2525;
    }
    else
    {
        _2618 = _2522;
        _2620 = _2523;
        _2622 = _2524;
        _2624 = _2525;
    }
    bool _2831;
    vec4 _2634;
    vec4 _2656;
    float _2658;
    float _2662;
    float _2663;
    float _2664;
    float _2665;
    bool _2675;
    for (;;)
    {
        _2634 = cbMatDynParam._m0[0u];
        float _2636 = roundEven(_2634.y);
        bool _2637 = _2636 == 3.0;
        float _2638 = log2(_2624);
        float _2645 = exp2(_2638 * cbSceneParam._m0[78u].x) * _2494;
        float _2646 = exp2(_2638 * cbSceneParam._m0[78u].y) * _2495;
        float _2647 = exp2(_2638 * cbSceneParam._m0[78u].z) * _2496;
        float _2654 = _610 + (-0.5);
        _2656 = cbMtdParam._m0[1u];
        _2658 = _2656.y * _2654;
        float _2661 = (_2636 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2662 = _2661 * (_2637 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2618)));
        _2663 = _2661 * (_2637 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2620)));
        _2664 = _2661 * (_2637 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2622)));
        _2665 = _2654 * 0.999000012874603271484375;
        _2675 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2675)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2665) < 0.5)
            {
                _2831 = true;
                break;
            }
        }
        uint _2772 = _662 + uint(_2634.w);
        if ((cbInstanceData._m0[_2772].w < 1.0) && ((cbInstanceData._m0[_2772].w + _2665) < 0.5))
        {
            _2831 = true;
            break;
        }
        if ((_2658 + 1.0) < _2656.x)
        {
            _2831 = true;
            break;
        }
        _2831 = false;
        break;
    }
    float _3036;
    if (_2831)
    {
        discard_state = true;
        _3036 = 0.0;
    }
    else
    {
        _3036 = cbInstanceData._m0[_2497].w;
    }
    SV_Target.x = _2662;
    SV_Target.y = _2663;
    SV_Target.z = _2664;
    SV_Target.w = _3036;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2497].w;
    discard_exit();
}


