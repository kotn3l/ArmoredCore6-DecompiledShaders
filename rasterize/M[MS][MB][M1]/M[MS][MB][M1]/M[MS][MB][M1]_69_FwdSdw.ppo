#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1213;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3825 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _467 = ((_437.z - _458) * _390) + _458;
    float _470 = ((((_437.x - _456) * _390) + _456) * 2.0) + (-1.0);
    float _471 = ((((_437.y - _457) * _390) + _457) * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3836 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))));
    float _482 = _470 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_412.x * 2.0) + (-1.0)));
    float _483 = _471 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_412.y * 2.0) + (-1.0)));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _512 = _510.x;
    float _513 = 1.0 - _512;
    float _541 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_512 - _513) * cbMtdParam._m0[24u].w) + _513) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3847 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _550 = ((((cbMtdParam._m0[10u].x - _397) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _542) + _397;
    float _551 = ((((cbMtdParam._m0[10u].y - _398) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _542) + _398;
    float _552 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _399)) * _542) + _399;
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _580 = _578.x;
    float _598 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _580) * _390) + _580;
    float _602 = ((_564.x - _598) * cbMtdParam._m0[19u].z) + _598;
    float _604 = _602 - (_602 * _542);
    float _609 = (((_412.z - _467) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _467;
    float _613 = ((cbMtdParam._m0[23u].y - _609) * _542) + _609;
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _638 = (_632.x * 2.0) + (-1.0);
    float _639 = (_632.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3858 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _656 = (_542 * (((cbMtdParam._m0[22u].z * _482) - _482) + _638)) + _482;
    float _657 = (_542 * (((cbMtdParam._m0[22u].z * _483) - _483) + _639)) + _483;
    float _658 = (_542 * (sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) - _477)) + _477;
    float _660 = cbMtdParam._m0[22u].x + _496.w;
    float _663 = fma(_658, _240 * NORMAL.x, fma(_657, _247 * TANGENT.x, (_233 * _225) * _656));
    float _666 = fma(_658, _240 * NORMAL.y, fma(_657, _247 * TANGENT.y, (_233 * _226) * _656));
    float _669 = fma(_658, _240 * NORMAL.z, fma(_657, _247 * TANGENT.z, (_233 * _227) * _656));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3869 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _677 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3891 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3902 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _3913 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3924 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _682 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _780 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _783 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _786 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _800 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _806 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_800].x;
    float _807 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_800].y;
    float _808 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_800].z;
    float _3935 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _812 = 1.0 - _682;
    float _813 = _809 * _812;
    float _814 = _810 * _812;
    float _815 = _811 * _812;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _682;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _682;
    float _822 = (_811 + (-0.039999999105930328369140625)) * _682;
    float _823 = _820 + 0.039999999105930328369140625;
    float _825 = _821 + 0.039999999105930328369140625;
    float _826 = _822 + 0.039999999105930328369140625;
    vec4 _835 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _839 = ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * TEXCOORD_5.w) * _835.x;
    float _840 = dot(vec3(_674, _675, _676), vec3(_753, _754, _755));
    float _843 = _840 * 2.0;
    float _847 = (_843 * _674) - _753;
    float _848 = (_843 * _675) - _754;
    float _849 = (_843 * _676) - _755;
    float _853 = abs(dot(vec3(_753, _754, _755), vec3(_674, _675, _676)));
    float _3968 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _855 = sqrt(_677);
    float _868 = exp2((_855 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_855 * 3.0));
    float _874 = (1.0 - _868) * ((_855 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _875 = _868 * _855;
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1212;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _937 = fma(_911, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903));
        float _941 = fma(_911, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903));
        float _945 = fma(_911, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903));
        float _970 = _903 + _674;
        float _971 = _907 + _675;
        float _972 = _911 + _676;
        float _982 = fma(_972, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970)) - _937;
        float _983 = fma(_972, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970)) - _941;
        float _984 = fma(_972, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970)) - _945;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_937 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_941 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[34u].z) + ((((((_945 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1040 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1006.x + (-0.5));
        float _1042 = _1040 * (_1006.y + (-0.5));
        float _1043 = _1040 * (_1006.z + (-0.5));
        float _1050 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1013.x + (-0.5));
        float _1052 = _1050 * (_1013.y + (-0.5));
        float _1053 = _1050 * (_1013.z + (-0.5));
        float _1060 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1020.x + (-0.5));
        float _1062 = _1060 * (_1020.y + (-0.5));
        float _1063 = _1060 * (_1020.z + (-0.5));
        float _1070 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1027.x + (-0.5));
        float _1072 = _1070 * (_1027.y + (-0.5));
        float _1073 = _1070 * (_1027.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1094 = (dot(vec3(_674, _675, _676), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1104 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _4016 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1106 + 1.0))) + _1111) * _1074;
        float _1121 = _1042 * 0.5;
        float _1122 = _1052 * 0.5;
        float _1123 = _1062 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_674, _675, _676), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _4049 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1148 + 1.0))) + _1153) * _1075;
        float _1163 = _1043 * 0.5;
        float _1164 = _1053 * 0.5;
        float _1165 = _1063 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_674, _675, _676), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _4082 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1190 + 1.0))) + _1195) * _1076;
        _1212 = _1043;
        _1214 = _1042;
        _1215 = _1041;
        _1216 = _1053;
        _1217 = _1052;
        _1218 = _1051;
        _1219 = _1063;
        _1220 = _1062;
        _1221 = _1061;
        _1222 = _1076;
        _1223 = _1075;
        _1224 = _1074;
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _1213;
        _1214 = _1213;
        _1215 = _1213;
        _1216 = _1213;
        _1217 = _1213;
        _1218 = _1213;
        _1219 = _1213;
        _1220 = _1213;
        _1221 = _1213;
        _1222 = _1213;
        _1223 = _1213;
        _1224 = _1213;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1252 = fma(_911, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903));
        float _1256 = fma(_911, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903));
        float _1260 = fma(_911, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903));
        float _1283 = _903 + _674;
        float _1284 = _907 + _675;
        float _1285 = _911 + _676;
        float _1295 = fma(_1285, cbModelParam._m0[30u].z, fma(_1284, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283)) - _1252;
        float _1296 = fma(_1285, cbModelParam._m0[31u].z, fma(_1284, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283)) - _1256;
        float _1297 = fma(_1285, cbModelParam._m0[32u].z, fma(_1284, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283)) - _1260;
        float _1301 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
        float _1314 = ((_1301 * _1295) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1252 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1301 * _1296) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1256 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1301 * _1297) / cbModelParam._m0[35u].z) + ((((((_1260 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        float _1351 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1318.x + (-0.5));
        float _1353 = _1351 * (_1318.y + (-0.5));
        float _1354 = _1351 * (_1318.z + (-0.5));
        float _1361 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1325.x + (-0.5));
        float _1363 = _1361 * (_1325.y + (-0.5));
        float _1364 = _1361 * (_1325.z + (-0.5));
        float _1371 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1332.x + (-0.5));
        float _1373 = _1371 * (_1332.y + (-0.5));
        float _1374 = _1371 * (_1332.z + (-0.5));
        float _1381 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1339.x + (-0.5));
        float _1383 = _1381 * (_1339.y + (-0.5));
        float _1384 = _1381 * (_1339.z + (-0.5));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = _1352 * 0.5;
        float _1389 = _1362 * 0.5;
        float _1390 = _1372 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_674, _675, _676), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4145 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1415 + 1.0))) + _1420) * _1385;
        float _1430 = _1353 * 0.5;
        float _1431 = _1363 * 0.5;
        float _1432 = _1373 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_674, _675, _676), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4178 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1457 + 1.0))) + _1462) * _1386;
        float _1472 = _1354 * 0.5;
        float _1473 = _1364 * 0.5;
        float _1474 = _1374 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_674, _675, _676), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4211 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1499 + 1.0))) + _1504) * _1387;
        _1521 = _1354;
        _1522 = _1353;
        _1523 = _1352;
        _1524 = _1364;
        _1525 = _1363;
        _1526 = _1362;
        _1527 = _1374;
        _1528 = _1373;
        _1529 = _1372;
        _1530 = _1387;
        _1531 = _1386;
        _1532 = _1385;
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    }
    else
    {
        _1521 = _1213;
        _1522 = _1213;
        _1523 = _1213;
        _1524 = _1213;
        _1525 = _1213;
        _1526 = _1213;
        _1527 = _1213;
        _1528 = _1213;
        _1529 = _1213;
        _1530 = _1213;
        _1531 = _1213;
        _1532 = _1213;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
    }
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1225)) + _1225;
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1226)) + _1226;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1227)) + _1227;
    float _1568 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1571 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1574 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1545));
    float _1589 = _847 * 0.5;
    float _1590 = _848 * 0.5;
    float _1591 = _849 * 0.5;
    float _1592 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1595 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1598 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1632;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1605 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1212, _1216, _1219, _1222));
        float _1609 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1613 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1620 = dot(vec4(cbModelParam._m0[39u]), vec4(_1589, _1590, _1591, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1643;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1634 = dot(vec4(cbModelParam._m0[40u]), vec4(_1589, _1590, _1591, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1647 = (_1643 * cbModelParam._m0[1u].x) + (_1632 * (1.0 - cbModelParam._m0[1u].x));
    float _1657 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _677);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1657 : min(cbModelParam._m0[25u].z, _1657));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1707 = fma(_911, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903)) + cbModelParam._m0[13u].w;
        float _1711 = fma(_911, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903)) + cbModelParam._m0[14u].w;
        float _1715 = fma(_911, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903)) + cbModelParam._m0[15u].w;
        float _1718 = fma(_849, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847));
        float _1721 = fma(_849, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847));
        float _1724 = fma(_849, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847));
        float _1752;
        if (_1718 > 0.0)
        {
            _1752 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1752 = frontier_phi_14_12_ladder;
        }
        float _1925;
        if (_1721 > 0.0)
        {
            _1925 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1925 = frontier_phi_23_19_ladder;
        }
        float _2220;
        if (_1724 > 0.0)
        {
            _2220 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2220 = frontier_phi_35_30_ladder;
        }
        float _2222 = isnan(_1925) ? _1752 : (isnan(_1752) ? _1925 : min(_1752, _1925));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1718) + _1707;
        float _2228 = (_2223 * _1721) + _1711;
        float _2229 = (_2223 * _1724) + _1715;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2230;
        float _2234 = _2230 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 > _2234) || ((_2228 < _2232) || ((_2227 < _2232) || (_2227 > _2234))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1658);
            frontier_phi_13_35_ladder = _2374.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2374.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2374.x * cbModelParam._m0[1u].y;
        }
        _1740 = frontier_phi_13_35_ladder_2;
        _1742 = frontier_phi_13_35_ladder_1;
        _1744 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_847, _848, _849), _1658);
        _1740 = _1728.x * cbModelParam._m0[1u].y;
        _1742 = _1728.y * cbModelParam._m0[1u].y;
        _1744 = _1728.z * cbModelParam._m0[1u].y;
    }
    float _1748 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _677);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1748 : min(cbModelParam._m0[25u].w, _1748));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1804 = fma(_911, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903)) + cbModelParam._m0[21u].w;
        float _1808 = fma(_911, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903)) + cbModelParam._m0[22u].w;
        float _1812 = fma(_911, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903)) + cbModelParam._m0[23u].w;
        float _1815 = fma(_849, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847));
        float _1818 = fma(_849, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847));
        float _1821 = fma(_849, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847));
        float _1930;
        if (_1815 > 0.0)
        {
            _1930 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1930 = frontier_phi_25_21_ladder;
        }
        float _2247;
        if (_1818 > 0.0)
        {
            _2247 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2247 = frontier_phi_37_32_ladder;
        }
        float _2585;
        if (_1821 > 0.0)
        {
            _2585 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2585 = frontier_phi_47_44_ladder;
        }
        float _2587 = isnan(_2247) ? _1930 : (isnan(_1930) ? _2247 : min(_1930, _2247));
        float _2588 = isnan(_2585) ? _2587 : (isnan(_2587) ? _2585 : min(_2587, _2585));
        float _2592 = (_2588 * _1815) + _1804;
        float _2593 = (_2588 * _1818) + _1808;
        float _2594 = (_2588 * _1821) + _1812;
        float _2595 = _2588 * 9.9999997473787516355514526367188e-05;
        float _2596 = (-1.0) - _2595;
        float _2598 = _2595 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2594 > _2598) || ((_2594 < _2596) || ((_2593 > _2598) || ((_2593 < _2596) || ((_2592 < _2596) || (_2592 > _2598))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2594, cbModelParam._m0[17u].z, fma(_2593, cbModelParam._m0[17u].y, _2592 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2594, cbModelParam._m0[18u].z, fma(_2593, cbModelParam._m0[18u].y, _2592 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2594, cbModelParam._m0[19u].z, fma(_2593, cbModelParam._m0[19u].y, _2592 * cbModelParam._m0[19u].x))), _1749);
            frontier_phi_22_47_ladder = _2716.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2716.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2716.x * cbModelParam._m0[1u].z;
        }
        _1840 = frontier_phi_22_47_ladder_2;
        _1842 = frontier_phi_22_47_ladder_1;
        _1844 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_847, _848, _849), _1749);
        _1840 = _1824.x * cbModelParam._m0[1u].z;
        _1842 = _1824.y * cbModelParam._m0[1u].z;
        _1844 = _1824.z * cbModelParam._m0[1u].z;
    }
    float _1857 = (((_874 * _823) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1840 - _1740)) + _1740);
    float _1859 = (((_874 * _825) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1842 - _1742)) + _1742);
    float _1861 = (((_874 * _826) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1844 - _1744)) + _1744);
    float _1864 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1857 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1857 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, _1857 * cbSceneParam._m0[91u].x));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1917 = _1904 / _1916;
    float _1918 = _1908 / _1916;
    float _1919 = _1912 / _1916;
    float _2066;
    float _2067;
    float _2068;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1946 = ((uint(_1919 > cbSceneParam._m0[59u].y) + uint(_1919 > cbSceneParam._m0[59u].x)) + uint(_1919 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1947 = _1946 + 43u;
        uint _1955 = _1946 + 44u;
        uint _1963 = _1946 + 45u;
        uint _1971 = _1946 + 46u;
        float _1982 = fma(_1916, cbSceneParam._m0[_1947].w, fma(_1912, cbSceneParam._m0[_1947].z, fma(_1908, cbSceneParam._m0[_1947].y, _1904 * cbSceneParam._m0[_1947].x)));
        float _1986 = fma(_1916, cbSceneParam._m0[_1955].w, fma(_1912, cbSceneParam._m0[_1955].z, fma(_1908, cbSceneParam._m0[_1955].y, _1904 * cbSceneParam._m0[_1955].x)));
        float _1994 = fma(_1916, cbSceneParam._m0[_1971].w, fma(_1912, cbSceneParam._m0[_1971].z, fma(_1908, cbSceneParam._m0[_1971].y, _1904 * cbSceneParam._m0[_1971].x)));
        float _1999 = cbSceneParam._m0[33u].z * _1994;
        float _2001 = cbSceneParam._m0[33u].w * _1994;
        float _2004 = fma(_1916, cbSceneParam._m0[_1963].w, fma(_1912, cbSceneParam._m0[_1963].z, fma(_1908, cbSceneParam._m0[_1963].y, _1904 * cbSceneParam._m0[_1963].x))) / _1994;
        float _2052 = (cbSceneParam._m0[33u].x - sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919))) * cbSceneParam._m0[33u].y;
        float _4337 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2059 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1999 + _1982) / _1994, (_2001 + _1986) / _1994), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 + _1982) / _1994, (_1986 - _1999) / _1994), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 - _1999) / _1994, (_1986 - _2001) / _1994), _2004), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 - _2001) / _1994, (_1999 + _1986) / _1994), _2004), 0.0)).x), vec4(0.25)));
        _2066 = 1.0 - (_2059 * cbSceneParam._m0[34u].x);
        _2067 = 1.0 - (_2059 * cbSceneParam._m0[34u].y);
        _2068 = 1.0 - (_2059 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2066 = 1.0;
        _2067 = 1.0;
        _2068 = 1.0;
    }
    float _2132;
    float _2134;
    float _2136;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2120 = fma(_1916, cbSceneParam._m0[63u].w, fma(_1912, cbSceneParam._m0[63u].z, fma(_1908, cbSceneParam._m0[63u].y, _1904 * cbSceneParam._m0[63u].x)));
        float _2121 = fma(_1916, cbSceneParam._m0[60u].w, fma(_1912, cbSceneParam._m0[60u].z, fma(_1908, cbSceneParam._m0[60u].y, _1904 * cbSceneParam._m0[60u].x))) / _2120;
        float _2122 = fma(_1916, cbSceneParam._m0[61u].w, fma(_1912, cbSceneParam._m0[61u].z, fma(_1908, cbSceneParam._m0[61u].y, _1904 * cbSceneParam._m0[61u].x))) / _2120;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2121 >= cbSceneParam._m0[64u].x) && (_2122 >= cbSceneParam._m0[64u].y)) && (_2121 <= cbSceneParam._m0[64u].z)) && (_2122 <= cbSceneParam._m0[64u].w))
        {
            float _2260 = fma(_1916, cbSceneParam._m0[62u].w, fma(_1912, cbSceneParam._m0[62u].z, fma(_1908, cbSceneParam._m0[62u].y, _1904 * cbSceneParam._m0[62u].x))) / _2120;
            float _2264 = isnan(cbSceneParam._m0[41u].w) ? _2260 : (isnan(_2260) ? cbSceneParam._m0[41u].w : max(_2260, cbSceneParam._m0[41u].w));
            float _2307 = (cbSceneParam._m0[33u].x - sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919))) * cbSceneParam._m0[33u].y;
            float _4353 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
            float _2314 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2121, cbSceneParam._m0[33u].w + _2122), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2121, _2122 - cbSceneParam._m0[33u].z), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2121 - cbSceneParam._m0[33u].z, _2122 - cbSceneParam._m0[33u].w), _2264), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2121 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2122), _2264), 0.0)).x), vec4(0.25)));
            float _2318 = 1.0 - (_2314 * cbSceneParam._m0[34u].x);
            float _2319 = 1.0 - (_2314 * cbSceneParam._m0[34u].y);
            float _2320 = 1.0 - (_2314 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2320) ? _2068 : (isnan(_2068) ? _2320 : min(_2068, _2320));
            frontier_phi_34_33_ladder_1 = isnan(_2319) ? _2067 : (isnan(_2067) ? _2319 : min(_2067, _2319));
            frontier_phi_34_33_ladder_2 = isnan(_2318) ? _2066 : (isnan(_2066) ? _2318 : min(_2066, _2318));
        }
        else
        {
            frontier_phi_34_33_ladder = _2068;
            frontier_phi_34_33_ladder_1 = _2067;
            frontier_phi_34_33_ladder_2 = _2066;
        }
        _2132 = frontier_phi_34_33_ladder_2;
        _2134 = frontier_phi_34_33_ladder_1;
        _2136 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2132 = _2066;
        _2134 = _2067;
        _2136 = _2068;
    }
    uvec4 _2141 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2143 = _2141.x * 14u;
    uint _2144 = _2143 + 13u;
    float _2151 = _839 + (-1.0);
    float _2156 = (cbLight._m0[_2144].x * _2151) + 1.0;
    float _2157 = (cbLight._m0[_2144].y * _2151) + 1.0;
    float _2158 = (cbLight._m0[_2144].z * _2151) + 1.0;
    float _2159 = (cbLight._m0[_2144].w * _2151) + 1.0;
    uint _2160 = _2143 + 5u;
    float _2166 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2170 = _2143 + 4u;
    float _2179 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2183 = _2143 | 1u;
    float _2194 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_674, _675, _676));
    float _2197 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_674, _675, _676));
    float _4389 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _4400 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2202 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2204 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2211 = ((cbLight._m0[_2160].x * _2166) * _2204) + (((cbLight._m0[_2170].x * _2132) * _2179) * _2202);
    float _2212 = ((_2166 * cbLight._m0[_2160].y) * _2204) + (((cbLight._m0[_2170].y * _2134) * _2179) * _2202);
    float _2213 = ((_2166 * cbLight._m0[_2160].z) * _2204) + (((cbLight._m0[_2170].z * _2136) * _2179) * _2202);
    uvec4 _2217 = floatBitsToUint(cbLight._m0[_2143 + 12u]);
    bool _2219 = _2217.x == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2219)
    {
        _2321 = _2211;
        _2323 = _2212;
        _2325 = _2213;
    }
    else
    {
        uint _2329 = _2143 + 6u;
        float _2345 = (dot(vec3(cbLight._m0[_2143 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4411 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2348 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2321 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2211;
        _2323 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2212;
        _2325 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2213;
    }
    bool _2328 = _2217.y == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2328)
    {
        _2383 = _2321;
        _2385 = _2323;
        _2387 = _2325;
    }
    else
    {
        uint _2556 = _2143 + 7u;
        float _2572 = (dot(vec3(cbLight._m0[_2143 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2573 = _2572 * _2572;
        float _4427 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2574 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2575 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2383 = (((cbLight._m0[_2556].x * 0.3183098733425140380859375) * _2574) * _2575) + _2321;
        _2385 = (((cbLight._m0[_2556].y * 0.3183098733425140380859375) * _2574) * _2575) + _2323;
        _2387 = (((cbLight._m0[_2556].z * 0.3183098733425140380859375) * _2574) * _2575) + _2325;
    }
    uint _2390 = _2143 + 8u;
    float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _677) * 0.949999988079071044921875);
    float _2404 = _2403 * _2403;
    float _2405 = cbLight._m0[_2143].x + _753;
    float _2406 = cbLight._m0[_2143].y + _754;
    float _2407 = cbLight._m0[_2143].z + _755;
    float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
    float _2412 = _2411 * _2405;
    float _2413 = _2411 * _2406;
    float _2414 = _2411 * _2407;
    float _2415 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2143].xyz));
    float _4443 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2419 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2420 = dot(vec3(_674, _675, _676), vec3(_2412, _2413, _2414));
    float _4465 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2424 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2412, _2413, _2414));
    float _4476 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2428 = _2404 * _2404;
    float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
    float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2441 = 0.959999978542327880859375 - _820;
    float _2443 = 0.959999978542327880859375 - _821;
    float _2444 = 0.959999978542327880859375 - _822;
    float _2451 = 1.0 - _2404;
    float _2462 = (0.5 / (((_2419 * ((_2418 * _2451) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2451) + _2404) * _2418))) * _2418;
    float _4487 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2464 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
    uint _2478 = _2143 + 9u;
    float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _677) * 0.949999988079071044921875);
    float _2490 = _2489 * _2489;
    float _2491 = cbLight._m0[_2183].x + _753;
    float _2492 = cbLight._m0[_2183].y + _754;
    float _2493 = cbLight._m0[_2183].z + _755;
    float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
    float _2498 = _2497 * _2491;
    float _2499 = _2497 * _2492;
    float _2500 = _2497 * _2493;
    float _2501 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2183].xyz));
    float _4498 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2505 = dot(vec3(_674, _675, _676), vec3(_2498, _2499, _2500));
    float _4509 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2498, _2499, _2500));
    float _4520 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2490 * _2490;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2531 = 1.0 - _2490;
    float _2541 = (0.5 / (((_2419 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2531) + _2490) * _2504))) * _2504;
    float _4531 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    float _2553 = (((((_2524 * _2441) + _823) * cbLight._m0[_2478].x) * _2543) * _2166) + ((((cbLight._m0[_2390].x * _2132) * ((_2440 * _2441) + _823)) * _2464) * _2179);
    float _2554 = (((((_2524 * _2443) + _825) * cbLight._m0[_2478].y) * _2543) * _2166) + ((((cbLight._m0[_2390].y * _2134) * ((_2440 * _2443) + _825)) * _2464) * _2179);
    float _2555 = (((((_2524 * _2444) + _826) * cbLight._m0[_2478].z) * _2543) * _2166) + ((((cbLight._m0[_2390].z * _2136) * ((_2440 * _2444) + _826)) * _2464) * _2179);
    float _2611;
    float _2613;
    float _2615;
    if (_2219)
    {
        _2611 = _2553;
        _2613 = _2554;
        _2615 = _2555;
    }
    else
    {
        uint _2617 = _2143 + 2u;
        uint _2621 = _2143 + 10u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _677) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _753;
        float _2638 = cbLight._m0[_2617].y + _754;
        float _2639 = cbLight._m0[_2617].z + _755;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2617].xyz));
        float _4542 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2651 = dot(vec3(_674, _675, _676), vec3(_2644, _2645, _2646));
        float _4553 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4564 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2677 = 1.0 - _2636;
        float _2687 = (0.5 / (((_2419 * ((_2650 * _2677) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2677) + _2636) * _2650))) * _2650;
        float _4575 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2689 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2690 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2611 = (((((_2670 * _2441) + _823) * cbLight._m0[_2621].x) * _2689) * _2690) + _2553;
        _2613 = (((((_2670 * _2443) + _825) * cbLight._m0[_2621].y) * _2689) * _2690) + _2554;
        _2615 = (((((_2670 * _2444) + _826) * cbLight._m0[_2621].z) * _2689) * _2690) + _2555;
    }
    float _2721;
    float _2723;
    float _2725;
    if (_2328)
    {
        _2721 = _2611;
        _2723 = _2613;
        _2725 = _2615;
    }
    else
    {
        uint _2732 = _2143 + 3u;
        uint _2736 = _2143 + 11u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _677) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _753;
        float _2753 = cbLight._m0[_2732].y + _754;
        float _2754 = cbLight._m0[_2732].z + _755;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2732].xyz));
        float _4591 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2766 = dot(vec3(_674, _675, _676), vec3(_2759, _2760, _2761));
        float _4602 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4613 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2785 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
        float _2792 = 1.0 - _2751;
        float _2802 = (0.5 / (((_2419 * ((_2765 * _2792) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2419 * _2792) + _2751) * _2765))) * _2765;
        float _4624 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2804 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2805 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2721 = (((((_2785 * _2441) + _823) * cbLight._m0[_2736].x) * _2804) * _2805) + _2611;
        _2723 = (((((_2785 * _2443) + _825) * cbLight._m0[_2736].y) * _2804) * _2805) + _2613;
        _2725 = (((((_2785 * _2444) + _826) * cbLight._m0[_2736].z) * _2804) * _2805) + _2615;
    }
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_2141.y == 0u)
    {
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.x;
        uint _2838 = uint((float(_2826.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2827))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2827)));
        float _2848 = (log2(_1919 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2849 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        uint _2852 = uint(isnan(14.0) ? _2849 : (isnan(_2849) ? 14.0 : min(_2849, 14.0)));
        uvec4 _2857 = texelFetch(g_lightClusterGridBuffer, int(((_2852 << 2u) + (_2838 << 6u)) >> 2u));
        uint _2858 = _2857.x;
        uint _2859 = _2826.z;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((((1u << ((_2859 >> 4u) & 15u)) + 4294967295u) & _2858) == 0u) || ((_2859 & 240u) == 0u))
        {
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
        }
        else
        {
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            uint _3089 = 0u;
            uint _3098;
            bool _3099;
            for (;;)
            {
                _3098 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                _3099 = _3098 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3099)
                {
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                else
                {
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    uint _3213;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3098;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    for (;;)
                    {
                        uint _3217 = uint(findLSB(_3213)) + (_3089 << 5u);
                        uint _3214 = (_3213 + 4294967295u) & _3213;
                        uint _3219 = _3217 * 48u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3239 = (_3217 * 48u) + 4u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3258 = (_3217 * 48u) + 8u;
                        vec3 _3269 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x));
                        float _3273 = _3233.x - _1917;
                        float _3274 = _3233.y - _1918;
                        float _3275 = _3233.z - _1919;
                        float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                        float _3279 = inversesqrt(_3276);
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3283 = dot(vec3(_780, _783, _786), vec3(_3280, _3281, _3282));
                        float _3288 = 1.0 - (_3276 * _3233.w);
                        float _4650 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3290 = sqrt(_3276) * _3252.w;
                        float _3293 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3283) + _3294;
                        float _3300 = _3290 * _3290;
                        float _3304 = ((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3289) / ((_3300 * 0.699999988079071044921875) + 1.0);
                        float _3308 = (-0.0) - _1917;
                        float _3309 = (-0.0) - _1918;
                        float _3310 = (-0.0) - _1919;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3324 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _855;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3315 + _3280;
                        float _3336 = _3316 + _3281;
                        float _3337 = _3317 + _3282;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_780, _783, _786), vec3(_3315, _3316, _3317));
                        float _4666 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3349 = dot(vec3(_780, _783, _786), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4677 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3293 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3283) + _3358;
                        float _4688 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4699 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3356 * _3356) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125))) * _3289;
                        _3142 = (_3304 * _3252.x) + _3210;
                        _3143 = (_3304 * _3252.y) + _3211;
                        _3144 = (_3304 * _3252.z) + _3212;
                        _3139 = (_3384 * _3269.x) + _3207;
                        _3140 = (_3384 * _3269.y) + _3208;
                        _3141 = (_3384 * _3269.z) + _3209;
                        if (_3214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3214;
                        }
                    }
                    frontier_phi_66_pred = _3144;
                    frontier_phi_66_pred_1 = _3143;
                    frontier_phi_66_pred_2 = _3142;
                    frontier_phi_66_pred_3 = _3141;
                    frontier_phi_66_pred_4 = _3140;
                    frontier_phi_66_pred_5 = _3139;
                }
                _2949 = frontier_phi_66_pred;
                _2947 = frontier_phi_66_pred_1;
                _2945 = frontier_phi_66_pred_2;
                _2943 = frontier_phi_66_pred_3;
                _2941 = frontier_phi_66_pred_4;
                _2939 = frontier_phi_66_pred_5;
                uint _3090 = _3089 + 1u;
                if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3083 = _2939;
                    _3084 = _2941;
                    _3085 = _2943;
                    _3086 = _2945;
                    _3087 = _2947;
                    _3088 = _2949;
                    _3089 = _3090;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
        }
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.z;
        uint _2955 = (_2953 >> 8u) & 15u;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((4294967295u << _2955) & _2858) == 0u)
        {
            _3051 = _2938;
            _3053 = _2940;
            _3055 = _2942;
            _3057 = _2944;
            _3059 = _2946;
            _3061 = _2948;
        }
        else
        {
            float _3076 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
            float _3077 = _3076 * _1917;
            float _3078 = _3076 * _1918;
            float _3079 = _3076 * _1919;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2955 < ((_2953 >> 12u) & 15u))
            {
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3190 = _2938;
                float _3191 = _2940;
                float _3192 = _2942;
                float _3193 = _2944;
                float _3194 = _2946;
                float _3195 = _2948;
                uint _3196 = _2955;
                uint _3205;
                bool _3206;
                for (;;)
                {
                    _3205 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                    _3206 = _3205 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3206)
                    {
                        frontier_phi_72_pred = _3195;
                        frontier_phi_72_pred_1 = _3194;
                        frontier_phi_72_pred_2 = _3193;
                        frontier_phi_72_pred_3 = _3192;
                        frontier_phi_72_pred_4 = _3191;
                        frontier_phi_72_pred_5 = _3190;
                    }
                    else
                    {
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3402 = _3190;
                        float _3403 = _3191;
                        float _3404 = _3192;
                        float _3405 = _3193;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        uint _3408 = _3205;
                        uint _3409;
                        vec4 _3434;
                        float _3435;
                        vec4 _3450;
                        vec3 _3462;
                        vec4 _3477;
                        vec4 _3492;
                        float _3538;
                        bool _3539;
                        for (;;)
                        {
                            uint _3419 = ((_3196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3408));
                            _3409 = (_3408 + 4294967295u) & _3408;
                            uint _3421 = _3419 * 40u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3435 = _3434.w;
                            uint _3437 = (_3419 * 40u) + 4u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3419 * 40u) + 8u;
                            _3462 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x));
                            uint _3464 = (_3419 * 40u) + 16u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3419 * 40u) + 20u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3419 * 40u) + 24u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3513 = (_3419 * 40u) + 28u;
                            vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3538 = fma(_1919, _3526.z, fma(_1918, _3526.y, _3526.x * _1917)) + _3526.w;
                            _3539 = !((fma(_1919, _3507.z, fma(_1918, _3507.y, _3507.x * _1917)) + _3507.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3539)
                            {
                                float _3566 = _3434.x - _1917;
                                float _3567 = _3434.y - _1918;
                                float _3568 = _3434.z - _1919;
                                float _3569 = dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568));
                                float _3572 = inversesqrt(_3569);
                                float _3573 = _3572 * _3566;
                                float _3574 = _3572 * _3567;
                                float _3575 = _3572 * _3568;
                                float _3579 = 1.0 - (_3569 / (_3435 * _3435));
                                float _4710 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3584 = sqrt(_3569) * _3450.w;
                                float _3586 = 1.39999997615814208984375 / (_3584 + 1.39999997615814208984375);
                                float _3587 = _3586 * _3586;
                                float _3590 = ((1.0 - _3587) * dot(vec3(_3573, _3574, _3575), vec3(_780, _783, _786))) + _3587;
                                float _3593 = _3584 * _3584;
                                float _3597 = (fma(_1919, _3477.z, fma(_1918, _3477.y, _3477.x * _1917)) + _3477.w) / _3538;
                                float _3598 = (fma(_1919, _3492.z, fma(_1918, _3492.y, _3492.x * _1917)) + _3492.w) / _3538;
                                float _3602 = 1.0 - dot(vec2(_3597, _3598), vec2(_3597, _3598));
                                float _4726 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3604 = _3603 * (((isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0))) * _3580) / ((_3593 * 0.699999988079071044921875) + 1.0));
                                float _3616 = exp2(log2(1.0 / ((_3593 * 3.5) + 5.0)) * 0.25);
                                float _3617 = 1.0 - _855;
                                float _3624 = sqrt(1.0 - ((1.0 - (_3617 * _3617)) * (1.0 - (_3616 * _3616))));
                                float _3625 = _3624 * _3624;
                                float _3626 = _3625 * _3625;
                                float _3627 = _3573 - _3077;
                                float _3628 = _3574 - _3078;
                                float _3629 = _3575 - _3079;
                                float _3633 = inversesqrt(dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629)));
                                float _3637 = dot(vec3(_780, _783, _786), vec3((-0.0) - _3077, (-0.0) - _3078, (-0.0) - _3079));
                                float _4737 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3641 = dot(vec3(_780, _783, _786), vec3(_3633 * _3627, _3633 * _3628, _3633 * _3629));
                                float _4748 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3648 = ((_3644 * _3644) * (_3626 + (-1.0))) + 1.0;
                                float _3649 = _3586 * _3625;
                                float _3650 = _3649 * _3649;
                                float _3656 = ((1.0 - _3650) * dot(vec3(_780, _783, _786), vec3(_3573, _3574, _3575))) + _3650;
                                float _4759 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3658 = 1.0 - _3625;
                                float _3668 = (0.5 / (((_3657 * ((_3640 * _3658) + _3625)) + 9.9999999392252902907785028219223e-09) + (((_3657 * _3658) + _3625) * _3640))) * _3657;
                                float _4770 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3678 = (_3603 * _3580) * (((_3626 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3648 * _3648) * ((_3593 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3604 * _3450.y;
                                frontier_phi_78_pred_1 = _3604 * _3450.x;
                                frontier_phi_78_pred_2 = _3678 * _3462.z;
                                frontier_phi_78_pred_3 = _3678 * _3462.y;
                                frontier_phi_78_pred_4 = _3678 * _3462.x;
                                frontier_phi_78_pred_5 = _3604 * _3450.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3686 = frontier_phi_78_pred;
                            _3685 = frontier_phi_78_pred_1;
                            _3684 = frontier_phi_78_pred_2;
                            _3683 = frontier_phi_78_pred_3;
                            _3682 = frontier_phi_78_pred_4;
                            _3687 = frontier_phi_78_pred_5;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            if (_3409 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3409;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3394;
                        frontier_phi_72_pred_1 = _3393;
                        frontier_phi_72_pred_2 = _3392;
                        frontier_phi_72_pred_3 = _3391;
                        frontier_phi_72_pred_4 = _3390;
                        frontier_phi_72_pred_5 = _3389;
                    }
                    _3062 = frontier_phi_72_pred;
                    _3060 = frontier_phi_72_pred_1;
                    _3058 = frontier_phi_72_pred_2;
                    _3056 = frontier_phi_72_pred_3;
                    _3054 = frontier_phi_72_pred_4;
                    _3052 = frontier_phi_72_pred_5;
                    uint _3197 = _3196 + 1u;
                    if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3190 = _3052;
                        _3191 = _3054;
                        _3192 = _3056;
                        _3193 = _3058;
                        _3194 = _3060;
                        _3195 = _3062;
                        _3196 = _3197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3062;
                frontier_phi_60_61_ladder_1 = _3060;
                frontier_phi_60_61_ladder_2 = _3056;
                frontier_phi_60_61_ladder_3 = _3054;
                frontier_phi_60_61_ladder_4 = _3052;
                frontier_phi_60_61_ladder_5 = _3058;
            }
            else
            {
                frontier_phi_60_61_ladder = _2948;
                frontier_phi_60_61_ladder_1 = _2946;
                frontier_phi_60_61_ladder_2 = _2942;
                frontier_phi_60_61_ladder_3 = _2940;
                frontier_phi_60_61_ladder_4 = _2938;
                frontier_phi_60_61_ladder_5 = _2944;
            }
            _3051 = frontier_phi_60_61_ladder_4;
            _3053 = frontier_phi_60_61_ladder_3;
            _3055 = frontier_phi_60_61_ladder_2;
            _3057 = frontier_phi_60_61_ladder_5;
            _3059 = frontier_phi_60_61_ladder_1;
            _3061 = frontier_phi_60_61_ladder;
        }
        float _3066 = isnan(1.0) ? _839 : (isnan(_839) ? 1.0 : min(_839, 1.0));
        _2871 = (_3066 * _3057) + _2383;
        _2873 = (_3066 * _3059) + _2385;
        _2875 = (_3066 * _3061) + _2387;
        _2877 = ((_3051 * _823) * _3066) + _2721;
        _2879 = ((_3053 * _825) * _3066) + _2723;
        _2881 = ((_3055 * _826) * _3066) + _2725;
    }
    else
    {
        _2871 = _2383;
        _2873 = _2385;
        _2875 = _2387;
        _2877 = _2721;
        _2879 = _2723;
        _2881 = _2725;
    }
    float _4786 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4797 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4808 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    uint _2901 = _253 + 6u;
    float _2909 = _761 / cbSceneParam._m0[86u].x;
    float _2910 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2924 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2926 = _2924.x;
    float _2927 = _2924.y;
    float _2928 = _2924.z;
    float _2929 = _2924.w;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2963 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2964 = _2963 / _696;
        float _2975 = _2964 * _746;
        float _2976 = _747 * _2964;
        float _2977 = (-0.0) - _2976;
        float _2979 = _2964 * _748;
        float _2981 = (cbSceneParam._m0[77u].w * _2977) / _2963;
        float _2982 = _2981 + cbSceneParam._m0[79u].w;
        float _2983 = cbSceneParam._m0[79u].w - _2976;
        float _2989 = sqrt(((_2975 * _2975) + (_2976 * _2976)) + (_2979 * _2979));
        float _2992 = (1.0 - (cbSceneParam._m0[77u].w / _2963)) * _2989;
        float _2997 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2999 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3152;
        if (abs((_2977 - _2981) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3152 = ((((_2982 > 0.0) ? exp2(_2997 * _2982) : (2.0 - exp2(_2999 * _2982))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2992;
        }
        else
        {
            float _3112 = 1.0 / cbSceneParam._m0[80u].x;
            float _3113 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : max(_2982, _2983));
            float _3114 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : min(_2982, _2983));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            _3152 = ((abs(_2989 / _2977) * cbSceneParam._m0[80u].y) * ((((_3123 - _3124) * 2.0) - ((exp2(_2997 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)))) - exp2(_2997 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))))) * _3112)) - ((exp2(_2999 * _3123) - exp2(_2999 * _3124)) * _3112))) + (_2992 * cbSceneParam._m0[80u].z);
        }
        vec4 _3154 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, 1.0), 0.0);
        float _3163 = exp2((_3152 * (-1.44269502162933349609375)) * (1.0 - _3154.w));
        float _3164 = log2(_3163);
        float _3180 = log2(_2929);
        _3001 = (exp2(_3180 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].x)) * _3154.x) / cbSceneParam._m0[78u].x)) + _2926;
        _3003 = (exp2(_3180 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].y)) * _3154.y) / cbSceneParam._m0[78u].y)) + _2927;
        _3005 = (exp2(_3180 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].z)) * _3154.z) / cbSceneParam._m0[78u].z)) + _2928;
        _3007 = _3163 * _2929;
    }
    else
    {
        _3001 = _2926;
        _3003 = _2927;
        _3005 = _2928;
        _3007 = _2929;
    }
    float _3019 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3020 = _3019 == 3.0;
    float _3021 = log2(_3007);
    float _3028 = exp2(_3021 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2871 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _839))) + ((_2877 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1647)) * cbPerFrame._m0[3u].x));
    float _3029 = exp2(_3021 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2873 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _839))) + ((_2879 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1647)) * cbPerFrame._m0[3u].x));
    float _3030 = exp2(_3021 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2875 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _839))) + ((_2881 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1647)) * cbPerFrame._m0[3u].x));
    float _3039 = (_3019 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3039 * (_3020 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.y = _3039 * (_3020 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3003)));
    SV_Target.z = _3039 * (_3020 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.w = cbInstanceData._m0[_2901].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2901].w;
}


