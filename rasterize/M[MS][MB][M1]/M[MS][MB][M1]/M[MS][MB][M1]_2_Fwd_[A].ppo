#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _958;
float _3345;
float _3346;
float _3347;
float _3348;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2(((_243 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_243 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _319 = (_311.x * 2.0) + (-1.0);
    float _320 = (_311.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_319, _320), vec2(_319, _320));
    float _3357 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))));
    float _332 = _319 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_285.x * 2.0) + (-1.0)));
    float _333 = _320 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_285.y * 2.0) + (-1.0)));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _348 = _346.x;
    float _353 = (((_285.z - _315) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _315;
    float _358 = cbMtdParam._m0[22u].x + _311.w;
    float _361 = fma(_327, _211 * NORMAL.x, fma(_333, _218 * TANGENT.x, (_204 * _196) * _332));
    float _364 = fma(_327, _211 * NORMAL.y, fma(_333, _218 * TANGENT.y, (_204 * _197) * _332));
    float _367 = fma(_327, _211 * NORMAL.z, fma(_333, _218 * TANGENT.z, (_204 * _198) * _332));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _372 = _371 * _361;
    float _373 = _371 * _364;
    float _374 = _371 * _367;
    float _3368 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _375 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _3390 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3401 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3412 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3423 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _380 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _446 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _436);
    float _447 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _436);
    float _448 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _436);
    float _452 = inversesqrt(dot(vec3(_446, _447, _448), vec3(_446, _447, _448)));
    float _453 = _446 * _452;
    float _454 = _447 * _452;
    float _455 = _448 * _452;
    vec4 _460 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _462 = _460.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _637 = sqrt(((_446 * _446) + (_447 * _447)) + (_448 * _448));
        float _643 = (cbMatDynParam._m0[5u].x * _637) + cbMatDynParam._m0[5u].y;
        float _3434 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _648 = (cbMatDynParam._m0[5u].z * _637) + cbMatDynParam._m0[5u].w;
        float _3445 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) - _644)) + _644) < ((_462 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _495 = fma(_374, cbSceneParam._m0[5u].z, fma(_373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _372));
    float _498 = fma(_374, cbSceneParam._m0[6u].z, fma(_373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _372));
    float _501 = fma(_374, cbSceneParam._m0[7u].z, fma(_373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _372));
    uint _514 = _224 + 9u;
    uint _515 = _514 + uint(cbMatDynParam._m0[0u].w);
    float _521 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_515].x;
    float _522 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_515].y;
    float _523 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_515].z;
    float _3456 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _527 = 1.0 - _380;
    float _528 = _524 * _527;
    float _529 = _525 * _527;
    float _530 = _526 * _527;
    float _535 = (_524 + (-0.039999999105930328369140625)) * _380;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _380;
    float _537 = (_526 + (-0.039999999105930328369140625)) * _380;
    float _538 = _535 + 0.039999999105930328369140625;
    float _540 = _536 + 0.039999999105930328369140625;
    float _541 = _537 + 0.039999999105930328369140625;
    vec4 _550 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _554 = ((isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * TEXCOORD_5.w) * _550.x;
    float _555 = dot(vec3(_372, _373, _374), vec3(_453, _454, _455));
    float _558 = _555 * 2.0;
    float _562 = (_558 * _372) - _453;
    float _563 = (_558 * _373) - _454;
    float _564 = (_558 * _374) - _455;
    float _568 = abs(dot(vec3(_453, _454, _455), vec3(_372, _373, _374)));
    float _3489 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _570 = sqrt(_375);
    float _583 = exp2((_570 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_570 * 3.0));
    float _589 = (1.0 - _583) * ((_570 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _590 = _583 * _570;
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _686 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _690 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _715 = _618 + _372;
        float _716 = _622 + _373;
        float _717 = _626 + _374;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_372, _373, _374), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3537 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_372, _373, _374), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3570 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_372, _373, _374), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3603 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1000 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _1004 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _1008 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _1031 = _618 + _372;
        float _1032 = _622 + _373;
        float _1033 = _626 + _374;
        float _1043 = fma(_1033, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031)) - _1000;
        float _1044 = fma(_1033, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031)) - _1004;
        float _1045 = fma(_1033, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031)) - _1008;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1000 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1004 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[35u].z) + ((((((_1008 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1099 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1066.x + (-0.5));
        float _1101 = _1099 * (_1066.y + (-0.5));
        float _1102 = _1099 * (_1066.z + (-0.5));
        float _1109 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1073.x + (-0.5));
        float _1111 = _1109 * (_1073.y + (-0.5));
        float _1112 = _1109 * (_1073.z + (-0.5));
        float _1119 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1080.x + (-0.5));
        float _1121 = _1119 * (_1080.y + (-0.5));
        float _1122 = _1119 * (_1080.z + (-0.5));
        float _1129 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1087.x + (-0.5));
        float _1131 = _1129 * (_1087.y + (-0.5));
        float _1132 = _1129 * (_1087.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_372, _373, _374), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3666 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1163 + 1.0))) + _1168) * _1133;
        float _1178 = _1101 * 0.5;
        float _1179 = _1111 * 0.5;
        float _1180 = _1121 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_372, _373, _374), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3699 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1205 + 1.0))) + _1210) * _1134;
        float _1220 = _1102 * 0.5;
        float _1221 = _1112 * 0.5;
        float _1222 = _1122 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_372, _373, _374), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3732 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1247 + 1.0))) + _1252) * _1135;
        _1269 = _1102;
        _1270 = _1101;
        _1271 = _1100;
        _1272 = _1112;
        _1273 = _1111;
        _1274 = _1110;
        _1275 = _1122;
        _1276 = _1121;
        _1277 = _1120;
        _1278 = _1135;
        _1279 = _1134;
        _1280 = _1133;
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _958;
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = _958;
        _1280 = _958;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _970)) + _970;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _971)) + _971;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _972)) + _972;
    float _1316 = fma(_1295, cbSceneParam._m0[89u].z, fma(_1294, cbSceneParam._m0[89u].y, _1293 * cbSceneParam._m0[89u].x));
    float _1319 = fma(_1295, cbSceneParam._m0[90u].z, fma(_1294, cbSceneParam._m0[90u].y, _1293 * cbSceneParam._m0[90u].x));
    float _1322 = fma(_1295, cbSceneParam._m0[91u].z, fma(_1294, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1293));
    float _1337 = _562 * 0.5;
    float _1338 = _563 * 0.5;
    float _1339 = _564 * 0.5;
    float _1340 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1343 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1346 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1380;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1353 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_957, _961, _964, _967));
        float _1357 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_959, _962, _965, _968));
        float _1361 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_960, _963, _966, _969));
        float _1368 = dot(vec4(cbModelParam._m0[39u]), vec4(_1337, _1338, _1339, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1391;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1382 = dot(vec4(cbModelParam._m0[40u]), vec4(_1337, _1338, _1339, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1395 = (_1391 * cbModelParam._m0[1u].x) + (_1380 * (1.0 - cbModelParam._m0[1u].x));
    float _1405 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _375);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1405 : min(cbModelParam._m0[25u].z, _1405));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1455 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1459 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1463 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1466 = fma(_564, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562));
        float _1469 = fma(_564, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562));
        float _1472 = fma(_564, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562));
        float _1500;
        if (_1466 > 0.0)
        {
            _1500 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1500 = frontier_phi_17_15_ladder;
        }
        float _1706;
        if (_1469 > 0.0)
        {
            _1706 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1706 = frontier_phi_26_22_ladder;
        }
        float _1960;
        if (_1472 > 0.0)
        {
            _1960 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1960 = frontier_phi_38_33_ladder;
        }
        float _1962 = isnan(_1706) ? _1500 : (isnan(_1500) ? _1706 : min(_1500, _1706));
        float _1963 = isnan(_1960) ? _1962 : (isnan(_1962) ? _1960 : min(_1962, _1960));
        float _1967 = (_1963 * _1466) + _1455;
        float _1968 = (_1963 * _1469) + _1459;
        float _1969 = (_1963 * _1472) + _1463;
        float _1970 = _1963 * 9.9999997473787516355514526367188e-05;
        float _1972 = (-1.0) - _1970;
        float _1974 = _1970 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1969 > _1974) || ((_1969 < _1972) || ((_1968 > _1974) || ((_1968 < _1972) || ((_1967 < _1972) || (_1967 > _1974))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1969, cbModelParam._m0[9u].z, fma(_1968, cbModelParam._m0[9u].y, _1967 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1969, cbModelParam._m0[10u].z, fma(_1968, cbModelParam._m0[10u].y, _1967 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1969, cbModelParam._m0[11u].z, fma(_1968, cbModelParam._m0[11u].y, _1967 * cbModelParam._m0[11u].x))), _1406);
            frontier_phi_16_38_ladder = _2097.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2097.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2097.x * cbModelParam._m0[1u].y;
        }
        _1488 = frontier_phi_16_38_ladder_2;
        _1490 = frontier_phi_16_38_ladder_1;
        _1492 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_562, _563, _564), _1406);
        _1488 = _1476.x * cbModelParam._m0[1u].y;
        _1490 = _1476.y * cbModelParam._m0[1u].y;
        _1492 = _1476.z * cbModelParam._m0[1u].y;
    }
    float _1496 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _375);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1496 : min(cbModelParam._m0[25u].w, _1496));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_564, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562));
        float _1567 = fma(_564, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562));
        float _1570 = fma(_564, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562));
        float _1711;
        if (_1564 > 0.0)
        {
            _1711 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1711 = frontier_phi_28_24_ladder;
        }
        float _1987;
        if (_1567 > 0.0)
        {
            _1987 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1987 = frontier_phi_40_35_ladder;
        }
        float _2200;
        if (_1570 > 0.0)
        {
            _2200 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2200 = frontier_phi_49_46_ladder;
        }
        float _2202 = isnan(_1987) ? _1711 : (isnan(_1711) ? _1987 : min(_1711, _1987));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1564) + _1553;
        float _2208 = (_2203 * _1567) + _1557;
        float _2209 = (_2203 * _1570) + _1561;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1497);
            frontier_phi_25_49_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_25_49_ladder_2;
        _1591 = frontier_phi_25_49_ladder_1;
        _1593 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_562, _563, _564), _1497);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1606 = (((_589 * _538) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1589 - _1488)) + _1488);
    float _1608 = (((_589 * _540) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1591 - _1490)) + _1490);
    float _1610 = (((_589 * _541) + _590) * _554) * ((cbModelParam._m0[1u].w * (_1593 - _1492)) + _1492);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    uvec4 _1629 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1631 = _1629.x * 14u;
    uint _1632 = _1631 + 13u;
    float _1639 = _554 + (-1.0);
    float _1644 = (cbLight._m0[_1632].x * _1639) + 1.0;
    float _1645 = (cbLight._m0[_1632].y * _1639) + 1.0;
    float _1646 = (cbLight._m0[_1632].z * _1639) + 1.0;
    float _1647 = (cbLight._m0[_1632].w * _1639) + 1.0;
    uint _1648 = _1631 + 5u;
    float _1654 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
    uint _1658 = _1631 + 4u;
    float _1665 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
    uint _1669 = _1631 | 1u;
    float _1680 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_372, _373, _374));
    float _1683 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_372, _373, _374));
    float _3868 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _3879 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1688 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.3183098733425140380859375;
    float _1690 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1697 = ((cbLight._m0[_1648].x * _1654) * _1690) + ((cbLight._m0[_1658].x * _1665) * _1688);
    float _1698 = ((_1654 * cbLight._m0[_1648].y) * _1690) + ((_1665 * cbLight._m0[_1658].y) * _1688);
    float _1699 = ((_1654 * cbLight._m0[_1648].z) * _1690) + ((_1665 * cbLight._m0[_1658].z) * _1688);
    uvec4 _1703 = floatBitsToUint(cbLight._m0[_1631 + 12u]);
    bool _1705 = _1703.x == 0u;
    float _1716;
    float _1718;
    float _1720;
    if (_1705)
    {
        _1716 = _1697;
        _1718 = _1698;
        _1720 = _1699;
    }
    else
    {
        uint _1724 = _1631 + 6u;
        float _1740 = (dot(vec3(cbLight._m0[_1631 + 2u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1741 = _1740 * _1740;
        float _3890 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1743 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _1716 = (((cbLight._m0[_1724].x * 0.3183098733425140380859375) * _1742) * _1743) + _1697;
        _1718 = (((cbLight._m0[_1724].y * 0.3183098733425140380859375) * _1742) * _1743) + _1698;
        _1720 = (((cbLight._m0[_1724].z * 0.3183098733425140380859375) * _1742) * _1743) + _1699;
    }
    bool _1723 = _1703.y == 0u;
    float _1761;
    float _1763;
    float _1765;
    if (_1723)
    {
        _1761 = _1716;
        _1763 = _1718;
        _1765 = _1720;
    }
    else
    {
        uint _1931 = _1631 + 7u;
        float _1947 = (dot(vec3(cbLight._m0[_1631 + 3u].xyz), vec3(_372, _373, _374)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _3906 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1950 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
        _1761 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1716;
        _1763 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1718;
        _1765 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1720;
    }
    uint _1768 = _1631 + 8u;
    float _1781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1631].w)) * _375) * 0.949999988079071044921875);
    float _1782 = _1781 * _1781;
    float _1783 = cbLight._m0[_1631].x + _453;
    float _1784 = cbLight._m0[_1631].y + _454;
    float _1785 = cbLight._m0[_1631].z + _455;
    float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
    float _1790 = _1789 * _1783;
    float _1791 = _1789 * _1784;
    float _1792 = _1789 * _1785;
    float _1793 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1631].xyz));
    float _3922 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _1797 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1798 = dot(vec3(_372, _373, _374), vec3(_1790, _1791, _1792));
    float _3944 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_1790, _1791, _1792));
    float _3955 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1782 * _1782;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1818 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
    float _1819 = 0.959999978542327880859375 - _535;
    float _1821 = 0.959999978542327880859375 - _536;
    float _1822 = 0.959999978542327880859375 - _537;
    float _1829 = 1.0 - _1782;
    float _1840 = (0.5 / (((_1797 * ((_1796 * _1829) + _1782)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1829) + _1782) * _1796))) * _1796;
    float _3966 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    uint _1853 = _1631 + 9u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1669].w)) * _375) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1669].x + _453;
    float _1867 = cbLight._m0[_1669].y + _454;
    float _1868 = cbLight._m0[_1669].z + _455;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1669].xyz));
    float _3977 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1880 = dot(vec3(_372, _373, _374), vec3(_1873, _1874, _1875));
    float _3988 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_1873, _1874, _1875));
    float _3999 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1865 * _1865;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1899 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
    float _1906 = 1.0 - _1865;
    float _1916 = (0.5 / (((_1797 * ((_1879 * _1906) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1906) + _1865) * _1879))) * _1879;
    float _4010 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    float _1928 = (((((_1899 * _1819) + _538) * cbLight._m0[_1853].x) * _1918) * _1654) + (((((_1818 * _1819) + _538) * cbLight._m0[_1768].x) * _1842) * _1665);
    float _1929 = (((((_1899 * _1821) + _540) * cbLight._m0[_1853].y) * _1918) * _1654) + (((((_1818 * _1821) + _540) * cbLight._m0[_1768].y) * _1842) * _1665);
    float _1930 = (((((_1899 * _1822) + _541) * cbLight._m0[_1853].z) * _1918) * _1654) + (((((_1818 * _1822) + _541) * cbLight._m0[_1768].z) * _1842) * _1665);
    float _1992;
    float _1994;
    float _1996;
    if (_1705)
    {
        _1992 = _1928;
        _1994 = _1929;
        _1996 = _1930;
    }
    else
    {
        uint _1998 = _1631 + 2u;
        uint _2002 = _1631 + 10u;
        float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _375) * 0.949999988079071044921875);
        float _2017 = _2016 * _2016;
        float _2018 = cbLight._m0[_1998].x + _453;
        float _2019 = cbLight._m0[_1998].y + _454;
        float _2020 = cbLight._m0[_1998].z + _455;
        float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
        float _2025 = _2024 * _2018;
        float _2026 = _2024 * _2019;
        float _2027 = _2024 * _2020;
        float _2028 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_1998].xyz));
        float _4021 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2032 = dot(vec3(_372, _373, _374), vec3(_2025, _2026, _2027));
        float _4032 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2036 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2025, _2026, _2027));
        float _4043 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2040 = _2017 * _2017;
        float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
        float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0);
        float _2058 = 1.0 - _2017;
        float _2068 = (0.5 / (((_1797 * ((_2031 * _2058) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _2058) + _2017) * _2031))) * _2031;
        float _4054 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2070 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
        float _2071 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _1992 = (((((_2051 * _1819) + _538) * cbLight._m0[_2002].x) * _2070) * _2071) + _1928;
        _1994 = (((((_2051 * _1821) + _540) * cbLight._m0[_2002].y) * _2070) * _2071) + _1929;
        _1996 = (((((_2051 * _1822) + _541) * cbLight._m0[_2002].z) * _2070) * _2071) + _1930;
    }
    float _2106;
    float _2108;
    float _2110;
    if (_1723)
    {
        _2106 = _1992;
        _2108 = _1994;
        _2110 = _1996;
    }
    else
    {
        uint _2117 = _1631 + 3u;
        uint _2121 = _1631 + 11u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _375) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _453;
        float _2138 = cbLight._m0[_2117].y + _454;
        float _2139 = cbLight._m0[_2117].z + _455;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_372, _373, _374), vec3(cbLight._m0[_2117].xyz));
        float _4070 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2151 = dot(vec3(_372, _373, _374), vec3(_2144, _2145, _2146));
        float _4081 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4092 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0);
        float _2177 = 1.0 - _2136;
        float _2187 = (0.5 / (((_1797 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _2177) + _2136) * _2150))) * _2150;
        float _4103 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
        _2106 = (((((_2170 * _1819) + _538) * cbLight._m0[_2121].x) * _2189) * _2190) + _1992;
        _2108 = (((((_2170 * _1821) + _540) * cbLight._m0[_2121].y) * _2189) * _2190) + _1994;
        _2110 = (((((_2170 * _1822) + _541) * cbLight._m0[_2121].z) * _2189) * _2190) + _1996;
    }
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    if (_1629.y == 0u)
    {
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2265;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2265;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2265;
        uvec4 _2280 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2281 = _2280.x;
        uint _2292 = uint((float(_2280.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2281))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2281)));
        float _2302 = (log2(_2268 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2303 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        uint _2306 = uint(isnan(14.0) ? _2303 : (isnan(_2303) ? 14.0 : min(_2303, 14.0)));
        uvec4 _2311 = texelFetch(g_lightClusterGridBuffer, int(((_2306 << 2u) + (_2292 << 6u)) >> 2u));
        uint _2312 = _2311.x;
        uint _2313 = _2280.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2313 >> 4u) & 15u)) + 4294967295u) & _2312) == 0u) || ((_2313 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            uint _2572 = 0u;
            uint _2581;
            bool _2582;
            for (;;)
            {
                _2581 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                _2582 = _2581 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2582)
                {
                    frontier_phi_66_pred = _2566;
                    frontier_phi_66_pred_1 = _2571;
                    frontier_phi_66_pred_2 = _2570;
                    frontier_phi_66_pred_3 = _2569;
                    frontier_phi_66_pred_4 = _2568;
                    frontier_phi_66_pred_5 = _2567;
                }
                else
                {
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    uint _2717;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2581;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    for (;;)
                    {
                        uint _2721 = uint(findLSB(_2717)) + (_2572 << 5u);
                        uint _2718 = (_2717 + 4294967295u) & _2717;
                        uint _2723 = _2721 * 48u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2743 = (_2721 * 48u) + 4u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2762 = (_2721 * 48u) + 8u;
                        vec3 _2773 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x));
                        float _2777 = _2737.x - _2266;
                        float _2778 = _2737.y - _2267;
                        float _2779 = _2737.z - _2268;
                        float _2780 = dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779));
                        float _2783 = inversesqrt(_2780);
                        float _2784 = _2783 * _2777;
                        float _2785 = _2783 * _2778;
                        float _2786 = _2783 * _2779;
                        float _2787 = dot(vec3(_495, _498, _501), vec3(_2784, _2785, _2786));
                        float _2792 = 1.0 - (_2780 * _2737.w);
                        float _4129 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2794 = sqrt(_2780) * _2756.w;
                        float _2797 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2787) + _2798;
                        float _2804 = _2794 * _2794;
                        float _2808 = ((isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))) * _2793) / ((_2804 * 0.699999988079071044921875) + 1.0);
                        float _2812 = (-0.0) - _2266;
                        float _2813 = (-0.0) - _2267;
                        float _2814 = (-0.0) - _2268;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2819 = _2818 * _2812;
                        float _2820 = _2818 * _2813;
                        float _2821 = _2818 * _2814;
                        float _2829 = exp2(log2(1.0 / ((_2804 * 3.5) + 5.0)) * 0.25);
                        float _2830 = 1.0 - _570;
                        float _2837 = sqrt(1.0 - ((1.0 - (_2830 * _2830)) * (1.0 - (_2829 * _2829))));
                        float _2838 = _2837 * _2837;
                        float _2839 = _2838 * _2838;
                        float _2840 = _2819 + _2784;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
                        float _2850 = dot(vec3(_495, _498, _501), vec3(_2819, _2820, _2821));
                        float _4145 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2854 = dot(vec3(_495, _498, _501), vec3(_2846 * _2840, _2846 * _2841, _2846 * _2842));
                        float _4156 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2861 = ((_2857 * _2857) * (_2839 + (-1.0))) + 1.0;
                        float _2862 = _2797 * _2838;
                        float _2863 = _2862 * _2862;
                        float _2866 = ((1.0 - _2863) * _2787) + _2863;
                        float _4167 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2867 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2868 = 1.0 - _2838;
                        float _2878 = (0.5 / (((_2867 * ((_2853 * _2868) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2867 * _2868) + _2838) * _2853))) * _2867;
                        float _4178 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2889 = (((_2839 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_2861 * _2861) * ((_2804 * 2.1991131305694580078125) + 3.141590118408203125))) * _2793;
                        _2641 = (_2808 * _2756.x) + _2714;
                        _2642 = (_2808 * _2756.y) + _2715;
                        _2643 = (_2808 * _2756.z) + _2716;
                        _2638 = (_2889 * _2773.x) + _2711;
                        _2639 = (_2889 * _2773.y) + _2712;
                        _2640 = (_2889 * _2773.z) + _2713;
                        if (_2718 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2718;
                        }
                    }
                    frontier_phi_66_pred = _2638;
                    frontier_phi_66_pred_1 = _2643;
                    frontier_phi_66_pred_2 = _2642;
                    frontier_phi_66_pred_3 = _2641;
                    frontier_phi_66_pred_4 = _2640;
                    frontier_phi_66_pred_5 = _2639;
                }
                _2414 = frontier_phi_66_pred;
                _2424 = frontier_phi_66_pred_1;
                _2422 = frontier_phi_66_pred_2;
                _2420 = frontier_phi_66_pred_3;
                _2418 = frontier_phi_66_pred_4;
                _2416 = frontier_phi_66_pred_5;
                uint _2573 = _2572 + 1u;
                if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2566 = _2414;
                    _2567 = _2416;
                    _2568 = _2418;
                    _2569 = _2420;
                    _2570 = _2422;
                    _2571 = _2424;
                    _2572 = _2573;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        if (((4294967295u << _2430) & _2312) == 0u)
        {
            _2534 = _2413;
            _2536 = _2415;
            _2538 = _2417;
            _2540 = _2419;
            _2542 = _2421;
            _2544 = _2423;
        }
        else
        {
            float _2559 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
            float _2560 = _2559 * _2266;
            float _2561 = _2559 * _2267;
            float _2562 = _2559 * _2268;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2694 = _2413;
                float _2695 = _2415;
                float _2696 = _2417;
                float _2697 = _2419;
                float _2698 = _2421;
                float _2699 = _2423;
                uint _2700 = _2430;
                uint _2709;
                bool _2710;
                for (;;)
                {
                    _2709 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                    _2710 = _2709 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2710)
                    {
                        frontier_phi_77_pred = _2699;
                        frontier_phi_77_pred_1 = _2698;
                        frontier_phi_77_pred_2 = _2697;
                        frontier_phi_77_pred_3 = _2696;
                        frontier_phi_77_pred_4 = _2695;
                        frontier_phi_77_pred_5 = _2694;
                    }
                    else
                    {
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        uint _2922 = _2709;
                        uint _2923;
                        vec4 _2948;
                        float _2949;
                        vec4 _2964;
                        vec3 _2976;
                        vec4 _2992;
                        vec4 _3007;
                        float _3054;
                        bool _3055;
                        for (;;)
                        {
                            uint _2933 = ((_2700 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2922));
                            _2923 = (_2922 + 4294967295u) & _2922;
                            uint _2935 = _2933 * 40u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2949 = _2948.w;
                            uint _2951 = (_2933 * 40u) + 4u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2966 = (_2933 * 40u) + 8u;
                            _2976 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x));
                            uint _2979 = (_2933 * 40u) + 16u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2994 = (_2933 * 40u) + 20u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2933 * 40u) + 24u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3029 = (_2933 * 40u) + 28u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            _3054 = fma(_2268, _3042.z, fma(_2267, _3042.y, _3042.x * _2266)) + _3042.w;
                            _3055 = !((fma(_2268, _3023.z, fma(_2267, _3023.y, _3023.x * _2266)) + _3023.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3055)
                            {
                                float _3082 = _2948.x - _2266;
                                float _3083 = _2948.y - _2267;
                                float _3084 = _2948.z - _2268;
                                float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                                float _3088 = inversesqrt(_3085);
                                float _3089 = _3088 * _3082;
                                float _3090 = _3088 * _3083;
                                float _3091 = _3088 * _3084;
                                float _3095 = 1.0 - (_3085 / (_2949 * _2949));
                                float _4189 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3100 = sqrt(_3085) * _2964.w;
                                float _3102 = 1.39999997615814208984375 / (_3100 + 1.39999997615814208984375);
                                float _3103 = _3102 * _3102;
                                float _3106 = ((1.0 - _3103) * dot(vec3(_3089, _3090, _3091), vec3(_495, _498, _501))) + _3103;
                                float _3109 = _3100 * _3100;
                                float _3113 = (fma(_2268, _2992.z, fma(_2267, _2992.y, _2992.x * _2266)) + _2992.w) / _3054;
                                float _3114 = (fma(_2268, _3007.z, fma(_2267, _3007.y, _3007.x * _2266)) + _3007.w) / _3054;
                                float _3118 = 1.0 - dot(vec2(_3113, _3114), vec2(_3113, _3114));
                                float _4205 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3120 = _3119 * (((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3096) / ((_3109 * 0.699999988079071044921875) + 1.0));
                                float _3132 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                                float _3133 = 1.0 - _570;
                                float _3140 = sqrt(1.0 - ((1.0 - (_3133 * _3133)) * (1.0 - (_3132 * _3132))));
                                float _3141 = _3140 * _3140;
                                float _3142 = _3141 * _3141;
                                float _3143 = _3089 - _2560;
                                float _3144 = _3090 - _2561;
                                float _3145 = _3091 - _2562;
                                float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                                float _3153 = dot(vec3(_495, _498, _501), vec3((-0.0) - _2560, (-0.0) - _2561, (-0.0) - _2562));
                                float _4216 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3156 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3157 = dot(vec3(_495, _498, _501), vec3(_3149 * _3143, _3149 * _3144, _3149 * _3145));
                                float _4227 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3164 = ((_3160 * _3160) * (_3142 + (-1.0))) + 1.0;
                                float _3165 = _3102 * _3141;
                                float _3166 = _3165 * _3165;
                                float _3172 = ((1.0 - _3166) * dot(vec3(_495, _498, _501), vec3(_3089, _3090, _3091))) + _3166;
                                float _4238 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3174 = 1.0 - _3141;
                                float _3184 = (0.5 / (((_3173 * ((_3156 * _3174) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_3173 * _3174) + _3141) * _3156))) * _3173;
                                float _4249 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3194 = (_3119 * _3096) * (((_3142 * 3.1415927410125732421875) * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) / ((_3164 * _3164) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3120 * _2964.y;
                                frontier_phi_83_pred_1 = _3120 * _2964.x;
                                frontier_phi_83_pred_2 = _3194 * _2976.z;
                                frontier_phi_83_pred_3 = _3194 * _2976.y;
                                frontier_phi_83_pred_4 = _3194 * _2976.x;
                                frontier_phi_83_pred_5 = _3120 * _2964.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3202 = frontier_phi_83_pred;
                            _3201 = frontier_phi_83_pred_1;
                            _3200 = frontier_phi_83_pred_2;
                            _3199 = frontier_phi_83_pred_3;
                            _3198 = frontier_phi_83_pred_4;
                            _3203 = frontier_phi_83_pred_5;
                            _2906 = _3201 + _2919;
                            _2907 = _3202 + _2920;
                            _2908 = _3203 + _2921;
                            _2903 = _3198 + _2916;
                            _2904 = _3199 + _2917;
                            _2905 = _3200 + _2918;
                            if (_2923 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2923;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2908;
                        frontier_phi_77_pred_1 = _2907;
                        frontier_phi_77_pred_2 = _2906;
                        frontier_phi_77_pred_3 = _2905;
                        frontier_phi_77_pred_4 = _2904;
                        frontier_phi_77_pred_5 = _2903;
                    }
                    _2545 = frontier_phi_77_pred;
                    _2543 = frontier_phi_77_pred_1;
                    _2541 = frontier_phi_77_pred_2;
                    _2539 = frontier_phi_77_pred_3;
                    _2537 = frontier_phi_77_pred_4;
                    _2535 = frontier_phi_77_pred_5;
                    uint _2701 = _2700 + 1u;
                    if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2694 = _2535;
                        _2695 = _2537;
                        _2696 = _2539;
                        _2697 = _2541;
                        _2698 = _2543;
                        _2699 = _2545;
                        _2700 = _2701;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2539;
                frontier_phi_58_59_ladder_1 = _2545;
                frontier_phi_58_59_ladder_2 = _2543;
                frontier_phi_58_59_ladder_3 = _2541;
                frontier_phi_58_59_ladder_4 = _2537;
                frontier_phi_58_59_ladder_5 = _2535;
            }
            else
            {
                frontier_phi_58_59_ladder = _2417;
                frontier_phi_58_59_ladder_1 = _2423;
                frontier_phi_58_59_ladder_2 = _2421;
                frontier_phi_58_59_ladder_3 = _2419;
                frontier_phi_58_59_ladder_4 = _2415;
                frontier_phi_58_59_ladder_5 = _2413;
            }
            _2534 = frontier_phi_58_59_ladder_5;
            _2536 = frontier_phi_58_59_ladder_4;
            _2538 = frontier_phi_58_59_ladder;
            _2540 = frontier_phi_58_59_ladder_3;
            _2542 = frontier_phi_58_59_ladder_2;
            _2544 = frontier_phi_58_59_ladder_1;
        }
        float _2549 = isnan(1.0) ? _554 : (isnan(_554) ? 1.0 : min(_554, 1.0));
        _2325 = (_2549 * _2540) + _1761;
        _2327 = (_2549 * _2542) + _1763;
        _2329 = (_2549 * _2544) + _1765;
        _2331 = ((_2534 * _538) * _2549) + _2106;
        _2333 = ((_2536 * _540) * _2549) + _2108;
        _2335 = ((_2538 * _541) * _2549) + _2110;
    }
    else
    {
        _2325 = _1761;
        _2327 = _1763;
        _2329 = _1765;
        _2331 = _2106;
        _2333 = _2108;
        _2335 = _2110;
    }
    float _4265 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4276 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4287 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _2352 = ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2325 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _554))) + ((_2331 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1395)) * cbPerFrame._m0[3u].x);
    float _2353 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2327 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _554))) + ((_2333 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1395)) * cbPerFrame._m0[3u].x);
    float _2354 = ((isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2329 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _554))) + ((_2335 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1395)) * cbPerFrame._m0[3u].x);
    uint _2355 = _224 + 6u;
    float _2363 = _474 / cbSceneParam._m0[86u].x;
    float _2364 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _2439 = _2438 / _394;
        float _2450 = _2439 * _446;
        float _2451 = _447 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2454 = _2439 * _448;
        float _2456 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2457 = _2456 + cbSceneParam._m0[79u].w;
        float _2458 = cbSceneParam._m0[79u].w - _2451;
        float _2464 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2454 * _2454));
        float _2467 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2464;
        float _2472 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2474 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2651;
        if (abs((_2452 - _2456) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2651 = ((((_2457 > 0.0) ? exp2(_2472 * _2457) : (2.0 - exp2(_2474 * _2457))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2467;
        }
        else
        {
            float _2595 = 1.0 / cbSceneParam._m0[80u].x;
            float _2596 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : max(_2457, _2458));
            float _2597 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : min(_2457, _2458));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            _2651 = ((abs(_2464 / _2452) * cbSceneParam._m0[80u].y) * ((((_2606 - _2607) * 2.0) - ((exp2(_2472 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)))) - exp2(_2472 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))))) * _2595)) - ((exp2(_2474 * _2606) - exp2(_2474 * _2607)) * _2595))) + (_2467 * cbSceneParam._m0[80u].z);
        }
        vec4 _2653 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2662 = exp2((_2651 * (-1.44269502162933349609375)) * (1.0 - _2653.w));
        float _2663 = log2(_2662);
        float _2679 = log2(_2383);
        _2476 = (exp2(_2679 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].x)) * _2653.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2478 = (exp2(_2679 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].y)) * _2653.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2480 = (exp2(_2679 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].z)) * _2653.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2482 = _2662 * _2383;
    }
    else
    {
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
        _2482 = _2383;
    }
    bool _2689;
    vec4 _2492;
    vec4 _2514;
    float _2516;
    float _2520;
    float _2521;
    float _2522;
    float _2523;
    bool _2533;
    for (;;)
    {
        _2492 = cbMatDynParam._m0[0u];
        float _2494 = roundEven(_2492.y);
        bool _2495 = _2494 == 3.0;
        float _2496 = log2(_2482);
        float _2503 = exp2(_2496 * cbSceneParam._m0[78u].x) * _2352;
        float _2504 = exp2(_2496 * cbSceneParam._m0[78u].y) * _2353;
        float _2505 = exp2(_2496 * cbSceneParam._m0[78u].z) * _2354;
        float _2512 = _462 + (-0.5);
        _2514 = cbMtdParam._m0[1u];
        _2516 = _2514.y * _2512;
        float _2519 = (_2494 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2520 = _2519 * (_2495 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2476)));
        _2521 = _2519 * (_2495 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2478)));
        _2522 = _2519 * (_2495 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2480)));
        _2523 = _2512 * 0.999000012874603271484375;
        _2533 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2533)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2523) < 0.5)
            {
                _2689 = true;
                break;
            }
        }
        uint _2630 = _514 + uint(_2492.w);
        if ((cbInstanceData._m0[_2630].w < 1.0) && ((cbInstanceData._m0[_2630].w + _2523) < 0.5))
        {
            _2689 = true;
            break;
        }
        if ((_2516 + 1.0) < _2514.x)
        {
            _2689 = true;
            break;
        }
        _2689 = false;
        break;
    }
    float _2894;
    if (_2689)
    {
        discard_state = true;
        _2894 = 0.0;
    }
    else
    {
        _2894 = cbInstanceData._m0[_2355].w;
    }
    SV_Target.x = _2520;
    SV_Target.y = _2521;
    SV_Target.z = _2522;
    SV_Target.w = _2894;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2355].w;
    discard_exit();
}


