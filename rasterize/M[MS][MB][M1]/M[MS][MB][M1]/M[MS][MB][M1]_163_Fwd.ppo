#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1401;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3725 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _394) + _490;
    float _502 = ((((_469.x - _488) * _394) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _394) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3736 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _541 = (_502 + ((((_442.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_529.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _542 = (_503 + ((((_442.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_529.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _545 = fma(_509, _245, fma(_542, _252, _541 * _238));
    float _548 = fma(_509, _246, fma(_542, _253, _541 * _239));
    float _551 = fma(_509, _247, fma(_542, _254, _541 * _240));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _589 = ((_584 - _585) * cbMtdParam._m0[24u].z) + _585;
    float _591 = (cbMtdParam._m0[19u].x + dot(vec4(_555 * _545, _555 * _548, _555 * _551, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_589 * cbMtdParam._m0[21u].z);
    float _3747 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _594 = (-0.0) - cbMtdParam._m0[24u].x;
    float _596 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
    float _604 = _592 - ((_592 * TEXCOORD_8.x) * _597);
    float _605 = _592 - ((_592 * TEXCOORD_8.y) * _597);
    float _606 = _592 - ((_592 * TEXCOORD_8.z) * _597);
    float _613 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _617 = ((isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : min(_613, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _625 = (_617 - (((_589 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _617))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3778 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _630 = ((_604 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) * _626) + _401;
    float _631 = ((_605 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) * _626) + _402;
    float _632 = ((_606 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) * _626) + _403;
    vec4 _644 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _674 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_646 - _647) * cbMtdParam._m0[24u].w) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3789 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _683 = ((((cbMtdParam._m0[10u].x - _630) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _675) + _630;
    float _684 = ((((cbMtdParam._m0[10u].y - _631) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _675) + _631;
    float _685 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _632)) * _675) + _632;
    vec4 _711 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _713 = _711.x;
    float _731 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _713) * _394) + _713;
    float _735 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _731) * cbMtdParam._m0[19u].z) + _731;
    float _738 = _735 - ((_626 * _604) * _735);
    float _740 = _738 - (_738 * _675);
    float _745 = (((_442.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    float _749 = ((_529.z - _745) * cbMtdParam._m0[19u].w) + _745;
    vec4 _763 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _770 = (_763.x * 2.0) + (-1.0);
    float _771 = (_763.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3800 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _781 = (((_763.z - _749) * _604) * _626) + _749;
    float _784 = ((cbMtdParam._m0[23u].y - _781) * _675) + _781;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _809 = (_803.x * 2.0) + (-1.0);
    float _810 = (_803.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3811 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _831 = (((cbMtdParam._m0[21u].x * _541) + ((_770 - _541) * _604)) * _626) + _541;
    float _832 = (((cbMtdParam._m0[21u].x * _542) + ((_771 - _542) * _605)) * _626) + _542;
    float _833 = (((sqrt(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) - _509) * _606) * _626) + _509;
    float _844 = (((_809 - _831) + (_831 * cbMtdParam._m0[22u].z)) * _675) + _831;
    float _845 = (((_810 - _832) + (_832 * cbMtdParam._m0[22u].z)) * _675) + _832;
    float _846 = ((sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) - _833) * _675) + _833;
    float _848 = cbMtdParam._m0[22u].x + _529.w;
    float _851 = fma(_846, _245, fma(_845, _252, _844 * _238));
    float _854 = fma(_846, _246, fma(_845, _253, _844 * _239));
    float _857 = fma(_846, _247, fma(_845, _254, _844 * _240));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    float _862 = _861 * _851;
    float _863 = _861 * _854;
    float _864 = _861 * _857;
    float _3822 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _865 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _3844 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3855 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3866 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3877 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _870 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    float _949 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _950 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _968 = fma(_864, cbSceneParam._m0[5u].z, fma(_863, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _862));
    float _971 = fma(_864, cbSceneParam._m0[6u].z, fma(_863, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _862));
    float _974 = fma(_864, cbSceneParam._m0[7u].z, fma(_863, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _862));
    uint _988 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _994 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_988].x;
    float _995 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_988].y;
    float _996 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_988].z;
    float _3888 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1000 = 1.0 - _870;
    float _1001 = _997 * _1000;
    float _1002 = _998 * _1000;
    float _1003 = _999 * _1000;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _870;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _870;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _870;
    float _1011 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    vec4 _1023 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _949, cbSceneParam._m0[86u].y * _950));
    float _1027 = ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * TEXCOORD_5.w) * _1023.x;
    float _1028 = dot(vec3(_862, _863, _864), vec3(_941, _942, _943));
    float _1031 = _1028 * 2.0;
    float _1035 = (_1031 * _862) - _941;
    float _1036 = (_1031 * _863) - _942;
    float _1037 = (_1031 * _864) - _943;
    float _1041 = abs(dot(vec3(_941, _942, _943), vec3(_862, _863, _864)));
    float _3921 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1043 = sqrt(_865);
    float _1056 = exp2((_1043 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1043 * 3.0));
    float _1062 = (1.0 - _1056) * ((_1043 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1063 = _1056 * _1043;
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1099, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091));
        float _1129 = fma(_1099, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091));
        float _1133 = fma(_1099, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091));
        float _1158 = _1091 + _862;
        float _1159 = _1095 + _863;
        float _1160 = _1099 + _864;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_862, _863, _864), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3969 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_862, _863, _864), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4002 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_862, _863, _864), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4035 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1099, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091));
        float _1444 = fma(_1099, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091));
        float _1448 = fma(_1099, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091));
        float _1471 = _1091 + _862;
        float _1472 = _1095 + _863;
        float _1473 = _1099 + _864;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_862, _863, _864), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4098 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_862, _863, _864), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4131 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_862, _863, _864), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4164 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1401;
        _1710 = _1401;
        _1711 = _1401;
        _1712 = _1401;
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1413)) + _1413;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1414)) + _1414;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1415)) + _1415;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1035 * 0.5;
    float _1778 = _1036 * 0.5;
    float _1779 = _1037 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _865);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1099, cbModelParam._m0[13u].z, fma(_1095, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1099, cbModelParam._m0[14u].z, fma(_1095, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1099, cbModelParam._m0[15u].z, fma(_1095, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1037, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035));
        float _1907 = fma(_1037, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035));
        float _1910 = fma(_1037, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1938 = frontier_phi_14_12_ladder;
        }
        float _2140;
        if (_1907 > 0.0)
        {
            _2140 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2140 = frontier_phi_23_19_ladder;
        }
        float _2394;
        if (_1910 > 0.0)
        {
            _2394 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2394 = frontier_phi_35_30_ladder;
        }
        float _2396 = isnan(_2140) ? _1938 : (isnan(_1938) ? _2140 : min(_1938, _2140));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1904) + _1893;
        float _2402 = (_2397 * _1907) + _1897;
        float _2403 = (_2397 * _1910) + _1901;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2404;
        float _2408 = _2404 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 > _2408) || ((_2402 < _2406) || ((_2401 < _2406) || (_2401 > _2408))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2403, cbModelParam._m0[9u].z, fma(_2402, cbModelParam._m0[9u].y, _2401 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2403, cbModelParam._m0[10u].z, fma(_2402, cbModelParam._m0[10u].y, _2401 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2403, cbModelParam._m0[11u].z, fma(_2402, cbModelParam._m0[11u].y, _2401 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_13_35_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_13_35_ladder_2;
        _1928 = frontier_phi_13_35_ladder_1;
        _1930 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1035, _1036, _1037), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _865);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1988 = fma(_1099, cbModelParam._m0[21u].z, fma(_1095, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091)) + cbModelParam._m0[21u].w;
        float _1992 = fma(_1099, cbModelParam._m0[22u].z, fma(_1095, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091)) + cbModelParam._m0[22u].w;
        float _1996 = fma(_1099, cbModelParam._m0[23u].z, fma(_1095, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091)) + cbModelParam._m0[23u].w;
        float _1999 = fma(_1037, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035));
        float _2002 = fma(_1037, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035));
        float _2005 = fma(_1037, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035));
        float _2145;
        if (_1999 > 0.0)
        {
            _2145 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2145 = frontier_phi_25_21_ladder;
        }
        float _2421;
        if (_2002 > 0.0)
        {
            _2421 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2421 = frontier_phi_37_32_ladder;
        }
        float _2634;
        if (_2005 > 0.0)
        {
            _2634 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2634 = frontier_phi_46_43_ladder;
        }
        float _2636 = isnan(_2421) ? _2145 : (isnan(_2145) ? _2421 : min(_2145, _2421));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _1999) + _1988;
        float _2642 = (_2637 * _2002) + _1992;
        float _2643 = (_2637 * _2005) + _1996;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2645 = (-1.0) - _2644;
        float _2647 = _2644 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2643 > _2647) || ((_2643 < _2645) || ((_2642 > _2647) || ((_2642 < _2645) || ((_2641 < _2645) || (_2641 > _2647))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2643, cbModelParam._m0[17u].z, fma(_2642, cbModelParam._m0[17u].y, _2641 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2643, cbModelParam._m0[18u].z, fma(_2642, cbModelParam._m0[18u].y, _2641 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2643, cbModelParam._m0[19u].z, fma(_2642, cbModelParam._m0[19u].y, _2641 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_22_46_ladder = _2842.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2842.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2842.x * cbModelParam._m0[1u].z;
        }
        _2024 = frontier_phi_22_46_ladder_2;
        _2026 = frontier_phi_22_46_ladder_1;
        _2028 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1035, _1036, _1037), _1935);
        _2024 = _2008.x * cbModelParam._m0[1u].z;
        _2026 = _2008.y * cbModelParam._m0[1u].z;
        _2028 = _2008.z * cbModelParam._m0[1u].z;
    }
    float _2041 = (((_1062 * _1011) + _1063) * _1027) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2043 = (((_1062 * _1013) + _1063) * _1027) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1062 * _1014) + _1063) * _1027) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2048 = fma(_2045, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2041 * cbSceneParam._m0[89u].x));
    float _2051 = fma(_2045, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2041 * cbSceneParam._m0[90u].x));
    float _2054 = fma(_2045, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2041 * cbSceneParam._m0[91u].x));
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _1027 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2099 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2103 = _2066 | 1u;
    float _2114 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_862, _863, _864));
    float _2117 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_862, _863, _864));
    float _4300 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _4311 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2122 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2124 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2131 = ((cbLight._m0[_2083].x * _2089) * _2124) + ((cbLight._m0[_2093].x * _2099) * _2122);
    float _2132 = ((_2089 * cbLight._m0[_2083].y) * _2124) + ((_2099 * cbLight._m0[_2093].y) * _2122);
    float _2133 = ((_2089 * cbLight._m0[_2083].z) * _2124) + ((_2099 * cbLight._m0[_2093].z) * _2122);
    uvec4 _2137 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2139 = _2137.x == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2139)
    {
        _2150 = _2131;
        _2152 = _2132;
        _2154 = _2133;
    }
    else
    {
        uint _2158 = _2066 + 6u;
        float _2174 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2175 = _2174 * _2174;
        float _4322 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2177 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2150 = (((cbLight._m0[_2158].x * 0.3183098733425140380859375) * _2176) * _2177) + _2131;
        _2152 = (((cbLight._m0[_2158].y * 0.3183098733425140380859375) * _2176) * _2177) + _2132;
        _2154 = (((cbLight._m0[_2158].z * 0.3183098733425140380859375) * _2176) * _2177) + _2133;
    }
    bool _2157 = _2137.y == 0u;
    float _2195;
    float _2197;
    float _2199;
    if (_2157)
    {
        _2195 = _2150;
        _2197 = _2152;
        _2199 = _2154;
    }
    else
    {
        uint _2365 = _2066 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4338 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2384 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2195 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2150;
        _2197 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2152;
        _2199 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2154;
    }
    uint _2202 = _2066 + 8u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _865) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2066].x + _941;
    float _2218 = cbLight._m0[_2066].y + _942;
    float _2219 = cbLight._m0[_2066].z + _943;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2066].xyz));
    float _4354 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _2231 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2232 = dot(vec3(_862, _863, _864), vec3(_2224, _2225, _2226));
    float _4376 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2224, _2225, _2226));
    float _4387 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2216 * _2216;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
    float _2253 = 0.959999978542327880859375 - _1008;
    float _2255 = 0.959999978542327880859375 - _1009;
    float _2256 = 0.959999978542327880859375 - _1010;
    float _2263 = 1.0 - _2216;
    float _2274 = (0.5 / (((_2231 * ((_2230 * _2263) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2263) + _2216) * _2230))) * _2230;
    float _4398 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2276 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    uint _2287 = _2066 + 9u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _865) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2103].x + _941;
    float _2301 = cbLight._m0[_2103].y + _942;
    float _2302 = cbLight._m0[_2103].z + _943;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2103].xyz));
    float _4409 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2314 = dot(vec3(_862, _863, _864), vec3(_2307, _2308, _2309));
    float _4420 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2307, _2308, _2309));
    float _4431 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2299 * _2299;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0);
    float _2340 = 1.0 - _2299;
    float _2350 = (0.5 / (((_2231 * ((_2313 * _2340) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2340) + _2299) * _2313))) * _2313;
    float _4442 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    float _2362 = (((((_2333 * _2253) + _1011) * cbLight._m0[_2287].x) * _2352) * _2089) + (((((_2252 * _2253) + _1011) * cbLight._m0[_2202].x) * _2276) * _2099);
    float _2363 = (((((_2333 * _2255) + _1013) * cbLight._m0[_2287].y) * _2352) * _2089) + (((((_2252 * _2255) + _1013) * cbLight._m0[_2202].y) * _2276) * _2099);
    float _2364 = (((((_2333 * _2256) + _1014) * cbLight._m0[_2287].z) * _2352) * _2089) + (((((_2252 * _2256) + _1014) * cbLight._m0[_2202].z) * _2276) * _2099);
    float _2426;
    float _2428;
    float _2430;
    if (_2139)
    {
        _2426 = _2362;
        _2428 = _2363;
        _2430 = _2364;
    }
    else
    {
        uint _2432 = _2066 + 2u;
        uint _2436 = _2066 + 10u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _865) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _941;
        float _2453 = cbLight._m0[_2432].y + _942;
        float _2454 = cbLight._m0[_2432].z + _943;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2432].xyz));
        float _4453 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2466 = dot(vec3(_862, _863, _864), vec3(_2459, _2460, _2461));
        float _4464 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4475 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
        float _2492 = 1.0 - _2451;
        float _2502 = (0.5 / (((_2231 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2492) + _2451) * _2465))) * _2465;
        float _4486 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2426 = (((((_2485 * _2253) + _1011) * cbLight._m0[_2436].x) * _2504) * _2505) + _2362;
        _2428 = (((((_2485 * _2255) + _1013) * cbLight._m0[_2436].y) * _2504) * _2505) + _2363;
        _2430 = (((((_2485 * _2256) + _1014) * cbLight._m0[_2436].z) * _2504) * _2505) + _2364;
    }
    float _2540;
    float _2542;
    float _2544;
    if (_2157)
    {
        _2540 = _2426;
        _2542 = _2428;
        _2544 = _2430;
    }
    else
    {
        uint _2551 = _2066 + 3u;
        uint _2555 = _2066 + 11u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _865) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _941;
        float _2572 = cbLight._m0[_2551].y + _942;
        float _2573 = cbLight._m0[_2551].z + _943;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2551].xyz));
        float _4502 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2585 = dot(vec3(_862, _863, _864), vec3(_2578, _2579, _2580));
        float _4513 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4524 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
        float _2611 = 1.0 - _2570;
        float _2621 = (0.5 / (((_2231 * ((_2584 * _2611) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2231 * _2611) + _2570) * _2584))) * _2584;
        float _4535 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2623 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2624 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2540 = (((((_2604 * _2253) + _1011) * cbLight._m0[_2555].x) * _2623) * _2624) + _2426;
        _2542 = (((((_2604 * _2255) + _1013) * cbLight._m0[_2555].y) * _2623) * _2624) + _2428;
        _2544 = (((((_2604 * _2256) + _1014) * cbLight._m0[_2555].z) * _2623) * _2624) + _2430;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2064.y == 0u)
    {
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2699;
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2699;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2699;
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _950) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _949) / _2715)));
        float _2736 = (log2(_2702 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            uint _2997 = 0u;
            uint _3006;
            bool _3007;
            for (;;)
            {
                _3006 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                _3007 = _3006 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3007)
                {
                    frontier_phi_61_pred = _2991;
                    frontier_phi_61_pred_1 = _2996;
                    frontier_phi_61_pred_2 = _2995;
                    frontier_phi_61_pred_3 = _2994;
                    frontier_phi_61_pred_4 = _2993;
                    frontier_phi_61_pred_5 = _2992;
                }
                else
                {
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    uint _3121;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _2993;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _3006;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    for (;;)
                    {
                        uint _3125 = uint(findLSB(_3121)) + (_2997 << 5u);
                        uint _3122 = (_3121 + 4294967295u) & _3121;
                        uint _3127 = _3125 * 48u;
                        vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3147 = (_3125 * 48u) + 4u;
                        vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3166 = (_3125 * 48u) + 8u;
                        vec3 _3177 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3166)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3166 + 2u)).x));
                        float _3181 = _3141.x - _2700;
                        float _3182 = _3141.y - _2701;
                        float _3183 = _3141.z - _2702;
                        float _3184 = dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183));
                        float _3187 = inversesqrt(_3184);
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3191 = dot(vec3(_968, _971, _974), vec3(_3188, _3189, _3190));
                        float _3196 = 1.0 - (_3184 * _3141.w);
                        float _4561 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3197 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3198 = sqrt(_3184) * _3160.w;
                        float _3201 = 1.39999997615814208984375 / (_3198 + 1.39999997615814208984375);
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3191) + _3202;
                        float _3208 = _3198 * _3198;
                        float _3212 = ((isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))) * _3197) / ((_3208 * 0.699999988079071044921875) + 1.0);
                        float _3216 = (-0.0) - _2700;
                        float _3217 = (-0.0) - _2701;
                        float _3218 = (-0.0) - _2702;
                        float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                        float _3223 = _3222 * _3216;
                        float _3224 = _3222 * _3217;
                        float _3225 = _3222 * _3218;
                        float _3233 = exp2(log2(1.0 / ((_3208 * 3.5) + 5.0)) * 0.25);
                        float _3234 = 1.0 - _1043;
                        float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                        float _3242 = _3241 * _3241;
                        float _3243 = _3242 * _3242;
                        float _3244 = _3223 + _3188;
                        float _3245 = _3224 + _3189;
                        float _3246 = _3225 + _3190;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3254 = dot(vec3(_968, _971, _974), vec3(_3223, _3224, _3225));
                        float _4577 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3258 = dot(vec3(_968, _971, _974), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                        float _4588 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3261 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                        float _3266 = _3201 * _3242;
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3191) + _3267;
                        float _4599 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3272 = 1.0 - _3242;
                        float _3282 = (0.5 / (((_3271 * ((_3257 * _3272) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3271 * _3272) + _3242) * _3257))) * _3271;
                        float _4610 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3293 = (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3265 * _3265) * ((_3208 * 2.1991131305694580078125) + 3.141590118408203125))) * _3197;
                        _3050 = (_3212 * _3160.x) + _3118;
                        _3051 = (_3212 * _3160.y) + _3119;
                        _3052 = (_3212 * _3160.z) + _3120;
                        _3047 = (_3293 * _3177.x) + _3115;
                        _3048 = (_3293 * _3177.y) + _3116;
                        _3049 = (_3293 * _3177.z) + _3117;
                        if (_3122 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3049;
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3122;
                        }
                    }
                    frontier_phi_61_pred = _3047;
                    frontier_phi_61_pred_1 = _3052;
                    frontier_phi_61_pred_2 = _3051;
                    frontier_phi_61_pred_3 = _3050;
                    frontier_phi_61_pred_4 = _3049;
                    frontier_phi_61_pred_5 = _3048;
                }
                _2848 = frontier_phi_61_pred;
                _2858 = frontier_phi_61_pred_1;
                _2856 = frontier_phi_61_pred_2;
                _2854 = frontier_phi_61_pred_3;
                _2852 = frontier_phi_61_pred_4;
                _2850 = frontier_phi_61_pred_5;
                uint _2998 = _2997 + 1u;
                if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2991 = _2848;
                    _2992 = _2850;
                    _2993 = _2852;
                    _2994 = _2854;
                    _2995 = _2856;
                    _2996 = _2858;
                    _2997 = _2998;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((4294967295u << _2864) & _2746) == 0u)
        {
            _2959 = _2847;
            _2961 = _2849;
            _2963 = _2851;
            _2965 = _2853;
            _2967 = _2855;
            _2969 = _2857;
        }
        else
        {
            float _2984 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
            float _2985 = _2984 * _2700;
            float _2986 = _2984 * _2701;
            float _2987 = _2984 * _2702;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _3098 = _2847;
                float _3099 = _2849;
                float _3100 = _2851;
                float _3101 = _2853;
                float _3102 = _2855;
                float _3103 = _2857;
                uint _3104 = _2864;
                uint _3113;
                bool _3114;
                for (;;)
                {
                    _3113 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                    _3114 = _3113 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3114)
                    {
                        frontier_phi_67_pred = _3101;
                        frontier_phi_67_pred_1 = _3102;
                        frontier_phi_67_pred_2 = _3103;
                        frontier_phi_67_pred_3 = _3100;
                        frontier_phi_67_pred_4 = _3099;
                        frontier_phi_67_pred_5 = _3098;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3311 = _3098;
                        float _3312 = _3099;
                        float _3313 = _3100;
                        float _3314 = _3101;
                        float _3315 = _3102;
                        float _3316 = _3103;
                        uint _3317 = _3113;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3386;
                        vec4 _3401;
                        float _3447;
                        bool _3448;
                        for (;;)
                        {
                            uint _3328 = ((_3104 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3373 = (_3328 * 40u) + 16u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3328 * 40u) + 20u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3328 * 40u) + 24u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3422 = (_3328 * 40u) + 28u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3447 = fma(_2702, _3435.z, fma(_2701, _3435.y, _3435.x * _2700)) + _3435.w;
                            _3448 = !((fma(_2702, _3416.z, fma(_2701, _3416.y, _3416.x * _2700)) + _3416.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3448)
                            {
                                float _3475 = _3343.x - _2700;
                                float _3476 = _3343.y - _2701;
                                float _3477 = _3343.z - _2702;
                                float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                                float _3481 = inversesqrt(_3478);
                                float _3482 = _3481 * _3475;
                                float _3483 = _3481 * _3476;
                                float _3484 = _3481 * _3477;
                                float _3488 = 1.0 - (_3478 / (_3344 * _3344));
                                float _4621 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3493 = sqrt(_3478) * _3359.w;
                                float _3495 = 1.39999997615814208984375 / (_3493 + 1.39999997615814208984375);
                                float _3496 = _3495 * _3495;
                                float _3499 = ((1.0 - _3496) * dot(vec3(_3482, _3483, _3484), vec3(_968, _971, _974))) + _3496;
                                float _3502 = _3493 * _3493;
                                float _3506 = (fma(_2702, _3386.z, fma(_2701, _3386.y, _3386.x * _2700)) + _3386.w) / _3447;
                                float _3507 = (fma(_2702, _3401.z, fma(_2701, _3401.y, _3401.x * _2700)) + _3401.w) / _3447;
                                float _3511 = 1.0 - dot(vec2(_3506, _3507), vec2(_3506, _3507));
                                float _4637 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3513 = _3512 * (((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3489) / ((_3502 * 0.699999988079071044921875) + 1.0));
                                float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                                float _3526 = 1.0 - _1043;
                                float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                                float _3534 = _3533 * _3533;
                                float _3535 = _3534 * _3534;
                                float _3536 = _3482 - _2985;
                                float _3537 = _3483 - _2986;
                                float _3538 = _3484 - _2987;
                                float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                                float _3546 = dot(vec3(_968, _971, _974), vec3((-0.0) - _2985, (-0.0) - _2986, (-0.0) - _2987));
                                float _4648 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3550 = dot(vec3(_968, _971, _974), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                                float _4659 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                                float _3558 = _3495 * _3534;
                                float _3559 = _3558 * _3558;
                                float _3565 = ((1.0 - _3559) * dot(vec3(_968, _971, _974), vec3(_3482, _3483, _3484))) + _3559;
                                float _4670 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3567 = 1.0 - _3534;
                                float _3577 = (0.5 / (((_3566 * ((_3549 * _3567) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3534) * _3549))) * _3566;
                                float _4681 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3587 = (_3512 * _3489) * (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3587 * _3371.x;
                                frontier_phi_73_pred_1 = _3587 * _3371.y;
                                frontier_phi_73_pred_2 = _3513 * _3359.z;
                                frontier_phi_73_pred_3 = _3513 * _3359.y;
                                frontier_phi_73_pred_4 = _3513 * _3359.x;
                                frontier_phi_73_pred_5 = _3587 * _3371.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3591 = frontier_phi_73_pred;
                            _3592 = frontier_phi_73_pred_1;
                            _3596 = frontier_phi_73_pred_2;
                            _3595 = frontier_phi_73_pred_3;
                            _3594 = frontier_phi_73_pred_4;
                            _3593 = frontier_phi_73_pred_5;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3301;
                        frontier_phi_67_pred_1 = _3302;
                        frontier_phi_67_pred_2 = _3303;
                        frontier_phi_67_pred_3 = _3300;
                        frontier_phi_67_pred_4 = _3299;
                        frontier_phi_67_pred_5 = _3298;
                    }
                    _2966 = frontier_phi_67_pred;
                    _2968 = frontier_phi_67_pred_1;
                    _2970 = frontier_phi_67_pred_2;
                    _2964 = frontier_phi_67_pred_3;
                    _2962 = frontier_phi_67_pred_4;
                    _2960 = frontier_phi_67_pred_5;
                    uint _3105 = _3104 + 1u;
                    if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3098 = _2960;
                        _3099 = _2962;
                        _3100 = _2964;
                        _3101 = _2966;
                        _3102 = _2968;
                        _3103 = _2970;
                        _3104 = _3105;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2968;
                frontier_phi_55_56_ladder_1 = _2970;
                frontier_phi_55_56_ladder_2 = _2966;
                frontier_phi_55_56_ladder_3 = _2964;
                frontier_phi_55_56_ladder_4 = _2962;
                frontier_phi_55_56_ladder_5 = _2960;
            }
            else
            {
                frontier_phi_55_56_ladder = _2855;
                frontier_phi_55_56_ladder_1 = _2857;
                frontier_phi_55_56_ladder_2 = _2853;
                frontier_phi_55_56_ladder_3 = _2851;
                frontier_phi_55_56_ladder_4 = _2849;
                frontier_phi_55_56_ladder_5 = _2847;
            }
            _2959 = frontier_phi_55_56_ladder_5;
            _2961 = frontier_phi_55_56_ladder_4;
            _2963 = frontier_phi_55_56_ladder_3;
            _2965 = frontier_phi_55_56_ladder_2;
            _2967 = frontier_phi_55_56_ladder;
            _2969 = frontier_phi_55_56_ladder_1;
        }
        float _2974 = isnan(1.0) ? _1027 : (isnan(_1027) ? 1.0 : min(_1027, 1.0));
        _2759 = (_2974 * _2965) + _2195;
        _2761 = (_2974 * _2967) + _2197;
        _2763 = (_2974 * _2969) + _2199;
        _2765 = ((_2959 * _1011) * _2974) + _2540;
        _2767 = ((_2961 * _1013) * _2974) + _2542;
        _2769 = ((_2963 * _1014) * _2974) + _2544;
    }
    else
    {
        _2759 = _2195;
        _2761 = _2197;
        _2763 = _2199;
        _2765 = _2540;
        _2767 = _2542;
        _2769 = _2544;
    }
    float _4697 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4708 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4719 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    uint _2789 = _257 + 6u;
    float _2797 = _949 / cbSceneParam._m0[86u].x;
    float _2798 = _950 / cbSceneParam._m0[86u].y;
    vec4 _2812 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2814 = _2812.x;
    float _2815 = _2812.y;
    float _2816 = _2812.z;
    float _2817 = _2812.w;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _2873 = _2872 / _884;
        float _2884 = _2873 * _934;
        float _2885 = _935 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2887 = _2873 * _936;
        float _2889 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2890 = _2889 + cbSceneParam._m0[79u].w;
        float _2891 = cbSceneParam._m0[79u].w - _2885;
        float _2897 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2887 * _2887));
        float _2900 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2897;
        float _2905 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2907 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3060;
        if (abs((_2886 - _2889) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3060 = ((((_2890 > 0.0) ? exp2(_2905 * _2890) : (2.0 - exp2(_2907 * _2890))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2900;
        }
        else
        {
            float _3020 = 1.0 / cbSceneParam._m0[80u].x;
            float _3021 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : max(_2890, _2891));
            float _3022 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : min(_2890, _2891));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            _3060 = ((abs(_2897 / _2886) * cbSceneParam._m0[80u].y) * ((((_3031 - _3032) * 2.0) - ((exp2(_2905 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0)))) - exp2(_2905 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))))) * _3020)) - ((exp2(_2907 * _3031) - exp2(_2907 * _3032)) * _3020))) + (_2900 * cbSceneParam._m0[80u].z);
        }
        vec4 _3062 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, 1.0), 0.0);
        float _3071 = exp2((_3060 * (-1.44269502162933349609375)) * (1.0 - _3062.w));
        float _3072 = log2(_3071);
        float _3088 = log2(_2817);
        _2909 = (exp2(_3088 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].x)) * _3062.x) / cbSceneParam._m0[78u].x)) + _2814;
        _2911 = (exp2(_3088 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].y)) * _3062.y) / cbSceneParam._m0[78u].y)) + _2815;
        _2913 = (exp2(_3088 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].z)) * _3062.z) / cbSceneParam._m0[78u].z)) + _2816;
        _2915 = _3071 * _2817;
    }
    else
    {
        _2909 = _2814;
        _2911 = _2815;
        _2913 = _2816;
        _2915 = _2817;
    }
    float _2927 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2928 = _2927 == 3.0;
    float _2929 = log2(_2915);
    float _2936 = exp2(_2929 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2759 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1027))) + ((_2765 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1835)) * cbPerFrame._m0[3u].x));
    float _2937 = exp2(_2929 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2761 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1027))) + ((_2767 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1835)) * cbPerFrame._m0[3u].x));
    float _2938 = exp2(_2929 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2763 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1027))) + ((_2769 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1835)) * cbPerFrame._m0[3u].x));
    float _2947 = (_2927 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2947 * (_2928 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.y = _2947 * (_2928 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2911)));
    SV_Target.z = _2947 * (_2928 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2913)));
    SV_Target.w = cbInstanceData._m0[_2789].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2789].w;
}


