#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1037;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _244) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _245) + cbTextureTilingScale._m0[20u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _320 = _316.z;
    float _324 = (_316.x * 2.0) + (-1.0);
    float _325 = (_316.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_324, _325), vec2(_324, _325));
    float _3366 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))));
    float _337 = _324 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_290.x * 2.0) + (-1.0)));
    float _338 = _325 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_290.y * 2.0) + (-1.0)));
    float _341 = fma(_332, _212, fma(_338, _219, _337 * _205));
    float _344 = fma(_332, _213, fma(_338, _220, _337 * _206));
    float _347 = fma(_332, _214, fma(_338, _221, _337 * _207));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    vec4 _387 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _389 = _387.x;
    float _390 = 1.0 - _389;
    float _399 = (cbMtdParam._m0[19u].x + dot(vec4(_351 * _341, _351 * _344, _351 * _347, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_389 - _390) * cbMtdParam._m0[24u].z) + _390) * cbMtdParam._m0[21u].z);
    float _3377 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _407 = (_400 * (cbMtdParam._m0[17u].x - _270)) + _270;
    float _408 = (_400 * (cbMtdParam._m0[17u].y - _271)) + _271;
    float _409 = (_400 * (cbMtdParam._m0[17u].z - _272)) + _272;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _424 = _422.x;
    float _426 = _424 - (_424 * _400);
    float _431 = (((_290.z - _320) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _320;
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _451 = (_444.x * 2.0) + (-1.0);
    float _452 = (_444.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3388 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _461 = ((_444.z - _431) * _400) + _431;
    float _471 = ((sqrt(1.0 - (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) - _332) * _400) + _332;
    float _474 = (((_451 - _337) * _400) + _337) + (cbMtdParam._m0[21u].x * _337);
    float _475 = (((_452 - _338) * _400) + _338) + (cbMtdParam._m0[21u].x * _338);
    float _480 = cbMtdParam._m0[22u].x + _316.w;
    float _483 = fma(_471, _212, fma(_475, _219, _474 * _205));
    float _486 = fma(_471, _213, fma(_475, _220, _474 * _206));
    float _489 = fma(_471, _214, fma(_475, _221, _474 * _207));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    float _494 = _493 * _483;
    float _495 = _493 * _486;
    float _496 = _493 * _489;
    float _3399 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _497 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _3410 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3421 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3432 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3443 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3454 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _502 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _516 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _567 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _557);
    float _568 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _557);
    float _569 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _557);
    float _573 = inversesqrt(dot(vec3(_567, _568, _569), vec3(_567, _568, _569)));
    float _574 = _567 * _573;
    float _575 = _568 * _573;
    float _576 = _569 * _573;
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _604 = fma(_496, cbSceneParam._m0[5u].z, fma(_495, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _494));
    float _607 = fma(_496, cbSceneParam._m0[6u].z, fma(_495, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _494));
    float _610 = fma(_496, cbSceneParam._m0[7u].z, fma(_495, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _494));
    uint _624 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _630 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_624].x;
    float _631 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_624].y;
    float _632 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_624].z;
    float _3465 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _636 = 1.0 - _502;
    float _637 = _633 * _636;
    float _638 = _634 * _636;
    float _639 = _635 * _636;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _502;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _502;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _502;
    float _647 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _663 = ((isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * TEXCOORD_5.w) * _659.x;
    float _664 = dot(vec3(_494, _495, _496), vec3(_574, _575, _576));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _494) - _574;
    float _672 = (_667 * _495) - _575;
    float _673 = (_667 * _496) - _576;
    float _677 = abs(dot(vec3(_574, _575, _576), vec3(_494, _495, _496)));
    float _3498 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_497);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _698 = (1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _699 = _692 * _679;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1036;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _765 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _769 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _794 = _727 + _494;
        float _795 = _731 + _495;
        float _796 = _735 + _496;
        float _806 = fma(_796, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _794)) - _761;
        float _807 = fma(_796, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _794)) - _765;
        float _808 = fma(_796, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _794)) - _769;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _825 = ((_812 * _806) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_761 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_812 * _807) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_765 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_812 * _808) / cbModelParam._m0[34u].z) + ((((((_769 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        float _864 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_830.x + (-0.5));
        float _866 = _864 * (_830.y + (-0.5));
        float _867 = _864 * (_830.z + (-0.5));
        float _874 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_837.x + (-0.5));
        float _876 = _874 * (_837.y + (-0.5));
        float _877 = _874 * (_837.z + (-0.5));
        float _884 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_844.x + (-0.5));
        float _886 = _884 * (_844.y + (-0.5));
        float _887 = _884 * (_844.z + (-0.5));
        float _894 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_851.x + (-0.5));
        float _896 = _894 * (_851.y + (-0.5));
        float _897 = _894 * (_851.z + (-0.5));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = _865 * 0.5;
        float _902 = _875 * 0.5;
        float _903 = _885 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _918 = (dot(vec3(_494, _495, _496), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _928 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3546 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_930 + 1.0))) + _935) * _898;
        float _945 = _866 * 0.5;
        float _946 = _876 * 0.5;
        float _947 = _886 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_494, _495, _496), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3579 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_972 + 1.0))) + _977) * _899;
        float _987 = _867 * 0.5;
        float _988 = _877 * 0.5;
        float _989 = _887 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_494, _495, _496), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3612 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1014 + 1.0))) + _1019) * _900;
        _1036 = _867;
        _1038 = _866;
        _1039 = _865;
        _1040 = _877;
        _1041 = _876;
        _1042 = _875;
        _1043 = _887;
        _1044 = _886;
        _1045 = _885;
        _1046 = _900;
        _1047 = _899;
        _1048 = _898;
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
    }
    else
    {
        _1036 = _1037;
        _1038 = _1037;
        _1039 = _1037;
        _1040 = _1037;
        _1041 = _1037;
        _1042 = _1037;
        _1043 = _1037;
        _1044 = _1037;
        _1045 = _1037;
        _1046 = _1037;
        _1047 = _1037;
        _1048 = _1037;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1080 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1084 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1107 = _727 + _494;
        float _1108 = _731 + _495;
        float _1109 = _735 + _496;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_494, _495, _496), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3675 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_494, _495, _496), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3708 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_494, _495, _496), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3741 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1037;
        _1346 = _1037;
        _1347 = _1037;
        _1348 = _1037;
        _1349 = _1037;
        _1350 = _1037;
        _1351 = _1037;
        _1352 = _1037;
        _1353 = _1037;
        _1354 = _1037;
        _1355 = _1037;
        _1356 = _1037;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1049)) + _1049;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1050)) + _1050;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1051)) + _1051;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _671 * 0.5;
    float _1414 = _672 * 0.5;
    float _1415 = _673 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1036, _1040, _1043, _1046));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _497);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1530 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1534 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1538 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1541 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1544 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1547 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1575;
        if (_1541 > 0.0)
        {
            _1575 = abs((1.0 - _1530) / _1541);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1530 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1575 = frontier_phi_14_12_ladder;
        }
        float _1779;
        if (_1544 > 0.0)
        {
            _1779 = abs((1.0 - _1534) / _1544);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1534 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1779 = frontier_phi_23_19_ladder;
        }
        float _2033;
        if (_1547 > 0.0)
        {
            _2033 = abs((1.0 - _1538) / _1547);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1538 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2033 = frontier_phi_35_30_ladder;
        }
        float _2035 = isnan(_1779) ? _1575 : (isnan(_1575) ? _1779 : min(_1575, _1779));
        float _2036 = isnan(_2033) ? _2035 : (isnan(_2035) ? _2033 : min(_2035, _2033));
        float _2040 = (_2036 * _1541) + _1530;
        float _2041 = (_2036 * _1544) + _1534;
        float _2042 = (_2036 * _1547) + _1538;
        float _2043 = _2036 * 9.9999997473787516355514526367188e-05;
        float _2045 = (-1.0) - _2043;
        float _2047 = _2043 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2042 > _2047) || ((_2042 < _2045) || ((_2041 > _2047) || ((_2041 < _2045) || ((_2040 < _2045) || (_2040 > _2047))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2170 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2042, cbModelParam._m0[9u].z, fma(_2041, cbModelParam._m0[9u].y, _2040 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2042, cbModelParam._m0[10u].z, fma(_2041, cbModelParam._m0[10u].y, _2040 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2042, cbModelParam._m0[11u].z, fma(_2041, cbModelParam._m0[11u].y, _2040 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_13_35_ladder = _2170.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2170.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2170.x * cbModelParam._m0[1u].y;
        }
        _1563 = frontier_phi_13_35_ladder_2;
        _1565 = frontier_phi_13_35_ladder_1;
        _1567 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1482);
        _1563 = _1551.x * cbModelParam._m0[1u].y;
        _1565 = _1551.y * cbModelParam._m0[1u].y;
        _1567 = _1551.z * cbModelParam._m0[1u].y;
    }
    float _1571 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _497);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1571 : min(cbModelParam._m0[25u].w, _1571));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1640 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1643 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1784;
        if (_1637 > 0.0)
        {
            _1784 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1784 = frontier_phi_25_21_ladder;
        }
        float _2060;
        if (_1640 > 0.0)
        {
            _2060 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2060 = frontier_phi_37_32_ladder;
        }
        float _2273;
        if (_1643 > 0.0)
        {
            _2273 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2273 = frontier_phi_46_43_ladder;
        }
        float _2275 = isnan(_2060) ? _1784 : (isnan(_1784) ? _2060 : min(_1784, _2060));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1637) + _1626;
        float _2281 = (_2276 * _1640) + _1630;
        float _2282 = (_2276 * _1643) + _1634;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2283;
        float _2286 = _2283 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2282 > _2286) || ((_2282 < _2284) || ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 < _2284) || (_2280 > _2286))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2282, cbModelParam._m0[17u].z, fma(_2281, cbModelParam._m0[17u].y, _2280 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2282, cbModelParam._m0[18u].z, fma(_2281, cbModelParam._m0[18u].y, _2280 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2282, cbModelParam._m0[19u].z, fma(_2281, cbModelParam._m0[19u].y, _2280 * cbModelParam._m0[19u].x))), _1572);
            frontier_phi_22_46_ladder = _2481.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2481.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2481.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_22_46_ladder_2;
        _1664 = frontier_phi_22_46_ladder_1;
        _1666 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1572);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1679 = (((_698 * _647) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1662 - _1563)) + _1563);
    float _1681 = (((_698 * _649) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1664 - _1565)) + _1565);
    float _1683 = (((_698 * _650) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1666 - _1567)) + _1567);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1712 = _663 + (-1.0);
    float _1717 = (cbLight._m0[_1705].x * _1712) + 1.0;
    float _1718 = (cbLight._m0[_1705].y * _1712) + 1.0;
    float _1719 = (cbLight._m0[_1705].z * _1712) + 1.0;
    float _1720 = (cbLight._m0[_1705].w * _1712) + 1.0;
    uint _1721 = _1704 + 5u;
    float _1727 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1731 = _1704 + 4u;
    float _1738 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1742 = _1704 | 1u;
    float _1753 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_494, _495, _496));
    float _1756 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_494, _495, _496));
    float _3877 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _3888 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1761 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1763 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.3183098733425140380859375;
    float _1770 = ((cbLight._m0[_1721].x * _1727) * _1763) + ((cbLight._m0[_1731].x * _1738) * _1761);
    float _1771 = ((_1727 * cbLight._m0[_1721].y) * _1763) + ((_1738 * cbLight._m0[_1731].y) * _1761);
    float _1772 = ((_1727 * cbLight._m0[_1721].z) * _1763) + ((_1738 * cbLight._m0[_1731].z) * _1761);
    uvec4 _1776 = floatBitsToUint(cbLight._m0[_1704 + 12u]);
    bool _1778 = _1776.x == 0u;
    float _1789;
    float _1791;
    float _1793;
    if (_1778)
    {
        _1789 = _1770;
        _1791 = _1771;
        _1793 = _1772;
    }
    else
    {
        uint _1797 = _1704 + 6u;
        float _1813 = (dot(vec3(cbLight._m0[_1704 + 2u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _1814 = _1813 * _1813;
        float _3899 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1816 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1789 = (((cbLight._m0[_1797].x * 0.3183098733425140380859375) * _1815) * _1816) + _1770;
        _1791 = (((cbLight._m0[_1797].y * 0.3183098733425140380859375) * _1815) * _1816) + _1771;
        _1793 = (((cbLight._m0[_1797].z * 0.3183098733425140380859375) * _1815) * _1816) + _1772;
    }
    bool _1796 = _1776.y == 0u;
    float _1834;
    float _1836;
    float _1838;
    if (_1796)
    {
        _1834 = _1789;
        _1836 = _1791;
        _1838 = _1793;
    }
    else
    {
        uint _2004 = _1704 + 7u;
        float _2020 = (dot(vec3(cbLight._m0[_1704 + 3u].xyz), vec3(_494, _495, _496)) * 0.5) + 0.5;
        float _2021 = _2020 * _2020;
        float _3915 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2022 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2023 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1834 = (((cbLight._m0[_2004].x * 0.3183098733425140380859375) * _2022) * _2023) + _1789;
        _1836 = (((cbLight._m0[_2004].y * 0.3183098733425140380859375) * _2022) * _2023) + _1791;
        _1838 = (((cbLight._m0[_2004].z * 0.3183098733425140380859375) * _2022) * _2023) + _1793;
    }
    uint _1841 = _1704 + 8u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _497) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1704].x + _574;
    float _1857 = cbLight._m0[_1704].y + _575;
    float _1858 = cbLight._m0[_1704].z + _576;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1704].xyz));
    float _3931 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1870 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1871 = dot(vec3(_494, _495, _496), vec3(_1863, _1864, _1865));
    float _3953 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1875 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1863, _1864, _1865));
    float _3964 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1879 = _1855 * _1855;
    float _1883 = ((_1874 * _1874) * (_1879 + (-1.0))) + 1.0;
    float _1891 = exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0);
    float _1892 = 0.959999978542327880859375 - _644;
    float _1894 = 0.959999978542327880859375 - _645;
    float _1895 = 0.959999978542327880859375 - _646;
    float _1902 = 1.0 - _1855;
    float _1913 = (0.5 / (((_1870 * ((_1869 * _1902) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _1902) + _1855) * _1869))) * _1869;
    float _3975 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1879 / ((_1883 * _1883) * 3.141590118408203125));
    uint _1926 = _1704 + 9u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1742].w)) * _497) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1742].x + _574;
    float _1940 = cbLight._m0[_1742].y + _575;
    float _1941 = cbLight._m0[_1742].z + _576;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_1742].xyz));
    float _3986 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1953 = dot(vec3(_494, _495, _496), vec3(_1946, _1947, _1948));
    float _3997 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1946, _1947, _1948));
    float _4008 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1938 * _1938;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0);
    float _1979 = 1.0 - _1938;
    float _1989 = (0.5 / (((_1870 * ((_1952 * _1979) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _1979) + _1938) * _1952))) * _1952;
    float _4019 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    float _2001 = (((((_1972 * _1892) + _647) * cbLight._m0[_1926].x) * _1991) * _1727) + (((((_1891 * _1892) + _647) * cbLight._m0[_1841].x) * _1915) * _1738);
    float _2002 = (((((_1972 * _1894) + _649) * cbLight._m0[_1926].y) * _1991) * _1727) + (((((_1891 * _1894) + _649) * cbLight._m0[_1841].y) * _1915) * _1738);
    float _2003 = (((((_1972 * _1895) + _650) * cbLight._m0[_1926].z) * _1991) * _1727) + (((((_1891 * _1895) + _650) * cbLight._m0[_1841].z) * _1915) * _1738);
    float _2065;
    float _2067;
    float _2069;
    if (_1778)
    {
        _2065 = _2001;
        _2067 = _2002;
        _2069 = _2003;
    }
    else
    {
        uint _2071 = _1704 + 2u;
        uint _2075 = _1704 + 10u;
        float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _497) * 0.949999988079071044921875);
        float _2090 = _2089 * _2089;
        float _2091 = cbLight._m0[_2071].x + _574;
        float _2092 = cbLight._m0[_2071].y + _575;
        float _2093 = cbLight._m0[_2071].z + _576;
        float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
        float _2098 = _2097 * _2091;
        float _2099 = _2097 * _2092;
        float _2100 = _2097 * _2093;
        float _2101 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2071].xyz));
        float _4030 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2105 = dot(vec3(_494, _495, _496), vec3(_2098, _2099, _2100));
        float _4041 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2109 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2098, _2099, _2100));
        float _4052 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2113 = _2090 * _2090;
        float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
        float _2124 = exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0);
        float _2131 = 1.0 - _2090;
        float _2141 = (0.5 / (((_1870 * ((_2104 * _2131) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _2131) + _2090) * _2104))) * _2104;
        float _4063 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2143 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
        float _2144 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2065 = (((((_2124 * _1892) + _647) * cbLight._m0[_2075].x) * _2143) * _2144) + _2001;
        _2067 = (((((_2124 * _1894) + _649) * cbLight._m0[_2075].y) * _2143) * _2144) + _2002;
        _2069 = (((((_2124 * _1895) + _650) * cbLight._m0[_2075].z) * _2143) * _2144) + _2003;
    }
    float _2179;
    float _2181;
    float _2183;
    if (_1796)
    {
        _2179 = _2065;
        _2181 = _2067;
        _2183 = _2069;
    }
    else
    {
        uint _2190 = _1704 + 3u;
        uint _2194 = _1704 + 11u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _497) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _574;
        float _2211 = cbLight._m0[_2190].y + _575;
        float _2212 = cbLight._m0[_2190].z + _576;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_494, _495, _496), vec3(cbLight._m0[_2190].xyz));
        float _4079 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2224 = dot(vec3(_494, _495, _496), vec3(_2217, _2218, _2219));
        float _4090 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4101 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0);
        float _2250 = 1.0 - _2209;
        float _2260 = (0.5 / (((_1870 * ((_2223 * _2250) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _2250) + _2209) * _2223))) * _2223;
        float _4112 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2262 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2263 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2179 = (((((_2243 * _1892) + _647) * cbLight._m0[_2194].x) * _2262) * _2263) + _2065;
        _2181 = (((((_2243 * _1894) + _649) * cbLight._m0[_2194].y) * _2262) * _2263) + _2067;
        _2183 = (((((_2243 * _1895) + _650) * cbLight._m0[_2194].z) * _2262) * _2263) + _2069;
    }
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    if (_1702.y == 0u)
    {
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2338;
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2338;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2338;
        uvec4 _2353 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2354 = _2353.x;
        uint _2365 = uint((float(_2353.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2354))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2354)));
        float _2375 = (log2(_2341 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2376 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        uint _2379 = uint(isnan(14.0) ? _2376 : (isnan(_2376) ? 14.0 : min(_2376, 14.0)));
        uvec4 _2384 = texelFetch(g_lightClusterGridBuffer, int(((_2379 << 2u) + (_2365 << 6u)) >> 2u));
        uint _2385 = _2384.x;
        uint _2386 = _2353.z;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((((1u << ((_2386 >> 4u) & 15u)) + 4294967295u) & _2385) == 0u) || ((_2386 & 240u) == 0u))
        {
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
        }
        else
        {
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            uint _2637 = 0u;
            uint _2646;
            bool _2647;
            for (;;)
            {
                _2646 = texelFetch(g_lightClassification, int((((_2379 << 5u) + (_2365 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                _2647 = _2646 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2647)
                {
                    frontier_phi_61_pred = _2631;
                    frontier_phi_61_pred_1 = _2636;
                    frontier_phi_61_pred_2 = _2635;
                    frontier_phi_61_pred_3 = _2634;
                    frontier_phi_61_pred_4 = _2633;
                    frontier_phi_61_pred_5 = _2632;
                }
                else
                {
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    uint _2761;
                    _2755 = _2631;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2646;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2765 = uint(findLSB(_2761)) + (_2637 << 5u);
                        uint _2762 = (_2761 + 4294967295u) & _2761;
                        uint _2767 = _2765 * 48u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2787 = (_2765 * 48u) + 4u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2806 = (_2765 * 48u) + 8u;
                        vec3 _2817 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x));
                        float _2821 = _2781.x - _2339;
                        float _2822 = _2781.y - _2340;
                        float _2823 = _2781.z - _2341;
                        float _2824 = dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823));
                        float _2827 = inversesqrt(_2824);
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2831 = dot(vec3(_604, _607, _610), vec3(_2828, _2829, _2830));
                        float _2836 = 1.0 - (_2824 * _2781.w);
                        float _4138 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2838 = sqrt(_2824) * _2800.w;
                        float _2841 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2831) + _2842;
                        float _2848 = _2838 * _2838;
                        float _2852 = ((isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))) * _2837) / ((_2848 * 0.699999988079071044921875) + 1.0);
                        float _2856 = (-0.0) - _2339;
                        float _2857 = (-0.0) - _2340;
                        float _2858 = (-0.0) - _2341;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2873 = exp2(log2(1.0 / ((_2848 * 3.5) + 5.0)) * 0.25);
                        float _2874 = 1.0 - _679;
                        float _2881 = sqrt(1.0 - ((1.0 - (_2874 * _2874)) * (1.0 - (_2873 * _2873))));
                        float _2882 = _2881 * _2881;
                        float _2883 = _2882 * _2882;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2894 = dot(vec3(_604, _607, _610), vec3(_2863, _2864, _2865));
                        float _4154 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2898 = dot(vec3(_604, _607, _610), vec3(_2890 * _2884, _2890 * _2885, _2890 * _2886));
                        float _4165 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2905 = ((_2901 * _2901) * (_2883 + (-1.0))) + 1.0;
                        float _2906 = _2841 * _2882;
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2831) + _2907;
                        float _4176 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2912 = 1.0 - _2882;
                        float _2922 = (0.5 / (((_2911 * ((_2897 * _2912) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2911 * _2912) + _2882) * _2897))) * _2911;
                        float _4187 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2933 = (((_2883 * 3.1415927410125732421875) * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) / ((_2905 * _2905) * ((_2848 * 2.1991131305694580078125) + 3.141590118408203125))) * _2837;
                        _2690 = (_2852 * _2800.x) + _2758;
                        _2691 = (_2852 * _2800.y) + _2759;
                        _2692 = (_2852 * _2800.z) + _2760;
                        _2687 = (_2933 * _2817.x) + _2755;
                        _2688 = (_2933 * _2817.y) + _2756;
                        _2689 = (_2933 * _2817.z) + _2757;
                        if (_2762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2755 = _2687;
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2762;
                        }
                    }
                    frontier_phi_61_pred = _2687;
                    frontier_phi_61_pred_1 = _2692;
                    frontier_phi_61_pred_2 = _2691;
                    frontier_phi_61_pred_3 = _2690;
                    frontier_phi_61_pred_4 = _2689;
                    frontier_phi_61_pred_5 = _2688;
                }
                _2487 = frontier_phi_61_pred;
                _2497 = frontier_phi_61_pred_1;
                _2495 = frontier_phi_61_pred_2;
                _2493 = frontier_phi_61_pred_3;
                _2491 = frontier_phi_61_pred_4;
                _2489 = frontier_phi_61_pred_5;
                uint _2638 = _2637 + 1u;
                if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2631 = _2487;
                    _2632 = _2489;
                    _2633 = _2491;
                    _2634 = _2493;
                    _2635 = _2495;
                    _2636 = _2497;
                    _2637 = _2638;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
        }
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.z;
        uint _2503 = (_2501 >> 8u) & 15u;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((4294967295u << _2503) & _2385) == 0u)
        {
            _2599 = _2486;
            _2601 = _2488;
            _2603 = _2490;
            _2605 = _2492;
            _2607 = _2494;
            _2609 = _2496;
        }
        else
        {
            float _2624 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
            float _2625 = _2624 * _2339;
            float _2626 = _2624 * _2340;
            float _2627 = _2624 * _2341;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2503 < ((_2501 >> 12u) & 15u))
            {
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2738 = _2486;
                float _2739 = _2488;
                float _2740 = _2490;
                float _2741 = _2492;
                float _2742 = _2494;
                float _2743 = _2496;
                uint _2744 = _2503;
                uint _2753;
                bool _2754;
                for (;;)
                {
                    _2753 = texelFetch(g_lightClassification, int((((_2379 << 5u) + (_2365 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                    _2754 = _2753 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2754)
                    {
                        frontier_phi_67_pred = _2741;
                        frontier_phi_67_pred_1 = _2742;
                        frontier_phi_67_pred_2 = _2743;
                        frontier_phi_67_pred_3 = _2740;
                        frontier_phi_67_pred_4 = _2739;
                        frontier_phi_67_pred_5 = _2738;
                    }
                    else
                    {
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _2951 = _2738;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        float _2954 = _2741;
                        float _2955 = _2742;
                        float _2956 = _2743;
                        uint _2957 = _2753;
                        uint _2958;
                        vec4 _2983;
                        float _2984;
                        vec4 _2999;
                        vec3 _3011;
                        vec4 _3027;
                        vec4 _3042;
                        float _3088;
                        bool _3089;
                        for (;;)
                        {
                            uint _2968 = ((_2744 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2957));
                            _2958 = (_2957 + 4294967295u) & _2957;
                            uint _2970 = _2968 * 40u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2984 = _2983.w;
                            uint _2986 = (_2968 * 40u) + 4u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2968 * 40u) + 8u;
                            _3011 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x));
                            uint _3014 = (_2968 * 40u) + 16u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3029 = (_2968 * 40u) + 20u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3044 = (_2968 * 40u) + 24u;
                            vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3063 = (_2968 * 40u) + 28u;
                            vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3088 = fma(_2341, _3076.z, fma(_2340, _3076.y, _3076.x * _2339)) + _3076.w;
                            _3089 = !((fma(_2341, _3057.z, fma(_2340, _3057.y, _3057.x * _2339)) + _3057.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3089)
                            {
                                float _3116 = _2983.x - _2339;
                                float _3117 = _2983.y - _2340;
                                float _3118 = _2983.z - _2341;
                                float _3119 = dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118));
                                float _3122 = inversesqrt(_3119);
                                float _3123 = _3122 * _3116;
                                float _3124 = _3122 * _3117;
                                float _3125 = _3122 * _3118;
                                float _3129 = 1.0 - (_3119 / (_2984 * _2984));
                                float _4198 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3130 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3134 = sqrt(_3119) * _2999.w;
                                float _3136 = 1.39999997615814208984375 / (_3134 + 1.39999997615814208984375);
                                float _3137 = _3136 * _3136;
                                float _3140 = ((1.0 - _3137) * dot(vec3(_3123, _3124, _3125), vec3(_604, _607, _610))) + _3137;
                                float _3143 = _3134 * _3134;
                                float _3147 = (fma(_2341, _3027.z, fma(_2340, _3027.y, _3027.x * _2339)) + _3027.w) / _3088;
                                float _3148 = (fma(_2341, _3042.z, fma(_2340, _3042.y, _3042.x * _2339)) + _3042.w) / _3088;
                                float _3152 = 1.0 - dot(vec2(_3147, _3148), vec2(_3147, _3148));
                                float _4214 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3154 = _3153 * (((isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))) * _3130) / ((_3143 * 0.699999988079071044921875) + 1.0));
                                float _3166 = exp2(log2(1.0 / ((_3143 * 3.5) + 5.0)) * 0.25);
                                float _3167 = 1.0 - _679;
                                float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                                float _3175 = _3174 * _3174;
                                float _3176 = _3175 * _3175;
                                float _3177 = _3123 - _2625;
                                float _3178 = _3124 - _2626;
                                float _3179 = _3125 - _2627;
                                float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                                float _3187 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2625, (-0.0) - _2626, (-0.0) - _2627));
                                float _4225 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3190 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3191 = dot(vec3(_604, _607, _610), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                                float _4236 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3194 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                                float _3199 = _3136 * _3175;
                                float _3200 = _3199 * _3199;
                                float _3206 = ((1.0 - _3200) * dot(vec3(_604, _607, _610), vec3(_3123, _3124, _3125))) + _3200;
                                float _4247 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3207 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3208 = 1.0 - _3175;
                                float _3218 = (0.5 / (((_3207 * ((_3190 * _3208) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3175) * _3190))) * _3207;
                                float _4258 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3228 = (_3153 * _3130) * (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) / ((_3198 * _3198) * ((_3143 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3228 * _3011.x;
                                frontier_phi_73_pred_1 = _3228 * _3011.y;
                                frontier_phi_73_pred_2 = _3154 * _2999.z;
                                frontier_phi_73_pred_3 = _3154 * _2999.y;
                                frontier_phi_73_pred_4 = _3154 * _2999.x;
                                frontier_phi_73_pred_5 = _3228 * _3011.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3232 = frontier_phi_73_pred;
                            _3233 = frontier_phi_73_pred_1;
                            _3237 = frontier_phi_73_pred_2;
                            _3236 = frontier_phi_73_pred_3;
                            _3235 = frontier_phi_73_pred_4;
                            _3234 = frontier_phi_73_pred_5;
                            _2941 = _3235 + _2954;
                            _2942 = _3236 + _2955;
                            _2943 = _3237 + _2956;
                            _2938 = _3232 + _2951;
                            _2939 = _3233 + _2952;
                            _2940 = _3234 + _2953;
                            if (_2958 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2958;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2941;
                        frontier_phi_67_pred_1 = _2942;
                        frontier_phi_67_pred_2 = _2943;
                        frontier_phi_67_pred_3 = _2940;
                        frontier_phi_67_pred_4 = _2939;
                        frontier_phi_67_pred_5 = _2938;
                    }
                    _2606 = frontier_phi_67_pred;
                    _2608 = frontier_phi_67_pred_1;
                    _2610 = frontier_phi_67_pred_2;
                    _2604 = frontier_phi_67_pred_3;
                    _2602 = frontier_phi_67_pred_4;
                    _2600 = frontier_phi_67_pred_5;
                    uint _2745 = _2744 + 1u;
                    if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2738 = _2600;
                        _2739 = _2602;
                        _2740 = _2604;
                        _2741 = _2606;
                        _2742 = _2608;
                        _2743 = _2610;
                        _2744 = _2745;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2608;
                frontier_phi_55_56_ladder_1 = _2610;
                frontier_phi_55_56_ladder_2 = _2606;
                frontier_phi_55_56_ladder_3 = _2604;
                frontier_phi_55_56_ladder_4 = _2602;
                frontier_phi_55_56_ladder_5 = _2600;
            }
            else
            {
                frontier_phi_55_56_ladder = _2494;
                frontier_phi_55_56_ladder_1 = _2496;
                frontier_phi_55_56_ladder_2 = _2492;
                frontier_phi_55_56_ladder_3 = _2490;
                frontier_phi_55_56_ladder_4 = _2488;
                frontier_phi_55_56_ladder_5 = _2486;
            }
            _2599 = frontier_phi_55_56_ladder_5;
            _2601 = frontier_phi_55_56_ladder_4;
            _2603 = frontier_phi_55_56_ladder_3;
            _2605 = frontier_phi_55_56_ladder_2;
            _2607 = frontier_phi_55_56_ladder;
            _2609 = frontier_phi_55_56_ladder_1;
        }
        float _2614 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2398 = (_2614 * _2605) + _1834;
        _2400 = (_2614 * _2607) + _1836;
        _2402 = (_2614 * _2609) + _1838;
        _2404 = ((_2599 * _647) * _2614) + _2179;
        _2406 = ((_2601 * _649) * _2614) + _2181;
        _2408 = ((_2603 * _650) * _2614) + _2183;
    }
    else
    {
        _2398 = _1834;
        _2400 = _1836;
        _2402 = _1838;
        _2404 = _2179;
        _2406 = _2181;
        _2408 = _2183;
    }
    float _4274 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4285 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4296 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    uint _2428 = _224 + 6u;
    float _2436 = _582 / cbSceneParam._m0[86u].x;
    float _2437 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2451 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, (log2((isnan(cbSceneParam._m0[77u].w) ? _516 : (isnan(_516) ? cbSceneParam._m0[77u].w : min(_516, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2453 = _2451.x;
    float _2454 = _2451.y;
    float _2455 = _2451.z;
    float _2456 = _2451.w;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_516 > cbSceneParam._m0[78u].w)
    {
        float _2511 = isnan(_516) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _516 : min(cbSceneParam._m0[80u].w, _516));
        float _2512 = _2511 / _516;
        float _2523 = _2512 * _567;
        float _2524 = _568 * _2512;
        float _2525 = (-0.0) - _2524;
        float _2527 = _2512 * _569;
        float _2529 = (cbSceneParam._m0[77u].w * _2525) / _2511;
        float _2530 = _2529 + cbSceneParam._m0[79u].w;
        float _2531 = cbSceneParam._m0[79u].w - _2524;
        float _2537 = sqrt(((_2523 * _2523) + (_2524 * _2524)) + (_2527 * _2527));
        float _2540 = (1.0 - (cbSceneParam._m0[77u].w / _2511)) * _2537;
        float _2545 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2547 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2525 - _2529) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2530 > 0.0) ? exp2(_2545 * _2530) : (2.0 - exp2(_2547 * _2530))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2540;
        }
        else
        {
            float _2660 = 1.0 / cbSceneParam._m0[80u].x;
            float _2661 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : max(_2530, _2531));
            float _2662 = isnan(_2531) ? _2530 : (isnan(_2530) ? _2531 : min(_2530, _2531));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            _2700 = ((abs(_2537 / _2525) * cbSceneParam._m0[80u].y) * ((((_2671 - _2672) * 2.0) - ((exp2(_2545 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0)))) - exp2(_2545 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))))) * _2660)) - ((exp2(_2547 * _2671) - exp2(_2547 * _2672)) * _2660))) + (_2540 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2456);
        _2549 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2453;
        _2551 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2454;
        _2553 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2455;
        _2555 = _2711 * _2456;
    }
    else
    {
        _2549 = _2453;
        _2551 = _2454;
        _2553 = _2455;
        _2555 = _2456;
    }
    float _2567 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2568 = _2567 == 3.0;
    float _2569 = log2(_2555);
    float _2576 = exp2(_2569 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2398 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _663))) + ((_2404 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2577 = exp2(_2569 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2400 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _663))) + ((_2406 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2578 = exp2(_2569 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2402 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _663))) + ((_2408 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1471)) * cbPerFrame._m0[3u].x));
    float _2587 = (_2567 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2587 * (_2568 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2549)));
    SV_Target.y = _2587 * (_2568 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.z = _2587 * (_2568 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2553)));
    SV_Target.w = cbInstanceData._m0[_2428].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2428].w;
}


