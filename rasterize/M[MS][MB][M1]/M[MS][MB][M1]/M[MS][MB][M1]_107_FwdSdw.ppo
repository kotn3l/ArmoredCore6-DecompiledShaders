#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1359;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3968 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    float _478 = ((_448.z - _469) * _394) + _469;
    float _481 = ((((_448.x - _467) * _394) + _467) * 2.0) + (-1.0);
    float _482 = ((((_448.y - _468) * _394) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3979 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _520 = (_481 + ((((_421.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_508.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _521 = (_482 + ((((_421.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_508.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _524 = fma(_488, _245, fma(_521, _252, _520 * _238));
    float _527 = fma(_488, _246, fma(_521, _253, _520 * _239));
    float _530 = fma(_488, _247, fma(_521, _254, _520 * _240));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    vec4 _561 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _570 = (cbMtdParam._m0[19u].x + dot(vec4(_534 * _524, _534 * _527, _534 * _530, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_563 - _564) * cbMtdParam._m0[24u].z) + _564) * cbMtdParam._m0[21u].z);
    float _3990 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _573 = (-0.0) - cbMtdParam._m0[24u].x;
    float _575 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _575 : (isnan(_575) ? 1.0 : min(_575, 1.0));
    float _583 = _571 - ((_571 * TEXCOORD_8.x) * _576);
    float _584 = _571 - ((_571 * TEXCOORD_8.y) * _576);
    float _585 = _571 - ((_571 * TEXCOORD_8.z) * _576);
    float _592 = (_583 * (cbMtdParam._m0[17u].x - _401)) + _401;
    float _593 = (_584 * (cbMtdParam._m0[17u].y - _402)) + _402;
    float _594 = (_585 * (cbMtdParam._m0[17u].z - _403)) + _403;
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _637 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_608 - _609) * cbMtdParam._m0[24u].w) + _609) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4011 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _646 = ((((cbMtdParam._m0[10u].x - _592) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _638) + _592;
    float _647 = ((((cbMtdParam._m0[10u].y - _593) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _638) + _593;
    float _648 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _594)) * _638) + _594;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _676 = _674.x;
    float _694 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _676) * _394) + _676;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _694) * cbMtdParam._m0[19u].z) + _694;
    float _700 = _698 - (_698 * _583);
    float _702 = _700 - (_700 * _638);
    float _707 = (((_421.z - _478) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _478;
    float _711 = ((_508.z - _707) * cbMtdParam._m0[19u].w) + _707;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _732 = (_725.x * 2.0) + (-1.0);
    float _733 = (_725.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _4022 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _742 = ((_725.z - _711) * _583) + _711;
    float _745 = ((cbMtdParam._m0[23u].y - _742) * _638) + _742;
    vec4 _764 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _770 = (_764.x * 2.0) + (-1.0);
    float _771 = (_764.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _4033 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _787 = ((sqrt(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) - _488) * _585) + _488;
    float _790 = (((_732 - _520) * _583) + _520) + (cbMtdParam._m0[21u].x * _520);
    float _791 = (((_733 - _521) * _584) + _521) + (cbMtdParam._m0[21u].x * _521);
    float _802 = (((_770 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _638) + _790;
    float _803 = (((_771 - _791) + (_791 * cbMtdParam._m0[22u].z)) * _638) + _791;
    float _804 = (_638 * (sqrt(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) - _787)) + _787;
    float _806 = cbMtdParam._m0[22u].x + _508.w;
    float _809 = fma(_804, _245, fma(_803, _252, _802 * _238));
    float _812 = fma(_804, _246, fma(_803, _253, _802 * _239));
    float _815 = fma(_804, _247, fma(_803, _254, _802 * _240));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _819 * _809;
    float _821 = _819 * _812;
    float _822 = _819 * _815;
    float _4044 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _823 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4066 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4077 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4088 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4099 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _828 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _842 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    float _907 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _908 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _926 = fma(_822, cbSceneParam._m0[5u].z, fma(_821, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _820));
    float _929 = fma(_822, cbSceneParam._m0[6u].z, fma(_821, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _820));
    float _932 = fma(_822, cbSceneParam._m0[7u].z, fma(_821, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _820));
    uint _946 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _952 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_946].x;
    float _953 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_946].y;
    float _954 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_946].z;
    float _4110 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _958 = 1.0 - _828;
    float _959 = _955 * _958;
    float _960 = _956 * _958;
    float _961 = _957 * _958;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _828;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _828;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _828;
    float _969 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    vec4 _981 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _907, cbSceneParam._m0[86u].y * _908));
    float _985 = ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * TEXCOORD_5.w) * _981.x;
    float _986 = dot(vec3(_820, _821, _822), vec3(_899, _900, _901));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _820) - _899;
    float _994 = (_989 * _821) - _900;
    float _995 = (_989 * _822) - _901;
    float _999 = abs(dot(vec3(_899, _900, _901), vec3(_820, _821, _822)));
    float _4143 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(_823);
    float _1014 = exp2((_1001 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1001 * 3.0));
    float _1020 = (1.0 - _1014) * ((_1001 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1021 = _1014 * _1001;
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1087 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1091 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1116 = _1049 + _820;
        float _1117 = _1053 + _821;
        float _1118 = _1057 + _822;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_820, _821, _822), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4191 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_820, _821, _822), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4224 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_820, _821, _822), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4257 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1398 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1402 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1406 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1429 = _1049 + _820;
        float _1430 = _1053 + _821;
        float _1431 = _1057 + _822;
        float _1441 = fma(_1431, cbModelParam._m0[30u].z, fma(_1430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1429)) - _1398;
        float _1442 = fma(_1431, cbModelParam._m0[31u].z, fma(_1430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1429)) - _1402;
        float _1443 = fma(_1431, cbModelParam._m0[32u].z, fma(_1430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1429)) - _1406;
        float _1447 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
        float _1460 = ((_1447 * _1441) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1398 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1447 * _1442) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1402 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1447 * _1443) / cbModelParam._m0[35u].z) + ((((((_1406 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        float _1497 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1464.x + (-0.5));
        float _1499 = _1497 * (_1464.y + (-0.5));
        float _1500 = _1497 * (_1464.z + (-0.5));
        float _1507 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1471.x + (-0.5));
        float _1509 = _1507 * (_1471.y + (-0.5));
        float _1510 = _1507 * (_1471.z + (-0.5));
        float _1517 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1478.x + (-0.5));
        float _1519 = _1517 * (_1478.y + (-0.5));
        float _1520 = _1517 * (_1478.z + (-0.5));
        float _1527 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1485.x + (-0.5));
        float _1529 = _1527 * (_1485.y + (-0.5));
        float _1530 = _1527 * (_1485.z + (-0.5));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = _1498 * 0.5;
        float _1535 = _1508 * 0.5;
        float _1536 = _1518 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_820, _821, _822), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4320 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1561 + 1.0))) + _1566) * _1531;
        float _1576 = _1499 * 0.5;
        float _1577 = _1509 * 0.5;
        float _1578 = _1519 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_820, _821, _822), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4353 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1603 + 1.0))) + _1608) * _1532;
        float _1618 = _1500 * 0.5;
        float _1619 = _1510 * 0.5;
        float _1620 = _1520 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_820, _821, _822), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4386 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1645 + 1.0))) + _1650) * _1533;
        _1667 = _1500;
        _1668 = _1499;
        _1669 = _1498;
        _1670 = _1510;
        _1671 = _1509;
        _1672 = _1508;
        _1673 = _1520;
        _1674 = _1519;
        _1675 = _1518;
        _1676 = _1533;
        _1677 = _1532;
        _1678 = _1531;
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
    }
    else
    {
        _1667 = _1359;
        _1668 = _1359;
        _1669 = _1359;
        _1670 = _1359;
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = _1359;
        _1679 = 0.0;
        _1680 = 0.0;
        _1681 = 0.0;
    }
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1371)) + _1371;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1372)) + _1372;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1373)) + _1373;
    float _1714 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1691));
    float _1735 = _993 * 0.5;
    float _1736 = _994 * 0.5;
    float _1737 = _995 * 0.5;
    float _1738 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1741 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1744 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1778;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1751 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1755 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1759 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1766 = dot(vec4(cbModelParam._m0[39u]), vec4(_1735, _1736, _1737, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1789;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1780 = dot(vec4(cbModelParam._m0[40u]), vec4(_1735, _1736, _1737, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1793 = (_1789 * cbModelParam._m0[1u].x) + (_1778 * (1.0 - cbModelParam._m0[1u].x));
    float _1803 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _823);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1803 : min(cbModelParam._m0[25u].z, _1803));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1866 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1869 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1897 = frontier_phi_14_12_ladder;
        }
        float _2069;
        if (_1866 > 0.0)
        {
            _2069 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2069 = frontier_phi_23_19_ladder;
        }
        float _2364;
        if (_1869 > 0.0)
        {
            _2364 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2364 = frontier_phi_35_30_ladder;
        }
        float _2366 = isnan(_2069) ? _1897 : (isnan(_1897) ? _2069 : min(_1897, _2069));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1863) + _1852;
        float _2372 = (_2367 * _1866) + _1856;
        float _2373 = (_2367 * _1869) + _1860;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1804);
            frontier_phi_13_35_ladder = _2518.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2518.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2518.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_13_35_ladder_2;
        _1887 = frontier_phi_13_35_ladder_1;
        _1889 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1804);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _823);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1962 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1965 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2074;
        if (_1959 > 0.0)
        {
            _2074 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2074 = frontier_phi_25_21_ladder;
        }
        float _2391;
        if (_1962 > 0.0)
        {
            _2391 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2391 = frontier_phi_37_32_ladder;
        }
        float _2729;
        if (_1965 > 0.0)
        {
            _2729 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2729 = frontier_phi_47_44_ladder;
        }
        float _2731 = isnan(_2391) ? _2074 : (isnan(_2074) ? _2391 : min(_2074, _2391));
        float _2732 = isnan(_2729) ? _2731 : (isnan(_2731) ? _2729 : min(_2731, _2729));
        float _2736 = (_2732 * _1959) + _1948;
        float _2737 = (_2732 * _1962) + _1952;
        float _2738 = (_2732 * _1965) + _1956;
        float _2739 = _2732 * 9.9999997473787516355514526367188e-05;
        float _2740 = (-1.0) - _2739;
        float _2742 = _2739 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2738 > _2742) || ((_2738 < _2740) || ((_2737 > _2742) || ((_2737 < _2740) || ((_2736 < _2740) || (_2736 > _2742))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2738, cbModelParam._m0[17u].z, fma(_2737, cbModelParam._m0[17u].y, _2736 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2738, cbModelParam._m0[18u].z, fma(_2737, cbModelParam._m0[18u].y, _2736 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2738, cbModelParam._m0[19u].z, fma(_2737, cbModelParam._m0[19u].y, _2736 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_22_47_ladder = _2860.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2860.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2860.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_22_47_ladder_2;
        _1986 = frontier_phi_22_47_ladder_1;
        _1988 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1894);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2001 = (((_1020 * _969) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1984 - _1885)) + _1885);
    float _2003 = (((_1020 * _971) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1986 - _1887)) + _1887);
    float _2005 = (((_1020 * _972) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1988 - _1889)) + _1889);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2061 = _2048 / _2060;
    float _2062 = _2052 / _2060;
    float _2063 = _2056 / _2060;
    float _2210;
    float _2211;
    float _2212;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2090 = ((uint(_2063 > cbSceneParam._m0[59u].y) + uint(_2063 > cbSceneParam._m0[59u].x)) + uint(_2063 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2091 = _2090 + 43u;
        uint _2099 = _2090 + 44u;
        uint _2107 = _2090 + 45u;
        uint _2115 = _2090 + 46u;
        float _2126 = fma(_2060, cbSceneParam._m0[_2091].w, fma(_2056, cbSceneParam._m0[_2091].z, fma(_2052, cbSceneParam._m0[_2091].y, _2048 * cbSceneParam._m0[_2091].x)));
        float _2130 = fma(_2060, cbSceneParam._m0[_2099].w, fma(_2056, cbSceneParam._m0[_2099].z, fma(_2052, cbSceneParam._m0[_2099].y, _2048 * cbSceneParam._m0[_2099].x)));
        float _2138 = fma(_2060, cbSceneParam._m0[_2115].w, fma(_2056, cbSceneParam._m0[_2115].z, fma(_2052, cbSceneParam._m0[_2115].y, _2048 * cbSceneParam._m0[_2115].x)));
        float _2143 = cbSceneParam._m0[33u].z * _2138;
        float _2145 = cbSceneParam._m0[33u].w * _2138;
        float _2148 = fma(_2060, cbSceneParam._m0[_2107].w, fma(_2056, cbSceneParam._m0[_2107].z, fma(_2052, cbSceneParam._m0[_2107].y, _2048 * cbSceneParam._m0[_2107].x))) / _2138;
        float _2196 = (cbSceneParam._m0[33u].x - sqrt(((_2062 * _2062) + (_2061 * _2061)) + (_2063 * _2063))) * cbSceneParam._m0[33u].y;
        float _4512 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2203 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 + _2126) / _2138, (_2145 + _2130) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2126) / _2138, (_2130 - _2143) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 - _2143) / _2138, (_2130 - _2145) / _2138), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 - _2145) / _2138, (_2143 + _2130) / _2138), _2148), 0.0)).x), vec4(0.25)));
        _2210 = 1.0 - (_2203 * cbSceneParam._m0[34u].x);
        _2211 = 1.0 - (_2203 * cbSceneParam._m0[34u].y);
        _2212 = 1.0 - (_2203 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2210 = 1.0;
        _2211 = 1.0;
        _2212 = 1.0;
    }
    float _2276;
    float _2278;
    float _2280;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2264 = fma(_2060, cbSceneParam._m0[63u].w, fma(_2056, cbSceneParam._m0[63u].z, fma(_2052, cbSceneParam._m0[63u].y, _2048 * cbSceneParam._m0[63u].x)));
        float _2265 = fma(_2060, cbSceneParam._m0[60u].w, fma(_2056, cbSceneParam._m0[60u].z, fma(_2052, cbSceneParam._m0[60u].y, _2048 * cbSceneParam._m0[60u].x))) / _2264;
        float _2266 = fma(_2060, cbSceneParam._m0[61u].w, fma(_2056, cbSceneParam._m0[61u].z, fma(_2052, cbSceneParam._m0[61u].y, _2048 * cbSceneParam._m0[61u].x))) / _2264;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2265 >= cbSceneParam._m0[64u].x) && (_2266 >= cbSceneParam._m0[64u].y)) && (_2265 <= cbSceneParam._m0[64u].z)) && (_2266 <= cbSceneParam._m0[64u].w))
        {
            float _2404 = fma(_2060, cbSceneParam._m0[62u].w, fma(_2056, cbSceneParam._m0[62u].z, fma(_2052, cbSceneParam._m0[62u].y, _2048 * cbSceneParam._m0[62u].x))) / _2264;
            float _2408 = isnan(cbSceneParam._m0[41u].w) ? _2404 : (isnan(_2404) ? cbSceneParam._m0[41u].w : max(_2404, cbSceneParam._m0[41u].w));
            float _2451 = (cbSceneParam._m0[33u].x - sqrt(((_2062 * _2062) + (_2061 * _2061)) + (_2063 * _2063))) * cbSceneParam._m0[33u].y;
            float _4528 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
            float _2458 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2265, cbSceneParam._m0[33u].w + _2266), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2265, _2266 - cbSceneParam._m0[33u].z), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2265 - cbSceneParam._m0[33u].z, _2266 - cbSceneParam._m0[33u].w), _2408), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2265 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2266), _2408), 0.0)).x), vec4(0.25)));
            float _2462 = 1.0 - (_2458 * cbSceneParam._m0[34u].x);
            float _2463 = 1.0 - (_2458 * cbSceneParam._m0[34u].y);
            float _2464 = 1.0 - (_2458 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
            frontier_phi_34_33_ladder_1 = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
            frontier_phi_34_33_ladder_2 = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
        }
        else
        {
            frontier_phi_34_33_ladder = _2212;
            frontier_phi_34_33_ladder_1 = _2211;
            frontier_phi_34_33_ladder_2 = _2210;
        }
        _2276 = frontier_phi_34_33_ladder_2;
        _2278 = frontier_phi_34_33_ladder_1;
        _2280 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2276 = _2210;
        _2278 = _2211;
        _2280 = _2212;
    }
    uvec4 _2285 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2287 = _2285.x * 14u;
    uint _2288 = _2287 + 13u;
    float _2295 = _985 + (-1.0);
    float _2300 = (cbLight._m0[_2288].x * _2295) + 1.0;
    float _2301 = (cbLight._m0[_2288].y * _2295) + 1.0;
    float _2302 = (cbLight._m0[_2288].z * _2295) + 1.0;
    float _2303 = (cbLight._m0[_2288].w * _2295) + 1.0;
    uint _2304 = _2287 + 5u;
    float _2310 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2314 = _2287 + 4u;
    float _2323 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2327 = _2287 | 1u;
    float _2338 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_820, _821, _822));
    float _2341 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_820, _821, _822));
    float _4564 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _4575 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2346 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.3183098733425140380859375;
    float _2348 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * 0.3183098733425140380859375;
    float _2355 = ((cbLight._m0[_2304].x * _2310) * _2348) + (((cbLight._m0[_2314].x * _2276) * _2323) * _2346);
    float _2356 = ((_2310 * cbLight._m0[_2304].y) * _2348) + (((cbLight._m0[_2314].y * _2278) * _2323) * _2346);
    float _2357 = ((_2310 * cbLight._m0[_2304].z) * _2348) + (((cbLight._m0[_2314].z * _2280) * _2323) * _2346);
    uvec4 _2361 = floatBitsToUint(cbLight._m0[_2287 + 12u]);
    bool _2363 = _2361.x == 0u;
    float _2465;
    float _2467;
    float _2469;
    if (_2363)
    {
        _2465 = _2355;
        _2467 = _2356;
        _2469 = _2357;
    }
    else
    {
        uint _2473 = _2287 + 6u;
        float _2489 = (dot(vec3(cbLight._m0[_2287 + 2u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4586 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2492 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2465 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2355;
        _2467 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2356;
        _2469 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2357;
    }
    bool _2472 = _2361.y == 0u;
    float _2527;
    float _2529;
    float _2531;
    if (_2472)
    {
        _2527 = _2465;
        _2529 = _2467;
        _2531 = _2469;
    }
    else
    {
        uint _2700 = _2287 + 7u;
        float _2716 = (dot(vec3(cbLight._m0[_2287 + 3u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2717 = _2716 * _2716;
        float _4602 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2718 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2719 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2527 = (((cbLight._m0[_2700].x * 0.3183098733425140380859375) * _2718) * _2719) + _2465;
        _2529 = (((cbLight._m0[_2700].y * 0.3183098733425140380859375) * _2718) * _2719) + _2467;
        _2531 = (((cbLight._m0[_2700].z * 0.3183098733425140380859375) * _2718) * _2719) + _2469;
    }
    uint _2534 = _2287 + 8u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _823) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2287].x + _899;
    float _2550 = cbLight._m0[_2287].y + _900;
    float _2551 = cbLight._m0[_2287].z + _901;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2287].xyz));
    float _4618 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _4629 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2563 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2564 = dot(vec3(_820, _821, _822), vec3(_2556, _2557, _2558));
    float _4640 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2568 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2556, _2557, _2558));
    float _4651 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2572 = _2548 * _2548;
    float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
    float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
    float _2585 = 0.959999978542327880859375 - _966;
    float _2587 = 0.959999978542327880859375 - _967;
    float _2588 = 0.959999978542327880859375 - _968;
    float _2595 = 1.0 - _2548;
    float _2606 = (0.5 / (((_2563 * ((_2562 * _2595) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2595) + _2548) * _2562))) * _2562;
    float _4662 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2608 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
    uint _2622 = _2287 + 9u;
    float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _823) * 0.949999988079071044921875);
    float _2634 = _2633 * _2633;
    float _2635 = cbLight._m0[_2327].x + _899;
    float _2636 = cbLight._m0[_2327].y + _900;
    float _2637 = cbLight._m0[_2327].z + _901;
    float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
    float _2642 = _2641 * _2635;
    float _2643 = _2641 * _2636;
    float _2644 = _2641 * _2637;
    float _2645 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2327].xyz));
    float _4673 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2649 = dot(vec3(_820, _821, _822), vec3(_2642, _2643, _2644));
    float _4684 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2652 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2653 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2642, _2643, _2644));
    float _4695 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2657 = _2634 * _2634;
    float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
    float _2668 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
    float _2675 = 1.0 - _2634;
    float _2685 = (0.5 / (((_2563 * ((_2648 * _2675) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2675) + _2634) * _2648))) * _2648;
    float _4706 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2687 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
    float _2697 = (((((_2668 * _2585) + _969) * cbLight._m0[_2622].x) * _2687) * _2310) + ((((cbLight._m0[_2534].x * _2276) * ((_2584 * _2585) + _969)) * _2608) * _2323);
    float _2698 = (((((_2668 * _2587) + _971) * cbLight._m0[_2622].y) * _2687) * _2310) + ((((cbLight._m0[_2534].y * _2278) * ((_2584 * _2587) + _971)) * _2608) * _2323);
    float _2699 = (((((_2668 * _2588) + _972) * cbLight._m0[_2622].z) * _2687) * _2310) + ((((cbLight._m0[_2534].z * _2280) * ((_2584 * _2588) + _972)) * _2608) * _2323);
    float _2755;
    float _2757;
    float _2759;
    if (_2363)
    {
        _2755 = _2697;
        _2757 = _2698;
        _2759 = _2699;
    }
    else
    {
        uint _2761 = _2287 + 2u;
        uint _2765 = _2287 + 10u;
        float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2761].w)) * _823) * 0.949999988079071044921875);
        float _2780 = _2779 * _2779;
        float _2781 = cbLight._m0[_2761].x + _899;
        float _2782 = cbLight._m0[_2761].y + _900;
        float _2783 = cbLight._m0[_2761].z + _901;
        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
        float _2788 = _2787 * _2781;
        float _2789 = _2787 * _2782;
        float _2790 = _2787 * _2783;
        float _2791 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2761].xyz));
        float _4717 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2795 = dot(vec3(_820, _821, _822), vec3(_2788, _2789, _2790));
        float _4728 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2799 = dot(vec3(cbLight._m0[_2761].xyz), vec3(_2788, _2789, _2790));
        float _4739 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2803 = _2780 * _2780;
        float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
        float _2814 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
        float _2821 = 1.0 - _2780;
        float _2831 = (0.5 / (((_2563 * ((_2794 * _2821) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2821) + _2780) * _2794))) * _2794;
        float _4750 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2755 = (((((_2814 * _2585) + _969) * cbLight._m0[_2765].x) * _2833) * _2834) + _2697;
        _2757 = (((((_2814 * _2587) + _971) * cbLight._m0[_2765].y) * _2833) * _2834) + _2698;
        _2759 = (((((_2814 * _2588) + _972) * cbLight._m0[_2765].z) * _2833) * _2834) + _2699;
    }
    float _2865;
    float _2867;
    float _2869;
    if (_2472)
    {
        _2865 = _2755;
        _2867 = _2757;
        _2869 = _2759;
    }
    else
    {
        uint _2876 = _2287 + 3u;
        uint _2880 = _2287 + 11u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _823) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _899;
        float _2897 = cbLight._m0[_2876].y + _900;
        float _2898 = cbLight._m0[_2876].z + _901;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2876].xyz));
        float _4766 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2910 = dot(vec3(_820, _821, _822), vec3(_2903, _2904, _2905));
        float _4777 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4788 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2929 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
        float _2936 = 1.0 - _2895;
        float _2946 = (0.5 / (((_2563 * ((_2909 * _2936) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2563 * _2936) + _2895) * _2909))) * _2909;
        float _4799 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2865 = (((((_2929 * _2585) + _969) * cbLight._m0[_2880].x) * _2948) * _2949) + _2755;
        _2867 = (((((_2929 * _2587) + _971) * cbLight._m0[_2880].y) * _2948) * _2949) + _2757;
        _2869 = (((((_2929 * _2588) + _972) * cbLight._m0[_2880].z) * _2948) * _2949) + _2759;
    }
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    if (_2285.y == 0u)
    {
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.x;
        uint _2982 = uint((float(_2970.y) * floor(float(uint(cbSceneParam._m0[85u].y * _908) / _2971))) + floor(float(uint(cbSceneParam._m0[85u].x * _907) / _2971)));
        float _2992 = (log2(_2063 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2993 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        uint _2996 = uint(isnan(14.0) ? _2993 : (isnan(_2993) ? 14.0 : min(_2993, 14.0)));
        uvec4 _3001 = texelFetch(g_lightClusterGridBuffer, int(((_2996 << 2u) + (_2982 << 6u)) >> 2u));
        uint _3002 = _3001.x;
        uint _3003 = _2970.z;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        if (((((1u << ((_3003 >> 4u) & 15u)) + 4294967295u) & _3002) == 0u) || ((_3003 & 240u) == 0u))
        {
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
        }
        else
        {
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3091;
            float _3093;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            uint _3232 = 0u;
            uint _3241;
            bool _3242;
            for (;;)
            {
                _3241 = texelFetch(g_lightClassification, int((((_2996 << 5u) + (_2982 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                _3242 = _3241 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3242)
                {
                    frontier_phi_66_pred = _3231;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                else
                {
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    uint _3356;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3228;
                    _3353 = _3229;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3241;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    for (;;)
                    {
                        uint _3360 = uint(findLSB(_3356)) + (_3232 << 5u);
                        uint _3357 = (_3356 + 4294967295u) & _3356;
                        uint _3362 = _3360 * 48u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3382 = (_3360 * 48u) + 4u;
                        vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3401 = (_3360 * 48u) + 8u;
                        vec3 _3412 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x));
                        float _3416 = _3376.x - _2061;
                        float _3417 = _3376.y - _2062;
                        float _3418 = _3376.z - _2063;
                        float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                        float _3422 = inversesqrt(_3419);
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3426 = dot(vec3(_926, _929, _932), vec3(_3423, _3424, _3425));
                        float _3431 = 1.0 - (_3419 * _3376.w);
                        float _4825 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3433 = sqrt(_3419) * _3395.w;
                        float _3436 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3426) + _3437;
                        float _3443 = _3433 * _3433;
                        float _3447 = ((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3432) / ((_3443 * 0.699999988079071044921875) + 1.0);
                        float _3451 = (-0.0) - _2061;
                        float _3452 = (-0.0) - _2062;
                        float _3453 = (-0.0) - _2063;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3467 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                        float _3468 = 1.0 - _1001;
                        float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                        float _3476 = _3475 * _3475;
                        float _3477 = _3476 * _3476;
                        float _3478 = _3458 + _3423;
                        float _3479 = _3459 + _3424;
                        float _3480 = _3460 + _3425;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3488 = dot(vec3(_926, _929, _932), vec3(_3458, _3459, _3460));
                        float _4841 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3492 = dot(vec3(_926, _929, _932), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                        float _4852 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                        float _3500 = _3436 * _3476;
                        float _3501 = _3500 * _3500;
                        float _3504 = ((1.0 - _3501) * _3426) + _3501;
                        float _4863 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3506 = 1.0 - _3476;
                        float _3516 = (0.5 / (((_3505 * ((_3491 * _3506) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3476) * _3491))) * _3505;
                        float _4874 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3527 = (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3499 * _3499) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125))) * _3432;
                        _3285 = (_3447 * _3395.x) + _3353;
                        _3286 = (_3447 * _3395.y) + _3354;
                        _3287 = (_3447 * _3395.z) + _3355;
                        _3282 = (_3527 * _3412.x) + _3350;
                        _3283 = (_3527 * _3412.y) + _3351;
                        _3284 = (_3527 * _3412.z) + _3352;
                        if (_3357 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3284;
                            _3353 = _3285;
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3357;
                        }
                    }
                    frontier_phi_66_pred = _3287;
                    frontier_phi_66_pred_1 = _3286;
                    frontier_phi_66_pred_2 = _3285;
                    frontier_phi_66_pred_3 = _3284;
                    frontier_phi_66_pred_4 = _3283;
                    frontier_phi_66_pred_5 = _3282;
                }
                _3093 = frontier_phi_66_pred;
                _3091 = frontier_phi_66_pred_1;
                _3089 = frontier_phi_66_pred_2;
                _3087 = frontier_phi_66_pred_3;
                _3085 = frontier_phi_66_pred_4;
                _3083 = frontier_phi_66_pred_5;
                uint _3233 = _3232 + 1u;
                if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3226 = _3083;
                    _3227 = _3085;
                    _3228 = _3087;
                    _3229 = _3089;
                    _3230 = _3091;
                    _3231 = _3093;
                    _3232 = _3233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
        }
        uvec4 _3096 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3097 = _3096.z;
        uint _3099 = (_3097 >> 8u) & 15u;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        if (((4294967295u << _3099) & _3002) == 0u)
        {
            _3194 = _3082;
            _3196 = _3084;
            _3198 = _3086;
            _3200 = _3088;
            _3202 = _3090;
            _3204 = _3092;
        }
        else
        {
            float _3219 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
            float _3220 = _3219 * _2061;
            float _3221 = _3219 * _2062;
            float _3222 = _3219 * _2063;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3099 < ((_3097 >> 12u) & 15u))
            {
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3333 = _3082;
                float _3334 = _3084;
                float _3335 = _3086;
                float _3336 = _3088;
                float _3337 = _3090;
                float _3338 = _3092;
                uint _3339 = _3099;
                uint _3348;
                bool _3349;
                for (;;)
                {
                    _3348 = texelFetch(g_lightClassification, int((((_2996 << 5u) + (_2982 << 9u)) + (_3339 << 2u)) >> 2u)).x;
                    _3349 = _3348 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3349)
                    {
                        frontier_phi_72_pred = _3338;
                        frontier_phi_72_pred_1 = _3337;
                        frontier_phi_72_pred_2 = _3336;
                        frontier_phi_72_pred_3 = _3335;
                        frontier_phi_72_pred_4 = _3334;
                        frontier_phi_72_pred_5 = _3333;
                    }
                    else
                    {
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3545 = _3333;
                        float _3546 = _3334;
                        float _3547 = _3335;
                        float _3548 = _3336;
                        float _3549 = _3337;
                        float _3550 = _3338;
                        uint _3551 = _3348;
                        uint _3552;
                        vec4 _3577;
                        float _3578;
                        vec4 _3593;
                        vec3 _3605;
                        vec4 _3620;
                        vec4 _3635;
                        float _3681;
                        bool _3682;
                        for (;;)
                        {
                            uint _3562 = ((_3339 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3551));
                            _3552 = (_3551 + 4294967295u) & _3551;
                            uint _3564 = _3562 * 40u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3578 = _3577.w;
                            uint _3580 = (_3562 * 40u) + 4u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3562 * 40u) + 8u;
                            _3605 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x));
                            uint _3607 = (_3562 * 40u) + 16u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3562 * 40u) + 20u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3562 * 40u) + 24u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3656 = (_3562 * 40u) + 28u;
                            vec4 _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3681 = fma(_2063, _3669.z, fma(_2062, _3669.y, _3669.x * _2061)) + _3669.w;
                            _3682 = !((fma(_2063, _3650.z, fma(_2062, _3650.y, _3650.x * _2061)) + _3650.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3682)
                            {
                                float _3709 = _3577.x - _2061;
                                float _3710 = _3577.y - _2062;
                                float _3711 = _3577.z - _2063;
                                float _3712 = dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711));
                                float _3715 = inversesqrt(_3712);
                                float _3716 = _3715 * _3709;
                                float _3717 = _3715 * _3710;
                                float _3718 = _3715 * _3711;
                                float _3722 = 1.0 - (_3712 / (_3578 * _3578));
                                float _4885 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3727 = sqrt(_3712) * _3593.w;
                                float _3729 = 1.39999997615814208984375 / (_3727 + 1.39999997615814208984375);
                                float _3730 = _3729 * _3729;
                                float _3733 = ((1.0 - _3730) * dot(vec3(_3716, _3717, _3718), vec3(_926, _929, _932))) + _3730;
                                float _3736 = _3727 * _3727;
                                float _3740 = (fma(_2063, _3620.z, fma(_2062, _3620.y, _3620.x * _2061)) + _3620.w) / _3681;
                                float _3741 = (fma(_2063, _3635.z, fma(_2062, _3635.y, _3635.x * _2061)) + _3635.w) / _3681;
                                float _3745 = 1.0 - dot(vec2(_3740, _3741), vec2(_3740, _3741));
                                float _4901 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3747 = _3746 * (((isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0))) * _3723) / ((_3736 * 0.699999988079071044921875) + 1.0));
                                float _3759 = exp2(log2(1.0 / ((_3736 * 3.5) + 5.0)) * 0.25);
                                float _3760 = 1.0 - _1001;
                                float _3767 = sqrt(1.0 - ((1.0 - (_3760 * _3760)) * (1.0 - (_3759 * _3759))));
                                float _3768 = _3767 * _3767;
                                float _3769 = _3768 * _3768;
                                float _3770 = _3716 - _3220;
                                float _3771 = _3717 - _3221;
                                float _3772 = _3718 - _3222;
                                float _3776 = inversesqrt(dot(vec3(_3770, _3771, _3772), vec3(_3770, _3771, _3772)));
                                float _3780 = dot(vec3(_926, _929, _932), vec3((-0.0) - _3220, (-0.0) - _3221, (-0.0) - _3222));
                                float _4912 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3784 = dot(vec3(_926, _929, _932), vec3(_3776 * _3770, _3776 * _3771, _3776 * _3772));
                                float _4923 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3791 = ((_3787 * _3787) * (_3769 + (-1.0))) + 1.0;
                                float _3792 = _3729 * _3768;
                                float _3793 = _3792 * _3792;
                                float _3799 = ((1.0 - _3793) * dot(vec3(_926, _929, _932), vec3(_3716, _3717, _3718))) + _3793;
                                float _4934 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3801 = 1.0 - _3768;
                                float _3811 = (0.5 / (((_3800 * ((_3783 * _3801) + _3768)) + 9.9999999392252902907785028219223e-09) + (((_3800 * _3801) + _3768) * _3783))) * _3800;
                                float _4945 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3821 = (_3746 * _3723) * (((_3769 * 3.1415927410125732421875) * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) / ((_3791 * _3791) * ((_3736 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3747 * _3593.y;
                                frontier_phi_78_pred_1 = _3747 * _3593.x;
                                frontier_phi_78_pred_2 = _3821 * _3605.z;
                                frontier_phi_78_pred_3 = _3821 * _3605.y;
                                frontier_phi_78_pred_4 = _3821 * _3605.x;
                                frontier_phi_78_pred_5 = _3747 * _3593.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3829 = frontier_phi_78_pred;
                            _3828 = frontier_phi_78_pred_1;
                            _3827 = frontier_phi_78_pred_2;
                            _3826 = frontier_phi_78_pred_3;
                            _3825 = frontier_phi_78_pred_4;
                            _3830 = frontier_phi_78_pred_5;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            if (_3552 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3552;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3537;
                        frontier_phi_72_pred_1 = _3536;
                        frontier_phi_72_pred_2 = _3535;
                        frontier_phi_72_pred_3 = _3534;
                        frontier_phi_72_pred_4 = _3533;
                        frontier_phi_72_pred_5 = _3532;
                    }
                    _3205 = frontier_phi_72_pred;
                    _3203 = frontier_phi_72_pred_1;
                    _3201 = frontier_phi_72_pred_2;
                    _3199 = frontier_phi_72_pred_3;
                    _3197 = frontier_phi_72_pred_4;
                    _3195 = frontier_phi_72_pred_5;
                    uint _3340 = _3339 + 1u;
                    if (_3340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3333 = _3195;
                        _3334 = _3197;
                        _3335 = _3199;
                        _3336 = _3201;
                        _3337 = _3203;
                        _3338 = _3205;
                        _3339 = _3340;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3205;
                frontier_phi_60_61_ladder_1 = _3203;
                frontier_phi_60_61_ladder_2 = _3199;
                frontier_phi_60_61_ladder_3 = _3197;
                frontier_phi_60_61_ladder_4 = _3195;
                frontier_phi_60_61_ladder_5 = _3201;
            }
            else
            {
                frontier_phi_60_61_ladder = _3092;
                frontier_phi_60_61_ladder_1 = _3090;
                frontier_phi_60_61_ladder_2 = _3086;
                frontier_phi_60_61_ladder_3 = _3084;
                frontier_phi_60_61_ladder_4 = _3082;
                frontier_phi_60_61_ladder_5 = _3088;
            }
            _3194 = frontier_phi_60_61_ladder_4;
            _3196 = frontier_phi_60_61_ladder_3;
            _3198 = frontier_phi_60_61_ladder_2;
            _3200 = frontier_phi_60_61_ladder_5;
            _3202 = frontier_phi_60_61_ladder_1;
            _3204 = frontier_phi_60_61_ladder;
        }
        float _3209 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _3015 = (_3209 * _3200) + _2527;
        _3017 = (_3209 * _3202) + _2529;
        _3019 = (_3209 * _3204) + _2531;
        _3021 = ((_3194 * _969) * _3209) + _2865;
        _3023 = ((_3196 * _971) * _3209) + _2867;
        _3025 = ((_3198 * _972) * _3209) + _2869;
    }
    else
    {
        _3015 = _2527;
        _3017 = _2529;
        _3019 = _2531;
        _3021 = _2865;
        _3023 = _2867;
        _3025 = _2869;
    }
    float _4961 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4972 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4983 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    uint _3045 = _257 + 6u;
    float _3053 = _907 / cbSceneParam._m0[86u].x;
    float _3054 = _908 / cbSceneParam._m0[86u].y;
    vec4 _3068 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3053, _3054, (log2((isnan(cbSceneParam._m0[77u].w) ? _842 : (isnan(_842) ? cbSceneParam._m0[77u].w : min(_842, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3070 = _3068.x;
    float _3071 = _3068.y;
    float _3072 = _3068.z;
    float _3073 = _3068.w;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    if (_842 > cbSceneParam._m0[78u].w)
    {
        float _3107 = isnan(_842) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _842 : min(cbSceneParam._m0[80u].w, _842));
        float _3108 = _3107 / _842;
        float _3119 = _3108 * _892;
        float _3120 = _893 * _3108;
        float _3121 = (-0.0) - _3120;
        float _3122 = _3108 * _894;
        float _3124 = (cbSceneParam._m0[77u].w * _3121) / _3107;
        float _3125 = _3124 + cbSceneParam._m0[79u].w;
        float _3126 = cbSceneParam._m0[79u].w - _3120;
        float _3132 = sqrt(((_3119 * _3119) + (_3120 * _3120)) + (_3122 * _3122));
        float _3135 = (1.0 - (cbSceneParam._m0[77u].w / _3107)) * _3132;
        float _3140 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3142 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3295;
        if (abs((_3121 - _3124) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3295 = ((((_3125 > 0.0) ? exp2(_3140 * _3125) : (2.0 - exp2(_3142 * _3125))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3135;
        }
        else
        {
            float _3255 = 1.0 / cbSceneParam._m0[80u].x;
            float _3256 = isnan(_3126) ? _3125 : (isnan(_3125) ? _3126 : max(_3125, _3126));
            float _3257 = isnan(_3126) ? _3125 : (isnan(_3125) ? _3126 : min(_3125, _3126));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            _3295 = ((abs(_3132 / _3121) * cbSceneParam._m0[80u].y) * ((((_3266 - _3267) * 2.0) - ((exp2(_3140 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0)))) - exp2(_3140 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))))) * _3255)) - ((exp2(_3142 * _3266) - exp2(_3142 * _3267)) * _3255))) + (_3135 * cbSceneParam._m0[80u].z);
        }
        vec4 _3297 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3053, _3054, 1.0), 0.0);
        float _3306 = exp2((_3295 * (-1.44269502162933349609375)) * (1.0 - _3297.w));
        float _3307 = log2(_3306);
        float _3323 = log2(_3073);
        _3144 = (exp2(_3323 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].x)) * _3297.x) / cbSceneParam._m0[78u].x)) + _3070;
        _3146 = (exp2(_3323 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].y)) * _3297.y) / cbSceneParam._m0[78u].y)) + _3071;
        _3148 = (exp2(_3323 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].z)) * _3297.z) / cbSceneParam._m0[78u].z)) + _3072;
        _3150 = _3306 * _3073;
    }
    else
    {
        _3144 = _3070;
        _3146 = _3071;
        _3148 = _3072;
        _3150 = _3073;
    }
    float _3162 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3163 = _3162 == 3.0;
    float _3164 = log2(_3150);
    float _3171 = exp2(_3164 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_3015 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _985))) + ((_3021 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1793)) * cbPerFrame._m0[3u].x));
    float _3172 = exp2(_3164 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_3017 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _985))) + ((_3023 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1793)) * cbPerFrame._m0[3u].x));
    float _3173 = exp2(_3164 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_3019 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _985))) + ((_3025 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1793)) * cbPerFrame._m0[3u].x));
    float _3182 = (_3162 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3182 * (_3163 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3144)));
    SV_Target.y = _3182 * (_3163 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3146)));
    SV_Target.z = _3182 * (_3163 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3148)));
    SV_Target.w = cbInstanceData._m0[_3045].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3045].w;
}


