#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1194;
float _3577;
float _3578;
float _3579;
float _3580;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _308 = _304.z;
    float _313 = (_304.x * 2.0) + (-1.0);
    float _315 = (_304.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3589 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))));
    float _325 = fma(_322, _227, fma(_315, _234, _313 * _220));
    float _328 = fma(_322, _228, fma(_315, _235, _313 * _221));
    float _331 = fma(_322, _229, fma(_315, _236, _313 * _222));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _373 = _371.x;
    float _374 = 1.0 - _373;
    float _381 = ((_373 - _374) * cbMtdParam._m0[24u].z) + _374;
    float _383 = (cbMtdParam._m0[19u].x + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_381 * cbMtdParam._m0[21u].z);
    float _3600 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _386 = (-0.0) - cbMtdParam._m0[24u].x;
    float _388 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
    float _396 = _384 - ((_384 * TEXCOORD_8.x) * _389);
    float _397 = _384 - ((_384 * TEXCOORD_8.y) * _389);
    float _398 = _384 - ((_384 * TEXCOORD_8.z) * _389);
    float _405 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _409 = ((isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : min(_405, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _417 = (_409 - (((_381 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _409))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3631 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _422 = ((_396 * (cbMtdParam._m0[17u].x - _284)) * _418) + _284;
    float _423 = ((_397 * (cbMtdParam._m0[17u].y - _285)) * _418) + _285;
    float _424 = ((_398 * (cbMtdParam._m0[17u].z - _286)) * _418) + _286;
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _438 = _436.x;
    float _439 = 1.0 - _438;
    float _468 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_438 - _439) * cbMtdParam._m0[24u].w) + _439) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3642 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _477 = ((((cbMtdParam._m0[10u].x - _422) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _469) + _422;
    float _478 = ((((cbMtdParam._m0[10u].y - _423) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _469) + _423;
    float _479 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _424)) * _469) + _424;
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _494 = _492.x;
    float _497 = _494 - ((_494 * _396) * _418);
    float _499 = _497 - (_497 * _469);
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _520 = (_513.x * 2.0) + (-1.0);
    float _521 = (_513.y * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3653 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _531 = (((_513.z - _308) * _396) * _418) + _308;
    float _534 = ((cbMtdParam._m0[23u].y - _531) * _469) + _531;
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _559 = (_553.x * 2.0) + (-1.0);
    float _560 = (_553.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3664 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _581 = (((cbMtdParam._m0[21u].x * _313) + ((_520 - _313) * _396)) * _418) + _313;
    float _582 = (((cbMtdParam._m0[21u].x * _315) + ((_521 - _315) * _397)) * _418) + _315;
    float _583 = (((sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) - _322) * _398) * _418) + _322;
    float _594 = (((_559 - _581) + (_581 * cbMtdParam._m0[22u].z)) * _469) + _581;
    float _595 = (((_560 - _582) + (_582 * cbMtdParam._m0[22u].z)) * _469) + _582;
    float _596 = ((sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) - _583) * _469) + _583;
    float _598 = cbMtdParam._m0[22u].x + _304.w;
    float _601 = fma(_596, _227, fma(_595, _234, _594 * _220));
    float _604 = fma(_596, _228, fma(_595, _235, _594 * _221));
    float _607 = fma(_596, _229, fma(_595, _236, _594 * _222));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3675 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _615 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3697 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3708 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3719 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3730 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _620 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    vec4 _698 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _700 = _698.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _875 = sqrt(((_684 * _684) + (_685 * _685)) + (_686 * _686));
        float _881 = (cbMatDynParam._m0[5u].x * _875) + cbMatDynParam._m0[5u].y;
        float _3741 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _886 = (cbMatDynParam._m0[5u].z * _875) + cbMatDynParam._m0[5u].w;
        float _3752 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) - _882)) + _882) < ((_700 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _712 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _713 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _733 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _736 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _739 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _752 = _239 + 9u;
    uint _753 = _752 + uint(cbMatDynParam._m0[0u].w);
    float _759 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_753].x;
    float _760 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_753].y;
    float _761 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_753].z;
    float _3763 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _765 = 1.0 - _620;
    float _766 = _762 * _765;
    float _767 = _763 * _765;
    float _768 = _764 * _765;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _620;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _620;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _620;
    float _776 = _773 + 0.039999999105930328369140625;
    float _778 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    vec4 _788 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _712, cbSceneParam._m0[86u].y * _713));
    float _792 = ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * TEXCOORD_5.w) * _788.x;
    float _793 = dot(vec3(_612, _613, _614), vec3(_691, _692, _693));
    float _796 = _793 * 2.0;
    float _800 = (_796 * _612) - _691;
    float _801 = (_796 * _613) - _692;
    float _802 = (_796 * _614) - _693;
    float _806 = abs(dot(vec3(_691, _692, _693), vec3(_612, _613, _614)));
    float _3796 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _808 = sqrt(_615);
    float _821 = exp2((_808 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_808 * 3.0));
    float _827 = (1.0 - _821) * ((_808 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _828 = _821 * _808;
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1193;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _918 = fma(_864, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856));
        float _922 = fma(_864, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856));
        float _926 = fma(_864, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856));
        float _951 = _856 + _612;
        float _952 = _860 + _613;
        float _953 = _864 + _614;
        float _963 = fma(_953, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951)) - _918;
        float _964 = fma(_953, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951)) - _922;
        float _965 = fma(_953, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951)) - _926;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_918 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_922 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[34u].z) + ((((((_926 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1021 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_987.x + (-0.5));
        float _1023 = _1021 * (_987.y + (-0.5));
        float _1024 = _1021 * (_987.z + (-0.5));
        float _1031 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_994.x + (-0.5));
        float _1033 = _1031 * (_994.y + (-0.5));
        float _1034 = _1031 * (_994.z + (-0.5));
        float _1041 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1001.x + (-0.5));
        float _1043 = _1041 * (_1001.y + (-0.5));
        float _1044 = _1041 * (_1001.z + (-0.5));
        float _1051 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1008.x + (-0.5));
        float _1053 = _1051 * (_1008.y + (-0.5));
        float _1054 = _1051 * (_1008.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1075 = (dot(vec3(_612, _613, _614), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1085 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3844 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1087 + 1.0))) + _1092) * _1055;
        float _1102 = _1023 * 0.5;
        float _1103 = _1033 * 0.5;
        float _1104 = _1043 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_612, _613, _614), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3877 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1129 + 1.0))) + _1134) * _1056;
        float _1144 = _1024 * 0.5;
        float _1145 = _1034 * 0.5;
        float _1146 = _1044 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_612, _613, _614), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3910 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1171 + 1.0))) + _1176) * _1057;
        _1193 = _1024;
        _1195 = _1023;
        _1196 = _1022;
        _1197 = _1034;
        _1198 = _1033;
        _1199 = _1032;
        _1200 = _1044;
        _1201 = _1043;
        _1202 = _1042;
        _1203 = _1057;
        _1204 = _1056;
        _1205 = _1055;
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _1194;
        _1195 = _1194;
        _1196 = _1194;
        _1197 = _1194;
        _1198 = _1194;
        _1199 = _1194;
        _1200 = _1194;
        _1201 = _1194;
        _1202 = _1194;
        _1203 = _1194;
        _1204 = _1194;
        _1205 = _1194;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_864, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _856));
        float _1240 = fma(_864, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _856));
        float _1244 = fma(_864, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _856));
        float _1267 = _856 + _612;
        float _1268 = _860 + _613;
        float _1269 = _864 + _614;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_612, _613, _614), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3973 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_612, _613, _614), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4006 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_612, _613, _614), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4039 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1194;
        _1506 = _1194;
        _1507 = _1194;
        _1508 = _1194;
        _1509 = _1194;
        _1510 = _1194;
        _1511 = _1194;
        _1512 = _1194;
        _1513 = _1194;
        _1514 = _1194;
        _1515 = _1194;
        _1516 = _1194;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1206)) + _1206;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1207)) + _1207;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _800 * 0.5;
    float _1574 = _801 * 0.5;
    float _1575 = _802 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1193, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_864, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_864, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_864, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_802, cbModelParam._m0[13u].z, fma(_801, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800));
        float _1704 = fma(_802, cbModelParam._m0[14u].z, fma(_801, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800));
        float _1707 = fma(_802, cbModelParam._m0[15u].z, fma(_801, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1735 = frontier_phi_17_15_ladder;
        }
        float _1939;
        if (_1704 > 0.0)
        {
            _1939 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1939 = frontier_phi_26_22_ladder;
        }
        float _2193;
        if (_1707 > 0.0)
        {
            _2193 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2193 = frontier_phi_38_33_ladder;
        }
        float _2195 = isnan(_1939) ? _1735 : (isnan(_1735) ? _1939 : min(_1735, _1939));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1701) + _1690;
        float _2201 = (_2196 * _1704) + _1694;
        float _2202 = (_2196 * _1707) + _1698;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_16_38_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_16_38_ladder_2;
        _1725 = frontier_phi_16_38_ladder_1;
        _1727 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_800, _801, _802), _1642);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1786 = fma(_864, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856)) + cbModelParam._m0[21u].w;
        float _1790 = fma(_864, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856)) + cbModelParam._m0[22u].w;
        float _1794 = fma(_864, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856)) + cbModelParam._m0[23u].w;
        float _1797 = fma(_802, cbModelParam._m0[21u].z, fma(_801, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800));
        float _1800 = fma(_802, cbModelParam._m0[22u].z, fma(_801, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800));
        float _1803 = fma(_802, cbModelParam._m0[23u].z, fma(_801, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800));
        float _1944;
        if (_1797 > 0.0)
        {
            _1944 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1944 = frontier_phi_28_24_ladder;
        }
        float _2220;
        if (_1800 > 0.0)
        {
            _2220 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2220 = frontier_phi_40_35_ladder;
        }
        float _2433;
        if (_1803 > 0.0)
        {
            _2433 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2433 = frontier_phi_49_46_ladder;
        }
        float _2435 = isnan(_2220) ? _1944 : (isnan(_1944) ? _2220 : min(_1944, _2220));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1797) + _1786;
        float _2441 = (_2436 * _1800) + _1790;
        float _2442 = (_2436 * _1803) + _1794;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2443;
        float _2446 = _2443 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2442 > _2446) || ((_2442 < _2444) || ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 < _2444) || (_2440 > _2446))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2442, cbModelParam._m0[17u].z, fma(_2441, cbModelParam._m0[17u].y, _2440 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2442, cbModelParam._m0[18u].z, fma(_2441, cbModelParam._m0[18u].y, _2440 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2442, cbModelParam._m0[19u].z, fma(_2441, cbModelParam._m0[19u].y, _2440 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_25_49_ladder = _2641.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2641.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2641.x * cbModelParam._m0[1u].z;
        }
        _1822 = frontier_phi_25_49_ladder_2;
        _1824 = frontier_phi_25_49_ladder_1;
        _1826 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_800, _801, _802), _1732);
        _1822 = _1806.x * cbModelParam._m0[1u].z;
        _1824 = _1806.y * cbModelParam._m0[1u].z;
        _1826 = _1806.z * cbModelParam._m0[1u].z;
    }
    float _1839 = (((_827 * _776) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1841 = (((_827 * _778) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1843 = (((_827 * _779) + _828) * _792) * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1846 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1839 * cbSceneParam._m0[91u].x));
    uvec4 _1862 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1864 = _1862.x * 14u;
    uint _1865 = _1864 + 13u;
    float _1872 = _792 + (-1.0);
    float _1877 = (cbLight._m0[_1865].x * _1872) + 1.0;
    float _1878 = (cbLight._m0[_1865].y * _1872) + 1.0;
    float _1879 = (cbLight._m0[_1865].z * _1872) + 1.0;
    float _1880 = (cbLight._m0[_1865].w * _1872) + 1.0;
    uint _1881 = _1864 + 5u;
    float _1887 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1891 = _1864 + 4u;
    float _1898 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1902 = _1864 | 1u;
    float _1913 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_612, _613, _614));
    float _1916 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_612, _613, _614));
    float _4175 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _4186 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1921 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1923 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _1930 = ((cbLight._m0[_1881].x * _1887) * _1923) + ((cbLight._m0[_1891].x * _1898) * _1921);
    float _1931 = ((_1887 * cbLight._m0[_1881].y) * _1923) + ((_1898 * cbLight._m0[_1891].y) * _1921);
    float _1932 = ((_1887 * cbLight._m0[_1881].z) * _1923) + ((_1898 * cbLight._m0[_1891].z) * _1921);
    uvec4 _1936 = floatBitsToUint(cbLight._m0[_1864 + 12u]);
    bool _1938 = _1936.x == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1938)
    {
        _1949 = _1930;
        _1951 = _1931;
        _1953 = _1932;
    }
    else
    {
        uint _1957 = _1864 + 6u;
        float _1973 = (dot(vec3(cbLight._m0[_1864 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _1974 = _1973 * _1973;
        float _4197 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1976 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1949 = (((cbLight._m0[_1957].x * 0.3183098733425140380859375) * _1975) * _1976) + _1930;
        _1951 = (((cbLight._m0[_1957].y * 0.3183098733425140380859375) * _1975) * _1976) + _1931;
        _1953 = (((cbLight._m0[_1957].z * 0.3183098733425140380859375) * _1975) * _1976) + _1932;
    }
    bool _1956 = _1936.y == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1956)
    {
        _1994 = _1949;
        _1996 = _1951;
        _1998 = _1953;
    }
    else
    {
        uint _2164 = _1864 + 7u;
        float _2180 = (dot(vec3(cbLight._m0[_1864 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4213 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2183 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _1994 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _1949;
        _1996 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _1951;
        _1998 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _1953;
    }
    uint _2001 = _1864 + 8u;
    float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _615) * 0.949999988079071044921875);
    float _2015 = _2014 * _2014;
    float _2016 = cbLight._m0[_1864].x + _691;
    float _2017 = cbLight._m0[_1864].y + _692;
    float _2018 = cbLight._m0[_1864].z + _693;
    float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
    float _2023 = _2022 * _2016;
    float _2024 = _2022 * _2017;
    float _2025 = _2022 * _2018;
    float _2026 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1864].xyz));
    float _4229 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _2030 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2031 = dot(vec3(_612, _613, _614), vec3(_2023, _2024, _2025));
    float _4251 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2023, _2024, _2025));
    float _4262 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2039 = _2015 * _2015;
    float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
    float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
    float _2052 = 0.959999978542327880859375 - _773;
    float _2054 = 0.959999978542327880859375 - _774;
    float _2055 = 0.959999978542327880859375 - _775;
    float _2062 = 1.0 - _2015;
    float _2073 = (0.5 / (((_2030 * ((_2029 * _2062) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2062) + _2015) * _2029))) * _2029;
    float _4273 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
    uint _2086 = _1864 + 9u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _615) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1902].x + _691;
    float _2100 = cbLight._m0[_1902].y + _692;
    float _2101 = cbLight._m0[_1902].z + _693;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1902].xyz));
    float _4284 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2113 = dot(vec3(_612, _613, _614), vec3(_2106, _2107, _2108));
    float _4295 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2106, _2107, _2108));
    float _4306 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2098 * _2098;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2132 = exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0);
    float _2139 = 1.0 - _2098;
    float _2149 = (0.5 / (((_2030 * ((_2112 * _2139) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2139) + _2098) * _2112))) * _2112;
    float _4317 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    float _2161 = (((((_2132 * _2052) + _776) * cbLight._m0[_2086].x) * _2151) * _1887) + (((((_2051 * _2052) + _776) * cbLight._m0[_2001].x) * _2075) * _1898);
    float _2162 = (((((_2132 * _2054) + _778) * cbLight._m0[_2086].y) * _2151) * _1887) + (((((_2051 * _2054) + _778) * cbLight._m0[_2001].y) * _2075) * _1898);
    float _2163 = (((((_2132 * _2055) + _779) * cbLight._m0[_2086].z) * _2151) * _1887) + (((((_2051 * _2055) + _779) * cbLight._m0[_2001].z) * _2075) * _1898);
    float _2225;
    float _2227;
    float _2229;
    if (_1938)
    {
        _2225 = _2161;
        _2227 = _2162;
        _2229 = _2163;
    }
    else
    {
        uint _2231 = _1864 + 2u;
        uint _2235 = _1864 + 10u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _615) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _691;
        float _2252 = cbLight._m0[_2231].y + _692;
        float _2253 = cbLight._m0[_2231].z + _693;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2231].xyz));
        float _4328 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2265 = dot(vec3(_612, _613, _614), vec3(_2258, _2259, _2260));
        float _4339 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4350 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2284 = exp2(log2(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * 5.0);
        float _2291 = 1.0 - _2250;
        float _2301 = (0.5 / (((_2030 * ((_2264 * _2291) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2291) + _2250) * _2264))) * _2264;
        float _4361 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2225 = (((((_2284 * _2052) + _776) * cbLight._m0[_2235].x) * _2303) * _2304) + _2161;
        _2227 = (((((_2284 * _2054) + _778) * cbLight._m0[_2235].y) * _2303) * _2304) + _2162;
        _2229 = (((((_2284 * _2055) + _779) * cbLight._m0[_2235].z) * _2303) * _2304) + _2163;
    }
    float _2339;
    float _2341;
    float _2343;
    if (_1956)
    {
        _2339 = _2225;
        _2341 = _2227;
        _2343 = _2229;
    }
    else
    {
        uint _2350 = _1864 + 3u;
        uint _2354 = _1864 + 11u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _615) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _691;
        float _2371 = cbLight._m0[_2350].y + _692;
        float _2372 = cbLight._m0[_2350].z + _693;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2350].xyz));
        float _4377 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2384 = dot(vec3(_612, _613, _614), vec3(_2377, _2378, _2379));
        float _4388 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4399 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2410 = 1.0 - _2369;
        float _2420 = (0.5 / (((_2030 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2030 * _2410) + _2369) * _2383))) * _2383;
        float _4410 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2339 = (((((_2403 * _2052) + _776) * cbLight._m0[_2354].x) * _2422) * _2423) + _2225;
        _2341 = (((((_2403 * _2054) + _778) * cbLight._m0[_2354].y) * _2422) * _2423) + _2227;
        _2343 = (((((_2403 * _2055) + _779) * cbLight._m0[_2354].z) * _2422) * _2423) + _2229;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1862.y == 0u)
    {
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2498;
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2498;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2498;
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.x;
        uint _2525 = uint((float(_2513.y) * floor(float(uint(cbSceneParam._m0[85u].y * _713) / _2514))) + floor(float(uint(cbSceneParam._m0[85u].x * _712) / _2514)));
        float _2535 = (log2(_2501 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        uint _2539 = uint(isnan(14.0) ? _2536 : (isnan(_2536) ? 14.0 : min(_2536, 14.0)));
        uvec4 _2544 = texelFetch(g_lightClusterGridBuffer, int(((_2539 << 2u) + (_2525 << 6u)) >> 2u));
        uint _2545 = _2544.x;
        uint _2546 = _2513.z;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        if (((((1u << ((_2546 >> 4u) & 15u)) + 4294967295u) & _2545) == 0u) || ((_2546 & 240u) == 0u))
        {
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
        }
        else
        {
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            uint _2804 = 0u;
            uint _2813;
            bool _2814;
            for (;;)
            {
                _2813 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                _2814 = _2813 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2814)
                {
                    frontier_phi_66_pred = _2798;
                    frontier_phi_66_pred_1 = _2803;
                    frontier_phi_66_pred_2 = _2802;
                    frontier_phi_66_pred_3 = _2801;
                    frontier_phi_66_pred_4 = _2800;
                    frontier_phi_66_pred_5 = _2799;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2798;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2813;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2804 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _2499;
                        float _3010 = _2969.y - _2500;
                        float _3011 = _2969.z - _2501;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_733, _736, _739), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4436 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _2499;
                        float _3045 = (-0.0) - _2500;
                        float _3046 = (-0.0) - _2501;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3061 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3062 = 1.0 - _808;
                        float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                        float _3070 = _3069 * _3069;
                        float _3071 = _3070 * _3070;
                        float _3072 = _3051 + _3016;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3082 = dot(vec3(_733, _736, _739), vec3(_3051, _3052, _3053));
                        float _4452 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3086 = dot(vec3(_733, _736, _739), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                        float _4463 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                        float _3094 = _3029 * _3070;
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3019) + _3095;
                        float _4474 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3100 = 1.0 - _3070;
                        float _3110 = (0.5 / (((_3099 * ((_3085 * _3100) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3070) * _3085))) * _3099;
                        float _4485 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3121 = (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3093 * _3093) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2873 = (_3040 * _2988.x) + _2946;
                        _2874 = (_3040 * _2988.y) + _2947;
                        _2875 = (_3040 * _2988.z) + _2948;
                        _2870 = (_3121 * _3005.x) + _2943;
                        _2871 = (_3121 * _3005.y) + _2944;
                        _2872 = (_3121 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2870;
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_66_pred = _2870;
                    frontier_phi_66_pred_1 = _2875;
                    frontier_phi_66_pred_2 = _2874;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2872;
                    frontier_phi_66_pred_5 = _2871;
                }
                _2647 = frontier_phi_66_pred;
                _2657 = frontier_phi_66_pred_1;
                _2655 = frontier_phi_66_pred_2;
                _2653 = frontier_phi_66_pred_3;
                _2651 = frontier_phi_66_pred_4;
                _2649 = frontier_phi_66_pred_5;
                uint _2805 = _2804 + 1u;
                if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2798 = _2647;
                    _2799 = _2649;
                    _2800 = _2651;
                    _2801 = _2653;
                    _2802 = _2655;
                    _2803 = _2657;
                    _2804 = _2805;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
        }
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.z;
        uint _2663 = (_2661 >> 8u) & 15u;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((4294967295u << _2663) & _2545) == 0u)
        {
            _2766 = _2646;
            _2768 = _2648;
            _2770 = _2650;
            _2772 = _2652;
            _2774 = _2654;
            _2776 = _2656;
        }
        else
        {
            float _2791 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
            float _2792 = _2791 * _2499;
            float _2793 = _2791 * _2500;
            float _2794 = _2791 * _2501;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2663 < ((_2661 >> 12u) & 15u))
            {
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2926 = _2646;
                float _2927 = _2648;
                float _2928 = _2650;
                float _2929 = _2652;
                float _2930 = _2654;
                float _2931 = _2656;
                uint _2932 = _2663;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2942)
                    {
                        frontier_phi_77_pred = _2931;
                        frontier_phi_77_pred_1 = _2930;
                        frontier_phi_77_pred_2 = _2929;
                        frontier_phi_77_pred_3 = _2928;
                        frontier_phi_77_pred_4 = _2927;
                        frontier_phi_77_pred_5 = _2926;
                    }
                    else
                    {
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3148 = _2926;
                        float _3149 = _2927;
                        float _3150 = _2928;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        uint _3154 = _2941;
                        uint _3155;
                        vec4 _3180;
                        float _3181;
                        vec4 _3196;
                        vec3 _3208;
                        vec4 _3224;
                        vec4 _3240;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3165 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3154));
                            _3155 = (_3154 + 4294967295u) & _3154;
                            uint _3167 = _3165 * 40u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3181 = _3180.w;
                            uint _3183 = (_3165 * 40u) + 4u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3165 * 40u) + 8u;
                            _3208 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x));
                            uint _3211 = (_3165 * 40u) + 16u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3165 * 40u) + 20u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3165 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3165 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_2501, _3274.z, fma(_2500, _3274.y, _3274.x * _2499)) + _3274.w;
                            _3287 = !((fma(_2501, _3255.z, fma(_2500, _3255.y, _3255.x * _2499)) + _3255.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3180.x - _2499;
                                float _3315 = _3180.y - _2500;
                                float _3316 = _3180.z - _2501;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3181 * _3181));
                                float _4496 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3332 = sqrt(_3317) * _3196.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_733, _736, _739))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_2501, _3224.z, fma(_2500, _3224.y, _3224.x * _2499)) + _3224.w) / _3286;
                                float _3346 = (fma(_2501, _3240.z, fma(_2500, _3240.y, _3240.x * _2499)) + _3240.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4512 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _808;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2792;
                                float _3376 = _3322 - _2793;
                                float _3377 = _3323 - _2794;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_733, _736, _739), vec3((-0.0) - _2792, (-0.0) - _2793, (-0.0) - _2794));
                                float _4523 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3389 = dot(vec3(_733, _736, _739), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4534 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_733, _736, _739), vec3(_3321, _3322, _3323))) + _3398;
                                float _4545 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4556 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3352 * _3196.y;
                                frontier_phi_83_pred_1 = _3352 * _3196.x;
                                frontier_phi_83_pred_2 = _3426 * _3208.z;
                                frontier_phi_83_pred_3 = _3426 * _3208.y;
                                frontier_phi_83_pred_4 = _3426 * _3208.x;
                                frontier_phi_83_pred_5 = _3352 * _3196.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3434 = frontier_phi_83_pred;
                            _3433 = frontier_phi_83_pred_1;
                            _3432 = frontier_phi_83_pred_2;
                            _3431 = frontier_phi_83_pred_3;
                            _3430 = frontier_phi_83_pred_4;
                            _3435 = frontier_phi_83_pred_5;
                            _3138 = _3433 + _3151;
                            _3139 = _3434 + _3152;
                            _3140 = _3435 + _3153;
                            _3135 = _3430 + _3148;
                            _3136 = _3431 + _3149;
                            _3137 = _3432 + _3150;
                            if (_3155 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3155;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3140;
                        frontier_phi_77_pred_1 = _3139;
                        frontier_phi_77_pred_2 = _3138;
                        frontier_phi_77_pred_3 = _3137;
                        frontier_phi_77_pred_4 = _3136;
                        frontier_phi_77_pred_5 = _3135;
                    }
                    _2777 = frontier_phi_77_pred;
                    _2775 = frontier_phi_77_pred_1;
                    _2773 = frontier_phi_77_pred_2;
                    _2771 = frontier_phi_77_pred_3;
                    _2769 = frontier_phi_77_pred_4;
                    _2767 = frontier_phi_77_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2767;
                        _2927 = _2769;
                        _2928 = _2771;
                        _2929 = _2773;
                        _2930 = _2775;
                        _2931 = _2777;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2771;
                frontier_phi_58_59_ladder_1 = _2777;
                frontier_phi_58_59_ladder_2 = _2775;
                frontier_phi_58_59_ladder_3 = _2773;
                frontier_phi_58_59_ladder_4 = _2769;
                frontier_phi_58_59_ladder_5 = _2767;
            }
            else
            {
                frontier_phi_58_59_ladder = _2650;
                frontier_phi_58_59_ladder_1 = _2656;
                frontier_phi_58_59_ladder_2 = _2654;
                frontier_phi_58_59_ladder_3 = _2652;
                frontier_phi_58_59_ladder_4 = _2648;
                frontier_phi_58_59_ladder_5 = _2646;
            }
            _2766 = frontier_phi_58_59_ladder_5;
            _2768 = frontier_phi_58_59_ladder_4;
            _2770 = frontier_phi_58_59_ladder;
            _2772 = frontier_phi_58_59_ladder_3;
            _2774 = frontier_phi_58_59_ladder_2;
            _2776 = frontier_phi_58_59_ladder_1;
        }
        float _2781 = isnan(1.0) ? _792 : (isnan(_792) ? 1.0 : min(_792, 1.0));
        _2558 = (_2781 * _2772) + _1994;
        _2560 = (_2781 * _2774) + _1996;
        _2562 = (_2781 * _2776) + _1998;
        _2564 = ((_2766 * _776) * _2781) + _2339;
        _2566 = ((_2768 * _778) * _2781) + _2341;
        _2568 = ((_2770 * _779) * _2781) + _2343;
    }
    else
    {
        _2558 = _1994;
        _2560 = _1996;
        _2562 = _1998;
        _2564 = _2339;
        _2566 = _2341;
        _2568 = _2343;
    }
    float _4572 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4583 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4594 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2585 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2558 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _792))) + ((_2564 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    float _2586 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2560 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _792))) + ((_2566 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    float _2587 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2562 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _792))) + ((_2568 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    uint _2588 = _239 + 6u;
    float _2596 = _712 / cbSceneParam._m0[86u].x;
    float _2597 = _713 / cbSceneParam._m0[86u].y;
    vec4 _2611 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2613 = _2611.x;
    float _2614 = _2611.y;
    float _2615 = _2611.z;
    float _2616 = _2611.w;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2671 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2672 = _2671 / _634;
        float _2683 = _2672 * _684;
        float _2684 = _685 * _2672;
        float _2685 = (-0.0) - _2684;
        float _2686 = _2672 * _686;
        float _2688 = (cbSceneParam._m0[77u].w * _2685) / _2671;
        float _2689 = _2688 + cbSceneParam._m0[79u].w;
        float _2690 = cbSceneParam._m0[79u].w - _2684;
        float _2696 = sqrt(((_2683 * _2683) + (_2684 * _2684)) + (_2686 * _2686));
        float _2699 = (1.0 - (cbSceneParam._m0[77u].w / _2671)) * _2696;
        float _2704 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2706 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2883;
        if (abs((_2685 - _2688) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2883 = ((((_2689 > 0.0) ? exp2(_2704 * _2689) : (2.0 - exp2(_2706 * _2689))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2699;
        }
        else
        {
            float _2827 = 1.0 / cbSceneParam._m0[80u].x;
            float _2828 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : max(_2689, _2690));
            float _2829 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : min(_2689, _2690));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            _2883 = ((abs(_2696 / _2685) * cbSceneParam._m0[80u].y) * ((((_2838 - _2839) * 2.0) - ((exp2(_2704 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0)))) - exp2(_2704 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))))) * _2827)) - ((exp2(_2706 * _2838) - exp2(_2706 * _2839)) * _2827))) + (_2699 * cbSceneParam._m0[80u].z);
        }
        vec4 _2885 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, 1.0), 0.0);
        float _2894 = exp2((_2883 * (-1.44269502162933349609375)) * (1.0 - _2885.w));
        float _2895 = log2(_2894);
        float _2911 = log2(_2616);
        _2708 = (exp2(_2911 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].x)) * _2885.x) / cbSceneParam._m0[78u].x)) + _2613;
        _2710 = (exp2(_2911 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].y)) * _2885.y) / cbSceneParam._m0[78u].y)) + _2614;
        _2712 = (exp2(_2911 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].z)) * _2885.z) / cbSceneParam._m0[78u].z)) + _2615;
        _2714 = _2894 * _2616;
    }
    else
    {
        _2708 = _2613;
        _2710 = _2614;
        _2712 = _2615;
        _2714 = _2616;
    }
    bool _2921;
    vec4 _2724;
    vec4 _2746;
    float _2748;
    float _2752;
    float _2753;
    float _2754;
    float _2755;
    bool _2765;
    for (;;)
    {
        _2724 = cbMatDynParam._m0[0u];
        float _2726 = roundEven(_2724.y);
        bool _2727 = _2726 == 3.0;
        float _2728 = log2(_2714);
        float _2735 = exp2(_2728 * cbSceneParam._m0[78u].x) * _2585;
        float _2736 = exp2(_2728 * cbSceneParam._m0[78u].y) * _2586;
        float _2737 = exp2(_2728 * cbSceneParam._m0[78u].z) * _2587;
        float _2744 = _700 + (-0.5);
        _2746 = cbMtdParam._m0[1u];
        _2748 = _2746.y * _2744;
        float _2751 = (_2726 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2752 = _2751 * (_2727 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2708)));
        _2753 = _2751 * (_2727 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2710)));
        _2754 = _2751 * (_2727 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2712)));
        _2755 = _2744 * 0.999000012874603271484375;
        _2765 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2765)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2755) < 0.5)
            {
                _2921 = true;
                break;
            }
        }
        uint _2862 = _752 + uint(_2724.w);
        if ((cbInstanceData._m0[_2862].w < 1.0) && ((cbInstanceData._m0[_2862].w + _2755) < 0.5))
        {
            _2921 = true;
            break;
        }
        if ((_2748 + 1.0) < _2746.x)
        {
            _2921 = true;
            break;
        }
        _2921 = false;
        break;
    }
    float _3126;
    if (_2921)
    {
        discard_state = true;
        _3126 = 0.0;
    }
    else
    {
        _3126 = cbInstanceData._m0[_2588].w;
    }
    SV_Target.x = _2752;
    SV_Target.y = _2753;
    SV_Target.z = _2754;
    SV_Target.w = _3126;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2588].w;
    discard_exit();
}


