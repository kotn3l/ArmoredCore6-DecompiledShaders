#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1045;
float _3711;
float _3712;
float _3713;
float _3714;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _321 = _317.z;
    float _326 = (_317.x * 2.0) + (-1.0);
    float _328 = (_317.y * 2.0) + (-1.0);
    float _329 = dot(vec2(_326, _328), vec2(_326, _328));
    float _3723 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _354 = _352.x;
    float _355 = 1.0 - _354;
    float _371 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_354 - _355) * cbMtdParam._m0[24u].z) + _355) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3734 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _379 = (_372 * ((_297.x * cbMtdParam._m0[18u].x) - _276)) + _276;
    float _380 = (_372 * ((_297.y * cbMtdParam._m0[18u].y) - _277)) + _277;
    float _381 = (_372 * ((_297.z * cbMtdParam._m0[18u].z) - _278)) + _278;
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _396 = _394.x;
    float _398 = _396 - (_396 * _372);
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3745 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _428 = (_372 * (_411.z - _321)) + _321;
    float _440 = (((_418 - _326) + (cbMtdParam._m0[21u].x * _326)) * _372) + _326;
    float _441 = (((_419 - _328) + (cbMtdParam._m0[21u].x * _328)) * _372) + _328;
    float _442 = (_372 * (sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) - _335)) + _335;
    float _447 = cbMtdParam._m0[22u].x + _317.w;
    float _450 = fma(_442, _217 * NORMAL.x, fma(_441, _224 * TANGENT.x, (_210 * _202) * _440));
    float _453 = fma(_442, _217 * NORMAL.y, fma(_441, _224 * TANGENT.y, (_210 * _203) * _440));
    float _456 = fma(_442, _217 * NORMAL.z, fma(_441, _224 * TANGENT.z, (_210 * _204) * _440));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3756 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _464 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3778 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3789 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3800 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3811 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _469 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _483 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _534 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _524);
    float _535 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _524);
    float _536 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _524);
    float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
    float _541 = _534 * _540;
    float _542 = _535 * _540;
    float _543 = _536 * _540;
    vec4 _548 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _550 = _548.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _725 = sqrt(((_534 * _534) + (_535 * _535)) + (_536 * _536));
        float _731 = (cbMatDynParam._m0[5u].x * _725) + cbMatDynParam._m0[5u].y;
        float _3822 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _736 = (cbMatDynParam._m0[5u].z * _725) + cbMatDynParam._m0[5u].w;
        float _3833 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) - _732)) + _732) < ((_550 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _586 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _589 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _602 = _230 + 9u;
    uint _603 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3844 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _615 = 1.0 - _469;
    float _616 = _612 * _615;
    float _617 = _613 * _615;
    float _618 = _614 * _615;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _469;
    float _624 = (_613 + (-0.039999999105930328369140625)) * _469;
    float _625 = (_614 + (-0.039999999105930328369140625)) * _469;
    float _626 = _623 + 0.039999999105930328369140625;
    float _628 = _624 + 0.039999999105930328369140625;
    float _629 = _625 + 0.039999999105930328369140625;
    vec4 _638 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _642 = ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * TEXCOORD_5.w) * _638.x;
    float _643 = dot(vec3(_461, _462, _463), vec3(_541, _542, _543));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _461) - _541;
    float _651 = (_646 * _462) - _542;
    float _652 = (_646 * _463) - _543;
    float _656 = abs(dot(vec3(_541, _542, _543), vec3(_461, _462, _463)));
    float _3877 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_464);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _677 = (1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _678 = _671 * _658;
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _773 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _777 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _802 = _706 + _461;
        float _803 = _710 + _462;
        float _804 = _714 + _463;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_461, _462, _463), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3925 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_461, _462, _463), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3958 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_461, _462, _463), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3991 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1091 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1095 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1118 = _706 + _461;
        float _1119 = _710 + _462;
        float _1120 = _714 + _463;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_461, _462, _463), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4054 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_461, _462, _463), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4087 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_461, _462, _463), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4120 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = _1045;
        _1367 = _1045;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1057)) + _1057;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1058)) + _1058;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1059)) + _1059;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _650 * 0.5;
    float _1425 = _651 * 0.5;
    float _1426 = _652 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1554 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1557 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1585 = frontier_phi_17_15_ladder;
        }
        float _1757;
        if (_1554 > 0.0)
        {
            _1757 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1757 = frontier_phi_26_22_ladder;
        }
        float _2053;
        if (_1557 > 0.0)
        {
            _2053 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2053 = frontier_phi_38_33_ladder;
        }
        float _2055 = isnan(_1757) ? _1585 : (isnan(_1585) ? _1757 : min(_1585, _1757));
        float _2056 = isnan(_2053) ? _2055 : (isnan(_2055) ? _2053 : min(_2055, _2053));
        float _2060 = (_2056 * _1551) + _1540;
        float _2061 = (_2056 * _1554) + _1544;
        float _2062 = (_2056 * _1557) + _1548;
        float _2063 = _2056 * 9.9999997473787516355514526367188e-05;
        float _2065 = (-1.0) - _2063;
        float _2067 = _2063 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2062 > _2067) || ((_2062 < _2065) || ((_2061 > _2067) || ((_2061 < _2065) || ((_2060 < _2065) || (_2060 > _2067))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2062, cbModelParam._m0[9u].z, fma(_2061, cbModelParam._m0[9u].y, _2060 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2062, cbModelParam._m0[10u].z, fma(_2061, cbModelParam._m0[10u].y, _2060 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2062, cbModelParam._m0[11u].z, fma(_2061, cbModelParam._m0[11u].y, _2060 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_16_38_ladder = _2207.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2207.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2207.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_16_38_ladder_2;
        _1575 = frontier_phi_16_38_ladder_1;
        _1577 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1650 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1653 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1762;
        if (_1647 > 0.0)
        {
            _1762 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1762 = frontier_phi_28_24_ladder;
        }
        float _2080;
        if (_1650 > 0.0)
        {
            _2080 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2080 = frontier_phi_40_35_ladder;
        }
        float _2418;
        if (_1653 > 0.0)
        {
            _2418 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2418 = frontier_phi_50_47_ladder;
        }
        float _2420 = isnan(_2080) ? _1762 : (isnan(_1762) ? _2080 : min(_1762, _2080));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1647) + _1636;
        float _2426 = (_2421 * _1650) + _1640;
        float _2427 = (_2421 * _1653) + _1644;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2428;
        float _2431 = _2428 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2427 > _2431) || ((_2427 < _2429) || ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 < _2429) || (_2425 > _2431))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2427, cbModelParam._m0[17u].z, fma(_2426, cbModelParam._m0[17u].y, _2425 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2427, cbModelParam._m0[18u].z, fma(_2426, cbModelParam._m0[18u].y, _2425 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2427, cbModelParam._m0[19u].z, fma(_2426, cbModelParam._m0[19u].y, _2425 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_25_50_ladder = _2549.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2549.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2549.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_25_50_ladder_2;
        _1674 = frontier_phi_25_50_ladder_1;
        _1676 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1582);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1689 = (((_677 * _626) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1672 - _1573)) + _1573);
    float _1691 = (((_677 * _628) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1693 = (((_677 * _629) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1749 = _1736 / _1748;
    float _1750 = _1740 / _1748;
    float _1751 = _1744 / _1748;
    float _1898;
    float _1899;
    float _1900;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1778 = ((uint(_1751 > cbSceneParam._m0[59u].y) + uint(_1751 > cbSceneParam._m0[59u].x)) + uint(_1751 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1779 = _1778 + 43u;
        uint _1787 = _1778 + 44u;
        uint _1795 = _1778 + 45u;
        uint _1803 = _1778 + 46u;
        float _1814 = fma(_1748, cbSceneParam._m0[_1779].w, fma(_1744, cbSceneParam._m0[_1779].z, fma(_1740, cbSceneParam._m0[_1779].y, _1736 * cbSceneParam._m0[_1779].x)));
        float _1818 = fma(_1748, cbSceneParam._m0[_1787].w, fma(_1744, cbSceneParam._m0[_1787].z, fma(_1740, cbSceneParam._m0[_1787].y, _1736 * cbSceneParam._m0[_1787].x)));
        float _1826 = fma(_1748, cbSceneParam._m0[_1803].w, fma(_1744, cbSceneParam._m0[_1803].z, fma(_1740, cbSceneParam._m0[_1803].y, _1736 * cbSceneParam._m0[_1803].x)));
        float _1831 = cbSceneParam._m0[33u].z * _1826;
        float _1833 = cbSceneParam._m0[33u].w * _1826;
        float _1836 = fma(_1748, cbSceneParam._m0[_1795].w, fma(_1744, cbSceneParam._m0[_1795].z, fma(_1740, cbSceneParam._m0[_1795].y, _1736 * cbSceneParam._m0[_1795].x))) / _1826;
        float _1884 = (cbSceneParam._m0[33u].x - sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751))) * cbSceneParam._m0[33u].y;
        float _4246 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1891 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1831 + _1814) / _1826, (_1833 + _1818) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 + _1814) / _1826, (_1818 - _1831) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 - _1831) / _1826, (_1818 - _1833) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 - _1833) / _1826, (_1831 + _1818) / _1826), _1836), 0.0)).x), vec4(0.25)));
        _1898 = 1.0 - (_1891 * cbSceneParam._m0[34u].x);
        _1899 = 1.0 - (_1891 * cbSceneParam._m0[34u].y);
        _1900 = 1.0 - (_1891 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1898 = 1.0;
        _1899 = 1.0;
        _1900 = 1.0;
    }
    float _1964;
    float _1966;
    float _1968;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1952 = fma(_1748, cbSceneParam._m0[63u].w, fma(_1744, cbSceneParam._m0[63u].z, fma(_1740, cbSceneParam._m0[63u].y, _1736 * cbSceneParam._m0[63u].x)));
        float _1953 = fma(_1748, cbSceneParam._m0[60u].w, fma(_1744, cbSceneParam._m0[60u].z, fma(_1740, cbSceneParam._m0[60u].y, _1736 * cbSceneParam._m0[60u].x))) / _1952;
        float _1954 = fma(_1748, cbSceneParam._m0[61u].w, fma(_1744, cbSceneParam._m0[61u].z, fma(_1740, cbSceneParam._m0[61u].y, _1736 * cbSceneParam._m0[61u].x))) / _1952;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1953 >= cbSceneParam._m0[64u].x) && (_1954 >= cbSceneParam._m0[64u].y)) && (_1953 <= cbSceneParam._m0[64u].z)) && (_1954 <= cbSceneParam._m0[64u].w))
        {
            float _2093 = fma(_1748, cbSceneParam._m0[62u].w, fma(_1744, cbSceneParam._m0[62u].z, fma(_1740, cbSceneParam._m0[62u].y, _1736 * cbSceneParam._m0[62u].x))) / _1952;
            float _2097 = isnan(cbSceneParam._m0[41u].w) ? _2093 : (isnan(_2093) ? cbSceneParam._m0[41u].w : max(_2093, cbSceneParam._m0[41u].w));
            float _2140 = (cbSceneParam._m0[33u].x - sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751))) * cbSceneParam._m0[33u].y;
            float _4262 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
            float _2147 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1953, cbSceneParam._m0[33u].w + _1954), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1953, _1954 - cbSceneParam._m0[33u].z), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1953 - cbSceneParam._m0[33u].z, _1954 - cbSceneParam._m0[33u].w), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1953 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1954), _2097), 0.0)).x), vec4(0.25)));
            float _2151 = 1.0 - (_2147 * cbSceneParam._m0[34u].x);
            float _2152 = 1.0 - (_2147 * cbSceneParam._m0[34u].y);
            float _2153 = 1.0 - (_2147 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2153) ? _1900 : (isnan(_1900) ? _2153 : min(_1900, _2153));
            frontier_phi_37_36_ladder_1 = isnan(_2152) ? _1899 : (isnan(_1899) ? _2152 : min(_1899, _2152));
            frontier_phi_37_36_ladder_2 = isnan(_2151) ? _1898 : (isnan(_1898) ? _2151 : min(_1898, _2151));
        }
        else
        {
            frontier_phi_37_36_ladder = _1900;
            frontier_phi_37_36_ladder_1 = _1899;
            frontier_phi_37_36_ladder_2 = _1898;
        }
        _1964 = frontier_phi_37_36_ladder_2;
        _1966 = frontier_phi_37_36_ladder_1;
        _1968 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1964 = _1898;
        _1966 = _1899;
        _1968 = _1900;
    }
    uvec4 _1973 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1975 = _1973.x * 14u;
    uint _1976 = _1975 + 13u;
    float _1983 = _642 + (-1.0);
    float _1988 = (cbLight._m0[_1976].x * _1983) + 1.0;
    float _1989 = (cbLight._m0[_1976].y * _1983) + 1.0;
    float _1990 = (cbLight._m0[_1976].z * _1983) + 1.0;
    float _1991 = (cbLight._m0[_1976].w * _1983) + 1.0;
    uint _1992 = _1975 + 5u;
    float _1998 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2002 = _1975 + 4u;
    float _2012 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
    uint _2016 = _1975 | 1u;
    float _2027 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_461, _462, _463));
    float _2030 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_461, _462, _463));
    float _4298 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _4309 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2035 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2037 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2044 = ((cbLight._m0[_1992].x * _1998) * _2037) + (((cbLight._m0[_2002].x * _1964) * _2012) * _2035);
    float _2045 = ((_1998 * cbLight._m0[_1992].y) * _2037) + (((cbLight._m0[_2002].y * _1966) * _2012) * _2035);
    float _2046 = ((_1998 * cbLight._m0[_1992].z) * _2037) + (((cbLight._m0[_2002].z * _1968) * _2012) * _2035);
    uvec4 _2050 = floatBitsToUint(cbLight._m0[_1975 + 12u]);
    bool _2052 = _2050.x == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2052)
    {
        _2154 = _2044;
        _2156 = _2045;
        _2158 = _2046;
    }
    else
    {
        uint _2162 = _1975 + 6u;
        float _2178 = (dot(vec3(cbLight._m0[_1975 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4320 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2181 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2154 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _2044;
        _2156 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _2045;
        _2158 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _2046;
    }
    bool _2161 = _2050.y == 0u;
    float _2216;
    float _2218;
    float _2220;
    if (_2161)
    {
        _2216 = _2154;
        _2218 = _2156;
        _2220 = _2158;
    }
    else
    {
        uint _2389 = _1975 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_1975 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4336 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2408 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2216 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2154;
        _2218 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2156;
        _2220 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2158;
    }
    uint _2223 = _1975 + 8u;
    float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _464) * 0.949999988079071044921875);
    float _2237 = _2236 * _2236;
    float _2238 = cbLight._m0[_1975].x + _541;
    float _2239 = cbLight._m0[_1975].y + _542;
    float _2240 = cbLight._m0[_1975].z + _543;
    float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
    float _2245 = _2244 * _2238;
    float _2246 = _2244 * _2239;
    float _2247 = _2244 * _2240;
    float _2248 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1975].xyz));
    float _4352 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2252 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2253 = dot(vec3(_461, _462, _463), vec3(_2245, _2246, _2247));
    float _4374 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2245, _2246, _2247));
    float _4385 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2237 * _2237;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
    float _2274 = 0.959999978542327880859375 - _623;
    float _2276 = 0.959999978542327880859375 - _624;
    float _2277 = 0.959999978542327880859375 - _625;
    float _2284 = 1.0 - _2237;
    float _2295 = (0.5 / (((_2252 * ((_2251 * _2284) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2284) + _2237) * _2251))) * _2251;
    float _4396 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    uint _2311 = _1975 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _464) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2016].x + _541;
    float _2325 = cbLight._m0[_2016].y + _542;
    float _2326 = cbLight._m0[_2016].z + _543;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2016].xyz));
    float _4407 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2338 = dot(vec3(_461, _462, _463), vec3(_2331, _2332, _2333));
    float _4418 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2331, _2332, _2333));
    float _4429 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2364 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2252 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2364) + _2323) * _2337))) * _2337;
    float _4440 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2386 = (((((_2357 * _2274) + _626) * cbLight._m0[_2311].x) * _2376) * _1998) + ((((cbLight._m0[_2223].x * _1964) * ((_2273 * _2274) + _626)) * _2297) * _2012);
    float _2387 = (((((_2357 * _2276) + _628) * cbLight._m0[_2311].y) * _2376) * _1998) + ((((cbLight._m0[_2223].y * _1966) * ((_2273 * _2276) + _628)) * _2297) * _2012);
    float _2388 = (((((_2357 * _2277) + _629) * cbLight._m0[_2311].z) * _2376) * _1998) + ((((cbLight._m0[_2223].z * _1968) * ((_2273 * _2277) + _629)) * _2297) * _2012);
    float _2444;
    float _2446;
    float _2448;
    if (_2052)
    {
        _2444 = _2386;
        _2446 = _2387;
        _2448 = _2388;
    }
    else
    {
        uint _2450 = _1975 + 2u;
        uint _2454 = _1975 + 10u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _464) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _541;
        float _2471 = cbLight._m0[_2450].y + _542;
        float _2472 = cbLight._m0[_2450].z + _543;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2450].xyz));
        float _4451 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2484 = dot(vec3(_461, _462, _463), vec3(_2477, _2478, _2479));
        float _4462 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4473 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2252 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2510) + _2469) * _2483))) * _2483;
        float _4484 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2444 = (((((_2503 * _2274) + _626) * cbLight._m0[_2454].x) * _2522) * _2523) + _2386;
        _2446 = (((((_2503 * _2276) + _628) * cbLight._m0[_2454].y) * _2522) * _2523) + _2387;
        _2448 = (((((_2503 * _2277) + _629) * cbLight._m0[_2454].z) * _2522) * _2523) + _2388;
    }
    float _2554;
    float _2556;
    float _2558;
    if (_2161)
    {
        _2554 = _2444;
        _2556 = _2446;
        _2558 = _2448;
    }
    else
    {
        uint _2565 = _1975 + 3u;
        uint _2569 = _1975 + 11u;
        float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _464) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2565].x + _541;
        float _2586 = cbLight._m0[_2565].y + _542;
        float _2587 = cbLight._m0[_2565].z + _543;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2565].xyz));
        float _4500 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2599 = dot(vec3(_461, _462, _463), vec3(_2592, _2593, _2594));
        float _4511 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2592, _2593, _2594));
        float _4522 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2618 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2625 = 1.0 - _2584;
        float _2635 = (0.5 / (((_2252 * ((_2598 * _2625) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2252 * _2625) + _2584) * _2598))) * _2598;
        float _4533 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2637 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2638 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2554 = (((((_2618 * _2274) + _626) * cbLight._m0[_2569].x) * _2637) * _2638) + _2444;
        _2556 = (((((_2618 * _2276) + _628) * cbLight._m0[_2569].y) * _2637) * _2638) + _2446;
        _2558 = (((((_2618 * _2277) + _629) * cbLight._m0[_2569].z) * _2637) * _2638) + _2448;
    }
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_1973.y == 0u)
    {
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.x;
        uint _2671 = uint((float(_2659.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2660))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2660)));
        float _2681 = (log2(_1751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2682 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        uint _2685 = uint(isnan(14.0) ? _2682 : (isnan(_2682) ? 14.0 : min(_2682, 14.0)));
        uvec4 _2690 = texelFetch(g_lightClusterGridBuffer, int(((_2685 << 2u) + (_2671 << 6u)) >> 2u));
        uint _2691 = _2690.x;
        uint _2692 = _2659.z;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((((1u << ((_2692 >> 4u) & 15u)) + 4294967295u) & _2691) == 0u) || ((_2692 & 240u) == 0u))
        {
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
        }
        else
        {
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            uint _2930 = 0u;
            uint _2939;
            bool _2940;
            for (;;)
            {
                _2939 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                _2940 = _2939 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2940)
                {
                    frontier_phi_71_pred = _2929;
                    frontier_phi_71_pred_1 = _2928;
                    frontier_phi_71_pred_2 = _2927;
                    frontier_phi_71_pred_3 = _2926;
                    frontier_phi_71_pred_4 = _2925;
                    frontier_phi_71_pred_5 = _2924;
                }
                else
                {
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    uint _3075;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2939;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3079 = uint(findLSB(_3075)) + (_2930 << 5u);
                        uint _3076 = (_3075 + 4294967295u) & _3075;
                        uint _3081 = _3079 * 48u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3101 = (_3079 * 48u) + 4u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3120 = (_3079 * 48u) + 8u;
                        vec3 _3131 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x));
                        float _3135 = _3095.x - _1749;
                        float _3136 = _3095.y - _1750;
                        float _3137 = _3095.z - _1751;
                        float _3138 = dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137));
                        float _3141 = inversesqrt(_3138);
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3145 = dot(vec3(_583, _586, _589), vec3(_3142, _3143, _3144));
                        float _3150 = 1.0 - (_3138 * _3095.w);
                        float _4559 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3152 = sqrt(_3138) * _3114.w;
                        float _3155 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3145) + _3156;
                        float _3162 = _3152 * _3152;
                        float _3166 = ((isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))) * _3151) / ((_3162 * 0.699999988079071044921875) + 1.0);
                        float _3170 = (-0.0) - _1749;
                        float _3171 = (-0.0) - _1750;
                        float _3172 = (-0.0) - _1751;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3186 = exp2(log2(1.0 / ((_3162 * 3.5) + 5.0)) * 0.25);
                        float _3187 = 1.0 - _658;
                        float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                        float _3195 = _3194 * _3194;
                        float _3196 = _3195 * _3195;
                        float _3197 = _3177 + _3142;
                        float _3198 = _3178 + _3143;
                        float _3199 = _3179 + _3144;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3207 = dot(vec3(_583, _586, _589), vec3(_3177, _3178, _3179));
                        float _4575 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3211 = dot(vec3(_583, _586, _589), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                        float _4586 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                        float _3219 = _3155 * _3195;
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3145) + _3220;
                        float _4597 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3225 = 1.0 - _3195;
                        float _3235 = (0.5 / (((_3224 * ((_3210 * _3225) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3195) * _3210))) * _3224;
                        float _4608 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3246 = (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3218 * _3218) * ((_3162 * 2.1991131305694580078125) + 3.141590118408203125))) * _3151;
                        _2999 = (_3166 * _3114.x) + _3072;
                        _3000 = (_3166 * _3114.y) + _3073;
                        _3001 = (_3166 * _3114.z) + _3074;
                        _2996 = (_3246 * _3131.x) + _3069;
                        _2997 = (_3246 * _3131.y) + _3070;
                        _2998 = (_3246 * _3131.z) + _3071;
                        if (_3076 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3076;
                        }
                    }
                    frontier_phi_71_pred = _3001;
                    frontier_phi_71_pred_1 = _3000;
                    frontier_phi_71_pred_2 = _2999;
                    frontier_phi_71_pred_3 = _2998;
                    frontier_phi_71_pred_4 = _2997;
                    frontier_phi_71_pred_5 = _2996;
                }
                _2782 = frontier_phi_71_pred;
                _2780 = frontier_phi_71_pred_1;
                _2778 = frontier_phi_71_pred_2;
                _2776 = frontier_phi_71_pred_3;
                _2774 = frontier_phi_71_pred_4;
                _2772 = frontier_phi_71_pred_5;
                uint _2931 = _2930 + 1u;
                if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2924 = _2772;
                    _2925 = _2774;
                    _2926 = _2776;
                    _2927 = _2778;
                    _2928 = _2780;
                    _2929 = _2782;
                    _2930 = _2931;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
        }
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.z;
        uint _2788 = (_2786 >> 8u) & 15u;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((4294967295u << _2788) & _2691) == 0u)
        {
            _2892 = _2771;
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
        }
        else
        {
            float _2917 = inversesqrt(dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751)));
            float _2918 = _2917 * _1749;
            float _2919 = _2917 * _1750;
            float _2920 = _2917 * _1751;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2788 < ((_2786 >> 12u) & 15u))
            {
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _3052 = _2771;
                float _3053 = _2773;
                float _3054 = _2775;
                float _3055 = _2777;
                float _3056 = _2779;
                float _3057 = _2781;
                uint _3058 = _2788;
                uint _3067;
                bool _3068;
                for (;;)
                {
                    _3067 = texelFetch(g_lightClassification, int((((_2685 << 5u) + (_2671 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                    _3068 = _3067 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3068)
                    {
                        frontier_phi_82_pred = _3057;
                        frontier_phi_82_pred_1 = _3056;
                        frontier_phi_82_pred_2 = _3055;
                        frontier_phi_82_pred_3 = _3054;
                        frontier_phi_82_pred_4 = _3053;
                        frontier_phi_82_pred_5 = _3052;
                    }
                    else
                    {
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3273 = _3052;
                        float _3274 = _3053;
                        float _3275 = _3054;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        uint _3279 = _3067;
                        uint _3280;
                        vec4 _3305;
                        float _3306;
                        vec4 _3321;
                        vec3 _3333;
                        vec4 _3349;
                        vec4 _3365;
                        float _3411;
                        bool _3412;
                        for (;;)
                        {
                            uint _3290 = ((_3058 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3279));
                            _3280 = (_3279 + 4294967295u) & _3279;
                            uint _3292 = _3290 * 40u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3306 = _3305.w;
                            uint _3308 = (_3290 * 40u) + 4u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3290 * 40u) + 8u;
                            _3333 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x));
                            uint _3336 = (_3290 * 40u) + 16u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3352 = (_3290 * 40u) + 20u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3290 * 40u) + 24u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3386 = (_3290 * 40u) + 28u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3411 = fma(_1751, _3399.z, fma(_1750, _3399.y, _3399.x * _1749)) + _3399.w;
                            _3412 = !((fma(_1751, _3380.z, fma(_1750, _3380.y, _3380.x * _1749)) + _3380.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3412)
                            {
                                float _3439 = _3305.x - _1749;
                                float _3440 = _3305.y - _1750;
                                float _3441 = _3305.z - _1751;
                                float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                                float _3445 = inversesqrt(_3442);
                                float _3446 = _3445 * _3439;
                                float _3447 = _3445 * _3440;
                                float _3448 = _3445 * _3441;
                                float _3452 = 1.0 - (_3442 / (_3306 * _3306));
                                float _4619 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3457 = sqrt(_3442) * _3321.w;
                                float _3459 = 1.39999997615814208984375 / (_3457 + 1.39999997615814208984375);
                                float _3460 = _3459 * _3459;
                                float _3463 = ((1.0 - _3460) * dot(vec3(_3446, _3447, _3448), vec3(_583, _586, _589))) + _3460;
                                float _3466 = _3457 * _3457;
                                float _3470 = (fma(_1751, _3349.z, fma(_1750, _3349.y, _3349.x * _1749)) + _3349.w) / _3411;
                                float _3471 = (fma(_1751, _3365.z, fma(_1750, _3365.y, _3365.x * _1749)) + _3365.w) / _3411;
                                float _3475 = 1.0 - dot(vec2(_3470, _3471), vec2(_3470, _3471));
                                float _4635 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3477 = _3476 * (((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3453) / ((_3466 * 0.699999988079071044921875) + 1.0));
                                float _3489 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                                float _3490 = 1.0 - _658;
                                float _3497 = sqrt(1.0 - ((1.0 - (_3490 * _3490)) * (1.0 - (_3489 * _3489))));
                                float _3498 = _3497 * _3497;
                                float _3499 = _3498 * _3498;
                                float _3500 = _3446 - _2918;
                                float _3501 = _3447 - _2919;
                                float _3502 = _3448 - _2920;
                                float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                                float _3510 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2918, (-0.0) - _2919, (-0.0) - _2920));
                                float _4646 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3514 = dot(vec3(_583, _586, _589), vec3(_3506 * _3500, _3506 * _3501, _3506 * _3502));
                                float _4657 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3521 = ((_3517 * _3517) * (_3499 + (-1.0))) + 1.0;
                                float _3522 = _3459 * _3498;
                                float _3523 = _3522 * _3522;
                                float _3529 = ((1.0 - _3523) * dot(vec3(_583, _586, _589), vec3(_3446, _3447, _3448))) + _3523;
                                float _4668 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3531 = 1.0 - _3498;
                                float _3541 = (0.5 / (((_3530 * ((_3513 * _3531) + _3498)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3498) * _3513))) * _3530;
                                float _4679 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3551 = (_3476 * _3453) * (((_3499 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3521 * _3521) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3477 * _3321.z;
                                frontier_phi_88_pred_1 = _3477 * _3321.y;
                                frontier_phi_88_pred_2 = _3477 * _3321.x;
                                frontier_phi_88_pred_3 = _3551 * _3333.z;
                                frontier_phi_88_pred_4 = _3551 * _3333.y;
                                frontier_phi_88_pred_5 = _3551 * _3333.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3560 = frontier_phi_88_pred;
                            _3559 = frontier_phi_88_pred_1;
                            _3558 = frontier_phi_88_pred_2;
                            _3557 = frontier_phi_88_pred_3;
                            _3556 = frontier_phi_88_pred_4;
                            _3555 = frontier_phi_88_pred_5;
                            _3263 = _3558 + _3276;
                            _3264 = _3559 + _3277;
                            _3265 = _3560 + _3278;
                            _3260 = _3555 + _3273;
                            _3261 = _3556 + _3274;
                            _3262 = _3557 + _3275;
                            if (_3280 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3280;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3265;
                        frontier_phi_82_pred_1 = _3264;
                        frontier_phi_82_pred_2 = _3263;
                        frontier_phi_82_pred_3 = _3262;
                        frontier_phi_82_pred_4 = _3261;
                        frontier_phi_82_pred_5 = _3260;
                    }
                    _2903 = frontier_phi_82_pred;
                    _2901 = frontier_phi_82_pred_1;
                    _2899 = frontier_phi_82_pred_2;
                    _2897 = frontier_phi_82_pred_3;
                    _2895 = frontier_phi_82_pred_4;
                    _2893 = frontier_phi_82_pred_5;
                    uint _3059 = _3058 + 1u;
                    if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3052 = _2893;
                        _3053 = _2895;
                        _3054 = _2897;
                        _3055 = _2899;
                        _3056 = _2901;
                        _3057 = _2903;
                        _3058 = _3059;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2899;
                frontier_phi_63_64_ladder_1 = _2903;
                frontier_phi_63_64_ladder_2 = _2901;
                frontier_phi_63_64_ladder_3 = _2897;
                frontier_phi_63_64_ladder_4 = _2895;
                frontier_phi_63_64_ladder_5 = _2893;
            }
            else
            {
                frontier_phi_63_64_ladder = _2777;
                frontier_phi_63_64_ladder_1 = _2781;
                frontier_phi_63_64_ladder_2 = _2779;
                frontier_phi_63_64_ladder_3 = _2775;
                frontier_phi_63_64_ladder_4 = _2773;
                frontier_phi_63_64_ladder_5 = _2771;
            }
            _2892 = frontier_phi_63_64_ladder_5;
            _2894 = frontier_phi_63_64_ladder_4;
            _2896 = frontier_phi_63_64_ladder_3;
            _2898 = frontier_phi_63_64_ladder;
            _2900 = frontier_phi_63_64_ladder_2;
            _2902 = frontier_phi_63_64_ladder_1;
        }
        float _2907 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2704 = (_2907 * _2898) + _2216;
        _2706 = (_2907 * _2900) + _2218;
        _2708 = (_2907 * _2902) + _2220;
        _2710 = ((_2892 * _626) * _2907) + _2554;
        _2712 = ((_2894 * _628) * _2907) + _2556;
        _2714 = ((_2896 * _629) * _2907) + _2558;
    }
    else
    {
        _2704 = _2216;
        _2706 = _2218;
        _2708 = _2220;
        _2710 = _2554;
        _2712 = _2556;
        _2714 = _2558;
    }
    float _4695 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4706 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4717 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2731 = ((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2704 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _642))) + ((_2710 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    float _2732 = ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2706 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _642))) + ((_2712 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    float _2733 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2708 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _642))) + ((_2714 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    uint _2734 = _230 + 6u;
    float _2742 = _562 / cbSceneParam._m0[86u].x;
    float _2743 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2757 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2742, _2743, (log2((isnan(cbSceneParam._m0[77u].w) ? _483 : (isnan(_483) ? cbSceneParam._m0[77u].w : min(_483, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2759 = _2757.x;
    float _2760 = _2757.y;
    float _2761 = _2757.z;
    float _2762 = _2757.w;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_483 > cbSceneParam._m0[78u].w)
    {
        float _2796 = isnan(_483) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _483 : min(cbSceneParam._m0[80u].w, _483));
        float _2797 = _2796 / _483;
        float _2808 = _2797 * _534;
        float _2809 = _535 * _2797;
        float _2810 = (-0.0) - _2809;
        float _2812 = _2797 * _536;
        float _2814 = (cbSceneParam._m0[77u].w * _2810) / _2796;
        float _2815 = _2814 + cbSceneParam._m0[79u].w;
        float _2816 = cbSceneParam._m0[79u].w - _2809;
        float _2822 = sqrt(((_2808 * _2808) + (_2809 * _2809)) + (_2812 * _2812));
        float _2825 = (1.0 - (cbSceneParam._m0[77u].w / _2796)) * _2822;
        float _2830 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2832 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2810 - _2814) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2815 > 0.0) ? exp2(_2830 * _2815) : (2.0 - exp2(_2832 * _2815))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2825;
        }
        else
        {
            float _2953 = 1.0 / cbSceneParam._m0[80u].x;
            float _2954 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : max(_2815, _2816));
            float _2955 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : min(_2815, _2816));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            _3009 = ((abs(_2822 / _2810) * cbSceneParam._m0[80u].y) * ((((_2964 - _2965) * 2.0) - ((exp2(_2830 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)))) - exp2(_2830 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))))) * _2953)) - ((exp2(_2832 * _2964) - exp2(_2832 * _2965)) * _2953))) + (_2825 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2742, _2743, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2762);
        _2834 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2759;
        _2836 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2760;
        _2838 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2761;
        _2840 = _3020 * _2762;
    }
    else
    {
        _2834 = _2759;
        _2836 = _2760;
        _2838 = _2761;
        _2840 = _2762;
    }
    bool _3047;
    vec4 _2850;
    vec4 _2872;
    float _2874;
    float _2878;
    float _2879;
    float _2880;
    float _2881;
    bool _2891;
    for (;;)
    {
        _2850 = cbMatDynParam._m0[0u];
        float _2852 = roundEven(_2850.y);
        bool _2853 = _2852 == 3.0;
        float _2854 = log2(_2840);
        float _2861 = exp2(_2854 * cbSceneParam._m0[78u].x) * _2731;
        float _2862 = exp2(_2854 * cbSceneParam._m0[78u].y) * _2732;
        float _2863 = exp2(_2854 * cbSceneParam._m0[78u].z) * _2733;
        float _2870 = _550 + (-0.5);
        _2872 = cbMtdParam._m0[1u];
        _2874 = _2872.y * _2870;
        float _2877 = (_2852 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2878 = _2877 * (_2853 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2834)));
        _2879 = _2877 * (_2853 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2836)));
        _2880 = _2877 * (_2853 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2838)));
        _2881 = _2870 * 0.999000012874603271484375;
        _2891 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2891)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2881) < 0.5)
            {
                _3047 = true;
                break;
            }
        }
        uint _2988 = _602 + uint(_2850.w);
        if ((cbInstanceData._m0[_2988].w < 1.0) && ((cbInstanceData._m0[_2988].w + _2881) < 0.5))
        {
            _3047 = true;
            break;
        }
        if ((_2874 + 1.0) < _2872.x)
        {
            _3047 = true;
            break;
        }
        _3047 = false;
        break;
    }
    float _3251;
    if (_3047)
    {
        discard_state = true;
        _3251 = 0.0;
    }
    else
    {
        _3251 = cbInstanceData._m0[_2734].w;
    }
    SV_Target.x = _2878;
    SV_Target.y = _2879;
    SV_Target.z = _2880;
    SV_Target.w = _3251;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2734].w;
    discard_exit();
}


