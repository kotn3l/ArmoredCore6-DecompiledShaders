#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1314;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3664 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _390) + _459;
    float _471 = ((((_438.x - _457) * _390) + _457) * 2.0) + (-1.0);
    float _473 = ((((_438.y - _458) * _390) + _458) * 2.0) + (-1.0);
    float _474 = dot(vec2(_471, _473), vec2(_471, _473));
    float _3675 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))));
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _522 = _520.x;
    float _523 = 1.0 - _522;
    float _529 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _532 = ((isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : min(_529, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _541 = (_532 - ((((((_522 - _523) * cbMtdParam._m0[24u].z) + _523) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _532))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3696 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _549 = (_542 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) + _397;
    float _550 = (_542 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) + _398;
    float _551 = (_542 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) + _399;
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _593 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_565 - _566) * cbMtdParam._m0[24u].w) + _566) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3707 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _602 = ((((cbMtdParam._m0[10u].x - _549) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _594) + _549;
    float _603 = ((((cbMtdParam._m0[10u].y - _550) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _594) + _550;
    float _604 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _551)) * _594) + _551;
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _632 = _630.x;
    float _650 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _632) * _390) + _632;
    float _654 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _650) * cbMtdParam._m0[19u].z) + _650;
    float _656 = _654 - (_654 * _542);
    float _658 = _656 - (_656 * _594);
    float _662 = (cbMtdParam._m0[19u].w * (_495.z - _468)) + _468;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _683 = (_676.x * 2.0) + (-1.0);
    float _684 = (_676.y * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _3718 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _693 = (_542 * (_676.z - _662)) + _662;
    float _696 = ((cbMtdParam._m0[23u].y - _693) * _594) + _693;
    vec4 _715 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _721 = (_715.x * 2.0) + (-1.0);
    float _722 = (_715.y * 2.0) + (-1.0);
    float _723 = dot(vec2(_721, _722), vec2(_721, _722));
    float _3729 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _731 = (((_495.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _732 = (((_495.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _473;
    float _744 = (((_683 - _731) + (cbMtdParam._m0[21u].x * _731)) * _542) + _731;
    float _745 = (((_684 - _732) + (cbMtdParam._m0[21u].x * _732)) * _542) + _732;
    float _746 = (_542 * (sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) - _479)) + _479;
    float _757 = (((_721 - _744) + (_744 * cbMtdParam._m0[22u].z)) * _594) + _744;
    float _758 = (((_722 - _745) + (_745 * cbMtdParam._m0[22u].z)) * _594) + _745;
    float _759 = ((sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) - _746) * _594) + _746;
    float _761 = cbMtdParam._m0[22u].x + _495.w;
    float _764 = fma(_759, _240 * NORMAL.x, fma(_758, _247 * TANGENT.x, (_233 * _225) * _757));
    float _767 = fma(_759, _240 * NORMAL.y, fma(_758, _247 * TANGENT.y, (_233 * _226) * _757));
    float _770 = fma(_759, _240 * NORMAL.z, fma(_758, _247 * TANGENT.z, (_233 * _227) * _757));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _3740 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _778 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3762 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3773 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3784 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3795 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _783 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _797 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    float _862 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _863 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _881 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _884 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _887 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _901 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_901].z;
    float _3806 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _913 = 1.0 - _783;
    float _914 = _910 * _913;
    float _915 = _911 * _913;
    float _916 = _912 * _913;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _783;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _783;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _783;
    float _924 = _921 + 0.039999999105930328369140625;
    float _926 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    vec4 _936 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _862, cbSceneParam._m0[86u].y * _863));
    float _940 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * TEXCOORD_5.w) * _936.x;
    float _941 = dot(vec3(_775, _776, _777), vec3(_854, _855, _856));
    float _944 = _941 * 2.0;
    float _948 = (_944 * _775) - _854;
    float _949 = (_944 * _776) - _855;
    float _950 = (_944 * _777) - _856;
    float _954 = abs(dot(vec3(_854, _855, _856), vec3(_775, _776, _777)));
    float _3839 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_778);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _975 = (1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _976 = _969 * _956;
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1313;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1038 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1042 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1046 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1071 = _1004 + _775;
        float _1072 = _1008 + _776;
        float _1073 = _1012 + _777;
        float _1083 = fma(_1073, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071)) - _1038;
        float _1084 = fma(_1073, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071)) - _1042;
        float _1085 = fma(_1073, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071)) - _1046;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1038 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1042 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[34u].z) + ((((((_1046 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1141 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1107.x + (-0.5));
        float _1143 = _1141 * (_1107.y + (-0.5));
        float _1144 = _1141 * (_1107.z + (-0.5));
        float _1151 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1114.x + (-0.5));
        float _1153 = _1151 * (_1114.y + (-0.5));
        float _1154 = _1151 * (_1114.z + (-0.5));
        float _1161 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1121.x + (-0.5));
        float _1163 = _1161 * (_1121.y + (-0.5));
        float _1164 = _1161 * (_1121.z + (-0.5));
        float _1171 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1128.x + (-0.5));
        float _1173 = _1171 * (_1128.y + (-0.5));
        float _1174 = _1171 * (_1128.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1195 = (dot(vec3(_775, _776, _777), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1205 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3887 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1207 + 1.0))) + _1212) * _1175;
        float _1222 = _1143 * 0.5;
        float _1223 = _1153 * 0.5;
        float _1224 = _1163 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_775, _776, _777), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3920 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1249 + 1.0))) + _1254) * _1176;
        float _1264 = _1144 * 0.5;
        float _1265 = _1154 * 0.5;
        float _1266 = _1164 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_775, _776, _777), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3953 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1291 + 1.0))) + _1296) * _1177;
        _1313 = _1144;
        _1315 = _1143;
        _1316 = _1142;
        _1317 = _1154;
        _1318 = _1153;
        _1319 = _1152;
        _1320 = _1164;
        _1321 = _1163;
        _1322 = _1162;
        _1323 = _1177;
        _1324 = _1176;
        _1325 = _1175;
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1314;
        _1315 = _1314;
        _1316 = _1314;
        _1317 = _1314;
        _1318 = _1314;
        _1319 = _1314;
        _1320 = _1314;
        _1321 = _1314;
        _1322 = _1314;
        _1323 = _1314;
        _1324 = _1314;
        _1325 = _1314;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1353 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1357 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1361 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1384 = _1004 + _775;
        float _1385 = _1008 + _776;
        float _1386 = _1012 + _777;
        float _1396 = fma(_1386, cbModelParam._m0[30u].z, fma(_1385, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1384)) - _1353;
        float _1397 = fma(_1386, cbModelParam._m0[31u].z, fma(_1385, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1384)) - _1357;
        float _1398 = fma(_1386, cbModelParam._m0[32u].z, fma(_1385, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1384)) - _1361;
        float _1402 = inversesqrt(dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398)));
        float _1415 = ((_1402 * _1396) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1353 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1402 * _1397) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1357 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1402 * _1398) / cbModelParam._m0[35u].z) + ((((((_1361 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        float _1452 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1419.x + (-0.5));
        float _1454 = _1452 * (_1419.y + (-0.5));
        float _1455 = _1452 * (_1419.z + (-0.5));
        float _1462 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1426.x + (-0.5));
        float _1464 = _1462 * (_1426.y + (-0.5));
        float _1465 = _1462 * (_1426.z + (-0.5));
        float _1472 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1433.x + (-0.5));
        float _1474 = _1472 * (_1433.y + (-0.5));
        float _1475 = _1472 * (_1433.z + (-0.5));
        float _1482 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1440.x + (-0.5));
        float _1484 = _1482 * (_1440.y + (-0.5));
        float _1485 = _1482 * (_1440.z + (-0.5));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = _1453 * 0.5;
        float _1490 = _1463 * 0.5;
        float _1491 = _1473 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_775, _776, _777), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4016 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1516 + 1.0))) + _1521) * _1486;
        float _1531 = _1454 * 0.5;
        float _1532 = _1464 * 0.5;
        float _1533 = _1474 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_775, _776, _777), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4049 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1558 + 1.0))) + _1563) * _1487;
        float _1573 = _1455 * 0.5;
        float _1574 = _1465 * 0.5;
        float _1575 = _1475 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_775, _776, _777), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4082 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1600 + 1.0))) + _1605) * _1488;
        _1622 = _1455;
        _1623 = _1454;
        _1624 = _1453;
        _1625 = _1465;
        _1626 = _1464;
        _1627 = _1463;
        _1628 = _1475;
        _1629 = _1474;
        _1630 = _1473;
        _1631 = _1488;
        _1632 = _1487;
        _1633 = _1486;
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
    }
    else
    {
        _1622 = _1314;
        _1623 = _1314;
        _1624 = _1314;
        _1625 = _1314;
        _1626 = _1314;
        _1627 = _1314;
        _1628 = _1314;
        _1629 = _1314;
        _1630 = _1314;
        _1631 = _1314;
        _1632 = _1314;
        _1633 = _1314;
        _1634 = 0.0;
        _1635 = 0.0;
        _1636 = 0.0;
    }
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1326)) + _1326;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1327)) + _1327;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1328)) + _1328;
    float _1669 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1647, cbSceneParam._m0[89u].y, _1646 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1647, cbSceneParam._m0[90u].y, _1646 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1647, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1646));
    float _1690 = _948 * 0.5;
    float _1691 = _949 * 0.5;
    float _1692 = _950 * 0.5;
    float _1693 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1696 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1699 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1733;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1706 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1313, _1317, _1320, _1323));
        float _1710 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1714 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1721 = dot(vec4(cbModelParam._m0[39u]), vec4(_1690, _1691, _1692, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1744;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1735 = dot(vec4(cbModelParam._m0[40u]), vec4(_1690, _1691, _1692, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1748 = (_1744 * cbModelParam._m0[1u].x) + (_1733 * (1.0 - cbModelParam._m0[1u].x));
    float _1758 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1758 : min(cbModelParam._m0[25u].z, _1758));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1806 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1810 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1814 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1817 = fma(_950, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948));
        float _1820 = fma(_950, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948));
        float _1823 = fma(_950, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948));
        float _1851;
        if (_1817 > 0.0)
        {
            _1851 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1851 = frontier_phi_14_12_ladder;
        }
        float _2074;
        if (_1820 > 0.0)
        {
            _2074 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2074 = frontier_phi_23_19_ladder;
        }
        float _2331;
        if (_1823 > 0.0)
        {
            _2331 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2331 = frontier_phi_35_30_ladder;
        }
        float _2333 = isnan(_2074) ? _1851 : (isnan(_1851) ? _2074 : min(_1851, _2074));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1817) + _1806;
        float _2339 = (_2334 * _1820) + _1810;
        float _2340 = (_2334 * _1823) + _1814;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1759);
            frontier_phi_13_35_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1839 = frontier_phi_13_35_ladder_2;
        _1841 = frontier_phi_13_35_ladder_1;
        _1843 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_948, _949, _950), _1759);
        _1839 = _1827.x * cbModelParam._m0[1u].y;
        _1841 = _1827.y * cbModelParam._m0[1u].y;
        _1843 = _1827.z * cbModelParam._m0[1u].y;
    }
    float _1847 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1847 : min(cbModelParam._m0[25u].w, _1847));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1901 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1905 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1909 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1912 = fma(_950, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948));
        float _1915 = fma(_950, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948));
        float _1918 = fma(_950, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948));
        float _2079;
        if (_1912 > 0.0)
        {
            _2079 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2079 = frontier_phi_25_21_ladder;
        }
        float _2358;
        if (_1915 > 0.0)
        {
            _2358 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2358 = frontier_phi_37_32_ladder;
        }
        float _2571;
        if (_1918 > 0.0)
        {
            _2571 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2571 = frontier_phi_46_43_ladder;
        }
        float _2573 = isnan(_2358) ? _2079 : (isnan(_2079) ? _2358 : min(_2079, _2358));
        float _2574 = isnan(_2571) ? _2573 : (isnan(_2573) ? _2571 : min(_2573, _2571));
        float _2578 = (_2574 * _1912) + _1901;
        float _2579 = (_2574 * _1915) + _1905;
        float _2580 = (_2574 * _1918) + _1909;
        float _2581 = _2574 * 9.9999997473787516355514526367188e-05;
        float _2582 = (-1.0) - _2581;
        float _2584 = _2581 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2580 > _2584) || ((_2580 < _2582) || ((_2579 > _2584) || ((_2579 < _2582) || ((_2578 < _2582) || (_2578 > _2584))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2580, cbModelParam._m0[17u].z, fma(_2579, cbModelParam._m0[17u].y, _2578 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2580, cbModelParam._m0[18u].z, fma(_2579, cbModelParam._m0[18u].y, _2578 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2580, cbModelParam._m0[19u].z, fma(_2579, cbModelParam._m0[19u].y, _2578 * cbModelParam._m0[19u].x))), _1848);
            frontier_phi_22_46_ladder = _2779.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2779.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2779.x * cbModelParam._m0[1u].z;
        }
        _1937 = frontier_phi_22_46_ladder_2;
        _1939 = frontier_phi_22_46_ladder_1;
        _1941 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_948, _949, _950), _1848);
        _1937 = _1921.x * cbModelParam._m0[1u].z;
        _1939 = _1921.y * cbModelParam._m0[1u].z;
        _1941 = _1921.z * cbModelParam._m0[1u].z;
    }
    float _1954 = (((_975 * _924) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1937 - _1839)) + _1839);
    float _1956 = (((_975 * _926) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1939 - _1841)) + _1841);
    float _1958 = (((_975 * _927) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1941 - _1843)) + _1843);
    float _1961 = fma(_1958, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1954 * cbSceneParam._m0[89u].x));
    float _1964 = fma(_1958, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1954 * cbSceneParam._m0[90u].x));
    float _1967 = fma(_1958, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, _1954 * cbSceneParam._m0[91u].x));
    vec4 _1975 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_862, _863));
    float _1977 = _1975.w;
    float _1989 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1977);
    float _1990 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1977);
    float _1991 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1977);
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2005 = _940 + (-1.0);
    float _2010 = (cbLight._m0[_1998].x * _2005) + 1.0;
    float _2011 = (cbLight._m0[_1998].y * _2005) + 1.0;
    float _2012 = (cbLight._m0[_1998].z * _2005) + 1.0;
    float _2013 = (cbLight._m0[_1998].w * _2005) + 1.0;
    uint _2014 = _1997 + 5u;
    float _2020 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2024 = _1997 + 4u;
    float _2033 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2037 = _1997 | 1u;
    float _2048 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_775, _776, _777));
    float _2051 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_775, _776, _777));
    float _4218 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _4229 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2056 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2058 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2065 = ((cbLight._m0[_2014].x * _2020) * _2058) + (((cbLight._m0[_2024].x * _1989) * _2033) * _2056);
    float _2066 = ((_2020 * cbLight._m0[_2014].y) * _2058) + (((cbLight._m0[_2024].y * _1990) * _2033) * _2056);
    float _2067 = ((_2020 * cbLight._m0[_2014].z) * _2058) + (((cbLight._m0[_2024].z * _1991) * _2033) * _2056);
    uvec4 _2071 = floatBitsToUint(cbLight._m0[_1997 + 12u]);
    bool _2073 = _2071.x == 0u;
    float _2084;
    float _2086;
    float _2088;
    if (_2073)
    {
        _2084 = _2065;
        _2086 = _2066;
        _2088 = _2067;
    }
    else
    {
        uint _2092 = _1997 + 6u;
        float _2108 = (dot(vec3(cbLight._m0[_1997 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _4240 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2111 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2084 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _2065;
        _2086 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _2066;
        _2088 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _2067;
    }
    bool _2091 = _2071.y == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2091)
    {
        _2129 = _2084;
        _2131 = _2086;
        _2133 = _2088;
    }
    else
    {
        uint _2302 = _1997 + 7u;
        float _2318 = (dot(vec3(cbLight._m0[_1997 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4256 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2321 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2129 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2084;
        _2131 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2086;
        _2133 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2088;
    }
    uint _2136 = _1997 + 8u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _778) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1997].x + _854;
    float _2152 = cbLight._m0[_1997].y + _855;
    float _2153 = cbLight._m0[_1997].z + _856;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_1997].xyz));
    float _4272 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2165 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2166 = dot(vec3(_775, _776, _777), vec3(_2158, _2159, _2160));
    float _4294 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2158, _2159, _2160));
    float _4305 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2150 * _2150;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2186 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2187 = 0.959999978542327880859375 - _921;
    float _2189 = 0.959999978542327880859375 - _922;
    float _2190 = 0.959999978542327880859375 - _923;
    float _2197 = 1.0 - _2150;
    float _2208 = (0.5 / (((_2165 * ((_2164 * _2197) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2197) + _2150) * _2164))) * _2164;
    float _4316 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    uint _2224 = _1997 + 9u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _778) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2037].x + _854;
    float _2238 = cbLight._m0[_2037].y + _855;
    float _2239 = cbLight._m0[_2037].z + _856;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2037].xyz));
    float _4327 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2251 = dot(vec3(_775, _776, _777), vec3(_2244, _2245, _2246));
    float _4338 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2255 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2244, _2245, _2246));
    float _4349 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2259 = _2236 * _2236;
    float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2277 = 1.0 - _2236;
    float _2287 = (0.5 / (((_2165 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2277) + _2236) * _2250))) * _2250;
    float _4360 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
    float _2299 = (((((_2270 * _2187) + _924) * cbLight._m0[_2224].x) * _2289) * _2020) + ((((cbLight._m0[_2136].x * _1989) * ((_2186 * _2187) + _924)) * _2210) * _2033);
    float _2300 = (((((_2270 * _2189) + _926) * cbLight._m0[_2224].y) * _2289) * _2020) + ((((cbLight._m0[_2136].y * _1990) * ((_2186 * _2189) + _926)) * _2210) * _2033);
    float _2301 = (((((_2270 * _2190) + _927) * cbLight._m0[_2224].z) * _2289) * _2020) + ((((cbLight._m0[_2136].z * _1991) * ((_2186 * _2190) + _927)) * _2210) * _2033);
    float _2363;
    float _2365;
    float _2367;
    if (_2073)
    {
        _2363 = _2299;
        _2365 = _2300;
        _2367 = _2301;
    }
    else
    {
        uint _2369 = _1997 + 2u;
        uint _2373 = _1997 + 10u;
        float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _778) * 0.949999988079071044921875);
        float _2388 = _2387 * _2387;
        float _2389 = cbLight._m0[_2369].x + _854;
        float _2390 = cbLight._m0[_2369].y + _855;
        float _2391 = cbLight._m0[_2369].z + _856;
        float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
        float _2396 = _2395 * _2389;
        float _2397 = _2395 * _2390;
        float _2398 = _2395 * _2391;
        float _2399 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2369].xyz));
        float _4371 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2403 = dot(vec3(_775, _776, _777), vec3(_2396, _2397, _2398));
        float _4382 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2407 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2396, _2397, _2398));
        float _4393 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2411 = _2388 * _2388;
        float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
        float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2429 = 1.0 - _2388;
        float _2439 = (0.5 / (((_2165 * ((_2402 * _2429) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2429) + _2388) * _2402))) * _2402;
        float _4404 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2363 = (((((_2422 * _2187) + _924) * cbLight._m0[_2373].x) * _2441) * _2442) + _2299;
        _2365 = (((((_2422 * _2189) + _926) * cbLight._m0[_2373].y) * _2441) * _2442) + _2300;
        _2367 = (((((_2422 * _2190) + _927) * cbLight._m0[_2373].z) * _2441) * _2442) + _2301;
    }
    float _2477;
    float _2479;
    float _2481;
    if (_2091)
    {
        _2477 = _2363;
        _2479 = _2365;
        _2481 = _2367;
    }
    else
    {
        uint _2488 = _1997 + 3u;
        uint _2492 = _1997 + 11u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _778) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _854;
        float _2509 = cbLight._m0[_2488].y + _855;
        float _2510 = cbLight._m0[_2488].z + _856;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2488].xyz));
        float _4420 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2522 = dot(vec3(_775, _776, _777), vec3(_2515, _2516, _2517));
        float _4431 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4442 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2548 = 1.0 - _2507;
        float _2558 = (0.5 / (((_2165 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2548) + _2507) * _2521))) * _2521;
        float _4453 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2477 = (((((_2541 * _2187) + _924) * cbLight._m0[_2492].x) * _2560) * _2561) + _2363;
        _2479 = (((((_2541 * _2189) + _926) * cbLight._m0[_2492].y) * _2560) * _2561) + _2365;
        _2481 = (((((_2541 * _2190) + _927) * cbLight._m0[_2492].z) * _2560) * _2561) + _2367;
    }
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_1995.y == 0u)
    {
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2636;
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2636;
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2636;
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.x;
        uint _2663 = uint((float(_2651.y) * floor(float(uint(cbSceneParam._m0[85u].y * _863) / _2652))) + floor(float(uint(cbSceneParam._m0[85u].x * _862) / _2652)));
        float _2673 = (log2(_2639 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2674 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        uint _2677 = uint(isnan(14.0) ? _2674 : (isnan(_2674) ? 14.0 : min(_2674, 14.0)));
        uvec4 _2682 = texelFetch(g_lightClusterGridBuffer, int(((_2677 << 2u) + (_2663 << 6u)) >> 2u));
        uint _2683 = _2682.x;
        uint _2684 = _2651.z;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((((1u << ((_2684 >> 4u) & 15u)) + 4294967295u) & _2683) == 0u) || ((_2684 & 240u) == 0u))
        {
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
        }
        else
        {
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            uint _2935 = 0u;
            uint _2944;
            bool _2945;
            for (;;)
            {
                _2944 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                _2945 = _2944 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2945)
                {
                    frontier_phi_61_pred = _2929;
                    frontier_phi_61_pred_1 = _2934;
                    frontier_phi_61_pred_2 = _2933;
                    frontier_phi_61_pred_3 = _2932;
                    frontier_phi_61_pred_4 = _2931;
                    frontier_phi_61_pred_5 = _2930;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2944;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2935 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _2637;
                        float _3120 = _3079.y - _2638;
                        float _3121 = _3079.z - _2639;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_881, _884, _887), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4479 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3150 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3154 = (-0.0) - _2637;
                        float _3155 = (-0.0) - _2638;
                        float _3156 = (-0.0) - _2639;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3171 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3172 = 1.0 - _956;
                        float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                        float _3180 = _3179 * _3179;
                        float _3181 = _3180 * _3180;
                        float _3182 = _3161 + _3126;
                        float _3183 = _3162 + _3127;
                        float _3184 = _3163 + _3128;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3192 = dot(vec3(_881, _884, _887), vec3(_3161, _3162, _3163));
                        float _4495 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3196 = dot(vec3(_881, _884, _887), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                        float _4506 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                        float _3204 = _3139 * _3180;
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3129) + _3205;
                        float _4517 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3210 = 1.0 - _3180;
                        float _3220 = (0.5 / (((_3209 * ((_3195 * _3210) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3180) * _3195))) * _3209;
                        float _4528 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3231 = (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3203 * _3203) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2988 = (_3150 * _3098.x) + _3056;
                        _2989 = (_3150 * _3098.y) + _3057;
                        _2990 = (_3150 * _3098.z) + _3058;
                        _2985 = (_3231 * _3115.x) + _3053;
                        _2986 = (_3231 * _3115.y) + _3054;
                        _2987 = (_3231 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_61_pred = _2985;
                    frontier_phi_61_pred_1 = _2990;
                    frontier_phi_61_pred_2 = _2989;
                    frontier_phi_61_pred_3 = _2988;
                    frontier_phi_61_pred_4 = _2987;
                    frontier_phi_61_pred_5 = _2986;
                }
                _2785 = frontier_phi_61_pred;
                _2795 = frontier_phi_61_pred_1;
                _2793 = frontier_phi_61_pred_2;
                _2791 = frontier_phi_61_pred_3;
                _2789 = frontier_phi_61_pred_4;
                _2787 = frontier_phi_61_pred_5;
                uint _2936 = _2935 + 1u;
                if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2929 = _2785;
                    _2930 = _2787;
                    _2931 = _2789;
                    _2932 = _2791;
                    _2933 = _2793;
                    _2934 = _2795;
                    _2935 = _2936;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
        }
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.z;
        uint _2801 = (_2799 >> 8u) & 15u;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((4294967295u << _2801) & _2683) == 0u)
        {
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
            _2905 = _2792;
            _2907 = _2794;
        }
        else
        {
            float _2922 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
            float _2923 = _2922 * _2637;
            float _2924 = _2922 * _2638;
            float _2925 = _2922 * _2639;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2801 < ((_2799 >> 12u) & 15u))
            {
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _3036 = _2784;
                float _3037 = _2786;
                float _3038 = _2788;
                float _3039 = _2790;
                float _3040 = _2792;
                float _3041 = _2794;
                uint _3042 = _2801;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3052)
                    {
                        frontier_phi_67_pred = _3039;
                        frontier_phi_67_pred_1 = _3040;
                        frontier_phi_67_pred_2 = _3041;
                        frontier_phi_67_pred_3 = _3038;
                        frontier_phi_67_pred_4 = _3037;
                        frontier_phi_67_pred_5 = _3036;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        float _3253 = _3040;
                        float _3254 = _3041;
                        uint _3255 = _3051;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3324;
                        vec4 _3340;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3266 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3311 = (_3266 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3266 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3266 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3266 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_2639, _3374.z, fma(_2638, _3374.y, _3374.x * _2637)) + _3374.w;
                            _3387 = !((fma(_2639, _3355.z, fma(_2638, _3355.y, _3355.x * _2637)) + _3355.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3281.x - _2637;
                                float _3415 = _3281.y - _2638;
                                float _3416 = _3281.z - _2639;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3282 * _3282));
                                float _4539 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3432 = sqrt(_3417) * _3297.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_881, _884, _887))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_2639, _3324.z, fma(_2638, _3324.y, _3324.x * _2637)) + _3324.w) / _3386;
                                float _3446 = (fma(_2639, _3340.z, fma(_2638, _3340.y, _3340.x * _2637)) + _3340.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4555 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _956;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2923;
                                float _3476 = _3422 - _2924;
                                float _3477 = _3423 - _2925;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_881, _884, _887), vec3((-0.0) - _2923, (-0.0) - _2924, (-0.0) - _2925));
                                float _4566 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3489 = dot(vec3(_881, _884, _887), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4577 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_881, _884, _887), vec3(_3421, _3422, _3423))) + _3498;
                                float _4588 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4599 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3526 * _3309.x;
                                frontier_phi_73_pred_1 = _3526 * _3309.y;
                                frontier_phi_73_pred_2 = _3452 * _3297.z;
                                frontier_phi_73_pred_3 = _3452 * _3297.y;
                                frontier_phi_73_pred_4 = _3452 * _3297.x;
                                frontier_phi_73_pred_5 = _3526 * _3309.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3530 = frontier_phi_73_pred;
                            _3531 = frontier_phi_73_pred_1;
                            _3535 = frontier_phi_73_pred_2;
                            _3534 = frontier_phi_73_pred_3;
                            _3533 = frontier_phi_73_pred_4;
                            _3532 = frontier_phi_73_pred_5;
                            _3239 = _3533 + _3252;
                            _3240 = _3534 + _3253;
                            _3241 = _3535 + _3254;
                            _3236 = _3530 + _3249;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3239;
                        frontier_phi_67_pred_1 = _3240;
                        frontier_phi_67_pred_2 = _3241;
                        frontier_phi_67_pred_3 = _3238;
                        frontier_phi_67_pred_4 = _3237;
                        frontier_phi_67_pred_5 = _3236;
                    }
                    _2904 = frontier_phi_67_pred;
                    _2906 = frontier_phi_67_pred_1;
                    _2908 = frontier_phi_67_pred_2;
                    _2902 = frontier_phi_67_pred_3;
                    _2900 = frontier_phi_67_pred_4;
                    _2898 = frontier_phi_67_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2898;
                        _3037 = _2900;
                        _3038 = _2902;
                        _3039 = _2904;
                        _3040 = _2906;
                        _3041 = _2908;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2906;
                frontier_phi_55_56_ladder_1 = _2908;
                frontier_phi_55_56_ladder_2 = _2904;
                frontier_phi_55_56_ladder_3 = _2902;
                frontier_phi_55_56_ladder_4 = _2900;
                frontier_phi_55_56_ladder_5 = _2898;
            }
            else
            {
                frontier_phi_55_56_ladder = _2792;
                frontier_phi_55_56_ladder_1 = _2794;
                frontier_phi_55_56_ladder_2 = _2790;
                frontier_phi_55_56_ladder_3 = _2788;
                frontier_phi_55_56_ladder_4 = _2786;
                frontier_phi_55_56_ladder_5 = _2784;
            }
            _2897 = frontier_phi_55_56_ladder_5;
            _2899 = frontier_phi_55_56_ladder_4;
            _2901 = frontier_phi_55_56_ladder_3;
            _2903 = frontier_phi_55_56_ladder_2;
            _2905 = frontier_phi_55_56_ladder;
            _2907 = frontier_phi_55_56_ladder_1;
        }
        float _2912 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2696 = (_2912 * _2903) + _2129;
        _2698 = (_2912 * _2905) + _2131;
        _2700 = (_2912 * _2907) + _2133;
        _2702 = ((_2897 * _924) * _2912) + _2477;
        _2704 = ((_2899 * _926) * _2912) + _2479;
        _2706 = ((_2901 * _927) * _2912) + _2481;
    }
    else
    {
        _2696 = _2129;
        _2698 = _2131;
        _2700 = _2133;
        _2702 = _2477;
        _2704 = _2479;
        _2706 = _2481;
    }
    float _4615 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4626 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4637 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    uint _2726 = _253 + 6u;
    float _2734 = _862 / cbSceneParam._m0[86u].x;
    float _2735 = _863 / cbSceneParam._m0[86u].y;
    vec4 _2749 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2734, _2735, (log2((isnan(cbSceneParam._m0[77u].w) ? _797 : (isnan(_797) ? cbSceneParam._m0[77u].w : min(_797, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2751 = _2749.x;
    float _2752 = _2749.y;
    float _2753 = _2749.z;
    float _2754 = _2749.w;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_797 > cbSceneParam._m0[78u].w)
    {
        float _2809 = isnan(_797) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _797 : min(cbSceneParam._m0[80u].w, _797));
        float _2810 = _2809 / _797;
        float _2821 = _2810 * _847;
        float _2822 = _848 * _2810;
        float _2823 = (-0.0) - _2822;
        float _2825 = _2810 * _849;
        float _2827 = (cbSceneParam._m0[77u].w * _2823) / _2809;
        float _2828 = _2827 + cbSceneParam._m0[79u].w;
        float _2829 = cbSceneParam._m0[79u].w - _2822;
        float _2835 = sqrt(((_2821 * _2821) + (_2822 * _2822)) + (_2825 * _2825));
        float _2838 = (1.0 - (cbSceneParam._m0[77u].w / _2809)) * _2835;
        float _2843 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2845 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2823 - _2827) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2828 > 0.0) ? exp2(_2843 * _2828) : (2.0 - exp2(_2845 * _2828))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2838;
        }
        else
        {
            float _2958 = 1.0 / cbSceneParam._m0[80u].x;
            float _2959 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : max(_2828, _2829));
            float _2960 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : min(_2828, _2829));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            _2998 = ((abs(_2835 / _2823) * cbSceneParam._m0[80u].y) * ((((_2969 - _2970) * 2.0) - ((exp2(_2843 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0)))) - exp2(_2843 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))))) * _2958)) - ((exp2(_2845 * _2969) - exp2(_2845 * _2970)) * _2958))) + (_2838 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2734, _2735, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2754);
        _2847 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2751;
        _2849 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2752;
        _2851 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2753;
        _2853 = _3009 * _2754;
    }
    else
    {
        _2847 = _2751;
        _2849 = _2752;
        _2851 = _2753;
        _2853 = _2754;
    }
    float _2865 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2866 = _2865 == 3.0;
    float _2867 = log2(_2853);
    float _2874 = exp2(_2867 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2696 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _940))) + ((_2702 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _2875 = exp2(_2867 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2698 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _940))) + ((_2704 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _2876 = exp2(_2867 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2700 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _940))) + ((_2706 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _2885 = (_2865 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2885 * (_2866 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.y = _2885 * (_2866 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.z = _2885 * (_2866 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2851)));
    SV_Target.w = cbInstanceData._m0[_2726].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2726].w;
}


