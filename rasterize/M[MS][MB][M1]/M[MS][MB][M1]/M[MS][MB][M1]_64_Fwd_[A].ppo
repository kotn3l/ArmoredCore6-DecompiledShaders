#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1194;
float _3577;
float _3578;
float _3579;
float _3580;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3589 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3600 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3611 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[24u].y) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3622 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _422 = (_415 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _423 = (_415 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _424 = (_415 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _428 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _422;
    float _431 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _423;
    float _434 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _424;
    float _441 = ((_422 - _428) * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) + _428;
    float _442 = ((_423 - _431) * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) + _431;
    float _443 = ((_424 - _434) * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) + _434;
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    float _511 = ((_481.z - _502) * _415) + _502;
    float _514 = ((((_481.x - _500) * _415) + _500) * 2.0) + (-1.0);
    float _515 = ((((_481.y - _501) * _415) + _501) * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3633 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _521 = sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))));
    float _526 = _514 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_456.x * 2.0) + (-1.0)));
    float _527 = _515 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_456.y * 2.0) + (-1.0)));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _570 = _568.x;
    float _588 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _283) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _284) + cbTextureTilingScale._m0[9u].w)).x - _570) * _415) + _570;
    float _592 = ((_554.x - _588) * cbMtdParam._m0[19u].z) + _588;
    float _597 = (((_456.z - _511) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _511;
    float _599 = cbMtdParam._m0[22u].x + _540.w;
    float _602 = fma(_521, _230 * NORMAL.x, fma(_527, _237 * TANGENT.x, (_223 * _215) * _526));
    float _605 = fma(_521, _230 * NORMAL.y, fma(_527, _237 * TANGENT.y, (_223 * _216) * _526));
    float _608 = fma(_521, _230 * NORMAL.z, fma(_527, _237 * TANGENT.z, (_223 * _217) * _526));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3644 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _616 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3666 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3677 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3688 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3699 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _621 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    vec4 _700 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _702 = _700.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _874 = sqrt(((_686 * _686) + (_687 * _687)) + (_688 * _688));
        float _880 = (cbMatDynParam._m0[5u].x * _874) + cbMatDynParam._m0[5u].y;
        float _3710 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _885 = (cbMatDynParam._m0[5u].z * _874) + cbMatDynParam._m0[5u].w;
        float _3721 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) - _881)) + _881) < ((_702 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _732 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _735 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _738 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _751 = _264 + 9u;
    uint _752 = _751 + uint(cbMatDynParam._m0[0u].w);
    float _758 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_752].x;
    float _759 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_752].y;
    float _760 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_752].z;
    float _3732 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _764 = 1.0 - _621;
    float _765 = _761 * _764;
    float _766 = _762 * _764;
    float _767 = _763 * _764;
    float _772 = (_761 + (-0.039999999105930328369140625)) * _621;
    float _773 = (_762 + (-0.039999999105930328369140625)) * _621;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _621;
    float _775 = _772 + 0.039999999105930328369140625;
    float _777 = _773 + 0.039999999105930328369140625;
    float _778 = _774 + 0.039999999105930328369140625;
    vec4 _787 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _791 = ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * TEXCOORD_5.w) * _787.x;
    float _792 = dot(vec3(_613, _614, _615), vec3(_693, _694, _695));
    float _795 = _792 * 2.0;
    float _799 = (_795 * _613) - _693;
    float _800 = (_795 * _614) - _694;
    float _801 = (_795 * _615) - _695;
    float _805 = abs(dot(vec3(_693, _694, _695), vec3(_613, _614, _615)));
    float _3765 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _807 = sqrt(_616);
    float _820 = exp2((_807 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_807 * 3.0));
    float _826 = (1.0 - _820) * ((_807 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _827 = _820 * _807;
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1193;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _918 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _922 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _926 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _951 = _855 + _613;
        float _952 = _859 + _614;
        float _953 = _863 + _615;
        float _963 = fma(_953, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951)) - _918;
        float _964 = fma(_953, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951)) - _922;
        float _965 = fma(_953, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951)) - _926;
        float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
        float _982 = ((_969 * _963) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_918 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_969 * _964) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_922 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_969 * _965) / cbModelParam._m0[34u].z) + ((((((_926 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_982, _983, _984), 0.0);
        float _1021 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_987.x + (-0.5));
        float _1023 = _1021 * (_987.y + (-0.5));
        float _1024 = _1021 * (_987.z + (-0.5));
        float _1031 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_994.x + (-0.5));
        float _1033 = _1031 * (_994.y + (-0.5));
        float _1034 = _1031 * (_994.z + (-0.5));
        float _1041 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1001.x + (-0.5));
        float _1043 = _1041 * (_1001.y + (-0.5));
        float _1044 = _1041 * (_1001.z + (-0.5));
        float _1051 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1008.x + (-0.5));
        float _1053 = _1051 * (_1008.y + (-0.5));
        float _1054 = _1051 * (_1008.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1075 = (dot(vec3(_613, _614, _615), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1085 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3813 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1087 + 1.0))) + _1092) * _1055;
        float _1102 = _1023 * 0.5;
        float _1103 = _1033 * 0.5;
        float _1104 = _1043 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_613, _614, _615), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3846 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1129 + 1.0))) + _1134) * _1056;
        float _1144 = _1024 * 0.5;
        float _1145 = _1034 * 0.5;
        float _1146 = _1044 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_613, _614, _615), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3879 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1171 + 1.0))) + _1176) * _1057;
        _1193 = _1024;
        _1195 = _1023;
        _1196 = _1022;
        _1197 = _1034;
        _1198 = _1033;
        _1199 = _1032;
        _1200 = _1044;
        _1201 = _1043;
        _1202 = _1042;
        _1203 = _1057;
        _1204 = _1056;
        _1205 = _1055;
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
    }
    else
    {
        _1193 = _1194;
        _1195 = _1194;
        _1196 = _1194;
        _1197 = _1194;
        _1198 = _1194;
        _1199 = _1194;
        _1200 = _1194;
        _1201 = _1194;
        _1202 = _1194;
        _1203 = _1194;
        _1204 = _1194;
        _1205 = _1194;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1240 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1244 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1267 = _855 + _613;
        float _1268 = _859 + _614;
        float _1269 = _863 + _615;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_613, _614, _615), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3942 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_613, _614, _615), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3975 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_613, _614, _615), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4008 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1194;
        _1506 = _1194;
        _1507 = _1194;
        _1508 = _1194;
        _1509 = _1194;
        _1510 = _1194;
        _1511 = _1194;
        _1512 = _1194;
        _1513 = _1194;
        _1514 = _1194;
        _1515 = _1194;
        _1516 = _1194;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1206)) + _1206;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1207)) + _1207;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _799 * 0.5;
    float _1574 = _800 * 0.5;
    float _1575 = _801 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1193, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1691 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1695 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1699 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1702 = fma(_801, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799));
        float _1705 = fma(_801, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799));
        float _1708 = fma(_801, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799));
        float _1736;
        if (_1702 > 0.0)
        {
            _1736 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1736 = frontier_phi_17_15_ladder;
        }
        float _1940;
        if (_1705 > 0.0)
        {
            _1940 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1940 = frontier_phi_26_22_ladder;
        }
        float _2194;
        if (_1708 > 0.0)
        {
            _2194 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2194 = frontier_phi_38_33_ladder;
        }
        float _2196 = isnan(_1940) ? _1736 : (isnan(_1736) ? _1940 : min(_1736, _1940));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1702) + _1691;
        float _2202 = (_2197 * _1705) + _1695;
        float _2203 = (_2197 * _1708) + _1699;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_16_38_ladder = _2331.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2331.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2331.x * cbModelParam._m0[1u].y;
        }
        _1724 = frontier_phi_16_38_ladder_2;
        _1726 = frontier_phi_16_38_ladder_1;
        _1728 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_799, _800, _801), _1642);
        _1724 = _1712.x * cbModelParam._m0[1u].y;
        _1726 = _1712.y * cbModelParam._m0[1u].y;
        _1728 = _1712.z * cbModelParam._m0[1u].y;
    }
    float _1732 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1732 : min(cbModelParam._m0[25u].w, _1732));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1788 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1792 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1796 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1799 = fma(_801, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799));
        float _1802 = fma(_801, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799));
        float _1805 = fma(_801, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799));
        float _1945;
        if (_1799 > 0.0)
        {
            _1945 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1945 = frontier_phi_28_24_ladder;
        }
        float _2221;
        if (_1802 > 0.0)
        {
            _2221 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2221 = frontier_phi_40_35_ladder;
        }
        float _2434;
        if (_1805 > 0.0)
        {
            _2434 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2434 = frontier_phi_49_46_ladder;
        }
        float _2436 = isnan(_2221) ? _1945 : (isnan(_1945) ? _2221 : min(_1945, _2221));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1799) + _1788;
        float _2442 = (_2437 * _1802) + _1792;
        float _2443 = (_2437 * _1805) + _1796;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2444;
        float _2447 = _2444 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2443 > _2447) || ((_2443 < _2445) || ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 < _2445) || (_2441 > _2447))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2443, cbModelParam._m0[17u].z, fma(_2442, cbModelParam._m0[17u].y, _2441 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2443, cbModelParam._m0[18u].z, fma(_2442, cbModelParam._m0[18u].y, _2441 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2443, cbModelParam._m0[19u].z, fma(_2442, cbModelParam._m0[19u].y, _2441 * cbModelParam._m0[19u].x))), _1733);
            frontier_phi_25_49_ladder = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2642.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2642.x * cbModelParam._m0[1u].z;
        }
        _1824 = frontier_phi_25_49_ladder_2;
        _1826 = frontier_phi_25_49_ladder_1;
        _1828 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_799, _800, _801), _1733);
        _1824 = _1808.x * cbModelParam._m0[1u].z;
        _1826 = _1808.y * cbModelParam._m0[1u].z;
        _1828 = _1808.z * cbModelParam._m0[1u].z;
    }
    float _1841 = (((_826 * _775) + _827) * _791) * ((cbModelParam._m0[1u].w * (_1824 - _1724)) + _1724);
    float _1843 = (((_826 * _777) + _827) * _791) * ((cbModelParam._m0[1u].w * (_1826 - _1726)) + _1726);
    float _1845 = (((_826 * _778) + _827) * _791) * ((cbModelParam._m0[1u].w * (_1828 - _1728)) + _1728);
    float _1848 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1841 * cbSceneParam._m0[91u].x));
    uvec4 _1864 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1866 = _1864.x * 14u;
    uint _1867 = _1866 + 13u;
    float _1874 = _791 + (-1.0);
    float _1879 = (cbLight._m0[_1867].x * _1874) + 1.0;
    float _1880 = (cbLight._m0[_1867].y * _1874) + 1.0;
    float _1881 = (cbLight._m0[_1867].z * _1874) + 1.0;
    float _1882 = (cbLight._m0[_1867].w * _1874) + 1.0;
    uint _1883 = _1866 + 5u;
    float _1889 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1893 = _1866 + 4u;
    float _1899 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1903 = _1866 | 1u;
    float _1914 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_613, _614, _615));
    float _1917 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_613, _614, _615));
    float _4144 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _4155 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1922 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.3183098733425140380859375;
    float _1924 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.3183098733425140380859375;
    float _1931 = ((cbLight._m0[_1883].x * _1889) * _1924) + ((cbLight._m0[_1893].x * _1899) * _1922);
    float _1932 = ((_1889 * cbLight._m0[_1883].y) * _1924) + ((_1899 * cbLight._m0[_1893].y) * _1922);
    float _1933 = ((_1889 * cbLight._m0[_1883].z) * _1924) + ((_1899 * cbLight._m0[_1893].z) * _1922);
    uvec4 _1937 = floatBitsToUint(cbLight._m0[_1866 + 12u]);
    bool _1939 = _1937.x == 0u;
    float _1950;
    float _1952;
    float _1954;
    if (_1939)
    {
        _1950 = _1931;
        _1952 = _1932;
        _1954 = _1933;
    }
    else
    {
        uint _1958 = _1866 + 6u;
        float _1974 = (dot(vec3(cbLight._m0[_1866 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _1975 = _1974 * _1974;
        float _4166 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1977 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _1950 = (((cbLight._m0[_1958].x * 0.3183098733425140380859375) * _1976) * _1977) + _1931;
        _1952 = (((cbLight._m0[_1958].y * 0.3183098733425140380859375) * _1976) * _1977) + _1932;
        _1954 = (((cbLight._m0[_1958].z * 0.3183098733425140380859375) * _1976) * _1977) + _1933;
    }
    bool _1957 = _1937.y == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1957)
    {
        _1995 = _1950;
        _1997 = _1952;
        _1999 = _1954;
    }
    else
    {
        uint _2165 = _1866 + 7u;
        float _2181 = (dot(vec3(cbLight._m0[_1866 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4182 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2184 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _1995 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _1950;
        _1997 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _1952;
        _1999 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _1954;
    }
    uint _2002 = _1866 + 8u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _616) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1866].x + _693;
    float _2018 = cbLight._m0[_1866].y + _694;
    float _2019 = cbLight._m0[_1866].z + _695;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1866].xyz));
    float _4198 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2031 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2032 = dot(vec3(_613, _614, _615), vec3(_2024, _2025, _2026));
    float _4220 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2024, _2025, _2026));
    float _4231 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2016 * _2016;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2052 = exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0);
    float _2053 = 0.959999978542327880859375 - _772;
    float _2055 = 0.959999978542327880859375 - _773;
    float _2056 = 0.959999978542327880859375 - _774;
    float _2063 = 1.0 - _2016;
    float _2074 = (0.5 / (((_2031 * ((_2030 * _2063) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2063) + _2016) * _2030))) * _2030;
    float _4242 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    uint _2087 = _1866 + 9u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _616) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1903].x + _693;
    float _2101 = cbLight._m0[_1903].y + _694;
    float _2102 = cbLight._m0[_1903].z + _695;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1903].xyz));
    float _4253 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2114 = dot(vec3(_613, _614, _615), vec3(_2107, _2108, _2109));
    float _4264 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2107, _2108, _2109));
    float _4275 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2099 * _2099;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
    float _2140 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2031 * ((_2113 * _2140) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2140) + _2099) * _2113))) * _2113;
    float _4286 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2162 = (((((_2133 * _2053) + _775) * cbLight._m0[_2087].x) * _2152) * _1889) + (((((_2052 * _2053) + _775) * cbLight._m0[_2002].x) * _2076) * _1899);
    float _2163 = (((((_2133 * _2055) + _777) * cbLight._m0[_2087].y) * _2152) * _1889) + (((((_2052 * _2055) + _777) * cbLight._m0[_2002].y) * _2076) * _1899);
    float _2164 = (((((_2133 * _2056) + _778) * cbLight._m0[_2087].z) * _2152) * _1889) + (((((_2052 * _2056) + _778) * cbLight._m0[_2002].z) * _2076) * _1899);
    float _2226;
    float _2228;
    float _2230;
    if (_1939)
    {
        _2226 = _2162;
        _2228 = _2163;
        _2230 = _2164;
    }
    else
    {
        uint _2232 = _1866 + 2u;
        uint _2236 = _1866 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _616) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _693;
        float _2253 = cbLight._m0[_2232].y + _694;
        float _2254 = cbLight._m0[_2232].z + _695;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2232].xyz));
        float _4297 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2266 = dot(vec3(_613, _614, _615), vec3(_2259, _2260, _2261));
        float _4308 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4319 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
        float _2292 = 1.0 - _2251;
        float _2302 = (0.5 / (((_2031 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2292) + _2251) * _2265))) * _2265;
        float _4330 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2226 = (((((_2285 * _2053) + _775) * cbLight._m0[_2236].x) * _2304) * _2305) + _2162;
        _2228 = (((((_2285 * _2055) + _777) * cbLight._m0[_2236].y) * _2304) * _2305) + _2163;
        _2230 = (((((_2285 * _2056) + _778) * cbLight._m0[_2236].z) * _2304) * _2305) + _2164;
    }
    float _2340;
    float _2342;
    float _2344;
    if (_1957)
    {
        _2340 = _2226;
        _2342 = _2228;
        _2344 = _2230;
    }
    else
    {
        uint _2351 = _1866 + 3u;
        uint _2355 = _1866 + 11u;
        float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _616) * 0.949999988079071044921875);
        float _2370 = _2369 * _2369;
        float _2371 = cbLight._m0[_2351].x + _693;
        float _2372 = cbLight._m0[_2351].y + _694;
        float _2373 = cbLight._m0[_2351].z + _695;
        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
        float _2378 = _2377 * _2371;
        float _2379 = _2377 * _2372;
        float _2380 = _2377 * _2373;
        float _2381 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2351].xyz));
        float _4346 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2385 = dot(vec3(_613, _614, _615), vec3(_2378, _2379, _2380));
        float _4357 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2389 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2378, _2379, _2380));
        float _4368 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2393 = _2370 * _2370;
        float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
        float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
        float _2411 = 1.0 - _2370;
        float _2421 = (0.5 / (((_2031 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2411) + _2370) * _2384))) * _2384;
        float _4379 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2423 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
        float _2424 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2340 = (((((_2404 * _2053) + _775) * cbLight._m0[_2355].x) * _2423) * _2424) + _2226;
        _2342 = (((((_2404 * _2055) + _777) * cbLight._m0[_2355].y) * _2423) * _2424) + _2228;
        _2344 = (((((_2404 * _2056) + _778) * cbLight._m0[_2355].z) * _2423) * _2424) + _2230;
    }
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    if (_1864.y == 0u)
    {
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2499;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2499;
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2499;
        uvec4 _2514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2515 = _2514.x;
        uint _2526 = uint((float(_2514.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2515))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2515)));
        float _2536 = (log2(_2502 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2537 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        uint _2540 = uint(isnan(14.0) ? _2537 : (isnan(_2537) ? 14.0 : min(_2537, 14.0)));
        uvec4 _2545 = texelFetch(g_lightClusterGridBuffer, int(((_2540 << 2u) + (_2526 << 6u)) >> 2u));
        uint _2546 = _2545.x;
        uint _2547 = _2514.z;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((((1u << ((_2547 >> 4u) & 15u)) + 4294967295u) & _2546) == 0u) || ((_2547 & 240u) == 0u))
        {
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
        }
        else
        {
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            uint _2806 = 0u;
            uint _2815;
            bool _2816;
            for (;;)
            {
                _2815 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                _2816 = _2815 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2816)
                {
                    frontier_phi_66_pred = _2800;
                    frontier_phi_66_pred_1 = _2805;
                    frontier_phi_66_pred_2 = _2804;
                    frontier_phi_66_pred_3 = _2803;
                    frontier_phi_66_pred_4 = _2802;
                    frontier_phi_66_pred_5 = _2801;
                }
                else
                {
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    uint _2951;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2815;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    for (;;)
                    {
                        uint _2955 = uint(findLSB(_2951)) + (_2806 << 5u);
                        uint _2952 = (_2951 + 4294967295u) & _2951;
                        uint _2957 = _2955 * 48u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2977 = (_2955 * 48u) + 4u;
                        vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 3u)).x));
                        uint _2996 = (_2955 * 48u) + 8u;
                        vec3 _3007 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x));
                        float _3011 = _2971.x - _2500;
                        float _3012 = _2971.y - _2501;
                        float _3013 = _2971.z - _2502;
                        float _3014 = dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013));
                        float _3017 = inversesqrt(_3014);
                        float _3018 = _3017 * _3011;
                        float _3019 = _3017 * _3012;
                        float _3020 = _3017 * _3013;
                        float _3021 = dot(vec3(_732, _735, _738), vec3(_3018, _3019, _3020));
                        float _3026 = 1.0 - (_3014 * _2971.w);
                        float _4405 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3027 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3028 = sqrt(_3014) * _2990.w;
                        float _3031 = 1.39999997615814208984375 / (_3028 + 1.39999997615814208984375);
                        float _3032 = _3031 * _3031;
                        float _3035 = ((1.0 - _3032) * _3021) + _3032;
                        float _3038 = _3028 * _3028;
                        float _3042 = ((isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))) * _3027) / ((_3038 * 0.699999988079071044921875) + 1.0);
                        float _3046 = (-0.0) - _2500;
                        float _3047 = (-0.0) - _2501;
                        float _3048 = (-0.0) - _2502;
                        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                        float _3053 = _3052 * _3046;
                        float _3054 = _3052 * _3047;
                        float _3055 = _3052 * _3048;
                        float _3063 = exp2(log2(1.0 / ((_3038 * 3.5) + 5.0)) * 0.25);
                        float _3064 = 1.0 - _807;
                        float _3071 = sqrt(1.0 - ((1.0 - (_3064 * _3064)) * (1.0 - (_3063 * _3063))));
                        float _3072 = _3071 * _3071;
                        float _3073 = _3072 * _3072;
                        float _3074 = _3053 + _3018;
                        float _3075 = _3054 + _3019;
                        float _3076 = _3055 + _3020;
                        float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                        float _3084 = dot(vec3(_732, _735, _738), vec3(_3053, _3054, _3055));
                        float _4421 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3087 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3088 = dot(vec3(_732, _735, _738), vec3(_3080 * _3074, _3080 * _3075, _3080 * _3076));
                        float _4432 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3095 = ((_3091 * _3091) * (_3073 + (-1.0))) + 1.0;
                        float _3096 = _3031 * _3072;
                        float _3097 = _3096 * _3096;
                        float _3100 = ((1.0 - _3097) * _3021) + _3097;
                        float _4443 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3101 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3102 = 1.0 - _3072;
                        float _3112 = (0.5 / (((_3101 * ((_3087 * _3102) + _3072)) + 9.9999999392252902907785028219223e-09) + (((_3101 * _3102) + _3072) * _3087))) * _3101;
                        float _4454 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3123 = (((_3073 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3095 * _3095) * ((_3038 * 2.1991131305694580078125) + 3.141590118408203125))) * _3027;
                        _2875 = (_3042 * _2990.x) + _2948;
                        _2876 = (_3042 * _2990.y) + _2949;
                        _2877 = (_3042 * _2990.z) + _2950;
                        _2872 = (_3123 * _3007.x) + _2945;
                        _2873 = (_3123 * _3007.y) + _2946;
                        _2874 = (_3123 * _3007.z) + _2947;
                        if (_2952 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2952;
                        }
                    }
                    frontier_phi_66_pred = _2872;
                    frontier_phi_66_pred_1 = _2877;
                    frontier_phi_66_pred_2 = _2876;
                    frontier_phi_66_pred_3 = _2875;
                    frontier_phi_66_pred_4 = _2874;
                    frontier_phi_66_pred_5 = _2873;
                }
                _2648 = frontier_phi_66_pred;
                _2658 = frontier_phi_66_pred_1;
                _2656 = frontier_phi_66_pred_2;
                _2654 = frontier_phi_66_pred_3;
                _2652 = frontier_phi_66_pred_4;
                _2650 = frontier_phi_66_pred_5;
                uint _2807 = _2806 + 1u;
                if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2800 = _2648;
                    _2801 = _2650;
                    _2802 = _2652;
                    _2803 = _2654;
                    _2804 = _2656;
                    _2805 = _2658;
                    _2806 = _2807;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
        }
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.z;
        uint _2664 = (_2662 >> 8u) & 15u;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((4294967295u << _2664) & _2546) == 0u)
        {
            _2768 = _2647;
            _2770 = _2649;
            _2772 = _2651;
            _2774 = _2653;
            _2776 = _2655;
            _2778 = _2657;
        }
        else
        {
            float _2793 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
            float _2794 = _2793 * _2500;
            float _2795 = _2793 * _2501;
            float _2796 = _2793 * _2502;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2664 < ((_2662 >> 12u) & 15u))
            {
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2928 = _2647;
                float _2929 = _2649;
                float _2930 = _2651;
                float _2931 = _2653;
                float _2932 = _2655;
                float _2933 = _2657;
                uint _2934 = _2664;
                uint _2943;
                bool _2944;
                for (;;)
                {
                    _2943 = texelFetch(g_lightClassification, int((((_2540 << 5u) + (_2526 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                    _2944 = _2943 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2944)
                    {
                        frontier_phi_77_pred = _2933;
                        frontier_phi_77_pred_1 = _2932;
                        frontier_phi_77_pred_2 = _2931;
                        frontier_phi_77_pred_3 = _2930;
                        frontier_phi_77_pred_4 = _2929;
                        frontier_phi_77_pred_5 = _2928;
                    }
                    else
                    {
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3150 = _2928;
                        float _3151 = _2929;
                        float _3152 = _2930;
                        float _3153 = _2931;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        uint _3156 = _2943;
                        uint _3157;
                        vec4 _3182;
                        float _3183;
                        vec4 _3198;
                        vec3 _3210;
                        vec4 _3225;
                        vec4 _3240;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3167 = ((_2934 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3156));
                            _3157 = (_3156 + 4294967295u) & _3156;
                            uint _3169 = _3167 * 40u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3183 = _3182.w;
                            uint _3185 = (_3167 * 40u) + 4u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3167 * 40u) + 8u;
                            _3210 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x));
                            uint _3212 = (_3167 * 40u) + 16u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3167 * 40u) + 20u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3167 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3167 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_2502, _3274.z, fma(_2501, _3274.y, _3274.x * _2500)) + _3274.w;
                            _3287 = !((fma(_2502, _3255.z, fma(_2501, _3255.y, _3255.x * _2500)) + _3255.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3182.x - _2500;
                                float _3315 = _3182.y - _2501;
                                float _3316 = _3182.z - _2502;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3183 * _3183));
                                float _4465 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3332 = sqrt(_3317) * _3198.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_732, _735, _738))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_2502, _3225.z, fma(_2501, _3225.y, _3225.x * _2500)) + _3225.w) / _3286;
                                float _3346 = (fma(_2502, _3240.z, fma(_2501, _3240.y, _3240.x * _2500)) + _3240.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4481 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _807;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2794;
                                float _3376 = _3322 - _2795;
                                float _3377 = _3323 - _2796;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_732, _735, _738), vec3((-0.0) - _2794, (-0.0) - _2795, (-0.0) - _2796));
                                float _4492 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3389 = dot(vec3(_732, _735, _738), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4503 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_732, _735, _738), vec3(_3321, _3322, _3323))) + _3398;
                                float _4514 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4525 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3352 * _3198.y;
                                frontier_phi_83_pred_1 = _3352 * _3198.x;
                                frontier_phi_83_pred_2 = _3426 * _3210.z;
                                frontier_phi_83_pred_3 = _3426 * _3210.y;
                                frontier_phi_83_pred_4 = _3426 * _3210.x;
                                frontier_phi_83_pred_5 = _3352 * _3198.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3434 = frontier_phi_83_pred;
                            _3433 = frontier_phi_83_pred_1;
                            _3432 = frontier_phi_83_pred_2;
                            _3431 = frontier_phi_83_pred_3;
                            _3430 = frontier_phi_83_pred_4;
                            _3435 = frontier_phi_83_pred_5;
                            _3140 = _3433 + _3153;
                            _3141 = _3434 + _3154;
                            _3142 = _3435 + _3155;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3139 = _3432 + _3152;
                            if (_3157 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3157;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3142;
                        frontier_phi_77_pred_1 = _3141;
                        frontier_phi_77_pred_2 = _3140;
                        frontier_phi_77_pred_3 = _3139;
                        frontier_phi_77_pred_4 = _3138;
                        frontier_phi_77_pred_5 = _3137;
                    }
                    _2779 = frontier_phi_77_pred;
                    _2777 = frontier_phi_77_pred_1;
                    _2775 = frontier_phi_77_pred_2;
                    _2773 = frontier_phi_77_pred_3;
                    _2771 = frontier_phi_77_pred_4;
                    _2769 = frontier_phi_77_pred_5;
                    uint _2935 = _2934 + 1u;
                    if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2928 = _2769;
                        _2929 = _2771;
                        _2930 = _2773;
                        _2931 = _2775;
                        _2932 = _2777;
                        _2933 = _2779;
                        _2934 = _2935;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2773;
                frontier_phi_58_59_ladder_1 = _2779;
                frontier_phi_58_59_ladder_2 = _2777;
                frontier_phi_58_59_ladder_3 = _2775;
                frontier_phi_58_59_ladder_4 = _2771;
                frontier_phi_58_59_ladder_5 = _2769;
            }
            else
            {
                frontier_phi_58_59_ladder = _2651;
                frontier_phi_58_59_ladder_1 = _2657;
                frontier_phi_58_59_ladder_2 = _2655;
                frontier_phi_58_59_ladder_3 = _2653;
                frontier_phi_58_59_ladder_4 = _2649;
                frontier_phi_58_59_ladder_5 = _2647;
            }
            _2768 = frontier_phi_58_59_ladder_5;
            _2770 = frontier_phi_58_59_ladder_4;
            _2772 = frontier_phi_58_59_ladder;
            _2774 = frontier_phi_58_59_ladder_3;
            _2776 = frontier_phi_58_59_ladder_2;
            _2778 = frontier_phi_58_59_ladder_1;
        }
        float _2783 = isnan(1.0) ? _791 : (isnan(_791) ? 1.0 : min(_791, 1.0));
        _2559 = (_2783 * _2774) + _1995;
        _2561 = (_2783 * _2776) + _1997;
        _2563 = (_2783 * _2778) + _1999;
        _2565 = ((_2768 * _775) * _2783) + _2340;
        _2567 = ((_2770 * _777) * _2783) + _2342;
        _2569 = ((_2772 * _778) * _2783) + _2344;
    }
    else
    {
        _2559 = _1995;
        _2561 = _1997;
        _2563 = _1999;
        _2565 = _2340;
        _2567 = _2342;
        _2569 = _2344;
    }
    float _4541 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4552 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4563 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2586 = ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2559 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _791))) + ((_2565 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    float _2587 = ((isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2561 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _791))) + ((_2567 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    float _2588 = ((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2563 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _791))) + ((_2569 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1631)) * cbPerFrame._m0[3u].x);
    uint _2589 = _264 + 6u;
    float _2597 = _713 / cbSceneParam._m0[86u].x;
    float _2598 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2612 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2614 = _2612.x;
    float _2615 = _2612.y;
    float _2616 = _2612.z;
    float _2617 = _2612.w;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2672 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2673 = _2672 / _635;
        float _2684 = _2673 * _686;
        float _2685 = _687 * _2673;
        float _2686 = (-0.0) - _2685;
        float _2688 = _2673 * _688;
        float _2690 = (cbSceneParam._m0[77u].w * _2686) / _2672;
        float _2691 = _2690 + cbSceneParam._m0[79u].w;
        float _2692 = cbSceneParam._m0[79u].w - _2685;
        float _2698 = sqrt(((_2684 * _2684) + (_2685 * _2685)) + (_2688 * _2688));
        float _2701 = (1.0 - (cbSceneParam._m0[77u].w / _2672)) * _2698;
        float _2706 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2708 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2885;
        if (abs((_2686 - _2690) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2885 = ((((_2691 > 0.0) ? exp2(_2706 * _2691) : (2.0 - exp2(_2708 * _2691))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2701;
        }
        else
        {
            float _2829 = 1.0 / cbSceneParam._m0[80u].x;
            float _2830 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : max(_2691, _2692));
            float _2831 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : min(_2691, _2692));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            float _2841 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : min(_2831, 0.0));
            _2885 = ((abs(_2698 / _2686) * cbSceneParam._m0[80u].y) * ((((_2840 - _2841) * 2.0) - ((exp2(_2706 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0)))) - exp2(_2706 * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))))) * _2829)) - ((exp2(_2708 * _2840) - exp2(_2708 * _2841)) * _2829))) + (_2701 * cbSceneParam._m0[80u].z);
        }
        vec4 _2887 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2597, _2598, 1.0), 0.0);
        float _2896 = exp2((_2885 * (-1.44269502162933349609375)) * (1.0 - _2887.w));
        float _2897 = log2(_2896);
        float _2913 = log2(_2617);
        _2710 = (exp2(_2913 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].x)) * _2887.x) / cbSceneParam._m0[78u].x)) + _2614;
        _2712 = (exp2(_2913 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].y)) * _2887.y) / cbSceneParam._m0[78u].y)) + _2615;
        _2714 = (exp2(_2913 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].z)) * _2887.z) / cbSceneParam._m0[78u].z)) + _2616;
        _2716 = _2896 * _2617;
    }
    else
    {
        _2710 = _2614;
        _2712 = _2615;
        _2714 = _2616;
        _2716 = _2617;
    }
    bool _2923;
    vec4 _2726;
    vec4 _2748;
    float _2750;
    float _2754;
    float _2755;
    float _2756;
    float _2757;
    bool _2767;
    for (;;)
    {
        _2726 = cbMatDynParam._m0[0u];
        float _2728 = roundEven(_2726.y);
        bool _2729 = _2728 == 3.0;
        float _2730 = log2(_2716);
        float _2737 = exp2(_2730 * cbSceneParam._m0[78u].x) * _2586;
        float _2738 = exp2(_2730 * cbSceneParam._m0[78u].y) * _2587;
        float _2739 = exp2(_2730 * cbSceneParam._m0[78u].z) * _2588;
        float _2746 = _702 + (-0.5);
        _2748 = cbMtdParam._m0[1u];
        _2750 = _2748.y * _2746;
        float _2753 = (_2728 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2754 = _2753 * (_2729 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2710)));
        _2755 = _2753 * (_2729 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2712)));
        _2756 = _2753 * (_2729 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2714)));
        _2757 = _2746 * 0.999000012874603271484375;
        _2767 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2767)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _2757) < 0.5)
            {
                _2923 = true;
                break;
            }
        }
        uint _2864 = _751 + uint(_2726.w);
        if ((cbInstanceData._m0[_2864].w < 1.0) && ((cbInstanceData._m0[_2864].w + _2757) < 0.5))
        {
            _2923 = true;
            break;
        }
        if ((_2750 + 1.0) < _2748.x)
        {
            _2923 = true;
            break;
        }
        _2923 = false;
        break;
    }
    float _3128;
    if (_2923)
    {
        discard_state = true;
        _3128 = 0.0;
    }
    else
    {
        _3128 = cbInstanceData._m0[_2589].w;
    }
    SV_Target.x = _2754;
    SV_Target.y = _2755;
    SV_Target.z = _2756;
    SV_Target.w = _3128;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2589].w;
    discard_exit();
}


