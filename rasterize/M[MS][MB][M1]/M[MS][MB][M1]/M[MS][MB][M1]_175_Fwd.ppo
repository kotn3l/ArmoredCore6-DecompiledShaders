#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1309;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[24u].y) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3636 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _396 = (_389 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _397 = (_389 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _398 = (_389 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].y) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3647 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _512 = ((_484.x - _503) * _389) + _503;
    float _513 = ((_484.y - _504) * _389) + _504;
    float _514 = ((_484.z - _505) * _389) + _505;
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _539 = ((_526.z - _514) * _462) + _514;
    float _542 = ((((_526.x - _512) * _462) + _512) * 2.0) + (-1.0);
    float _544 = ((((_526.y - _513) * _462) + _513) * 2.0) + (-1.0);
    float _545 = dot(vec2(_542, _544), vec2(_542, _544));
    float _3658 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))));
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _576 = (((_564.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _542;
    float _577 = (((_564.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _544;
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _620 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].w) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3669 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _629 = ((((cbMtdParam._m0[10u].x - _469) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _621) + _469;
    float _630 = ((((cbMtdParam._m0[10u].y - _470) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _621) + _470;
    float _631 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _471)) * _621) + _471;
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _659 = _657.x;
    float _677 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _659) * _389) + _659;
    float _695 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _677) * _462) + _677;
    float _699 = ((_643.x - _695) * cbMtdParam._m0[19u].z) + _695;
    float _701 = _699 - (_699 * _621);
    float _705 = (cbMtdParam._m0[19u].w * (_564.z - _539)) + _539;
    float _709 = ((cbMtdParam._m0[23u].y - _705) * _621) + _705;
    vec4 _728 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _734 = (_728.x * 2.0) + (-1.0);
    float _735 = (_728.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_734, _735), vec2(_734, _735));
    float _3680 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _752 = (_621 * (((cbMtdParam._m0[22u].z * _576) - _576) + _734)) + _576;
    float _753 = (_621 * (((cbMtdParam._m0[22u].z * _577) - _577) + _735)) + _577;
    float _754 = (_621 * (sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) - _550)) + _550;
    float _756 = cbMtdParam._m0[22u].x + _564.w;
    float _759 = fma(_754, _238 * NORMAL.x, fma(_753, _245 * TANGENT.x, (_231 * _223) * _752));
    float _762 = fma(_754, _238 * NORMAL.y, fma(_753, _245 * TANGENT.y, (_231 * _224) * _752));
    float _765 = fma(_754, _238 * NORMAL.z, fma(_753, _245 * TANGENT.z, (_231 * _225) * _752));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3691 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _773 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3713 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3724 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3735 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3746 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _778 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _792 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _842 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _832);
    float _843 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _832);
    float _844 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _832);
    float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
    float _849 = _842 * _848;
    float _850 = _843 * _848;
    float _851 = _844 * _848;
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _876 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _879 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _882 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _896 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_896].z;
    float _3757 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _908 = 1.0 - _778;
    float _909 = _905 * _908;
    float _910 = _906 * _908;
    float _911 = _907 * _908;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _778;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _778;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _778;
    float _919 = _916 + 0.039999999105930328369140625;
    float _921 = _917 + 0.039999999105930328369140625;
    float _922 = _918 + 0.039999999105930328369140625;
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _935 = ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * TEXCOORD_5.w) * _931.x;
    float _936 = dot(vec3(_770, _771, _772), vec3(_849, _850, _851));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _770) - _849;
    float _944 = (_939 * _771) - _850;
    float _945 = (_939 * _772) - _851;
    float _949 = abs(dot(vec3(_849, _850, _851), vec3(_770, _771, _772)));
    float _3790 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_773);
    float _964 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _970 = (1.0 - _964) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _971 = _964 * _951;
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1308;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1033 = fma(_1007, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999));
        float _1037 = fma(_1007, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999));
        float _1041 = fma(_1007, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999));
        float _1066 = _999 + _770;
        float _1067 = _1003 + _771;
        float _1068 = _1007 + _772;
        float _1078 = fma(_1068, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066)) - _1033;
        float _1079 = fma(_1068, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066)) - _1037;
        float _1080 = fma(_1068, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066)) - _1041;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1033 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1037 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[34u].z) + ((((((_1041 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1136 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1102.x + (-0.5));
        float _1138 = _1136 * (_1102.y + (-0.5));
        float _1139 = _1136 * (_1102.z + (-0.5));
        float _1146 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1109.x + (-0.5));
        float _1148 = _1146 * (_1109.y + (-0.5));
        float _1149 = _1146 * (_1109.z + (-0.5));
        float _1156 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1116.x + (-0.5));
        float _1158 = _1156 * (_1116.y + (-0.5));
        float _1159 = _1156 * (_1116.z + (-0.5));
        float _1166 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1123.x + (-0.5));
        float _1168 = _1166 * (_1123.y + (-0.5));
        float _1169 = _1166 * (_1123.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1190 = (dot(vec3(_770, _771, _772), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1200 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3838 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1202 + 1.0))) + _1207) * _1170;
        float _1217 = _1138 * 0.5;
        float _1218 = _1148 * 0.5;
        float _1219 = _1158 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_770, _771, _772), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3871 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1244 + 1.0))) + _1249) * _1171;
        float _1259 = _1139 * 0.5;
        float _1260 = _1149 * 0.5;
        float _1261 = _1159 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_770, _771, _772), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3904 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1286 + 1.0))) + _1291) * _1172;
        _1308 = _1139;
        _1310 = _1138;
        _1311 = _1137;
        _1312 = _1149;
        _1313 = _1148;
        _1314 = _1147;
        _1315 = _1159;
        _1316 = _1158;
        _1317 = _1157;
        _1318 = _1172;
        _1319 = _1171;
        _1320 = _1170;
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _1309;
        _1310 = _1309;
        _1311 = _1309;
        _1312 = _1309;
        _1313 = _1309;
        _1314 = _1309;
        _1315 = _1309;
        _1316 = _1309;
        _1317 = _1309;
        _1318 = _1309;
        _1319 = _1309;
        _1320 = _1309;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_1007, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _999));
        float _1351 = fma(_1007, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _999));
        float _1355 = fma(_1007, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _999));
        float _1378 = _999 + _770;
        float _1379 = _1003 + _771;
        float _1380 = _1007 + _772;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_770, _771, _772), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _3967 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_770, _771, _772), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4000 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_770, _771, _772), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4033 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1309;
        _1617 = _1309;
        _1618 = _1309;
        _1619 = _1309;
        _1620 = _1309;
        _1621 = _1309;
        _1622 = _1309;
        _1623 = _1309;
        _1624 = _1309;
        _1625 = _1309;
        _1626 = _1309;
        _1627 = _1309;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1321)) + _1321;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1322)) + _1322;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1323)) + _1323;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _943 * 0.5;
    float _1685 = _944 * 0.5;
    float _1686 = _945 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1727;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1308, _1312, _1315, _1318));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1738;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1729 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1742 = (_1738 * cbModelParam._m0[1u].x) + (_1727 * (1.0 - cbModelParam._m0[1u].x));
    float _1752 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1752 : min(cbModelParam._m0[25u].z, _1752));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1802 = fma(_1007, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999)) + cbModelParam._m0[13u].w;
        float _1806 = fma(_1007, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999)) + cbModelParam._m0[14u].w;
        float _1810 = fma(_1007, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999)) + cbModelParam._m0[15u].w;
        float _1813 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1816 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1819 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1847;
        if (_1813 > 0.0)
        {
            _1847 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1847 = frontier_phi_14_12_ladder;
        }
        float _2050;
        if (_1816 > 0.0)
        {
            _2050 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2050 = frontier_phi_23_19_ladder;
        }
        float _2304;
        if (_1819 > 0.0)
        {
            _2304 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2304 = frontier_phi_35_30_ladder;
        }
        float _2306 = isnan(_2050) ? _1847 : (isnan(_1847) ? _2050 : min(_1847, _2050));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1813) + _1802;
        float _2312 = (_2307 * _1816) + _1806;
        float _2313 = (_2307 * _1819) + _1810;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1753);
            frontier_phi_13_35_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1835 = frontier_phi_13_35_ladder_2;
        _1837 = frontier_phi_13_35_ladder_1;
        _1839 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1753);
        _1835 = _1823.x * cbModelParam._m0[1u].y;
        _1837 = _1823.y * cbModelParam._m0[1u].y;
        _1839 = _1823.z * cbModelParam._m0[1u].y;
    }
    float _1843 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1843 : min(cbModelParam._m0[25u].w, _1843));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1898 = fma(_1007, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999)) + cbModelParam._m0[21u].w;
        float _1902 = fma(_1007, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999)) + cbModelParam._m0[22u].w;
        float _1906 = fma(_1007, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999)) + cbModelParam._m0[23u].w;
        float _1909 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1912 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1915 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2055;
        if (_1909 > 0.0)
        {
            _2055 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2055 = frontier_phi_25_21_ladder;
        }
        float _2331;
        if (_1912 > 0.0)
        {
            _2331 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2331 = frontier_phi_37_32_ladder;
        }
        float _2544;
        if (_1915 > 0.0)
        {
            _2544 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2544 = frontier_phi_46_43_ladder;
        }
        float _2546 = isnan(_2331) ? _2055 : (isnan(_2055) ? _2331 : min(_2055, _2331));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1909) + _1898;
        float _2552 = (_2547 * _1912) + _1902;
        float _2553 = (_2547 * _1915) + _1906;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1844);
            frontier_phi_22_46_ladder = _2752.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2752.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2752.x * cbModelParam._m0[1u].z;
        }
        _1934 = frontier_phi_22_46_ladder_2;
        _1936 = frontier_phi_22_46_ladder_1;
        _1938 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1844);
        _1934 = _1918.x * cbModelParam._m0[1u].z;
        _1936 = _1918.y * cbModelParam._m0[1u].z;
        _1938 = _1918.z * cbModelParam._m0[1u].z;
    }
    float _1951 = (((_970 * _919) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1934 - _1835)) + _1835);
    float _1953 = (((_970 * _921) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1936 - _1837)) + _1837);
    float _1955 = (((_970 * _922) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1938 - _1839)) + _1839);
    float _1958 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1953, cbSceneParam._m0[89u].y, _1951 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1953, cbSceneParam._m0[90u].y, _1951 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1953, cbSceneParam._m0[91u].y, _1951 * cbSceneParam._m0[91u].x));
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _935 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2009 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2013 = _1976 | 1u;
    float _2024 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_770, _771, _772));
    float _2027 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_770, _771, _772));
    float _4169 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _4180 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2032 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _2034 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.3183098733425140380859375;
    float _2041 = ((cbLight._m0[_1993].x * _1999) * _2034) + ((cbLight._m0[_2003].x * _2009) * _2032);
    float _2042 = ((_1999 * cbLight._m0[_1993].y) * _2034) + ((_2009 * cbLight._m0[_2003].y) * _2032);
    float _2043 = ((_1999 * cbLight._m0[_1993].z) * _2034) + ((_2009 * cbLight._m0[_2003].z) * _2032);
    uvec4 _2047 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2049 = _2047.x == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2049)
    {
        _2060 = _2041;
        _2062 = _2042;
        _2064 = _2043;
    }
    else
    {
        uint _2068 = _1976 + 6u;
        float _2084 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _4191 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2087 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2060 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _2041;
        _2062 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _2042;
        _2064 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _2043;
    }
    bool _2067 = _2047.y == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2067)
    {
        _2105 = _2060;
        _2107 = _2062;
        _2109 = _2064;
    }
    else
    {
        uint _2275 = _1976 + 7u;
        float _2291 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4207 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2294 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2105 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2060;
        _2107 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2062;
        _2109 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2064;
    }
    uint _2112 = _1976 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _773) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1976].x + _849;
    float _2128 = cbLight._m0[_1976].y + _850;
    float _2129 = cbLight._m0[_1976].z + _851;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_1976].xyz));
    float _4223 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2141 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2142 = dot(vec3(_770, _771, _772), vec3(_2134, _2135, _2136));
    float _4245 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2134, _2135, _2136));
    float _4256 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
    float _2163 = 0.959999978542327880859375 - _916;
    float _2165 = 0.959999978542327880859375 - _917;
    float _2166 = 0.959999978542327880859375 - _918;
    float _2173 = 1.0 - _2126;
    float _2184 = (0.5 / (((_2141 * ((_2140 * _2173) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2173) + _2126) * _2140))) * _2140;
    float _4267 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2197 = _1976 + 9u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _773) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2013].x + _849;
    float _2211 = cbLight._m0[_2013].y + _850;
    float _2212 = cbLight._m0[_2013].z + _851;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2013].xyz));
    float _4278 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2224 = dot(vec3(_770, _771, _772), vec3(_2217, _2218, _2219));
    float _4289 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2217, _2218, _2219));
    float _4300 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2209 * _2209;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
    float _2250 = 1.0 - _2209;
    float _2260 = (0.5 / (((_2141 * ((_2223 * _2250) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2250) + _2209) * _2223))) * _2223;
    float _4311 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    float _2272 = (((((_2243 * _2163) + _919) * cbLight._m0[_2197].x) * _2262) * _1999) + (((((_2162 * _2163) + _919) * cbLight._m0[_2112].x) * _2186) * _2009);
    float _2273 = (((((_2243 * _2165) + _921) * cbLight._m0[_2197].y) * _2262) * _1999) + (((((_2162 * _2165) + _921) * cbLight._m0[_2112].y) * _2186) * _2009);
    float _2274 = (((((_2243 * _2166) + _922) * cbLight._m0[_2197].z) * _2262) * _1999) + (((((_2162 * _2166) + _922) * cbLight._m0[_2112].z) * _2186) * _2009);
    float _2336;
    float _2338;
    float _2340;
    if (_2049)
    {
        _2336 = _2272;
        _2338 = _2273;
        _2340 = _2274;
    }
    else
    {
        uint _2342 = _1976 + 2u;
        uint _2346 = _1976 + 10u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _773) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _849;
        float _2363 = cbLight._m0[_2342].y + _850;
        float _2364 = cbLight._m0[_2342].z + _851;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2342].xyz));
        float _4322 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2376 = dot(vec3(_770, _771, _772), vec3(_2369, _2370, _2371));
        float _4333 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4344 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0);
        float _2402 = 1.0 - _2361;
        float _2412 = (0.5 / (((_2141 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2402) + _2361) * _2375))) * _2375;
        float _4355 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2336 = (((((_2395 * _2163) + _919) * cbLight._m0[_2346].x) * _2414) * _2415) + _2272;
        _2338 = (((((_2395 * _2165) + _921) * cbLight._m0[_2346].y) * _2414) * _2415) + _2273;
        _2340 = (((((_2395 * _2166) + _922) * cbLight._m0[_2346].z) * _2414) * _2415) + _2274;
    }
    float _2450;
    float _2452;
    float _2454;
    if (_2067)
    {
        _2450 = _2336;
        _2452 = _2338;
        _2454 = _2340;
    }
    else
    {
        uint _2461 = _1976 + 3u;
        uint _2465 = _1976 + 11u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _773) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _849;
        float _2482 = cbLight._m0[_2461].y + _850;
        float _2483 = cbLight._m0[_2461].z + _851;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2461].xyz));
        float _4371 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2495 = dot(vec3(_770, _771, _772), vec3(_2488, _2489, _2490));
        float _4382 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4393 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2141 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2521) + _2480) * _2494))) * _2494;
        float _4404 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2450 = (((((_2514 * _2163) + _919) * cbLight._m0[_2465].x) * _2533) * _2534) + _2336;
        _2452 = (((((_2514 * _2165) + _921) * cbLight._m0[_2465].y) * _2533) * _2534) + _2338;
        _2454 = (((((_2514 * _2166) + _922) * cbLight._m0[_2465].z) * _2533) * _2534) + _2340;
    }
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_1974.y == 0u)
    {
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2609;
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2609;
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2609;
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2625)));
        float _2646 = (log2(_2612 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
        }
        else
        {
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            uint _2908 = 0u;
            uint _2917;
            bool _2918;
            for (;;)
            {
                _2917 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                _2918 = _2917 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2918)
                {
                    frontier_phi_61_pred = _2902;
                    frontier_phi_61_pred_1 = _2907;
                    frontier_phi_61_pred_2 = _2906;
                    frontier_phi_61_pred_3 = _2905;
                    frontier_phi_61_pred_4 = _2904;
                    frontier_phi_61_pred_5 = _2903;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2917;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2908 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2610;
                        float _3093 = _3052.y - _2611;
                        float _3094 = _3052.z - _2612;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_876, _879, _882), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4430 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2610;
                        float _3128 = (-0.0) - _2611;
                        float _3129 = (-0.0) - _2612;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _951;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_876, _879, _882), vec3(_3134, _3135, _3136));
                        float _4446 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3169 = dot(vec3(_876, _879, _882), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4457 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4468 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4479 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2961 = (_3123 * _3071.x) + _3029;
                        _2962 = (_3123 * _3071.y) + _3030;
                        _2963 = (_3123 * _3071.z) + _3031;
                        _2958 = (_3204 * _3088.x) + _3026;
                        _2959 = (_3204 * _3088.y) + _3027;
                        _2960 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_61_pred = _2958;
                    frontier_phi_61_pred_1 = _2963;
                    frontier_phi_61_pred_2 = _2962;
                    frontier_phi_61_pred_3 = _2961;
                    frontier_phi_61_pred_4 = _2960;
                    frontier_phi_61_pred_5 = _2959;
                }
                _2758 = frontier_phi_61_pred;
                _2768 = frontier_phi_61_pred_1;
                _2766 = frontier_phi_61_pred_2;
                _2764 = frontier_phi_61_pred_3;
                _2762 = frontier_phi_61_pred_4;
                _2760 = frontier_phi_61_pred_5;
                uint _2909 = _2908 + 1u;
                if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2902 = _2758;
                    _2903 = _2760;
                    _2904 = _2762;
                    _2905 = _2764;
                    _2906 = _2766;
                    _2907 = _2768;
                    _2908 = _2909;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
        }
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.z;
        uint _2774 = (_2772 >> 8u) & 15u;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        if (((4294967295u << _2774) & _2656) == 0u)
        {
            _2870 = _2757;
            _2872 = _2759;
            _2874 = _2761;
            _2876 = _2763;
            _2878 = _2765;
            _2880 = _2767;
        }
        else
        {
            float _2895 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
            float _2896 = _2895 * _2610;
            float _2897 = _2895 * _2611;
            float _2898 = _2895 * _2612;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2774 < ((_2772 >> 12u) & 15u))
            {
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _3009 = _2757;
                float _3010 = _2759;
                float _3011 = _2761;
                float _3012 = _2763;
                float _3013 = _2765;
                float _3014 = _2767;
                uint _3015 = _2774;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3025)
                    {
                        frontier_phi_67_pred = _3012;
                        frontier_phi_67_pred_1 = _3013;
                        frontier_phi_67_pred_2 = _3014;
                        frontier_phi_67_pred_3 = _3011;
                        frontier_phi_67_pred_4 = _3010;
                        frontier_phi_67_pred_5 = _3009;
                    }
                    else
                    {
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        uint _3228 = _3024;
                        uint _3229;
                        vec4 _3254;
                        float _3255;
                        vec4 _3270;
                        vec3 _3282;
                        vec4 _3297;
                        vec4 _3312;
                        float _3358;
                        bool _3359;
                        for (;;)
                        {
                            uint _3239 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3228));
                            _3229 = (_3228 + 4294967295u) & _3228;
                            uint _3241 = _3239 * 40u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            _3255 = _3254.w;
                            uint _3257 = (_3239 * 40u) + 4u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3239 * 40u) + 8u;
                            _3282 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x));
                            uint _3284 = (_3239 * 40u) + 16u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3239 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3239 * 40u) + 24u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3333 = (_3239 * 40u) + 28u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3358 = fma(_2612, _3346.z, fma(_2611, _3346.y, _3346.x * _2610)) + _3346.w;
                            _3359 = !((fma(_2612, _3327.z, fma(_2611, _3327.y, _3327.x * _2610)) + _3327.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3359)
                            {
                                float _3386 = _3254.x - _2610;
                                float _3387 = _3254.y - _2611;
                                float _3388 = _3254.z - _2612;
                                float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                                float _3392 = inversesqrt(_3389);
                                float _3393 = _3392 * _3386;
                                float _3394 = _3392 * _3387;
                                float _3395 = _3392 * _3388;
                                float _3399 = 1.0 - (_3389 / (_3255 * _3255));
                                float _4490 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3404 = sqrt(_3389) * _3270.w;
                                float _3406 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                                float _3407 = _3406 * _3406;
                                float _3410 = ((1.0 - _3407) * dot(vec3(_3393, _3394, _3395), vec3(_876, _879, _882))) + _3407;
                                float _3413 = _3404 * _3404;
                                float _3417 = (fma(_2612, _3297.z, fma(_2611, _3297.y, _3297.x * _2610)) + _3297.w) / _3358;
                                float _3418 = (fma(_2612, _3312.z, fma(_2611, _3312.y, _3312.x * _2610)) + _3312.w) / _3358;
                                float _3422 = 1.0 - dot(vec2(_3417, _3418), vec2(_3417, _3418));
                                float _4506 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3424 = _3423 * (((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3400) / ((_3413 * 0.699999988079071044921875) + 1.0));
                                float _3436 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                                float _3437 = 1.0 - _951;
                                float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                                float _3445 = _3444 * _3444;
                                float _3446 = _3445 * _3445;
                                float _3447 = _3393 - _2896;
                                float _3448 = _3394 - _2897;
                                float _3449 = _3395 - _2898;
                                float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                                float _3457 = dot(vec3(_876, _879, _882), vec3((-0.0) - _2896, (-0.0) - _2897, (-0.0) - _2898));
                                float _4517 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3461 = dot(vec3(_876, _879, _882), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                                float _4528 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                                float _3469 = _3406 * _3445;
                                float _3470 = _3469 * _3469;
                                float _3476 = ((1.0 - _3470) * dot(vec3(_876, _879, _882), vec3(_3393, _3394, _3395))) + _3470;
                                float _4539 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3478 = 1.0 - _3445;
                                float _3488 = (0.5 / (((_3477 * ((_3460 * _3478) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3445) * _3460))) * _3477;
                                float _4550 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3498 = (_3423 * _3400) * (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3468 * _3468) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3498 * _3282.x;
                                frontier_phi_73_pred_1 = _3498 * _3282.y;
                                frontier_phi_73_pred_2 = _3424 * _3270.z;
                                frontier_phi_73_pred_3 = _3424 * _3270.y;
                                frontier_phi_73_pred_4 = _3424 * _3270.x;
                                frontier_phi_73_pred_5 = _3498 * _3282.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3502 = frontier_phi_73_pred;
                            _3503 = frontier_phi_73_pred_1;
                            _3507 = frontier_phi_73_pred_2;
                            _3506 = frontier_phi_73_pred_3;
                            _3505 = frontier_phi_73_pred_4;
                            _3504 = frontier_phi_73_pred_5;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            if (_3229 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3229;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3212;
                        frontier_phi_67_pred_1 = _3213;
                        frontier_phi_67_pred_2 = _3214;
                        frontier_phi_67_pred_3 = _3211;
                        frontier_phi_67_pred_4 = _3210;
                        frontier_phi_67_pred_5 = _3209;
                    }
                    _2877 = frontier_phi_67_pred;
                    _2879 = frontier_phi_67_pred_1;
                    _2881 = frontier_phi_67_pred_2;
                    _2875 = frontier_phi_67_pred_3;
                    _2873 = frontier_phi_67_pred_4;
                    _2871 = frontier_phi_67_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2871;
                        _3010 = _2873;
                        _3011 = _2875;
                        _3012 = _2877;
                        _3013 = _2879;
                        _3014 = _2881;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2879;
                frontier_phi_55_56_ladder_1 = _2881;
                frontier_phi_55_56_ladder_2 = _2877;
                frontier_phi_55_56_ladder_3 = _2875;
                frontier_phi_55_56_ladder_4 = _2873;
                frontier_phi_55_56_ladder_5 = _2871;
            }
            else
            {
                frontier_phi_55_56_ladder = _2765;
                frontier_phi_55_56_ladder_1 = _2767;
                frontier_phi_55_56_ladder_2 = _2763;
                frontier_phi_55_56_ladder_3 = _2761;
                frontier_phi_55_56_ladder_4 = _2759;
                frontier_phi_55_56_ladder_5 = _2757;
            }
            _2870 = frontier_phi_55_56_ladder_5;
            _2872 = frontier_phi_55_56_ladder_4;
            _2874 = frontier_phi_55_56_ladder_3;
            _2876 = frontier_phi_55_56_ladder_2;
            _2878 = frontier_phi_55_56_ladder;
            _2880 = frontier_phi_55_56_ladder_1;
        }
        float _2885 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2669 = (_2885 * _2876) + _2105;
        _2671 = (_2885 * _2878) + _2107;
        _2673 = (_2885 * _2880) + _2109;
        _2675 = ((_2870 * _919) * _2885) + _2450;
        _2677 = ((_2872 * _921) * _2885) + _2452;
        _2679 = ((_2874 * _922) * _2885) + _2454;
    }
    else
    {
        _2669 = _2105;
        _2671 = _2107;
        _2673 = _2109;
        _2675 = _2450;
        _2677 = _2452;
        _2679 = _2454;
    }
    float _4566 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4577 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4588 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    uint _2699 = _251 + 6u;
    float _2707 = _857 / cbSceneParam._m0[86u].x;
    float _2708 = _858 / cbSceneParam._m0[86u].y;
    vec4 _2722 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, (log2((isnan(cbSceneParam._m0[77u].w) ? _792 : (isnan(_792) ? cbSceneParam._m0[77u].w : min(_792, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2724 = _2722.x;
    float _2725 = _2722.y;
    float _2726 = _2722.z;
    float _2727 = _2722.w;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_792 > cbSceneParam._m0[78u].w)
    {
        float _2782 = isnan(_792) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _792 : min(cbSceneParam._m0[80u].w, _792));
        float _2783 = _2782 / _792;
        float _2794 = _2783 * _842;
        float _2795 = _843 * _2783;
        float _2796 = (-0.0) - _2795;
        float _2798 = _2783 * _844;
        float _2800 = (cbSceneParam._m0[77u].w * _2796) / _2782;
        float _2801 = _2800 + cbSceneParam._m0[79u].w;
        float _2802 = cbSceneParam._m0[79u].w - _2795;
        float _2808 = sqrt(((_2794 * _2794) + (_2795 * _2795)) + (_2798 * _2798));
        float _2811 = (1.0 - (cbSceneParam._m0[77u].w / _2782)) * _2808;
        float _2816 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2818 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2971;
        if (abs((_2796 - _2800) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2971 = ((((_2801 > 0.0) ? exp2(_2816 * _2801) : (2.0 - exp2(_2818 * _2801))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2811;
        }
        else
        {
            float _2931 = 1.0 / cbSceneParam._m0[80u].x;
            float _2932 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : max(_2801, _2802));
            float _2933 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : min(_2801, _2802));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            _2971 = ((abs(_2808 / _2796) * cbSceneParam._m0[80u].y) * ((((_2942 - _2943) * 2.0) - ((exp2(_2816 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0)))) - exp2(_2816 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))))) * _2931)) - ((exp2(_2818 * _2942) - exp2(_2818 * _2943)) * _2931))) + (_2811 * cbSceneParam._m0[80u].z);
        }
        vec4 _2973 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, 1.0), 0.0);
        float _2982 = exp2((_2971 * (-1.44269502162933349609375)) * (1.0 - _2973.w));
        float _2983 = log2(_2982);
        float _2999 = log2(_2727);
        _2820 = (exp2(_2999 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].x)) * _2973.x) / cbSceneParam._m0[78u].x)) + _2724;
        _2822 = (exp2(_2999 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].y)) * _2973.y) / cbSceneParam._m0[78u].y)) + _2725;
        _2824 = (exp2(_2999 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].z)) * _2973.z) / cbSceneParam._m0[78u].z)) + _2726;
        _2826 = _2982 * _2727;
    }
    else
    {
        _2820 = _2724;
        _2822 = _2725;
        _2824 = _2726;
        _2826 = _2727;
    }
    float _2838 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2839 = _2838 == 3.0;
    float _2840 = log2(_2826);
    float _2847 = exp2(_2840 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2669 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _935))) + ((_2675 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _2848 = exp2(_2840 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2671 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _935))) + ((_2677 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _2849 = exp2(_2840 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2673 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _935))) + ((_2679 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _2858 = (_2838 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2858 * (_2839 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2820)));
    SV_Target.y = _2858 * (_2839 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2822)));
    SV_Target.z = _2858 * (_2839 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2824)));
    SV_Target.w = cbInstanceData._m0[_2699].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2699].w;
}


