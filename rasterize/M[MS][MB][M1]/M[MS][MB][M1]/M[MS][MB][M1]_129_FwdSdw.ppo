#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1293;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3901 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3912 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3923 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3934 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) + _442;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _545 = ((_515.z - _536) * _423) + _536;
    float _548 = ((((_515.x - _534) * _423) + _534) * 2.0) + (-1.0);
    float _549 = ((((_515.y - _535) * _423) + _535) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3945 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _612 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_598 - _599) * cbMtdParam._m0[24u].z) + _599) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3956 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _620 = (_613 * ((_470.x * cbMtdParam._m0[18u].x) - _449)) + _449;
    float _621 = (_613 * ((_470.y * cbMtdParam._m0[18u].y) - _450)) + _450;
    float _622 = (_613 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) + _451;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _650 = _648.x;
    float _668 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _650) * _423) + _650;
    float _672 = ((_634.x - _668) * cbMtdParam._m0[19u].z) + _668;
    float _674 = _672 - (_672 * _613);
    float _679 = (((_490.z - _545) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _545;
    float _683 = ((_571.z - _679) * cbMtdParam._m0[19u].w) + _679;
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _703 = (_696.x * 2.0) + (-1.0);
    float _704 = (_696.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_703, _704), vec2(_703, _704));
    float _3967 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _713 = (_613 * (_696.z - _683)) + _683;
    float _722 = (_548 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)))) + (((_571.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _723 = (_549 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)))) + (((_571.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _735 = (((_703 - _722) + (cbMtdParam._m0[21u].x * _722)) * _613) + _722;
    float _736 = (((_704 - _723) + (cbMtdParam._m0[21u].x * _723)) * _613) + _723;
    float _737 = (_613 * (sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) - _555)) + _555;
    float _739 = cbMtdParam._m0[22u].x + _571.w;
    float _742 = fma(_737, _238 * NORMAL.x, fma(_736, _245 * TANGENT.x, (_231 * _223) * _735));
    float _745 = fma(_737, _238 * NORMAL.y, fma(_736, _245 * TANGENT.y, (_231 * _224) * _735));
    float _748 = fma(_737, _238 * NORMAL.z, fma(_736, _245 * TANGENT.z, (_231 * _225) * _735));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    float _753 = _752 * _742;
    float _754 = _752 * _745;
    float _755 = _752 * _748;
    float _3978 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _756 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4000 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4011 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4022 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4033 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _761 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _775 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _826 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _816);
    float _827 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _816);
    float _828 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _816);
    float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
    float _833 = _826 * _832;
    float _834 = _827 * _832;
    float _835 = _828 * _832;
    float _841 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _842 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _860 = fma(_755, cbSceneParam._m0[5u].z, fma(_754, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _753));
    float _863 = fma(_755, cbSceneParam._m0[6u].z, fma(_754, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _753));
    float _866 = fma(_755, cbSceneParam._m0[7u].z, fma(_754, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _753));
    uint _880 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _886 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_880].x;
    float _887 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_880].y;
    float _888 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_880].z;
    float _4044 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _892 = 1.0 - _761;
    float _893 = _889 * _892;
    float _894 = _890 * _892;
    float _895 = _891 * _892;
    float _900 = (_889 + (-0.039999999105930328369140625)) * _761;
    float _901 = (_890 + (-0.039999999105930328369140625)) * _761;
    float _902 = (_891 + (-0.039999999105930328369140625)) * _761;
    float _903 = _900 + 0.039999999105930328369140625;
    float _905 = _901 + 0.039999999105930328369140625;
    float _906 = _902 + 0.039999999105930328369140625;
    vec4 _915 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _841, cbSceneParam._m0[86u].y * _842));
    float _919 = ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * TEXCOORD_5.w) * _915.x;
    float _920 = dot(vec3(_753, _754, _755), vec3(_833, _834, _835));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _753) - _833;
    float _928 = (_923 * _754) - _834;
    float _929 = (_923 * _755) - _835;
    float _933 = abs(dot(vec3(_833, _834, _835), vec3(_753, _754, _755)));
    float _4077 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_756);
    float _948 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _954 = (1.0 - _948) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _955 = _948 * _935;
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1292;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_991, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983));
        float _1021 = fma(_991, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983));
        float _1025 = fma(_991, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983));
        float _1050 = _983 + _753;
        float _1051 = _987 + _754;
        float _1052 = _991 + _755;
        float _1062 = fma(_1052, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050)) - _1017;
        float _1063 = fma(_1052, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050)) - _1021;
        float _1064 = fma(_1052, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050)) - _1025;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1120 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1086.x + (-0.5));
        float _1122 = _1120 * (_1086.y + (-0.5));
        float _1123 = _1120 * (_1086.z + (-0.5));
        float _1130 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1093.x + (-0.5));
        float _1132 = _1130 * (_1093.y + (-0.5));
        float _1133 = _1130 * (_1093.z + (-0.5));
        float _1140 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1100.x + (-0.5));
        float _1142 = _1140 * (_1100.y + (-0.5));
        float _1143 = _1140 * (_1100.z + (-0.5));
        float _1150 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1107.x + (-0.5));
        float _1152 = _1150 * (_1107.y + (-0.5));
        float _1153 = _1150 * (_1107.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1174 = (dot(vec3(_753, _754, _755), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1184 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _4125 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1186 + 1.0))) + _1191) * _1154;
        float _1201 = _1122 * 0.5;
        float _1202 = _1132 * 0.5;
        float _1203 = _1142 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_753, _754, _755), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4158 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1228 + 1.0))) + _1233) * _1155;
        float _1243 = _1123 * 0.5;
        float _1244 = _1133 * 0.5;
        float _1245 = _1143 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_753, _754, _755), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4191 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1270 + 1.0))) + _1275) * _1156;
        _1292 = _1123;
        _1294 = _1122;
        _1295 = _1121;
        _1296 = _1133;
        _1297 = _1132;
        _1298 = _1131;
        _1299 = _1143;
        _1300 = _1142;
        _1301 = _1141;
        _1302 = _1156;
        _1303 = _1155;
        _1304 = _1154;
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _1293;
        _1294 = _1293;
        _1295 = _1293;
        _1296 = _1293;
        _1297 = _1293;
        _1298 = _1293;
        _1299 = _1293;
        _1300 = _1293;
        _1301 = _1293;
        _1302 = _1293;
        _1303 = _1293;
        _1304 = _1293;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1332 = fma(_991, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983));
        float _1336 = fma(_991, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983));
        float _1340 = fma(_991, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983));
        float _1363 = _983 + _753;
        float _1364 = _987 + _754;
        float _1365 = _991 + _755;
        float _1375 = fma(_1365, cbModelParam._m0[30u].z, fma(_1364, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1363)) - _1332;
        float _1376 = fma(_1365, cbModelParam._m0[31u].z, fma(_1364, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1363)) - _1336;
        float _1377 = fma(_1365, cbModelParam._m0[32u].z, fma(_1364, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1363)) - _1340;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1394 = ((_1381 * _1375) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1332 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1381 * _1376) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1336 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1381 * _1377) / cbModelParam._m0[35u].z) + ((((((_1340 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        float _1431 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1398.x + (-0.5));
        float _1433 = _1431 * (_1398.y + (-0.5));
        float _1434 = _1431 * (_1398.z + (-0.5));
        float _1441 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1405.x + (-0.5));
        float _1443 = _1441 * (_1405.y + (-0.5));
        float _1444 = _1441 * (_1405.z + (-0.5));
        float _1451 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1412.x + (-0.5));
        float _1453 = _1451 * (_1412.y + (-0.5));
        float _1454 = _1451 * (_1412.z + (-0.5));
        float _1461 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1419.x + (-0.5));
        float _1463 = _1461 * (_1419.y + (-0.5));
        float _1464 = _1461 * (_1419.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_753, _754, _755), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4254 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1495 + 1.0))) + _1500) * _1465;
        float _1510 = _1433 * 0.5;
        float _1511 = _1443 * 0.5;
        float _1512 = _1453 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_753, _754, _755), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4287 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1537 + 1.0))) + _1542) * _1466;
        float _1552 = _1434 * 0.5;
        float _1553 = _1444 * 0.5;
        float _1554 = _1454 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_753, _754, _755), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4320 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1579 + 1.0))) + _1584) * _1467;
        _1601 = _1434;
        _1602 = _1433;
        _1603 = _1432;
        _1604 = _1444;
        _1605 = _1443;
        _1606 = _1442;
        _1607 = _1454;
        _1608 = _1453;
        _1609 = _1452;
        _1610 = _1467;
        _1611 = _1466;
        _1612 = _1465;
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
    }
    else
    {
        _1601 = _1293;
        _1602 = _1293;
        _1603 = _1293;
        _1604 = _1293;
        _1605 = _1293;
        _1606 = _1293;
        _1607 = _1293;
        _1608 = _1293;
        _1609 = _1293;
        _1610 = _1293;
        _1611 = _1293;
        _1612 = _1293;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1305)) + _1305;
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1306)) + _1306;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1307)) + _1307;
    float _1648 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1625));
    float _1669 = _927 * 0.5;
    float _1670 = _928 * 0.5;
    float _1671 = _929 * 0.5;
    float _1672 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1675 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1678 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1712;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1685 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1292, _1296, _1299, _1302));
        float _1689 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1693 = dot(vec4(_1669, _1670, _1671, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1700 = dot(vec4(cbModelParam._m0[39u]), vec4(_1669, _1670, _1671, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1723;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1714 = dot(vec4(cbModelParam._m0[40u]), vec4(_1669, _1670, _1671, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1727 = (_1723 * cbModelParam._m0[1u].x) + (_1712 * (1.0 - cbModelParam._m0[1u].x));
    float _1737 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _756);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1737 : min(cbModelParam._m0[25u].z, _1737));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1785 = fma(_991, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983)) + cbModelParam._m0[13u].w;
        float _1789 = fma(_991, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983)) + cbModelParam._m0[14u].w;
        float _1793 = fma(_991, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983)) + cbModelParam._m0[15u].w;
        float _1796 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1799 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1802 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1830;
        if (_1796 > 0.0)
        {
            _1830 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1830 = frontier_phi_14_12_ladder;
        }
        float _2001;
        if (_1799 > 0.0)
        {
            _2001 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2001 = frontier_phi_23_19_ladder;
        }
        float _2296;
        if (_1802 > 0.0)
        {
            _2296 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2296 = frontier_phi_35_30_ladder;
        }
        float _2298 = isnan(_2001) ? _1830 : (isnan(_1830) ? _2001 : min(_1830, _2001));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1796) + _1785;
        float _2304 = (_2299 * _1799) + _1789;
        float _2305 = (_2299 * _1802) + _1793;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2306;
        float _2310 = _2306 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 > _2310) || ((_2304 < _2308) || ((_2303 < _2308) || (_2303 > _2310))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2305, cbModelParam._m0[9u].z, fma(_2304, cbModelParam._m0[9u].y, _2303 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2305, cbModelParam._m0[10u].z, fma(_2304, cbModelParam._m0[10u].y, _2303 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2305, cbModelParam._m0[11u].z, fma(_2304, cbModelParam._m0[11u].y, _2303 * cbModelParam._m0[11u].x))), _1738);
            frontier_phi_13_35_ladder = _2450.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2450.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2450.x * cbModelParam._m0[1u].y;
        }
        _1818 = frontier_phi_13_35_ladder_2;
        _1820 = frontier_phi_13_35_ladder_1;
        _1822 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1738);
        _1818 = _1806.x * cbModelParam._m0[1u].y;
        _1820 = _1806.y * cbModelParam._m0[1u].y;
        _1822 = _1806.z * cbModelParam._m0[1u].y;
    }
    float _1826 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _756);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1826 : min(cbModelParam._m0[25u].w, _1826));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1880 = fma(_991, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983)) + cbModelParam._m0[21u].w;
        float _1884 = fma(_991, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983)) + cbModelParam._m0[22u].w;
        float _1888 = fma(_991, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983)) + cbModelParam._m0[23u].w;
        float _1891 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1894 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1897 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2006;
        if (_1891 > 0.0)
        {
            _2006 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2006 = frontier_phi_25_21_ladder;
        }
        float _2323;
        if (_1894 > 0.0)
        {
            _2323 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2323 = frontier_phi_37_32_ladder;
        }
        float _2661;
        if (_1897 > 0.0)
        {
            _2661 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2661 = frontier_phi_47_44_ladder;
        }
        float _2663 = isnan(_2323) ? _2006 : (isnan(_2006) ? _2323 : min(_2006, _2323));
        float _2664 = isnan(_2661) ? _2663 : (isnan(_2663) ? _2661 : min(_2663, _2661));
        float _2668 = (_2664 * _1891) + _1880;
        float _2669 = (_2664 * _1894) + _1884;
        float _2670 = (_2664 * _1897) + _1888;
        float _2671 = _2664 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2671;
        float _2674 = _2671 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2670 > _2674) || ((_2670 < _2672) || ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 < _2672) || (_2668 > _2674))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2670, cbModelParam._m0[17u].z, fma(_2669, cbModelParam._m0[17u].y, _2668 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2670, cbModelParam._m0[18u].z, fma(_2669, cbModelParam._m0[18u].y, _2668 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2670, cbModelParam._m0[19u].z, fma(_2669, cbModelParam._m0[19u].y, _2668 * cbModelParam._m0[19u].x))), _1827);
            frontier_phi_22_47_ladder = _2792.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2792.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2792.x * cbModelParam._m0[1u].z;
        }
        _1916 = frontier_phi_22_47_ladder_2;
        _1918 = frontier_phi_22_47_ladder_1;
        _1920 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1827);
        _1916 = _1900.x * cbModelParam._m0[1u].z;
        _1918 = _1900.y * cbModelParam._m0[1u].z;
        _1920 = _1900.z * cbModelParam._m0[1u].z;
    }
    float _1933 = (((_954 * _903) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1916 - _1818)) + _1818);
    float _1935 = (((_954 * _905) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1937 = (((_954 * _906) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1935, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1935, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1935, cbSceneParam._m0[91u].y, _1933 * cbSceneParam._m0[91u].x));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1993 = _1980 / _1992;
    float _1994 = _1984 / _1992;
    float _1995 = _1988 / _1992;
    float _2142;
    float _2143;
    float _2144;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2022 = ((uint(_1995 > cbSceneParam._m0[59u].y) + uint(_1995 > cbSceneParam._m0[59u].x)) + uint(_1995 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2023 = _2022 + 43u;
        uint _2031 = _2022 + 44u;
        uint _2039 = _2022 + 45u;
        uint _2047 = _2022 + 46u;
        float _2058 = fma(_1992, cbSceneParam._m0[_2023].w, fma(_1988, cbSceneParam._m0[_2023].z, fma(_1984, cbSceneParam._m0[_2023].y, _1980 * cbSceneParam._m0[_2023].x)));
        float _2062 = fma(_1992, cbSceneParam._m0[_2031].w, fma(_1988, cbSceneParam._m0[_2031].z, fma(_1984, cbSceneParam._m0[_2031].y, _1980 * cbSceneParam._m0[_2031].x)));
        float _2070 = fma(_1992, cbSceneParam._m0[_2047].w, fma(_1988, cbSceneParam._m0[_2047].z, fma(_1984, cbSceneParam._m0[_2047].y, _1980 * cbSceneParam._m0[_2047].x)));
        float _2075 = cbSceneParam._m0[33u].z * _2070;
        float _2077 = cbSceneParam._m0[33u].w * _2070;
        float _2080 = fma(_1992, cbSceneParam._m0[_2039].w, fma(_1988, cbSceneParam._m0[_2039].z, fma(_1984, cbSceneParam._m0[_2039].y, _1980 * cbSceneParam._m0[_2039].x))) / _2070;
        float _2128 = (cbSceneParam._m0[33u].x - sqrt(((_1994 * _1994) + (_1993 * _1993)) + (_1995 * _1995))) * cbSceneParam._m0[33u].y;
        float _4446 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2135 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 + _2058) / _2070, (_2077 + _2062) / _2070), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 + _2058) / _2070, (_2062 - _2075) / _2070), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 - _2075) / _2070, (_2062 - _2077) / _2070), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 - _2077) / _2070, (_2075 + _2062) / _2070), _2080), 0.0)).x), vec4(0.25)));
        _2142 = 1.0 - (_2135 * cbSceneParam._m0[34u].x);
        _2143 = 1.0 - (_2135 * cbSceneParam._m0[34u].y);
        _2144 = 1.0 - (_2135 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2142 = 1.0;
        _2143 = 1.0;
        _2144 = 1.0;
    }
    float _2208;
    float _2210;
    float _2212;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2196 = fma(_1992, cbSceneParam._m0[63u].w, fma(_1988, cbSceneParam._m0[63u].z, fma(_1984, cbSceneParam._m0[63u].y, _1980 * cbSceneParam._m0[63u].x)));
        float _2197 = fma(_1992, cbSceneParam._m0[60u].w, fma(_1988, cbSceneParam._m0[60u].z, fma(_1984, cbSceneParam._m0[60u].y, _1980 * cbSceneParam._m0[60u].x))) / _2196;
        float _2198 = fma(_1992, cbSceneParam._m0[61u].w, fma(_1988, cbSceneParam._m0[61u].z, fma(_1984, cbSceneParam._m0[61u].y, _1980 * cbSceneParam._m0[61u].x))) / _2196;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2197 >= cbSceneParam._m0[64u].x) && (_2198 >= cbSceneParam._m0[64u].y)) && (_2197 <= cbSceneParam._m0[64u].z)) && (_2198 <= cbSceneParam._m0[64u].w))
        {
            float _2336 = fma(_1992, cbSceneParam._m0[62u].w, fma(_1988, cbSceneParam._m0[62u].z, fma(_1984, cbSceneParam._m0[62u].y, _1980 * cbSceneParam._m0[62u].x))) / _2196;
            float _2340 = isnan(cbSceneParam._m0[41u].w) ? _2336 : (isnan(_2336) ? cbSceneParam._m0[41u].w : max(_2336, cbSceneParam._m0[41u].w));
            float _2383 = (cbSceneParam._m0[33u].x - sqrt(((_1994 * _1994) + (_1993 * _1993)) + (_1995 * _1995))) * cbSceneParam._m0[33u].y;
            float _4462 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
            float _2390 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2197, cbSceneParam._m0[33u].w + _2198), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2197, _2198 - cbSceneParam._m0[33u].z), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2197 - cbSceneParam._m0[33u].z, _2198 - cbSceneParam._m0[33u].w), _2340), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2197 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2198), _2340), 0.0)).x), vec4(0.25)));
            float _2394 = 1.0 - (_2390 * cbSceneParam._m0[34u].x);
            float _2395 = 1.0 - (_2390 * cbSceneParam._m0[34u].y);
            float _2396 = 1.0 - (_2390 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2396) ? _2144 : (isnan(_2144) ? _2396 : min(_2144, _2396));
            frontier_phi_34_33_ladder_1 = isnan(_2395) ? _2143 : (isnan(_2143) ? _2395 : min(_2143, _2395));
            frontier_phi_34_33_ladder_2 = isnan(_2394) ? _2142 : (isnan(_2142) ? _2394 : min(_2142, _2394));
        }
        else
        {
            frontier_phi_34_33_ladder = _2144;
            frontier_phi_34_33_ladder_1 = _2143;
            frontier_phi_34_33_ladder_2 = _2142;
        }
        _2208 = frontier_phi_34_33_ladder_2;
        _2210 = frontier_phi_34_33_ladder_1;
        _2212 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2208 = _2142;
        _2210 = _2143;
        _2212 = _2144;
    }
    uvec4 _2217 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2219 = _2217.x * 14u;
    uint _2220 = _2219 + 13u;
    float _2227 = _919 + (-1.0);
    float _2232 = (cbLight._m0[_2220].x * _2227) + 1.0;
    float _2233 = (cbLight._m0[_2220].y * _2227) + 1.0;
    float _2234 = (cbLight._m0[_2220].z * _2227) + 1.0;
    float _2235 = (cbLight._m0[_2220].w * _2227) + 1.0;
    uint _2236 = _2219 + 5u;
    float _2242 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2246 = _2219 + 4u;
    float _2255 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2259 = _2219 | 1u;
    float _2270 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_753, _754, _755));
    float _2273 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_753, _754, _755));
    float _4498 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _4509 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2278 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2280 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * 0.3183098733425140380859375;
    float _2287 = ((cbLight._m0[_2236].x * _2242) * _2280) + (((cbLight._m0[_2246].x * _2208) * _2255) * _2278);
    float _2288 = ((_2242 * cbLight._m0[_2236].y) * _2280) + (((cbLight._m0[_2246].y * _2210) * _2255) * _2278);
    float _2289 = ((_2242 * cbLight._m0[_2236].z) * _2280) + (((cbLight._m0[_2246].z * _2212) * _2255) * _2278);
    uvec4 _2293 = floatBitsToUint(cbLight._m0[_2219 + 12u]);
    bool _2295 = _2293.x == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2295)
    {
        _2397 = _2287;
        _2399 = _2288;
        _2401 = _2289;
    }
    else
    {
        uint _2405 = _2219 + 6u;
        float _2421 = (dot(vec3(cbLight._m0[_2219 + 2u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2422 = _2421 * _2421;
        float _4520 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2423 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2424 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2397 = (((cbLight._m0[_2405].x * 0.3183098733425140380859375) * _2423) * _2424) + _2287;
        _2399 = (((cbLight._m0[_2405].y * 0.3183098733425140380859375) * _2423) * _2424) + _2288;
        _2401 = (((cbLight._m0[_2405].z * 0.3183098733425140380859375) * _2423) * _2424) + _2289;
    }
    bool _2404 = _2293.y == 0u;
    float _2459;
    float _2461;
    float _2463;
    if (_2404)
    {
        _2459 = _2397;
        _2461 = _2399;
        _2463 = _2401;
    }
    else
    {
        uint _2632 = _2219 + 7u;
        float _2648 = (dot(vec3(cbLight._m0[_2219 + 3u].xyz), vec3(_753, _754, _755)) * 0.5) + 0.5;
        float _2649 = _2648 * _2648;
        float _4536 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2650 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2651 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2459 = (((cbLight._m0[_2632].x * 0.3183098733425140380859375) * _2650) * _2651) + _2397;
        _2461 = (((cbLight._m0[_2632].y * 0.3183098733425140380859375) * _2650) * _2651) + _2399;
        _2463 = (((cbLight._m0[_2632].z * 0.3183098733425140380859375) * _2650) * _2651) + _2401;
    }
    uint _2466 = _2219 + 8u;
    float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _756) * 0.949999988079071044921875);
    float _2480 = _2479 * _2479;
    float _2481 = cbLight._m0[_2219].x + _833;
    float _2482 = cbLight._m0[_2219].y + _834;
    float _2483 = cbLight._m0[_2219].z + _835;
    float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
    float _2488 = _2487 * _2481;
    float _2489 = _2487 * _2482;
    float _2490 = _2487 * _2483;
    float _2491 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2219].xyz));
    float _4552 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2494 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _4563 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2495 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2496 = dot(vec3(_753, _754, _755), vec3(_2488, _2489, _2490));
    float _4574 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2500 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2488, _2489, _2490));
    float _4585 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = _2480 * _2480;
    float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
    float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
    float _2517 = 0.959999978542327880859375 - _900;
    float _2519 = 0.959999978542327880859375 - _901;
    float _2520 = 0.959999978542327880859375 - _902;
    float _2527 = 1.0 - _2480;
    float _2538 = (0.5 / (((_2495 * ((_2494 * _2527) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2527) + _2480) * _2494))) * _2494;
    float _4596 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2540 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
    uint _2554 = _2219 + 9u;
    float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _756) * 0.949999988079071044921875);
    float _2566 = _2565 * _2565;
    float _2567 = cbLight._m0[_2259].x + _833;
    float _2568 = cbLight._m0[_2259].y + _834;
    float _2569 = cbLight._m0[_2259].z + _835;
    float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
    float _2574 = _2573 * _2567;
    float _2575 = _2573 * _2568;
    float _2576 = _2573 * _2569;
    float _2577 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2259].xyz));
    float _4607 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2580 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2581 = dot(vec3(_753, _754, _755), vec3(_2574, _2575, _2576));
    float _4618 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2585 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2574, _2575, _2576));
    float _4629 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2589 = _2566 * _2566;
    float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
    float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
    float _2607 = 1.0 - _2566;
    float _2617 = (0.5 / (((_2495 * ((_2580 * _2607) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2607) + _2566) * _2580))) * _2580;
    float _4640 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2619 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
    float _2629 = (((((_2600 * _2517) + _903) * cbLight._m0[_2554].x) * _2619) * _2242) + ((((cbLight._m0[_2466].x * _2208) * ((_2516 * _2517) + _903)) * _2540) * _2255);
    float _2630 = (((((_2600 * _2519) + _905) * cbLight._m0[_2554].y) * _2619) * _2242) + ((((cbLight._m0[_2466].y * _2210) * ((_2516 * _2519) + _905)) * _2540) * _2255);
    float _2631 = (((((_2600 * _2520) + _906) * cbLight._m0[_2554].z) * _2619) * _2242) + ((((cbLight._m0[_2466].z * _2212) * ((_2516 * _2520) + _906)) * _2540) * _2255);
    float _2687;
    float _2689;
    float _2691;
    if (_2295)
    {
        _2687 = _2629;
        _2689 = _2630;
        _2691 = _2631;
    }
    else
    {
        uint _2693 = _2219 + 2u;
        uint _2697 = _2219 + 10u;
        float _2711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2693].w)) * _756) * 0.949999988079071044921875);
        float _2712 = _2711 * _2711;
        float _2713 = cbLight._m0[_2693].x + _833;
        float _2714 = cbLight._m0[_2693].y + _834;
        float _2715 = cbLight._m0[_2693].z + _835;
        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
        float _2720 = _2719 * _2713;
        float _2721 = _2719 * _2714;
        float _2722 = _2719 * _2715;
        float _2723 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2693].xyz));
        float _4651 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2727 = dot(vec3(_753, _754, _755), vec3(_2720, _2721, _2722));
        float _4662 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2731 = dot(vec3(cbLight._m0[_2693].xyz), vec3(_2720, _2721, _2722));
        float _4673 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2735 = _2712 * _2712;
        float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
        float _2746 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
        float _2753 = 1.0 - _2712;
        float _2763 = (0.5 / (((_2495 * ((_2726 * _2753) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2753) + _2712) * _2726))) * _2726;
        float _4684 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2687 = (((((_2746 * _2517) + _903) * cbLight._m0[_2697].x) * _2765) * _2766) + _2629;
        _2689 = (((((_2746 * _2519) + _905) * cbLight._m0[_2697].y) * _2765) * _2766) + _2630;
        _2691 = (((((_2746 * _2520) + _906) * cbLight._m0[_2697].z) * _2765) * _2766) + _2631;
    }
    float _2797;
    float _2799;
    float _2801;
    if (_2404)
    {
        _2797 = _2687;
        _2799 = _2689;
        _2801 = _2691;
    }
    else
    {
        uint _2808 = _2219 + 3u;
        uint _2812 = _2219 + 11u;
        float _2826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2808].w)) * _756) * 0.949999988079071044921875);
        float _2827 = _2826 * _2826;
        float _2828 = cbLight._m0[_2808].x + _833;
        float _2829 = cbLight._m0[_2808].y + _834;
        float _2830 = cbLight._m0[_2808].z + _835;
        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
        float _2835 = _2834 * _2828;
        float _2836 = _2834 * _2829;
        float _2837 = _2834 * _2830;
        float _2838 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_2808].xyz));
        float _4700 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2842 = dot(vec3(_753, _754, _755), vec3(_2835, _2836, _2837));
        float _4711 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2846 = dot(vec3(cbLight._m0[_2808].xyz), vec3(_2835, _2836, _2837));
        float _4722 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2850 = _2827 * _2827;
        float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
        float _2861 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
        float _2868 = 1.0 - _2827;
        float _2878 = (0.5 / (((_2495 * ((_2841 * _2868) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2495 * _2868) + _2827) * _2841))) * _2841;
        float _4733 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2880 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
        float _2881 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2797 = (((((_2861 * _2517) + _903) * cbLight._m0[_2812].x) * _2880) * _2881) + _2687;
        _2799 = (((((_2861 * _2519) + _905) * cbLight._m0[_2812].y) * _2880) * _2881) + _2689;
        _2801 = (((((_2861 * _2520) + _906) * cbLight._m0[_2812].z) * _2880) * _2881) + _2691;
    }
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_2217.y == 0u)
    {
        uvec4 _2902 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2903 = _2902.x;
        uint _2914 = uint((float(_2902.y) * floor(float(uint(cbSceneParam._m0[85u].y * _842) / _2903))) + floor(float(uint(cbSceneParam._m0[85u].x * _841) / _2903)));
        float _2924 = (log2(_1995 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2925 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        uint _2928 = uint(isnan(14.0) ? _2925 : (isnan(_2925) ? 14.0 : min(_2925, 14.0)));
        uvec4 _2933 = texelFetch(g_lightClusterGridBuffer, int(((_2928 << 2u) + (_2914 << 6u)) >> 2u));
        uint _2934 = _2933.x;
        uint _2935 = _2902.z;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((((1u << ((_2935 >> 4u) & 15u)) + 4294967295u) & _2934) == 0u) || ((_2935 & 240u) == 0u))
        {
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
        }
        else
        {
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            uint _3165 = 0u;
            uint _3174;
            bool _3175;
            for (;;)
            {
                _3174 = texelFetch(g_lightClassification, int((((_2928 << 5u) + (_2914 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                _3175 = _3174 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3175)
                {
                    frontier_phi_66_pred = _3164;
                    frontier_phi_66_pred_1 = _3163;
                    frontier_phi_66_pred_2 = _3162;
                    frontier_phi_66_pred_3 = _3161;
                    frontier_phi_66_pred_4 = _3160;
                    frontier_phi_66_pred_5 = _3159;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3174;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3165 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _1993;
                        float _3350 = _3309.y - _1994;
                        float _3351 = _3309.z - _1995;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_860, _863, _866), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4759 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _1993;
                        float _3385 = (-0.0) - _1994;
                        float _3386 = (-0.0) - _1995;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3400 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _935;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3391 + _3356;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_860, _863, _866), vec3(_3391, _3392, _3393));
                        float _4775 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3425 = dot(vec3(_860, _863, _866), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4786 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3369 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3359) + _3434;
                        float _4797 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4808 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3432 * _3432) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3218 = (_3380 * _3328.x) + _3286;
                        _3219 = (_3380 * _3328.y) + _3287;
                        _3220 = (_3380 * _3328.z) + _3288;
                        _3215 = (_3460 * _3345.x) + _3283;
                        _3216 = (_3460 * _3345.y) + _3284;
                        _3217 = (_3460 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_66_pred = _3220;
                    frontier_phi_66_pred_1 = _3219;
                    frontier_phi_66_pred_2 = _3218;
                    frontier_phi_66_pred_3 = _3217;
                    frontier_phi_66_pred_4 = _3216;
                    frontier_phi_66_pred_5 = _3215;
                }
                _3025 = frontier_phi_66_pred;
                _3023 = frontier_phi_66_pred_1;
                _3021 = frontier_phi_66_pred_2;
                _3019 = frontier_phi_66_pred_3;
                _3017 = frontier_phi_66_pred_4;
                _3015 = frontier_phi_66_pred_5;
                uint _3166 = _3165 + 1u;
                if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3159 = _3015;
                    _3160 = _3017;
                    _3161 = _3019;
                    _3162 = _3021;
                    _3163 = _3023;
                    _3164 = _3025;
                    _3165 = _3166;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
        }
        uvec4 _3028 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3029 = _3028.z;
        uint _3031 = (_3029 >> 8u) & 15u;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        if (((4294967295u << _3031) & _2934) == 0u)
        {
            _3127 = _3014;
            _3129 = _3016;
            _3131 = _3018;
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
        }
        else
        {
            float _3152 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
            float _3153 = _3152 * _1993;
            float _3154 = _3152 * _1994;
            float _3155 = _3152 * _1995;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3031 < ((_3029 >> 12u) & 15u))
            {
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3266 = _3014;
                float _3267 = _3016;
                float _3268 = _3018;
                float _3269 = _3020;
                float _3270 = _3022;
                float _3271 = _3024;
                uint _3272 = _3031;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2928 << 5u) + (_2914 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3282)
                    {
                        frontier_phi_72_pred = _3271;
                        frontier_phi_72_pred_1 = _3270;
                        frontier_phi_72_pred_2 = _3269;
                        frontier_phi_72_pred_3 = _3268;
                        frontier_phi_72_pred_4 = _3267;
                        frontier_phi_72_pred_5 = _3266;
                    }
                    else
                    {
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        float _3481 = _3269;
                        float _3482 = _3270;
                        float _3483 = _3271;
                        uint _3484 = _3281;
                        uint _3485;
                        vec4 _3510;
                        float _3511;
                        vec4 _3526;
                        vec3 _3538;
                        vec4 _3553;
                        vec4 _3568;
                        float _3614;
                        bool _3615;
                        for (;;)
                        {
                            uint _3495 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3484));
                            _3485 = (_3484 + 4294967295u) & _3484;
                            uint _3497 = _3495 * 40u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3511 = _3510.w;
                            uint _3513 = (_3495 * 40u) + 4u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3495 * 40u) + 8u;
                            _3538 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x));
                            uint _3540 = (_3495 * 40u) + 16u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3495 * 40u) + 20u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3495 * 40u) + 24u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3589 = (_3495 * 40u) + 28u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3614 = fma(_1995, _3602.z, fma(_1994, _3602.y, _3602.x * _1993)) + _3602.w;
                            _3615 = !((fma(_1995, _3583.z, fma(_1994, _3583.y, _3583.x * _1993)) + _3583.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3615)
                            {
                                float _3642 = _3510.x - _1993;
                                float _3643 = _3510.y - _1994;
                                float _3644 = _3510.z - _1995;
                                float _3645 = dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644));
                                float _3648 = inversesqrt(_3645);
                                float _3649 = _3648 * _3642;
                                float _3650 = _3648 * _3643;
                                float _3651 = _3648 * _3644;
                                float _3655 = 1.0 - (_3645 / (_3511 * _3511));
                                float _4819 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3660 = sqrt(_3645) * _3526.w;
                                float _3662 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                                float _3663 = _3662 * _3662;
                                float _3666 = ((1.0 - _3663) * dot(vec3(_3649, _3650, _3651), vec3(_860, _863, _866))) + _3663;
                                float _3669 = _3660 * _3660;
                                float _3673 = (fma(_1995, _3553.z, fma(_1994, _3553.y, _3553.x * _1993)) + _3553.w) / _3614;
                                float _3674 = (fma(_1995, _3568.z, fma(_1994, _3568.y, _3568.x * _1993)) + _3568.w) / _3614;
                                float _3678 = 1.0 - dot(vec2(_3673, _3674), vec2(_3673, _3674));
                                float _4835 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3680 = _3679 * (((isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0))) * _3656) / ((_3669 * 0.699999988079071044921875) + 1.0));
                                float _3692 = exp2(log2(1.0 / ((_3669 * 3.5) + 5.0)) * 0.25);
                                float _3693 = 1.0 - _935;
                                float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                                float _3701 = _3700 * _3700;
                                float _3702 = _3701 * _3701;
                                float _3703 = _3649 - _3153;
                                float _3704 = _3650 - _3154;
                                float _3705 = _3651 - _3155;
                                float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                                float _3713 = dot(vec3(_860, _863, _866), vec3((-0.0) - _3153, (-0.0) - _3154, (-0.0) - _3155));
                                float _4846 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3717 = dot(vec3(_860, _863, _866), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                                float _4857 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                                float _3725 = _3662 * _3701;
                                float _3726 = _3725 * _3725;
                                float _3732 = ((1.0 - _3726) * dot(vec3(_860, _863, _866), vec3(_3649, _3650, _3651))) + _3726;
                                float _4868 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3734 = 1.0 - _3701;
                                float _3744 = (0.5 / (((_3733 * ((_3716 * _3734) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3733 * _3734) + _3701) * _3716))) * _3733;
                                float _4879 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3754 = (_3679 * _3656) * (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3724 * _3724) * ((_3669 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3680 * _3526.y;
                                frontier_phi_78_pred_1 = _3680 * _3526.x;
                                frontier_phi_78_pred_2 = _3754 * _3538.z;
                                frontier_phi_78_pred_3 = _3754 * _3538.y;
                                frontier_phi_78_pred_4 = _3754 * _3538.x;
                                frontier_phi_78_pred_5 = _3680 * _3526.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3762 = frontier_phi_78_pred;
                            _3761 = frontier_phi_78_pred_1;
                            _3760 = frontier_phi_78_pred_2;
                            _3759 = frontier_phi_78_pred_3;
                            _3758 = frontier_phi_78_pred_4;
                            _3763 = frontier_phi_78_pred_5;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            if (_3485 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3485;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3470;
                        frontier_phi_72_pred_1 = _3469;
                        frontier_phi_72_pred_2 = _3468;
                        frontier_phi_72_pred_3 = _3467;
                        frontier_phi_72_pred_4 = _3466;
                        frontier_phi_72_pred_5 = _3465;
                    }
                    _3138 = frontier_phi_72_pred;
                    _3136 = frontier_phi_72_pred_1;
                    _3134 = frontier_phi_72_pred_2;
                    _3132 = frontier_phi_72_pred_3;
                    _3130 = frontier_phi_72_pred_4;
                    _3128 = frontier_phi_72_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3128;
                        _3267 = _3130;
                        _3268 = _3132;
                        _3269 = _3134;
                        _3270 = _3136;
                        _3271 = _3138;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3138;
                frontier_phi_60_61_ladder_1 = _3136;
                frontier_phi_60_61_ladder_2 = _3132;
                frontier_phi_60_61_ladder_3 = _3130;
                frontier_phi_60_61_ladder_4 = _3128;
                frontier_phi_60_61_ladder_5 = _3134;
            }
            else
            {
                frontier_phi_60_61_ladder = _3024;
                frontier_phi_60_61_ladder_1 = _3022;
                frontier_phi_60_61_ladder_2 = _3018;
                frontier_phi_60_61_ladder_3 = _3016;
                frontier_phi_60_61_ladder_4 = _3014;
                frontier_phi_60_61_ladder_5 = _3020;
            }
            _3127 = frontier_phi_60_61_ladder_4;
            _3129 = frontier_phi_60_61_ladder_3;
            _3131 = frontier_phi_60_61_ladder_2;
            _3133 = frontier_phi_60_61_ladder_5;
            _3135 = frontier_phi_60_61_ladder_1;
            _3137 = frontier_phi_60_61_ladder;
        }
        float _3142 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2947 = (_3142 * _3133) + _2459;
        _2949 = (_3142 * _3135) + _2461;
        _2951 = (_3142 * _3137) + _2463;
        _2953 = ((_3127 * _903) * _3142) + _2797;
        _2955 = ((_3129 * _905) * _3142) + _2799;
        _2957 = ((_3131 * _906) * _3142) + _2801;
    }
    else
    {
        _2947 = _2459;
        _2949 = _2461;
        _2951 = _2463;
        _2953 = _2797;
        _2955 = _2799;
        _2957 = _2801;
    }
    float _4895 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4906 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4917 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    uint _2977 = _272 + 6u;
    float _2985 = _841 / cbSceneParam._m0[86u].x;
    float _2986 = _842 / cbSceneParam._m0[86u].y;
    vec4 _3000 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2985, _2986, (log2((isnan(cbSceneParam._m0[77u].w) ? _775 : (isnan(_775) ? cbSceneParam._m0[77u].w : min(_775, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3002 = _3000.x;
    float _3003 = _3000.y;
    float _3004 = _3000.z;
    float _3005 = _3000.w;
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    if (_775 > cbSceneParam._m0[78u].w)
    {
        float _3039 = isnan(_775) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _775 : min(cbSceneParam._m0[80u].w, _775));
        float _3040 = _3039 / _775;
        float _3051 = _3040 * _826;
        float _3052 = _827 * _3040;
        float _3053 = (-0.0) - _3052;
        float _3055 = _3040 * _828;
        float _3057 = (cbSceneParam._m0[77u].w * _3053) / _3039;
        float _3058 = _3057 + cbSceneParam._m0[79u].w;
        float _3059 = cbSceneParam._m0[79u].w - _3052;
        float _3065 = sqrt(((_3051 * _3051) + (_3052 * _3052)) + (_3055 * _3055));
        float _3068 = (1.0 - (cbSceneParam._m0[77u].w / _3039)) * _3065;
        float _3073 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3075 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3228;
        if (abs((_3053 - _3057) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3228 = ((((_3058 > 0.0) ? exp2(_3073 * _3058) : (2.0 - exp2(_3075 * _3058))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3068;
        }
        else
        {
            float _3188 = 1.0 / cbSceneParam._m0[80u].x;
            float _3189 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : max(_3058, _3059));
            float _3190 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : min(_3058, _3059));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            _3228 = ((abs(_3065 / _3053) * cbSceneParam._m0[80u].y) * ((((_3199 - _3200) * 2.0) - ((exp2(_3073 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0)))) - exp2(_3073 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))))) * _3188)) - ((exp2(_3075 * _3199) - exp2(_3075 * _3200)) * _3188))) + (_3068 * cbSceneParam._m0[80u].z);
        }
        vec4 _3230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2985, _2986, 1.0), 0.0);
        float _3239 = exp2((_3228 * (-1.44269502162933349609375)) * (1.0 - _3230.w));
        float _3240 = log2(_3239);
        float _3256 = log2(_3005);
        _3077 = (exp2(_3256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].x)) * _3230.x) / cbSceneParam._m0[78u].x)) + _3002;
        _3079 = (exp2(_3256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].y)) * _3230.y) / cbSceneParam._m0[78u].y)) + _3003;
        _3081 = (exp2(_3256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].z)) * _3230.z) / cbSceneParam._m0[78u].z)) + _3004;
        _3083 = _3239 * _3005;
    }
    else
    {
        _3077 = _3002;
        _3079 = _3003;
        _3081 = _3004;
        _3083 = _3005;
    }
    float _3095 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3096 = _3095 == 3.0;
    float _3097 = log2(_3083);
    float _3104 = exp2(_3097 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2947 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _919))) + ((_2953 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1727)) * cbPerFrame._m0[3u].x));
    float _3105 = exp2(_3097 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2949 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _919))) + ((_2955 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1727)) * cbPerFrame._m0[3u].x));
    float _3106 = exp2(_3097 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2951 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _919))) + ((_2957 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1727)) * cbPerFrame._m0[3u].x));
    float _3115 = (_3095 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3115 * (_3096 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3077)));
    SV_Target.y = _3115 * (_3096 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.z = _3115 * (_3096 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3081)));
    SV_Target.w = cbInstanceData._m0[_2977].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2977].w;
}


